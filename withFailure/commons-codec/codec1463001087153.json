{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":164,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":208,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":198,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":34,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":55,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":15,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":118,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":131,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":79,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":26,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":78,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":169,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":40,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":143,"org.apache.commons.codec.language.NysiisTest.testCap":103,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":144,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":148,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":145,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":14,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":146,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":129,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":210,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":188,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":161,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":209,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":138,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":18,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":204,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":159,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":123,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":214,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":36,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":207,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":38,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":175,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":41,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":88,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":170,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":128,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":33,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":153,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":197,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":117,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":206,"org.apache.commons.codec.language.NysiisTest.testDropBy":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":52,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":72,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":84,"org.apache.commons.codec.binary.Base64Test.testUUID":3,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":96,"org.apache.commons.codec.binary.Base64Test.testSingletons":160,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":133,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":166,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":189,"org.apache.commons.codec.binary.Base64Test.testPairs":140,"org.apache.commons.codec.binary.Base64Test.testConstructors":116,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":90,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":132,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":71,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":182,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":64,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":217,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":6,"org.apache.commons.codec.language.NysiisTest.testBran":107,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":70,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":193,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":177,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":222,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":92,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":156,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull":218,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":21,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":44,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":127,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":157,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":11,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":12,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":87,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":199,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":185,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":194,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":58,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":122,"org.apache.commons.codec.language.NysiisTest.testDad":104,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":149,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":180,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":142,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":121,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":196,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":101,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":9,"org.apache.commons.codec.language.NysiisTest.testDan":105,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":186,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":98,"org.apache.commons.codec.binary.HexTest.testCustomCharset":5,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":80,"org.apache.commons.codec.language.NysiisTest.testSnat":109,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":203,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":202,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":119,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":63,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":62,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":81,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":187,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":67,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":181,"org.apache.commons.codec.binary.Base64Test.testTriplets":136,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":85,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":99,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":51,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":45,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":48,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":73,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":100,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":158,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":178,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":89,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":150,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":43,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":173,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":65,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":139,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":211,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":49,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":24,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":95,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":7,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":154,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":183,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":42,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":200,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":168,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":46,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":216,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":93,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":74,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":201,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":76,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":220,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":61,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":27,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":174,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":221,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":219,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":32,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":195,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":115,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":86,"org.apache.commons.codec.language.NysiisTest.testTranan":113,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":135,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":39,"org.apache.commons.codec.language.NysiisTest.testFal":106,"org.apache.commons.codec.language.NysiisTest.testSnad":108,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":97,"org.apache.commons.codec.language.MetaphoneTest.testTCH":10,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":120,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":165,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":13,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":215,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":190,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":4,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":54,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":16,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":147,"org.apache.commons.codec.binary.Base64Test.testBase64":167,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":59,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":31,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":151,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":205,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":83,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":57,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":212,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":68,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":82,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":171,"org.apache.commons.codec.binary.Base64Test.testCodec112":155,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":184,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":50,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":20,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":126,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":2,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":110,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":130,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":192,"org.apache.commons.codec.binary.Base64Test.testCodec68":162,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":91,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":8,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":1,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":179,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":172,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":37,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":69,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":75,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":134,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":213,"org.apache.commons.codec.language.NysiisTest.testOthers":112,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":163,"org.apache.commons.codec.language.SoundexTest.testDifference":0,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":176,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":125,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":53,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":30,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":152,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":141},"transformations":[{"failures":[],"tindex":"ec93abd6-17bc-11e6-b163-ffa43aa13ebc","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:211","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)","position":"org.apache.commons.codec.digest.DigestUtils:363","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"status":0},{"failures":[0,1],"tindex":"ec93d2e7-17bc-11e6-b163-31dc1ca71aca","series":0,"name":"replace","transplant":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Soundex:263","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":-1},{"failures":[],"tindex":"ec93f9f8-17bc-11e6-b163-719206229046","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))","position":"org.apache.commons.codec.language.bm.Lang:169","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))"},"status":0},{"failures":[],"tindex":"ec93f9f9-17bc-11e6-b163-bb8b30f19d3b","series":0,"name":"replace","transplant":{"toString":"this.phonemes = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:78","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>()"},"variableMap":{"phonemes":"phonemes"},"type":"adrStmt","transplantationPoint":{"toString":"this.phonemes = phonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:83","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = phonemes"},"status":-3},{"failures":[],"tindex":"ec95ceba-17bc-11e6-b163-ddabfb1e41e6","series":0,"name":"replace","transplant":{"toString":"this.phonemes = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:78","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>()"},"variableMap":{"phonemes":"phonemes"},"type":"adrStmt","transplantationPoint":{"toString":"this.phonemes = phonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:83","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = phonemes"},"status":-3},{"failures":[],"tindex":"ec977c6b-17bc-11e6-b163-7dd662614918","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"switch (inwd[0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((inwd[1]) == 'N') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'A' :\n        if ((inwd[1]) == 'E') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'W' :\n        if ((inwd[1]) == 'R') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n            break;\n        } \n        if ((inwd[1]) == 'H') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n            local.setCharAt(0, 'W');\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'X' :\n        inwd[0] = 'S';\n        local.append(inwd);\n        break;\n    default :\n        local.append(inwd);\n}","position":"org.apache.commons.codec.language.Metaphone:108","type":"CtSwitchImpl","sourcecode":"switch (inwd[0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((inwd[1]) == 'N') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'A' :\n        if ((inwd[1]) == 'E') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'W' :\n        if ((inwd[1]) == 'R') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            break;\n        } \n        if ((inwd[1]) == 'H') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            local.setCharAt(0, 'W');\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'X' :\n        inwd[0] = 'S';\n        local.append(inwd);\n        break;\n    default :\n        local.append(inwd);\n}"},"status":-2},{"failures":[],"tindex":"ec97a37c-17bc-11e6-b163-0b3e24b96369","series":0,"name":"replace","transplant":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"replacedName","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"replacedName","text":"dc"},"type":"adrStmt","transplantationPoint":{"toString":"if (replacedName.contains(dc)) {\n    final java.lang.String singleLetter = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"status":-3},{"failures":[],"tindex":"ec97a37d-17bc-11e6-b163-bd78f6e41431","series":0,"name":"replace","transplant":{"toString":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:346","type":"CtAssignmentImpl","sourcecode":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:571","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"ec97a37e-17bc-11e6-b163-399baa6ffede","series":0,"name":"replace","transplant":{"toString":"minRating = getMinRating(sumLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"minRating = getMinRating(sumLength)"},"variableMap":{"sumLength":"bitlen","minRating":"bitlen"},"type":"adrStmt","transplantationPoint":{"toString":"bitlen = ((bitlen + 7) >> 3) << 3","position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"bitlen = ((bitlen + 7) >> 3) << 3"},"status":-2},{"failures":[2,3,4,5,6,7],"tindex":"ec97ca8f-17bc-11e6-b163-e7a69696ec45","series":0,"name":"add","transplant":{"toString":"b[(offset++)] = ((byte)(iValue & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"variableMap":{"b":"out","offset":"f","iValue":"i"},"type":"adrStmt","transplantationPoint":{"toString":"out[i] = ((byte)(f & 255))","position":"org.apache.commons.codec.binary.Hex:93","type":"CtAssignmentImpl","sourcecode":"out[i] = ((byte)(f & 255))"},"status":-1},{"failures":[],"tindex":"ec97ca90-17bc-11e6-b163-ef8a8e751472","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_S"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_S","position":"org.apache.commons.codec.language.Nysiis:133","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"ec97ca91-17bc-11e6-b163-bdecd0ce22bb","series":0,"name":"replace","transplant":{"toString":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:538","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}"},"variableMap":{"index":"i","value":"name1LtRStart"},"type":"adrStmt","transplantationPoint":{"toString":"if (name1LtRStart.equals(name2RtLStart)) {\n    name1Char[i] = ' ';\n    name2Char[i] = ' ';\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtIfImpl","sourcecode":"if (name1LtRStart.equals(name2RtLStart)) {\n    name1Char[i] = ' ';\n    name2Char[i] = ' ';\n} "},"status":-2},{"failures":[],"tindex":"ec97ca92-17bc-11e6-b163-e764996d0aa9","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean useChunking = (lineLength > 0) && (chunkSeparatorLength > 0)","position":"org.apache.commons.codec.binary.BaseNCodec:208","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (lineLength > 0) && (chunkSeparatorLength > 0)"},"status":-2},{"failures":[],"tindex":"ec97f1a3-17bc-11e6-b163-d77e8e2b7425","series":0,"name":"replace","transplant":{"toString":"lastChar = ch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"variableMap":{"ch":"code","lastChar":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '4'","position":"org.apache.commons.codec.language.ColognePhonetic:379","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-2},{"failures":[],"tindex":"ec97f1a4-17bc-11e6-b163-79f93664894c","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"i","encodeSize":"i"},"type":"adrStmt","transplantationPoint":{"toString":"i = rulesApplication.getI()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:472","type":"CtAssignmentImpl","sourcecode":"i = rulesApplication.getI()"},"status":-3},{"failures":[],"tindex":"ec97f1a5-17bc-11e6-b163-53e91c62cfd5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER","position":"org.apache.commons.codec.language.bm.Rule:526","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern"},"variableMap":{"org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER":"rContext"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.rContext","position":"org.apache.commons.codec.language.bm.Rule:684","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern"},"status":-2},{"failures":[],"tindex":"ec9818b6-17bc-11e6-b163-3379d0d52114","series":0,"name":"replace","transplant":{"toString":"sb.append(c)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:365","type":"CtInvocationImpl","sourcecode":"sb.append(c)"},"variableMap":{"c":"symb","sb":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append(symb)","position":"org.apache.commons.codec.language.Metaphone:315","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-3},{"failures":[],"tindex":"ec9818b7-17bc-11e6-b163-2bee6abf2ea3","series":0,"name":"replace","transplant":{"toString":"builder.append('0')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"variableMap":{"builder":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd)","position":"org.apache.commons.codec.language.Metaphone:134","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-3},{"failures":[],"tindex":"ec9818b8-17bc-11e6-b163-f75a6ed2250d","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"d\", \"t\")","position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = str.substring(0, ((str.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"status":-2},{"failures":[],"tindex":"ec9818b9-17bc-11e6-b163-4dabbdcae466","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:600","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"variableMap":{"str":"key","charset":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:510","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"status":-2},{"failures":[],"tindex":"ec983fca-17bc-11e6-b163-cdc19725d555","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH)","position":"org.apache.commons.codec.digest.DigestUtils:798","type":"CtAssignmentImpl","sourcecode":"read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int)"},"status":-2},{"failures":[],"tindex":"ec983fcb-17bc-11e6-b163-d7c3d74eea8e","series":0,"name":"replace","transplant":{"toString":"char nextChar","position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"status":-2},{"failures":[],"tindex":"ec983fcc-17bc-11e6-b163-23250dc549e6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (rule.acceptOnMatch) {\n    langs.retainAll(rule.languages);\n} else {\n    langs.removeAll(rule.languages);\n}","position":"org.apache.commons.codec.language.bm.Lang:220","type":"CtIfImpl","sourcecode":"if (rule.boolean) {\n    langs.retainAll(rule.java.util.Set<java.lang.String>);\n} else {\n    langs.removeAll(rule.java.util.Set<java.lang.String>);\n}"},"status":0},{"failures":[],"tindex":"ec983fcd-17bc-11e6-b163-9317b3efde9c","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:296","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"ec983fce-17bc-11e6-b163-03d0a1b3d1d6","series":0,"name":"add","transplant":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"test"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n    final java.lang.String substring = string.substring(index, (index + (test.length())));\n    matches = substring.equals(test);\n} ","position":"org.apache.commons.codec.language.Metaphone:362","type":"CtIfImpl","sourcecode":"if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n    final java.lang.String java.lang.String = string.substring(index, (index + (test.length())));\n    matches = substring.equals(test);\n} "},"status":-1},{"failures":[],"tindex":"ec9866df-17bc-11e6-b163-09ce420c2345","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (!(baseNCodec.hasData(context))) {\n    final byte[] buf = new byte[doEncode ? 4096 : 8192];\n    final int c = in.read(buf);\n    if (doEncode) {\n        baseNCodec.encode(buf, 0, c, context);\n    } else {\n        baseNCodec.decode(buf, 0, c, context);\n    }\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:156","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n    final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n    final int int = java.io.InputStream.read(buf);\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n} "},"status":-2},{"failures":[30,31],"tindex":"ec9866e0-17bc-11e6-b163-89e32018b6e5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:488","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"ec9866e1-17bc-11e6-b163-f5993d1d2909","series":0,"name":"replace","transplant":{"toString":"return isDoubleMetaphoneEqual(value1, value2, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:231","type":"CtReturnImpl","sourcecode":"return isDoubleMetaphoneEqual(value1, value2, false)"},"variableMap":{"value2":"value","value1":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1))","position":"org.apache.commons.codec.language.DoubleMetaphone:858","type":"CtReturnImpl","sourcecode":"return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1))"},"status":-3},{"failures":[],"tindex":"ec9866e2-17bc-11e6-b163-31cb374f5aa9","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"variableMap":{"encodeSize":"d","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"d"},"type":"adrStmt","transplantationPoint":{"toString":"d = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:353","type":"CtAssignmentImpl","sourcecode":"d = results[1]"},"status":-3},{"failures":[],"tindex":"ec988df3-17bc-11e6-b163-55675b310832","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"element"},"type":"adrStmt","transplantationPoint":{"toString":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"status":-2},{"failures":[],"tindex":"ec988df4-17bc-11e6-b163-39ea592109b1","series":0,"name":"replace","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if (i >= (o2.phonemeText.length())) {\n    return +1;\n} ","position":"org.apache.commons.codec.language.bm.Rule:89","type":"CtIfImpl","sourcecode":"if (i >= (o2.java.lang.StringBuilder.length())) {\n    return +1;\n} "},"status":-2},{"failures":[],"tindex":"ec988df5-17bc-11e6-b163-e59cc381cd4d","series":0,"name":"replace","transplant":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"variableMap":{"singleByte":"tempResult"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"status":-3},{"failures":[],"tindex":"ec988df6-17bc-11e6-b163-e50edef4705e","series":0,"name":"add","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:369","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-2},{"failures":[],"tindex":"ec988df7-17bc-11e6-b163-e9de1fa28e45","series":0,"name":"replace","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"wdsz","minRating":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"wdsz"},"type":"adrStmt","transplantationPoint":{"toString":"while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n    final char symb = local.charAt(n);\n    if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n        n++;\n    } else {\n        switch (symb) {\n            case 'A' :\n            case 'E' :\n            case 'I' :\n            case 'O' :\n            case 'U' :\n                if (n == 0) {\n                    code.append(symb);\n                } \n                break;\n            case 'B' :\n                if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                    break;\n                } \n                code.append(symb);\n                break;\n            case 'C' :\n                if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    break;\n                } \n                if (regionMatch(local, n, \"CIA\")) {\n                    code.append('X');\n                    break;\n                } \n                if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    code.append('S');\n                    break;\n                } \n                if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                    code.append('K');\n                    break;\n                } \n                if (isNextChar(local, n, 'H')) {\n                    if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                        code.append('K');\n                    } else {\n                        code.append('X');\n                    }\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'D' :\n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 2)))) >= 0)) {\n                    code.append('J');\n                    n += 2;\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'G' :\n                if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                    break;\n                } \n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                    break;\n                } \n                if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                    break;\n                } \n                if (isPreviousChar(local, n, 'G')) {\n                    hard = true;\n                } else {\n                    hard = false;\n                }\n                if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                    code.append('J');\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'H' :\n                if (isLastChar(wdsz, n)) {\n                    break;\n                } \n                if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.VARSON.indexOf(local.charAt((n - 1)))) >= 0)) {\n                    break;\n                } \n                if (isVowel(local, (n + 1))) {\n                    code.append('H');\n                } \n                break;\n            case 'F' :\n            case 'J' :\n            case 'L' :\n            case 'M' :\n            case 'N' :\n            case 'R' :\n                code.append(symb);\n                break;\n            case 'K' :\n                if (n > 0) {\n                    if (!(isPreviousChar(local, n, 'C'))) {\n                        code.append(symb);\n                    } \n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'P' :\n                if (isNextChar(local, n, 'H')) {\n                    code.append('F');\n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'Q' :\n                code.append('K');\n                break;\n            case 'S' :\n                if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                    code.append('X');\n                } else {\n                    code.append('S');\n                }\n                break;\n            case 'T' :\n                if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                    code.append('X');\n                    break;\n                } \n                if (regionMatch(local, n, \"TCH\")) {\n                    break;\n                } \n                if (regionMatch(local, n, \"TH\")) {\n                    code.append('0');\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'V' :\n                code.append('F');\n                break;\n            case 'W' :\n            case 'Y' :\n                if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                    code.append(symb);\n                } \n                break;\n            case 'X' :\n                code.append('K');\n                code.append('S');\n                break;\n            case 'Z' :\n                code.append('S');\n                break;\n            default :\n                break;\n        }\n        n++;\n    }\n    if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n        code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n    } \n}","position":"org.apache.commons.codec.language.Metaphone:148","type":"CtWhileImpl","sourcecode":"while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n    final char char = local.charAt(n);\n    if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n        n++;\n    } else {\n        switch (symb) {\n            case 'A' :\n            case 'E' :\n            case 'I' :\n            case 'O' :\n            case 'U' :\n                if (n == 0) {\n                    code.append(symb);\n                } \n                break;\n            case 'B' :\n                if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                    break;\n                } \n                code.append(symb);\n                break;\n            case 'C' :\n                if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    break;\n                } \n                if (regionMatch(local, n, \"CIA\")) {\n                    code.append('X');\n                    break;\n                } \n                if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    code.append('S');\n                    break;\n                } \n                if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                    code.append('K');\n                    break;\n                } \n                if (isNextChar(local, n, 'H')) {\n                    if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                        code.append('K');\n                    } else {\n                        code.append('X');\n                    }\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'D' :\n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                    code.append('J');\n                    n += 2;\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'G' :\n                if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                    break;\n                } \n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                    break;\n                } \n                if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                    break;\n                } \n                if (isPreviousChar(local, n, 'G')) {\n                    hard = true;\n                } else {\n                    hard = false;\n                }\n                if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                    code.append('J');\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'H' :\n                if (isLastChar(wdsz, n)) {\n                    break;\n                } \n                if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                    break;\n                } \n                if (isVowel(local, (n + 1))) {\n                    code.append('H');\n                } \n                break;\n            case 'F' :\n            case 'J' :\n            case 'L' :\n            case 'M' :\n            case 'N' :\n            case 'R' :\n                code.append(symb);\n                break;\n            case 'K' :\n                if (n > 0) {\n                    if (!(isPreviousChar(local, n, 'C'))) {\n                        code.append(symb);\n                    } \n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'P' :\n                if (isNextChar(local, n, 'H')) {\n                    code.append('F');\n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'Q' :\n                code.append('K');\n                break;\n            case 'S' :\n                if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                    code.append('X');\n                } else {\n                    code.append('S');\n                }\n                break;\n            case 'T' :\n                if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                    code.append('X');\n                    break;\n                } \n                if (regionMatch(local, n, \"TCH\")) {\n                    break;\n                } \n                if (regionMatch(local, n, \"TH\")) {\n                    code.append('0');\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'V' :\n                code.append('F');\n                break;\n            case 'W' :\n            case 'Y' :\n                if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                    code.append(symb);\n                } \n                break;\n            case 'X' :\n                code.append('K');\n                code.append('S');\n                break;\n            case 'Z' :\n                code.append('S');\n                break;\n            default :\n                break;\n        }\n        n++;\n    }\n    if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n        code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n    } \n}"},"status":-3},{"failures":[],"tindex":"ec98dc18-17bc-11e6-b163-d5ec1817100a","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:253","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.this.int"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:773","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[],"tindex":"ec990329-17bc-11e6-b163-657ed8ab8dd3","series":0,"name":"replace","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}","position":"org.apache.commons.codec.net.URLCodec:335","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.net.QCodec:289","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[32,33,34,35,36,37,38,39,40,41],"tindex":"ec99032a-17bc-11e6-b163-777b667afe60","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name1 = removeVowels(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:231","type":"CtAssignmentImpl","sourcecode":"name1 = removeVowels(name1)"},"status":-1},{"failures":[],"tindex":"ec99032b-17bc-11e6-b163-01a31468bd83","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Caverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.net.URLCodec:338","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[30,31,42],"tindex":"ec99032c-17bc-11e6-b163-6fc939f76b81","series":0,"name":"replace","transplant":{"toString":"inMultilineComment = false","position":"org.apache.commons.codec.language.bm.Rule:414","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"variableMap":{"inMultilineComment":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:878","type":"CtAssignmentImpl","sourcecode":"result = true"},"status":-1},{"failures":[43,44],"tindex":"ec99032d-17bc-11e6-b163-1766aa0eed98","series":0,"name":"replace","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return 0","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"tindex":"ec992a3e-17bc-11e6-b163-ab094dffd3d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"continue","position":"org.apache.commons.codec.language.bm.Lang:162","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[71,72,73],"tindex":"ec992a3f-17bc-11e6-b163-b3bdf3cb0bab","series":0,"name":"replace","transplant":{"toString":"for (int i = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:81","type":"CtForImpl","sourcecode":"for (int int = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(' ')","position":"org.apache.commons.codec.net.QCodec:65","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(' ')"},"status":-1},{"failures":[],"tindex":"ec992a40-17bc-11e6-b163-137a0c1f259f","series":0,"name":"replace","transplant":{"toString":"cnt -= blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","cnt":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base32:356","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[],"tindex":"ec992a41-17bc-11e6-b163-07d19eb3694d","series":0,"name":"replace","transplant":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"ec992a42-17bc-11e6-b163-e17b2001d061","series":0,"name":"replace","transplant":{"toString":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n        this.lineSeparator = new byte[lineSeparator.length];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n    } else {\n        this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n        this.lineSeparator = null;\n    }\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:278","type":"CtIfImpl","sourcecode":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n        this.byte[] = new byte[lineSeparator.int];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n    } else {\n        this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        this.byte[] = null;\n    }\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"i","encodeSize":"b","length":"i","lineSeparator":"bytes","lineLength":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) {\n            continue;\n        } \n        final int u = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.LF))) {\n    buffer.write(b);\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-3},{"failures":[],"tindex":"ec995153-17bc-11e6-b163-0117edcb5af5","series":0,"name":"add","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"org.apache.commons.codec.language.bm.ResourceConstants.CMT","leftCharacter":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","rightCharacter":"languageRulesResourceName","location":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inExtendedComment = true;\n} else {\n    final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 3) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n    } \n    final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n    final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n    final boolean accept = parts[2].equals(\"true\");\n    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n}","position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 3) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n    } \n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n    final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n    final boolean boolean = parts[2].equals(\"true\");\n    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n}"},"status":-2},{"failures":[],"tindex":"ec997864-17bc-11e6-b163-4dc73d350276","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int len = chars.length","position":"org.apache.commons.codec.language.Nysiis:278","type":"CtLocalVariableImpl","sourcecode":"final int int = chars.int"},"status":-2},{"failures":[74,75,76],"tindex":"ec997865-17bc-11e6-b163-3b6936aea643","series":0,"name":"replace","transplant":{"toString":"return firstThree + lastThree","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return firstThree + lastThree"},"variableMap":{"firstThree":"salt","lastThree":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt)","position":"org.apache.commons.codec.digest.Crypt:69","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt)"},"status":-1},{"failures":[77,78,79,80,81,82,83,84,85,86,87,88],"tindex":"ec997866-17bc-11e6-b163-97545e88fba6","series":0,"name":"replace","transplant":{"toString":"singleByte[0] = ((byte)(i))","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(i))"},"variableMap":{"i":"org.apache.commons.codec.binary.Base32.MASK_5BITS","singleByte":"encodeTable"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:509","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,89,90],"tindex":"ec997867-17bc-11e6-b163-a5282739cfa3","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", nameType.getName())","position":"org.apache.commons.codec.language.bm.Languages:203","type":"CtReturnImpl","sourcecode":"return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", nameType.getName())"},"status":-1},{"failures":[91,92,93,94,95,96,97],"tindex":"ec997868-17bc-11e6-b163-d3cd66e8eb6d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"status":-1},{"failures":[],"tindex":"ec997869-17bc-11e6-b163-7fc1265f38f2","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"while (read > (-1)) {\n    mac.update(buffer, 0, read);\n    read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH);\n}","position":"org.apache.commons.codec.digest.HmacUtils:769","type":"CtWhileImpl","sourcecode":"while (read > (-1)) {\n    mac.update(buffer, 0, read);\n    read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int);\n}"},"status":-2},{"failures":[],"tindex":"ec999f7a-17bc-11e6-b163-7db4e06be5c9","series":0,"name":"replace","transplant":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"variableMap":{"singleByte":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":-3},{"failures":[],"tindex":"ec999f7b-17bc-11e6-b163-57f9fc2ee060","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    if ((content.length()) == 0) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return (input.length()) == 0;\n            }\n        };\n    } else {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return input.equals(content);\n            }\n        };\n    }\n} else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n    return org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER;\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:506","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    if ((content.length()) == 0) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return (input.length()) == 0;\n            }\n        };\n    } else {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return input.equals(content);\n            }\n        };\n    }\n} else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    };\n} "},"status":0},{"failures":[],"tindex":"ec99c68c-17bc-11e6-b163-a78eccf5b682","series":0,"name":"replace","transplant":{"toString":"int patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[98,99],"tindex":"ec99c68d-17bc-11e6-b163-d31bec08d026","series":0,"name":"replace","transplant":{"toString":"a ^= t << n","position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"variableMap":{"a":"a","t":"a","n":"a"},"type":"adrStmt","transplantationPoint":{"toString":"results[0] = a","position":"org.apache.commons.codec.digest.UnixCrypt:409","type":"CtAssignmentImpl","sourcecode":"results[0] = a"},"status":-1},{"failures":[],"tindex":"ec99c68e-17bc-11e6-b163-49fb7a24eb36","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"toString":"line = line.trim()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:277","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"status":-2},{"failures":[100],"tindex":"ec99c68f-17bc-11e6-b163-fbad9df68660","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtIfImpl","sourcecode":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} "},"status":-1},{"failures":[],"tindex":"ec99c690-17bc-11e6-b163-519160fb97f6","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((mapped != '0') && (mapped != last)) {\n    out[(count++)] = mapped;\n} ","position":"org.apache.commons.codec.language.Soundex:275","type":"CtIfImpl","sourcecode":"if ((mapped != '0') && (mapped != last)) {\n    out[(count++)] = mapped;\n} "},"status":-2},{"failures":[101,102,103,104,105,106,107,108,109,110,111,112,113,114],"tindex":"ec99c691-17bc-11e6-b163-83ced424e5d9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.length)","position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"status":-1},{"failures":[115],"tindex":"ec99c692-17bc-11e6-b163-0d389473b59d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"encode = (!(printable.get(b))) || ((i > ((bytes.length) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:320","type":"CtAssignmentImpl","sourcecode":"encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)))"},"status":-1},{"failures":[],"tindex":"ec99c693-17bc-11e6-b163-b3aa00753a5d","series":0,"name":"add","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}","position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtIfImpl","sourcecode":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} "},"status":-2},{"failures":[116,117],"tindex":"ec99eda4-17bc-11e6-b163-f5a03c5fe3de","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.binary.BaseNCodec:501","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[8],"tindex":"ec99eda5-17bc-11e6-b163-77c85fc392dc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:197","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[],"tindex":"ec99eda6-17bc-11e6-b163-9f1098e64fdc","series":0,"name":"add","transplant":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:144","type":"CtReturnImpl","sourcecode":"return name"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"return txt.toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.Metaphone:100","type":"CtReturnImpl","sourcecode":"return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[118,119,74,75,120,121,122,123],"tindex":"ec99eda7-17bc-11e6-b163-e98cb986bb27","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(keyBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:206","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"ec99eda8-17bc-11e6-b163-a5e6941d56a2","series":0,"name":"replace","transplant":{"toString":"return buffer.toString()","position":"org.apache.commons.codec.digest.Sha2Crypt:506","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"variableMap":{"buffer":"result"},"type":"adrStmt","transplantationPoint":{"toString":"return result.substring(1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:463","type":"CtReturnImpl","sourcecode":"return result.substring(1)"},"status":0},{"failures":[30,31],"tindex":"ec99eda9-17bc-11e6-b163-9f814e466ad3","series":0,"name":"replace","transplant":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:666","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"ec99edaa-17bc-11e6-b163-bf80a7d42ff3","series":0,"name":"replace","transplant":{"toString":"this.replacementAtStart = replacementAtStart.split(\"\\\\|\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:171","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementAtStart.split(\"\\\\|\")"},"variableMap":{"replacementAtStart":"replacementDefault"},"type":"adrStmt","transplantationPoint":{"toString":"this.replacementDefault = replacementDefault.split(\"\\\\|\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:173","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementDefault.split(\"\\\\|\")"},"status":-2},{"failures":[],"tindex":"ec9bc26b-17bc-11e6-b163-3d28386979dc","series":0,"name":"replace","transplant":{"toString":"buffer.append(saltString)","position":"org.apache.commons.codec.digest.Sha2Crypt:429","type":"CtInvocationImpl","sourcecode":"buffer.append(saltString)"},"variableMap":{"saltString":"pat","buffer":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", pat='\").append(pat).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:465","type":"CtInvocationImpl","sourcecode":"sb.append(\", pat='\").append(pat).append('\\'')"},"status":0},{"failures":[124,125,126,127,128,129,130,131,132,133,134,135,81,83,136,2,137,138,139,140,3,141,116,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,4,170,171,172,173,174,175,176,177,84,85,178,179,180,43,181,182,183,184,185,186,187,188,189,190,191,192,193,86,44,194,195,196,197,198,88,199,200,201,202,203,204,205,117],"tindex":"ec9bc26c-17bc-11e6-b163-65fb5c6ff300","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.BaseNCodec:504","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[30,31],"tindex":"ec9bc26d-17bc-11e6-b163-17679fd6c170","series":0,"name":"replace","transplant":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K', 'J')","position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[],"tindex":"ec9bc26e-17bc-11e6-b163-19d6ded49b59","series":0,"name":"replace","transplant":{"toString":"final java.lang.String body = ph.substring(1, ((ph.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"input"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String text = input.toLowerCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.bm.Lang:215","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[],"tindex":"ec9bc26f-17bc-11e6-b163-153f5ac762d1","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}"},"status":-2},{"failures":[98,99],"tindex":"ec9be980-17bc-11e6-b163-496d7eada931","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:301","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-1},{"failures":[],"tindex":"ec9be981-17bc-11e6-b163-f158196a1033","series":0,"name":"replace","transplant":{"toString":"this.algorithm = algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:78","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = algorithm"},"variableMap":{"algorithm":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)","position":"org.apache.commons.codec.language.Soundex:262","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-2},{"failures":[30,31,206,207,208],"tindex":"ec9be982-17bc-11e6-b163-df11cc2b1d21","series":0,"name":"add","transplant":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n    result.append('K');\n} else {\n    result.append('X', 'K');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n    result.append('K');\n} else {\n    result.append('X', 'K');\n}"},"variableMap":{"result":"result","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n    result.append('J', 'A');\n} else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n    result.append('J', 'H');\n} else if (index == ((value.length()) - 1)) {\n    result.append('J', ' ');\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:526","type":"CtIfImpl","sourcecode":"if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n    result.append('J', 'A');\n} else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n    result.append('J', 'H');\n} else if (index == ((value.length()) - 1)) {\n    result.append('J', ' ');\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} "},"status":-1},{"failures":[98,209,210,99],"tindex":"ec9be983-17bc-11e6-b163-0b55d84a4033","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for ( ; i < 13 ; i++) {\n    int j = 0;\n    int c = 0;\n    for ( ; j < 6 ; j++) {\n        c <<= 1;\n        if (((b[y]) & u) != 0) {\n            c |= 1;\n        } \n        u >>>= 1;\n        if (u == 0) {\n            y++;\n            u = 128;\n        } \n        buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.COV2CHAR[c])));\n    }\n}","position":"org.apache.commons.codec.digest.UnixCrypt:234","type":"CtForImpl","sourcecode":"for ( ; i < 13 ; i++) {\n    int int = 0;\n    int int = 0;\n    for ( ; j < 6 ; j++) {\n        c <<= 1;\n        if (((b[y]) & u) != 0) {\n            c |= 1;\n        } \n        u >>>= 1;\n        if (u == 0) {\n            y++;\n            u = 128;\n        } \n        buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n    }\n}"},"status":-1},{"failures":[50,53,58,59,62,63],"tindex":"ec9c1094-17bc-11e6-b163-238add766949","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (i >= (o2.phonemeText.length())) {\n    return +1;\n} ","position":"org.apache.commons.codec.language.bm.Rule:89","type":"CtIfImpl","sourcecode":"if (i >= (o2.java.lang.StringBuilder.length())) {\n    return +1;\n} "},"status":-1},{"failures":[],"tindex":"ec9c1095-17bc-11e6-b163-8b41d62847df","series":0,"name":"replace","transplant":{"toString":"final byte[] result = new byte[context.pos]","position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[context.int]"},"variableMap":{"pos":"encodeSize","context":"context"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(encodeSize, context)","position":"org.apache.commons.codec.binary.Base64:342","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-2},{"failures":[211,212,213],"tindex":"ec9c1096-17bc-11e6-b163-79f2e3ed6b13","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"c\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"mb$\", \"m2\")","position":"org.apache.commons.codec.language.Caverphone2:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"status":-1},{"failures":[214],"tindex":"ec9c1097-17bc-11e6-b163-f1f686e93053","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"y\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"2\")"},"status":-1},{"failures":[],"tindex":"ec9c1098-17bc-11e6-b163-5365e0900388","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512, key)","position":"org.apache.commons.codec.digest.HmacUtils:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[98,99],"tindex":"ec9c1099-17bc-11e6-b163-194940f166de","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)(iValue & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"status":-1},{"failures":[215,216,217],"tindex":"ec9c109a-17bc-11e6-b163-47a73f83e357","series":0,"name":"add","transplant":{"toString":"l_ascii[(jj - bits)] = '1'","position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"bits","l_ascii":"l_ascii","bits":"bits"},"type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"status":-1},{"failures":[218,217],"tindex":"ec9c109b-17bc-11e6-b163-87a9cdac9dec","series":0,"name":"replace","transplant":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:417","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"variableMap":{"obj":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))","position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"status":-1},{"failures":[],"tindex":"ec9c37ac-17bc-11e6-b163-8d3c92a2b571","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:128","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location))","position":"org.apache.commons.codec.language.bm.Rule:437","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location))"},"status":-2},{"failures":[],"tindex":"ec9c37ad-17bc-11e6-b163-4fecb6396fc2","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"wh3\", \"Wh3\")","position":"org.apache.commons.codec.language.Caverphone2:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":-3},{"failures":[91,219,92,93,94,95,96,220,97],"tindex":"ec9c37ae-17bc-11e6-b163-cf8f903cfe8e","series":0,"name":"replace","transplant":{"toString":"ctx.update(finalb[j])","position":"org.apache.commons.codec.digest.Md5Crypt:239","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb[j])"},"variableMap":{"finalb":"finalb","ctx":"ctx1","j":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE)","position":"org.apache.commons.codec.digest.Md5Crypt:261","type":"CtInvocationImpl","sourcecode":"ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int)"},"status":-1},{"failures":[],"tindex":"ec9c37af-17bc-11e6-b163-f71112819485","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true","position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true"},"variableMap":{"found":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"toString":"inMultilineComment = false","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:262","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"status":-3},{"failures":[30,31,206,42,208],"tindex":"ec9c37b0-17bc-11e6-b163-d573447e99e1","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:399","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"ec9c37b1-17bc-11e6-b163-bb6c3a58ce7b","series":0,"name":"add","transplant":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"variableMap":{"bigBytes":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}","position":"org.apache.commons.codec.digest.HmacUtils:634","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-2},{"failures":[30,42,208],"tindex":"ec9c37b2-17bc-11e6-b163-f3ffe2582670","series":0,"name":"replace","transplant":{"toString":"sb.append(\"Rule\")","position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"variableMap":{"sb":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:981","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[],"tindex":"ec9c5ec3-17bc-11e6-b163-0fd41d72725d","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:361","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-2},{"failures":[30,31],"tindex":"ec9c5ec4-17bc-11e6-b163-73bc5e1d6008","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:535","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"status":-1},{"failures":[],"tindex":"ec9c5ec5-17bc-11e6-b163-875555bdb85a","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")","position":"org.apache.commons.codec.binary.BaseNCodec:336","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[221],"tindex":"ec9c5ec6-17bc-11e6-b163-8bc034cdb0ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"compareCode = s1.compareTo(s2)","position":"org.apache.commons.codec.StringEncoderComparator:84","type":"CtAssignmentImpl","sourcecode":"compareCode = s1.compareTo(s2)"},"status":-1},{"failures":[222],"tindex":"ec9c5ec7-17bc-11e6-b163-1def8fe2c58c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)","position":"org.apache.commons.codec.binary.Base64:554","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)"},"variableMap":{"binaryData":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:552","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal()"},"status":-1},{"failures":[],"tindex":"ec9c5ec8-17bc-11e6-b163-e1f2d4c88873","series":0,"name":"replace","transplant":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)"},"status":-2},{"failures":[],"tindex":"ec9c5ec9-17bc-11e6-b163-e1e501bdb760","series":0,"name":"replace","transplant":{"toString":"final char[] out = new char[l << 1]","position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"variableMap":{"l":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] newData = new char[length]","position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":62,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":78,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":49,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":112,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":67,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":111,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":24,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":22,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":11,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":80,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":90,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":58,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":70,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":2,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":48,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":3,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":53,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":102,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":77,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":76,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":33,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":35,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":4,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":100,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":94,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":99,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":32,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":95,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":83,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":106,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":39,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":97,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":1,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":110,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":114,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":47,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":16,"org.apache.commons.codec.language.SoundexTest.testB650":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":59,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":109,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":54,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":105,"org.apache.commons.codec.language.SoundexTest.testNewInstance":29,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":71,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":64,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":66,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":74,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":72,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":44,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":98,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":19,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":89,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":7,"org.apache.commons.codec.language.NysiisTest.testDropBy":92,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":116,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":96,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":113,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":10,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":69,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":84,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":37,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":50,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":82,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":87,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":81,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":104,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":51,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":86,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":85,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":103,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":5,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":30,"org.apache.commons.codec.language.NysiisTest.testBran":91,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":93,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":101,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":27,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":107,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":15,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":55,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":57,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":108,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":73,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":17,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":75,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":9,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":43,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":46,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":88,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":68,"org.apache.commons.codec.language.SoundexTest.testDifference":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":115,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":36},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"e1fedbd2-16e0-11e6-9f69-67e6a5275cdd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = false","position":"org.apache.commons.codec.language.bm.Languages:185","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"status":-1},{"failures":[],"tindex":"e1ff02e3-16e0-11e6-9f69-6dbdc6b8bfea","series":0,"name":"replace","transplant":{"toString":"for (int i = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i);\n}","position":"org.apache.commons.codec.net.URLCodec:82","type":"CtForImpl","sourcecode":"for (int int = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(')')","position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"status":-2},{"failures":[],"tindex":"e1ff02e4-16e0-11e6-9f69-ab13b54d6942","series":0,"name":"replace","transplant":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.binary.BaseNCodec:378","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"variableMap":{"obj":"source"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(source)))","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:88","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(source)))"},"status":-2},{"failures":[],"tindex":"e1ff29f5-16e0-11e6-9f69-cdd9a3ace54d","series":0,"name":"add","transplant":{"toString":"final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])","position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1])","position":"org.apache.commons.codec.language.bm.Rule:451","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1])"},"status":-2},{"failures":[],"tindex":"e1ff29f6-16e0-11e6-9f69-93c872dbe00b","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.bm.Rule:446","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[],"tindex":"e1ff29f7-16e0-11e6-9f69-9b28d9c8c8e2","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern p = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher m = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"line","salt":"line","prefix":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"e1ff5108-16e0-11e6-9f69-f99831894c0c","series":0,"name":"replace","transplant":{"toString":"name2Char[(name2Size - i)] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:327","type":"CtAssignmentImpl","sourcecode":"name2Char[(name2Size - i)] = ' '"},"variableMap":{"name2Char":"out","i":"count","name2Size":"count"},"type":"adrStmt","transplantationPoint":{"toString":"out[(count++)] = mapped","position":"org.apache.commons.codec.language.Soundex:276","type":"CtAssignmentImpl","sourcecode":"out[(count++)] = mapped"},"status":-1},{"failures":[],"tindex":"e1ff5109-16e0-11e6-9f69-eff9eac0c7f2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"status":0},{"failures":[],"tindex":"e1ff510a-16e0-11e6-9f69-4546115c2144","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"altCtx.reset()","position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"status":-2},{"failures":[],"tindex":"e1ff510b-16e0-11e6-9f69-39e9f2be7d1c","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(data, start, newData, 0, length)","position":"org.apache.commons.codec.language.ColognePhonetic:242","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(char[], start, newData, 0, length)"},"variableMap":{"data":"chrs","start":"length","length":"length","newData":"chrs"},"type":"adrStmt","transplantationPoint":{"toString":"for (int index = 0 ; index < (chrs.length) ; index++) {\n    if ((chrs[index]) > 'Z') {\n        for (final char[] element : org.apache.commons.codec.language.ColognePhonetic.PREPROCESS_MAP) {\n            if ((chrs[index]) == (element[0])) {\n                chrs[index] = element[1];\n                break;\n            } \n        }\n    } \n}","position":"org.apache.commons.codec.language.ColognePhonetic:433","type":"CtForImpl","sourcecode":"for (int int = 0 ; index < (chrs.int) ; index++) {\n    if ((chrs[index]) > 'Z') {\n        for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n            if ((chrs[index]) == (element[0])) {\n                chrs[index] = element[1];\n                break;\n            } \n        }\n    } \n}"},"status":-3},{"failures":[36,37,38,39,40],"tindex":"e1ff781c-16e0-11e6-9f69-cd4719d4a464","series":0,"name":"replace","transplant":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"value"},"type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-1},{"failures":[41,42,43],"tindex":"e1ff781d-16e0-11e6-9f69-c52e0c115b41","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(finalb, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"status":-1},{"failures":[44,45,46,47,48,41,42,43],"tindex":"e1ff781e-16e0-11e6-9f69-bd430bcd4aae","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(sBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"saltBytes"},"type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(saltBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:200","type":"CtInvocationImpl","sourcecode":"altCtx.update(saltBytes)"},"status":-1},{"failures":[36,37,39],"tindex":"e1ff9f2f-16e0-11e6-9f69-0b430aa3b45d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[44,45,46,47,48,41,42,43],"tindex":"e1ff9f30-16e0-11e6-9f69-dfbfc18e33b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:396","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[],"tindex":"e1ff9f31-16e0-11e6-9f69-dbb2c380dc78","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this","position":"org.apache.commons.codec.language.bm.Rule:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (open >= 0) {\n    if (!(ph.endsWith(\"]\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n    } \n    final java.lang.String before = ph.substring(0, open);\n    final java.lang.String in = ph.substring((open + 1), ((ph.length()) - 1));\n    final java.util.Set<java.lang.String> langs = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE);\n}","position":"org.apache.commons.codec.language.bm.Rule:367","type":"CtIfImpl","sourcecode":"if (open >= 0) {\n    if (!(ph.endsWith(\"]\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n    } \n    final java.lang.String java.lang.String = ph.substring(0, open);\n    final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n}"},"status":-2},{"failures":[],"tindex":"e1ffc642-16e0-11e6-9f69-a9879dfeaba5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)))","position":"org.apache.commons.codec.language.AbstractCaverphone:60","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)))"},"variableMap":{"source":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:531","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"e1ffc643-16e0-11e6-9f69-9b345c5c9655","series":0,"name":"replace","transplant":{"toString":"this.charset = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET","position":"org.apache.commons.codec.binary.Hex:190","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.java.nio.charset.Charset"},"variableMap":{"charset":"charset","org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"this.charset = charset","position":"org.apache.commons.codec.net.QCodec:130","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-3},{"failures":[],"tindex":"e1ffed54-16e0-11e6-9f69-17427f8cf845","series":0,"name":"replace","transplant":{"toString":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:538","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}"},"variableMap":{"index":"n","value":"org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < n ; i++) {\n    final char c = accentedWord.charAt(i);\n    final int pos = org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < n ; i++) {\n    final char char = accentedWord.charAt(i);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}"},"status":-2},{"failures":[],"tindex":"e1ffed55-16e0-11e6-9f69-a9caf352ae6c","series":0,"name":"replace","transplant":{"toString":"return diff","position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"variableMap":{"diff":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:641","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[49,50,51,52,53,54],"tindex":"e1ffed56-16e0-11e6-9f69-f963a5733b9f","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)","position":"org.apache.commons.codec.binary.BinaryCodec:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)"},"variableMap":{"ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:254","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false)"},"status":-1},{"failures":[],"tindex":"e2001467-16e0-11e6-9f69-7990ed8696ce","series":0,"name":"replace","transplant":{"toString":"this.rContext = org.apache.commons.codec.language.bm.Rule.pattern((\"^\" + rContext))","position":"org.apache.commons.codec.language.bm.Rule:647","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.language.bm.Rule.RPattern = org.apache.commons.codec.language.bm.Rule.pattern((\"^\" + rContext))"},"variableMap":{"rContext":"lContext"},"type":"adrStmt","transplantationPoint":{"toString":"this.lContext = org.apache.commons.codec.language.bm.Rule.pattern((lContext + \"$\"))","position":"org.apache.commons.codec.language.bm.Rule:646","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.language.bm.Rule.RPattern = org.apache.commons.codec.language.bm.Rule.pattern((lContext + \"$\"))"},"status":-2},{"failures":[50,51,52,53,54,55,56,57],"tindex":"e2001468-16e0-11e6-9f69-417eba74c9a7","series":0,"name":"replace","transplant":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.SEP)","position":"org.apache.commons.codec.net.RFC1522Codec:75","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char)"},"status":-1},{"failures":[],"tindex":"e2001469-16e0-11e6-9f69-f7dfda60ea9c","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^trough\", \"trou2f\")","position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^trough\", \"trou2f\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"name1 = cleanName(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:225","type":"CtAssignmentImpl","sourcecode":"name1 = cleanName(name1)"},"status":-2},{"failures":[44,45,46,47,48,41,42,43],"tindex":"e200146a-16e0-11e6-9f69-d1adff9285b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:371","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[],"tindex":"e200146b-16e0-11e6-9f69-8b3b2a11b4fc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name = removeDoubleConsonants(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"status":0},{"failures":[],"tindex":"e200146c-16e0-11e6-9f69-c90b4b4eb3d6","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"j\", \"y\")","position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"t+\", \"T\")","position":"org.apache.commons.codec.language.Caverphone1:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"t+\", \"T\")"},"status":0},{"failures":[58,59,60,61,62,63,64,65,66,67,68],"tindex":"e2003b7d-16e0-11e6-9f69-656a69d4b6ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name2Char[i] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:321","type":"CtAssignmentImpl","sourcecode":"name2Char[i] = ' '"},"status":-1},{"failures":[],"tindex":"e2003b7e-16e0-11e6-9f69-0909f795fb05","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:181","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} "},"status":-2},{"failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"e2003b7f-16e0-11e6-9f69-6dfcabf20cfc","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n} ","position":"org.apache.commons.codec.binary.Base32:495","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"status":-1},{"failures":[],"tindex":"e2003b80-16e0-11e6-9f69-a7f5894b8e38","series":0,"name":"add","transplant":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"failures":[0,1,2,3,5,7,8,9],"tindex":"e2006291-16e0-11e6-9f69-173c2f3fd309","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)) {\n    final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim();\n    if (incl.contains(\" \")) {\n        throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n    } else {\n        lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n    }\n} else {\n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n            final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n            final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n            final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n            final int cLine = currentLine;\n            final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                private final int myLine = cLine;\n\n                private final java.lang.String loc = location;\n\n                @java.lang.Override\n                public java.lang.String toString() {\n                    final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                    sb.append(\"Rule\");\n                    sb.append(\"{line=\").append(myLine);\n                    sb.append(\", loc='\").append(loc).append('\\'');\n                    sb.append(\", pat='\").append(pat).append('\\'');\n                    sb.append(\", lcon='\").append(lCon).append('\\'');\n                    sb.append(\", rcon='\").append(rCon).append('\\'');\n                    sb.append('}');\n                    return sb.toString();\n                }\n            };\n            final java.lang.String patternKey = r.pattern.substring(0, 1);\n            java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                lines.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n    if (incl.contains(\" \")) {\n        throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n    } else {\n        lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n            final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n            final int int = currentLine;\n            final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                private final int myLine = cLine;\n\n                private final java.lang.String loc = location;\n\n                @java.lang.Override\n                public java.lang.String toString() {\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    sb.append(\"Rule\");\n                    sb.append(\"{line=\").append(int);\n                    sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                    sb.append(\", pat='\").append(pat).append('\\'');\n                    sb.append(\", lcon='\").append(lCon).append('\\'');\n                    sb.append(\", rcon='\").append(rCon).append('\\'');\n                    sb.append('}');\n                    return sb.toString();\n                }\n            };\n            final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n            java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                lines.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-1},{"failures":[83,84,85,86,87,88],"tindex":"e20089a2-16e0-11e6-9f69-9de5ac649893","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"[aeiou]\", \"3\")","position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"d\", \"t\")","position":"org.apache.commons.codec.language.Caverphone2:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"status":-1},{"failures":[],"tindex":"e20089a3-16e0-11e6-9f69-e55e3616528f","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.BCodec.this.decodeText(value)","position":"org.apache.commons.codec.net.BCodec:181","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.BCodec.this.decodeText(value)"},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"failures":[36,37,89,90,39,40],"tindex":"e20089a4-16e0-11e6-9f69-7947169eae6f","series":0,"name":"replace","transplant":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:569","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}"},"status":-1},{"failures":[91,92,93],"tindex":"e20089a5-16e0-11e6-9f69-092d80c33f52","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"variableMap":{"next":"prev","prev":"curr","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"status":-1},{"failures":[],"tindex":"e200b0b6-16e0-11e6-9f69-cd4f06acc859","series":0,"name":"add","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"length","len":"length"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"status":-2},{"failures":[],"tindex":"e200b0b7-16e0-11e6-9f69-0b74cd668313","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while ((tmpLen--) > 0) {\n    char c1 = cs.charAt((index1++));\n    char c2 = substring.charAt((index2++));\n    if (c1 == c2) {\n        continue;\n    } \n    if (!ignoreCase) {\n        return false;\n    } \n    if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.binary.CharSequenceUtils:58","type":"CtWhileImpl","sourcecode":"while ((tmpLen--) > 0) {\n    char char = cs.charAt((index1++));\n    char char = substring.charAt((index2++));\n    if (c1 == c2) {\n        continue;\n    } \n    if (!ignoreCase) {\n        return false;\n    } \n    if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        return false;\n    } \n}"},"status":0},{"failures":[],"tindex":"e200b0b8-16e0-11e6-9f69-7f56ddb901ae","series":0,"name":"replace","transplant":{"toString":"int patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int name2Size = (name2.length()) - 1","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:299","type":"CtLocalVariableImpl","sourcecode":"final int int = (name2.length()) - 1"},"status":-2},{"failures":[],"tindex":"e200b0b9-16e0-11e6-9f69-739ab28febf2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtIfImpl","sourcecode":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} "},"status":0},{"failures":[],"tindex":"e200b0ba-16e0-11e6-9f69-250cde6b992e","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"h\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"variableMap":{"txt":"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX"},"type":"adrStmt","transplantationPoint":{"toString":"salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))","position":"org.apache.commons.codec.digest.Sha2Crypt:541","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"status":-2},{"failures":[],"tindex":"e200d7cb-16e0-11e6-9f69-bb278aa84a8a","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"c\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"variableMap":{"txt":"upperName"},"type":"adrStmt","transplantationPoint":{"toString":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[],"tindex":"e200d7cc-16e0-11e6-9f69-67f603185845","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"status":0},{"failures":[],"tindex":"e200d7cd-16e0-11e6-9f69-6d05e87d8f6f","series":0,"name":"replace","transplant":{"toString":"lastChar = chr","position":"org.apache.commons.codec.language.ColognePhonetic:398","type":"CtAssignmentImpl","sourcecode":"lastChar = chr"},"variableMap":{"lastChar":"current","chr":"current"},"type":"adrStmt","transplantationPoint":{"toString":"current = getMappingCode(str.charAt(i))","position":"org.apache.commons.codec.language.RefinedSoundex:192","type":"CtAssignmentImpl","sourcecode":"current = getMappingCode(str.charAt(i))"},"status":-2},{"failures":[39],"tindex":"e200d7ce-16e0-11e6-9f69-11dd14347de7","series":0,"name":"replace","transplant":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:629","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:750","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1"},"status":-1},{"failures":[36,37],"tindex":"e200d7cf-16e0-11e6-9f69-15fb674488fc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"e200d7d0-16e0-11e6-9f69-77d2b92a4345","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"readLen = baseNCodec.readResults(b, offset, len, context)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:165","type":"CtAssignmentImpl","sourcecode":"readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[94,95,96,97],"tindex":"e200fde1-16e0-11e6-9f69-2bc0ceab634c","series":0,"name":"replace","transplant":{"toString":"code = '0'","position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"code = '0'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '1'","position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"code = '1'"},"status":-1},{"failures":[],"tindex":"e200fde2-16e0-11e6-9f69-413f46671cb9","series":0,"name":"add","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"status":0},{"failures":[98,99],"tindex":"e200fde3-16e0-11e6-9f69-ffc611377d36","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:316","type":"CtAssignmentImpl","sourcecode":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))"},"status":-1},{"failures":[],"tindex":"e200fde4-16e0-11e6-9f69-03692fd3da1a","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"status":0},{"failures":[],"tindex":"e200fde5-16e0-11e6-9f69-c164d739f4e0","series":0,"name":"replace","transplant":{"toString":"key.append(str.charAt(0))","position":"org.apache.commons.codec.language.Nysiis:274","type":"CtInvocationImpl","sourcecode":"key.append(str.charAt(0))"},"variableMap":{"str":"word","key":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"-\").append(encode(word))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\").append(encode(word))"},"status":0},{"failures":[],"tindex":"e200fde6-16e0-11e6-9f69-e56651c87824","series":0,"name":"replace","transplant":{"toString":"last = mapped","position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"last = mapped"},"variableMap":{"last":"code","mapped":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '1'","position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"code = '1'"},"status":-2},{"failures":[],"tindex":"e200fde7-16e0-11e6-9f69-25a286eace6a","series":0,"name":"add","transplant":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"status":-2},{"failures":[],"tindex":"e20124f8-16e0-11e6-9f69-674f931bbc2c","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true","position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true"},"variableMap":{"found":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = true","position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"status":-3},{"failures":[],"tindex":"e20124f9-16e0-11e6-9f69-7fb187bdd19a","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y3\", \"Y3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt + (org.apache.commons.codec.language.Caverphone1.SIX_1)","position":"org.apache.commons.codec.language.Caverphone1:121","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String)"},"status":0},{"failures":[100],"tindex":"e20124fa-16e0-11e6-9f69-cbc2ea0e3af9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('.')","position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"status":-1},{"failures":[],"tindex":"e20124fb-16e0-11e6-9f69-6741124dc258","series":0,"name":"replace","transplant":{"toString":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.encodeSize = (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base32:290","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.int = (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n    this.byte[] = null;\n}"},"variableMap":{"encodeSize":"length","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"length","length":"length","lineSeparator":"key","lineLength":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (key.length) ; i++) {\n    key[i] = 0;\n}","position":"org.apache.commons.codec.digest.UnixCrypt:216","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (key.int) ; i++) {\n    key[i] = 0;\n}"},"status":-3},{"failures":[],"tindex":"e2014c0c-16e0-11e6-9f69-e3d474509975","series":0,"name":"replace","transplant":{"toString":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} ","position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme ph : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes) {\n    if ((sb.length()) > 0) {\n        sb.append(\"|\");\n    } \n    sb.append(ph.getPhonemeText());\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:147","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    if ((sb.length()) > 0) {\n        sb.append(\"|\");\n    } \n    sb.append(ph.getPhonemeText());\n}"},"status":-2},{"failures":[101,102,103],"tindex":"e2014c0d-16e0-11e6-9f69-2fddc3f370b7","series":0,"name":"add","transplant":{"toString":"java.util.Arrays.fill(sBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"l_raw"},"type":"adrStmt","transplantationPoint":{"toString":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-1},{"failures":[],"tindex":"e2014c0e-16e0-11e6-9f69-35187aebbe0c","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((newPhonemes.size()) < maxPhonemes) {\n    newPhonemes.add(join);\n    if ((newPhonemes.size()) >= maxPhonemes) {\n        break EXPR;\n    } \n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:114","type":"CtIfImpl","sourcecode":"if ((newPhonemes.size()) < maxPhonemes) {\n    newPhonemes.add(join);\n    if ((newPhonemes.size()) >= maxPhonemes) {\n        break EXPR;\n    } \n} "},"status":-2},{"failures":[],"tindex":"e2014c0f-16e0-11e6-9f69-370bdaf85189","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e)","position":"org.apache.commons.codec.binary.StringUtils:286","type":"CtThrowImpl","sourcecode":"throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e)"},"status":-2},{"failures":[],"tindex":"e2014c10-16e0-11e6-9f69-4b2fbab96e8d","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder result = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:458","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[104,105,106,107],"tindex":"e2014c11-16e0-11e6-9f69-21d78695bba5","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.SPACE)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.TAB))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:238","type":"CtReturnImpl","sourcecode":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))"},"status":-1},{"failures":[],"tindex":"e2017322-16e0-11e6-9f69-6fb27fabbf3f","series":0,"name":"add","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.QCodec:248","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"e2017323-16e0-11e6-9f69-4172acf987a3","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:369","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e)"},"status":-2},{"failures":[],"tindex":"e2017324-16e0-11e6-9f69-7503f267f8df","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","encodeSize":"minRating"},"type":"adrStmt","transplantationPoint":{"toString":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:192","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-3},{"failures":[108,109,110,111,112,113,114,115,116],"tindex":"e2017325-16e0-11e6-9f69-efdfd247151b","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:390","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":68,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
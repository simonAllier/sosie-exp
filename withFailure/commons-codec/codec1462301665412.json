{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":9,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":49,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":74,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":45,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":67,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":5,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":46,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":68,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":42,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":40,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":43,"org.apache.commons.codec.binary.Base64Test.testUUID":57,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":54,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":65,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":19,"org.apache.commons.codec.binary.Base64Test.testPairs":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN":14,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":64,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":66,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":7,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":44,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":59,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":17,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":63,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":76,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":25,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":51,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":61,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":22,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":62,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":29,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":50,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":8,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":33,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":69,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":23,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":28,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":24,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":37,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":32,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":48,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":2,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":75,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":38,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":72,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":1,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":39,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":55,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":73,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":11,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":20,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":21,"org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException":70,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR":15,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN":18},"transformations":[{"failures":[],"tindex":"74bbdc1d-1160-11e6-8fc9-0926fc07009f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"variableMap":{"maxLength":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:679","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-2},{"failures":[],"tindex":"74bc032e-1160-11e6-8fc9-5df5fbe4b3b7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:83","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = new java.lang.StringBuilder()"},"variableMap":{"builder":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"status":-3},{"failures":[0,1,2,3,4,5],"tindex":"74bc032f-1160-11e6-8fc9-1fad82093e40","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:467","type":"CtInvocationImpl","sourcecode":"sb.append(branch)"},"status":-1},{"failures":[6,7,8,9,10,11,12,13],"tindex":"74bc0330-1160-11e6-8fc9-45bfa710b06b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"name2Size"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"status":-1},{"failures":[],"tindex":"74bc0331-1160-11e6-8fc9-3391658051a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"variableMap":{"patternLength":"blocksize","i":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:341","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"status":-3},{"failures":[],"tindex":"74bc2a42-1160-11e6-8fc9-21ace699ed7c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:185","type":"CtAssignmentImpl","sourcecode":"saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8)"},"status":-2},{"failures":[8,14,15,16,17,18],"tindex":"74bc2a43-1160-11e6-8fc9-c12ca6f556d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[],"tindex":"74bc2a44-1160-11e6-8fc9-bda18f71df76","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:68","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('#')"},"status":0},{"failures":[],"tindex":"74bc2a45-1160-11e6-8fc9-a903a83456fa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","minRating":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"status":-2},{"failures":[],"tindex":"74bc2a46-1160-11e6-8fc9-657dc5f0a2a6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:176","type":"CtAssignmentImpl","sourcecode":"hasUnderscores = true"},"variableMap":{"hasUnderscores":"strict"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:150","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"status":-2},{"failures":[19],"tindex":"74bc5157-1160-11e6-8fc9-3b2b58fb9e7c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"status":-1},{"failures":[],"tindex":"74bc5158-1160-11e6-8fc9-b9084500b958","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:201","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"variableMap":{"keyBytes":"pBytes","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:369","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":0},{"failures":[20,21,22,23,24],"tindex":"74bc5159-1160-11e6-8fc9-23256000534d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:184","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16))"},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:143","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"status":-1},{"failures":[25,26,27,28,29,30,31,32],"tindex":"74bc515a-1160-11e6-8fc9-2f344e950ccc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:235","type":"CtAssignmentImpl","sourcecode":"char[][int] = chr"},"status":-1},{"failures":[],"tindex":"74bc515b-1160-11e6-8fc9-63240b7f3ee3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:287","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"status":-2},{"failures":[],"tindex":"74bc786c-1160-11e6-8fc9-2974f96a0e31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"variableMap":{"hard":"folding"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"status":-2},{"failures":[],"tindex":"74bc786d-1160-11e6-8fc9-7588e8600a32","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:158","type":"CtLocalVariableImpl","sourcecode":"final int int = java.io.InputStream.read(buf)"},"status":-2},{"failures":[],"tindex":"74bc786e-1160-11e6-8fc9-5d0f2f03776a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:206","type":"CtOperatorAssignmentImpl","sourcecode":"todo -= len"},"variableMap":{"todo":"lbitWorkArea","len":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:507","type":"CtAssignmentImpl","sourcecode":"context.long = ((context.long) << 8) + b"},"status":-2},{"failures":[33,34,35,36,37,38,39],"tindex":"74bc786f-1160-11e6-8fc9-1776e2286095","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:239","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb[j])"},"status":-1},{"failures":[40,41,42,43,44,45,46,47],"tindex":"74bc7870-1160-11e6-8fc9-e79d5aa086b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n        final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n        if (incl.contains(\" \")) {\n            throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n        } else {\n            lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                final int int = currentLine;\n                final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                    private final int myLine = cLine;\n\n                    private final java.lang.String loc = location;\n\n                    @java.lang.Override\n                    public java.lang.String toString() {\n                        final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                        sb.append(\"Rule\");\n                        sb.append(\"{line=\").append(int);\n                        sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                        sb.append(\", pat='\").append(pat).append('\\'');\n                        sb.append(\", lcon='\").append(lCon).append('\\'');\n                        sb.append(\", rcon='\").append(rCon).append('\\'');\n                        sb.append('}');\n                        return sb.toString();\n                    }\n                };\n                final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                    lines.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}"},"status":-1},{"failures":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"tindex":"74bc9f81-1160-11e6-8fc9-c7a15384228c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"status":-1},{"failures":[29],"tindex":"74bc9f82-1160-11e6-8fc9-3f1eab077e3e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"length","keyLen":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[],"tindex":"74bcc693-1160-11e6-8fc9-c5995c42b4ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"status":-2},{"failures":[],"tindex":"74bcc694-1160-11e6-8fc9-3d00597286fc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:196","type":"CtLocalVariableImpl","sourcecode":"final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:216","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"status":-2},{"failures":[],"tindex":"74bcc695-1160-11e6-8fc9-6181db83f925","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"variableMap":{"unencodedBlockSize":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:433","type":"CtInvocationImpl","sourcecode":"readResults(buf, 0, buf.int, context)"},"status":-2},{"failures":[],"tindex":"74bcc696-1160-11e6-8fc9-4300897ec7d1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:233","type":"CtAssignmentImpl","sourcecode":"hard = false"},"variableMap":{"hard":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:349","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[70],"tindex":"74bcc697-1160-11e6-8fc9-8148b2b6b4e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:70","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-1},{"failures":[0,1,2,3,4,71,72,73,5],"tindex":"74bceda8-1160-11e6-8fc9-e14455f7aad6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:182","type":"CtInvocationImpl","sourcecode":"scanner.close()"},"variableMap":{"scanner":"scanner"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:235","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(scanner, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>)"},"status":-1},{"failures":[74,75,76],"tindex":"74bceda9-1160-11e6-8fc9-abd1a4020ea1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"bits","l_ascii":"l_ascii","bits":"bits"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":29,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
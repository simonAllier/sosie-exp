{"failureDictionary":{"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":40,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":4,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":17,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":16,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":11,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":33,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":15,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":12,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":41,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":10,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":34,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":23,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":9,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":35,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":31,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":36,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":13,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":5,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":8,"org.apache.commons.codec.binary.Base64Test.testPairs":22,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":30,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":21,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":32,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":7,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":2,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":25,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":26,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":29,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":19,"org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace":38,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":27,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":24,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":28,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":37,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":39,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":6,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":18},"transformations":[{"failures":[0,1,2,3,4,5],"tindex":"20b774f5-16e3-11e6-b665-49e007749137","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n    result.append('R');\n    index += 2;\n} else {\n    if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n        if (isVowel(charAt(value, (index + 1)))) {\n            result.append('A', 'F');\n        } else {\n            result.append('A');\n        }\n        index++;\n    } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.appendAlternate('F');\n        index++;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n        result.append(\"TS\", \"FX\");\n        index += 4;\n    } else {\n        index++;\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:704","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n    result.append('R');\n    index += 2;\n} else {\n    if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n        if (isVowel(charAt(value, (index + 1)))) {\n            result.append('A', 'F');\n        } else {\n            result.append('A');\n        }\n        index++;\n    } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.appendAlternate('F');\n        index++;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n        result.append(\"TS\", \"FX\");\n        index += 4;\n    } else {\n        index++;\n    }\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n    result.appendAlternate('S');\n} else {\n    result.append('S');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:633","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n    result.appendAlternate('S');\n} else {\n    result.append('S');\n}"},"status":-1},{"failures":[6,7,8,9,10,11,12,13],"tindex":"20b7c316-16e3-11e6-b665-b31b03b533cd","series":0,"name":"replace","transplant":{"toString":"ctx.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:201","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"variableMap":{"keyBytes":"pBytes","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"toString":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:395","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}"},"status":-1},{"failures":[],"tindex":"20b7ea27-16e3-11e6-b665-3b05a0690182","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.DoubleMetaphone:783","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"20b7ea28-16e3-11e6-b665-67e40cc4aa25","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b += 256","position":"org.apache.commons.codec.binary.Base64:383","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"status":-1},{"failures":[],"tindex":"20b7ea29-16e3-11e6-b665-656a1dfc1f53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.languages = java.util.Collections.unmodifiableSet(languages)","position":"org.apache.commons.codec.language.bm.Languages:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = java.util.Collections.unmodifiableSet(languages)"},"status":-2},{"failures":[],"tindex":"20b8866a-16e3-11e6-b665-697d4a659b83","series":0,"name":"replace","transplant":{"toString":"d = (d >>> 1) | (d << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"variableMap":{"d":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:292","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[],"tindex":"20b8ad7b-16e3-11e6-b665-efee72ad6611","series":0,"name":"replace","transplant":{"toString":"ctx.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"variableMap":{"ctx":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:335","type":"CtIfImpl","sourcecode":"if (!(obj instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n} "},"status":-2},{"failures":[36,37,38,39,40],"tindex":"20b8ad7c-16e3-11e6-b665-6978bf7a8d38","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}","position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"status":-1},{"failures":[],"tindex":"20b8ad7d-16e3-11e6-b665-53c5ebaeda50","series":0,"name":"replace","transplant":{"toString":"c = (c >>> 1) | (c << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 1) | (c << 27)"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1"},"status":-2},{"failures":[],"tindex":"20b8d48e-16e3-11e6-b665-dba66befde6a","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator)","position":"org.apache.commons.codec.binary.Base64:280","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator)"},"status":-2},{"failures":[41,33],"tindex":"20b8d48f-16e3-11e6-b665-7547c44db618","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((binaryData == null) || ((binaryData.length) == 0)) {\n    return binaryData;\n} ","position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((binaryData == null) || ((binaryData.int) == 0)) {\n    return binaryData;\n} "},"status":-1},{"failures":[],"tindex":"20b8d490-16e3-11e6-b665-9720df33a9fc","series":0,"name":"replace","transplant":{"toString":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtIfImpl","sourcecode":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} "},"variableMap":{"c1":"c","c2":"c"},"type":"adrStmt","transplantationPoint":{"toString":"return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"))","position":"org.apache.commons.codec.language.DoubleMetaphone:792","type":"CtReturnImpl","sourcecode":"return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"))"},"status":-2},{"failures":[],"tindex":"20b8fba1-16e3-11e6-b665-bff650b3bc63","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Rule:284","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"20b8fba2-16e3-11e6-b665-e7256e559e1b","series":0,"name":"replace","transplant":{"toString":"builder.append('0')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"variableMap":{"builder":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:240","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-3},{"failures":[0,1,4],"tindex":"20b922b3-16e3-11e6-b665-278dfe15ea09","series":0,"name":"add","transplant":{"toString":"result.append(\"KS\")","position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":15,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
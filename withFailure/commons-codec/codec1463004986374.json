{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":121,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":65,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":57,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":56,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":122,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":109,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":91,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":108,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":129,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":116,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":9,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":82,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":81,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":88,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":20,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":86,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":135,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":2,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":35,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":105,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":107,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":133,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":75,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":74,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":118,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":30,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":25,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":31,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":34,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":73,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":32,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":33,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":125,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":77,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":96,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":115,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":70,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":117,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":79,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":6,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":127,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":103,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":51,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":80,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":114,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":87,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":100,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":55,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":140,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":68,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":59,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":111,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":16,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":3,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":54,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":69,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":5,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":99,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":130,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":98,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":47,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":124,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":72,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":132,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":13,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":43,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":95,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":102,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":139,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":137,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":90,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":106,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":61,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":101,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":58,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":78,"org.apache.commons.codec.binary.Base64Test.testBase64":42,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":128,"org.apache.commons.codec.binary.Base64Test.testUUID":27,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":49,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":71,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":36,"org.apache.commons.codec.binary.Base64Test.testSingletons":40,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":112,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":22,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":104,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":119,"org.apache.commons.codec.binary.Base64Test.testPairs":26,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":21,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":4,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":138,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":136,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":62,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":89,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":19,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":24,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":141,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":64,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":97,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":85,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":134,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":7,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":66,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":93,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":110,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":76,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":126,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":8,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":38,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":45,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":67,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":17,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":1,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":39,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":94,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":131,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":84,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":92,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":12,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":23,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":15,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":120,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":29,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":41,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":60,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":123,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":83,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":48,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":63,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":28,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":113},"transformations":[{"failures":[],"tindex":"00b1e226-17c6-11e6-83c5-0f5af7c1e8ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    index++;\n    result.append('L');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:551","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    index++;\n    result.append('L');\n}"},"status":-2},{"failures":[0,1,2,3],"tindex":"00b20937-17c6-11e6-83c5-6b743aa3d725","series":0,"name":"replace","transplant":{"toString":"sb.append('|')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:240","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[],"tindex":"00b23048-17c6-11e6-83c5-91c1409b0c4e","series":0,"name":"replace","transplant":{"toString":"return new char[]{ prev }","position":"org.apache.commons.codec.language.Nysiis:159","type":"CtReturnImpl","sourcecode":"return new char[]{ prev }"},"variableMap":{"prev":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"return new char[]{ curr }","position":"org.apache.commons.codec.language.Nysiis:167","type":"CtReturnImpl","sourcecode":"return new char[]{ curr }"},"status":-3},{"failures":[],"tindex":"00b23049-17c6-11e6-83c5-a97dca2000f8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append('}')","position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"status":0},{"failures":[4,5,6,7],"tindex":"00b2304a-17c6-11e6-83c5-4757c6a4f33d","series":0,"name":"replace","transplant":{"toString":"return index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return index + 1"},"variableMap":{"index":"b"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer)"},"status":-1},{"failures":[8],"tindex":"00b2304b-17c6-11e6-83c5-bdde563ddaaa","series":0,"name":"replace","transplant":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"variableMap":{"bigBytes":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:552","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal()"},"status":-1},{"failures":[9,10,11,12,13,14,15,16],"tindex":"00b2575c-17c6-11e6-83c5-7368255862eb","series":0,"name":"add","transplant":{"toString":"code.append('0')","position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:430","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"status":-1},{"failures":[],"tindex":"00b2575d-17c6-11e6-83c5-ddee13f10eaf","series":0,"name":"replace","transplant":{"toString":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS","printable":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('@')","position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"status":-2},{"failures":[],"tindex":"00b2575e-17c6-11e6-83c5-33891b13f780","series":0,"name":"replace","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"length","name2Size":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (l_ascii.length) - 1 ; ii < (raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:248","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"00b27e6f-17c6-11e6-83c5-c30174fef10f","series":0,"name":"replace","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}","position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"status":-2},{"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"00b27e70-17c6-11e6-83c5-e30d7bb1e874","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"readResults(result, 0, result.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:413","type":"CtInvocationImpl","sourcecode":"readResults(result, 0, result.int, context)"},"status":-1},{"failures":[],"tindex":"00b27e71-17c6-11e6-83c5-edc4fb2e54d9","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return messageDigest","position":"org.apache.commons.codec.digest.DigestUtils:777","type":"CtReturnImpl","sourcecode":"return messageDigest"},"status":0},{"failures":[48,49,50,51,52],"tindex":"00b2a582-17c6-11e6-83c5-6b8b352bb1a4","series":0,"name":"replace","transplant":{"toString":"inExtendedComment = false","position":"org.apache.commons.codec.language.bm.Languages:185","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"variableMap":{"inExtendedComment":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"result = true"},"status":-1},{"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"00b2a583-17c6-11e6-83c5-51902464250d","series":0,"name":"replace","transplant":{"toString":"final java.lang.String replacement1 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:309","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String pattern = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:308","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0])"},"status":-1},{"failures":[66,67,68,69,70,71,72],"tindex":"00b2a584-17c6-11e6-83c5-21cfcd82ce40","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(finalb, 0, (ii > 16 ? 16 : ii))","position":"org.apache.commons.codec.digest.Md5Crypt:223","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb, 0, (ii > 16 ? 16 : ii))"},"status":-1},{"failures":[73,74,75,76,77,78,79,80],"tindex":"00b2a585-17c6-11e6-83c5-f77cb49a3fe9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(data, start, newData, 0, length)","position":"org.apache.commons.codec.language.ColognePhonetic:242","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(char[], start, newData, 0, length)"},"status":-1},{"failures":[],"tindex":"00b2cc96-17c6-11e6-83c5-ef1c9b0df442","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:577","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}"},"variableMap":{"input":"this","bContent":"bContent","this":"this","shouldMatch":"shouldMatch"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:569","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}"},"status":-2},{"failures":[81,82,83,84],"tindex":"00b2cc97-17c6-11e6-83c5-eb0ce50c2553","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:510","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"variableMap":{"valueToDigest":"input","key":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String l : org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType)) {\n    if (input.startsWith((l + \" \"))) {\n        final java.lang.String remainder = input.substring(((l.length()) + 1));\n        final java.lang.String combined = l + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:415","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n    if (input.startsWith((l + \" \"))) {\n        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n        final java.lang.String java.lang.String = l + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n}"},"status":-1},{"failures":[85],"tindex":"00b2f3a8-17c6-11e6-83c5-33b7830f634c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[66,67,68,69,70,71,72],"tindex":"00b2f3a9-17c6-11e6-83c5-61c9eda81a63","series":0,"name":"replace","transplant":{"toString":"altCtx.reset()","position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"variableMap":{"altCtx":"ctx"},"type":"adrStmt","transplantationPoint":{"toString":"if ((ii & 1) == 1) {\n    ctx.update(finalb[j]);\n} else {\n    ctx.update(keyBytes[j]);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtIfImpl","sourcecode":"if ((ii & 1) == 1) {\n    ctx.update(finalb[j]);\n} else {\n    ctx.update(keyBytes[j]);\n}"},"status":-1},{"failures":[],"tindex":"00b2f3aa-17c6-11e6-83c5-57b62d324ad8","series":0,"name":"replace","transplant":{"toString":"b[(offset++)] = ((byte)(iValue & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"variableMap":{"b":"buffer","offset":"pos","iValue":"org.apache.commons.codec.binary.Base32.MASK_5BITS"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:514","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[86],"tindex":"00b31abb-17c6-11e6-83c5-f7bf330a2af0","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:82","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"00b31abc-17c6-11e6-83c5-85f05646493e","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:577","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}"},"variableMap":{"input":"this","bContent":"content","this":"this","shouldMatch":"endsWithBox"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWithBox && endsWithBox) {\n    java.lang.String boxContent = content.substring(1, ((content.length()) - 1));\n    if (!(boxContent.contains(\"[\"))) {\n        final boolean negate = boxContent.startsWith(\"^\");\n        if (negate) {\n            boxContent = boxContent.substring(1);\n        } \n        final java.lang.String bContent = boxContent;\n        final boolean shouldMatch = !negate;\n        if (startsWith && endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (startsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                }\n            };\n        } \n    } \n} ","position":"org.apache.commons.codec.language.bm.Rule:548","type":"CtIfImpl","sourcecode":"if (startsWithBox && endsWithBox) {\n    java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n    if (!(boxContent.contains(\"[\"))) {\n        final boolean boolean = boxContent.startsWith(\"^\");\n        if (negate) {\n            boxContent = boxContent.substring(1);\n        } \n        final java.lang.String java.lang.String = boxContent;\n        final boolean boolean = !negate;\n        if (startsWith && endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (startsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                }\n            };\n        } \n    } \n} "},"status":-2},{"failures":[],"tindex":"00b341cd-17c6-11e6-83c5-b171938c9313","series":0,"name":"replace","transplant":{"toString":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} ","position":"org.apache.commons.codec.binary.Base32:308","type":"CtIfImpl","sourcecode":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} "},"variableMap":{"pad":"org.apache.commons.codec.net.QCodec.UNDERSCORE"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n    hasUnderscores = true;\n    break;\n} ","position":"org.apache.commons.codec.net.QCodec:175","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    hasUnderscores = true;\n    break;\n} "},"status":-2},{"failures":[],"tindex":"00b341ce-17c6-11e6-83c5-c71ba3af2430","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx1.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:295","type":"CtInvocationImpl","sourcecode":"ctx1.reset()"},"status":0},{"failures":[81,87,82,88,89,90,91,92],"tindex":"00b341cf-17c6-11e6-83c5-974edca95842","series":0,"name":"replace","transplant":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)) {\n    final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim();\n    if (incl.contains(\" \")) {\n        throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n    } else {\n        lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n    }\n} else {\n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n            final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n            final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n            final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n            final int cLine = currentLine;\n            final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                private final int myLine = cLine;\n\n                private final java.lang.String loc = location;\n\n                @java.lang.Override\n                public java.lang.String toString() {\n                    final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                    sb.append(\"Rule\");\n                    sb.append(\"{line=\").append(myLine);\n                    sb.append(\", loc='\").append(loc).append('\\'');\n                    sb.append(\", pat='\").append(pat).append('\\'');\n                    sb.append(\", lcon='\").append(lCon).append('\\'');\n                    sb.append(\", rcon='\").append(rCon).append('\\'');\n                    sb.append('}');\n                    return sb.toString();\n                }\n            };\n            final java.lang.String patternKey = r.pattern.substring(0, 1);\n            java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                lines.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n    if (incl.contains(\" \")) {\n        throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n    } else {\n        lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n            final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n            final int int = currentLine;\n            final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                private final int myLine = cLine;\n\n                private final java.lang.String loc = location;\n\n                @java.lang.Override\n                public java.lang.String toString() {\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    sb.append(\"Rule\");\n                    sb.append(\"{line=\").append(int);\n                    sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                    sb.append(\", pat='\").append(pat).append('\\'');\n                    sb.append(\", lcon='\").append(lCon).append('\\'');\n                    sb.append(\", rcon='\").append(rCon).append('\\'');\n                    sb.append('}');\n                    return sb.toString();\n                }\n            };\n            final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n            java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                lines.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-1},{"failures":[93],"tindex":"00b368e0-17c6-11e6-83c5-1dd0f749567a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"break","position":"org.apache.commons.codec.language.Metaphone:191","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"00b368e1-17c6-11e6-83c5-d538d91932ac","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return messageDigest","position":"org.apache.commons.codec.digest.DigestUtils:817","type":"CtReturnImpl","sourcecode":"return messageDigest"},"status":0},{"failures":[],"tindex":"00b368e2-17c6-11e6-83c5-35bf6ee5cada","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.UTF_16BE)","position":"org.apache.commons.codec.binary.StringUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[91],"tindex":"00b38ff3-17c6-11e6-83c5-a5fef11202a0","series":0,"name":"replace","transplant":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(sep).append(si.next())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:264","type":"CtInvocationImpl","sourcecode":"sb.append(sep).append(si.next())"},"status":-1},{"failures":[],"tindex":"00b38ff4-17c6-11e6-83c5-15294e95188e","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.QCodec:271","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)"},"status":-2},{"failures":[],"tindex":"00b38ff5-17c6-11e6-83c5-212eebfd6099","series":0,"name":"replace","transplant":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"status":0},{"failures":[],"tindex":"00b38ff6-17c6-11e6-83c5-456c54006a20","series":0,"name":"replace","transplant":{"toString":"index = index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"index = index + 2"},"variableMap":{"index":"d"},"type":"adrStmt","transplantationPoint":{"toString":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)","position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"status":-2},{"failures":[],"tindex":"00b38ff7-17c6-11e6-83c5-555a1f507097","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"length","to":"length"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.RefinedSoundex.this.soundexMapping, 0, mapping.length)","position":"org.apache.commons.codec.language.RefinedSoundex:78","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.RefinedSoundex.this.char[], 0, mapping.int)"},"status":-2},{"failures":[],"tindex":"00b3b708-17c6-11e6-83c5-572b00b90592","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder sb = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.bm.Rule:461","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[17,18,94,95,96,97,98,99,100,26,27,28,30,31,32,33,101,34,35,102,40,103,41,104,42,105,106,107,46,108,109,110,111,112],"tindex":"00b3b709-17c6-11e6-83c5-29f7ddcebe97","series":0,"name":"replace","transplant":{"toString":"final byte[] pBytes = new byte[keyLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"variableMap":{"keyLen":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(encodeSize, context)","position":"org.apache.commons.codec.binary.Base64:342","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[],"tindex":"00b3b70a-17c6-11e6-83c5-2fff312aa2ce","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER","position":"org.apache.commons.codec.language.bm.Rule:526","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern"},"variableMap":{"org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER":"rContext"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.rContext","position":"org.apache.commons.codec.language.bm.Rule:684","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern"},"status":-2},{"failures":[],"tindex":"00b3b70b-17c6-11e6-83c5-dd642f81730f","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"value","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:569","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}"},"status":-3},{"failures":[],"tindex":"00b3b70c-17c6-11e6-83c5-99080c09ce09","series":0,"name":"add","transplant":{"toString":"return this","position":"org.apache.commons.codec.language.bm.Languages:234","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return other","position":"org.apache.commons.codec.language.bm.Languages:117","type":"CtReturnImpl","sourcecode":"return other"},"status":-2},{"failures":[113,114,115,116],"tindex":"00b3de1d-17c6-11e6-83c5-b32f6a2be7fa","series":0,"name":"replace","transplant":{"toString":"return result.substring(1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:463","type":"CtReturnImpl","sourcecode":"return result.substring(1)"},"variableMap":{"result":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"return buffer.toString()","position":"org.apache.commons.codec.digest.UnixCrypt:250","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[],"tindex":"00b3de1e-17c6-11e6-83c5-1d591d843f89","series":0,"name":"replace","transplant":{"toString":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"f+\", \"F\")","position":"org.apache.commons.codec.language.Caverphone2:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"status":-3},{"failures":[73,74,75,76,77,78,79,80],"tindex":"00b3de1f-17c6-11e6-83c5-0122181563cb","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (element == key) {\n    return true;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (element == key) {\n    return true;\n} "},"status":-1},{"failures":[],"tindex":"00b3de20-17c6-11e6-83c5-536f9c454356","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.Soundex.this.maxLength = maxLength","position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"status":0},{"failures":[],"tindex":"00b3de21-17c6-11e6-83c5-015583c08773","series":0,"name":"replace","transplant":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"variableMap":{"a":"maxPhonemes","t":"maxPhonemes","n":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"status":-2},{"failures":[48,49],"tindex":"00b4ef92-17c6-11e6-83c5-49e822d8e490","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('K', 'J')","position":"org.apache.commons.codec.language.DoubleMetaphone:437","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[117,118,119,120],"tindex":"00b4ef93-17c6-11e6-83c5-0f67f1f763b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"3$\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:121","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3$\", \"A\")"},"status":-1},{"failures":[],"tindex":"00b4ef94-17c6-11e6-83c5-9d96913cd077","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (printable.get(b)) {\n    buffer.write(b);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:329","type":"CtIfImpl","sourcecode":"if (printable.get(b)) {\n    buffer.write(b);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n}"},"status":0},{"failures":[],"tindex":"00b516a5-17c6-11e6-83c5-4d97c994eec8","series":0,"name":"replace","transplant":{"toString":"return encode(((java.lang.String)(object)))","position":"org.apache.commons.codec.language.ColognePhonetic:413","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(object)))"},"variableMap":{"object":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))","position":"org.apache.commons.codec.binary.BinaryCodec:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))"},"status":-2},{"failures":[121],"tindex":"00b516a6-17c6-11e6-83c5-bf543b5859c3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))","position":"org.apache.commons.codec.digest.DigestUtils:688","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:368","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"status":-1},{"failures":[],"tindex":"00b516a7-17c6-11e6-83c5-e90a7ed1c4ec","series":0,"name":"replace","transplant":{"toString":"return phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:335","type":"CtReturnImpl","sourcecode":"return phonemeBuilder"},"variableMap":{"phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:196","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder"},"status":0},{"failures":[],"tindex":"00b516a8-17c6-11e6-83c5-3be5e0f6a13c","series":0,"name":"replace","transplant":{"toString":"final char last2Char = key.charAt(((key.length()) - 2))","position":"org.apache.commons.codec.language.Nysiis:302","type":"CtLocalVariableImpl","sourcecode":"final char char = key.charAt(((key.length()) - 2))"},"variableMap":{"key":"substring"},"type":"adrStmt","transplantationPoint":{"toString":"char c2 = substring.charAt((index2++))","position":"org.apache.commons.codec.binary.CharSequenceUtils:60","type":"CtLocalVariableImpl","sourcecode":"char char = substring.charAt((index2++))"},"status":-2},{"failures":[],"tindex":"00b516a9-17c6-11e6-83c5-43ca699938fa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", lcon='\").append(lCon).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:466","type":"CtInvocationImpl","sourcecode":"sb.append(\", lcon='\").append(lCon).append('\\'')"},"status":0},{"failures":[122],"tindex":"00b516aa-17c6-11e6-83c5-8b9b1dc10106","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.pos += lineSeparator.length","position":"org.apache.commons.codec.binary.Base32:520","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-1},{"failures":[],"tindex":"00b53dbb-17c6-11e6-83c5-afea3f6349bf","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"text"},"type":"adrStmt","transplantationPoint":{"toString":"if (rule.matches(text)) {\n    if (rule.acceptOnMatch) {\n        langs.retainAll(rule.languages);\n    } else {\n        langs.removeAll(rule.languages);\n    }\n} ","position":"org.apache.commons.codec.language.bm.Lang:219","type":"CtIfImpl","sourcecode":"if (rule.matches(text)) {\n    if (rule.boolean) {\n        langs.retainAll(rule.java.util.Set<java.lang.String>);\n    } else {\n        langs.removeAll(rule.java.util.Set<java.lang.String>);\n    }\n} "},"status":-2},{"failures":[],"tindex":"00b53dbc-17c6-11e6-83c5-7baf8ab7517f","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"variableMap":{"input":"this","this":"this","content":"content"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:517","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}"},"status":-2},{"failures":[],"tindex":"00b53dbd-17c6-11e6-83c5-d7d1c17f33a6","series":0,"name":"replace","transplant":{"toString":"if ((0 == (context.modulus)) && ((lineLength) == 0)) {\n    return ;\n} ","position":"org.apache.commons.codec.binary.Base32:442","type":"CtIfImpl","sourcecode":"if ((0 == (context.int)) && ((int) == 0)) {\n    return ;\n} "},"variableMap":{"context":"context","lineLength":"pos","modulus":"inAvail"},"type":"adrStmt","transplantationPoint":{"toString":"if (inAvail < 0) {\n    context.eof = true;\n    if ((0 == (context.modulus)) && ((lineLength) == 0)) {\n        return ;\n    } \n    final byte[] buffer = ensureBufferSize(encodeSize, context);\n    final int savedPos = context.pos;\n    switch (context.modulus) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 3))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 2))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            break;\n        case 2 :\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 11))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 6))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 1))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 4))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            break;\n        case 3 :\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 19))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 14))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 9))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 4))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 1))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            break;\n        case 4 :\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 27))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 22))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 17))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 12))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 7))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 2))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 3))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = pad;\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n    }\n    context.currentLinePos += (context.pos) - savedPos;\n    if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n        java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n        context.pos += lineSeparator.length;\n    } \n} else {\n    for (int i = 0 ; i < inAvail ; i++) {\n        final byte[] buffer = ensureBufferSize(encodeSize, context);\n        context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK);\n        int b = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.lbitWorkArea = ((context.lbitWorkArea) << 8) + b;\n        if (0 == (context.modulus)) {\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 30))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 25))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 20))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 15))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 5))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(context.lbitWorkArea)) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            context.currentLinePos += org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n            if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n                java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n                context.pos += lineSeparator.length;\n                context.currentLinePos = 0;\n            } \n        } \n    }\n}","position":"org.apache.commons.codec.binary.Base32:440","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n    if ((0 == (context.int)) && ((int) == 0)) {\n        return ;\n    } \n    final byte[] byte[] = ensureBufferSize(int, context);\n    final int int = context.int;\n    switch (context.int) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 2 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 3 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 4 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n    context.int += (context.int) - savedPos;\n    if (((int) > 0) && ((context.int) > 0)) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n    } \n} else {\n    for (int int = 0 ; i < inAvail ; i++) {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n        int int = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.long = ((context.long) << 8) + b;\n        if (0 == (context.int)) {\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n            if (((int) > 0) && ((int) <= (context.int))) {\n                java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                context.int += byte[].int;\n                context.int = 0;\n            } \n        } \n    }\n}"},"status":-3},{"failures":[123,124,125,126,127],"tindex":"00b58bde-17c6-11e6-83c5-31a460b37edb","series":0,"name":"add","transplant":{"toString":"if (c1 == c2) {\n    continue;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"hex1","c2":"hex1"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(hex1)","position":"org.apache.commons.codec.net.URLCodec:144","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-1},{"failures":[],"tindex":"00b58bdf-17c6-11e6-83c5-9d0aeff802fb","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.lContext","position":"org.apache.commons.codec.language.bm.Rule:657","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern"},"variableMap":{"lContext":"org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER","position":"org.apache.commons.codec.language.bm.Rule:526","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern"},"status":-2},{"failures":[],"tindex":"00b5b2f0-17c6-11e6-83c5-614c8f075d18","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^rough\", \"rou2f\")","position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"variableMap":{"txt":"algorithm"},"type":"adrStmt","transplantationPoint":{"toString":"this.algorithm = algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:78","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = algorithm"},"status":-2},{"failures":[],"tindex":"00b5b2f1-17c6-11e6-83c5-91345c7b28d2","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"status":-2},{"failures":[128,129,130,131,132],"tindex":"00b5b2f2-17c6-11e6-83c5-8f7531ce84d5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((context.modulus) == 0) {\n    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n} ","position":"org.apache.commons.codec.binary.Base32:359","type":"CtIfImpl","sourcecode":"if ((context.int) == 0) {\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"status":-1},{"failures":[],"tindex":"00b5b2f3-17c6-11e6-83c5-0fcb7bc6d808","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")","position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.binary.Hex:301","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-2},{"failures":[],"tindex":"00b5b2f4-17c6-11e6-83c5-3f72453e34fd","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64))","position":"org.apache.commons.codec.binary.Base64:524","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64))"},"variableMap":{"base64":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.L_R_N_M_B_H_F_V_W_SPACE)) || ((index + 1) == ((value.length()) - 1))))","position":"org.apache.commons.codec.language.DoubleMetaphone:817","type":"CtReturnImpl","sourcecode":"return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))))"},"status":-2},{"failures":[9,10,11,12,13,14,15,16],"tindex":"00b5da05-17c6-11e6-83c5-c3ac66c24643","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:396","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[],"tindex":"00b5da06-17c6-11e6-83c5-df8a9d33d941","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int t = 0","position":"org.apache.commons.codec.digest.UnixCrypt:284","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[32,33],"tindex":"00b5da07-17c6-11e6-83c5-af5ee1ad68d3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw)","position":"org.apache.commons.codec.binary.BinaryCodec:83","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw)"},"variableMap":{"raw":"bigBytes"},"type":"adrStmt","transplantationPoint":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-1},{"failures":[133],"tindex":"00b5da08-17c6-11e6-83c5-612dd4228aa0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"s+\", \"S\")","position":"org.apache.commons.codec.language.Caverphone1:92","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"s+\", \"S\")"},"status":-1},{"failures":[],"tindex":"00b5da09-17c6-11e6-83c5-fb548dfa7080","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"str","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-3},{"failures":[],"tindex":"00b5da0a-17c6-11e6-83c5-e1829ee3e3f1","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"saltBytes"},"type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(saltBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:317","type":"CtInvocationImpl","sourcecode":"altCtx.update(saltBytes)"},"status":-2},{"failures":[],"tindex":"00b6011b-17c6-11e6-83c5-71a7743553cb","series":0,"name":"replace","transplant":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\"{line=\").append(myLine)","position":"org.apache.commons.codec.language.bm.Rule:463","type":"CtInvocationImpl","sourcecode":"sb.append(\"{line=\").append(int)"},"status":0},{"failures":[134,135,136],"tindex":"00b6011c-17c6-11e6-83c5-4bbc917e0bbe","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"ii","tempResult":"ascii","pBytes":"ascii","cp":"ii"},"type":"adrStmt","transplantationPoint":{"toString":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-1},{"failures":[],"tindex":"00b6011d-17c6-11e6-83c5-5f830e146fce","series":0,"name":"replace","transplant":{"toString":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.SIX_1;\n} ","position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"str","org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.ENGLISH);\n} ","position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtIfImpl","sourcecode":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n} "},"status":-3},{"failures":[],"tindex":"00b6011e-17c6-11e6-83c5-a102a8b80a57","series":0,"name":"replace","transplant":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inExtendedComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"variableMap":{"inExtendedComment":"inExtendedComment","org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","line":"org.apache.commons.codec.language.bm.ResourceConstants.CMT"},"type":"adrStmt","transplantationPoint":{"toString":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n        inExtendedComment = true;\n    } else {\n        final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        final java.lang.String[] parts = line.split(\"\\\\s+\");\n        if ((parts.length) != 3) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n        } \n        final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n        final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n        final boolean accept = parts[2].equals(\"true\");\n        rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n    }\n}","position":"org.apache.commons.codec.language.bm.Lang:143","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 3) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n        } \n        final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n        final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n        final boolean boolean = parts[2].equals(\"true\");\n        rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n    }\n}"},"status":-2},{"failures":[],"tindex":"00b6282f-17c6-11e6-83c5-79681afef7f2","series":0,"name":"add","transplant":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"variableMap":{"singleByte":"org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"toString":"if (useHex) {\n    this.encodeTable = org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE;\n    this.decodeTable = org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE;\n} else {\n    this.encodeTable = org.apache.commons.codec.binary.Base32.ENCODE_TABLE;\n    this.decodeTable = org.apache.commons.codec.binary.Base32.DECODE_TABLE;\n}","position":"org.apache.commons.codec.binary.Base32:283","type":"CtIfImpl","sourcecode":"if (useHex) {\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n} else {\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n}"},"status":-2},{"failures":[48,49,137,50,51,52],"tindex":"00b62830-17c6-11e6-83c5-4b74eba9361b","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:569","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}"},"status":-1},{"failures":[117],"tindex":"00b64f41-17c6-11e6-83c5-4b9e9f708318","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"f+\", \"F\")","position":"org.apache.commons.codec.language.Caverphone1:96","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone2:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"status":-1},{"failures":[],"tindex":"00b64f42-17c6-11e6-83c5-0bae4581288d","series":0,"name":"replace","transplant":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"text"},"type":"adrStmt","transplantationPoint":{"toString":"if (rule.matches(text)) {\n    if (rule.acceptOnMatch) {\n        langs.retainAll(rule.languages);\n    } else {\n        langs.removeAll(rule.languages);\n    }\n} ","position":"org.apache.commons.codec.language.bm.Lang:219","type":"CtIfImpl","sourcecode":"if (rule.matches(text)) {\n    if (rule.boolean) {\n        langs.retainAll(rule.java.util.Set<java.lang.String>);\n    } else {\n        langs.removeAll(rule.java.util.Set<java.lang.String>);\n    }\n} "},"status":-2},{"failures":[113,116],"tindex":"00b64f43-17c6-11e6-83c5-9df2338371ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"a ^= t << n","position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"status":-1},{"failures":[5],"tindex":"00b64f44-17c6-11e6-83c5-2b99e1b34494","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 2)) {\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:312","type":"CtIfImpl","sourcecode":"if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n} "},"status":-1},{"failures":[],"tindex":"00b64f45-17c6-11e6-83c5-ad4f1ba23e60","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"altCtx.reset()","position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"status":0},{"failures":[],"tindex":"00b64f46-17c6-11e6-83c5-49c940dab1fa","series":0,"name":"replace","transplant":{"toString":"return soundex(source, false)[0]","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:436","type":"CtReturnImpl","sourcecode":"return soundex(source, false)[0]"},"variableMap":{"source":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))","position":"org.apache.commons.codec.digest.Md5Crypt:72","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"status":-2},{"failures":[117],"tindex":"00b64f47-17c6-11e6-83c5-2562be48ac45","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ly\", \"Ly\")","position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone2:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"status":-1},{"failures":[],"tindex":"00b64f48-17c6-11e6-83c5-e5dd3f3ceda9","series":0,"name":"replace","transplant":{"toString":"int patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int r = read(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:97","type":"CtLocalVariableImpl","sourcecode":"int int = read(byte[], 0, 1)"},"status":-2},{"failures":[],"tindex":"00b67659-17c6-11e6-83c5-2d1f45a38be5","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"text"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Lang.LangRule rule : org.apache.commons.codec.language.bm.Lang.this.rules) {\n    if (rule.matches(text)) {\n        if (rule.acceptOnMatch) {\n            langs.retainAll(rule.languages);\n        } else {\n            langs.removeAll(rule.languages);\n        }\n    } \n}","position":"org.apache.commons.codec.language.bm.Lang:218","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n    if (rule.matches(text)) {\n        if (rule.boolean) {\n            langs.retainAll(rule.java.util.Set<java.lang.String>);\n        } else {\n            langs.removeAll(rule.java.util.Set<java.lang.String>);\n        }\n    } \n}"},"status":0},{"failures":[],"tindex":"00b6765a-17c6-11e6-83c5-df0404020803","series":0,"name":"replace","transplant":{"toString":"code = '3'","position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"variableMap":{"code":"lastChar"},"type":"adrStmt","transplantationPoint":{"toString":"lastChar = ch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"status":0},{"failures":[],"tindex":"00b6765b-17c6-11e6-83c5-f55fbf808c21","series":0,"name":"replace","transplant":{"toString":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:347","type":"CtAssignmentImpl","sourcecode":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)"},"variableMap":{"d":"right"},"type":"adrStmt","transplantationPoint":{"toString":"right = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:312","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-2},{"failures":[],"tindex":"00b6765c-17c6-11e6-83c5-95056a305bdb","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:253","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.this.int"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:508","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[],"tindex":"00b6765d-17c6-11e6-83c5-4b675ebf9645","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int incount = 1","position":"org.apache.commons.codec.language.Soundex:268","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[138],"tindex":"00b6765e-17c6-11e6-83c5-8fe3f49348b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n    data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n} ","position":"org.apache.commons.codec.net.QCodec:160","type":"CtIfImpl","sourcecode":"if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n} "},"status":-1},{"failures":[139,140,141],"tindex":"00b6765f-17c6-11e6-83c5-6bb1e1da701f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '1'","position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"status":-1},{"failures":[],"tindex":"00b69d70-17c6-11e6-83c5-45d9b6d5ac08","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return encodeText(str, charset)","position":"org.apache.commons.codec.net.QCodec:230","type":"CtReturnImpl","sourcecode":"return encodeText(str, charset)"},"status":-3},{"failures":[73,77,80],"tindex":"00b69d71-17c6-11e6-83c5-191b0c708ddc","series":0,"name":"replace","transplant":{"toString":"code = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:353","type":"CtAssignmentImpl","sourcecode":"code = '-'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '4'","position":"org.apache.commons.codec.language.ColognePhonetic:361","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-1},{"failures":[],"tindex":"00b69d72-17c6-11e6-83c5-7dc7c21e0a36","series":0,"name":"replace","transplant":{"toString":"s = (s << 4) | (s >>> 28)","position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"variableMap":{"s":"patternLength"},"type":"adrStmt","transplantationPoint":{"toString":"patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:223","type":"CtAssignmentImpl","sourcecode":"patternLength = 1"},"status":-2},{"failures":[],"tindex":"00b69d73-17c6-11e6-83c5-5de17e4f63c0","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))","position":"org.apache.commons.codec.digest.DigestUtils:626","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"variableMap":{"data":"charsetName"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(bytes , charsetName)","position":"org.apache.commons.codec.binary.StringUtils:284","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , charsetName)"},"status":-2},{"failures":[113,114,115,116],"tindex":"00b69d74-17c6-11e6-83c5-93493edaa02d","series":0,"name":"add","transplant":{"toString":"u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"offset"},"type":"adrStmt","transplantationPoint":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8","position":"org.apache.commons.codec.digest.UnixCrypt:386","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8"},"status":-1},{"failures":[],"tindex":"00b69d75-17c6-11e6-83c5-cf80051bcfbb","series":0,"name":"add","transplant":{"toString":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)","position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"variableMap":{"c":"right","d":"right"},"type":"adrStmt","transplantationPoint":{"toString":"right = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:304","type":"CtAssignmentImpl","sourcecode":"right = results[1]"},"status":-2},{"failures":[],"tindex":"00b69d76-17c6-11e6-83c5-a9e47ade03c5","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone2:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[],"tindex":"00b69d77-17c6-11e6-83c5-011f1f71e3a9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"t = right","position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"t = right"},"status":0},{"failures":[],"tindex":"00b69d78-17c6-11e6-83c5-21c0d60f517f","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int wdsz = local.length()","position":"org.apache.commons.codec.language.Metaphone:145","type":"CtLocalVariableImpl","sourcecode":"final int int = local.length()"},"status":-2},{"failures":[],"tindex":"00b69d79-17c6-11e6-83c5-a1e6589d56e2","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_384)","position":"org.apache.commons.codec.digest.DigestUtils:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
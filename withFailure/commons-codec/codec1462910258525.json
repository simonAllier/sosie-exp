{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":23,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":24,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":2,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":3,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":4,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":26,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":66,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":8,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":54,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":6,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":60,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":55,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":36,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":59,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":25,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":49,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":21,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":38,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":47,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":56,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":17,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":19,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":62,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":51,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":45,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":15,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":16,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":46,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":11,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":40,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":64,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":68,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":22,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":42,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":48,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":10,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":43,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":27,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":1,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":32,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":63,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":58,"org.apache.commons.codec.language.SoundexTest.testB650":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":28,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":67,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":31,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":41,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":44,"org.apache.commons.codec.language.SoundexTest.testNewInstance":13,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":30,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":65,"org.apache.commons.codec.language.SoundexTest.testDifference":12,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":53,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":20,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":33,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":69},"transformations":[{"failures":[],"tindex":"728023b1-16e9-11e6-b910-058e17b939b0","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"variableMap":{"txt":"value"},"type":"adrStmt","transplantationPoint":{"toString":"value = cleanInput(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"status":-2},{"failures":[],"tindex":"72804ac2-16e9-11e6-b910-49295eb92a8e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"break","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:204","type":"CtBreakImpl","sourcecode":"break"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"72804ac3-16e9-11e6-b910-cf3b490a117a","series":0,"name":"replace","transplant":{"toString":"code = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:353","type":"CtAssignmentImpl","sourcecode":"code = '-'"},"variableMap":{"code":"mapped"},"type":"adrStmt","transplantationPoint":{"toString":"out[(count++)] = mapped","position":"org.apache.commons.codec.language.Soundex:276","type":"CtAssignmentImpl","sourcecode":"out[(count++)] = mapped"},"status":-1},{"failures":[],"tindex":"72804ac4-16e9-11e6-b910-39ab6126fb17","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this.languages","position":"org.apache.commons.codec.language.bm.Rule:130","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet"},"variableMap":{"languages":"other"},"type":"adrStmt","transplantationPoint":{"toString":"return other","position":"org.apache.commons.codec.language.bm.Languages:274","type":"CtReturnImpl","sourcecode":"return other"},"status":-3},{"failures":[20,21,22,23],"tindex":"728071d5-16e9-11e6-b910-2781660bcb66","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((((index == ((value.length()) - 1)) && (!slavoGermanic)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"IE\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 2, \"ME\", \"MA\")))) {\n    result.appendAlternate('R');\n} else {\n    result.append('R');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:584","type":"CtIfImpl","sourcecode":"if ((((index == ((value.length()) - 1)) && (!slavoGermanic)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"IE\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 2, \"ME\", \"MA\")))) {\n    result.appendAlternate('R');\n} else {\n    result.append('R');\n}"},"status":-1},{"failures":[],"tindex":"728071d6-16e9-11e6-b910-4d4f3c5dfb63","series":0,"name":"replace","transplant":{"toString":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())","position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} "},"status":-2},{"failures":[24],"tindex":"728071d7-16e9-11e6-b910-db54007ea20c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)"},"variableMap":{"data":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"failures":[],"tindex":"728098e8-16e9-11e6-b910-17b0c0ae8a58","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append(\"-\").append(encode(word))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\").append(encode(word))"},"status":0},{"failures":[],"tindex":"728098e9-16e9-11e6-b910-27c4e041e678","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('_')","position":"org.apache.commons.codec.net.URLCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('_')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('*')","position":"org.apache.commons.codec.net.QCodec:75","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('*')"},"status":-2},{"failures":[25,26,27,28,29,30,31,32],"tindex":"728098ea-16e9-11e6-b910-3589f9f9cc61","series":0,"name":"replace","transplant":{"toString":"ctx1.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:295","type":"CtInvocationImpl","sourcecode":"ctx1.reset()"},"variableMap":{"ctx1":"ctx"},"type":"adrStmt","transplantationPoint":{"toString":"if ((cnt & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(keyBytes);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:248","type":"CtIfImpl","sourcecode":"if ((cnt & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(keyBytes);\n}"},"status":-1},{"failures":[],"tindex":"7280bffb-16e9-11e6-b910-81d3975349f6","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"messageDigest.update(valueToDigest)","position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"status":-2},{"failures":[],"tindex":"7280bffc-16e9-11e6-b910-5f7ef78e4aa2","series":0,"name":"replace","transplant":{"toString":"return doubleMetaphone(value, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:430","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())"},"status":-2},{"failures":[],"tindex":"7280bffd-16e9-11e6-b910-41d7ea3e581c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:289","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[33,34],"tindex":"7280bffe-16e9-11e6-b910-a10d3536d0dc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"d = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:353","type":"CtAssignmentImpl","sourcecode":"d = results[1]"},"status":-1},{"failures":[],"tindex":"7280e70f-16e9-11e6-b910-77408381c245","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.RefinedSoundex:90","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[35,36],"tindex":"7280e710-16e9-11e6-b910-1b6fc68fc122","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (context.eof) {\n    return ;\n} ","position":"org.apache.commons.codec.binary.Base32:339","type":"CtIfImpl","sourcecode":"if (context.boolean) {\n    return ;\n} "},"status":-2},{"failures":[],"tindex":"7280e711-16e9-11e6-b910-f3ee4b09ce36","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return messageDigest","position":"org.apache.commons.codec.digest.DigestUtils:777","type":"CtReturnImpl","sourcecode":"return messageDigest"},"status":0},{"failures":[20,21,22],"tindex":"7280e712-16e9-11e6-b910-a108147e15fa","series":0,"name":"replace","transplant":{"toString":"result.append(\"KS\")","position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:678","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[37,38,39,40,41,42,43,44],"tindex":"7280e713-16e9-11e6-b910-259a77e21366","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:285","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd)"},"status":-1},{"failures":[25,29,30,31,32],"tindex":"72810e24-16e9-11e6-b910-b91965d886c3","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:459","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)"},"status":-1},{"failures":[45,46],"tindex":"72810e25-16e9-11e6-b910-01b631cbd9d2","series":0,"name":"replace","transplant":{"toString":"code = '3'","position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '4'","position":"org.apache.commons.codec.language.ColognePhonetic:371","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-1},{"failures":[],"tindex":"72810e26-16e9-11e6-b910-69d905b442bc","series":0,"name":"add","transplant":{"toString":"boxContent = boxContent.substring(1)","position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"boxContent = boxContent.substring(1)"},"variableMap":{"boxContent":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^cough\", \"cou2f\")","position":"org.apache.commons.codec.language.Caverphone1:59","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^cough\", \"cou2f\")"},"status":-2},{"failures":[],"tindex":"72810e27-16e9-11e6-b910-4d8b1d1f4edf","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256, key)","position":"org.apache.commons.codec.digest.HmacUtils:99","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"72813538-16e9-11e6-b910-77b476b8251d","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"status":0},{"failures":[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"tindex":"72813539-16e9-11e6-b910-7b580cb4be64","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n    lines.put(patternKey, rules);\n} ","position":"org.apache.commons.codec.language.bm.Rule:474","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n    lines.put(patternKey, rules);\n} "},"status":-1},{"failures":[20,21,65,22,23],"tindex":"7281353a-16e9-11e6-b910-1f4cdc5c9604","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (index == 0) {\n    result.append('A');\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('A');\n} "},"status":-1},{"failures":[],"tindex":"7281353b-16e9-11e6-b910-0b584cf5da66","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"status":-2},{"failures":[],"tindex":"72815c4c-16e9-11e6-b910-d50d337f2e91","series":0,"name":"add","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder(saltPrefix)","position":"org.apache.commons.codec.digest.Sha2Crypt:423","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix)"},"status":-2},{"failures":[],"tindex":"72815c4d-16e9-11e6-b910-97e1cc941a92","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"currentLine","encodeSize":"currentLine"},"type":"adrStmt","transplantationPoint":{"toString":"currentLine++","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:256","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"status":-3},{"failures":[],"tindex":"72815c4e-16e9-11e6-b910-496928b8cc97","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (propagate) {\n    out.flush();\n} ","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:119","type":"CtIfImpl","sourcecode":"if (propagate) {\n    java.io.OutputStream.flush();\n} "},"status":-3},{"failures":[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"tindex":"7281835f-16e9-11e6-b910-03691151147f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = true","position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"status":-1},{"failures":[],"tindex":"72818360-16e9-11e6-b910-056ea60fdd2f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (scanner.hasNextLine()) {\n    final java.lang.String rawLine = scanner.nextLine();\n    java.lang.String line = rawLine;\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n            inExtendedComment = true;\n        } else {\n            final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n            if (cmtI >= 0) {\n                line = line.substring(0, cmtI);\n            } \n            line = line.trim();\n            if ((line.length()) == 0) {\n                continue;\n            } \n            final java.lang.String[] parts = line.split(\"\\\\s+\");\n            if ((parts.length) != 3) {\n                throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n            } \n            final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n            final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n            final boolean accept = parts[2].equals(\"true\");\n            rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.Lang:140","type":"CtWhileImpl","sourcecode":"while (scanner.hasNextLine()) {\n    final java.lang.String java.lang.String = scanner.nextLine();\n    java.lang.String java.lang.String = rawLine;\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = true;\n        } else {\n            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            if (cmtI >= 0) {\n                line = line.substring(0, cmtI);\n            } \n            line = line.trim();\n            if ((line.length()) == 0) {\n                continue;\n            } \n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 3) {\n                throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n            } \n            final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n            final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n            final boolean boolean = parts[2].equals(\"true\");\n            rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n        }\n    }\n}"},"status":0},{"failures":[47,48,49,50,52,54,55,58],"tindex":"7281a971-16e9-11e6-b910-55172824ad5c","series":0,"name":"replace","transplant":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"variableMap":{"rules":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int cLine = currentLine;\n        final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(myLine);\n                sb.append(\", loc='\").append(loc).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String patternKey = r.pattern.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"7281f792-16e9-11e6-b910-4352f86b0e12","series":0,"name":"replace","transplant":{"toString":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.WWW_FORM_URL;\n} ","position":"org.apache.commons.codec.net.URLCodec:125","type":"CtIfImpl","sourcecode":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n} "},"variableMap":{"urlsafe":"obj","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":-3},{"failures":[],"tindex":"7281f793-16e9-11e6-b910-218759082c5e","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"if ((context.buffer) == null) {\n    context.buffer = new byte[getDefaultBufferSize()];\n    context.pos = 0;\n    context.readPos = 0;\n} else {\n    final byte[] b = new byte[(context.buffer.length) * (org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR)];\n    java.lang.System.arraycopy(context.buffer, 0, b, 0, context.buffer.length);\n    context.buffer = b;\n}","position":"org.apache.commons.codec.binary.BaseNCodec:249","type":"CtIfImpl","sourcecode":"if ((context.byte[]) == null) {\n    context.byte[] = new byte[getDefaultBufferSize()];\n    context.int = 0;\n    context.int = 0;\n} else {\n    final byte[] byte[] = new byte[(context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)];\n    java.lang.System.arraycopy(context.byte[], 0, b, 0, context.byte[].int);\n    context.byte[] = b;\n}"},"status":-2},{"failures":[20,21,66,65,23,67],"tindex":"72821ea4-16e9-11e6-b910-7938a0ac4f83","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n    result.append('J', 'A');\n} else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n    result.append('J', 'H');\n} else if (index == ((value.length()) - 1)) {\n    result.append('J', ' ');\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:526","type":"CtIfImpl","sourcecode":"if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n    result.append('J', 'A');\n} else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n    result.append('J', 'H');\n} else if (index == ((value.length()) - 1)) {\n    result.append('J', ' ');\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} "},"status":-1},{"failures":[],"tindex":"72821ea5-16e9-11e6-b910-b303e8031ca0","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx.reset()","position":"org.apache.commons.codec.digest.Sha2Crypt:501","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"status":-2},{"failures":[20,21,23],"tindex":"72821ea6-16e9-11e6-b910-03206f4285a6","series":0,"name":"add","transplant":{"toString":"result.append('J', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    result.append('H');\n} else {\n    result.append('J', 'H');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:518","type":"CtIfImpl","sourcecode":"if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    result.append('H');\n} else {\n    result.append('J', 'H');\n}"},"status":-1},{"failures":[],"tindex":"728245b7-16e9-11e6-b910-9761644034a9","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_NN"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_NN","position":"org.apache.commons.codec.language.Nysiis:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"728245b8-16e9-11e6-b910-a16ade662f1e","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"s+\", \"S\")","position":"org.apache.commons.codec.language.Caverphone1:92","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"s+\", \"S\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"wh3\", \"Wh3\")","position":"org.apache.commons.codec.language.Caverphone1:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":0},{"failures":[],"tindex":"728245b9-16e9-11e6-b910-5188f7017e90","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results)","position":"org.apache.commons.codec.digest.UnixCrypt:343","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results)"},"status":-2},{"failures":[],"tindex":"728245ba-16e9-11e6-b910-f776cffe1a38","series":0,"name":"replace","transplant":{"toString":"if ((i % 7) != 0) {\n    ctx1.update(keyBytes);\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:268","type":"CtIfImpl","sourcecode":"if ((i % 7) != 0) {\n    ctx1.update(keyBytes);\n} "},"variableMap":{"ctx1":"ctx","keyBytes":"pBytes","i":"keyLen"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(pBytes, 0, keyLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:398","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":0},{"failures":[],"tindex":"72826ccb-16e9-11e6-b910-11d054a1abb9","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"status":-2},{"failures":[],"tindex":"72826ccc-16e9-11e6-b910-f1efce57e882","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"len","encodeSize":"len"},"type":"adrStmt","transplantationPoint":{"toString":"len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:202","type":"CtAssignmentImpl","sourcecode":"len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len)"},"status":-3},{"failures":[20,21],"tindex":"72826ccd-16e9-11e6-b910-d1993f77fb01","series":0,"name":"replace","transplant":{"toString":"result.append('K', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"result.append('K', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('R')","position":"org.apache.commons.codec.language.DoubleMetaphone:706","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"status":-1},{"failures":[68,69],"tindex":"72826cce-16e9-11e6-b910-cb6912326167","series":0,"name":"replace","transplant":{"toString":"if (cs1 == cs2) {\n    return true;\n} ","position":"org.apache.commons.codec.binary.StringUtils:71","type":"CtIfImpl","sourcecode":"if (cs1 == cs2) {\n    return true;\n} "},"variableMap":{"cs1":"cs2","cs2":"cs2"},"type":"adrStmt","transplantationPoint":{"toString":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtIfImpl","sourcecode":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":46,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
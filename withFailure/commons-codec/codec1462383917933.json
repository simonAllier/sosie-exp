{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":22,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":3,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":23,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":21,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":47,"org.apache.commons.codec.language.NysiisTest.testDropBy":44,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":38,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":1,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":48,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":26,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":52,"org.apache.commons.codec.binary.Base64Test.testUUID":11,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":31,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":50,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":53,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":8,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":19,"org.apache.commons.codec.binary.Base64Test.testPairs":10,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":18,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":20,"org.apache.commons.codec.language.NysiisTest.testRule7":43,"org.apache.commons.codec.language.NysiisTest.testRule6":42,"org.apache.commons.codec.language.NysiisTest.testRule5":41,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":45,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":46,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":13,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":14,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":24,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":5,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":15,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":16,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":33,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":4,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":2,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":28,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":32,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":37,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":51,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":49,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":9,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":6,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":39,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":30,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":12,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":25},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"f70e3b64-121f-11e6-957c-97da63c8ecb2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b += 256","position":"org.apache.commons.codec.binary.Base64:383","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"status":-1},{"failures":[22],"tindex":"f70e6275-121f-11e6-957c-d1eb95b72fd5","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"mb$\", \"m2\")","position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[],"tindex":"f70e6276-121f-11e6-957c-a1cef6a2d871","series":0,"name":"replace","transplant":{"toString":"final int[] results = new int[2]","position":"org.apache.commons.codec.digest.UnixCrypt:298","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int[] out = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1)","position":"org.apache.commons.codec.digest.UnixCrypt:226","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1)"},"status":-2},{"failures":[],"tindex":"f70e6277-121f-11e6-957c-a306384aa22f","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:365","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":0},{"failures":[],"tindex":"f70e8988-121f-11e6-957c-090bb3fc8e75","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:186","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[23],"tindex":"f70e8989-121f-11e6-957c-f1f7b87e22a2","series":0,"name":"replace","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"status":-1},{"failures":[],"tindex":"f70e898a-121f-11e6-957c-7ff397fa7a34","series":0,"name":"replace","transplant":{"toString":"return string.getBytes(charset)","position":"org.apache.commons.codec.binary.StringUtils:96","type":"CtReturnImpl","sourcecode":"return string.getBytes(charset)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.UTF_16","string":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.UTF_16)","position":"org.apache.commons.codec.binary.StringUtils:181","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[24],"tindex":"f70e898b-121f-11e6-957c-09c2d3dce38e","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:312","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)))"},"status":-1},{"failures":[],"tindex":"f70eb09c-121f-11e6-957c-d97ba5782c98","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"name2RtLStart"},"type":"adrStmt","transplantationPoint":{"toString":"if (name1LtRStart.equals(name2RtLStart)) {\n    name1Char[i] = ' ';\n    name2Char[i] = ' ';\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtIfImpl","sourcecode":"if (name1LtRStart.equals(name2RtLStart)) {\n    name1Char[i] = ' ';\n    name2Char[i] = ' ';\n} "},"status":-2},{"failures":[25,26],"tindex":"f70eb09d-121f-11e6-957c-4fa1baf58437","series":0,"name":"replace","transplant":{"toString":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:347","type":"CtAssignmentImpl","sourcecode":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)"},"variableMap":{"d":"s"},"type":"adrStmt","transplantationPoint":{"toString":"s = (s << 4) | (s >>> 28)","position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"status":-1},{"failures":[27,28,29],"tindex":"f70eb09e-121f-11e6-957c-118c607eccf6","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"y\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[30,31],"tindex":"f70eb09f-121f-11e6-957c-3fe27ebf2f88","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"f70ed7b0-121f-11e6-957c-733a1cb2701f","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (branching) {\n    nextBranches.clear();\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:516","type":"CtIfImpl","sourcecode":"if (branching) {\n    nextBranches.clear();\n} "},"status":-2},{"failures":[],"tindex":"f70ed7b1-121f-11e6-957c-d15396b9df6a","series":0,"name":"replace","transplant":{"toString":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtIfImpl","sourcecode":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"input","name2":"input","name1":"input","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = (input.length()) - 1, j = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:279","type":"CtForImpl","sourcecode":"for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}"},"status":-3},{"failures":[],"tindex":"f70efec2-121f-11e6-957c-7d1ec662887b","series":0,"name":"replace","transplant":{"toString":"langs.retainAll(rule.languages)","position":"org.apache.commons.codec.language.bm.Lang:221","type":"CtInvocationImpl","sourcecode":"langs.retainAll(rule.java.util.Set<java.lang.String>)"},"variableMap":{"languages":"languages","rule":"rule","langs":"languages"},"type":"adrStmt","transplantationPoint":{"toString":"langs.removeAll(rule.languages)","position":"org.apache.commons.codec.language.bm.Lang:223","type":"CtInvocationImpl","sourcecode":"langs.removeAll(rule.java.util.Set<java.lang.String>)"},"status":-2},{"failures":[],"tindex":"f70efec3-121f-11e6-957c-3550ee0ec48b","series":0,"name":"replace","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:531","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"f70efec4-121f-11e6-957c-c3718f62323c","series":0,"name":"add","transplant":{"toString":"for (int i = (input.length()) - 1, j = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:279","type":"CtForImpl","sourcecode":"for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}"},"variableMap":{"input":"prefix","suffix":"prefix"},"type":"adrStmt","transplantationPoint":{"toString":"if ((prefix.length()) > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:601","type":"CtIfImpl","sourcecode":"if ((prefix.length()) > (input.length())) {\n    return false;\n} "},"status":-2},{"failures":[],"tindex":"f70f25d5-121f-11e6-957c-cfed6877ade1","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n    result.append('R');\n    index += 2;\n} else {\n    if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n        if (isVowel(charAt(value, (index + 1)))) {\n            result.append('A', 'F');\n        } else {\n            result.append('A');\n        }\n        index++;\n    } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.appendAlternate('F');\n        index++;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n        result.append(\"TS\", \"FX\");\n        index += 4;\n    } else {\n        index++;\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:704","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n    result.append('R');\n    index += 2;\n} else {\n    if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n        if (isVowel(charAt(value, (index + 1)))) {\n            result.append('A', 'F');\n        } else {\n            result.append('A');\n        }\n        index++;\n    } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.appendAlternate('F');\n        index++;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n        result.append(\"TS\", \"FX\");\n        index += 4;\n    } else {\n        index++;\n    }\n}"},"status":-2},{"failures":[],"tindex":"f70f25d6-121f-11e6-957c-1d4d17521262","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(data, start, newData, 0, length)","position":"org.apache.commons.codec.language.ColognePhonetic:242","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(char[], start, newData, 0, length)"},"status":-2},{"failures":[],"tindex":"f70f25d7-121f-11e6-957c-09aec7384fee","series":0,"name":"replace","transplant":{"toString":"int value = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])","position":"org.apache.commons.codec.digest.UnixCrypt:385","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])"},"variableMap":{"b":"buffer","offset":"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH"},"type":"adrStmt","transplantationPoint":{"toString":"int read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH)","position":"org.apache.commons.codec.digest.DigestUtils:794","type":"CtLocalVariableImpl","sourcecode":"int int = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int)"},"status":-2},{"failures":[],"tindex":"f70f4ce8-121f-11e6-957c-f3407c3e438d","series":0,"name":"replace","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"status":-2},{"failures":[],"tindex":"f70f4ce9-121f-11e6-957c-437e30806345","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:500","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"status":-2},{"failures":[],"tindex":"f70f4cea-121f-11e6-957c-97b5ffc0e5b6","series":0,"name":"replace","transplant":{"toString":"result.append('0', 'T')","position":"org.apache.commons.codec.language.DoubleMetaphone:690","type":"CtInvocationImpl","sourcecode":"result.append('0', 'T')"},"variableMap":{"result":"this"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Collections.sort(ruleList, new java.util.Comparator<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>() {\n    @java.lang.Override\n    public int compare(final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule1, final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule2) {\n        return (rule2.getPatternLength()) - (rule1.getPatternLength());\n    }\n})","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:241","type":"CtInvocationImpl","sourcecode":"java.util.Collections.sort(ruleList, new java.util.Comparator<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>() {\n    @java.lang.Override\n    public int compare(final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule1, final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule2) {\n        return (rule2.getPatternLength()) - (rule1.getPatternLength());\n    }\n})"},"status":-2},{"failures":[],"tindex":"f70f73fb-121f-11e6-957c-9fa5bb4b086d","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:487","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())"},"variableMap":{"str":"lastThree"},"type":"adrStmt","transplantationPoint":{"toString":"return firstThree + lastThree","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return firstThree + lastThree"},"status":-2},{"failures":[],"tindex":"f70f73fc-121f-11e6-957c-b1f5b8cf5d9e","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ci\", \"si\")","position":"org.apache.commons.codec.language.Caverphone1:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"status":0},{"failures":[],"tindex":"f70f73fd-121f-11e6-957c-7d968f0bdaf5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.BCodec:180","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[32,33,34,35,36,37,38],"tindex":"f70f73fe-121f-11e6-957c-55914c273000","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:289","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[],"tindex":"f70f9b0f-121f-11e6-957c-d1c4052480eb","series":0,"name":"replace","transplant":{"toString":"final int patternLength = org.apache.commons.codec.language.bm.Rule.this.pattern.length()","position":"org.apache.commons.codec.language.bm.Rule:703","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length()"},"variableMap":{"pattern":"ph"},"type":"adrStmt","transplantationPoint":{"toString":"final int open = ph.indexOf(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"status":-3},{"failures":[],"tindex":"f70f9b10-121f-11e6-957c-2b520721ea8b","series":0,"name":"add","transplant":{"toString":"right = t","position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"index","right":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:343","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":0},{"failures":[],"tindex":"f70f9b11-121f-11e6-957c-e5634335cfe3","series":0,"name":"replace","transplant":{"toString":"final boolean startsWith = regex.startsWith(\"^\")","position":"org.apache.commons.codec.language.bm.Rule:500","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = regex.startsWith(\"^\")"},"variableMap":{"regex":"content"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean startsWithBox = content.startsWith(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:545","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.startsWith(\"[\")"},"status":0},{"failures":[],"tindex":"f70f9b12-121f-11e6-957c-23267775de11","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('.')","position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('$')","position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"status":-2},{"failures":[27,28,29],"tindex":"f70f9b13-121f-11e6-957c-35b625256794","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[],"tindex":"f70f9b14-121f-11e6-957c-7d744869d9c3","series":0,"name":"replace","transplant":{"toString":"right = t","position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"modulus","right":"org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base32:502","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[],"tindex":"f70f9b15-121f-11e6-957c-bdc38c3114d4","series":0,"name":"replace","transplant":{"toString":"final java.lang.String input = cleanup(source)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:490","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = cleanup(source)"},"variableMap":{"source":"name"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String lastThree = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)), nameLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:164","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength)"},"status":-2},{"failures":[39],"tindex":"f70fc226-121f-11e6-957c-53098cbe3da9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"status":-1},{"failures":[],"tindex":"f70fc227-121f-11e6-957c-1d3eeb366988","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (rulesIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + (org.apache.commons.codec.language.DaitchMokotoffSoundex.RESOURCE_FILE)));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:230","type":"CtIfImpl","sourcecode":"if (rulesIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)));\n} "},"status":0},{"failures":[],"tindex":"f70fc228-121f-11e6-957c-17510f5a2f87","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"status":-2},{"failures":[40,41,42,43,44],"tindex":"f70fc229-121f-11e6-957c-0df377a3ae92","series":0,"name":"replace","transplant":{"toString":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} ","position":"org.apache.commons.codec.language.Nysiis:304","type":"CtIfImpl","sourcecode":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} "},"variableMap":{"last2Char":"lastChar","lastChar":"lastChar","key":"key"},"type":"adrStmt","transplantationPoint":{"toString":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} ","position":"org.apache.commons.codec.language.Nysiis:296","type":"CtIfImpl","sourcecode":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} "},"status":-1},{"failures":[45],"tindex":"f70fc22a-121f-11e6-957c-4723c2c64892","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (data.length) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n        data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n    } \n}","position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.BLANK":"org.apache.commons.codec.net.QCodec.UNDERSCORE","data":"data","length":"length","org.apache.commons.codec.net.QCodec.UNDERSCORE":"org.apache.commons.codec.net.QCodec.BLANK"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.net.QCodec.this.encodeBlanks) {\n    for (int i = 0 ; i < (data.length) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n            data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n        } \n    }\n} ","position":"org.apache.commons.codec.net.QCodec:158","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.net.QCodec.this.boolean) {\n    for (int int = 0 ; i < (data.int) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n            data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n        } \n    }\n} "},"status":-1},{"failures":[46,47,48,49,50,51,52,53],"tindex":"f70fe93b-121f-11e6-957c-b9bcbdf23c0a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:215","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int)"},"status":-1},{"failures":[],"tindex":"f70fe93c-121f-11e6-957c-2bec9475c39f","series":0,"name":"add","transplant":{"toString":"key.deleteCharAt(((key.length()) - 2))","position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"variableMap":{"key":"builder"},"type":"adrStmt","transplantationPoint":{"toString":"builder.append(replacement)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:139","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(replacement)"},"status":-2},{"failures":[],"tindex":"f70fe93d-121f-11e6-957c-37f754acaa3a","series":0,"name":"add","transplant":{"toString":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))","position":"org.apache.commons.codec.binary.Base32:292","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":42,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
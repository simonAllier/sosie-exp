{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":28,"org.apache.commons.codec.binary.HexTest.testCustomCharset":35,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":57,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":47,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":27,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":32,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":59,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":10,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":50,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":49,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":23,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":41,"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull":48,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":6,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":8,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":61,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":56,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":18,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":38,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":21,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":0,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":55,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":60,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":1,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":9,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":7,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":37,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":13,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":14,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":5,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":25,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":4,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":30,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":20,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":17,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":24,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":34,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":3,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":29,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":44,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":58,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":42,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":52,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":54,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":16,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":43,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":2,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":12,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":26,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":33,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":36,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":51,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":31,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":40,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":53,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":15,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":22},"transformations":[{"failures":[],"tindex":"92e1451a-16e4-11e6-8668-91f27bc576d0","series":0,"name":"replace","transplant":{"toString":"this.doEncode = doEncode","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:46","type":"CtAssignmentImpl","sourcecode":"this.boolean = doEncode"},"variableMap":{"doEncode":"eof"},"type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base32:343","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"92e16c2b-16e4-11e6-8668-691dd6646906","series":0,"name":"replace","transplant":{"toString":"return string.getBytes(charsetName)","position":"org.apache.commons.codec.binary.StringUtils:142","type":"CtReturnImpl","sourcecode":"return string.getBytes(charsetName)"},"variableMap":{"string":"data","charsetName":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:673","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-2},{"failures":[],"tindex":"92e16c2c-16e4-11e6-8668-6d9fb6005b94","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} ","position":"org.apache.commons.codec.binary.Base32:308","type":"CtIfImpl","sourcecode":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} "},"status":0},{"failures":[],"tindex":"92e1933d-16e4-11e6-8668-5f66894c12a1","series":0,"name":"add","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int bitlen = bigInt.bitLength()","position":"org.apache.commons.codec.binary.Base64:749","type":"CtLocalVariableImpl","sourcecode":"int int = bigInt.bitLength()"},"status":-2},{"failures":[],"tindex":"92e1933e-16e4-11e6-8668-ab3de02ec05a","series":0,"name":"replace","transplant":{"toString":"for (int i = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:89","type":"CtForImpl","sourcecode":"for (int int = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('\\'')","position":"org.apache.commons.codec.net.QCodec:72","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\'')"},"status":0},{"failures":[0,1,2,3,4],"tindex":"92e1933f-16e4-11e6-8668-37218a7964a1","series":0,"name":"replace","transplant":{"toString":"return compareCode","position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"variableMap":{"compareCode":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (encode) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n} else {\n    buffer.write(b);\n    return 1;\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:222","type":"CtIfImpl","sourcecode":"if (encode) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n} else {\n    buffer.write(b);\n    return 1;\n}"},"status":-1},{"failures":[],"tindex":"92e1ba50-16e4-11e6-8668-2f93fa430d14","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = builder.toString()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:153","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.StringBuilder.toString()"},"status":-2},{"failures":[5,6,7],"tindex":"92e1ba51-16e4-11e6-8668-afd9ccc16d06","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-1},{"failures":[],"tindex":"92e1ba52-16e4-11e6-8668-23fef2c4d67b","series":0,"name":"replace","transplant":{"toString":"roundsCustom = true","position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"roundsCustom = true"},"variableMap":{"roundsCustom":"concat"},"type":"adrStmt","transplantationPoint":{"toString":"this.concat = concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"status":-2},{"failures":[8,9,10,11,12],"tindex":"92e1ba53-16e4-11e6-8668-b98f18f1eaca","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return decodeText(str);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.QCodec:268","type":"CtTryImpl","sourcecode":"try {\n    return decodeText(str);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-1},{"failures":[],"tindex":"92e1e164-16e4-11e6-8668-096b8bfa7509","series":0,"name":"replace","transplant":{"toString":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtIfImpl","sourcecode":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"name1","name2":"name2","name1":"name2","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)) {\n    return false;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:244","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    return false;\n} "},"status":-3},{"failures":[13,14],"tindex":"92e1e165-16e4-11e6-8668-3d4929ce5e7b","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:453","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data)"},"variableMap":{"data":"bigBytes"},"type":"adrStmt","transplantationPoint":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-1},{"failures":[15,16],"tindex":"92e1e166-16e4-11e6-8668-758665b5e764","series":0,"name":"replace","transplant":{"toString":"return str","position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return str"},"variableMap":{"str":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt)","position":"org.apache.commons.codec.digest.Crypt:71","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt)"},"status":-1},{"failures":[],"tindex":"92e20877-16e4-11e6-8668-8d37485c1caa","series":0,"name":"replace","transplant":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:617","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"status":-2},{"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"tindex":"92e20878-16e4-11e6-8668-13e53766240e","series":0,"name":"add","transplant":{"toString":"name1Char[(name1Size - i)] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"name1Char[(name1Size - i)] = ' '"},"variableMap":{"name1Char":"out","name1Size":"i","i":"i"},"type":"adrStmt","transplantationPoint":{"toString":"out[(j++)] = toDigits[(15 & (data[i]))]","position":"org.apache.commons.codec.binary.Hex:146","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[(15 & (data[i]))]"},"status":-1},{"failures":[],"tindex":"92e20879-16e4-11e6-8668-f163360d51f4","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")","position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.URLCodec:250","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-2},{"failures":[],"tindex":"92e22f8a-16e4-11e6-8668-1f30521b2467","series":0,"name":"replace","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"i"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:98","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-2},{"failures":[],"tindex":"92e22f8b-16e4-11e6-8668-abb4149763b7","series":0,"name":"add","transplant":{"toString":"right = (left >>> 1) | (left << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:296","type":"CtAssignmentImpl","sourcecode":"right = (left >>> 1) | (left << 31)"},"variableMap":{"left":"lineLength","right":"lineLength"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineLength = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0","position":"org.apache.commons.codec.binary.BaseNCodec:209","type":"CtAssignmentImpl","sourcecode":"this.int = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0"},"status":-2},{"failures":[],"tindex":"92e22f8c-16e4-11e6-8668-f314ff66b591","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:807","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[40,41],"tindex":"92e22f8d-16e4-11e6-8668-1fa7922bc38e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"status":-1},{"failures":[],"tindex":"92e2569e-16e4-11e6-8668-f953f2970da5","series":0,"name":"replace","transplant":{"toString":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} ","position":"org.apache.commons.codec.language.Nysiis:296","type":"CtIfImpl","sourcecode":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} "},"variableMap":{"lastChar":"value","key":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.maxLength)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value);\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:957","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} "},"status":-2},{"failures":[],"tindex":"92e2569f-16e4-11e6-8668-257c39f9a031","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.this.charset","position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.charset","position":"org.apache.commons.codec.net.QuotedPrintableCodec:548","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.java.nio.charset.Charset"},"status":-2},{"failures":[42,43,44,45,46,47],"tindex":"92e256a0-16e4-11e6-8668-c3cbec5c1c84","series":0,"name":"add","transplant":{"toString":"currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch())","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:493","type":"CtInvocationImpl","sourcecode":"currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch())"},"variableMap":{"currentBranches":"currentBranches"},"type":"adrStmt","transplantationPoint":{"toString":"currentBranches.addAll(nextBranches)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:542","type":"CtInvocationImpl","sourcecode":"currentBranches.addAll(nextBranches)"},"status":-1},{"failures":[48],"tindex":"92e27db1-16e4-11e6-8668-a12d02622e10","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:270","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-1},{"failures":[49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"92e27db2-16e4-11e6-8668-dde1ac8bb6fc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base32:502","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-1},{"failures":[],"tindex":"92e27db3-16e4-11e6-8668-55256da2baa3","series":0,"name":"replace","transplant":{"toString":"return encodeText(str, charset)","position":"org.apache.commons.codec.net.QCodec:230","type":"CtReturnImpl","sourcecode":"return encodeText(str, charset)"},"variableMap":{"str":"l","charset":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"status":-2},{"failures":[],"tindex":"92e27db4-16e4-11e6-8668-77df445f1888","series":0,"name":"add","transplant":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"variableMap":{"l_ascii":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false)","position":"org.apache.commons.codec.binary.Base64:621","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false)"},"status":-2},{"failures":[],"tindex":"92e27db5-16e4-11e6-8668-f745a5eba0ed","series":0,"name":"add","transplant":{"toString":"return 0","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":28,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
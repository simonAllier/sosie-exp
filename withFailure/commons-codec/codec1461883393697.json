{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":27,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":21,"org.apache.commons.codec.language.NysiisTest.testSnat":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":28,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":75,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":123,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":54,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":115,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":98,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":26,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":101,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":9,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":73,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":62,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":90,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":92,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":16,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":121,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":29,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":36,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":24,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":37,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":103,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":61,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":6,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":105,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":87,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":76,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":77,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":84,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":97,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":53,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":7,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":104,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":107,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray":91,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":45,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":47,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":100,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":25,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":96,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":122,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":40,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":78,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":102,"org.apache.commons.codec.language.NysiisTest.testTranan":112,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":32,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":68,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":35,"org.apache.commons.codec.language.NysiisTest.testSnad":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":49,"org.apache.commons.codec.language.MetaphoneTest.testTCH":58,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":13,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":64,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":63,"org.apache.commons.codec.language.NysiisTest.testDropBy":95,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":44,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":120,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":23,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":51,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":118,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":85,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":88,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":80,"org.apache.commons.codec.language.NysiisTest.testRule7":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":81,"org.apache.commons.codec.language.NysiisTest.testRule6":93,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":48,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":43,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":113,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":15,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":11,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":67,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":59,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":60,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":83,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":41,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":86,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":42,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":106,"org.apache.commons.codec.language.NysiisTest.testOthers":111,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":55,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":33,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":38,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":72},"transformations":[{"failures":[],"tindex":"975c3e82-0d92-11e6-beb9-c9186c970fcf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:418","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text)"},"variableMap":{"text":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:365","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"failures":[],"tindex":"975c3e83-0d92-11e6-beb9-a11388826d85","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"variableMap":{"sBytes":"buffer","blocksize":"ibitWorkArea","tempResult":"buffer","cp":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:466","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 1 :\n        break;\n    case 2 :\n        context.int = (context.int) >> 4;\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        context.int = (context.int) >> 2;\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-2},{"failures":[],"tindex":"975c6594-0d92-11e6-beb9-4dd9baee1e1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"status":0},{"failures":[],"tindex":"975c6595-0d92-11e6-beb9-1dc338d4fb1a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:156","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n    final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n    final int int = java.io.InputStream.read(buf);\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n} "},"status":-2},{"failures":[],"tindex":"975c6596-0d92-11e6-beb9-8b4fd8ce214c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:284","type":"CtIfImpl","sourcecode":"if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n    code.append('X');\n} else {\n    code.append('S');\n}"},"variableMap":{"code":"local","local":"local","n":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtIfImpl","sourcecode":"if ((inwd[1]) == 'H') {\n    local.append(inwd, 1, ((inwd.int) - 1));\n    local.setCharAt(0, 'W');\n} else {\n    local.append(inwd);\n}"},"status":-2},{"failures":[],"tindex":"975c6597-0d92-11e6-beb9-673f3f8faa09","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:116","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[0,1,2,3],"tindex":"975c6598-0d92-11e6-beb9-75bdb46aa435","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:141","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"975c6599-0d92-11e6-beb9-bf93a6f3af29","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:244","type":"CtIfImpl","sourcecode":"if (isLastChar(wdsz, n)) {\n    break;\n} "},"variableMap":{"wdsz":"index","n":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:514","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n    if (rule.matches(inputContext)) {\n        if (branching) {\n            nextBranches.clear();\n        } \n        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n        final boolean boolean = ((replacements.int) > 1) && branching;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n            for (final java.lang.String java.lang.String : replacements) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                nextBranch.processNextReplacement(nextReplacement, force);\n                if (branching) {\n                    nextBranches.add(nextBranch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (branching) {\n            currentBranches.clear();\n            currentBranches.addAll(nextBranches);\n        } \n        index += (rule.getPatternLength()) - 1;\n        break;\n    } \n}"},"status":-2},{"failures":[],"tindex":"975c8caa-0d92-11e6-beb9-1fbb85a6ad90","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\").append(encode(word))"},"variableMap":{"result":"saltString","word":"org.apache.commons.codec.digest.B64.B64T"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:75","type":"CtInvocationImpl","sourcecode":"saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())))"},"status":-2},{"failures":[],"tindex":"975c8cab-0d92-11e6-beb9-0b707b248f8c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:72","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\'')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:91","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(' ')"},"status":-2},{"failures":[],"tindex":"975c8cac-0d92-11e6-beb9-bdf46ea5de85","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:132","type":"CtAssignmentImpl","sourcecode":"name = cleanName(name)"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:79","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tio\", \"sio\")"},"status":-2},{"failures":[],"tindex":"975cb3bd-0d92-11e6-beb9-230f07d0bb76","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"name1LtREnd","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"name2RtLEnd"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtIfImpl","sourcecode":"if (name1LtREnd.equals(name2RtLEnd)) {\n    name1Char[(name1Size - i)] = ' ';\n    name2Char[(name2Size - i)] = ' ';\n} "},"status":-3},{"failures":[4,5,6,7],"tindex":"975cb3be-0d92-11e6-beb9-736f5a90cc49","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:188","type":"CtAssignmentImpl","sourcecode":"last = '*'"},"variableMap":{"last":"lastCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"lastCode = code"},"status":-1},{"failures":[],"tindex":"975cb3bf-0d92-11e6-beb9-a9b49114f512","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"variableMap":{"s":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:451","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[],"tindex":"975cb3c0-0d92-11e6-beb9-279453d59ca0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:96","type":"CtReturnImpl","sourcecode":"return string.getBytes(charset)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.ISO_8859_1","string":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:114","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"tindex":"975cdad1-0d92-11e6-beb9-07d205354aca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtIfImpl","sourcecode":"if (pos > (-1)) {\n    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n} else {\n    sb.append(c);\n}"},"status":-1},{"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"tindex":"975cdad2-0d92-11e6-beb9-17d9c391075c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"variableMap":{"hard":"matches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:365","type":"CtAssignmentImpl","sourcecode":"matches = substring.equals(test)"},"status":-1},{"failures":[],"tindex":"975cdad3-0d92-11e6-beb9-63f5b430db1f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:436","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-2},{"failures":[72,73],"tindex":"975cdad4-0d92-11e6-beb9-a7e94237914f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"offset","l_ascii":"b","bits":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"status":-1},{"failures":[19,24,29,41,42,44,46,48,51,53],"tindex":"975cdad5-0d92-11e6-beb9-535e2cea03ea","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:466","type":"CtInvocationImpl","sourcecode":"sb.append(\", lcon='\").append(lCon).append('\\'')"},"variableMap":{"lCon":"org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII","sb":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:363","type":"CtInvocationImpl","sourcecode":"sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos))"},"status":-1},{"failures":[2,3],"tindex":"975d01e6-0d92-11e6-beb9-45a63117c935","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:711","type":"CtIfImpl","sourcecode":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:607","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n    result.append('S');\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[],"tindex":"975d01e7-0d92-11e6-beb9-578a26948544","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:355","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[],"tindex":"975d01e8-0d92-11e6-beb9-9f9ddba1c391","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:239","type":"CtAssignmentImpl","sourcecode":"name1 = getFirst3Last3(name1)"},"variableMap":{"name1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"status":-2},{"failures":[],"tindex":"975d01e9-0d92-11e6-beb9-f7e549caab2c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"variableMap":{"algorithm":"org.apache.commons.codec.digest.MessageDigestAlgorithms.MD2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:85","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"975d01ea-0d92-11e6-beb9-d748e7dbc52f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:94","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[2,3],"tindex":"975d01eb-0d92-11e6-beb9-3db0625df759","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"result.append(\"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[],"tindex":"975d01ec-0d92-11e6-beb9-e9557bc2ad9a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:96","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[74,75,76,77,78,79,80,81,82,83],"tindex":"975d28fd-0d92-11e6-beb9-9f8f21cc7e84","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)"},"variableMap":{"ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:410","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes)"},"status":-1},{"failures":[84,85,86,87,88,89,90],"tindex":"975d28fe-0d92-11e6-beb9-ab0458a00e8a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:274","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:50","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data).digest()"},"status":-1},{"failures":[2,3],"tindex":"975d28ff-0d92-11e6-beb9-f13fddcc9ec8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:727","type":"CtInvocationImpl","sourcecode":"result.append(\"TS\", \"FX\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"result.appendPrimary('L')"},"status":-1},{"failures":[91],"tindex":"975d2900-0d92-11e6-beb9-838a623f31f7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"975d2901-0d92-11e6-beb9-bd266b500418","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"status":0},{"failures":[92],"tindex":"975d2902-0d92-11e6-beb9-d19db27ae632","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:419","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(((l.length()) + 1))"},"variableMap":{"input":"remainder","l":"remainder"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:412","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = \"d\" + remainder"},"status":-1},{"failures":[],"tindex":"975d2903-0d92-11e6-beb9-2f86d498a626","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtIfImpl","sourcecode":"if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.Metaphone.VARSON","org.apache.commons.codec.digest.B64.B64T":"org.apache.commons.codec.language.Metaphone.VARSON"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:155","type":"CtSwitchImpl","sourcecode":"switch (symb) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (n == 0) {\n            code.append(symb);\n        } \n        break;\n    case 'B' :\n        if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n            break;\n        } \n        code.append(symb);\n        break;\n    case 'C' :\n        if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n            break;\n        } \n        if (regionMatch(local, n, \"CIA\")) {\n            code.append('X');\n            break;\n        } \n        if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n            code.append('S');\n            break;\n        } \n        if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n            code.append('K');\n            break;\n        } \n        if (isNextChar(local, n, 'H')) {\n            if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                code.append('K');\n            } else {\n                code.append('X');\n            }\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n            code.append('J');\n            n += 2;\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'G' :\n        if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n            break;\n        } \n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n            break;\n        } \n        if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n            break;\n        } \n        if (isPreviousChar(local, n, 'G')) {\n            hard = true;\n        } else {\n            hard = false;\n        }\n        if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n            code.append('J');\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'H' :\n        if (isLastChar(wdsz, n)) {\n            break;\n        } \n        if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n            break;\n        } \n        if (isVowel(local, (n + 1))) {\n            code.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        code.append(symb);\n        break;\n    case 'K' :\n        if (n > 0) {\n            if (!(isPreviousChar(local, n, 'C'))) {\n                code.append(symb);\n            } \n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'P' :\n        if (isNextChar(local, n, 'H')) {\n            code.append('F');\n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'Q' :\n        code.append('K');\n        break;\n    case 'S' :\n        if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n            code.append('X');\n        } else {\n            code.append('S');\n        }\n        break;\n    case 'T' :\n        if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n            code.append('X');\n            break;\n        } \n        if (regionMatch(local, n, \"TCH\")) {\n            break;\n        } \n        if (regionMatch(local, n, \"TH\")) {\n            code.append('0');\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'V' :\n        code.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n            code.append(symb);\n        } \n        break;\n    case 'X' :\n        code.append('K');\n        code.append('S');\n        break;\n    case 'Z' :\n        code.append('S');\n        break;\n    default :\n        break;\n}"},"status":-2},{"failures":[],"tindex":"975d9e34-0d92-11e6-beb9-7f23b2982a2f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"decodeSize","len":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:461","type":"CtIfImpl","sourcecode":"if ((context.boolean) && ((context.int) != 0)) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    switch (context.int) {\n        case 1 :\n            break;\n        case 2 :\n            context.int = (context.int) >> 4;\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            context.int = (context.int) >> 2;\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n} "},"status":-2},{"failures":[],"tindex":"975dc545-0d92-11e6-beb9-57ff8ea19872","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:478","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[],"tindex":"975dc546-0d92-11e6-beb9-7b1fa43a703e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:274","type":"CtReturnImpl","sourcecode":"return other"},"status":-2},{"failures":[],"tindex":"975dc547-0d92-11e6-beb9-3be5f9e1ddff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"pos","l_ascii":"buffer","bits":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:478","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[0,2,3],"tindex":"975dc548-0d92-11e6-beb9-dd103baad4a6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtUnaryOperatorImpl","sourcecode":"(count++)"},"variableMap":{"count":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:137","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1"},"status":-1},{"failures":[93,94,95],"tindex":"975dc549-0d92-11e6-beb9-2b2ac3d0c8ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:298","type":"CtAssignmentImpl","sourcecode":"lastChar = key.charAt(((key.length()) - 1))"},"status":-1},{"failures":[75,77,81,96,97,98,99],"tindex":"975dc54a-0d92-11e6-beb9-f3b7c51fa322","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:101","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"975dc54b-0d92-11e6-beb9-272cb54886e4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:348","type":"CtReturnImpl","sourcecode":"return matches"},"status":-2},{"failures":[],"tindex":"975dc54c-0d92-11e6-beb9-bb0509641112","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:95","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"975dec5d-0d92-11e6-beb9-1d8a97cbafa3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:393","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[100],"tindex":"975dec5e-0d92-11e6-beb9-e5c89832e957","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"compareCode","cnt":"compareCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:84","type":"CtAssignmentImpl","sourcecode":"compareCode = s1.compareTo(s2)"},"status":-1},{"failures":[],"tindex":"975dec5f-0d92-11e6-beb9-d79fbb75cfe3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.Utils:45","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b))"},"status":-2},{"failures":[],"tindex":"975dec60-0d92-11e6-beb9-f37efa0598c1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:261","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(char[], (((char[].int) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.int)) + start), newData, 0, length)"},"variableMap":{"data":"inwd","length":"length","start":"length","newData":"inwd"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:112","type":"CtIfImpl","sourcecode":"if ((inwd[1]) == 'N') {\n    local.append(inwd, 1, ((inwd.int) - 1));\n} else {\n    local.append(inwd);\n}"},"status":-3},{"failures":[101,102,0,1,2,3],"tindex":"975dec61-0d92-11e6-beb9-a1451877bccd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:293","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n    return handleCC(value, result, index);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n    result.append('K');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        result.append('S', 'X');\n    } else {\n        result.append('S');\n    }\n    index += 2;\n} else {\n    result.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        index += 3;\n    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-1},{"failures":[101,0,1,2,3],"tindex":"975dec62-0d92-11e6-beb9-d1be7601595f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"result.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:136","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"975dec63-0d92-11e6-beb9-4fa95ba2a7c1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:379","type":"CtCaseImpl","sourcecode":"case 2 :\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    break;"},"status":-3},{"failures":[],"tindex":"975e1374-0d92-11e6-beb9-f90807ce433a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:71","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-3},{"failures":[],"tindex":"975e1375-0d92-11e6-beb9-d9f8ce491709","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:145","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[103],"tindex":"975e1376-0d92-11e6-beb9-677830b42e0a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:295","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"975e1377-0d92-11e6-beb9-8d3a5cfc23af","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"variableMap":{"a":"index","t":"index","n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:105","type":"CtAssignmentImpl","sourcecode":"index = handleAEIOUY(result, index)"},"status":-2},{"failures":[],"tindex":"975e1378-0d92-11e6-beb9-972881a720f8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:703","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length()"},"variableMap":{"pattern":"accentedWord"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:357","type":"CtLocalVariableImpl","sourcecode":"final int int = accentedWord.length()"},"status":-3},{"failures":[],"tindex":"975e1379-0d92-11e6-beb9-954b32c9dd22","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:291","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"))"},"status":-2},{"failures":[],"tindex":"975e137a-0d92-11e6-beb9-ffb00fb4ce1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"variableMap":{"jj":"jj","ii":"length","bits":"ii","l_raw":"l_raw","ascii":"l_raw","org.apache.commons.codec.binary.BinaryCodec.BITS":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n    } \n}"},"status":-2},{"failures":[103],"tindex":"975e3a8b-0d92-11e6-beb9-a373c917e787","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:293","type":"CtIfImpl","sourcecode":"if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n    code.append('X');\n    break;\n} "},"status":-1},{"failures":[],"tindex":"975e3a8c-0d92-11e6-beb9-89096a8d73b1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"variableMap":{"cp":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:449","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[8,13,14,15,18,32,35,36,44,49],"tindex":"975e3a8d-0d92-11e6-beb9-e511984113bc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:225","type":"CtAssignmentImpl","sourcecode":"name1 = cleanName(name1)"},"status":-1},{"failures":[],"tindex":"975e3a8e-0d92-11e6-beb9-d596aac1a2e1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:401","type":"CtReturnImpl","sourcecode":"return output.toString()"},"status":-2},{"failures":[72,104,105,73],"tindex":"975e3a8f-0d92-11e6-beb9-4f2b9ef7b7ec","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:250","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[106],"tindex":"975e3a90-0d92-11e6-beb9-c7a35aa6ad76","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:674","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[107],"tindex":"975e3a91-0d92-11e6-beb9-d1704ff74241","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:670","type":"CtIfImpl","sourcecode":"if (len > maxResultSize) {\n    throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n} "},"status":-1},{"failures":[],"tindex":"975e61a2-0d92-11e6-beb9-f156cfbe3664","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:361","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-2},{"failures":[],"tindex":"975e61a3-0d92-11e6-beb9-6dbad05bd35c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"status":0},{"failures":[108,109,110,95,111,112,113],"tindex":"975e61a4-0d92-11e6-beb9-f5647d152a55","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:132","type":"CtIfImpl","sourcecode":"if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[],"tindex":"975e61a5-0d92-11e6-beb9-7da03b4be9cb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:205","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"status":-2},{"failures":[114],"tindex":"975e61a6-0d92-11e6-beb9-b3d15e29d9bf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Crypt:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt)"},"variableMap":{"salt":"keyBytes","key":"keyBytes","org.apache.commons.codec.Charsets.UTF_8":"org.apache.commons.codec.Charsets.UTF_8"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":-1},{"failures":[115,116,117],"tindex":"975e88b7-0d92-11e6-beb9-e9c41c3b82fa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:473","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)"},"status":-1},{"failures":[74,75,76,77,80,98,83,118,119,120,121,122],"tindex":"975e88b8-0d92-11e6-beb9-3f9e0589afe3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:324","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    int int = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (printable.get(b)) {\n        buffer.write(b);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n    }\n}"},"status":-1},{"failures":[58,69],"tindex":"975eafc9-0d92-11e6-beb9-3147731ba28f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:315","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-1},{"failures":[],"tindex":"975efdea-0d92-11e6-beb9-6738210a6289","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:180","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"975efdeb-0d92-11e6-beb9-217ee41e5a8f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:116","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-3},{"failures":[],"tindex":"975efdec-0d92-11e6-beb9-6f30b6484693","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:402","type":"CtCaseImpl","sourcecode":"case 7 :\n    context.long = (context.long) >> 3;\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    break;"},"status":-3},{"failures":[1,2,3],"tindex":"975efded-0d92-11e6-beb9-3d5290dae82c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:292","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"975f24fe-0d92-11e6-beb9-df046b4f48de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-3},{"failures":[118,119,120,123,121,122],"tindex":"975f24ff-0d92-11e6-beb9-b351f657b0cd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"status":-1},{"failures":[],"tindex":"975f2500-0d92-11e6-beb9-3f3ffa363f0a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:107","type":"CtCaseImpl","sourcecode":"case 'B' :\n    result.append('P');\n    index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n    break;"},"status":-3},{"failures":[],"tindex":"975f2501-0d92-11e6-beb9-e3d21041a7c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:256","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"y"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:244","type":"CtUnaryOperatorImpl","sourcecode":"y++"},"status":-3},{"failures":[],"tindex":"975f2502-0d92-11e6-beb9-1516be555549","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","right":"modulus"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":81,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
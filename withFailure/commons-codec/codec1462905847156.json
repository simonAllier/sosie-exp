{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":39,"org.apache.commons.codec.language.NysiisTest.testSnat":13,"org.apache.commons.codec.language.NysiisTest.testDropBy":15,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":1,"org.apache.commons.codec.binary.Base64Test.testBase64":38,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":57,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":54,"org.apache.commons.codec.binary.Base64Test.testUUID":23,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":32,"org.apache.commons.codec.binary.Base64Test.testSingletons":36,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":46,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":47,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":51,"org.apache.commons.codec.binary.Base64Test.testPairs":22,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":31,"org.apache.commons.codec.language.NysiisTest.testRule2":7,"org.apache.commons.codec.language.NysiisTest.testRule1":6,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":48,"org.apache.commons.codec.language.NysiisTest.testRule7":10,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":40,"org.apache.commons.codec.language.NysiisTest.testRule6":9,"org.apache.commons.codec.language.NysiisTest.testRule5":8,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":26,"org.apache.commons.codec.language.NysiisTest.testCap":2,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":21,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":27,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":30,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":64,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":14,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":20,"org.apache.commons.codec.language.NysiisTest.testBran":11,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":18,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":60,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":58,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":61,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":33,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":55,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":34,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":41,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":62,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":35,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":44,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":45,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":42,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":50,"org.apache.commons.codec.language.NysiisTest.testDad":3,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":53,"org.apache.commons.codec.language.NysiisTest.testOthers":16,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":25,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":37,"org.apache.commons.codec.language.NysiisTest.testTranan":17,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":59,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":0,"org.apache.commons.codec.language.NysiisTest.testEncodeNull":19,"org.apache.commons.codec.language.NysiisTest.testDan":4,"org.apache.commons.codec.language.NysiisTest.testFal":5,"org.apache.commons.codec.language.NysiisTest.testSnad":12,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":63,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":24,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":56},"transformations":[{"failures":[],"tindex":"2d200552-16df-11e6-ae2b-8586a2d53df4","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int value = b","position":"org.apache.commons.codec.digest.UnixCrypt:321","type":"CtLocalVariableImpl","sourcecode":"final int int = b"},"status":-2},{"failures":[],"tindex":"2d202c63-16df-11e6-ae2b-c5a87b6c1693","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:708","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"2d202c64-16df-11e6-ae2b-abd2a4650186","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)","position":"org.apache.commons.codec.language.Nysiis:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)"},"status":-1},{"failures":[],"tindex":"2d205375-16df-11e6-ae2b-51b7ca28eabc","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean startsWithBox = content.startsWith(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:545","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.startsWith(\"[\")"},"status":-2},{"failures":[],"tindex":"2d205376-16df-11e6-ae2b-5760ad90f08a","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int pos = 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[],"tindex":"2d207a87-16df-11e6-ae2b-d7c37f386568","series":0,"name":"add","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.bm.Rule:469","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-2},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"tindex":"2d207a88-16df-11e6-ae2b-e5bb6864a770","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte[] buffer = ensureBufferSize(decodeSize, context);\n    final byte b = in[(inPos++)];\n    if (b == (pad)) {\n        context.eof = true;\n        break;\n    } else {\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n            final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n            if (result >= 0) {\n                context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n                context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n                if ((context.modulus) == 0) {\n                    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.binary.Base64:435","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    final byte byte = in[(inPos++)];\n    if (b == (byte)) {\n        context.boolean = true;\n        break;\n    } else {\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n            final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n            if (result >= 0) {\n                context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                if ((context.int) == 0) {\n                    buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":7,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
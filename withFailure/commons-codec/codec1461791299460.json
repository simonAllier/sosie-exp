{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":16,"org.apache.commons.codec.binary.HexTest.testCustomCharset":70,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":129,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":12,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":84,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":83,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":120,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":135,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":1,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":40,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":52,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":55,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":108,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":105,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":53,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":56,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":46,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":132,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":136,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":102,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":24,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":99,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":101,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":100,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":123,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":122,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":134,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":121,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":25,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":116,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":113,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":125,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":65,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":127,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":72,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":90,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":17,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":128,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":82,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":86,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":33,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":22,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":38,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":81,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":28,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":2,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":35,"org.apache.commons.codec.language.MetaphoneTest.testTCH":112,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":6,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":78,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":58,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":75,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":88,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":85,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":126,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":14,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":66,"org.apache.commons.codec.binary.Base64Test.testUUID":74,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":77,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":95,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":43,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":97,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":111,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":68,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":50,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":3,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":96,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":57,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":131,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":73,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":29,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":71,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":118,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":8,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":79,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":4,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":62,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":103,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":110,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":48,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":130,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":133,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":80,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":92,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":93,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":138,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":60,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":139,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":87,"org.apache.commons.codec.language.SoundexTest.testDifference":89,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":137,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":141,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":140,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":26,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":51},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"2aeba5a5-0cbc-11e6-bb49-2f42f2ef7493","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"variableMap":{"name":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:333","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[38],"tindex":"2aebccb6-0cbc-11e6-bb49-691c4cca7422","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:177","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[39,40,41,42,43],"tindex":"2aebf3c7-0cbc-11e6-bb49-5d2ebcbd3d9e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"status":-1},{"failures":[39,40,41,42,44,45,46,47,48,49,50,43],"tindex":"2aebf3c8-0cbc-11e6-bb49-3b88d1feee94","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:489","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[51,52],"tindex":"2aebf3c9-0cbc-11e6-bb49-abeb3cdde315","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:345","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[53,54,55,56,57,58,59,60],"tindex":"2aebf3ca-0cbc-11e6-bb49-7db7b46ae23e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:199","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"2aebf3cb-0cbc-11e6-bb49-3d466aaacdcd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:264","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\")"},"status":-2},{"failures":[],"tindex":"2aec1adc-0cbc-11e6-bb49-631950c5ae51","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:271","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"2aec1add-0cbc-11e6-bb49-31170e654b43","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:496","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"variableMap":{"pos":"lineLength","context":"context","length":"length","buffer":"lineSeparator","lineSeparator":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:392","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-2},{"failures":[61,62,63,64,65,66,67],"tindex":"2aec1ade-0cbc-11e6-bb49-f5092a3db7f8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:259","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[68,69,31],"tindex":"2aec1adf-0cbc-11e6-bb49-799768c1ad23","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:386","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n    if (replacedName.contains(dc)) {\n        final java.lang.String java.lang.String = dc.substring(0, 1);\n        replacedName = replacedName.replace(dc, singleLetter);\n    } \n}"},"status":-1},{"failures":[],"tindex":"2aec1ae0-0cbc-11e6-bb49-956c53f0cb55","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:271","type":"CtLocalVariableImpl","sourcecode":"final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)"},"variableMap":{"line":"pattern","org.apache.commons.codec.language.DaitchMokotoffSoundex.COMMENT":"pattern"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:703","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length()"},"status":-2},{"failures":[],"tindex":"2aec1ae1-0cbc-11e6-bb49-638f6ebb5997","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:213","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    final java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> = new java.util.EnumMap<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.java.lang.Class);\n    for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n        final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n        final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n        for (final java.lang.String java.lang.String : ls.getLanguages()) {\n            try {\n                rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n            }\n        }\n        if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n            rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n        } \n        rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n    }\n    org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.put(s, java.util.Collections.unmodifiableMap(rts));\n}"},"status":-2},{"failures":[],"tindex":"2aec41f2-0cbc-11e6-bb49-a72adc7f9873","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:80","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, java.lang.Math.max(cs1.length(), cs2.length()))"},"variableMap":{"cs1":"input","cs2":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:718","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i))"},"status":-2},{"failures":[70,71,72,73,74,75],"tindex":"2aec41f3-0cbc-11e6-bb49-93a030de9a99","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"b[8] = 0"},"variableMap":{"b":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:93","type":"CtAssignmentImpl","sourcecode":"out[i] = ((byte)(f & 255))"},"status":-1},{"failures":[],"tindex":"2aec6904-0cbc-11e6-bb49-4371e536b0e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"bits","tempResult":"l_raw","pBytes":"ascii","keyLen":"ii","cp":"bits"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-2},{"failures":[],"tindex":"2aec6905-0cbc-11e6-bb49-2781db225957","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"minRating"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[76,77],"tindex":"2aec6906-0cbc-11e6-bb49-9f3f94e0ffc2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:395","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:533","type":"CtIfImpl","sourcecode":"if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} "},"status":-1},{"failures":[],"tindex":"2aec6907-0cbc-11e6-bb49-6d33c66557e5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"b","e1":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:133","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"status":0},{"failures":[78],"tindex":"2aec6908-0cbc-11e6-bb49-516690096885","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"status":-1},{"failures":[],"tindex":"2aec9019-0cbc-11e6-bb49-0da0dbc876a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:420","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = l + remainder"},"variableMap":{"l":"rawLine","remainder":"rawLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:258","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"status":-2},{"failures":[79],"tindex":"2aec901a-0cbc-11e6-bb49-45266b59abf4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\")"},"variableMap":{"result":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:197","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[],"tindex":"2aec901b-0cbc-11e6-bb49-3f71aa4a5cd0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:363","type":"CtIfImpl","sourcecode":"if (phonemes.containsKey(newPhoneme)) {\n    final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n    final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n    phonemes.put(mergedPhoneme, mergedPhoneme);\n} else {\n    phonemes.put(newPhoneme, newPhoneme);\n}"},"status":-2},{"failures":[80,81,82,83,84,85,86,87,88],"tindex":"2aec901c-0cbc-11e6-bb49-999331226c3d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:379","type":"CtForEachImpl","sourcecode":"for (char char : input.toCharArray()) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    ch = java.lang.Character.toLowerCase(ch);\n    if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n        ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n    } \n    sb.append(ch);\n}"},"status":-1},{"failures":[],"tindex":"2aec901d-0cbc-11e6-bb49-d13a0dc2282f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:146","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[39,40,41,42],"tindex":"2aecb72e-0cbc-11e6-bb49-2321ee56b2cf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:397","type":"CtAssignmentImpl","sourcecode":"context.long = (context.long) >> 6"},"variableMap":{"context":"context","lbitWorkArea":"lbitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:386","type":"CtAssignmentImpl","sourcecode":"context.long = (context.long) >> 4"},"status":-1},{"failures":[89,38],"tindex":"2aecb72f-0cbc-11e6-bb49-392ac9f69c2c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:116","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < lengthToMatch ; i++) {\n    if ((es1.charAt(i)) == (es2.charAt(i))) {\n        diff++;\n    } \n}"},"status":-1},{"failures":[76,77,90],"tindex":"2aecb730-0cbc-11e6-bb49-0db984570773","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:124","type":"CtReturnImpl","sourcecode":"return toString().hashCode()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}"},"status":-1},{"failures":[39,40,91,92,93,94,95],"tindex":"2aecb731-0cbc-11e6-bb49-f70883499199","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"variableMap":{"v":"avail","e0":"avail"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:114","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[],"tindex":"2aecb732-0cbc-11e6-bb49-977e574cad3c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:357","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final int int = bytes[i];\n    if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n        try {\n            if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                continue;\n            } \n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            buffer.write(((char)((u << 4) + l)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n        }\n    } else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n        buffer.write(b);\n    } \n}"},"status":-2},{"failures":[],"tindex":"2aecde43-0cbc-11e6-bb49-09af3c6d81bb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:363","type":"CtIfImpl","sourcecode":"if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}"},"status":-2},{"failures":[],"tindex":"2aecde44-0cbc-11e6-bb49-87aa51af03c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"status":-2},{"failures":[],"tindex":"2aecde45-0cbc-11e6-bb49-c3dbd045edba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:71","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"2aecde46-0cbc-11e6-bb49-6995af6eb401","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:203","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text)"},"variableMap":{"text":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:384","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input)"},"status":-2},{"failures":[80,81,82,83,84,85,86,87,88],"tindex":"2aecde47-0cbc-11e6-bb49-cf6352585cf0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:556","type":"CtAssignmentImpl","sourcecode":"result[(index++)] = branch.toString()"},"status":-1},{"failures":[],"tindex":"2aecde48-0cbc-11e6-bb49-49c657b117b7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:518","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-2},{"failures":[],"tindex":"2aed0559-0cbc-11e6-bb49-abccca5f8220","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:232","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())"},"variableMap":{"array":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:552","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal()"},"status":-2},{"failures":[],"tindex":"2aed055a-0cbc-11e6-bb49-df10424bb262","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\", \"N\")"},"status":0},{"failures":[],"tindex":"2aed055b-0cbc-11e6-bb49-11bdccccdd14","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"variableMap":{"s":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += len"},"status":-2},{"failures":[],"tindex":"2aed055c-0cbc-11e6-bb49-c7b2fedda856","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:532","type":"CtIfImpl","sourcecode":"if (branching) {\n    nextBranches.add(nextBranch);\n} else {\n    break;\n}"},"status":-2},{"failures":[96,97,98],"tindex":"2aed055d-0cbc-11e6-bb49-2709620145fa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[],"tindex":"2aed055e-0cbc-11e6-bb49-39bea510b406","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"status":0},{"failures":[39,40,41,42,44,45,46,47,49,50,43],"tindex":"2aed055f-0cbc-11e6-bb49-3bcb92fe96c6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"variableMap":{"currentLinePos":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:478","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-1},{"failures":[99,100,101],"tindex":"2aed0560-0cbc-11e6-bb49-09b15e97c226","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:189","type":"CtIfImpl","sourcecode":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char char = str.charAt((index - 2));\n    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} "},"status":-1},{"failures":[102,103],"tindex":"2aed0561-0cbc-11e6-bb49-53f590f0741f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[],"tindex":"2aed2b72-0cbc-11e6-bb49-3f5c5d5c2598","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:94","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"2aed2b73-0cbc-11e6-bb49-a51e2c7b8061","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"t = right"},"status":0},{"failures":[76,77,90],"tindex":"2aed2b74-0cbc-11e6-bb49-63d9d631c0b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:668","type":"CtInvocationImpl","sourcecode":"result.append(\"SK\")"},"status":-1},{"failures":[],"tindex":"2aed2b75-0cbc-11e6-bb49-8907672e4716","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"pos","tempResult":"buffer","pBytes":"buffer","cp":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:359","type":"CtIfImpl","sourcecode":"if ((context.int) == 0) {\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"status":-2},{"failures":[],"tindex":"2aed2b76-0cbc-11e6-bb49-f559b0eab28f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"r"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtIfImpl","sourcecode":"if (r > 0) {\n    final byte byte = byte[][0];\n    return b < 0 ? 256 + b : b;\n} "},"status":-2},{"failures":[61,62,63,64,65,66,67],"tindex":"2aed5287-0cbc-11e6-bb49-6d4520cbd45b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"finalb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:222","type":"CtWhileImpl","sourcecode":"while (ii > 0) {\n    ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n    ii -= 16;\n}"},"status":-1},{"failures":[],"tindex":"2aed5288-0cbc-11e6-bb49-612d34b4d816","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"status":-2},{"failures":[],"tindex":"2aed5289-0cbc-11e6-bb49-b5a2fa35e035","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:89","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"z\", \"s\")"},"status":0},{"failures":[],"tindex":"2aed528a-0cbc-11e6-bb49-a9d4e8277c38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"length","y":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:410","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, pArray.int, context)"},"status":-2},{"failures":[104,105,106,107],"tindex":"2aed528b-0cbc-11e6-bb49-0b09fc099eb3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:119","type":"CtIfImpl","sourcecode":"if ((inwd[1]) == 'E') {\n    local.append(inwd, 1, ((inwd.int) - 1));\n} else {\n    local.append(inwd);\n}"},"status":-1},{"failures":[108,109,110],"tindex":"2aed528c-0cbc-11e6-bb49-9b949dd7aa18","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\")"},"variableMap":{"result":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:323","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[90],"tindex":"2aed528d-0cbc-11e6-bb49-07205efe06cd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:471","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 2))) == 'I') {\n    result.append('J');\n} else {\n    result.append('K');\n}"},"status":-1},{"failures":[39,40,41,92,42,44,45,46,47,49,50,43],"tindex":"2aed799e-0cbc-11e6-bb49-2d9570c64d1d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:514","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"2aed799f-0cbc-11e6-bb49-636f6801f82d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"index","right":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:163","type":"CtAssignmentImpl","sourcecode":"index = handleR(value, result, index, slavoGermanic)"},"status":-2},{"failures":[],"tindex":"2aed79a0-0cbc-11e6-bb49-11a6e496c7c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:121","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"2aed79a1-0cbc-11e6-bb49-4f58d4ed2bfe","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:296","type":"CtAssignmentImpl","sourcecode":"right = (left >>> 1) | (left << 31)"},"variableMap":{"left":"pos","right":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:389","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[111],"tindex":"2aed79a2-0cbc-11e6-bb49-b9a6d7a282d4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:453","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.getSha256Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:547","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.getSha384Digest()"},"status":-1},{"failures":[],"tindex":"2aed79a3-0cbc-11e6-bb49-4922a32a8729","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtIfImpl","sourcecode":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[76,77],"tindex":"2aed79a4-0cbc-11e6-bb49-6187d3cd3650","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[],"tindex":"2aed79a5-0cbc-11e6-bb49-6776e2a1f7d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\"')"},"status":0},{"failures":[],"tindex":"2aed79a6-0cbc-11e6-bb49-33991f206af5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:516","type":"CtIfImpl","sourcecode":"if (branching) {\n    nextBranches.clear();\n} "},"status":0},{"failures":[],"tindex":"2aed79a7-0cbc-11e6-bb49-dbd1622f78ae","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"length","minRating":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtIfImpl","sourcecode":"if ((inwd[1]) == 'H') {\n    local.append(inwd, 1, ((inwd.int) - 1));\n    local.setCharAt(0, 'W');\n} else {\n    local.append(inwd);\n}"},"status":-2},{"failures":[79,104,112,113,114,110,115,116,117,118,119,120],"tindex":"2aeda0b8-0cbc-11e6-bb49-29526115392c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:261","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-1},{"failures":[121,122,123,124,125,126,127,128],"tindex":"2aeda0b9-0cbc-11e6-bb49-eb384fb91741","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"variableMap":{"l":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:241","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"status":-1},{"failures":[],"tindex":"2aeda0ba-0cbc-11e6-bb49-ed3005e9ca87","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:76","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cy\", \"sy\")"},"status":0},{"failures":[],"tindex":"2aeda0bb-0cbc-11e6-bb49-91d89e3b378d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"count","e1":"count"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtUnaryOperatorImpl","sourcecode":"(count++)"},"status":0},{"failures":[76,77,90,129],"tindex":"2aeda0bc-0cbc-11e6-bb49-9d222fe44d3f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:725","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n    result.append(\"TS\", \"FX\");\n    index += 4;\n} else {\n    index++;\n}"},"status":-1},{"failures":[39,40,41,92,42,44,45,46,47,49,50,43],"tindex":"2aeda0bd-0cbc-11e6-bb49-13478a1e888a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:452","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"2aeda0be-0cbc-11e6-bb49-fbc168068fe2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"status":0},{"failures":[76,77,129],"tindex":"2aeda0bf-0cbc-11e6-bb49-19d390823163","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:292","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[76,77],"tindex":"2aedc7d0-0cbc-11e6-bb49-51da9cf8d43d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:389","type":"CtReturnImpl","sourcecode":"return value"},"variableMap":{"value":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:362","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-1},{"failures":[],"tindex":"2aedc7d1-0cbc-11e6-bb49-4d2b79d2f175","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"variableMap":{"source":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:285","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"=\")"},"status":-2},{"failures":[130,78,113,131,115,116,132,118,119],"tindex":"2aedc7d2-0cbc-11e6-bb49-832262dfb819","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:112","type":"CtIfImpl","sourcecode":"if ((inwd[1]) == 'N') {\n    local.append(inwd, 1, ((inwd.int) - 1));\n} else {\n    local.append(inwd);\n}"},"status":-1},{"failures":[],"tindex":"2aedc7d3-0cbc-11e6-bb49-53b01759d16c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:265","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)"},"variableMap":{"lang":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:301","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[133,14,134,135,136,137,27,138,139,29,31,33,140,141,142],"tindex":"2aedc7d4-0cbc-11e6-bb49-c9a2584328bf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:365","type":"CtInvocationImpl","sourcecode":"sb.append(c)"},"status":-1},{"failures":[],"tindex":"2aedc7d5-0cbc-11e6-bb49-99f8cbc651c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:297","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[],"tindex":"2aedc7d6-0cbc-11e6-bb49-112f6b9f594f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:383","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[],"tindex":"2aedc7d7-0cbc-11e6-bb49-b7d08397b010","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:244","type":"CtIfImpl","sourcecode":"if (isLastChar(wdsz, n)) {\n    break;\n} "},"variableMap":{"wdsz":"encodeSize","n":"org.apache.commons.codec.binary.Base64.MASK_6BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:378","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    int int = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.int = ((context.int) << 8) + b;\n    if (0 == (context.int)) {\n        buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        if (((int) > 0) && ((int) <= (context.int))) {\n            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n            context.int += byte[].int;\n            context.int = 0;\n        } \n    } \n}"},"status":-2},{"failures":[],"tindex":"2aedc7d8-0cbc-11e6-bb49-eb185c1bfb1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:232","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"2aedeee9-0cbc-11e6-bb49-1d91b615f7a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:274","type":"CtLocalVariableImpl","sourcecode":"final char char = getNextChar()"},"status":-2},{"failures":[],"tindex":"2aedeeea-0cbc-11e6-bb49-01c410e15a67","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"languageRulesResourceName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:143","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 3) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n        } \n        final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n        final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n        final boolean boolean = parts[2].equals(\"true\");\n        rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n    }\n}"},"status":-2},{"failures":[],"tindex":"2aedeeeb-0cbc-11e6-bb49-31c89169bfca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"status":-2},{"failures":[],"tindex":"2aedeeec-0cbc-11e6-bb49-b9bde4a0243f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:322","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e)"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":88,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
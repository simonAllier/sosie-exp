{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":52,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":49,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":18,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":69,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":76,"org.apache.commons.codec.binary.Base64Test.testBase64":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":73,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":68,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":11,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":14,"org.apache.commons.codec.binary.Base64Test.testUUID":32,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":41,"org.apache.commons.codec.binary.Base64Test.testSingletons":46,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":57,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":71,"org.apache.commons.codec.binary.Base64Test.testPairs":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":82,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":40,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":58,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":80,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":7,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":35,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":30,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":79,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":39,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":63,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":67,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":78,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":37,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":38,"org.apache.commons.codec.binary.Base64Test.testCodec68":47,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":3,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":84,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":43,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":28,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":4,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":44,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":54,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":51,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":61,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":12,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":17,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":15,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":21,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":27,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":65,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":83,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":74,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":75,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":66,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":55,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":60,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":16,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":34,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":48,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":22,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":24,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":25,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":62,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":70,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":42,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":33},"transformations":[{"failures":[],"tindex":"9668c009-17b7-11e6-9b82-d7e616b8213d","series":0,"name":"add","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int j = 0","position":"org.apache.commons.codec.digest.UnixCrypt:235","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"9668e71a-17b7-11e6-9b82-57343443759e","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"))","position":"org.apache.commons.codec.binary.Base32:297","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"))"},"status":-2},{"failures":[],"tindex":"96690e2b-17b7-11e6-9b82-9dfa97625e9c","series":0,"name":"add","transplant":{"toString":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}","position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"variableMap":{"byteToCheck":"pad"},"type":"adrStmt","transplantationPoint":{"toString":"for (final byte element : arrayOctet) {\n    if (((pad) == element) || (isInAlphabet(element))) {\n        return true;\n    } \n}","position":"org.apache.commons.codec.binary.BaseNCodec:499","type":"CtForEachImpl","sourcecode":"for (final byte byte : arrayOctet) {\n    if (((byte) == element) || (isInAlphabet(element))) {\n        return true;\n    } \n}"},"status":0},{"failures":[],"tindex":"96690e2c-17b7-11e6-9b82-85fd4008102c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"variableMap":{"charset":"value"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.BCodec:180","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-3},{"failures":[0,1,2,3,4,5,6],"tindex":"9669353d-17b7-11e6-9b82-6bddd761884a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:219","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"9669353e-17b7-11e6-9b82-57db23181edb","series":0,"name":"replace","transplant":{"toString":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} ","position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:474","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer)"},"status":-2},{"failures":[],"tindex":"9669353f-17b7-11e6-9b82-89b609347fc9","series":0,"name":"replace","transplant":{"toString":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"source"},"type":"adrStmt","transplantationPoint":{"toString":"return soundex(source, false)[0]","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:436","type":"CtReturnImpl","sourcecode":"return soundex(source, false)[0]"},"status":-2},{"failures":[7,8,9,10,11,12,13,14],"tindex":"96693540-17b7-11e6-9b82-793ef6a2272b","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (input.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication rulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , maxPhonemes).invoke();\n    i = rulesApplication.getI();\n    phonemeBuilder = rulesApplication.getPhonemeBuilder();\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:469","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (input.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n    i = rulesApplication.getI();\n    phonemeBuilder = rulesApplication.getPhonemeBuilder();\n}"},"status":-1},{"failures":[],"tindex":"96695c51-17b7-11e6-9b82-e9dc83bd52be","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"messageDigest.update(valueToDigest)","position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"status":-2},{"failures":[],"tindex":"96695c52-17b7-11e6-9b82-492f32471156","series":0,"name":"replace","transplant":{"toString":"return algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"variableMap":{"algorithm":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.TRUE_LENGTH, string.length())) : string","position":"org.apache.commons.codec.language.Nysiis:316","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string"},"status":-3},{"failures":[15,16,17,18,19,20,21,22,23],"tindex":"96698363-17b7-11e6-9b82-6d8d6063429f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (line.contains(\"=\")) {\n    final java.lang.String[] parts = line.split(\"=\");\n    if ((parts.length) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        final java.lang.String leftCharacter = parts[0];\n        final java.lang.String rightCharacter = parts[1];\n        if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n        } \n        asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n    }\n} else {\n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String pattern = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n            final java.lang.String replacement1 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n            final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n            final java.lang.String replacement3 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule r = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n            final char patternKey = r.pattern.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = ruleMapping.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                ruleMapping.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtIfImpl","sourcecode":"if (line.contains(\"=\")) {\n    final java.lang.String[] java.lang.String[] = line.split(\"=\");\n    if ((parts.int) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        final java.lang.String java.lang.String = parts[0];\n        final java.lang.String java.lang.String = parts[1];\n        if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n        } \n        asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n            final char char = r.java.lang.String.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                ruleMapping.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"9669aa74-17b7-11e6-9b82-2fecddc6f927","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i = i","position":"org.apache.commons.codec.language.bm.PhoneticEngine:187","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int = i"},"variableMap":{"i":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:452","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[24,25,26,27,28],"tindex":"966abbe5-17b7-11e6-9b82-19f72ed08f6b","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"u","to":"u"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(((char)((u << 4) + l)))","position":"org.apache.commons.codec.net.URLCodec:174","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"status":-1},{"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"966abbe6-17b7-11e6-9b82-7b3cfc2fd77e","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"variableMap":{"sBytes":"pArray","blocksize":"org.apache.commons.codec.binary.BaseNCodec.EOF","tempResult":"pArray","cp":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"toString":"decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context)","position":"org.apache.commons.codec.binary.BaseNCodec:411","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"status":-1},{"failures":[64,65,66],"tindex":"966ae2f7-17b7-11e6-9b82-9f5a253163aa","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:490","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"status":-1},{"failures":[67,7,68,69,70,8,9,71,72,10,73,74,75,76,77,78,79,80,81,82,83,84,11,12,13,14],"tindex":"966ae2f8-17b7-11e6-9b82-d1838d16da4f","series":0,"name":"replace","transplant":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"966ae2f9-17b7-11e6-9b82-794eed341693","series":0,"name":"replace","transplant":{"toString":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} ","position":"org.apache.commons.codec.language.Nysiis:304","type":"CtIfImpl","sourcecode":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} "},"variableMap":{"last2Char":"charOne","lastChar":"charOne","key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.setCharAt(1, charOne)","position":"org.apache.commons.codec.digest.UnixCrypt:212","type":"CtInvocationImpl","sourcecode":"buffer.setCharAt(1, charOne)"},"status":-2},{"failures":[15,16,17,18,19,20,21,22,23],"tindex":"966ae2fa-17b7-11e6-9b82-93f68bf2570f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(ch)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:388","type":"CtInvocationImpl","sourcecode":"sb.append(ch)"},"status":-1},{"failures":[],"tindex":"966ae2fb-17b7-11e6-9b82-af7999ce4ace","series":0,"name":"replace","transplant":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"result.append('K', 'X')"},"status":0},{"failures":[],"tindex":"966ae2fc-17b7-11e6-9b82-ebfaa5af8494","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.URLCodec:250","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":15,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":28,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":8,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":11,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":10,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":24,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":22,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":39,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":5,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":16,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":1,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":26,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":19,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":31,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":27,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":40,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":6,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":7,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":4,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":36,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3":37,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":18,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":35},"transformations":[{"failures":[0,1,2,3],"tindex":"e781882f-16e0-11e6-84e3-235a37aece9a","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:602","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"e781af40-16e0-11e6-84e3-db441711212f","series":0,"name":"add","transplant":{"toString":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))","position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))"},"variableMap":{"pArray":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-2},{"failures":[],"tindex":"e781d651-16e0-11e6-84e3-4d907f868732","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"))","position":"org.apache.commons.codec.binary.Base32:297","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"))"},"status":0},{"failures":[],"tindex":"e781d652-16e0-11e6-84e3-99bee9790390","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"j\", \"y\")","position":"org.apache.commons.codec.language.Caverphone2:92","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":-3},{"failures":[4,5],"tindex":"e781d653-16e0-11e6-84e3-315552076647","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('F')","position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[],"tindex":"e781d654-16e0-11e6-84e3-ef0c33bfef51","series":0,"name":"replace","transplant":{"toString":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"ascii","ascii":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtIfImpl","sourcecode":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} "},"status":-3},{"failures":[6,0,7,8,9,1,10,11,12,13,14,15,16,2,3,17],"tindex":"e781fd65-16e0-11e6-84e3-e39bfebc8616","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (lsScanner.hasNextLine()) {\n    final java.lang.String line = lsScanner.nextLine().trim();\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n            inExtendedComment = true;\n        } else if ((line.length()) > 0) {\n            ls.add(line);\n        } \n    }\n}","position":"org.apache.commons.codec.language.bm.Languages:181","type":"CtWhileImpl","sourcecode":"while (lsScanner.hasNextLine()) {\n    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = true;\n        } else if ((line.length()) > 0) {\n            ls.add(line);\n        } \n    }\n}"},"status":-1},{"failures":[18,19,20],"tindex":"e781fd66-16e0-11e6-84e3-2dd0f1775e58","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[],"tindex":"e781fd67-16e0-11e6-84e3-2549a6d861f2","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if ((++index) < (branches.length)) {\n    sb.append('|');\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:468","type":"CtIfImpl","sourcecode":"if ((++index) < (branches.int)) {\n    sb.append('|');\n} "},"status":-2},{"failures":[21,22],"tindex":"e7822478-16e0-11e6-84e3-dd0bf023038e","series":0,"name":"replace","transplant":{"toString":"hard = false","position":"org.apache.commons.codec.language.Metaphone:233","type":"CtAssignmentImpl","sourcecode":"hard = false"},"variableMap":{"hard":"roundsCustom"},"type":"adrStmt","transplantationPoint":{"toString":"roundsCustom = true","position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"roundsCustom = true"},"status":-1},{"failures":[],"tindex":"e7822479-16e0-11e6-84e3-57ce39863b48","series":0,"name":"add","transplant":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))","position":"org.apache.commons.codec.net.URLCodec:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"status":-2},{"failures":[],"tindex":"e782247a-16e0-11e6-84e3-03d69ec628e9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Soundex:150","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n} "},"status":0},{"failures":[],"tindex":"e782247b-16e0-11e6-84e3-11ca2c960935","series":0,"name":"add","transplant":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd, 1, ((inwd.length) - 1))","position":"org.apache.commons.codec.language.Metaphone:131","type":"CtInvocationImpl","sourcecode":"local.append(inwd, 1, ((inwd.int) - 1))"},"status":0},{"failures":[],"tindex":"e7824b8c-16e0-11e6-84e3-a50a8c11a28b","series":0,"name":"replace","transplant":{"toString":"return toString().hashCode()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:124","type":"CtReturnImpl","sourcecode":"return toString().hashCode()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"status":-2},{"failures":[],"tindex":"e7824b8d-16e0-11e6-84e3-370ebbdacf7f","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:453","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data)"},"variableMap":{"data":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)","position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)"},"status":-2},{"failures":[2],"tindex":"e7824b8e-16e0-11e6-84e3-6d453153d748","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((body.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n    phs.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE));\n} ","position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtIfImpl","sourcecode":"if ((body.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n    phs.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n} "},"status":-1},{"failures":[],"tindex":"e7824b8f-16e0-11e6-84e3-5d5e78cd0c73","series":0,"name":"replace","transplant":{"toString":"if (lastCode == '/') {\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n        code = '4';\n    } else {\n        code = '8';\n    }\n} else {\n    if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n        code = '8';\n    } else {\n        code = '4';\n    }\n}","position":"org.apache.commons.codec.language.ColognePhonetic:369","type":"CtIfImpl","sourcecode":"if (lastCode == '/') {\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n        code = '4';\n    } else {\n        code = '8';\n    }\n} else {\n    if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n        code = '8';\n    } else {\n        code = '4';\n    }\n}"},"variableMap":{"org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX":"org.apache.commons.codec.language.ColognePhonetic.SCZ","code":"code","nextChar":"lastCode","lastChar":"chr","lastCode":"lastCode","org.apache.commons.codec.language.ColognePhonetic.AHOUKQX":"org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX","org.apache.commons.codec.language.ColognePhonetic.SZ":"org.apache.commons.codec.language.ColognePhonetic.SZ"},"type":"adrStmt","transplantationPoint":{"toString":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AEIJOUY, chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SCZ, nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.WFPV, chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.GKQ, chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.CKQ, lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.TDX, chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}","position":"org.apache.commons.codec.language.ColognePhonetic:338","type":"CtWhileImpl","sourcecode":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}"},"status":-2},{"failures":[],"tindex":"e78299b0-16e0-11e6-84e3-09ecd64fcdba","series":0,"name":"replace","transplant":{"toString":"final char[] out = new char[]{ '0' , '0' , '0' , '0' }","position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray()","position":"org.apache.commons.codec.language.Metaphone:103","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray()"},"status":-2},{"failures":[],"tindex":"e782c0c1-16e0-11e6-84e3-f98634ea4908","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"status":0},{"failures":[],"tindex":"e782c0c2-16e0-11e6-84e3-219703013d3a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone2:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[23,24],"tindex":"e782c0c3-16e0-11e6-84e3-55d336617d45","series":0,"name":"replace","transplant":{"toString":"t = right","position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"t = right"},"variableMap":{"t":"left","right":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = (t >>> 1) | (t << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"status":-1},{"failures":[25],"tindex":"e782c0c4-16e0-11e6-84e3-15ce39099fd0","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))","position":"org.apache.commons.codec.digest.DigestUtils:594","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"variableMap":{"data":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.UTF_16BE)","position":"org.apache.commons.codec.binary.StringUtils:351","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[16,2,3,17],"tindex":"e782c0c5-16e0-11e6-84e3-55e2f9167b7a","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"variableMap":{"input":"input","this":"this","content":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return (input.length()) == 0;\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:510","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return (input.length()) == 0;\n    }\n}"},"status":-1},{"failures":[],"tindex":"e782e7d6-16e0-11e6-84e3-877cf65d327f","series":0,"name":"add","transplant":{"toString":"s = (s >>> 16) | (t & -65536)","position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"s = (s >>> 16) | (t & -65536)"},"variableMap":{"s":"w","t":"w"},"type":"adrStmt","transplantationPoint":{"toString":"w >>= 6","position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"status":-2},{"failures":[],"tindex":"e782e7d7-16e0-11e6-84e3-5b1c01f29d6a","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")","position":"org.apache.commons.codec.binary.Base32:309","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")"},"status":-2},{"failures":[],"tindex":"e782e7d8-16e0-11e6-84e3-1b9c7971f7f1","series":0,"name":"replace","transplant":{"toString":"final char[] out = new char[l << 1]","position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"variableMap":{"l":"len"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] chars = new char[len]","position":"org.apache.commons.codec.language.SoundexUtils:46","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[len]"},"status":0},{"failures":[],"tindex":"e782e7d9-16e0-11e6-84e3-c9a11b736e7b","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:260","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)","position":"org.apache.commons.codec.digest.DigestUtils:334","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"status":-2},{"failures":[],"tindex":"e782e7da-16e0-11e6-84e3-8fc757d551c7","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"mac.reset()","position":"org.apache.commons.codec.digest.HmacUtils:765","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"status":-2},{"failures":[],"tindex":"e7830eeb-16e0-11e6-84e3-a99b35b1ceb4","series":0,"name":"add","transplant":{"toString":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","minRating":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base32:356","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[23,24],"tindex":"e7830eec-16e0-11e6-84e3-d1947a5541ed","series":0,"name":"replace","transplant":{"toString":"cp = 0","position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"variableMap":{"cp":"right"},"type":"adrStmt","transplantationPoint":{"toString":"right = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:300","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-1},{"failures":[],"tindex":"e7830eed-16e0-11e6-84e3-e142c3f3e4a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.bm.Rule:446","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[26,27],"tindex":"e7830eee-16e0-11e6-84e3-1b53b43d74bc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ci\", \"si\")","position":"org.apache.commons.codec.language.Caverphone2:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"status":-1},{"failures":[],"tindex":"e7830eef-16e0-11e6-84e3-6b401e3398cc","series":0,"name":"replace","transplant":{"toString":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char preHWChar = str.charAt((index - 2));\n    final char firstCode = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} ","position":"org.apache.commons.codec.language.Soundex:189","type":"CtIfImpl","sourcecode":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char char = str.charAt((index - 2));\n    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} "},"variableMap":{"str":"str","hwChar":"mappedChar","mappedChar":"mappedChar","index":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index > 1) && (mappedChar != '0')) {\n    final char hwChar = str.charAt((index - 1));\n    if (('H' == hwChar) || ('W' == hwChar)) {\n        final char preHWChar = str.charAt((index - 2));\n        final char firstCode = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n        if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n            return 0;\n        } \n    } \n} ","position":"org.apache.commons.codec.language.Soundex:187","type":"CtIfImpl","sourcecode":"if ((index > 1) && (mappedChar != '0')) {\n    final char char = str.charAt((index - 1));\n    if (('H' == hwChar) || ('W' == hwChar)) {\n        final char char = str.charAt((index - 2));\n        final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n        if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n            return 0;\n        } \n    } \n} "},"status":-2},{"failures":[],"tindex":"e7833600-16e0-11e6-84e3-fb1ebe723c00","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:128","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")"},"status":-2},{"failures":[28,29,30],"tindex":"e7833601-16e0-11e6-84e3-5d83b1b08b3c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)"},"status":-1},{"failures":[],"tindex":"e7833602-16e0-11e6-84e3-9b46c9e25227","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"cp += blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"status":-2},{"failures":[],"tindex":"e7833603-16e0-11e6-84e3-c7edb9c9577e","series":0,"name":"replace","transplant":{"toString":"if (lRulesIS == null) {\n    throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN)));\n} ","position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtIfImpl","sourcecode":"if (lRulesIS == null) {\n    throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n} "},"variableMap":{"lRulesIS":"rulesIS","org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN":"resName"},"type":"adrStmt","transplantationPoint":{"toString":"if (rulesIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n} ","position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtIfImpl","sourcecode":"if (rulesIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n} "},"status":-3},{"failures":[31,32,33,34,35,4],"tindex":"e7833604-16e0-11e6-84e3-01439e50bf6f","series":0,"name":"replace","transplant":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"variableMap":{"code":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:958","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[],"tindex":"e7835d15-16e0-11e6-84e3-2ba02048f0a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.data = new char[buffSize]","position":"org.apache.commons.codec.language.ColognePhonetic:212","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[buffSize]"},"status":-2},{"failures":[],"tindex":"e7842066-16e0-11e6-84e3-fb0abfbcf8d8","series":0,"name":"add","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean accept = parts[2].equals(\"true\")","position":"org.apache.commons.codec.language.bm.Lang:175","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = parts[2].equals(\"true\")"},"status":-2},{"failures":[],"tindex":"e7842067-16e0-11e6-84e3-35259a5186a2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n    n++;\n} else {\n    switch (symb) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n            if (n == 0) {\n                code.append(symb);\n            } \n            break;\n        case 'B' :\n            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                break;\n            } \n            code.append(symb);\n            break;\n        case 'C' :\n            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) {\n                break;\n            } \n            if (regionMatch(local, n, \"CIA\")) {\n                code.append('X');\n                break;\n            } \n            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) {\n                code.append('S');\n                break;\n            } \n            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                code.append('K');\n                break;\n            } \n            if (isNextChar(local, n, 'H')) {\n                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                    code.append('K');\n                } else {\n                    code.append('X');\n                }\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'D' :\n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 2)))) >= 0)) {\n                code.append('J');\n                n += 2;\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'G' :\n            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                break;\n            } \n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                break;\n            } \n            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                break;\n            } \n            if (isPreviousChar(local, n, 'G')) {\n                hard = true;\n            } else {\n                hard = false;\n            }\n            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                code.append('J');\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'H' :\n            if (isLastChar(wdsz, n)) {\n                break;\n            } \n            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.VARSON.indexOf(local.charAt((n - 1)))) >= 0)) {\n                break;\n            } \n            if (isVowel(local, (n + 1))) {\n                code.append('H');\n            } \n            break;\n        case 'F' :\n        case 'J' :\n        case 'L' :\n        case 'M' :\n        case 'N' :\n        case 'R' :\n            code.append(symb);\n            break;\n        case 'K' :\n            if (n > 0) {\n                if (!(isPreviousChar(local, n, 'C'))) {\n                    code.append(symb);\n                } \n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'P' :\n            if (isNextChar(local, n, 'H')) {\n                code.append('F');\n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'Q' :\n            code.append('K');\n            break;\n        case 'S' :\n            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                code.append('X');\n            } else {\n                code.append('S');\n            }\n            break;\n        case 'T' :\n            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                code.append('X');\n                break;\n            } \n            if (regionMatch(local, n, \"TCH\")) {\n                break;\n            } \n            if (regionMatch(local, n, \"TH\")) {\n                code.append('0');\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'V' :\n            code.append('F');\n            break;\n        case 'W' :\n        case 'Y' :\n            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                code.append(symb);\n            } \n            break;\n        case 'X' :\n            code.append('K');\n            code.append('S');\n            break;\n        case 'Z' :\n            code.append('S');\n            break;\n        default :\n            break;\n    }\n    n++;\n}","position":"org.apache.commons.codec.language.Metaphone:152","type":"CtIfImpl","sourcecode":"if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n    n++;\n} else {\n    switch (symb) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n            if (n == 0) {\n                code.append(symb);\n            } \n            break;\n        case 'B' :\n            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                break;\n            } \n            code.append(symb);\n            break;\n        case 'C' :\n            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                break;\n            } \n            if (regionMatch(local, n, \"CIA\")) {\n                code.append('X');\n                break;\n            } \n            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                code.append('S');\n                break;\n            } \n            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                code.append('K');\n                break;\n            } \n            if (isNextChar(local, n, 'H')) {\n                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                    code.append('K');\n                } else {\n                    code.append('X');\n                }\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'D' :\n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                code.append('J');\n                n += 2;\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'G' :\n            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                break;\n            } \n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                break;\n            } \n            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                break;\n            } \n            if (isPreviousChar(local, n, 'G')) {\n                hard = true;\n            } else {\n                hard = false;\n            }\n            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                code.append('J');\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'H' :\n            if (isLastChar(wdsz, n)) {\n                break;\n            } \n            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                break;\n            } \n            if (isVowel(local, (n + 1))) {\n                code.append('H');\n            } \n            break;\n        case 'F' :\n        case 'J' :\n        case 'L' :\n        case 'M' :\n        case 'N' :\n        case 'R' :\n            code.append(symb);\n            break;\n        case 'K' :\n            if (n > 0) {\n                if (!(isPreviousChar(local, n, 'C'))) {\n                    code.append(symb);\n                } \n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'P' :\n            if (isNextChar(local, n, 'H')) {\n                code.append('F');\n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'Q' :\n            code.append('K');\n            break;\n        case 'S' :\n            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                code.append('X');\n            } else {\n                code.append('S');\n            }\n            break;\n        case 'T' :\n            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                code.append('X');\n                break;\n            } \n            if (regionMatch(local, n, \"TCH\")) {\n                break;\n            } \n            if (regionMatch(local, n, \"TH\")) {\n                code.append('0');\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'V' :\n            code.append('F');\n            break;\n        case 'W' :\n        case 'Y' :\n            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                code.append(symb);\n            } \n            break;\n        case 'X' :\n            code.append('K');\n            code.append('S');\n            break;\n        case 'Z' :\n            code.append('S');\n            break;\n        default :\n            break;\n    }\n    n++;\n}"},"status":-2},{"failures":[],"tindex":"e7846e88-16e0-11e6-84e3-59ac366ea066","series":0,"name":"add","transplant":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:407","type":"CtReturnImpl","sourcecode":"return pArray"},"variableMap":{"pArray":"array"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())","position":"org.apache.commons.codec.binary.Hex:232","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())"},"status":-2},{"failures":[4,5],"tindex":"e7846e89-16e0-11e6-84e3-29be3f10935c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"status":-1},{"failures":[],"tindex":"e7846e8a-16e0-11e6-84e3-6d8881c4633c","series":0,"name":"add","transplant":{"toString":"d = (d >>> 2) | (d << 26)","position":"org.apache.commons.codec.digest.UnixCrypt:363","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 2) | (d << 26)"},"variableMap":{"d":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"toString":"this.chunkSeparatorLength = chunkSeparatorLength","position":"org.apache.commons.codec.binary.BaseNCodec:210","type":"CtAssignmentImpl","sourcecode":"this.int = chunkSeparatorLength"},"status":-2},{"failures":[],"tindex":"e7846e8b-16e0-11e6-84e3-83d3e4ba572b","series":0,"name":"replace","transplant":{"toString":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"mappedChar","preHWChar":"mappedChar","firstCode":"mappedChar"},"type":"adrStmt","transplantationPoint":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"status":-2},{"failures":[],"tindex":"e7846e8c-16e0-11e6-84e3-a56c0f6c6686","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.rules = java.util.Collections.unmodifiableList(rules)","position":"org.apache.commons.codec.language.bm.Lang:191","type":"CtAssignmentImpl","sourcecode":"this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = java.util.Collections.unmodifiableList(rules)"},"status":-2},{"failures":[33,4,5],"tindex":"e784959d-16e0-11e6-84e3-1f3d43019aba","series":0,"name":"replace","transplant":{"toString":"left = right","position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"variableMap":{"left":"index","right":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:476","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"e784959e-16e0-11e6-84e3-5fb0c5f09c96","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")","position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.QCodec:232","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-2},{"failures":[36,37,38,39,40],"tindex":"e784959f-16e0-11e6-84e3-75b27b6aae6e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"status":-1},{"failures":[],"tindex":"e78495a0-16e0-11e6-84e3-d5cb501781f8","series":0,"name":"replace","transplant":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:947","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"c2"},"type":"adrStmt","transplantationPoint":{"toString":"if (c1 == c2) {\n    continue;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"status":-2},{"failures":[4,5],"tindex":"e78495a1-16e0-11e6-84e3-1f697a3de8f4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append(\"SK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"result.append(\"SK\")"},"status":-1},{"failures":[],"tindex":"e78495a2-16e0-11e6-84e3-e7029272d58a","series":0,"name":"replace","transplant":{"toString":"int u = v & e0","position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"variableMap":{"v":"bitlen","e0":"len"},"type":"adrStmt","transplantationPoint":{"toString":"final int startDst = (bitlen / 8) - len","position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"status":0},{"failures":[],"tindex":"e78495a3-16e0-11e6-84e3-49edf703d41a","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + salt;\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"status":-2},{"failures":[4,5],"tindex":"e784bcb4-16e0-11e6-84e3-57f6bf0b15bd","series":0,"name":"replace","transplant":{"toString":"result.appendPrimary('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"result.appendPrimary('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n    result.append(\"KS\");\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:335","type":"CtIfImpl","sourcecode":"if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n    result.append(\"KS\");\n} else {\n    result.append('X');\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":54,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
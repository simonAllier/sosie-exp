{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":119,"org.apache.commons.codec.language.NysiisTest.testSnat":53,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":85,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":84,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":100,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":106,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":116,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":99,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":21,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":19,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":76,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":75,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":126,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":46,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":68,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":125,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":163,"org.apache.commons.codec.binary.Base64Test.testTriplets":142,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":94,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":169,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":9,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":64,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":124,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":62,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":120,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":128,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":153,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":109,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":158,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":30,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":161,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":32,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":31,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":147,"org.apache.commons.codec.language.NysiisTest.testCap":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":77,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":148,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":152,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":70,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":38,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":91,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":28,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":149,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":29,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":37,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":150,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":140,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":171,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":122,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":127,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":135,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":107,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":108,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":61,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":34,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":82,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":170,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":63,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":23,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":59,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":98,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":133,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":86,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":102,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":83,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":8,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":89,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":13,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":137,"org.apache.commons.codec.language.SoundexTest.testB650":18,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":162,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":131,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":97,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":134,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":143,"org.apache.commons.codec.language.SoundexTest.testNewInstance":26,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":44,"org.apache.commons.codec.language.NysiisTest.testTranan":56,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":141,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":105,"org.apache.commons.codec.language.NysiisTest.testFal":50,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":36,"org.apache.commons.codec.language.NysiisTest.testSnad":52,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":138,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":5,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":160,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":139,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":2,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":15,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":60,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":16,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":67,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":159,"org.apache.commons.codec.language.NysiisTest.testDropBy":33,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":104,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":151,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":101,"org.apache.commons.codec.binary.Base64Test.testBase64":157,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":115,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":74,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":93,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":123,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":43,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":136,"org.apache.commons.codec.binary.Base64Test.testUUID":144,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":87,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":154,"org.apache.commons.codec.binary.Base64Test.testSingletons":174,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":113,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":156,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":73,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":72,"org.apache.commons.codec.binary.Base64Test.testPairs":172,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":110,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":129,"org.apache.commons.codec.language.NysiisTest.testRule7":118,"org.apache.commons.codec.language.NysiisTest.testRule6":95,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":111,"org.apache.commons.codec.binary.Base64Test.testCodec112":173,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":114,"org.apache.commons.codec.language.NysiisTest.testRule5":117,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":66,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":121,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":27,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":4,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":54,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":40,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3":41,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":58,"org.apache.commons.codec.language.NysiisTest.testBran":51,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":57,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5":42,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":24,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":130,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":79,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":164,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":92,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":39,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":132,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":165,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":167,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":96,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":80,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":81,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":78,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":69,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":12,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":7,"org.apache.commons.codec.language.NysiisTest.testDad":48,"org.apache.commons.codec.language.NysiisTest.testOthers":55,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":146,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":155,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":6,"org.apache.commons.codec.language.SoundexTest.testDifference":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":103,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":45,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":35,"org.apache.commons.codec.language.NysiisTest.testDan":49,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":90,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":112,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":71,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":175,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":145,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":168},"transformations":[{"failures":[],"tindex":"7bac0671-1225-11e6-a350-bf7feb2555dc","series":0,"name":"replace","transplant":{"toString":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:347","type":"CtAssignmentImpl","sourcecode":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += (rule.getPatternLength()) - 1","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:544","type":"CtOperatorAssignmentImpl","sourcecode":"index += (rule.getPatternLength()) - 1"},"status":-2},{"failures":[],"tindex":"7bac2d82-1225-11e6-a350-89de27761e02","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String rawLine = scanner.nextLine()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:257","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = scanner.nextLine()"},"status":-2},{"failures":[0,1],"tindex":"7bac5493-1225-11e6-a350-2da9d8d6eeb4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:535","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"status":-1},{"failures":[],"tindex":"7bac5494-1225-11e6-a350-e33f9c8d3691","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1, key)","position":"org.apache.commons.codec.digest.HmacUtils:81","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"7bac7ba5-1225-11e6-a350-c372155239ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:287","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[2,3,4],"tindex":"7bac7ba6-1225-11e6-a350-751af7d093cc","series":0,"name":"replace","transplant":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"bits","l_ascii":"l_ascii","bits":"bits"},"type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '1'","position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"status":-1},{"failures":[5,6,7,8,9,10,11,12],"tindex":"7bac7ba7-1225-11e6-a350-01489592c64a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(sBytes, 0, saltLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:379","type":"CtInvocationImpl","sourcecode":"ctx.update(sBytes, 0, saltLen)"},"status":-1},{"failures":[],"tindex":"7baca2b8-1225-11e6-a350-5f37c2413b09","series":0,"name":"add","transplant":{"toString":"final char charOne = salt.charAt(1)","position":"org.apache.commons.codec.digest.UnixCrypt:210","type":"CtLocalVariableImpl","sourcecode":"final char char = salt.charAt(1)"},"variableMap":{"salt":"substring"},"type":"adrStmt","transplantationPoint":{"toString":"char c2 = substring.charAt((index2++))","position":"org.apache.commons.codec.binary.CharSequenceUtils:60","type":"CtLocalVariableImpl","sourcecode":"char char = substring.charAt((index2++))"},"status":-2},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"7baca2b9-1225-11e6-a350-eb0670e71ef0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while ((incount < (str.length())) && (count < (out.length))) {\n    mapped = getMappingCode(str, (incount++));\n    if (mapped != 0) {\n        if ((mapped != '0') && (mapped != last)) {\n            out[(count++)] = mapped;\n        } \n        last = mapped;\n    } \n}","position":"org.apache.commons.codec.language.Soundex:272","type":"CtWhileImpl","sourcecode":"while ((incount < (str.length())) && (count < (out.int))) {\n    mapped = getMappingCode(str, (incount++));\n    if (mapped != 0) {\n        if ((mapped != '0') && (mapped != last)) {\n            out[(count++)] = mapped;\n        } \n        last = mapped;\n    } \n}"},"status":-1},{"failures":[10,11,12],"tindex":"7bacc9ca-1225-11e6-a350-db26f755d51f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:485","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)"},"status":-1},{"failures":[],"tindex":"7bacc9cb-1225-11e6-a350-d9bba70a8f82","series":0,"name":"add","transplant":{"toString":"return diff","position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"variableMap":{"diff":"i"},"type":"adrStmt","transplantationPoint":{"toString":"return i","position":"org.apache.commons.codec.net.Utils:47","type":"CtReturnImpl","sourcecode":"return i"},"status":-2},{"failures":[33],"tindex":"7bacc9cc-1225-11e6-a350-e30993b93daa","series":0,"name":"replace","transplant":{"toString":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_G;\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_S;\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_N;\n} ","position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_S":"org.apache.commons.codec.language.Nysiis.CHARS_NN","org.apache.commons.codec.language.Nysiis.CHARS_G":"org.apache.commons.codec.language.Nysiis.CHARS_NN","org.apache.commons.codec.language.Nysiis.CHARS_N":"org.apache.commons.codec.language.Nysiis.CHARS_NN","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.CHARS_NN;\n    } else {\n        return org.apache.commons.codec.language.Nysiis.CHARS_C;\n    }\n} ","position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"status":-1},{"failures":[34],"tindex":"7bacf0dd-1225-11e6-a350-99b520f92ffb","series":0,"name":"add","transplant":{"toString":"result.append('F')","position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:619","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[35,36,37,38,39],"tindex":"7bacf0de-1225-11e6-a350-bf6b8a368af7","series":0,"name":"replace","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"b","name2Size":"b"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.URLCodec:139","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[40,41,42,43,44],"tindex":"7bad17ef-1225-11e6-a350-f1df00055fab","series":0,"name":"replace","transplant":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")","position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"status":-1},{"failures":[],"tindex":"7bad17f0-1225-11e6-a350-17eb274ca09d","series":0,"name":"add","transplant":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} "},"variableMap":{"finalRules":"rules"},"type":"adrStmt","transplantationPoint":{"toString":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} ","position":"org.apache.commons.codec.language.bm.Rule:357","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} "},"status":0},{"failures":[45,46,47,48,49,50,51,52,53,54,33,55,56,57],"tindex":"7bad3f01-1225-11e6-a350-69284388ec9f","series":0,"name":"replace","transplant":{"toString":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_G;\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_S;\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_N;\n} ","position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_S":"org.apache.commons.codec.language.Nysiis.CHARS_A","org.apache.commons.codec.language.Nysiis.CHARS_G":"org.apache.commons.codec.language.Nysiis.CHARS_A","org.apache.commons.codec.language.Nysiis.CHARS_N":"org.apache.commons.codec.language.Nysiis.CHARS_A","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.Nysiis.isVowel(curr)) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_A;\n} ","position":"org.apache.commons.codec.language.Nysiis:125","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Nysiis.isVowel(curr)) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[58,59,60,61],"tindex":"7bad3f02-1225-11e6-a350-63ece3709b13","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"binaryData","key":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)","position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)"},"status":-1},{"failures":[62,63,64,65,66,67,68,69],"tindex":"7bad6613-1225-11e6-a350-975a975835b8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int cLine = currentLine;\n        final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(myLine);\n                sb.append(\", loc='\").append(loc).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String patternKey = r.pattern.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"7badb434-1225-11e6-a350-79e0bfffa625","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> rules : ruleMap.values()) {\n    allRules.addAll(rules);\n}","position":"org.apache.commons.codec.language.bm.Rule:302","type":"CtForEachImpl","sourcecode":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n    allRules.addAll(rules);\n}"},"status":0},{"failures":[],"tindex":"7badb435-1225-11e6-a350-f94f01449fd3","series":0,"name":"add","transplant":{"toString":"c &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE"},"type":"adrStmt","transplantationPoint":{"toString":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-2},{"failures":[62,63,64,65,70,66,71,67,68,72,73,69,74,75,76,77,78,79],"tindex":"7badb436-1225-11e6-a350-599dea663b1f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"continue","position":"org.apache.commons.codec.language.bm.Rule:430","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"7baddb47-1225-11e6-a350-dd43225abe60","series":0,"name":"add","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int eSwap1 = (org.apache.commons.codec.digest.UnixCrypt.CON_SALT[charOne]) << 4","position":"org.apache.commons.codec.digest.UnixCrypt:214","type":"CtLocalVariableImpl","sourcecode":"final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4"},"status":-2},{"failures":[],"tindex":"7baddb48-1225-11e6-a350-4d45e0baf830","series":0,"name":"replace","transplant":{"toString":"if (lRulesIS == null) {\n    throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN)));\n} ","position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtIfImpl","sourcecode":"if (lRulesIS == null) {\n    throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n} "},"variableMap":{"lRulesIS":"obj","org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Caverphone:74","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} "},"status":-3},{"failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"tindex":"7baddb49-1225-11e6-a350-a5ffd0111f64","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (propagate) {\n    out.flush();\n} ","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:119","type":"CtIfImpl","sourcecode":"if (propagate) {\n    java.io.OutputStream.flush();\n} "},"status":-1},{"failures":[],"tindex":"7bae025a-1225-11e6-a350-ad8c81ed3210","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 15))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:513","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:360","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-3},{"failures":[],"tindex":"7bae025b-1225-11e6-a350-9d622719c1ef","series":0,"name":"add","transplant":{"toString":"this.soundexMapping = org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING","position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"variableMap":{"soundexMapping":"soundexMapping","org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.RefinedSoundex:90","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[95,33,55],"tindex":"7bae296c-1225-11e6-a350-a7e1215b33a9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((key.length()) > 2) {\n    final char last2Char = key.charAt(((key.length()) - 2));\n    if ((last2Char == 'A') && (lastChar == 'Y')) {\n        key.deleteCharAt(((key.length()) - 2));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:301","type":"CtIfImpl","sourcecode":"if ((key.length()) > 2) {\n    final char char = key.charAt(((key.length()) - 2));\n    if ((last2Char == 'A') && (lastChar == 'Y')) {\n        key.deleteCharAt(((key.length()) - 2));\n    } \n} "},"status":-1},{"failures":[],"tindex":"7bae296d-1225-11e6-a350-eba3208eec74","series":0,"name":"add","transplant":{"toString":"final java.lang.String pattern = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:308","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:310","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2])"},"status":-2},{"failures":[],"tindex":"7bae507e-1225-11e6-a350-d70b682a3cdc","series":0,"name":"replace","transplant":{"toString":"return encode(str, getCharset())","position":"org.apache.commons.codec.net.QCodec:250","type":"CtReturnImpl","sourcecode":"return encode(str, getCharset())"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return soundex(str)","position":"org.apache.commons.codec.language.Soundex:167","type":"CtReturnImpl","sourcecode":"return soundex(str)"},"status":-2},{"failures":[],"tindex":"7bae507f-1225-11e6-a350-05f966603545","series":0,"name":"replace","transplant":{"toString":"right = t","position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"pos","right":"length"},"type":"adrStmt","transplantationPoint":{"toString":"context.pos += lineSeparator.length","position":"org.apache.commons.codec.binary.Base32:520","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-2},{"failures":[],"tindex":"7bae5080-1225-11e6-a350-13e21b2cab34","series":0,"name":"replace","transplant":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:773","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[],"tindex":"7bae5081-1225-11e6-a350-f38310d01926","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"j\", \"y\")","position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:412","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[96,97,98,99,100,101,102,103,104],"tindex":"7bae5082-1225-11e6-a350-fb30b4a37ce7","series":0,"name":"replace","transplant":{"toString":"final java.lang.String replacement1 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:309","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String replacement3 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"status":-1},{"failures":[105,106,107,108,109,110,111,112,113,114,115,116],"tindex":"7bae7793-1225-11e6-a350-79612f5c5a7a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:373","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"7bae7794-1225-11e6-a350-f5cfd69e65b6","series":0,"name":"replace","transplant":{"toString":"return newData","position":"org.apache.commons.codec.language.ColognePhonetic:262","type":"CtReturnImpl","sourcecode":"return newData"},"variableMap":{"newData":"org.apache.commons.codec.language.Nysiis.CHARS_NN"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_NN","position":"org.apache.commons.codec.language.Nysiis:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":0},{"failures":[],"tindex":"7bae7795-1225-11e6-a350-1f1ca4502881","series":0,"name":"replace","transplant":{"toString":"final java.lang.String line = lsScanner.nextLine().trim()","position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = lsScanner.nextLine().trim()"},"variableMap":{"lsScanner":"scanner"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String rawLine = scanner.nextLine()","position":"org.apache.commons.codec.language.bm.Rule:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = scanner.nextLine()"},"status":0},{"failures":[46,117,95,118,33],"tindex":"7bae7796-1225-11e6-a350-8b5bf69fb6db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} ","position":"org.apache.commons.codec.language.Nysiis:296","type":"CtIfImpl","sourcecode":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} "},"status":-1},{"failures":[],"tindex":"7bae7797-1225-11e6-a350-5b57152afeab","series":0,"name":"replace","transplant":{"toString":"ctx.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:201","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"variableMap":{"keyBytes":"pBytes","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(pBytes, 0, keyLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:387","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":0},{"failures":[0,1,119],"tindex":"7bae9ea8-1225-11e6-a350-83ddc3421d97","series":0,"name":"replace","transplant":{"toString":"result.append('X', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:372","type":"CtInvocationImpl","sourcecode":"result.append('X', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[],"tindex":"7bae9ea9-1225-11e6-a350-1b492a3a09b3","series":0,"name":"add","transplant":{"toString":"builder = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:83","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = new java.lang.StringBuilder()"},"variableMap":{"builder":"builder"},"type":"adrStmt","transplantationPoint":{"toString":"branch.builder.append(toString())","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:95","type":"CtInvocationImpl","sourcecode":"branch.java.lang.StringBuilder.append(toString())"},"status":-2},{"failures":[],"tindex":"7bafb01a-1225-11e6-a350-612602b6f4c7","series":0,"name":"replace","transplant":{"toString":"name1 = removeVowels(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:231","type":"CtAssignmentImpl","sourcecode":"name1 = removeVowels(name1)"},"variableMap":{"name1":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[],"tindex":"7bafb01b-1225-11e6-a350-edb957762714","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int wdsz = local.length()","position":"org.apache.commons.codec.language.Metaphone:145","type":"CtLocalVariableImpl","sourcecode":"final int int = local.length()"},"status":-2},{"failures":[],"tindex":"7bafb01c-1225-11e6-a350-e92eb00694ef","series":0,"name":"replace","transplant":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","keyLen":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:292","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[],"tindex":"7bafb01d-1225-11e6-a350-95aeeabd2d9f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:304","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[],"tindex":"7bafb01e-1225-11e6-a350-b96afe4965f2","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"variableMap":{"charset":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))","position":"org.apache.commons.codec.digest.DigestUtils:720","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"status":-3},{"failures":[],"tindex":"7bafd72f-1225-11e6-a350-43719ca7137c","series":0,"name":"replace","transplant":{"toString":"final java.lang.String line = lsScanner.nextLine().trim()","position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = lsScanner.nextLine().trim()"},"variableMap":{"lsScanner":"scanner"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String rawLine = scanner.nextLine()","position":"org.apache.commons.codec.language.bm.Rule:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = scanner.nextLine()"},"status":0},{"failures":[120],"tindex":"7bafd730-1225-11e6-a350-e10c6ffdbcdb","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:353","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[113,114,115],"tindex":"7bafd731-1225-11e6-a350-89b3556ca2b3","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(',')","position":"org.apache.commons.codec.net.QCodec:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(',')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:90","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"7bafd732-1225-11e6-a350-13cc3238ccdc","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.pattern","position":"org.apache.commons.codec.language.bm.Rule:666","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.java.lang.String"},"variableMap":{"pattern":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.UTF_8), salt)","position":"org.apache.commons.codec.digest.Crypt:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt)"},"status":-3},{"failures":[],"tindex":"7baffe43-1225-11e6-a350-bff3fc23076a","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"w","encodeSize":"w"},"type":"adrStmt","transplantationPoint":{"toString":"w >>= 6","position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"status":-3},{"failures":[5,6,7,8,9,10,11,12],"tindex":"7baffe44-1225-11e6-a350-65c77eb055e1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(saltBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:200","type":"CtInvocationImpl","sourcecode":"altCtx.update(saltBytes)"},"status":-1},{"failures":[],"tindex":"7baffe45-1225-11e6-a350-dbbb6b083323","series":0,"name":"add","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return 0","position":"org.apache.commons.codec.language.bm.Rule:102","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[],"tindex":"7baffe46-1225-11e6-a350-81848873c490","series":0,"name":"replace","transplant":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.ENGLISH);\n} ","position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtIfImpl","sourcecode":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n} "},"status":-2},{"failures":[5,6,7,121,8,9],"tindex":"7baffe47-1225-11e6-a350-6159cd317562","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:457","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer)"},"status":-1},{"failures":[],"tindex":"7bb02558-1225-11e6-a350-09ca9240ac07","series":0,"name":"replace","transplant":{"toString":"urlsafe = org.apache.commons.codec.net.URLCodec.WWW_FORM_URL","position":"org.apache.commons.codec.net.URLCodec:126","type":"CtAssignmentImpl","sourcecode":"urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet"},"variableMap":{"urlsafe":"printable","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"printable"},"type":"adrStmt","transplantationPoint":{"toString":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS","position":"org.apache.commons.codec.net.QuotedPrintableCodec:278","type":"CtAssignmentImpl","sourcecode":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet"},"status":-3},{"failures":[122,123],"tindex":"7bb02559-1225-11e6-a350-61232e1a9d7c","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"d\", \"t\")","position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tio\", \"sio\")","position":"org.apache.commons.codec.language.Caverphone2:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tio\", \"sio\")"},"status":-1},{"failures":[],"tindex":"7bb0255a-1225-11e6-a350-13e7d0117168","series":0,"name":"replace","transplant":{"toString":"rightLength++","position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"variableMap":{"rightLength":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:438","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[],"tindex":"7bb0255b-1225-11e6-a350-05df74aafb39","series":0,"name":"replace","transplant":{"toString":"char nextChar","position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char mappedChar = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index))","position":"org.apache.commons.codec.language.Soundex:185","type":"CtLocalVariableImpl","sourcecode":"final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index))"},"status":-2},{"failures":[],"tindex":"7bb0255c-1225-11e6-a350-951a2e155e81","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this","position":"org.apache.commons.codec.language.bm.Rule:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(((org.apache.commons.codec.language.bm.Rule.Phoneme.this.phonemeText.toString()) + (right.phonemeText.toString())) , org.apache.commons.codec.language.bm.Rule.Phoneme.this.languages.restrictTo(right.languages))","position":"org.apache.commons.codec.language.bm.Rule:151","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(((org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.toString()) + (right.java.lang.StringBuilder.toString())) , org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet.restrictTo(right.org.apache.commons.codec.language.bm.Languages.LanguageSet))"},"status":-2},{"failures":[],"tindex":"7bb04c6d-1225-11e6-a350-7d7bc53e6bef","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")","position":"org.apache.commons.codec.binary.BaseNCodec:382","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")"},"status":-2},{"failures":[],"tindex":"7bb04c6e-1225-11e6-a350-6b2ec8769a85","series":0,"name":"replace","transplant":{"toString":"key.deleteCharAt(((key.length()) - 2))","position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"variableMap":{"key":"alternate"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:964","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-2},{"failures":[],"tindex":"7bb04c6f-1225-11e6-a350-5f29aa3126a0","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = false","position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = false"},"variableMap":{"found":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"toString":"inMultilineComment = true","position":"org.apache.commons.codec.language.bm.Rule:418","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = true"},"status":-3},{"failures":[124,125,126],"tindex":"7bb04c70-1225-11e6-a350-b3e253d0993b","series":0,"name":"add","transplant":{"toString":"sb.append(\"|\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[127],"tindex":"7bb07381-1225-11e6-a350-d1a5fc943399","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, null)","position":"org.apache.commons.codec.digest.Sha2Crypt:521","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, null)"},"variableMap":{"keyBytes":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))","position":"org.apache.commons.codec.digest.DigestUtils:500","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"status":-1},{"failures":[],"tindex":"7bb07382-1225-11e6-a350-2dd806c956d1","series":0,"name":"add","transplant":{"toString":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtIfImpl","sourcecode":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} "},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return soundex(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Soundex:153","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"7bb07383-1225-11e6-a350-194f74664dbc","series":0,"name":"add","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"toString":"this.decodeTable = org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE","position":"org.apache.commons.codec.binary.Base32:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[],"tindex":"7bb07384-1225-11e6-a350-7354a9f02166","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"input.addLeft('S')","position":"org.apache.commons.codec.language.ColognePhonetic:364","type":"CtInvocationImpl","sourcecode":"input.addLeft('S')"},"status":-2},{"failures":[],"tindex":"7bb07385-1225-11e6-a350-cf512ba60c10","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('}')","position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('-')","position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"status":-2},{"failures":[],"tindex":"7bb09a96-1225-11e6-a350-55c6e7c17479","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","raw":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:162","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-3},{"failures":[128,129,62,63,64,65],"tindex":"7bb09a97-1225-11e6-a350-09dc935b3606","series":0,"name":"replace","transplant":{"toString":"int n = outLen","position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"variableMap":{"outLen":"i"},"type":"adrStmt","transplantationPoint":{"toString":"final int c = (o1.phonemeText.charAt(i)) - (o2.phonemeText.charAt(i))","position":"org.apache.commons.codec.language.bm.Rule:92","type":"CtLocalVariableImpl","sourcecode":"final int int = (o1.java.lang.StringBuilder.charAt(i)) - (o2.java.lang.StringBuilder.charAt(i))"},"status":-1},{"failures":[],"tindex":"7bb09a98-1225-11e6-a350-91c0ba1d75fa","series":0,"name":"replace","transplant":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"variableMap":{"singleByte":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:457","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer)"},"status":-3},{"failures":[130,131,132,133,134,135,136,137,138],"tindex":"7bb09a99-1225-11e6-a350-0bb26b5c7222","series":0,"name":"replace","transplant":{"toString":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"variableMap":{"b":"keyBytes","c":"i","u":"i","y":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if ((i % 7) != 0) {\n    ctx1.update(keyBytes);\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:268","type":"CtIfImpl","sourcecode":"if ((i % 7) != 0) {\n    ctx1.update(keyBytes);\n} "},"status":-1},{"failures":[],"tindex":"7bb09a9a-1225-11e6-a350-5b9ddd397489","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"input = words.iterator().next()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:455","type":"CtAssignmentImpl","sourcecode":"input = words.iterator().next()"},"status":0},{"failures":[130,131,132,133,134,135,136,137,138],"tindex":"7bb09a9b-1225-11e6-a350-959c454b1869","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return passwd.toString()","position":"org.apache.commons.codec.digest.Md5Crypt:300","type":"CtReturnImpl","sourcecode":"return passwd.toString()"},"status":-1},{"failures":[],"tindex":"7bb0c1ac-1225-11e6-a350-dd2ce7efa2d0","series":0,"name":"add","transplant":{"toString":"try {\n    final char[] charArray = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.binary.Hex:250","type":"CtTryImpl","sourcecode":"try {\n    final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"variableMap":{"e":"obj","object":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.net.URLCodec:340","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"status":-2},{"failures":[0,1,34],"tindex":"7bb0c1ad-1225-11e6-a350-b73bc0d6aef0","series":0,"name":"add","transplant":{"toString":"b += 256","position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:629","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"7bb0c1ae-1225-11e6-a350-7328baa09fa1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code = '0'","position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"code = '0'"},"status":-2},{"failures":[139,140,58,141,83,87,142,143,144,145,146,147,148,149,150,151,152,153,154,60,61,155,156,157,158,159,160,161,162,163,88,164,165,166,167],"tindex":"7bb0c1af-1225-11e6-a350-0532d51e8437","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))]","position":"org.apache.commons.codec.binary.Base64:389","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-1},{"failures":[168,169],"tindex":"7bb0c1b0-1225-11e6-a350-8199cafc819e","series":0,"name":"add","transplant":{"toString":"from = to + 1","position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"variableMap":{"from":"left","to":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:301","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-1},{"failures":[168,169],"tindex":"7bb0e8c1-1225-11e6-a350-4ddfb6daf714","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:347","type":"CtAssignmentImpl","sourcecode":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)"},"status":-1},{"failures":[],"tindex":"7bb0e8c2-1225-11e6-a350-5fed4b37d809","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-2},{"failures":[62],"tindex":"7bb0e8c3-1225-11e6-a350-93c6828d717b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"status":-1},{"failures":[],"tindex":"7bb10fd4-1225-11e6-a350-5fa92083a5f0","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean found = rulesApplication.isFound()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:348","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = rulesApplication.isFound()"},"status":-2},{"failures":[],"tindex":"7bb10fd5-1225-11e6-a350-21dafec53db4","series":0,"name":"add","transplant":{"toString":"key.deleteCharAt(((key.length()) - 2))","position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"variableMap":{"key":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value.substring(0, addChars))","position":"org.apache.commons.codec.language.DoubleMetaphone:983","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars))"},"status":-2},{"failures":[0,1,34],"tindex":"7bb10fd6-1225-11e6-a350-5f8009991684","series":0,"name":"replace","transplant":{"toString":"rightLength++","position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"variableMap":{"rightLength":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = handleCH(value, result, index)","position":"org.apache.commons.codec.language.DoubleMetaphone:287","type":"CtAssignmentImpl","sourcecode":"index = handleCH(value, result, index)"},"status":-1},{"failures":[],"tindex":"7bb10fd7-1225-11e6-a350-3b69f9101970","series":0,"name":"replace","transplant":{"toString":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtIfImpl","sourcecode":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} "},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:533","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"7bb10fd8-1225-11e6-a350-5b5d19eb1565","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"r$\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r$\", \"3\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_KN.matcher(str).replaceFirst(\"NN\")","position":"org.apache.commons.codec.language.Nysiis:262","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\")"},"status":-2},{"failures":[0,1,119],"tindex":"7bb10fd9-1225-11e6-a350-f1d4f1ef32a3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:681","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[168,170,171,169],"tindex":"7bb136ea-1225-11e6-a350-555d178160e4","series":0,"name":"add","transplant":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"variableMap":{"i":"iValue","key":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[],"tindex":"7bb136eb-1225-11e6-a350-cd11ea01d01d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n    return false;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:105","type":"CtIfImpl","sourcecode":"if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"7bb136ec-1225-11e6-a350-f13d1c92673d","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"curr","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"return new char[]{ curr }","position":"org.apache.commons.codec.language.Nysiis:167","type":"CtReturnImpl","sourcecode":"return new char[]{ curr }"},"status":-2},{"failures":[],"tindex":"7bb136ed-1225-11e6-a350-ab1fbd3938f0","series":0,"name":"replace","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"d","name2Size":"d"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)","position":"org.apache.commons.codec.digest.UnixCrypt:351","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)"},"status":-2},{"failures":[139,140,58,141,83,87,142,143,59,172,144,145,146,147,148,149,150,151,152,153,154,60,173,174,61,155,156,157,158,159,160,161,162,163,175,88,164,165,166,167],"tindex":"7bb136ee-1225-11e6-a350-29c28cf79021","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"if (0 == (context.modulus)) {\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 18) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 12) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[((context.ibitWorkArea) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    context.currentLinePos += org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n        java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n        context.pos += lineSeparator.length;\n        context.currentLinePos = 0;\n    } \n} ","position":"org.apache.commons.codec.binary.Base64:386","type":"CtIfImpl","sourcecode":"if (0 == (context.int)) {\n    buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    if (((int) > 0) && ((int) <= (context.int))) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n        context.int = 0;\n    } \n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":94,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
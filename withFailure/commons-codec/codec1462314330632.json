{"failureDictionary":{"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":40,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":8,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":32,"org.apache.commons.codec.binary.Base64Test.testBase64":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":11,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":29,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":43,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":21,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":41,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":44,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":31,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":10,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":26,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":38,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":0,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":7,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":14,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":9,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":5,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":36,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":19,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":34},"transformations":[{"failures":[],"tindex":"f1d01a05-117d-11e6-a6d0-19cf39f1a9e0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"variableMap":{"compareCode":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:389","type":"CtReturnImpl","sourcecode":"return value"},"status":-3},{"failures":[],"tindex":"f1d06826-117d-11e6-a6d0-815ef580193d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:182","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null)"},"variableMap":{"original":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"f1d08f37-117d-11e6-a6d0-9595a62d0608","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:594","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"variableMap":{"data":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:257","type":"CtReturnImpl","sourcecode":"return bytes == null ? null : new java.lang.String(bytes , charset)"},"status":-1},{"failures":[],"tindex":"f1d0b648-117d-11e6-a6d0-d954e09e5778","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:284","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"f1d0b649-117d-11e6-a6d0-fdcfa7250e2d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"variableMap":{"j":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[],"tindex":"f1d0dd5a-117d-11e6-a6d0-f96613e7ac08","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:364","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:511","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"f1d0dd5b-117d-11e6-a6d0-9f3ee3225c2b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:78","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.RefinedSoundex.this.char[], 0, mapping.int)"},"variableMap":{"mapping":"l_ascii","soundexMapping":"l_ascii","length":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:278","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}"},"status":-3},{"failures":[],"tindex":"f1d1046c-117d-11e6-a6d0-59fc5a3e11de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:54","type":"CtLocalVariableImpl","sourcecode":"int int = thisStart"},"variableMap":{"thisStart":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:79","type":"CtLocalVariableImpl","sourcecode":"final int int = data.int"},"status":-2},{"failures":[],"tindex":"f1d12b7d-117d-11e6-a6d0-db014cdcf486","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:790","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"status":-2},{"failures":[],"tindex":"f1d12b7e-117d-11e6-a6d0-9f97be4bbb66","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"status":-2},{"failures":[17,18],"tindex":"f1d1528f-117d-11e6-a6d0-a3d78097a7dc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:402","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 24) & 255))"},"variableMap":{"b":"l_ascii","offset":"bits","iValue":"jj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"status":-1},{"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"tindex":"f1d15290-117d-11e6-a6d0-1b9a5d30243d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:159","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"status":-1},{"failures":[],"tindex":"f1d15291-117d-11e6-a6d0-abf36169e35f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:130","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet"},"variableMap":{"languages":"org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls"},"status":-2},{"failures":[],"tindex":"f1d179a2-117d-11e6-a6d0-a18a8e669131","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:953","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:296","type":"CtIfImpl","sourcecode":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} "},"status":-2},{"failures":[43],"tindex":"f1d179a3-117d-11e6-a6d0-f1c400340d8e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtIfImpl","sourcecode":"if (incl.contains(\" \")) {\n    throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n} else {\n    lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":15,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
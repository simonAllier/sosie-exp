{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":105,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":4,"org.apache.commons.codec.language.NysiisTest.testSnat":135,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":88,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":87,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":111,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":123,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":57,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":56,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":101,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":107,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":12,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":44,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":49,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":97,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":7,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":53,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":25,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":28,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":27,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":66,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":63,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":67,"org.apache.commons.codec.language.NysiisTest.testCap":124,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":146,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":39,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":20,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":42,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":68,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":115,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":36,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":69,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":30,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":119,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":2,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":99,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":108,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":149,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":15,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":58,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":72,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":18,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":21,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":33,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":86,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":90,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":112,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":47,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":106,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":116,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":11,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":79,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":85,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":153,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":17,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":98,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":103,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":121,"org.apache.commons.codec.language.NysiisTest.testTranan":139,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":80,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":59,"org.apache.commons.codec.language.NysiisTest.testEncodeNull":141,"org.apache.commons.codec.language.NysiisTest.testFal":127,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":35,"org.apache.commons.codec.language.NysiisTest.testSnad":134,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":151,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":143,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":109,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":8,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":76,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":45,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":118,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":22,"org.apache.commons.codec.language.NysiisTest.testDropBy":137,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":92,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":89,"org.apache.commons.codec.binary.Base64Test.testBase64":75,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":96,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":100,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":6,"org.apache.commons.codec.binary.Base64Test.testUUID":38,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":150,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":48,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":71,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":94,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":51,"org.apache.commons.codec.language.NysiisTest.testRule2":129,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":50,"org.apache.commons.codec.language.NysiisTest.testRule1":128,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":77,"org.apache.commons.codec.language.NysiisTest.testRule7":132,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":16,"org.apache.commons.codec.language.NysiisTest.testRule6":131,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":95,"org.apache.commons.codec.language.NysiisTest.testRule5":130,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":110,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":83,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":62,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":136,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":120,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":60,"org.apache.commons.codec.language.NysiisTest.testBran":133,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":140,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":145,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":19,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":152,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":61,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":29,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":37,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":54,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":0,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":78,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":81,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":40,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":73,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":93,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":84,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":102,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":46,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":41,"org.apache.commons.codec.digest.B64Test.testB64from24bit":148,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":113,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":52,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":10,"org.apache.commons.codec.language.NysiisTest.testDad":125,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":55,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":65,"org.apache.commons.codec.language.NysiisTest.testOthers":138,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":74,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully":144,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":91,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":122,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":34,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":117,"org.apache.commons.codec.language.NysiisTest.testDan":126,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":82,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully":142,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":64},"transformations":[{"failures":[],"tindex":"81613936-3d71-11e6-a866-1fe4d5f932a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtIfImpl","sourcecode":"if ((ii & 1) == 1) {\n    ctx.update(finalb[j]);\n} else {\n    ctx.update(keyBytes[j]);\n}"},"variableMap":{"ii":"blocksize","keyBytes":"keyBytes","finalb":"keyBytes","ctx":"ctx","j":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:247","type":"CtWhileImpl","sourcecode":"while (cnt > 0) {\n    if ((cnt & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(keyBytes);\n    }\n    cnt >>= 1;\n}"},"status":-2},{"failures":[],"tindex":"81613937-3d71-11e6-a866-a94a1f77a94f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"lastCode = code"},"variableMap":{"code":"code","lastCode":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:387","type":"CtAssignmentImpl","sourcecode":"code = '5'"},"status":-2},{"failures":[],"tindex":"81616048-3d71-11e6-a866-77ced8f99e63","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"status":-2},{"failures":[],"tindex":"81616049-3d71-11e6-a866-cd34850e2228","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"location","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"location"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:440","type":"CtInvocationImpl","sourcecode":"lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)))"},"status":-2},{"failures":[0,1],"tindex":"8161604a-3d71-11e6-a866-27335bff56b9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"status":-1},{"failures":[],"tindex":"8161604b-3d71-11e6-a866-25153cd7d6d7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:438","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"variableMap":{"data":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:249","type":"CtReturnImpl","sourcecode":"return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang)"},"status":-2},{"failures":[],"tindex":"8161604c-3d71-11e6-a866-058dc2e6b3b0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:184","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16))"},"status":-2},{"failures":[2],"tindex":"8161604d-3d71-11e6-a866-6fd10a466649","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:567","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-1},{"failures":[3,4,5,6],"tindex":"8161604e-3d71-11e6-a866-39cc7a2532a4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"result.append('K', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:694","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"8161875f-3d71-11e6-a866-fd25756ccda9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"status":0},{"failures":[],"tindex":"81618760-3d71-11e6-a866-c97fe9bc3dbd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:339","type":"CtIfImpl","sourcecode":"if (context.boolean) {\n    return ;\n} "},"variableMap":{"context":"context","eof":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:440","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n    if ((0 == (context.int)) && ((int) == 0)) {\n        return ;\n    } \n    final byte[] byte[] = ensureBufferSize(int, context);\n    final int int = context.int;\n    switch (context.int) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 2 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 3 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 4 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n    context.int += (context.int) - savedPos;\n    if (((int) > 0) && ((context.int) > 0)) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n    } \n} else {\n    for (int int = 0 ; i < inAvail ; i++) {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n        int int = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.long = ((context.long) << 8) + b;\n        if (0 == (context.int)) {\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n            if (((int) > 0) && ((int) <= (context.int))) {\n                java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                context.int += byte[].int;\n                context.int = 0;\n            } \n        } \n    }\n}"},"status":-2},{"failures":[7],"tindex":"81618761-3d71-11e6-a866-a1bee3e0c020","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"variableMap":{"l_ascii":"raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:83","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw)"},"status":-1},{"failures":[8,9,10,11,12],"tindex":"8161ae72-3d71-11e6-a866-657be585ad53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:461","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)"},"status":-1},{"failures":[],"tindex":"8161ae73-3d71-11e6-a866-e7f15e05e662","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"status":0},{"failures":[13,14,15,16,17,18,19],"tindex":"8161ae74-3d71-11e6-a866-2f148643f9d5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[20,21],"tindex":"8161ae75-3d71-11e6-a866-2bc1d9e09e55","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"status":-1},{"failures":[22,23,24,3,4,5,6],"tindex":"8161ae76-3d71-11e6-a866-8d96b6d5ecc5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('A');\n} "},"status":-1},{"failures":[],"tindex":"8161ae77-3d71-11e6-a866-57ad89e75ef5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:194","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":0},{"failures":[],"tindex":"8161ae78-3d71-11e6-a866-4bb3cf65a04b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:88","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"8161ae79-3d71-11e6-a866-b771bc91717b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"status":0},{"failures":[],"tindex":"8161ae7a-3d71-11e6-a866-6183e809d9dd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:292","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[16,18],"tindex":"8161d58b-3d71-11e6-a866-8db15ddf7f14","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:297","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[],"tindex":"8161d58c-3d71-11e6-a866-1d190fbcca4c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:339","type":"CtWhileImpl","sourcecode":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"i","sBytes":"tmp","tempResult":"tmp","saltLen":"i","cp":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n}"},"status":-2},{"failures":[4,5,6],"tindex":"8161d58d-3d71-11e6-a866-9b30e8e7b254","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[],"tindex":"8161d58e-3d71-11e6-a866-bb63d32eedf2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:342","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"status":-2},{"failures":[],"tindex":"8161d58f-3d71-11e6-a866-59e217486d77","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[avail]"},"variableMap":{"avail":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:203","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-2},{"failures":[],"tindex":"8161d590-3d71-11e6-a866-6500aaa2925b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:216","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:160","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-2},{"failures":[25,16,17,18,19],"tindex":"8161d591-3d71-11e6-a866-7ba699c39270","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"variableMap":{"outLen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:202","type":"CtLocalVariableImpl","sourcecode":"int int = bytes[index]"},"status":-1},{"failures":[],"tindex":"8161d592-3d71-11e6-a866-bf90c15b07f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = replacement"},"variableMap":{"lastReplacement":"txt","replacement":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"status":0},{"failures":[5,6],"tindex":"8161d593-3d71-11e6-a866-eb265ae8bb8a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[],"tindex":"8161fca4-3d71-11e6-a866-f119f55f70bf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"j","len":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:237","type":"CtWhileImpl","sourcecode":"while (ii > 0) {\n    if ((ii & 1) == 1) {\n        ctx.update(finalb[j]);\n    } else {\n        ctx.update(keyBytes[j]);\n    }\n    ii >>= 1;\n}"},"status":-2},{"failures":[26,27,28,29,30,31,32,33],"tindex":"8161fca5-3d71-11e6-a866-0f443a93b9c0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:443","type":"CtReturnImpl","sourcecode":"return new java.lang.String(chrs)"},"status":-1},{"failures":[],"tindex":"8161fca6-3d71-11e6-a866-0d4cbed5d7fd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"variableMap":{"maxCodeLen":"diff"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"status":-2},{"failures":[],"tindex":"8161fca7-3d71-11e6-a866-4d1351294b61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"bitlen = ((bitlen + 7) >> 3) << 3"},"variableMap":{"bitlen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:571","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"8161fca8-3d71-11e6-a866-55436113f93d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:430","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[34,35,36,37,21],"tindex":"8161fca9-3d71-11e6-a866-47caa1fd6679","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:144","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-1},{"failures":[],"tindex":"8161fcaa-3d71-11e6-a866-63466889bb2c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:275","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"variableMap":{"length":"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:771","type":"CtAssignmentImpl","sourcecode":"read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int)"},"status":-2},{"failures":[38,39],"tindex":"8161fcab-3d71-11e6-a866-65ca74290cb3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)"},"status":-1},{"failures":[],"tindex":"8161fcac-3d71-11e6-a866-d91b69c0ad0c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.Base32.DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:288","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[25,16,17,18,19],"tindex":"8161fcad-3d71-11e6-a866-2db02a1cb2aa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:225","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"8161fcae-3d71-11e6-a866-4d94f43827c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:96","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[mapping.int]"},"status":-2},{"failures":[],"tindex":"8161fcaf-3d71-11e6-a866-9b0a09407db8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"status":0},{"failures":[],"tindex":"8161fcb0-3d71-11e6-a866-d91a2699a406","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:103","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"status":-2},{"failures":[],"tindex":"816223c1-3d71-11e6-a866-2532d80ac2d8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[bitlen / 8]"},"variableMap":{"bitlen":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:176","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-2},{"failures":[3,5,6],"tindex":"816223c2-3d71-11e6-a866-195718fe9540","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[40],"tindex":"816223c3-3d71-11e6-a866-470cf2e30f84","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"status":-1},{"failures":[41,42],"tindex":"816223c4-3d71-11e6-a866-6b665f25869d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:232","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch))"},"status":-1},{"failures":[],"tindex":"816223c5-3d71-11e6-a866-dd40564ba37c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:190","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.java.nio.charset.Charset"},"variableMap":{"charset":"charset","org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:130","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-2},{"failures":[],"tindex":"816223c6-3d71-11e6-a866-f5a7fe09d903","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"variableMap":{"c":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"status":0},{"failures":[],"tindex":"816223c7-3d71-11e6-a866-d126d466ad9d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:431","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = text.toCharArray()"},"variableMap":{"text":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:277","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = str.toCharArray()"},"status":-2},{"failures":[43,44,45],"tindex":"816223c8-3d71-11e6-a866-05da8b16716f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:184","type":"CtOperatorAssignmentImpl","sourcecode":"l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits]"},"status":-1},{"failures":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,38,64,65,66,67,68,69,39,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"816223c9-3d71-11e6-a866-a3cd346fc64a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[context.int]"},"variableMap":{"pos":"decodeSize","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:436","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[],"tindex":"816223ca-3d71-11e6-a866-c94b9baee97d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:549","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1))"},"variableMap":{"content":"ph"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:371","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(0, open)"},"status":-2},{"failures":[],"tindex":"816223cb-3d71-11e6-a866-55eb94eac594","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:153","type":"CtLocalVariableImpl","sourcecode":"final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"variableMap":{"line":"value","org.apache.commons.codec.language.bm.ResourceConstants.CMT":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:93","type":"CtLocalVariableImpl","sourcecode":"int int = isSilentStart(value) ? 1 : 0"},"status":-2},{"failures":[],"tindex":"81624adc-3d71-11e6-a866-c714caa59cd1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"variableMap":{"result":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"status":-2},{"failures":[],"tindex":"81624add-3d71-11e6-a866-619f6f7ebe78","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:244","type":"CtUnaryOperatorImpl","sourcecode":"y++"},"variableMap":{"y":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:394","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-2},{"failures":[84,85,86,87,88,89,90,91,92],"tindex":"81624ade-3d71-11e6-a866-b356bc78312d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:307","type":"CtTryImpl","sourcecode":"try {\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n    final char char = r.java.lang.String.charAt(0);\n    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n        ruleMapping.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}"},"status":-1},{"failures":[],"tindex":"81624adf-3d71-11e6-a866-55c7dbdaf126","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"81624ae0-3d71-11e6-a866-53f8a8e1d935","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:490","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[9,12],"tindex":"81624ae1-3d71-11e6-a866-c702ecf359ba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:149","type":"CtIfImpl","sourcecode":"if ((m.group(3)) != null) {\n    rounds = java.lang.Integer.parseInt(m.group(3));\n    rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n    roundsCustom = true;\n} "},"status":-1},{"failures":[],"tindex":"81624ae2-3d71-11e6-a866-9745d0693bb8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"strict"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.boolean"},"status":-2},{"failures":[81,82,93,94,95,96,97,98],"tindex":"81624ae3-3d71-11e6-a866-49b8e636bb19","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:74","type":"CtInvocationImpl","sourcecode":"buffer.append(charset)"},"status":-1},{"failures":[],"tindex":"81624ae4-3d71-11e6-a866-c97ec457b595","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"variableMap":{"w":"org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:502","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[],"tindex":"81624ae5-3d71-11e6-a866-1f771c1fc686","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:160","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context)"},"variableMap":{"buf":"pArray","c":"length","context":"context","baseNCodec":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:410","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, pArray.int, context)"},"status":-2},{"failures":[],"tindex":"81624ae6-3d71-11e6-a866-a56be0a07bb7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:89","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"z\", \"s\")"},"status":-2},{"failures":[],"tindex":"81624ae7-3d71-11e6-a866-49efe4f1f56a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"nextBranches.clear()"},"variableMap":{"nextBranches":"nextBranches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:516","type":"CtIfImpl","sourcecode":"if (branching) {\n    nextBranches.clear();\n} "},"status":0},{"failures":[99],"tindex":"816271f8-3d71-11e6-a866-3b9f37ffd898","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:576","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[100,101,46,47,48,102,57],"tindex":"816271f9-3d71-11e6-a866-9faa425d6d83","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"status":-1},{"failures":[],"tindex":"816271fa-3d71-11e6-a866-b9bfd5116cab","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","raw":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"816271fb-3d71-11e6-a866-85c03d51c117","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:182","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null)"},"variableMap":{"original":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:602","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"status":-2},{"failures":[],"tindex":"816271fc-3d71-11e6-a866-b1080f15cc3a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"status":0},{"failures":[],"tindex":"816271fd-3d71-11e6-a866-196c99ba8374","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:454","type":"CtLocalVariableImpl","sourcecode":"final int int = currentLine"},"variableMap":{"currentLine":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:201","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(java.lang.Math.min(b.int, todo)))"},"status":-2},{"failures":[],"tindex":"816271fe-3d71-11e6-a866-9d9295ceb0ff","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[26,27,28,29,30,31,32,33],"tindex":"816271ff-3d71-11e6-a866-dd339f8a455a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"code","c2":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:394","type":"CtIfImpl","sourcecode":"if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n    output.addRight(code);\n} "},"status":-1},{"failures":[],"tindex":"81627200-3d71-11e6-a866-391b7e98e52d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"81627201-3d71-11e6-a866-41e21337a5f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:260","type":"CtAssignmentImpl","sourcecode":"altResult = ctx.digest()"},"variableMap":{"altResult":"finalb","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:250","type":"CtAssignmentImpl","sourcecode":"finalb = ctx.digest()"},"status":-2},{"failures":[],"tindex":"81627202-3d71-11e6-a866-dde5cae96d13","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:253","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.this.int"},"variableMap":{"maxCodeLen":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return b"},"status":-2},{"failures":[],"tindex":"81627203-3d71-11e6-a866-83d9f8a7771c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"status":-2},{"failures":[84,85,87,88,92],"tindex":"81627204-3d71-11e6-a866-a73fcfa379fe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:545","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"81627205-3d71-11e6-a866-11d32f673183","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:153","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:206","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"81629916-3d71-11e6-a866-f78295a2709e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:176","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-2},{"failures":[100,101,103,104,105,102,106,107,108,109],"tindex":"81629917-3d71-11e6-a866-bdac24d3ddac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n            context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"81629918-3d71-11e6-a866-eb94b034030a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"status":0},{"failures":[],"tindex":"81629919-3d71-11e6-a866-518a8a9f1d1b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"name = getFirst3Last3(name)"},"status":-2},{"failures":[8,9,10,110,11,12,111,112,113,114,115,116],"tindex":"8162991a-3d71-11e6-a866-3534556f2a17","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:260","type":"CtAssignmentImpl","sourcecode":"altResult = ctx.digest()"},"status":-1},{"failures":[8,9,10,11,12,111,112,113],"tindex":"8162991b-3d71-11e6-a866-e9f7d6fae09c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"keyLen","name2Size":"keyLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:398","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-1},{"failures":[117],"tindex":"8162991c-3d71-11e6-a866-d184dfae406c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"variableMap":{"pos":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"status":-1},{"failures":[],"tindex":"8162991d-3d71-11e6-a866-5ba45a95be25","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:595","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))"},"variableMap":{"binaryData":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"status":-2},{"failures":[],"tindex":"8162991e-3d71-11e6-a866-071e39dd7988","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:647","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.language.bm.Rule.RPattern = org.apache.commons.codec.language.bm.Rule.pattern((\"^\" + rContext))"},"variableMap":{"rContext":"lContext"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:646","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.language.bm.Rule.RPattern = org.apache.commons.codec.language.bm.Rule.pattern((lContext + \"$\"))"},"status":-2},{"failures":[3,5,6],"tindex":"8162991f-3d71-11e6-a866-05bcb0ca6b36","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:372","type":"CtInvocationImpl","sourcecode":"result.append('X', 'K')"},"status":-1},{"failures":[5,6],"tindex":"81629920-3d71-11e6-a866-ab2f7024f0cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:419","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:609","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[47,48,118,119,120,121],"tindex":"81629921-3d71-11e6-a866-a55584aff047","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:337","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n    if ((0 == (context.int)) && ((int) == 0)) {\n        return ;\n    } \n    final byte[] byte[] = ensureBufferSize(int, context);\n    final int int = context.int;\n    switch (context.int) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                buffer[((context.int)++)] = byte;\n                buffer[((context.int)++)] = byte;\n            } \n            break;\n        case 2 :\n            buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                buffer[((context.int)++)] = byte;\n            } \n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n    context.int += (context.int) - savedPos;\n    if (((int) > 0) && ((context.int) > 0)) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n    } \n} else {\n    for (int int = 0 ; i < inAvail ; i++) {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n        int int = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.int = ((context.int) << 8) + b;\n        if (0 == (context.int)) {\n            buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n            if (((int) > 0) && ((int) <= (context.int))) {\n                java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                context.int += byte[].int;\n                context.int = 0;\n            } \n        } \n    }\n}"},"status":-2},{"failures":[122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141],"tindex":"8162c032-3d71-11e6-a866-0f29bd69363a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:321","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"variableMap":{"data":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)"},"status":-1},{"failures":[],"tindex":"8162c033-3d71-11e6-a866-c165db9f19fc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:221","type":"CtLocalVariableImpl","sourcecode":"final int int = original[i]"},"status":-2},{"failures":[],"tindex":"8162c034-3d71-11e6-a866-b1861dcb0da5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:162","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"variableMap":{"code":"buffer","symb":"org.apache.commons.codec.net.RFC1522Codec.SEP"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:75","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char)"},"status":-2},{"failures":[],"tindex":"8162c035-3d71-11e6-a866-33d0e753ba11","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:378","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[81,82,93,94,95,96,97,98],"tindex":"8162c036-3d71-11e6-a866-af801df10bec","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:194","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"variableMap":{"saltString":"text","org.apache.commons.codec.Charsets.UTF_8":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:78","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.net.RFC1522Codec.this.doEncoding(text.getBytes(charset))"},"status":-1},{"failures":[142,143,144,145,146,147],"tindex":"8162c037-3d71-11e6-a866-dd733ce9cefe","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"variableMap":{"compareCode":"minRating"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:190","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-1},{"failures":[],"tindex":"8162c038-3d71-11e6-a866-1f97b845641e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:301","type":"CtLocalVariableImpl","sourcecode":"final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:473","type":"CtLocalVariableImpl","sourcecode":"java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey)"},"status":-2},{"failures":[148,8,9,10,11,12,111,112,113,149,150,151,152,0,1,153],"tindex":"8162c039-3d71-11e6-a866-5d5abd85ac75","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:223","type":"CtAssignmentImpl","sourcecode":"patternLength = 1"},"variableMap":{"patternLength":"w"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
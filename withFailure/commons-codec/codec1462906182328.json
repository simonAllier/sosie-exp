{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":63,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":68,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":65,"org.apache.commons.codec.binary.Base64Test.testBase64":44,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":81,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":51,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":58,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":77,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":29,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":75,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":78,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":11,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":38,"org.apache.commons.codec.binary.Base64Test.testSingletons":42,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":22,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":24,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":12,"org.apache.commons.codec.binary.Base64Test.testPairs":28,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":37,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":23,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":70,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":46,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":79,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":32,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":27,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":33,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":8,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":36,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":20,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":34,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":35,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":74,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":21,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":39,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":16,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":73,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":40,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":47,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":6,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":41,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":76,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":60,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":66,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":10,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":5,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":82,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":25,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":48,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":61,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":14,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":31,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":43,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":55,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":67,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":59,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":7,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":17,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":30,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":54},"transformations":[{"failures":[],"tindex":"f4e5fcf3-16df-11e6-97f4-5986a5ff0723","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"tia\", \"sia\")","position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone2:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[],"tindex":"f4e64b14-16df-11e6-97f4-91eb0368ce0f","series":0,"name":"replace","transplant":{"toString":"return schedule","position":"org.apache.commons.codec.digest.UnixCrypt:381","type":"CtReturnImpl","sourcecode":"return schedule"},"variableMap":{"schedule":"out"},"type":"adrStmt","transplantationPoint":{"toString":"return out","position":"org.apache.commons.codec.digest.UnixCrypt:317","type":"CtReturnImpl","sourcecode":"return out"},"status":-3},{"failures":[0,1,2,3],"tindex":"f4e64b15-16df-11e6-97f4-9d9cfe967946","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}"},"status":-1},{"failures":[4,5],"tindex":"f4e64b16-16df-11e6-97f4-a17864b949e8","series":0,"name":"replace","transplant":{"toString":"return 0","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return context.eof ? 0 : 1","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:64","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.Context.boolean ? 0 : 1"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,4,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"f4e67227-16df-11e6-97f4-7f0af714a749","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte[] buffer = ensureBufferSize(decodeSize, context);\n    final byte b = in[(inPos++)];\n    if (b == (pad)) {\n        context.eof = true;\n        break;\n    } else {\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n            final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n            if (result >= 0) {\n                context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n                context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n                if ((context.modulus) == 0) {\n                    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.binary.Base64:435","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    final byte byte = in[(inPos++)];\n    if (b == (byte)) {\n        context.boolean = true;\n        break;\n    } else {\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n            final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n            if (result >= 0) {\n                context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                if ((context.int) == 0) {\n                    buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-1},{"failures":[],"tindex":"f4e69938-16df-11e6-97f4-67713bb69bc7","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"variableMap":{"txt":"input"},"type":"adrStmt","transplantationPoint":{"toString":"input = words.iterator().next()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:455","type":"CtAssignmentImpl","sourcecode":"input = words.iterator().next()"},"status":-2},{"failures":[50,51,52],"tindex":"f4e69939-16df-11e6-97f4-d7858f9b7d12","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"status":-1},{"failures":[],"tindex":"f4e6c04a-16df-11e6-97f4-03c58356db7a","series":0,"name":"replace","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"b","len":"b"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:225","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-3},{"failures":[],"tindex":"f4e6c04b-16df-11e6-97f4-75ac3b5877f3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"status":0},{"failures":[53],"tindex":"f4e6c04c-16df-11e6-97f4-9564b7c57839","series":0,"name":"replace","transplant":{"toString":"b += 256","position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"compareCode"},"type":"adrStmt","transplantationPoint":{"toString":"compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"status":-1},{"failures":[],"tindex":"f4e6e75d-16df-11e6-97f4-c1bfc4ef6a0f","series":0,"name":"replace","transplant":{"toString":"index = index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"index = index + 2"},"variableMap":{"index":"cnt"},"type":"adrStmt","transplantationPoint":{"toString":"cnt >>= 1","position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"status":-2},{"failures":[54,55,56,57,58],"tindex":"f4e6e75e-16df-11e6-97f4-fb19b68ce7e1","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:467","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:459","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer)"},"status":-1},{"failures":[],"tindex":"f4e6e75f-16df-11e6-97f4-8595627e4086","series":0,"name":"replace","transplant":{"toString":"salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))","position":"org.apache.commons.codec.digest.Sha2Crypt:103","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"variableMap":{"salt":"txt","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"status":-3},{"failures":[59],"tindex":"f4e70e70-16df-11e6-97f4-855ee65c5975","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.ISO_8859_1)","position":"org.apache.commons.codec.binary.StringUtils:303","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[60,61,62,63,64,65,66,67,68,69],"tindex":"f4e70e71-16df-11e6-97f4-8d9971068672","series":0,"name":"add","transplant":{"toString":"local.setCharAt(0, 'W')","position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"local.setCharAt(0, 'W')"},"variableMap":{"local":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"for (char ch : input.toCharArray()) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    ch = java.lang.Character.toLowerCase(ch);\n    if ((folding) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS.containsKey(ch))) {\n        ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS.get(ch);\n    } \n    sb.append(ch);\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:379","type":"CtForEachImpl","sourcecode":"for (char char : input.toCharArray()) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    ch = java.lang.Character.toLowerCase(ch);\n    if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n        ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n    } \n    sb.append(ch);\n}"},"status":-1},{"failures":[],"tindex":"f4e73582-16df-11e6-97f4-cb73e2ca93c9","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"status":-2},{"failures":[70,71,72,73,74],"tindex":"f4e73583-16df-11e6-97f4-99655f32570a","series":0,"name":"replace","transplant":{"toString":"right = t","position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"b","right":"b"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:321","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)"},"status":-1},{"failures":[],"tindex":"f4e75c94-16df-11e6-97f4-85145c28635f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"current = getMappingCode(str.charAt(i))","position":"org.apache.commons.codec.language.RefinedSoundex:192","type":"CtAssignmentImpl","sourcecode":"current = getMappingCode(str.charAt(i))"},"status":-2},{"failures":[75,76,77,78,79,80,81,82],"tindex":"f4e75c95-16df-11e6-97f4-c9410988e351","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"newPhonemes.add(join)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:115","type":"CtInvocationImpl","sourcecode":"newPhonemes.add(join)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
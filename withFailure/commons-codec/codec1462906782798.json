{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":61,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":12,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":6,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":82,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":91,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":81,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":137,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":136,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":9,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":93,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":114,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":108,"org.apache.commons.codec.binary.Base64Test.testTriplets":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":77,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":126,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":16,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":128,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":99,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":104,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":47,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":107,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":66,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":71,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":40,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":34,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":41,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":45,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":42,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":43,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":97,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":115,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":110,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":58,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":79,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":65,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":127,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":33,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":135,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":83,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":139,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":56,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":80,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":27,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":25,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":8,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":15,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":72,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":88,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":131,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":134,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":85,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":103,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":73,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":118,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":28,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":20,"org.apache.commons.codec.language.MetaphoneTest.testTCH":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":92,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":21,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":68,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":62,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":96,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":50,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":90,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":95,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":117,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":67,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":44,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":141,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":138,"org.apache.commons.codec.binary.Base64Test.testBase64":64,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":76,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":14,"org.apache.commons.codec.binary.Base64Test.testUUID":36,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":48,"org.apache.commons.codec.binary.Base64Test.testSingletons":57,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":84,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":94,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":101,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":116,"org.apache.commons.codec.binary.Base64Test.testPairs":35,"org.apache.commons.codec.binary.Base64Test.testConstructors":38,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":100,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":69,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":29,"org.apache.commons.codec.binary.Base64Test.testCodec112":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":111,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":109,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":129,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":24,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":123,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":31,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":98,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":119,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":7,"org.apache.commons.codec.binary.Base64Test.testCodec68":59,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":120,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":105,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":53,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":70,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":121,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":5,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":54,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":86,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":124,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":133,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":78,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":112,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":130,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":19,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":102,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":23,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":46,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":106,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":39,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":60,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":22,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":89,"org.apache.commons.codec.language.SoundexTest.testDifference":132,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":140,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":0,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":74,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":122,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":13,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":49,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":37,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":113,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":125},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"5ace70bc-16e1-11e6-a83f-839ac7abff3b","series":0,"name":"replace","transplant":{"toString":"return count >= minRating","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:260","type":"CtReturnImpl","sourcecode":"return count >= minRating"},"variableMap":{"count":"wdsz","minRating":"n"},"type":"adrStmt","transplantationPoint":{"toString":"return (n + 1) == wdsz","position":"org.apache.commons.codec.language.Metaphone:371","type":"CtReturnImpl","sourcecode":"return (n + 1) == wdsz"},"status":-1},{"failures":[10,11,12,13,14,15],"tindex":"5ace97cd-16e1-11e6-a83f-49e623294ff8","series":0,"name":"replace","transplant":{"toString":"result.append(\"TS\", \"FX\")","position":"org.apache.commons.codec.language.DoubleMetaphone:727","type":"CtInvocationImpl","sourcecode":"result.append(\"TS\", \"FX\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J', 'A')","position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"result.append('J', 'A')"},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27],"tindex":"5acebede-16e1-11e6-a83f-5b80fc1b9f49","series":0,"name":"replace","transplant":{"toString":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:368","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}"},"variableMap":{"blocksize":"blocksize","pBytes":"pBytes","altResult":"sBytes","ctx":"ctx","i":"keyLen","keyLen":"keyLen"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i <= (rounds - 1) ; i++) {\n    ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n    if ((i & 1) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } else {\n        ctx.update(altResult, 0, blocksize);\n    }\n    if ((i % 3) != 0) {\n        ctx.update(sBytes, 0, saltLen);\n    } \n    if ((i % 7) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } \n    if ((i & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(pBytes, 0, keyLen);\n    }\n    altResult = ctx.digest();\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:356","type":"CtForImpl","sourcecode":"for (int int = 0 ; i <= (rounds - 1) ; i++) {\n    ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n    if ((i & 1) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } else {\n        ctx.update(altResult, 0, blocksize);\n    }\n    if ((i % 3) != 0) {\n        ctx.update(sBytes, 0, saltLen);\n    } \n    if ((i % 7) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } \n    if ((i & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(pBytes, 0, keyLen);\n    }\n    altResult = ctx.digest();\n}"},"status":-1},{"failures":[],"tindex":"5acee5ef-16e1-11e6-a83f-032e05919002","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:373","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-2},{"failures":[28],"tindex":"5acee5f0-16e1-11e6-a83f-df140ffd87b6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"urlsafe = org.apache.commons.codec.net.URLCodec.WWW_FORM_URL","position":"org.apache.commons.codec.net.URLCodec:126","type":"CtAssignmentImpl","sourcecode":"urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet"},"status":-1},{"failures":[29],"tindex":"5acee5f1-16e1-11e6-a83f-5d423d741118","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ci\", \"si\")","position":"org.apache.commons.codec.language.Caverphone1:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"b\", \"p\")","position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"status":-1},{"failures":[],"tindex":"5acee5f2-16e1-11e6-a83f-a15f8ce4f8eb","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"saltString","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"saltString"},"type":"adrStmt","transplantationPoint":{"toString":"saltString = m.group(1)","position":"org.apache.commons.codec.digest.Md5Crypt:192","type":"CtAssignmentImpl","sourcecode":"saltString = m.group(1)"},"status":-3},{"failures":[16,21,22,23,24,25],"tindex":"5acf0d03-16e1-11e6-a83f-6faeeb219d37","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:487","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:466","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer)"},"status":-1},{"failures":[],"tindex":"5acf0d04-16e1-11e6-a83f-f1017710406a","series":0,"name":"add","transplant":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"variableMap":{"key":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Soundex:150","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"5acf3415-16e1-11e6-a83f-a5b0570fa078","series":0,"name":"replace","transplant":{"toString":"c &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"t"},"type":"adrStmt","transplantationPoint":{"toString":"schedule[(j++)] = (t << 16) | (s & 65535)","position":"org.apache.commons.codec.digest.UnixCrypt:375","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = (t << 16) | (s & 65535)"},"status":-2},{"failures":[],"tindex":"5acf5b26-16e1-11e6-a83f-1bb021b30f8e","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:314","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"buffer","key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:272","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],"tindex":"5acf5b27-16e1-11e6-a83f-438cee604fff","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.BaseNCodec:504","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[125,126],"tindex":"5acf8238-16e1-11e6-a83f-7f62158242f9","series":0,"name":"add","transplant":{"toString":"diff++","position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"el"},"type":"adrStmt","transplantationPoint":{"toString":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.SPTRANS[1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[6][((u >>> 24) & 63)])","position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-1},{"failures":[10,12,13,14],"tindex":"5acf8239-16e1-11e6-a83f-e52b55a793dd","series":0,"name":"add","transplant":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('P')","position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"status":-1},{"failures":[],"tindex":"5acfa94a-16e1-11e6-a83f-65bf4de0a541","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.rules = java.util.Collections.unmodifiableList(rules)","position":"org.apache.commons.codec.language.bm.Lang:191","type":"CtAssignmentImpl","sourcecode":"this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule> = java.util.Collections.unmodifiableList(rules)"},"status":-2},{"failures":[125,126],"tindex":"5acfa94b-16e1-11e6-a83f-b5f570394af5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:354","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)"},"status":-1},{"failures":[],"tindex":"5acfa94c-16e1-11e6-a83f-5f796f59f2d5","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:413","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[],"tindex":"5acfd05d-16e1-11e6-a83f-7f033c703d4f","series":0,"name":"replace","transplant":{"toString":"java.lang.String boxContent = content.substring(1, ((content.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:549","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1))"},"variableMap":{"content":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name2RtLStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:304","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[],"tindex":"5acfd05e-16e1-11e6-a83f-89f203eb85df","series":0,"name":"replace","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] b = new byte[9]","position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"status":-2},{"failures":[],"tindex":"5acff76f-16e1-11e6-a83f-c5f6b0fc209b","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"status":-2},{"failures":[],"tindex":"5acff770-16e1-11e6-a83f-5b921c2b9dbb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"status":0},{"failures":[127,128,129,130],"tindex":"5acff771-16e1-11e6-a83f-71ef93e260b2","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:602","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"5acff772-16e1-11e6-a83f-a7ecf1d36f68","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (rule.acceptOnMatch) {\n    langs.retainAll(rule.languages);\n} else {\n    langs.removeAll(rule.languages);\n}","position":"org.apache.commons.codec.language.bm.Lang:220","type":"CtIfImpl","sourcecode":"if (rule.boolean) {\n    langs.retainAll(rule.java.util.Set<java.lang.String>);\n} else {\n    langs.removeAll(rule.java.util.Set<java.lang.String>);\n}"},"status":-2},{"failures":[131,132],"tindex":"5ad01e83-16e1-11e6-a83f-c3c2e756acaa","series":0,"name":"replace","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return diff","position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"status":-1},{"failures":[],"tindex":"5ad01e84-16e1-11e6-a83f-891e9f1e0af4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inExtendedComment = true;\n} else {\n    final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 3) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n    } \n    final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n    final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n    final boolean accept = parts[2].equals(\"true\");\n    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n}","position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 3) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n    } \n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n    final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n    final boolean boolean = parts[2].equals(\"true\");\n    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n}"},"status":0},{"failures":[],"tindex":"5ad04595-16e1-11e6-a83f-6f09efee1fcd","series":0,"name":"replace","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] saltBytes = saltString.getBytes(org.apache.commons.codec.Charsets.UTF_8)","position":"org.apache.commons.codec.digest.Md5Crypt:194","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"5ad06ca6-16e1-11e6-a83f-1594ebdbaecc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"status":-2},{"failures":[],"tindex":"5ad06ca7-16e1-11e6-a83f-b9b5fb3ea6fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"status":0},{"failures":[],"tindex":"5ad06ca8-16e1-11e6-a83f-fb35f48df986","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:280","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"5ad093b9-16e1-11e6-a83f-77ec6fc00915","series":0,"name":"replace","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Soundex:263","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":0},{"failures":[],"tindex":"5ad093ba-16e1-11e6-a83f-4988b4c0e048","series":0,"name":"replace","transplant":{"toString":"minRating = getMinRating(sumLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"minRating = getMinRating(sumLength)"},"variableMap":{"sumLength":"index","minRating":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:742","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[125,126],"tindex":"5ad093bb-16e1-11e6-a83f-fbcb1557a401","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:348","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)"},"variableMap":{"c":"right","d":"right","results":"results"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)","position":"org.apache.commons.codec.digest.UnixCrypt:302","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)"},"status":-1},{"failures":[125,126],"tindex":"5ad0bacc-16e1-11e6-a83f-d15ad31f5274","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"c = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:356","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[],"tindex":"5ad0bacd-16e1-11e6-a83f-f5761985f2e1","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"mac.reset()","position":"org.apache.commons.codec.digest.HmacUtils:742","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"status":-2},{"failures":[],"tindex":"5ad0bace-16e1-11e6-a83f-0b9d0d9a8e50","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"status":-2},{"failures":[133,134,135,136,137,138,139,140,141],"tindex":"5ad0bacf-16e1-11e6-a83f-6fbbb17a2b96","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"rules.add(r)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:320","type":"CtInvocationImpl","sourcecode":"rules.add(r)"},"status":-1},{"failures":[16,21,22,23,25],"tindex":"5ad0bad0-16e1-11e6-a83f-37913c63c87a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:465","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer)"},"status":-1},{"failures":[],"tindex":"5ad0bad1-16e1-11e6-a83f-7d2f8e757abf","series":0,"name":"replace","transplant":{"toString":"key.deleteCharAt(((key.length()) - 1))","position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"variableMap":{"key":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"status":-2},{"failures":[],"tindex":"5ad0e1e2-16e1-11e6-a83f-2b816f7e489c","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:641","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:552","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal()"},"status":-2},{"failures":[],"tindex":"5ad0e1e3-16e1-11e6-a83f-a7b91fc88db1","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.soundexMapping, 0, mapping.length)","position":"org.apache.commons.codec.language.Soundex:97","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.char[], 0, mapping.int)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":40,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
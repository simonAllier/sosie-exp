{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":88,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":85,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":13,"org.apache.commons.codec.binary.Base64Test.testTriplets":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":97,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":58,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":84,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":100,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":98,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":101,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":52,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":30,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":41,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":64,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":46,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":103,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":24,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":19,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":25,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":29,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":102,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":27,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":76,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":50,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":104,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":94,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":33,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":79,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":37,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":4,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":92,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":93,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":105,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":99,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":7,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":78,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":86,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":68,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":83,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":6,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":89,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":17,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":59,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":56,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":48,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":75,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":96,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":80,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":43,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":49,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":32,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":10,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":28,"org.apache.commons.codec.binary.Base64Test.testBase64":40,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":57,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.binary.Base64Test.testUUID":21,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":95,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":31,"org.apache.commons.codec.binary.Base64Test.testSingletons":36,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":69,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":66,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":54,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":39,"org.apache.commons.codec.binary.Base64Test.testPairs":20,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":53,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":44,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":65,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":72,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":0,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":51,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":91,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":11,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":90,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":34,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":45,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":70,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":35,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":73,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":61,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":67,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":63,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":87,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":55,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":82,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":12,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":23,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":77,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":38,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":81,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":74,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":71,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":22},"transformations":[{"failures":[],"tindex":"187b98fb-0d8a-11e6-af7a-ada3ef15fac2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"terminator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-2},{"failures":[],"tindex":"187bc00c-0d8a-11e6-af7a-f3e71eeda7d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:449","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:481","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[0,1],"tindex":"187bc00d-0d8a-11e6-af7a-65a51025dca9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))"},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:379","type":"CtIfImpl","sourcecode":"if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"status":-1},{"failures":[],"tindex":"187bc00e-0d8a-11e6-af7a-7942dcd331ca","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:116","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-3},{"failures":[],"tindex":"187be71f-0d8a-11e6-af7a-ef89341fbb66","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[2,3],"tindex":"187cf890-0d8a-11e6-af7a-3ffd18af1193","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:530","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"status":-1},{"failures":[],"tindex":"187cf891-0d8a-11e6-af7a-d1e017d44ed2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:948","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"hex1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:186","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-2},{"failures":[2,3],"tindex":"187d1fa2-0d8a-11e6-af7a-9b1f3489240e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:605","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"187d1fa3-0d8a-11e6-af7a-1199215a87df","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"status":-2},{"failures":[2,3,4],"tindex":"187d1fa4-0d8a-11e6-af7a-91acb0ac892b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:522","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:415","type":"CtIfImpl","sourcecode":"if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n    result.append(\"N\", \"KN\");\n} else {\n    result.append(\"KN\");\n}"},"status":-1},{"failures":[],"tindex":"187d1fa5-0d8a-11e6-af7a-556f39ee5ea8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:71","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"187d1fa6-0d8a-11e6-af7a-39a08a36942b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:95","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[5,6,7,8,9,10],"tindex":"187d1fa7-0d8a-11e6-af7a-c3b6a5b100c6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:433","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = aWord.split(\"'\")"},"variableMap":{"aWord":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"status":-1},{"failures":[11,12,13,14,15,16,0,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"tindex":"187d46b8-0d8a-11e6-af7a-e1fffbbbdcd2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:294","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len)"},"status":-1},{"failures":[74,75,76,77,78,79],"tindex":"187d6dc9-0d8a-11e6-af7a-9bbb42b18dcf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:225","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"variableMap":{"b":"b","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtIfImpl","sourcecode":"if (b == '+') {\n    buffer.write(' ');\n} else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n    try {\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n    }\n} else {\n    buffer.write(b);\n}"},"status":-1},{"failures":[2,3],"tindex":"187d6dca-0d8a-11e6-af7a-2960e20c8ecd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"result.append(\"SK\")"},"status":-1},{"failures":[80,81,82,83,84,85,86,87],"tindex":"187d6dcb-0d8a-11e6-af7a-c1ec55269301","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"keyLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:387","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-1},{"failures":[2,3,4,88],"tindex":"187d94dc-0d8a-11e6-af7a-29b38cf2ea18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:124","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:127","type":"CtAssignmentImpl","sourcecode":"index = handleG(value, result, index, slavoGermanic)"},"status":-1},{"failures":[],"tindex":"187d94dd-0d8a-11e6-af7a-a779d5109d2c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"variableMap":{"n":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:362","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[89,90,91,92,93],"tindex":"187d94de-0d8a-11e6-af7a-b3c8f031c95d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"variableMap":{"mappedChar":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:165","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')]"},"status":-1},{"failures":[],"tindex":"187d94df-0d8a-11e6-af7a-a3c49c59af08","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:947","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtIfImpl","sourcecode":"if (digit == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n} "},"status":-2},{"failures":[],"tindex":"187d94e0-0d8a-11e6-af7a-f1d92c5bc96f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"status":-2},{"failures":[5,6],"tindex":"187d94e1-0d8a-11e6-af7a-f71227ad50f3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = replacement"},"status":-1},{"failures":[2,3],"tindex":"187d94e2-0d8a-11e6-af7a-3791ca9d3793","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"variableMap":{"left":"index","right":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:389","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[89,90,91,92,93],"tindex":"187d94e3-0d8a-11e6-af7a-ebf515bd7d0a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:203","type":"CtReturnImpl","sourcecode":"return sBuf.toString()"},"status":-1},{"failures":[2,3],"tindex":"187dbbf4-0d8a-11e6-af7a-f5a2ce7f9073","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:706","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"status":-1},{"failures":[],"tindex":"187dbbf5-0d8a-11e6-af7a-0353e96c4b0e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:234","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:279","type":"CtReturnImpl","sourcecode":"return other"},"status":0},{"failures":[],"tindex":"187dbbf6-0d8a-11e6-af7a-bd28d290f3ec","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:71","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-3},{"failures":[],"tindex":"187dbbf7-0d8a-11e6-af7a-836ae7ef1bd2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:469","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (input.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n    i = rulesApplication.getI();\n    phonemeBuilder = rulesApplication.getPhonemeBuilder();\n}"},"status":-2},{"failures":[94,95,96],"tindex":"187dbbf8-0d8a-11e6-af7a-21a05921f29b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"variableMap":{"valueToDigest":"keyBytes","key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:73","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt)"},"status":-1},{"failures":[],"tindex":"187dbbf9-0d8a-11e6-af7a-770ac21bd182","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"bits","to":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:280","type":"CtIfImpl","sourcecode":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}"},"status":-2},{"failures":[],"tindex":"187dbbfa-0d8a-11e6-af7a-0bec03080095","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"status":-2},{"failures":[],"tindex":"187de30b-0d8a-11e6-af7a-67484b4484a2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"org.apache.commons.codec.binary.BaseNCodec.EOF","lineSeparator":"singleByte"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:147","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"187de30c-0d8a-11e6-af7a-0d8f70a9f02d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.BLANK":"pad","data":"in","length":"decodeSize","org.apache.commons.codec.net.QCodec.UNDERSCORE":"pad"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:435","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    final byte byte = in[(inPos++)];\n    if (b == (byte)) {\n        context.boolean = true;\n        break;\n    } else {\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n            final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n            if (result >= 0) {\n                context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                if ((context.int) == 0) {\n                    buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-2},{"failures":[97],"tindex":"187de30d-0d8a-11e6-af7a-6791f3e58369","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:221","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"187de30e-0d8a-11e6-af7a-555aac3c0226","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:239","type":"CtAssignmentImpl","sourcecode":"name1 = getFirst3Last3(name1)"},"status":0},{"failures":[],"tindex":"187de30f-0d8a-11e6-af7a-e1c82199f70e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"diff","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"i","minRating":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"diff","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"diff","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"diff"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} "},"status":-3},{"failures":[],"tindex":"187e5840-0d8a-11e6-af7a-65fb5afd1c8c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:72","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"variableMap":{"keyBytes":"bytes","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"charsetName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:284","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , charsetName)"},"status":-3},{"failures":[98,99,100,101],"tindex":"187e5841-0d8a-11e6-af7a-5798f793fdbc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:154","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-1},{"failures":[102,103,104,105],"tindex":"187e5842-0d8a-11e6-af7a-97b260bcf5dd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"code = '0'"},"variableMap":{"code":"lastCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"lastCode = code"},"status":-1},{"failures":[],"tindex":"187e5843-0d8a-11e6-af7a-d9195609163a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:256","type":"CtCaseImpl","sourcecode":"case 'J' :"},"status":-3},{"failures":[],"tindex":"187e7f54-0d8a-11e6-af7a-2b2be2e6f9a7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"variableMap":{"t":"pos","left":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:473","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[],"tindex":"187e7f55-0d8a-11e6-af7a-8706b1da542d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:121","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-3},{"failures":[],"tindex":"187e7f56-0d8a-11e6-af7a-adc77e701434","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))"},"status":-2},{"failures":[],"tindex":"187e7f57-0d8a-11e6-af7a-732fcf9ec2d8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:123","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n    if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n        ls.add(lang);\n    } \n}"},"status":-2},{"failures":[57,58,67,68,69],"tindex":"187e7f58-0d8a-11e6-af7a-a37c721bb06e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"offset","tempResult":"b","pBytes":"b","cp":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[],"tindex":"187e7f59-0d8a-11e6-af7a-0d944785d2c7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:117","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-3},{"failures":[],"tindex":"187e7f5a-0d8a-11e6-af7a-11bbedcf0c21","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":48,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":55,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":41,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":13,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":14,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":15,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":47,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":17,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":18,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":48,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":0,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData":2,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":7,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":35,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":36,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":43,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":6,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":56,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":27,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":29,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":53,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":28,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":46,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":33,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":24,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":26,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":22,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":3,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":50,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":59,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":30,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":37,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":57,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":40,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":1,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":31,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":45,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":21,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":25,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":4,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":11,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":49,"org.apache.commons.codec.language.SoundexTest.testB650":16,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":38,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":10,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":44,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":9,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":58,"org.apache.commons.codec.language.SoundexTest.testDifference":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":39,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":32,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":42,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":54,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":5,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":8},"transformations":[{"failures":[],"tindex":"0bbe125b-115f-11e6-a0ae-6dc70f606a3c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"status":-2},{"failures":[],"tindex":"0bbe396c-115f-11e6-a0ae-4dac2c989b02","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:193","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"status":-2},{"failures":[],"tindex":"0bbe396d-115f-11e6-a0ae-9b565303af55","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:142","type":"CtInvocationImpl","sourcecode":"ls.add(lang)"},"variableMap":{"ls":"ls","lang":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:191","type":"CtInvocationImpl","sourcecode":"ls.add(line)"},"status":-3},{"failures":[],"tindex":"0bbe396e-115f-11e6-a0ae-4deeb3783e0d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"status":-2},{"failures":[0,1,2,3,4,5,6],"tindex":"0bbe396f-115f-11e6-a0ae-ef954235a839","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    final java.util.Random java.util.Random = new java.util.Random();\n    final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-1},{"failures":[7,8,9,10,11],"tindex":"0bbe6080-115f-11e6-a0ae-9150513d24fe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:462","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer)"},"status":-1},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"tindex":"0bbe6081-115f-11e6-a0ae-09eaf4d2bc61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:167","type":"CtReturnImpl","sourcecode":"return soundex(str)"},"status":-1},{"failures":[31,32,33],"tindex":"0bbe6082-115f-11e6-a0ae-5f2a4684637d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"bytes","key":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(bytes)"},"status":-1},{"failures":[34,35,36],"tindex":"0bbe6083-115f-11e6-a0ae-176652867a1c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:479","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2)"},"status":-1},{"failures":[37],"tindex":"0bbe6084-115f-11e6-a0ae-6f6581d2cfb2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:500","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"variableMap":{"data":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:351","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"0bbe6085-115f-11e6-a0ae-5d26a8a6007e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:262","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\")"},"status":-2},{"failures":[38,39,40,41,42,43],"tindex":"0bbe8796-115f-11e6-a0ae-f90c82c03773","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:709","type":"CtIfImpl","sourcecode":"if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n    if (isVowel(charAt(value, (index + 1)))) {\n        result.append('A', 'F');\n    } else {\n        result.append('A');\n    }\n    index++;\n} else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.appendAlternate('F');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n    result.append(\"TS\", \"FX\");\n    index += 4;\n} else {\n    index++;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:633","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n    result.appendAlternate('S');\n} else {\n    result.append('S');\n}"},"status":-1},{"failures":[],"tindex":"0bbe8797-115f-11e6-a0ae-3923d30f032d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[44],"tindex":"0bbe8798-115f-11e6-a0ae-3f987800a5eb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:315","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[],"tindex":"0bbe8799-115f-11e6-a0ae-f947bb9b2b85","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:742","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"status":0},{"failures":[],"tindex":"0bbe879a-115f-11e6-a0ae-23d9d6f2f49c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:752","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = bigInt.toByteArray()"},"status":-2},{"failures":[],"tindex":"0bbeaeab-115f-11e6-a0ae-f1034a331be5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"variableMap":{"concat":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:185","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"status":-2},{"failures":[],"tindex":"0bbeaeac-115f-11e6-a0ae-6bc2991d42f1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"0bbeaead-115f-11e6-a0ae-d3dfc180701e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"variableMap":{"source":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:444","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\")"},"status":-2},{"failures":[],"tindex":"0bbeaeae-115f-11e6-a0ae-1999999f1ce3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"variableMap":{"name2":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:121","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String)"},"status":-2},{"failures":[],"tindex":"0bbeaeaf-115f-11e6-a0ae-8164a46e50e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:97","type":"CtLocalVariableImpl","sourcecode":"int int = read(byte[], 0, 1)"},"variableMap":{"singleByte":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:141","type":"CtLocalVariableImpl","sourcecode":"final int int = data.int"},"status":-3},{"failures":[34,45,35,36,46,47,48,49],"tindex":"0bbed5c0-115f-11e6-a0ae-716fb32203b2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n    if (incl.contains(\" \")) {\n        throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n    } else {\n        lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n            final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n            final int int = currentLine;\n            final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                private final int myLine = cLine;\n\n                private final java.lang.String loc = location;\n\n                @java.lang.Override\n                public java.lang.String toString() {\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    sb.append(\"Rule\");\n                    sb.append(\"{line=\").append(int);\n                    sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                    sb.append(\", pat='\").append(pat).append('\\'');\n                    sb.append(\", lcon='\").append(lCon).append('\\'');\n                    sb.append(\", rcon='\").append(rCon).append('\\'');\n                    sb.append('}');\n                    return sb.toString();\n                }\n            };\n            final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n            java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                lines.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"0bbed5c1-115f-11e6-a0ae-498197d8e1e3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"0bbefcd2-115f-11e6-a0ae-51ef92f5900e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:437","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location))"},"status":0},{"failures":[50,51,52],"tindex":"0bbefcd3-115f-11e6-a0ae-a12131645225","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[],"tindex":"0bbefcd4-115f-11e6-a0ae-b7eaf26a2b3e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset())"},"variableMap":{"array":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:375","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data)"},"status":-2},{"failures":[],"tindex":"0bbefcd5-115f-11e6-a0ae-1f8d90580ca4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:339","type":"CtIfImpl","sourcecode":"if ((0 == (context.int)) && ((int) == 0)) {\n    return ;\n} "},"status":0},{"failures":[],"tindex":"0bbefcd6-115f-11e6-a0ae-2dafc920b4d2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:190","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.java.nio.charset.Charset"},"variableMap":{"charset":"charset","org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:69","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-3},{"failures":[53,54,55],"tindex":"0bbefcd7-115f-11e6-a0ae-79f51edb9d0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"n+\", \"N\")"},"status":-1},{"failures":[56,57],"tindex":"0bbf23e8-115f-11e6-a0ae-2d56a6f07884","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:434","type":"CtReturnImpl","sourcecode":"return buf"},"variableMap":{"buf":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"status":-1},{"failures":[],"tindex":"0bbf23e9-115f-11e6-a0ae-277d7d2e7f62","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:148","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"org.apache.commons.codec.language.Nysiis.CHARS_AF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[58,59],"tindex":"0bbf23ea-115f-11e6-a0ae-0f7334eea227","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"singleByte"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:98","type":"CtWhileImpl","sourcecode":"while (r == 0) {\n    r = read(byte[], 0, 1);\n}"},"status":-1},{"failures":[],"tindex":"0bbf23eb-115f-11e6-a0ae-fb4aa9e322be","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"pos","e1":"currentLinePos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":33,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":13,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":18,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":8,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":1,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":22,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":5,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":2,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":9,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":7,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":19,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":24,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":10,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":14,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":0,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":21,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":23,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":11},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"d334d7d8-16eb-11e6-b30d-b99613a5da71","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {\n    org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder subBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n    final java.lang.String phonemeText = phoneme.getPhonemeText().toString();\n    for (int i = 0 ; i < (phonemeText.length()) ; ) {\n        final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication rulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , maxPhonemes).invoke();\n        final boolean found = rulesApplication.isFound();\n        subBuilder = rulesApplication.getPhonemeBuilder();\n        if (!found) {\n            subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n        } \n        i = rulesApplication.getI();\n    }\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n        if (phonemes.containsKey(newPhoneme)) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n            final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n            phonemes.put(mergedPhoneme, mergedPhoneme);\n        } else {\n            phonemes.put(newPhoneme, newPhoneme);\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:341","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n    org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n    final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n    for (int int = 0 ; i < (phonemeText.length()) ; ) {\n        final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n        final boolean boolean = rulesApplication.isFound();\n        subBuilder = rulesApplication.getPhonemeBuilder();\n        if (!found) {\n            subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n        } \n        i = rulesApplication.getI();\n    }\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n        if (phonemes.containsKey(newPhoneme)) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n            phonemes.put(mergedPhoneme, mergedPhoneme);\n        } else {\n            phonemes.put(newPhoneme, newPhoneme);\n        }\n    }\n}"},"status":-1},{"failures":[8,9,10],"tindex":"d33525f9-16eb-11e6-b30d-bff923f2d8cc","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:490","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:470","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer)"},"status":-1},{"failures":[],"tindex":"d3354d0a-16eb-11e6-b30d-29c18d4a998a","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.SEPHARDIC, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:241","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))"},"variableMap":{"org.apache.commons.codec.language.bm.NameType.SEPHARDIC":"org.apache.commons.codec.language.bm.NameType.ASHKENAZI","org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.ASHKENAZI, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:238","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))"},"status":0},{"failures":[],"tindex":"d335741b-16eb-11e6-b30d-730c1a6f36d6","series":0,"name":"replace","transplant":{"toString":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtIfImpl","sourcecode":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} "},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((byte[])(obj)))","position":"org.apache.commons.codec.binary.BaseNCodec:338","type":"CtReturnImpl","sourcecode":"return encode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"d335741c-16eb-11e6-b30d-e559306cf6c3","series":0,"name":"add","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.QCodec:209","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[11,12],"tindex":"d335741d-16eb-11e6-b30d-83e07c3b9a34","series":0,"name":"replace","transplant":{"toString":"t = right","position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"t = right"},"variableMap":{"t":"left","right":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:313","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-1},{"failures":[],"tindex":"d3359b2e-16eb-11e6-b30d-05f0f65f7013","series":0,"name":"replace","transplant":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(si.next())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:261","type":"CtInvocationImpl","sourcecode":"sb.append(si.next())"},"status":0},{"failures":[],"tindex":"d3359b2f-16eb-11e6-b30d-11ff46f4bd5b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (propagate) {\n    out.flush();\n} ","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:119","type":"CtIfImpl","sourcecode":"if (propagate) {\n    java.io.OutputStream.flush();\n} "},"status":0},{"failures":[],"tindex":"d3359b30-16eb-11e6-b30d-ffa4fa760584","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[512]","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buf = new byte[avail]","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[avail]"},"status":-2},{"failures":[],"tindex":"d3359b31-16eb-11e6-b30d-311ba1e4ce0d","series":0,"name":"replace","transplant":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding())","position":"org.apache.commons.codec.net.RFC1522Codec:76","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding())"},"variableMap":{"buffer":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:197","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-2},{"failures":[13,14,15,16,17,18,19,20,21],"tindex":"d335c242-16eb-11e6-b30d-d98acc309bd0","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:490","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)"},"variableMap":{"altResult":"finalb","buffer":"passwd"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:288","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)"},"status":-1},{"failures":[],"tindex":"d335c243-16eb-11e6-b30d-8ba6082f3334","series":0,"name":"add","transplant":{"toString":"return digit","position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return digit"},"variableMap":{"digit":"el"},"type":"adrStmt","transplantationPoint":{"toString":"return el","position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return el"},"status":-2},{"failures":[],"tindex":"d335e954-16eb-11e6-b30d-59b71602788e","series":0,"name":"replace","transplant":{"toString":"char nextChar","position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char lastChar = '\u0000'","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"status":-2},{"failures":[22,23,24],"tindex":"d335e955-16eb-11e6-b30d-3ba19fa6c6c0","series":0,"name":"add","transplant":{"toString":"if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n    if (isVowel(charAt(value, (index + 1)))) {\n        result.append('A', 'F');\n    } else {\n        result.append('A');\n    }\n    index++;\n} else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.appendAlternate('F');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n    result.append(\"TS\", \"FX\");\n    index += 4;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:709","type":"CtIfImpl","sourcecode":"if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n    if (isVowel(charAt(value, (index + 1)))) {\n        result.append('A', 'F');\n    } else {\n        result.append('A');\n    }\n    index++;\n} else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.appendAlternate('F');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n    result.append(\"TS\", \"FX\");\n    index += 4;\n} else {\n    index++;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}"},"status":-1},{"failures":[],"tindex":"d3361066-16eb-11e6-b30d-49b6d68cc77a","series":0,"name":"replace","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"blocksize","len":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:224","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-3},{"failures":[],"tindex":"d3361067-16eb-11e6-b30d-4316d9009252","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"status":0},{"failures":[],"tindex":"d3363778-16eb-11e6-b30d-8f18b23da3a9","series":0,"name":"replace","transplant":{"toString":"minRating = getMinRating(sumLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"minRating = getMinRating(sumLength)"},"variableMap":{"sumLength":"index","minRating":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:707","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":17,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
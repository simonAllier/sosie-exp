{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":23,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":17,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":45,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":5,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":29,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":12,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":11,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":22,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":34,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":35,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":19,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":2,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":21,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":7,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":13,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":38,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":37,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":3,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":10,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":4,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":25,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":42,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":46,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":44,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":41,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":27,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":39,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":28,"org.apache.commons.codec.binary.Base64Test.testConstructors":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":18,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":31,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":16,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":0,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":26,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":14,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":47,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":20,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":24,"org.apache.commons.codec.language.MetaphoneTest.testTCH":6,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":40,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":9,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":43,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":33,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":36},"transformations":[{"failures":[],"tindex":"76ff3c93-16e1-11e6-992f-1141d02acda4","series":0,"name":"replace","transplant":{"toString":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)) {\n        inMultilineComment = false;\n    } \n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:260","type":"CtIfImpl","sourcecode":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        inMultilineComment = false;\n    } \n    continue;\n} "},"variableMap":{"line":"input","inMultilineComment":"folding","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (char ch : input.toCharArray()) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    ch = java.lang.Character.toLowerCase(ch);\n    if ((folding) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS.containsKey(ch))) {\n        ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS.get(ch);\n    } \n    sb.append(ch);\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:379","type":"CtForEachImpl","sourcecode":"for (char char : input.toCharArray()) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    ch = java.lang.Character.toLowerCase(ch);\n    if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n        ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n    } \n    sb.append(ch);\n}"},"status":-3},{"failures":[],"tindex":"76ff8ab4-16e1-11e6-992f-dbca200404b5","series":0,"name":"add","transplant":{"toString":"return ","position":"org.apache.commons.codec.binary.Base32:340","type":"CtReturnImpl","sourcecode":"return "},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (inAvail < 0) {\n    context.eof = true;\n    if ((0 == (context.modulus)) && ((lineLength) == 0)) {\n        return ;\n    } \n    final byte[] buffer = ensureBufferSize(encodeSize, context);\n    final int savedPos = context.pos;\n    switch (context.modulus) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 3))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 2))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            break;\n        case 2 :\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 11))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 6))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 1))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 4))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            break;\n        case 3 :\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 19))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 14))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 9))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 4))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 1))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n            break;\n        case 4 :\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 27))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 22))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 17))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 12))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 7))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 2))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 3))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = pad;\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n    }\n    context.currentLinePos += (context.pos) - savedPos;\n    if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n        java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n        context.pos += lineSeparator.length;\n    } \n} else {\n    for (int i = 0 ; i < inAvail ; i++) {\n        final byte[] buffer = ensureBufferSize(encodeSize, context);\n        context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK);\n        int b = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.lbitWorkArea = ((context.lbitWorkArea) << 8) + b;\n        if (0 == (context.modulus)) {\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 30))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 25))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 20))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 15))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 5))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            buffer[((context.pos)++)] = encodeTable[(((int)(context.lbitWorkArea)) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n            context.currentLinePos += org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n            if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n                java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n                context.pos += lineSeparator.length;\n                context.currentLinePos = 0;\n            } \n        } \n    }\n}","position":"org.apache.commons.codec.binary.Base32:440","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n    if ((0 == (context.int)) && ((int) == 0)) {\n        return ;\n    } \n    final byte[] byte[] = ensureBufferSize(int, context);\n    final int int = context.int;\n    switch (context.int) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 2 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 3 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 4 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n    context.int += (context.int) - savedPos;\n    if (((int) > 0) && ((context.int) > 0)) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n    } \n} else {\n    for (int int = 0 ; i < inAvail ; i++) {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n        int int = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.long = ((context.long) << 8) + b;\n        if (0 == (context.int)) {\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n            if (((int) > 0) && ((int) <= (context.int))) {\n                java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                context.int += byte[].int;\n                context.int = 0;\n            } \n        } \n    }\n}"},"status":0},{"failures":[0],"tindex":"77004e05-16e1-11e6-992f-b7828e04f785","series":0,"name":"replace","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('J')","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"status":-1},{"failures":[1,2,3,4],"tindex":"77004e06-16e1-11e6-992f-e5409d0b36b5","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:708","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"77007517-16e1-11e6-992f-2350f839eac7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(org.apache.commons.codec.net.QuotedPrintableCodec.TAB)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:106","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":0},{"failures":[],"tindex":"77007518-16e1-11e6-992f-3734eb018710","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:362","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}"},"status":-2},{"failures":[],"tindex":"77009c29-16e1-11e6-992f-8bfedb81f451","series":0,"name":"replace","transplant":{"toString":"t = (t >>> 4) | (t << 28)","position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:292","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"77009c2a-16e1-11e6-992f-a3f15a1b7524","series":0,"name":"add","transplant":{"toString":"final java.lang.String body = ph.substring(1, ((ph.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"ph"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String in = ph.substring((open + 1), ((ph.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:372","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1))"},"status":-2},{"failures":[5,0,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"7700c33b-16e1-11e6-992f-859bd8e2f52e","series":0,"name":"replace","transplant":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"variableMap":{"rawLine":"test"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String substring = string.substring(index, (index + (test.length())))","position":"org.apache.commons.codec.language.Metaphone:364","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = string.substring(index, (index + (test.length())))"},"status":-1},{"failures":[],"tindex":"7700c33c-16e1-11e6-992f-7395eefd7654","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.this.encodeBlanks = b","position":"org.apache.commons.codec.net.QCodec:356","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.QCodec.this.boolean = b"},"variableMap":{"b":"result","encodeBlanks":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:878","type":"CtAssignmentImpl","sourcecode":"result = true"},"status":-3},{"failures":[],"tindex":"7700c33d-16e1-11e6-992f-fd64c6b6185b","series":0,"name":"replace","transplant":{"toString":"return ls.equals(org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES) ? org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE : ls","position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls"},"variableMap":{"ls":"other","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"other","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"other"},"type":"adrStmt","transplantationPoint":{"toString":"return other","position":"org.apache.commons.codec.language.bm.Languages:239","type":"CtReturnImpl","sourcecode":"return other"},"status":-3},{"failures":[],"tindex":"7700ea4e-16e1-11e6-992f-3d14e5078106","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.EOF","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:733","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[20],"tindex":"7700ea4f-16e1-11e6-992f-9573c5095003","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.RFC1522Codec:127","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[21,22,23,24,25],"tindex":"77011160-16e1-11e6-992f-c913545c5c5c","series":0,"name":"replace","transplant":{"toString":"result.append('P')","position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:302","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"77011161-16e1-11e6-992f-4b60b1b43196","series":0,"name":"add","transplant":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"77011162-16e1-11e6-992f-116284581a33","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> rules : ruleMap.values()) {\n    allRules.addAll(rules);\n}","position":"org.apache.commons.codec.language.bm.Rule:302","type":"CtForEachImpl","sourcecode":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n    allRules.addAll(rules);\n}"},"status":-2},{"failures":[24,25],"tindex":"77013873-16e1-11e6-992f-9bf4b2410d6a","series":0,"name":"replace","transplant":{"toString":"cp = 0","position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"variableMap":{"cp":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:424","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[26,27,28],"tindex":"77013874-16e1-11e6-992f-fff91f37c2ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"b\", \"p\")","position":"org.apache.commons.codec.language.Caverphone2:87","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"status":-1},{"failures":[],"tindex":"77013875-16e1-11e6-992f-6b6fd1274e9a","series":0,"name":"add","transplant":{"toString":"return 0","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return value","position":"org.apache.commons.codec.digest.UnixCrypt:389","type":"CtReturnImpl","sourcecode":"return value"},"status":-2},{"failures":[29,30],"tindex":"77013876-16e1-11e6-992f-85dcf7ba536b","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.binary.BaseNCodec:501","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[31,32,33,34,35],"tindex":"77015f87-16e1-11e6-992f-d1941141eddd","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sBuf.toString()","position":"org.apache.commons.codec.language.RefinedSoundex:203","type":"CtReturnImpl","sourcecode":"return sBuf.toString()"},"status":-1},{"failures":[],"tindex":"77015f88-16e1-11e6-992f-7bde754da3be","series":0,"name":"replace","transplant":{"toString":"c = (c >>> 2) | (c << 26)","position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 2) | (c << 26)"},"variableMap":{"c":"sumLength"},"type":"adrStmt","transplantationPoint":{"toString":"minRating = getMinRating(sumLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"minRating = getMinRating(sumLength)"},"status":-2},{"failures":[],"tindex":"77015f89-16e1-11e6-992f-7539565adbc4","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"data","raw":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:547","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data)"},"status":-3},{"failures":[36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"7701869a-16e1-11e6-992f-0118439fe8f5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))"},"variableMap":{"valueToDigest":"key","key":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.UTF_8), salt)","position":"org.apache.commons.codec.digest.Crypt:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt)"},"status":-1},{"failures":[],"tindex":"7701869b-16e1-11e6-992f-df68e1e82876","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.Metaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:428","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Metaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:718","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"7701adac-16e1-11e6-992f-99225c1f237f","series":0,"name":"replace","transplant":{"toString":"this.maxLength = maxLength","position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"variableMap":{"maxLength":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:639","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1"},"status":-2},{"failures":[],"tindex":"77061a7d-16e1-11e6-992f-95a577db82de","series":0,"name":"add","transplant":{"toString":"if ((binaryData == null) || ((binaryData.length) == 0)) {\n    return binaryData;\n} ","position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((binaryData == null) || ((binaryData.int) == 0)) {\n    return binaryData;\n} "},"variableMap":{"binaryData":"pArray","length":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if ((pArray == null) || ((pArray.length) == 0)) {\n    return pArray;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:426","type":"CtIfImpl","sourcecode":"if ((pArray == null) || ((pArray.int) == 0)) {\n    return pArray;\n} "},"status":-2},{"failures":[],"tindex":"77061a7e-16e1-11e6-992f-47f1b783d650","series":0,"name":"replace","transplant":{"toString":"name = getFirst3Last3(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"name = getFirst3Last3(name)"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[aeiou]\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:91","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-2},{"failures":[],"tindex":"77061a7f-16e1-11e6-992f-efcb3ef0af3e","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"g\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:91","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"g\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"3gh3\", \"3kh3\")","position":"org.apache.commons.codec.language.Caverphone1:89","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3gh3\", \"3kh3\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":29,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
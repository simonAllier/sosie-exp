{"failureDictionary":{"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":1,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":61,"org.apache.commons.codec.language.NysiisTest.testSnat":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":50,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":72,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":81,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":49,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":9,"org.apache.commons.codec.language.NysiisTest.testDropBy":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":7,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":55,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":17,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":10,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":35,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":80,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":14,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":26,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":29,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":53,"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull":54,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":42,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":79,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":12,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":85,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":23,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":75,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":74,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":21,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":76,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":30,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":65,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":4,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":60,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":63,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":33,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":62,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":69,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":73,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":66,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":0,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":70,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":27,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":78,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":83,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":46,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":44,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":56,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":47,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":84,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":82,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":57,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":52,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":59},"transformations":[{"failures":[],"tindex":"2fc07a03-1222-11e6-9394-1764916f33aa","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base64:449","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"ibitWorkArea","pos":"ibitWorkArea","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[0],"tindex":"2fc0a114-1222-11e6-9394-1f93d7216d2f","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('F')","position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:474","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"2fc0a115-1222-11e6-9394-85c704078b54","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.stringEncoder = null","position":"org.apache.commons.codec.StringEncoderComparator:48","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = null"},"status":-2},{"failures":[],"tindex":"2fc0c826-1222-11e6-9394-895cec2f2cd0","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"j\", \"y\")","position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_DT_ETC.matcher(str).replaceFirst(\"D\")","position":"org.apache.commons.codec.language.Nysiis:270","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"D\")"},"status":-2},{"failures":[],"tindex":"2fc0c827-1222-11e6-9394-9da997a4c6c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (r == 0) {\n    r = read(singleByte, 0, 1);\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:98","type":"CtWhileImpl","sourcecode":"while (r == 0) {\n    r = read(byte[], 0, 1);\n}"},"status":0},{"failures":[0],"tindex":"2fc0c828-1222-11e6-9394-39f1d4ff2381","series":0,"name":"replace","transplant":{"toString":"d &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:621","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[1,2,3],"tindex":"2fc0ef39-1222-11e6-9394-233482e4e1f6","series":0,"name":"add","transplant":{"toString":"name1Char[i] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"name1Char[i] = ' '"},"variableMap":{"name1Char":"l_ascii","i":"bits"},"type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"status":-1},{"failures":[],"tindex":"2fc0ef3a-1222-11e6-9394-23da4e6265fa","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"variableMap":{"concat":"strict"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.strict","position":"org.apache.commons.codec.language.Nysiis:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.boolean"},"status":-2},{"failures":[],"tindex":"2fc1164b-1222-11e6-9394-2791f6871033","series":0,"name":"replace","transplant":{"toString":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"text","firstLetter":"text"},"type":"adrStmt","transplantationPoint":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"2fc1164c-1222-11e6-9394-0db9ab47b4c6","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"replacement"},"type":"adrStmt","transplantationPoint":{"toString":"lastReplacement = replacement","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = replacement"},"status":-2},{"failures":[],"tindex":"2fc1164d-1222-11e6-9394-45c4728a3d69","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern p = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher m = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","salt":"line","prefix":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}","position":"org.apache.commons.codec.language.bm.Languages:183","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}"},"status":-2},{"failures":[],"tindex":"2fc13d5e-1222-11e6-9394-df89f272c392","series":0,"name":"add","transplant":{"toString":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (pad)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:465","type":"CtIfImpl","sourcecode":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} "},"variableMap":{"pad":"pad","arrayOctet":"arrayOctet","allowWSPad":"allowWSPad","i":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (arrayOctet.length) ; i++) {\n    if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (pad)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.binary.BaseNCodec:464","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n    if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n        return false;\n    } \n}"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"2fc1646f-1222-11e6-9394-8de9f780a989","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} ","position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-1},{"failures":[],"tindex":"2fc16470-1222-11e6-9394-5f3e633c1f8f","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:554","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}"},"status":-2},{"failures":[30],"tindex":"2fc18b81-1222-11e6-9394-d344d447563d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"hasUnderscores = true","position":"org.apache.commons.codec.net.QCodec:176","type":"CtAssignmentImpl","sourcecode":"hasUnderscores = true"},"status":-1},{"failures":[],"tindex":"2fc18b82-1222-11e6-9394-777e30f9cef1","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.QCodec:209","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"2fc18b83-1222-11e6-9394-eb49e3dbb5b5","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"scanner.close()","position":"org.apache.commons.codec.language.bm.Lang:182","type":"CtInvocationImpl","sourcecode":"scanner.close()"},"status":-2},{"failures":[31,32,33],"tindex":"2fc1b294-1222-11e6-9394-1f46feb463df","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"status":-1},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"2fc1b295-1222-11e6-9394-31158d570ac1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(context.lbitWorkArea)) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:516","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[46,47,48,49,50,51],"tindex":"2fc1b296-1222-11e6-9394-2bc00908dd4b","series":0,"name":"add","transplant":{"toString":"nextBranches.clear()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"nextBranches.clear()"},"variableMap":{"nextBranches":"nextBranches"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String nextReplacement : replacements) {\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n    final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n    nextBranch.processNextReplacement(nextReplacement, force);\n    if (branching) {\n        nextBranches.add(nextBranch);\n    } else {\n        break;\n    }\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:523","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : replacements) {\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n    final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n    nextBranch.processNextReplacement(nextReplacement, force);\n    if (branching) {\n        nextBranches.add(nextBranch);\n    } else {\n        break;\n    }\n}"},"status":-1},{"failures":[],"tindex":"2fc1d9a7-1222-11e6-9394-6d0e432ca810","series":0,"name":"replace","transplant":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"org.apache.commons.codec.binary.Base64.MASK_6BITS","l_ascii":"encodeTable","bits":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))]","position":"org.apache.commons.codec.binary.Base64:389","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"2fc1d9a8-1222-11e6-9394-812d4000cba6","series":0,"name":"replace","transplant":{"toString":"final java.util.List<org.apache.commons.codec.language.bm.Rule> allRules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>()","position":"org.apache.commons.codec.language.bm.Rule:301","type":"CtLocalVariableImpl","sourcecode":"final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey)","position":"org.apache.commons.codec.language.bm.Rule:473","type":"CtLocalVariableImpl","sourcecode":"java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey)"},"status":-2},{"failures":[52,53],"tindex":"2fc200b9-1222-11e6-9394-5d1d36cccdb2","series":0,"name":"add","transplant":{"toString":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'M') {\n    return true;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:844","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'M') {\n    return true;\n} "},"status":-1},{"failures":[],"tindex":"2fc200ba-1222-11e6-9394-c5840534beda","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int index = 0 ; index < (input.length()) ; index++) {\n    final char ch = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String inputContext = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = org.apache.commons.codec.language.DaitchMokotoffSoundex.RULES.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> nextBranches = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.EMPTY_LIST;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean branchingRequired = ((replacements.length) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n                for (final java.lang.String nextReplacement : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:496","type":"CtForImpl","sourcecode":"for (int int = 0 ; index < (input.length()) ; index++) {\n    final char char = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String java.lang.String = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean boolean = ((replacements.int) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                for (final java.lang.String java.lang.String : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}"},"status":-2},{"failures":[26,27,28,29],"tindex":"2fc275eb-1222-11e6-9394-4d39d9914969","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[30],"tindex":"2fc275ec-1222-11e6-9394-3934c187dee3","series":0,"name":"replace","transplant":{"toString":"b[8] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"b[8] = 0"},"variableMap":{"b":"data"},"type":"adrStmt","transplantationPoint":{"toString":"data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE","position":"org.apache.commons.codec.net.QCodec:161","type":"CtAssignmentImpl","sourcecode":"data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":-1},{"failures":[],"tindex":"2fc275ed-1222-11e6-9394-477bf70a2fe5","series":0,"name":"replace","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}","position":"org.apache.commons.codec.net.URLCodec:335","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"2fc29cfe-1222-11e6-9394-e99129a46de2","series":0,"name":"replace","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = new byte[org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH]","position":"org.apache.commons.codec.digest.DigestUtils:793","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int]"},"status":-2},{"failures":[],"tindex":"2fc29cff-1222-11e6-9394-2fe59ce5d550","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:807","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"2fc29d00-1222-11e6-9394-ffb5086946e4","series":0,"name":"add","transplant":{"toString":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:339","type":"CtWhileImpl","sourcecode":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"y","sBytes":"b","tempResult":"b","saltLen":"i","cp":"u"},"type":"adrStmt","transplantationPoint":{"toString":"for ( ; i < 13 ; i++) {\n    int j = 0;\n    int c = 0;\n    for ( ; j < 6 ; j++) {\n        c <<= 1;\n        if (((b[y]) & u) != 0) {\n            c |= 1;\n        } \n        u >>>= 1;\n        if (u == 0) {\n            y++;\n            u = 128;\n        } \n        buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.COV2CHAR[c])));\n    }\n}","position":"org.apache.commons.codec.digest.UnixCrypt:234","type":"CtForImpl","sourcecode":"for ( ; i < 13 ; i++) {\n    int int = 0;\n    int int = 0;\n    for ( ; j < 6 ; j++) {\n        c <<= 1;\n        if (((b[y]) & u) != 0) {\n            c |= 1;\n        } \n        u >>>= 1;\n        if (u == 0) {\n            y++;\n            u = 128;\n        } \n        buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n    }\n}"},"status":-2},{"failures":[],"tindex":"2fc29d01-1222-11e6-9394-83d3cdd6fd5e","series":0,"name":"add","transplant":{"toString":"d = (d >>> 1) | (d << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:629","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1"},"status":-2},{"failures":[],"tindex":"2fc2c412-1222-11e6-9394-399119db913b","series":0,"name":"replace","transplant":{"toString":"this.chunkSeparatorLength = chunkSeparatorLength","position":"org.apache.commons.codec.binary.BaseNCodec:210","type":"CtAssignmentImpl","sourcecode":"this.int = chunkSeparatorLength"},"variableMap":{"chunkSeparatorLength":"to"},"type":"adrStmt","transplantationPoint":{"toString":"from = to + 1","position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"status":-2},{"failures":[],"tindex":"2fc2c413-1222-11e6-9394-b7ed7ee6b290","series":0,"name":"add","transplant":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte[] buffer = ensureBufferSize(encodeSize, context);\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK);\n    int b = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.ibitWorkArea = ((context.ibitWorkArea) << 8) + b;\n    if (0 == (context.modulus)) {\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 18) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 12) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[((context.ibitWorkArea) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        context.currentLinePos += org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n        if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n            java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n            context.pos += lineSeparator.length;\n            context.currentLinePos = 0;\n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base64:378","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    int int = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.int = ((context.int) << 8) + b;\n    if (0 == (context.int)) {\n        buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        if (((int) > 0) && ((int) <= (context.int))) {\n            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n            context.int += byte[].int;\n            context.int = 0;\n        } \n    } \n}"},"variableMap":{"currentLinePos":"readPos","encodeTable":"buffer","inAvail":"readPos","in":"buffer","length":"pos","org.apache.commons.codec.binary.Base64.MASK_6BITS":"readPos","lineSeparator":"buffer","org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK":"readPos","lineLength":"pos","org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"readPos","ibitWorkArea":"pos","encodeSize":"readPos","inPos":"pos","pos":"pos","context":"context","modulus":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"if ((context.readPos) >= (context.pos)) {\n    context.buffer = null;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:296","type":"CtIfImpl","sourcecode":"if ((context.int) >= (context.int)) {\n    context.byte[] = null;\n} "},"status":-2},{"failures":[],"tindex":"2fc2eb24-1222-11e6-9394-0d281978c745","series":0,"name":"replace","transplant":{"toString":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n        this.lineSeparator = new byte[lineSeparator.length];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n    } else {\n        this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n        this.lineSeparator = null;\n    }\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:278","type":"CtIfImpl","sourcecode":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n        this.byte[] = new byte[lineSeparator.int];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n    } else {\n        this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        this.byte[] = null;\n    }\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"i","encodeSize":"i","length":"i","lineSeparator":"tmp","lineLength":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n}","position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n}"},"status":-3},{"failures":[],"tindex":"2fc31235-1222-11e6-9394-b54e0e88d9d0","series":0,"name":"add","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int pos = 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[],"tindex":"2fc31236-1222-11e6-9394-3f2455fcb694","series":0,"name":"replace","transplant":{"toString":"key.deleteCharAt(((key.length()) - 1))","position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"variableMap":{"key":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", lcon='\").append(lCon).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:466","type":"CtInvocationImpl","sourcecode":"sb.append(\", lcon='\").append(lCon).append('\\'')"},"status":-2},{"failures":[5,9,10,13,26,27,28,29],"tindex":"2fc31237-1222-11e6-9394-8323b3aa61ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"subBuilder.append(phonemeText.subSequence(i, (i + 1)))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:353","type":"CtInvocationImpl","sourcecode":"subBuilder.append(phonemeText.subSequence(i, (i + 1)))"},"status":-1},{"failures":[50],"tindex":"2fc31238-1222-11e6-9394-f3365561ab71","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((builder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n    builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length());\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:141","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n} "},"status":-1},{"failures":[54],"tindex":"2fc31239-1222-11e6-9394-43676d37d428","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:270","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"2fc3123a-1222-11e6-9394-4fe155e70bc2","series":0,"name":"replace","transplant":{"toString":"hard = true","position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"variableMap":{"hard":"roundsCustom"},"type":"adrStmt","transplantationPoint":{"toString":"roundsCustom = true","position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"roundsCustom = true"},"status":-3},{"failures":[],"tindex":"2fc3394b-1222-11e6-9394-b5878580d9e5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384, key)","position":"org.apache.commons.codec.digest.HmacUtils:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"2fc3394c-1222-11e6-9394-67066e96bc79","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte[] buffer = ensureBufferSize(encodeSize, context);\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK);\n    int b = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.lbitWorkArea = ((context.lbitWorkArea) << 8) + b;\n    if (0 == (context.modulus)) {\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 30))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 25))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 20))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 15))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 5))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(context.lbitWorkArea)) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        context.currentLinePos += org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n        if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n            java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n            context.pos += lineSeparator.length;\n            context.currentLinePos = 0;\n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base32:500","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n    int int = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.long = ((context.long) << 8) + b;\n    if (0 == (context.int)) {\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n        if (((int) > 0) && ((int) <= (context.int))) {\n            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n            context.int += byte[].int;\n            context.int = 0;\n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"2fc3605d-1222-11e6-9394-f125ce57cefa","series":0,"name":"add","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.RFC1522Codec:105","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"2fc3605e-1222-11e6-9394-c3a716d809fc","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder = phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:185","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = phonemeBuilder"},"variableMap":{"phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"phonemeBuilder = rulesApplication.getPhonemeBuilder()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:473","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = rulesApplication.getPhonemeBuilder()"},"status":-2},{"failures":[],"tindex":"2fc471cf-1222-11e6-9394-7dddde5f49b7","series":0,"name":"replace","transplant":{"toString":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"index","minRating":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:682","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-3},{"failures":[],"tindex":"2fc471d0-1222-11e6-9394-61b4c6625dea","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-2},{"failures":[],"tindex":"2fc498e1-1222-11e6-9394-d58fd1e054ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AEIJOUY, chr)) {\n    code = '0';\n} else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n    if (lastCode == '/') {\n        continue;\n    } \n    code = '-';\n} else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n    code = '1';\n} else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SCZ, nextChar)))) {\n    code = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.WFPV, chr)) {\n    code = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.GKQ, chr)) {\n    code = '4';\n} else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.CKQ, lastChar)))) {\n    code = '4';\n    input.addLeft('S');\n    rightLength++;\n} else if ((chr == 'S') || (chr == 'Z')) {\n    code = '8';\n} else if (chr == 'C') {\n    if (lastCode == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n            code = '4';\n        } else {\n            code = '8';\n        }\n    } else {\n        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n            code = '8';\n        } else {\n            code = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.TDX, chr)) {\n    code = '8';\n} else if (chr == 'R') {\n    code = '7';\n} else if (chr == 'L') {\n    code = '5';\n} else if ((chr == 'M') || (chr == 'N')) {\n    code = '6';\n} else {\n    code = chr;\n}","position":"org.apache.commons.codec.language.ColognePhonetic:347","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '0';\n} else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n    if (lastCode == '/') {\n        continue;\n    } \n    code = '-';\n} else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n    code = '1';\n} else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '4';\n} else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n    code = '4';\n    input.addLeft('S');\n    rightLength++;\n} else if ((chr == 'S') || (chr == 'Z')) {\n    code = '8';\n} else if (chr == 'C') {\n    if (lastCode == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n            code = '4';\n        } else {\n            code = '8';\n        }\n    } else {\n        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n            code = '8';\n        } else {\n            code = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '8';\n} else if (chr == 'R') {\n    code = '7';\n} else if (chr == 'L') {\n    code = '5';\n} else if ((chr == 'M') || (chr == 'N')) {\n    code = '6';\n} else {\n    code = chr;\n}"},"status":-2},{"failures":[],"tindex":"2fc4bff2-1222-11e6-9394-6ba9d34f1ba8","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)","position":"org.apache.commons.codec.digest.DigestUtils:334","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"variableMap":{"data":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)","position":"org.apache.commons.codec.binary.BinaryCodec:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)"},"status":-2},{"failures":[26,27,28,29],"tindex":"2fc4bff3-1222-11e6-9394-dfa7f6d6f261","series":0,"name":"replace","transplant":{"toString":"if ((prefix.length()) > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:601","type":"CtIfImpl","sourcecode":"if ((prefix.length()) > (input.length())) {\n    return false;\n} "},"variableMap":{"input":"prefix","prefix":"prefix"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:604","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":"2fc4bff4-1222-11e6-9394-53c0ada1d3d3","series":0,"name":"replace","transplant":{"toString":"return newData","position":"org.apache.commons.codec.language.ColognePhonetic:262","type":"CtReturnImpl","sourcecode":"return newData"},"variableMap":{"newData":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_N","position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":0},{"failures":[],"tindex":"2fc4bff5-1222-11e6-9394-7df63afe8975","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n    } \n}","position":"org.apache.commons.codec.binary.BinaryCodec:209","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n    } \n}"},"status":-2},{"failures":[],"tindex":"2fc4e706-1222-11e6-9394-4528e70dd2da","series":0,"name":"add","transplant":{"toString":"if ((pArray == null) || ((pArray.length) == 0)) {\n    return pArray;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:406","type":"CtIfImpl","sourcecode":"if ((pArray == null) || ((pArray.int) == 0)) {\n    return pArray;\n} "},"variableMap":{"pArray":"bytes","length":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if (hasUnderscores) {\n    final byte[] tmp = new byte[bytes.length];\n    for (int i = 0 ; i < (bytes.length) ; i++) {\n        final byte b = bytes[i];\n        if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n            tmp[i] = b;\n        } else {\n            tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n        }\n    }\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n} ","position":"org.apache.commons.codec.net.QCodec:180","type":"CtIfImpl","sourcecode":"if (hasUnderscores) {\n    final byte[] byte[] = new byte[bytes.int];\n    for (int int = 0 ; i < (bytes.int) ; i++) {\n        final byte byte = bytes[i];\n        if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n            tmp[i] = b;\n        } else {\n            tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n        }\n    }\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n} "},"status":-2},{"failures":[],"tindex":"2fc4e707-1222-11e6-9394-3b8d36a2ea96","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"w$\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:108","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w$\", \"3\")"},"status":0},{"failures":[],"tindex":"2fc4e708-1222-11e6-9394-f1dfa2b43c51","series":0,"name":"add","transplant":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"text"},"type":"adrStmt","transplantationPoint":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[46,47,48,49,50,55,56,57,51,58,59,60,61],"tindex":"2fc4e709-1222-11e6-9394-553dfe1930da","series":0,"name":"replace","transplant":{"toString":"java.lang.String replacedName = name.toUpperCase()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"variableMap":{"name":"rawLine"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:258","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"status":-1},{"failures":[62],"tindex":"2fc4e70a-1222-11e6-9394-4dcc4e932acd","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"w$\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:108","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w$\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"r$\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r$\", \"3\")"},"status":-1},{"failures":[63,64,65,66,67,68,69,70],"tindex":"2fc50e1b-1222-11e6-9394-690b690bec4f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n    output.addRight(code);\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:394","type":"CtIfImpl","sourcecode":"if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n    output.addRight(code);\n} "},"status":-1},{"failures":[],"tindex":"2fc50e1c-1222-11e6-9394-0ba14a0c50be","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int left = 0","position":"org.apache.commons.codec.digest.UnixCrypt:282","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"2fc50e1d-1222-11e6-9394-179a28f12f9c","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e)","position":"org.apache.commons.codec.binary.StringUtils:286","type":"CtThrowImpl","sourcecode":"throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e)"},"status":-2},{"failures":[],"tindex":"2fc50e1e-1222-11e6-9394-5560bb8f6f78","series":0,"name":"replace","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"byte[] finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:220","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = ctx1.digest()"},"status":-2},{"failures":[],"tindex":"2fc50e1f-1222-11e6-9394-594a5909c7b5","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (str.length()) ; i++) {\n    current = getMappingCode(str.charAt(i));\n    if (current == last) {\n        continue;\n    } else if (current != 0) {\n        sBuf.append(current);\n    } \n    last = current;\n}","position":"org.apache.commons.codec.language.RefinedSoundex:190","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (str.length()) ; i++) {\n    current = getMappingCode(str.charAt(i));\n    if (current == last) {\n        continue;\n    } else if (current != 0) {\n        sBuf.append(current);\n    } \n    last = current;\n}"},"status":-2},{"failures":[12],"tindex":"2fc53530-1222-11e6-9394-6340b3d2b7ff","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.languages.size()) == 1","position":"org.apache.commons.codec.language.bm.Languages:111","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.size()) == 1"},"status":-1},{"failures":[71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"2fc53531-1222-11e6-9394-4f4bdbddc3e6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) {\n    continue;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:362","type":"CtIfImpl","sourcecode":"if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"2fc53532-1222-11e6-9394-b7ee9030a578","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256, key)","position":"org.apache.commons.codec.digest.HmacUtils:99","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"2fc53533-1222-11e6-9394-d52d5f45b938","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.encodeSize = (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base32:290","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.int = (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n    this.byte[] = null;\n}"},"status":-2},{"failures":[],"tindex":"2fc55c44-1222-11e6-9394-a96509f72c8a","series":0,"name":"replace","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"left"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)","position":"org.apache.commons.codec.digest.UnixCrypt:302","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)"},"status":-2},{"failures":[34,35,36,37,38,39,83,40,41,42,43,44,45],"tindex":"2fc55c45-1222-11e6-9394-e55c8f760f67","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n    context.currentLinePos = 0;\n} ","position":"org.apache.commons.codec.binary.Base32:518","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-1},{"failures":[],"tindex":"2fc55c46-1222-11e6-9394-e368e6793eea","series":0,"name":"replace","transplant":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"incl"},"type":"adrStmt","transplantationPoint":{"toString":"lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)))","position":"org.apache.commons.codec.language.bm.Rule:440","type":"CtInvocationImpl","sourcecode":"lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)))"},"status":-2},{"failures":[],"tindex":"2fc58357-1222-11e6-9394-35c3406ce546","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.RefinedSoundex:90","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[],"tindex":"2fc58358-1222-11e6-9394-43736b77e112","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Rule:284","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[84,85],"tindex":"2fc58359-1222-11e6-9394-d9426de1be51","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":-1},{"failures":[],"tindex":"2fc5835a-1222-11e6-9394-9969aff2e88a","series":0,"name":"replace","transplant":{"toString":"return metaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Metaphone:392","type":"CtReturnImpl","sourcecode":"return metaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:417","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"2fc5835b-1222-11e6-9394-51a7c5e87bcb","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:389","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data)"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:659","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal()"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":73,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":136,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":116,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":92,"org.apache.commons.codec.language.NysiisTest.testSnat":50,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":99,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":129,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":161,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":124,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":25,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":134,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":140,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":24,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":43,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":97,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":85,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":81,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":57,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":13,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":29,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":11,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":87,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":100,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":165,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":107,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":145,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":147,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":26,"org.apache.commons.codec.language.NysiisTest.testCap":44,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":135,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":109,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":95,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":8,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":150,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":132,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":137,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":153,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":162,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":163,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":61,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":131,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":123,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":41,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":12,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":65,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":158,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":115,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":69,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":151,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":117,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":138,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":84,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":64,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":105,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":159,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":130,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":110,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":164,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":78,"org.apache.commons.codec.language.NysiisTest.testTranan":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":103,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":160,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":106,"org.apache.commons.codec.language.NysiisTest.testFal":47,"org.apache.commons.codec.language.NysiisTest.testSnad":49,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":155,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":119,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":148,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":79,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":33,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":152,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":7,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":18,"org.apache.commons.codec.language.NysiisTest.testDropBy":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":114,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":59,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":94,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":121,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":154,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":20,"org.apache.commons.codec.binary.Base64Test.testConstructors":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":166,"org.apache.commons.codec.language.NysiisTest.testRule7":144,"org.apache.commons.codec.language.NysiisTest.testRule6":143,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":167,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":38,"org.apache.commons.codec.language.NysiisTest.testRule5":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":82,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":118,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":149,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":128,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":51,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":113,"org.apache.commons.codec.language.NysiisTest.testBran":48,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":55,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":156,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":60,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":83,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":157,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":126,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":169,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":90,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":22,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":112,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":35,"org.apache.commons.codec.language.NysiisTest.testDad":45,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":133,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":141,"org.apache.commons.codec.language.NysiisTest.testOthers":53,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":125,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":70,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":42,"org.apache.commons.codec.language.NysiisTest.testDan":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":101,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":168,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":104,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":127,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":17,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":122,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":73,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":120,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":108,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":58},"transformations":[{"failures":[0,1],"tindex":"b6e66e56-16e7-11e6-9111-dbde956424ee","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.SPTRANS[1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[6][((u >>> 24) & 63)])","position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-1},{"failures":[],"tindex":"b6e6bc77-16e7-11e6-9111-851d878e57f9","series":0,"name":"replace","transplant":{"toString":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} ","position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"variableMap":{"cmtI":"i","line":"es1"},"type":"adrStmt","transplantationPoint":{"toString":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} "},"status":-2},{"failures":[],"tindex":"b6e6bc78-16e7-11e6-9111-dd96defed7ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"j\", \"y\")","position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":0},{"failures":[],"tindex":"b6e6bc79-16e7-11e6-9111-67940713d630","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 5))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:515","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:514","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-3},{"failures":[],"tindex":"b6e6e38a-16e7-11e6-9111-e982fe662229","series":0,"name":"add","transplant":{"toString":"final char c = charAt(value, (index + 2))","position":"org.apache.commons.codec.language.DoubleMetaphone:791","type":"CtLocalVariableImpl","sourcecode":"final char char = charAt(value, (index + 2))"},"variableMap":{"index":"index","value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"final char hwChar = str.charAt((index - 1))","position":"org.apache.commons.codec.language.Soundex:188","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 1))"},"status":-2},{"failures":[],"tindex":"b6e6e38b-16e7-11e6-9111-e3b87957b92e","series":0,"name":"replace","transplant":{"toString":"lastCode = code","position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"lastCode = code"},"variableMap":{"code":"code","lastCode":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:353","type":"CtAssignmentImpl","sourcecode":"code = '-'"},"status":-2},{"failures":[],"tindex":"b6e70a9c-16e7-11e6-9111-7dacb3b30ec9","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:510","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"variableMap":{"valueToDigest":"source","key":"source"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone.this.encoder.encode(source)","position":"org.apache.commons.codec.language.Caverphone:58","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source)"},"status":0},{"failures":[2,3],"tindex":"b6e70a9d-16e7-11e6-9111-df0ca8258baf","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.binary.BaseNCodec:501","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[4,5,6],"tindex":"b6e70a9e-16e7-11e6-9111-23d1a25184f8","series":0,"name":"replace","transplant":{"toString":"return value","position":"org.apache.commons.codec.digest.UnixCrypt:389","type":"CtReturnImpl","sourcecode":"return value"},"variableMap":{"value":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:377","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-1},{"failures":[7,8],"tindex":"b6e731af-16e7-11e6-9111-4b00364a15c5","series":0,"name":"replace","transplant":{"toString":"name2 = cleanName(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:226","type":"CtAssignmentImpl","sourcecode":"name2 = cleanName(name2)"},"variableMap":{"name2":"name2RtLEnd"},"type":"adrStmt","transplantationPoint":{"toString":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:316","type":"CtAssignmentImpl","sourcecode":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))"},"status":-1},{"failures":[9],"tindex":"b6e731b0-16e7-11e6-9111-ebb2cdd665b7","series":0,"name":"replace","transplant":{"toString":"return 0","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"status":-1},{"failures":[],"tindex":"b6e731b1-16e7-11e6-9111-67ae1db9c7f6","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int b = c","position":"org.apache.commons.codec.net.QuotedPrintableCodec:325","type":"CtLocalVariableImpl","sourcecode":"int int = c"},"status":-2},{"failures":[4,5,10],"tindex":"b6e758c2-16e7-11e6-9111-9fda87319ba2","series":0,"name":"replace","transplant":{"toString":"a ^= t << n","position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"variableMap":{"a":"index","t":"index","n":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:682","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[],"tindex":"b6e758c3-16e7-11e6-9111-6728607fe86f","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('|')","position":"org.apache.commons.codec.net.QCodec:101","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('|')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('(')","position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"status":0},{"failures":[],"tindex":"b6e758c4-16e7-11e6-9111-b7e0c946e415","series":0,"name":"replace","transplant":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24","position":"org.apache.commons.codec.digest.UnixCrypt:388","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24"},"variableMap":{"b":"b","offset":"offset","value":"readLen"},"type":"adrStmt","transplantationPoint":{"toString":"readLen = baseNCodec.readResults(b, offset, len, context)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:165","type":"CtAssignmentImpl","sourcecode":"readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"b6e77fd5-16e7-11e6-9111-d14eb5df0031","series":0,"name":"replace","transplant":{"toString":"final int value = b","position":"org.apache.commons.codec.digest.UnixCrypt:321","type":"CtLocalVariableImpl","sourcecode":"final int int = b"},"variableMap":{"b":"c"},"type":"adrStmt","transplantationPoint":{"toString":"int b = c","position":"org.apache.commons.codec.net.URLCodec:131","type":"CtLocalVariableImpl","sourcecode":"int int = c"},"status":-2},{"failures":[],"tindex":"b6e77fd6-16e7-11e6-9111-1b2f0dc3b380","series":0,"name":"add","transplant":{"toString":"cnt -= blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH","cnt":"read"},"type":"adrStmt","transplantationPoint":{"toString":"read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH)","position":"org.apache.commons.codec.digest.HmacUtils:771","type":"CtAssignmentImpl","sourcecode":"read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int)"},"status":0},{"failures":[],"tindex":"b6e7a6e7-16e7-11e6-9111-f7986611c1f5","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"singleByte"},"type":"adrStmt","transplantationPoint":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"status":-2},{"failures":[],"tindex":"b6e7a6e8-16e7-11e6-9111-4341c8a691a4","series":0,"name":"add","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.toString()","position":"org.apache.commons.codec.language.DoubleMetaphone:997","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.toString()"},"status":-2},{"failures":[],"tindex":"b6e7a6e9-16e7-11e6-9111-ff71ec969871","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(',')","position":"org.apache.commons.codec.net.QCodec:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(',')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(']')","position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"status":0},{"failures":[],"tindex":"b6e7cdfa-16e7-11e6-9111-d95565ebd33b","series":0,"name":"add","transplant":{"toString":"if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n    code.append('K');\n} else {\n    code.append('X');\n}","position":"org.apache.commons.codec.language.Metaphone:194","type":"CtIfImpl","sourcecode":"if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n    code.append('K');\n} else {\n    code.append('X');\n}"},"variableMap":{"wdsz":"length","code":"sb","n":"length","local":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String branch : branches) {\n    sb.append(branch);\n    if ((++index) < (branches.length)) {\n        sb.append('|');\n    } \n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:466","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : branches) {\n    sb.append(branch);\n    if ((++index) < (branches.int)) {\n        sb.append('|');\n    } \n}"},"status":-2},{"failures":[],"tindex":"b6e7cdfb-16e7-11e6-9111-2b26b0fabd03","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"z\", \"s\")","position":"org.apache.commons.codec.language.Caverphone2:89","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"z\", \"s\")"},"status":0},{"failures":[4,5,6,10],"tindex":"b6e7f50c-16e7-11e6-9111-c7e50c05a6a6","series":0,"name":"replace","transplant":{"toString":"result.append('H')","position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:458","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"b6e7f50d-16e7-11e6-9111-1fe95d024027","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder sb = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:356","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"tindex":"b6e7f50e-16e7-11e6-9111-c9171aa08344","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"str = str.substring(1)","position":"org.apache.commons.codec.language.bm.Rule:614","type":"CtAssignmentImpl","sourcecode":"str = str.substring(1)"},"status":-1},{"failures":[29,30,31,32,33,34,35,36],"tindex":"b6e81c1f-16e7-11e6-9111-23aaff0600ad","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} "},"status":-1},{"failures":[37,38,39],"tindex":"b6e81c20-16e7-11e6-9111-25529ec646df","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('}')","position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:97","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"b6e81c21-16e7-11e6-9111-a76bf045a2d9","series":0,"name":"replace","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"org.apache.commons.codec.net.RFC1522Codec.POSTFIX"},"type":"adrStmt","transplantationPoint":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"status":-2},{"failures":[],"tindex":"b6e84332-16e7-11e6-9111-2d64014365f8","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Caverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return doubleMetaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DoubleMetaphone:206","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(((java.lang.String)(obj)))"},"status":-2},{"failures":[40,41],"tindex":"b6e84333-16e7-11e6-9111-49332683653e","series":0,"name":"replace","transplant":{"toString":"code = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:353","type":"CtAssignmentImpl","sourcecode":"code = '-'"},"variableMap":{"code":"chr"},"type":"adrStmt","transplantationPoint":{"toString":"lastChar = chr","position":"org.apache.commons.codec.language.ColognePhonetic:398","type":"CtAssignmentImpl","sourcecode":"lastChar = chr"},"status":-1},{"failures":[],"tindex":"b6e84334-16e7-11e6-9111-7f6de033a333","series":0,"name":"add","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"length","tempResult":"data","pBytes":"data","cp":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.net.QCodec.this.encodeBlanks) {\n    for (int i = 0 ; i < (data.length) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n            data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n        } \n    }\n} ","position":"org.apache.commons.codec.net.QCodec:158","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.net.QCodec.this.boolean) {\n    for (int int = 0 ; i < (data.int) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n            data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"b6e86a45-16e7-11e6-9111-87080fd0aca2","series":0,"name":"replace","transplant":{"toString":"bitlen = ((bitlen + 7) >> 3) << 3","position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"bitlen = ((bitlen + 7) >> 3) << 3"},"variableMap":{"bitlen":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = (t >>> 1) | (t << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"status":-2},{"failures":[],"tindex":"b6e86a46-16e7-11e6-9111-e905a3729187","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384, key)","position":"org.apache.commons.codec.digest.HmacUtils:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[11,12,13,14,9],"tindex":"b6e89157-16e7-11e6-9111-09591078565a","series":0,"name":"replace","transplant":{"toString":"if ((o1.phonemeText.length()) < (o2.phonemeText.length())) {\n    return -1;\n} ","position":"org.apache.commons.codec.language.bm.Rule:98","type":"CtIfImpl","sourcecode":"if ((o1.java.lang.StringBuilder.length()) < (o2.java.lang.StringBuilder.length())) {\n    return -1;\n} "},"variableMap":{"o1":"o2","o2":"o1","phonemeText":"phonemeText"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (o1.phonemeText.length()) ; i++) {\n    if (i >= (o2.phonemeText.length())) {\n        return +1;\n    } \n    final int c = (o1.phonemeText.charAt(i)) - (o2.phonemeText.charAt(i));\n    if (c != 0) {\n        return c;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:88","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (o1.java.lang.StringBuilder.length()) ; i++) {\n    if (i >= (o2.java.lang.StringBuilder.length())) {\n        return +1;\n    } \n    final int int = (o1.java.lang.StringBuilder.charAt(i)) - (o2.java.lang.StringBuilder.charAt(i));\n    if (c != 0) {\n        return c;\n    } \n}"},"status":-1},{"failures":[],"tindex":"b6e89158-16e7-11e6-9111-9da45f141985","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int index = ch - 'A'","position":"org.apache.commons.codec.language.Soundex:230","type":"CtLocalVariableImpl","sourcecode":"final int int = ch - 'A'"},"status":-2},{"failures":[],"tindex":"b6e89159-16e7-11e6-9111-49b77524adcb","series":0,"name":"add","transplant":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"variableMap":{"rawLine":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name1LtRStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:301","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55],"tindex":"b6e8915a-16e7-11e6-9111-95eabeb59399","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.length)","position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"status":-1},{"failures":[56],"tindex":"b6e8b86b-16e7-11e6-9111-bb2587439659","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:602","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"status":-1},{"failures":[57,58,59,60,61],"tindex":"b6e8b86c-16e7-11e6-9111-05e69501a778","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:217","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"b6e8b86d-16e7-11e6-9111-857fbe7174d9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"status":0},{"failures":[11,13,14],"tindex":"b6e8b86e-16e7-11e6-9111-4ba757c16919","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:223","type":"CtAssignmentImpl","sourcecode":"patternLength = 1"},"status":-1},{"failures":[30,31,32],"tindex":"b6e8b86f-16e7-11e6-9111-794b34e8eb5f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:484","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer)"},"status":-1},{"failures":[],"tindex":"b6e8b870-16e7-11e6-9111-3114006c0f04","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"c\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"status":0},{"failures":[],"tindex":"b6e8df81-16e7-11e6-9111-17fadb7c04b7","series":0,"name":"replace","transplant":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"variableMap":{"a":"pos","t":"currentLinePos","n":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += (context.pos) - savedPos","position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2},{"failures":[],"tindex":"b6e8df82-16e7-11e6-9111-752955296683","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^h\", \"A\")","position":"org.apache.commons.codec.language.Caverphone1:104","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^h\", \"A\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = str.substring(0, ((str.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"status":-2},{"failures":[],"tindex":"b6e8df83-16e7-11e6-9111-1d1a5272dd7f","series":0,"name":"replace","transplant":{"toString":"boxContent = boxContent.substring(1)","position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"boxContent = boxContent.substring(1)"},"variableMap":{"boxContent":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^tough\", \"tou2f\")","position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"status":-2},{"failures":[],"tindex":"b6e8df84-16e7-11e6-9111-49a5e26cce15","series":0,"name":"replace","transplant":{"toString":"c = (c >>> 2) | (c << 26)","position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 2) | (c << 26)"},"variableMap":{"c":"right"},"type":"adrStmt","transplantationPoint":{"toString":"right = (left >>> 1) | (left << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:296","type":"CtAssignmentImpl","sourcecode":"right = (left >>> 1) | (left << 31)"},"status":-2},{"failures":[],"tindex":"b6e90695-16e7-11e6-9111-6b48c28bf315","series":0,"name":"replace","transplant":{"toString":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.RADIX)) + \"): \") + b));\n} ","position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"variableMap":{"b":"org.apache.commons.codec.net.QuotedPrintableCodec.LF","org.apache.commons.codec.net.URLCodec.RADIX":"length","i":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < ((bytes.length) - 3) ; i++) {\n    int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)) {\n        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n        pos = 1;\n    }\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:286","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        pos = 1;\n    }\n}"},"status":-2},{"failures":[],"tindex":"b6e90696-16e7-11e6-9111-a90696657a88","series":0,"name":"replace","transplant":{"toString":"final java.lang.String firstThree = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:163","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)"},"variableMap":{"name":"name","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"nameLength"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String lastThree = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)), nameLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:164","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength)"},"status":-3},{"failures":[],"tindex":"b6e90697-16e7-11e6-9111-e33149187c49","series":0,"name":"add","transplant":{"toString":"java.util.Arrays.fill(finalb, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:503","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":0},{"failures":[29,30,31,32,33,34,35,36],"tindex":"b6e90698-16e7-11e6-9111-5d3504fd8748","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(keyBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:276","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"status":-1},{"failures":[4,5,62,6,10],"tindex":"b6e92da9-16e7-11e6-9111-7ddeb8c41a44","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}"},"status":-1},{"failures":[],"tindex":"b6e92daa-16e7-11e6-9111-7f034a1a9e57","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"k+\", \"K\")","position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"dc"},"type":"adrStmt","transplantationPoint":{"toString":"replacedName = replacedName.replace(dc, singleLetter)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:389","type":"CtAssignmentImpl","sourcecode":"replacedName = replacedName.replace(dc, singleLetter)"},"status":-2},{"failures":[63,64,65,66,67,68,69,70,71],"tindex":"b6e92dab-16e7-11e6-9111-d5390323f70c","series":0,"name":"replace","transplant":{"toString":"rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:317","type":"CtAssignmentImpl","sourcecode":"rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>()"},"variableMap":{"rules":"rules"},"type":"adrStmt","transplantationPoint":{"toString":"ruleMapping.put(patternKey, rules)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:318","type":"CtInvocationImpl","sourcecode":"ruleMapping.put(patternKey, rules)"},"status":-1},{"failures":[],"tindex":"b6e92dac-16e7-11e6-9111-e1c683f525be","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")","position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"status":-2},{"failures":[],"tindex":"b6e954bd-16e7-11e6-9111-fdb7d02caf0d","series":0,"name":"add","transplant":{"toString":"final byte[] out = new byte[len >> 1]","position":"org.apache.commons.codec.binary.Hex:85","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[len >> 1]"},"variableMap":{"len":"keyLen"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] pBytes = new byte[keyLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"status":-2},{"failures":[],"tindex":"b6e954be-16e7-11e6-9111-1391e75610d7","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"newData"},"type":"adrStmt","transplantationPoint":{"toString":"return newData","position":"org.apache.commons.codec.language.ColognePhonetic:243","type":"CtReturnImpl","sourcecode":"return newData"},"status":-3},{"failures":[],"tindex":"b6e954bf-16e7-11e6-9111-a59c161c47cf","series":0,"name":"add","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String rawLine = scanner.nextLine()","position":"org.apache.commons.codec.language.bm.Rule:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = scanner.nextLine()"},"status":-2},{"failures":[],"tindex":"b6e954c0-16e7-11e6-9111-1ff3db218c6e","series":0,"name":"add","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Languages:254","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[63,64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"b6e954c1-16e7-11e6-9111-6d73ff1f4ea0","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END","leftCharacter":"line","rightCharacter":"line","location":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)) {\n    inMultilineComment = false;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    inMultilineComment = false;\n} "},"status":-1},{"failures":[],"tindex":"b6e97bd2-16e7-11e6-9111-157165c9d866","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"dg\", \"2g\")","position":"org.apache.commons.codec.language.Caverphone2:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"dg\", \"2g\")"},"status":0},{"failures":[4],"tindex":"b6e97bd3-16e7-11e6-9111-85593c5c2ad0","series":0,"name":"replace","transplant":{"toString":"int ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:221","type":"CtLocalVariableImpl","sourcecode":"int int = keyLen"},"variableMap":{"keyLen":"maxLength"},"type":"adrStmt","transplantationPoint":{"toString":"final int addChars = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.maxLength) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.length())","position":"org.apache.commons.codec.language.DoubleMetaphone:979","type":"CtLocalVariableImpl","sourcecode":"final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length())"},"status":-1},{"failures":[],"tindex":"b6e97bd4-16e7-11e6-9111-953de4c3941e","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int index = ch - 'A'","position":"org.apache.commons.codec.language.Soundex:230","type":"CtLocalVariableImpl","sourcecode":"final int int = ch - 'A'"},"status":-2},{"failures":[63,64,66,67,68,69,71],"tindex":"b6e97bd5-16e7-11e6-9111-e92e461ed3b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"cachedString = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:144","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-1},{"failures":[76,77,78,79],"tindex":"b6e97bd6-16e7-11e6-9111-0b9665bb4fcd","series":0,"name":"replace","transplant":{"toString":"baseNCodec.decode(b, offset, len, context)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context)"},"variableMap":{"b":"buf","offset":"c","len":"c","context":"context","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"toString":"baseNCodec.encode(buf, 0, c, context)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:160","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[],"tindex":"b6e9a2e7-16e7-11e6-9111-cf94cb28ad96","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y3\", \"Y3\")"},"variableMap":{"txt":"saltString"},"type":"adrStmt","transplantationPoint":{"toString":"saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8)","position":"org.apache.commons.codec.digest.Md5Crypt:185","type":"CtAssignmentImpl","sourcecode":"saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8)"},"status":-2},{"failures":[80,81,82,83,84,7,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,8,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"tindex":"b6e9a2e8-16e7-11e6-9111-3d4bf8539412","series":0,"name":"replace","transplant":{"toString":"final char preHWChar = str.charAt((index - 2))","position":"org.apache.commons.codec.language.Soundex:190","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 2))"},"variableMap":{"str":"accentedWord","index":"i"},"type":"adrStmt","transplantationPoint":{"toString":"final char c = accentedWord.charAt(i)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:360","type":"CtLocalVariableImpl","sourcecode":"final char char = accentedWord.charAt(i)"},"status":-1},{"failures":[126,127,128,37,38,39,129,130],"tindex":"b6e9a2e9-16e7-11e6-9111-65f410440d3b","series":0,"name":"replace","transplant":{"toString":"c &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"from"},"type":"adrStmt","transplantationPoint":{"toString":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.SEP, from)","position":"org.apache.commons.codec.net.RFC1522Codec:152","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[4,5,6,10],"tindex":"b6e9a2ea-16e7-11e6-9111-0b725fc22a1d","series":0,"name":"replace","transplant":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('0', 'T')","position":"org.apache.commons.codec.language.DoubleMetaphone:690","type":"CtInvocationImpl","sourcecode":"result.append('0', 'T')"},"status":-1},{"failures":[],"tindex":"b6e9a2eb-16e7-11e6-9111-1570511ed5c6","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; (i < (key.length)) && (i < (original.length)) ; i++) {\n    final int iChar = original[i];\n    key[i] = ((byte)(iChar << 1));\n}","position":"org.apache.commons.codec.digest.UnixCrypt:220","type":"CtForImpl","sourcecode":"for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n    final int int = original[i];\n    key[i] = ((byte)(iChar << 1));\n}"},"variableMap":{"original":"altResult","length":"cnt","key":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"while (cnt > 0) {\n    if ((cnt & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(keyBytes);\n    }\n    cnt >>= 1;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:247","type":"CtWhileImpl","sourcecode":"while (cnt > 0) {\n    if ((cnt & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(keyBytes);\n    }\n    cnt >>= 1;\n}"},"status":-3},{"failures":[],"tindex":"b6e9c9fc-16e7-11e6-9111-5389065b4bef","series":0,"name":"add","transplant":{"toString":"return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1))","position":"org.apache.commons.codec.language.DoubleMetaphone:858","type":"CtReturnImpl","sourcecode":"return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1))"},"variableMap":{"value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"))","position":"org.apache.commons.codec.language.DoubleMetaphone:792","type":"CtReturnImpl","sourcecode":"return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"))"},"status":-2},{"failures":[131,132,133,134,135,136,56,137,138,139,140,141],"tindex":"b6e9c9fd-16e7-11e6-9111-d53457801b33","series":0,"name":"add","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"key"},"type":"adrStmt","transplantationPoint":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"status":-1},{"failures":[],"tindex":"b6e9f10e-16e7-11e6-9111-6945e0ebea57","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:528","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'))"},"status":-2},{"failures":[],"tindex":"b6e9f10f-16e7-11e6-9111-0582aaf4dbb9","series":0,"name":"add","transplant":{"toString":"if ((binaryData == null) || ((binaryData.length) == 0)) {\n    return binaryData;\n} ","position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((binaryData == null) || ((binaryData.int) == 0)) {\n    return binaryData;\n} "},"variableMap":{"binaryData":"buffer","length":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"if (((context.buffer) == null) || ((context.buffer.length) < ((context.pos) + size))) {\n    return resizeBuffer(context);\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:269","type":"CtIfImpl","sourcecode":"if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n    return resizeBuffer(context);\n} "},"status":-2},{"failures":[],"tindex":"b6e9f110-16e7-11e6-9111-fbad7ceb99eb","series":0,"name":"replace","transplant":{"toString":"if ((charAt(value, (index + 1))) == 'M') {\n    return true;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:844","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'M') {\n    return true;\n} "},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.L_R_N_M_B_H_F_V_W_SPACE)) || ((index + 1) == ((value.length()) - 1))))","position":"org.apache.commons.codec.language.DoubleMetaphone:817","type":"CtReturnImpl","sourcecode":"return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))))"},"status":-2},{"failures":[43,142,143,144,52],"tindex":"b6e9f111-16e7-11e6-9111-c7680d78a6e5","series":0,"name":"add","transplant":{"toString":"sb.append('|')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"variableMap":{"sb":"key"},"type":"adrStmt","transplantationPoint":{"toString":"key.deleteCharAt(((key.length()) - 1))","position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"status":-1},{"failures":[145,146,147],"tindex":"b6ea1822-16e7-11e6-9111-c3d3b8950217","series":0,"name":"replace","transplant":{"toString":"final char charOne = salt.charAt(1)","position":"org.apache.commons.codec.digest.UnixCrypt:210","type":"CtLocalVariableImpl","sourcecode":"final char char = salt.charAt(1)"},"variableMap":{"salt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"final char hwChar = str.charAt((index - 1))","position":"org.apache.commons.codec.language.Soundex:188","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 1))"},"status":-1},{"failures":[],"tindex":"b6ea1823-16e7-11e6-9111-b90883ca83ac","series":0,"name":"replace","transplant":{"toString":"b = 256 + b","position":"org.apache.commons.codec.net.QuotedPrintableCodec:204","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"variableMap":{"b":"c"},"type":"adrStmt","transplantationPoint":{"toString":"c = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:350","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-2},{"failures":[],"tindex":"b6ea1824-16e7-11e6-9111-079d987db29b","series":0,"name":"replace","transplant":{"toString":"mac.reset()","position":"org.apache.commons.codec.digest.HmacUtils:742","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"variableMap":{"mac":"mac"},"type":"adrStmt","transplantationPoint":{"toString":"mac.init(keySpec)","position":"org.apache.commons.codec.digest.HmacUtils:183","type":"CtInvocationImpl","sourcecode":"mac.init(keySpec)"},"status":-2},{"failures":[],"tindex":"b6ea1825-16e7-11e6-9111-8d25ae4c0a3d","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inExtendedComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-2},{"failures":[29,30,31,32,148,33,34,35,149,36,150,151],"tindex":"b6ea1826-16e7-11e6-9111-8b094b4a222e","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"salt","leftCharacter":"salt","rightCharacter":"salt","location":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"if ((m == null) || (!(m.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:146","type":"CtIfImpl","sourcecode":"if ((m == null) || (!(m.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-1},{"failures":[],"tindex":"b6ea3f37-16e7-11e6-9111-67c0dbc19216","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"maxPhonemes","to":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:215","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int)"},"status":-2},{"failures":[],"tindex":"b6ea3f38-16e7-11e6-9111-1b619706c597","series":0,"name":"replace","transplant":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"replacedName"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String dc : org.apache.commons.codec.language.MatchRatingApproachEncoder.DOUBLE_CONSONANT) {\n    if (replacedName.contains(dc)) {\n        final java.lang.String singleLetter = dc.substring(0, 1);\n        replacedName = replacedName.replace(dc, singleLetter);\n    } \n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:386","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n    if (replacedName.contains(dc)) {\n        final java.lang.String java.lang.String = dc.substring(0, 1);\n        replacedName = replacedName.replace(dc, singleLetter);\n    } \n}"},"status":-2},{"failures":[],"tindex":"b6ea3f39-16e7-11e6-9111-ad21c8891241","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"m+\", \"M\")","position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = cleanName(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:132","type":"CtAssignmentImpl","sourcecode":"name = cleanName(name)"},"status":-2},{"failures":[152],"tindex":"b6ea3f3a-16e7-11e6-9111-dd9f90ffa446","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:658","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data)"},"status":-1},{"failures":[],"tindex":"b6ea664b-16e7-11e6-9111-edee850ce825","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"b"},"type":"adrStmt","transplantationPoint":{"toString":"results[1] = b","position":"org.apache.commons.codec.digest.UnixCrypt:410","type":"CtAssignmentImpl","sourcecode":"results[1] = b"},"status":-2},{"failures":[],"tindex":"b6ea664c-16e7-11e6-9111-479011120758","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"t"},"type":"adrStmt","transplantationPoint":{"toString":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.SPTRANS[1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[6][((u >>> 24) & 63)])","position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-2},{"failures":[],"tindex":"b6ea664d-16e7-11e6-9111-27f6a338ac8d","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)","position":"org.apache.commons.codec.language.Nysiis:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)"},"variableMap":{"str":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:762","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"status":-2},{"failures":[153,154,155,156,157,158,159],"tindex":"b6ea664e-16e7-11e6-9111-09a321c9fb2b","series":0,"name":"add","transplant":{"toString":"messageDigest.update(valueToDigest)","position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"variableMap":{"messageDigest":"ctx1","valueToDigest":"saltBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(saltBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:218","type":"CtInvocationImpl","sourcecode":"ctx1.update(saltBytes)"},"status":-1},{"failures":[],"tindex":"b6ea664f-16e7-11e6-9111-4902d6169001","series":0,"name":"add","transplant":{"toString":"return doubleMetaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DoubleMetaphone:206","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}","position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"status":-2},{"failures":[],"tindex":"b6ea8d60-16e7-11e6-9111-83c7195b5f13","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('.')","position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"urlsafe"},"type":"adrStmt","transplantationPoint":{"toString":"for (final byte c : bytes) {\n    int b = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (urlsafe.get(b)) {\n        if (b == ' ') {\n            b = '+';\n        } \n        buffer.write(b);\n    } else {\n        buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR);\n        final char hex1 = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.RADIX));\n        final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.RADIX));\n        buffer.write(hex1);\n        buffer.write(hex2);\n    }\n}","position":"org.apache.commons.codec.net.URLCodec:130","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    int int = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (urlsafe.get(b)) {\n        if (b == ' ') {\n            b = '+';\n        } \n        buffer.write(b);\n    } else {\n        buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        buffer.write(hex1);\n        buffer.write(hex2);\n    }\n}"},"status":-3},{"failures":[],"tindex":"b6ea8d61-16e7-11e6-9111-0167f1bdd4c1","series":0,"name":"replace","transplant":{"toString":"for (int i = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:97","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('`')","position":"org.apache.commons.codec.net.QCodec:96","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('`')"},"status":0},{"failures":[],"tindex":"b6ea8d62-16e7-11e6-9111-6d4331440fe0","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"name2 = removeVowels(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:232","type":"CtAssignmentImpl","sourcecode":"name2 = removeVowels(name2)"},"status":-2},{"failures":[160,161,162,163,164,165,166,167,168,169,37,38,39,129,130],"tindex":"b6ea8d63-16e7-11e6-9111-ab2d685826f3","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"b","to":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) {\n            continue;\n        } \n        final int u = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.LF))) {\n    buffer.write(b);\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-1},{"failures":[],"tindex":"b6eab474-16e7-11e6-9111-55a9b25bb442","series":0,"name":"add","transplant":{"toString":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.BCodec:180","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"variableMap":{"e":"e","value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.URLCodec:292","type":"CtTryImpl","sourcecode":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[4],"tindex":"b6eab475-16e7-11e6-9111-1b85f210747a","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:802","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"b6eab476-16e7-11e6-9111-2123e99bb263","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Null key\")","position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"))","position":"org.apache.commons.codec.language.ColognePhonetic:407","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"))"},"status":0},{"failures":[],"tindex":"b6eadb87-16e7-11e6-9111-4d5f7b93de73","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"left","encodeSize":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:309","type":"CtAssignmentImpl","sourcecode":"left = results[0]"},"status":-3}],"header":{"groupId":"commons-codec","transformationCount":98,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":3,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":4,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":5},"transformations":[{"failures":[0,1,2,3],"tindex":"d30050c3-16df-11e6-9cc3-57a26a84c55b","series":0,"name":"add","transplant":{"toString":"result.append('A')","position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'H') {\n    index = handleGH(value, result, index);\n} else if ((charAt(value, (index + 1))) == 'N') {\n    if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n        result.append(\"KN\", \"N\");\n    } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n        result.append(\"N\", \"KN\");\n    } else {\n        result.append(\"KN\");\n    }\n    index = index + 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n    result.append(\"KL\", \"L\");\n    index += 2;\n} else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER)))) {\n    result.append('K', 'J');\n    index += 2;\n} else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n    result.append('K', 'J');\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n        result.append('K');\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n        result.append('J');\n    } else {\n        result.append('J', 'K');\n    }\n    index += 2;\n} else if ((charAt(value, (index + 1))) == 'G') {\n    index += 2;\n    result.append('K');\n} else {\n    index++;\n    result.append('K');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:410","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    index = handleGH(value, result, index);\n} else if ((charAt(value, (index + 1))) == 'N') {\n    if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n        result.append(\"KN\", \"N\");\n    } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n        result.append(\"N\", \"KN\");\n    } else {\n        result.append(\"KN\");\n    }\n    index = index + 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n    result.append(\"KL\", \"L\");\n    index += 2;\n} else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n    result.append('K', 'J');\n    index += 2;\n} else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n    result.append('K', 'J');\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n        result.append('K');\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n        result.append('J');\n    } else {\n        result.append('J', 'K');\n    }\n    index += 2;\n} else if ((charAt(value, (index + 1))) == 'G') {\n    index += 2;\n    result.append('K');\n} else {\n    index++;\n    result.append('K');\n}"},"status":-1},{"failures":[4,5],"tindex":"d300c5f4-16df-11e6-9cc3-958bed0fb6e2","series":0,"name":"replace","transplant":{"toString":"lastChar = ch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"variableMap":{"ch":"last","lastChar":"current"},"type":"adrStmt","transplantationPoint":{"toString":"last = current","position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":2,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
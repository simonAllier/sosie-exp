{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"38c1bad0-11b2-11e6-9f82-8135bfe5b3ac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:195","type":"CtReturnImpl","sourcecode":"return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u')"},"status":0},{"failures":[],"tindex":"38c1e1e1-11b2-11e6-9f82-dfef9732154d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:124","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear()"},"status":0},{"failures":[],"tindex":"38c1e1e2-11b2-11e6-9f82-21cc35f1c190","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"variableMap":{"w":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:497","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":0},{"failures":[],"tindex":"38c208f3-11b2-11e6-9f82-852841d86cab","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"read"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:769","type":"CtWhileImpl","sourcecode":"while (read > (-1)) {\n    mac.update(buffer, 0, read);\n    read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int);\n}"},"status":0},{"failures":[],"tindex":"38c208f4-11b2-11e6-9f82-7f204c237b42","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:896","type":"CtReturnImpl","sourcecode":"return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":0},{"failures":[],"tindex":"38c208f5-11b2-11e6-9f82-8fda9cc60119","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"2\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":0},{"failures":[],"tindex":"38c23006-11b2-11e6-9f82-e53e3ead2a34","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:79","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"q\", \"k\")"},"status":0},{"failures":[],"tindex":"38c23007-11b2-11e6-9f82-d983042d6815","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:295","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = name1.toCharArray()"},"variableMap":{"name1":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:431","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = text.toCharArray()"},"status":0},{"failures":[],"tindex":"38c23008-11b2-11e6-9f82-ed5e126a2bd0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:605","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (prefix.charAt(i))) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"38c23009-11b2-11e6-9f82-93eddee6923d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:337","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n    if ((0 == (context.int)) && ((int) == 0)) {\n        return ;\n    } \n    final byte[] byte[] = ensureBufferSize(int, context);\n    final int int = context.int;\n    switch (context.int) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                buffer[((context.int)++)] = byte;\n                buffer[((context.int)++)] = byte;\n            } \n            break;\n        case 2 :\n            buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                buffer[((context.int)++)] = byte;\n            } \n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n    context.int += (context.int) - savedPos;\n    if (((int) > 0) && ((context.int) > 0)) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n    } \n} else {\n    for (int int = 0 ; i < inAvail ; i++) {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n        int int = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.int = ((context.int) << 8) + b;\n        if (0 == (context.int)) {\n            buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n            if (((int) > 0) && ((int) <= (context.int))) {\n                java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                context.int += byte[].int;\n                context.int = 0;\n            } \n        } \n    }\n}"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":10,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
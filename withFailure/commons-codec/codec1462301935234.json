{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":83,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":87,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":99,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":78,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":49,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":74,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":58,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":7,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":103,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":101,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":104,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":46,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":92,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":28,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":23,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":82,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":32,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":64,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":93,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":30,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":31,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":61,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":63,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":71,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":116,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":105,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":52,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":35,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":50,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":67,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":114,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":115,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":102,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":110,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":9,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":66,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":3,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":72,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":85,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":73,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":90,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":111,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":94,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":89,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":91,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":62,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder":112,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":11,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":41,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":95,"org.apache.commons.codec.binary.Base64Test.testBase64":40,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":0,"org.apache.commons.codec.binary.Base64Test.testUUID":25,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":69,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":106,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":4,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":34,"org.apache.commons.codec.binary.Base64Test.testSingletons":38,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":20,"org.apache.commons.codec.binary.Base64Test.testPairs":24,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":19,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":97,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":17,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":54,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":79,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":47,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":36,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":43,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":109,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":15,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":81,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":5,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":2,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":10,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":21,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":48,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":27,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":65,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":39,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":100,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":113,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":84,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":88,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":57},"transformations":[{"failures":[],"tindex":"158f200f-1161-11e6-a6d4-c574b35e8410","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:172","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementBeforeVowel.split(\"\\\\|\")"},"variableMap":{"replacementBeforeVowel":"replacementAtStart"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:171","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementAtStart.split(\"\\\\|\")"},"status":-2},{"failures":[],"tindex":"158f4720-1161-11e6-a6d4-dd97dacd1168","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"variableMap":{"algorithm":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:112","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"158f6e31-1161-11e6-a6d4-e9f3b507b9a1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"status":0},{"failures":[0,1,2,3,4,5,6],"tindex":"158f6e32-1161-11e6-a6d4-3bf78985064c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"status":-1},{"failures":[7,8,9,10,11,12,13,14],"tindex":"158f6e33-1161-11e6-a6d4-d3d9ddf8ea82","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:194","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"variableMap":{"altCtx":"altCtx","keyBytes":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}"},"status":-1},{"failures":[15,16,17,18,19,20,21,2,3,4,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,6,52,53,54,55],"tindex":"158f6e34-1161-11e6-a6d4-7d36e158d271","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-1},{"failures":[],"tindex":"158f6e35-1161-11e6-a6d4-8dbaf7b8d3d0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:742","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"variableMap":{"mac":"mac"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:183","type":"CtInvocationImpl","sourcecode":"mac.init(keySpec)"},"status":0},{"failures":[56],"tindex":"158f9546-1161-11e6-a6d4-93e68b0d9d31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:104","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^h\", \"A\")"},"status":-1},{"failures":[],"tindex":"158f9547-1161-11e6-a6d4-c759607e240a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"status":-2},{"failures":[57,58],"tindex":"158f9548-1161-11e6-a6d4-81178344df62","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"variableMap":{"cp":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:306","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-1},{"failures":[],"tindex":"158f9549-1161-11e6-a6d4-5788211f3b61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 2) | (c << 26)"},"variableMap":{"c":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"status":-2},{"failures":[7,8,9,10,11,12,13,14],"tindex":"158f954a-1161-11e6-a6d4-95d2336f533f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:206","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"158f954b-1161-11e6-a6d4-c160a43df93c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:440","type":"CtInvocationImpl","sourcecode":"lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)))"},"status":-2},{"failures":[59],"tindex":"158fbc5c-1161-11e6-a6d4-2bef967ea29f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"variableMap":{"n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:724","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"158fbc5d-1161-11e6-a6d4-ebdf9a4d5335","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"tempResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"status":0},{"failures":[],"tindex":"158fbc5e-1161-11e6-a6d4-afdf8c1338b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return digit"},"variableMap":{"digit":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:508","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[],"tindex":"158fbc5f-1161-11e6-a6d4-ff5b3f8e0e12","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"org.apache.commons.codec.binary.Base64.URL_SAFE_ENCODE_TABLE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:306","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.binary.Base64.this.byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])"},"status":-2},{"failures":[],"tindex":"158fbc60-1161-11e6-a6d4-d7251f50c8bc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = java.util.Collections.unmodifiableSet(languages)"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = languages"},"status":0},{"failures":[60,61,62,63,64,65,66,67],"tindex":"158fe371-1161-11e6-a6d4-ff561f392c5d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtIfImpl","sourcecode":"if (b == '+') {\n    buffer.write(' ');\n} else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n    try {\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n    }\n} else {\n    buffer.write(b);\n}"},"status":-1},{"failures":[],"tindex":"158fe372-1161-11e6-a6d4-9169fb93b53d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:419","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(((l.length()) + 1))"},"variableMap":{"input":"source","l":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:46","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = source"},"status":-2},{"failures":[],"tindex":"158fe373-1161-11e6-a6d4-b56fa0510a5a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"l","len":"l"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:144","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}"},"status":-3},{"failures":[],"tindex":"158fe374-1161-11e6-a6d4-c10f06491094","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","leftCharacter":"org.apache.commons.codec.language.bm.ResourceConstants.CMT","rightCharacter":"org.apache.commons.codec.language.bm.ResourceConstants.CMT","location":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:140","type":"CtWhileImpl","sourcecode":"while (scanner.hasNextLine()) {\n    final java.lang.String java.lang.String = scanner.nextLine();\n    java.lang.String java.lang.String = rawLine;\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = true;\n        } else {\n            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            if (cmtI >= 0) {\n                line = line.substring(0, cmtI);\n            } \n            line = line.trim();\n            if ((line.length()) == 0) {\n                continue;\n            } \n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 3) {\n                throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n            } \n            final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n            final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n            final boolean boolean = parts[2].equals(\"true\");\n            rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n        }\n    }\n}"},"status":-2},{"failures":[68,69],"tindex":"15900a85-1161-11e6-a6d4-43e6e114b83a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"status":-1},{"failures":[70,71],"tindex":"15900a86-1161-11e6-a6d4-8d9bc3c2faf4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"variableMap":{"compareCode":"rightLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"status":-1},{"failures":[72],"tindex":"15900a87-1161-11e6-a6d4-795044ae0cf5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:148","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes())"},"status":-1},{"failures":[],"tindex":"15900a88-1161-11e6-a6d4-89b98418a571","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:338","type":"CtReturnImpl","sourcecode":"return encode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"15903199-1161-11e6-a6d4-bbe214941009","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:377","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-2},{"failures":[],"tindex":"1590319a-1161-11e6-a6d4-85a0d25f727f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"variableMap":{"encoding":"ph"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"status":-2},{"failures":[73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],"tindex":"1590319b-1161-11e6-a6d4-c38fa0381534","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"variableMap":{"index":"minRating"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"minRating = getMinRating(sumLength)"},"status":-1},{"failures":[101,102,103,104],"tindex":"1590319c-1161-11e6-a6d4-2b0beb46ff4c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"variableMap":{"code":"phonemeText"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:121","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(phonemeRight.java.lang.StringBuilder)"},"status":-1},{"failures":[105,106,107,108,109,110,111],"tindex":"1590319d-1161-11e6-a6d4-515bd49ce1a6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:272","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n} else {\n    ctx1.update(keyBytes);\n}"},"status":-1},{"failures":[],"tindex":"159058ae-1161-11e6-a6d4-6503638ae980","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","raw":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"159058af-1161-11e6-a6d4-574d8b896fc1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:198","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"variableMap":{"value":"pObject"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:114","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(pObject)))"},"status":-2},{"failures":[57,58],"tindex":"159058b0-1161-11e6-a6d4-5be6694475ed","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"ii -= 16"},"variableMap":{"ii":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:387","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16"},"status":-1},{"failures":[112,113,88,92,98],"tindex":"159058b1-1161-11e6-a6d4-050a1a4f7516","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"variableMap":{"name":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:164","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength)"},"status":-1},{"failures":[114,68,69],"tindex":"159058b2-1161-11e6-a6d4-a99992e29c6a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:309","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"159058b3-1161-11e6-a6d4-85c742bb1d78","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:154","type":"CtAssignmentImpl","sourcecode":"data = doDecoding(data)"},"variableMap":{"data":"decodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[],"tindex":"159058b4-1161-11e6-a6d4-69f130a44efd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:947","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:500","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"status":-2},{"failures":[57,115,116,58],"tindex":"159058b5-1161-11e6-a6d4-a14284da9090","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:211","type":"CtInvocationImpl","sourcecode":"buffer.setCharAt(0, charZero)"},"status":-1},{"failures":[],"tindex":"15907fc6-1161-11e6-a6d4-a36f1b0c605c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"c <<= 1"},"variableMap":{"c":"r"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:99","type":"CtAssignmentImpl","sourcecode":"r = read(byte[], 0, 1)"},"status":0},{"failures":[],"tindex":"15907fc7-1161-11e6-a6d4-fd3b3dccdab8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:236","type":"CtInvocationImpl","sourcecode":"scanner.close()"},"status":-2},{"failures":[],"tindex":"15907fc8-1161-11e6-a6d4-6328c99250c5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:250","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-2},{"failures":[],"tindex":"15907fc9-1161-11e6-a6d4-8957f9fd25b7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtIfImpl","sourcecode":"if (lastCode == '/') {\n    continue;\n} "},"variableMap":{"lastCode":"nextChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:341","type":"CtIfImpl","sourcecode":"if ((rightLength = input.length()) > 0) {\n    nextChar = input.getNextChar();\n} else {\n    nextChar = '-';\n}"},"status":-2},{"failures":[102,103],"tindex":"15907fca-1161-11e6-a6d4-cfef6e672f12","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:240","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (chars.length()) ; i++) {\n    if ((chars.charAt(i)) == input) {\n        return true;\n    } \n}"},"status":-1},{"failures":[],"tindex":"15907fcb-1161-11e6-a6d4-63a26d611b2a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:91","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(' ')"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":45,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
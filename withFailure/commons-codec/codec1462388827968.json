{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":44,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":59,"org.apache.commons.codec.binary.HexTest.testCustomCharset":50,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":78,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":58,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":63,"org.apache.commons.codec.binary.Base64Test.testBase64":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":17,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":14,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":74,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":2,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":71,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":3,"org.apache.commons.codec.binary.Base64Test.testUUID":28,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":76,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":24,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":37,"org.apache.commons.codec.binary.Base64Test.testSingletons":41,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":7,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":72,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":9,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":11,"org.apache.commons.codec.binary.Base64Test.testPairs":27,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":53,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":69,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":36,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":8,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":45,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":73,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":31,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":32,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":6,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":35,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":25,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":20,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":33,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":34,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":56,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":61,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":68,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":21,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":65,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":55,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":49,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":38,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":54,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":15,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":77,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":39,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":46,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":1,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":40,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":22,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":23,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":67,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":10,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":47,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":13,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":51,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":57,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":64,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":30,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":42,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":48,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":19,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":5,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":62,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":16,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":29,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":70},"transformations":[{"failures":[0,1,2,3],"tindex":"65ac1a14-122b-11e6-a36c-e58c37b9a4a2","series":0,"name":"replace","transplant":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"phonemeText"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.phonemeText.append(phonemeRight.phonemeText)","position":"org.apache.commons.codec.language.bm.Rule:121","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(phonemeRight.java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"65ac6835-122b-11e6-a36c-d9f11306ef7e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"status":0},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"tindex":"65ac6836-122b-11e6-a36c-775404c115ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n    final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n    if (result >= 0) {\n        context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n        context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n        if ((context.modulus) == 0) {\n            buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        } \n    } \n} ","position":"org.apache.commons.codec.binary.Base64:443","type":"CtIfImpl","sourcecode":"if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n    final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n    if (result >= 0) {\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n        context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n        if ((context.int) == 0) {\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        } \n    } \n} "},"status":-1},{"failures":[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"tindex":"65ac8f47-122b-11e6-a36c-77a8af029fd6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0, j = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}","position":"org.apache.commons.codec.binary.Hex:144","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}"},"status":-1},{"failures":[],"tindex":"65ac8f48-122b-11e6-a36c-25f037e44a49","series":0,"name":"replace","transplant":{"toString":"return newData","position":"org.apache.commons.codec.language.ColognePhonetic:262","type":"CtReturnImpl","sourcecode":"return newData"},"variableMap":{"newData":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_N","position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":0},{"failures":[72,73,74],"tindex":"65acb659-122b-11e6-a36c-f135f862df6b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:90","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"65acb65a-122b-11e6-a36c-3f461178cbc4","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"name2Size","to":"name2Size"},"type":"adrStmt","transplantationPoint":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"status":-2},{"failures":[75,76,77,78],"tindex":"65acb65b-122b-11e6-a36c-4be67caf3b3f","series":0,"name":"replace","transplant":{"toString":"return +1","position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":8,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
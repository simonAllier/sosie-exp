{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":36,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":3,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":12,"org.apache.commons.codec.binary.HexTest.testCustomCharset":31,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":16,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":30,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":34,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":21,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":9,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":15,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":40,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":19,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":37,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":1,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":8,"org.apache.commons.codec.binary.Base64Test.testUUID":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":41,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":10,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":35,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":38,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":2,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":33,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":28,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":7,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":24,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":23,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":26},"transformations":[{"failures":[],"tindex":"7b4489dd-17d9-11e6-940c-4fcdd93c836a","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:569","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}"},"variableMap":{"input":"this","bContent":"input","this":"this","shouldMatch":"startsWith"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} "},"status":-2},{"failures":[],"tindex":"7b44d7fe-17d9-11e6-940c-ef2794aa30dc","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.this.charset","position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QCodec.this.charset","position":"org.apache.commons.codec.net.QCodec:328","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.java.nio.charset.Charset"},"status":-2},{"failures":[],"tindex":"7b44d7ff-17d9-11e6-940c-fbf49286f7a8","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(context.lbitWorkArea)) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:516","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:360","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-3},{"failures":[0,1,2,3,4,5,6],"tindex":"7b44ff10-17d9-11e6-940c-c15333499d4d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (ii > 0) {\n    ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n    ii -= 16;\n}","position":"org.apache.commons.codec.digest.Md5Crypt:222","type":"CtWhileImpl","sourcecode":"while (ii > 0) {\n    ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n    ii -= 16;\n}"},"status":-1},{"failures":[7,8,9],"tindex":"7b44ff11-17d9-11e6-940c-a525d1550650","series":0,"name":"replace","transplant":{"toString":"ii >>= 1","position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:452","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"7b44ff12-17d9-11e6-940c-f19fccd71f5c","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"u"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(((char)((u << 4) + l)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:367","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"status":-2},{"failures":[],"tindex":"7b44ff13-17d9-11e6-940c-6d4093804054","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"h\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"variableMap":{"txt":"text"},"type":"adrStmt","transplantationPoint":{"toString":"text = preprocess(text)","position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"status":-2},{"failures":[10,7,11,9,12],"tindex":"7b452624-17d9-11e6-940c-ef102fd3200e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"status":-1},{"failures":[],"tindex":"7b452625-17d9-11e6-940c-59618755be92","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"status":0},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"7b452626-17d9-11e6-940c-1774920653f9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"inMultilineComment = true","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:268","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = true"},"status":-1},{"failures":[],"tindex":"7b452627-17d9-11e6-940c-a9ef500ad49e","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"variableMap":{"altResult":"raw","buffer":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(raw instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:98","type":"CtIfImpl","sourcecode":"if (!(raw instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n} "},"status":-2},{"failures":[26,27],"tindex":"7b452628-17d9-11e6-940c-97ed41452bc7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"d = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:353","type":"CtAssignmentImpl","sourcecode":"d = results[1]"},"status":-1},{"failures":[28,29,30,31,32,33,34],"tindex":"7b454d39-17d9-11e6-940c-69589ad500f2","series":0,"name":"replace","transplant":{"toString":"j++","position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"variableMap":{"j":"j"},"type":"adrStmt","transplantationPoint":{"toString":"f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j))","position":"org.apache.commons.codec.binary.Hex:91","type":"CtAssignmentImpl","sourcecode":"f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j))"},"status":-1},{"failures":[],"tindex":"7b454d3a-17d9-11e6-940c-8dbff34adfc8","series":0,"name":"replace","transplant":{"toString":"return ls.equals(org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES) ? org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE : ls","position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls"},"variableMap":{"ls":"org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE"},"type":"adrStmt","transplantationPoint":{"toString":"if (other == (org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else if (other == (org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE)) {\n    return other;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages sl = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> ls = new java.util.HashSet<java.lang.String>(languages);\n    for (java.lang.String lang : sl.languages) {\n        ls.add(lang);\n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}","position":"org.apache.commons.codec.language.bm.Languages:134","type":"CtIfImpl","sourcecode":"if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return other;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Set<java.lang.String>);\n    for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n        ls.add(lang);\n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}"},"status":-2},{"failures":[35,36],"tindex":"7b45744b-17d9-11e6-940c-25a8d27840f6","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"e$\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"e$\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"r\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:108","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r\", \"2\")"},"status":-1},{"failures":[26,27],"tindex":"7b45744c-17d9-11e6-940c-cf075b030244","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:348","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)"},"variableMap":{"c":"right","d":"right","results":"results"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results)","position":"org.apache.commons.codec.digest.UnixCrypt:305","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results)"},"status":-1},{"failures":[],"tindex":"7b45744d-17d9-11e6-940c-319041e37c1c","series":0,"name":"add","transplant":{"toString":"last = mapped","position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"last = mapped"},"variableMap":{"last":"ch","mapped":"ch"},"type":"adrStmt","transplantationPoint":{"toString":"ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS.get(ch)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:386","type":"CtAssignmentImpl","sourcecode":"ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch)"},"status":0},{"failures":[],"tindex":"7b459b5e-17d9-11e6-940c-57585a063cfa","series":0,"name":"replace","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"data"},"type":"adrStmt","transplantationPoint":{"toString":"data = doDecoding(data)","position":"org.apache.commons.codec.net.RFC1522Codec:154","type":"CtAssignmentImpl","sourcecode":"data = doDecoding(data)"},"status":-3},{"failures":[37,38,39,40,41],"tindex":"7b459b5f-17d9-11e6-940c-c319b5defea5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"minRating = getMinRating(sumLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"minRating = getMinRating(sumLength)"},"status":-1},{"failures":[42,43],"tindex":"7b459b60-17d9-11e6-940c-a7b3f61e3c26","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")","position":"org.apache.commons.codec.language.bm.Rule:369","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-1},{"failures":[],"tindex":"7b459b61-17d9-11e6-940c-8fd954e7cef6","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.charset","position":"org.apache.commons.codec.net.QuotedPrintableCodec:548","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QCodec.this.charset","position":"org.apache.commons.codec.net.QCodec:328","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.java.nio.charset.Charset"},"status":-2},{"failures":[26,27],"tindex":"7b459b62-17d9-11e6-940c-0963c777bcf6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[],"tindex":"7b45c273-17d9-11e6-940c-d7e1c5c7512d","series":0,"name":"replace","transplant":{"toString":"patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:223","type":"CtAssignmentImpl","sourcecode":"patternLength = 1"},"variableMap":{"patternLength":"currentLine"},"type":"adrStmt","transplantationPoint":{"toString":"currentLine++","position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"status":0},{"failures":[],"tindex":"7b45c274-17d9-11e6-940c-9bb1b2ba27ed","series":0,"name":"replace","transplant":{"toString":"code.append(symb)","position":"org.apache.commons.codec.language.Metaphone:162","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"variableMap":{"code":"primary","symb":"value"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:958","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":0},{"failures":[7,8,9],"tindex":"7b45c275-17d9-11e6-940c-033bd16875a1","series":0,"name":"replace","transplant":{"toString":"if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n    result.append('H');\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:500","type":"CtIfImpl","sourcecode":"if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n    result.append('H');\n    index += 2;\n} else {\n    index++;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:711","type":"CtIfImpl","sourcecode":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}"},"status":-1},{"failures":[7,8],"tindex":"7b45c276-17d9-11e6-940c-75bcb5c8b8bf","series":0,"name":"add","transplant":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":26,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":7,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":32,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":11,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":14,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":4,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":47,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":45,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":34,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":40,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":44,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":10,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":28,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":27,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":26,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":43,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":42,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":9,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":36,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":46,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":18,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":17,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":30,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":35,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":6,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":21,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":33,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":38,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":48,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":29,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":41,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":2,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":25,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":49,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":24,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":16,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":5,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":23,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":39,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":22,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":8},"transformations":[{"failures":[0],"tindex":"c2e5d24e-1161-11e6-bc5f-fb1888712381","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))"},"variableMap":{"valueToDigest":"remainder","key":"combined"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:413","type":"CtReturnImpl","sourcecode":"return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\""},"status":-1},{"failures":[],"tindex":"c2e6206f-1161-11e6-bc5f-832d3231e60f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.NameType:42","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:96","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3gh3\", \"3kh3\")"},"status":-2},{"failures":[],"tindex":"c2e62070-1161-11e6-bc5f-45b13591620e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:187","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int = i"},"variableMap":{"i":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:639","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1"},"status":-2},{"failures":[],"tindex":"c2e62071-1161-11e6-bc5f-a5039a2f61b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)"},"variableMap":{"tmp":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()"},"status":-2},{"failures":[1,2],"tindex":"c2e64782-1161-11e6-bc5f-493b04c9c3df","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:64","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.Context.boolean ? 0 : 1"},"status":-1},{"failures":[],"tindex":"c2e64783-1161-11e6-bc5f-517f5468e339","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:219","type":"CtIfImpl","sourcecode":"if (rule.matches(text)) {\n    if (rule.boolean) {\n        langs.retainAll(rule.java.util.Set<java.lang.String>);\n    } else {\n        langs.removeAll(rule.java.util.Set<java.lang.String>);\n    }\n} "},"status":-2},{"failures":[],"tindex":"c2e64784-1161-11e6-bc5f-b36b89fcea4d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"variableMap":{"maxLength":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"status":-2},{"failures":[],"tindex":"c2e66e95-1161-11e6-bc5f-d7e6c865c774","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:273","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length())"},"status":-2},{"failures":[],"tindex":"c2e66e96-1161-11e6-bc5f-632cc7d3400f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[avail]"},"variableMap":{"avail":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:153","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(text.substring(from, to))"},"status":-2},{"failures":[3,4,5,6,7,8],"tindex":"c2e66e97-1161-11e6-bc5f-03b49d2e47dc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:948","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"status":-1},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"c2e695a8-1161-11e6-bc5f-cf6f3c0798dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:503","type":"CtLocalVariableImpl","sourcecode":"int int = in[(inPos++)]"},"variableMap":{"in":"bytes","inPos":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:366","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"status":-1},{"failures":[],"tindex":"c2e695a9-1161-11e6-bc5f-2f52efd31e00","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"status":0},{"failures":[22,23,24,25,26],"tindex":"c2e695aa-1161-11e6-bc5f-d188dd25db38","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:460","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer)"},"status":-1},{"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39],"tindex":"c2e6bcbb-1161-11e6-bc5f-d78b85b12b36","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:502","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-1},{"failures":[40,27,28,38,41,42],"tindex":"c2e6bcbc-1161-11e6-bc5f-81d187c9b361","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:93","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[43,44,45],"tindex":"c2e6bcbd-1161-11e6-bc5f-93f15e82a5a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:186","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"c2e6bcbe-1161-11e6-bc5f-4bb0bcf3aa56","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"txt","firstLetter":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:95","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n    return \"\";\n} "},"status":-2},{"failures":[],"tindex":"c2e6e3cf-1161-11e6-bc5f-d32d9341fdf6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:398","type":"CtAssignmentImpl","sourcecode":"lastChar = chr"},"variableMap":{"lastChar":"last","chr":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"status":0},{"failures":[46],"tindex":"c2e6e3d0-1161-11e6-bc5f-05f9ab53bdf8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))"},"variableMap":{"ascii":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray())"},"status":-1},{"failures":[],"tindex":"c2e6e3d1-1161-11e6-bc5f-e1ebfb319722","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"status":-2},{"failures":[],"tindex":"c2e6e3d2-1161-11e6-bc5f-f5d77a851771","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"variableMap":{"txt":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:455","type":"CtAssignmentImpl","sourcecode":"input = words.iterator().next()"},"status":-2},{"failures":[47,48,49],"tindex":"c2e70ae3-1161-11e6-bc5f-a52d5a368fe9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"status":-1},{"failures":[],"tindex":"c2e70ae4-1161-11e6-bc5f-c9786b945e11","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:418","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = true"},"variableMap":{"inMultilineComment":"acceptOnMatch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:88","type":"CtAssignmentImpl","sourcecode":"this.boolean = acceptOnMatch"},"status":-2},{"failures":[],"tindex":"c2e70ae5-1161-11e6-bc5f-69939f5acef3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"variableMap":{"text":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"status":-2},{"failures":[],"tindex":"c2e70ae6-1161-11e6-bc5f-d712bcd62525","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"ch","preHWChar":"ch","firstCode":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:276","type":"CtReturnImpl","sourcecode":"return ch"},"status":-2},{"failures":[],"tindex":"c2e731f7-1161-11e6-bc5f-f55caf26a306","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:576","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"c2e731f8-1161-11e6-bc5f-8753f428a812","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:301","type":"CtLocalVariableImpl","sourcecode":"final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:473","type":"CtLocalVariableImpl","sourcecode":"java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":27,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
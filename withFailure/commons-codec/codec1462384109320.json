{"failureDictionary":{"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":5,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":7,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":9},"transformations":[{"failures":[],"tindex":"6921b9d6-1220-11e6-91fd-dd89ffc55518","series":0,"name":"replace","transplant":{"toString":"return metaphone(str)","position":"org.apache.commons.codec.language.Metaphone:403","type":"CtReturnImpl","sourcecode":"return metaphone(str)"},"variableMap":{"str":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(input, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:385","type":"CtReturnImpl","sourcecode":"return encode(input, languageSet)"},"status":-2},{"failures":[],"tindex":"6921e0e7-1220-11e6-91fd-a58c43e4526e","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^y\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_MAC.matcher(str).replaceFirst(\"MCC\")","position":"org.apache.commons.codec.language.Nysiis:261","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\")"},"status":-2},{"failures":[],"tindex":"6921e0e8-1220-11e6-91fd-e9e4d6a8bbc8","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))","position":"org.apache.commons.codec.binary.Base32:292","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))"},"status":-2},{"failures":[0,1],"tindex":"6921e0e9-1220-11e6-91fd-fd1d990c3447","series":0,"name":"replace","transplant":{"toString":"t = left","position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"variableMap":{"t":"index","left":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10],"tindex":"692207fa-1220-11e6-91fd-b9fb8db593f4","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] parts = line.split(\"=\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:285","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"=\")"},"variableMap":{"line":"inputContext"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:519","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'))"},"status":-1},{"failures":[],"tindex":"692207fb-1220-11e6-91fd-537e101fa680","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int n = accentedWord.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:357","type":"CtLocalVariableImpl","sourcecode":"final int int = accentedWord.length()"},"status":-2},{"failures":[],"tindex":"692207fc-1220-11e6-91fd-2bfbb08671cc","series":0,"name":"replace","transplant":{"toString":"int rounds = org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT","position":"org.apache.commons.codec.digest.Sha2Crypt:139","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int"},"variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT":"r"},"type":"adrStmt","transplantationPoint":{"toString":"int v = r ^ (r >>> 16)","position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"status":-3},{"failures":[],"tindex":"69222f0d-1220-11e6-91fd-9da971cc9372","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:196","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder"},"variableMap":{"phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"return phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:335","type":"CtReturnImpl","sourcecode":"return phonemeBuilder"},"status":-3},{"failures":[],"tindex":"69222f0e-1220-11e6-91fd-2df077c83cd5","series":0,"name":"replace","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"maxPhonemes","len":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme left : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme join = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:109","type":"CtForEachImpl","sourcecode":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}"},"status":-3},{"failures":[0,1],"tindex":"6922561f-1220-11e6-91fd-bbd8ba727386","series":0,"name":"replace","transplant":{"toString":"result.append(\"KL\", \"L\")","position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"status":-1},{"failures":[],"tindex":"69225620-1220-11e6-91fd-3f50b9249ca9","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int nameLength = name.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:160","type":"CtLocalVariableImpl","sourcecode":"final int int = name.length()"},"status":-2},{"failures":[],"tindex":"69225621-1220-11e6-91fd-e71f0bbc7bfe","series":0,"name":"replace","transplant":{"toString":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}","position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtIfImpl","sourcecode":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}"},"variableMap":{"input":"input","this":"this","content":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        final java.util.regex.Matcher matcher = pattern.matcher(input);\n        return matcher.find();\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:589","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n        return matcher.find();\n    }\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":12,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
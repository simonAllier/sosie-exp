{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":37,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":11,"org.apache.commons.codec.binary.HexTest.testCustomCharset":51,"org.apache.commons.codec.language.NysiisTest.testSnat":123,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":29,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":138,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":136,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":137,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":36,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":79,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":78,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":92,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":111,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":170,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":73,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":90,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":24,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":68,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":5,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":49,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":85,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":164,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":83,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":86,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":109,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":22,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":94,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":176,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":172,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":179,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":158,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":149,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":151,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":169,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":150,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":175,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":80,"org.apache.commons.codec.language.NysiisTest.testCap":112,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":69,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":148,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":14,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":146,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":96,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":58,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":87,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":97,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":147,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":15,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":34,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":39,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":46,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":102,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":28,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":33,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":55,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":60,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":99,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":32,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":9,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":10,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":84,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":140,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":107,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":30,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":66,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":62,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":155,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":4,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":130,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":167,"org.apache.commons.codec.language.SoundexTest.testB650":135,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":6,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":108,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":23,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":52,"org.apache.commons.codec.language.SoundexTest.testNewInstance":143,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":161,"org.apache.commons.codec.language.NysiisTest.testTranan":127,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":174,"org.apache.commons.codec.language.NysiisTest.testFal":115,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":57,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":152,"org.apache.commons.codec.language.NysiisTest.testSnad":122,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":104,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":63,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":163,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":0,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":129,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":48,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":132,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":133,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":134,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":72,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":89,"org.apache.commons.codec.language.NysiisTest.testDropBy":125,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":165,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":26,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":61,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":77,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":153,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":13,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":103,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":156,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":19,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":64,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":160,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":75,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":74,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":54,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":171,"org.apache.commons.codec.language.NysiisTest.testRule2":117,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":173,"org.apache.commons.codec.language.NysiisTest.testRule1":116,"org.apache.commons.codec.language.NysiisTest.testRule7":120,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":159,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":98,"org.apache.commons.codec.language.NysiisTest.testRule6":119,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":20,"org.apache.commons.codec.language.NysiisTest.testRule5":118,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":70,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":3,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":144,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":124,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":168,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":53,"org.apache.commons.codec.language.NysiisTest.testBran":121,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":128,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":8,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":93,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":105,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":141,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":82,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":65,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":27,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":59,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":7,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":38,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":106,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":16,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":18,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":91,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":178,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":162,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":145,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":131,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":157,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":76,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":31,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":2,"org.apache.commons.codec.language.NysiisTest.testDad":113,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":35,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":42,"org.apache.commons.codec.language.NysiisTest.testOthers":126,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull":177,"org.apache.commons.codec.language.SoundexTest.testDifference":142,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":110,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":56,"org.apache.commons.codec.language.NysiisTest.testDan":114,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":17,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":101,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":40,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0":100,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":71,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":25,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":67},"transformations":[{"failures":[0,1,2,3,4,5],"tindex":"1de706e2-3d95-11e6-a725-1d95a3c19e0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:473","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:467","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer)"},"status":-1},{"failures":[6,7,8,9,10],"tindex":"1de72df3-3d95-11e6-a725-8321944eb5dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:193","type":"CtIfImpl","sourcecode":"if (current == last) {\n    continue;\n} else if (current != 0) {\n    sBuf.append(current);\n} "},"status":-1},{"failures":[11,12,13],"tindex":"1de72df4-3d95-11e6-a725-1b0953f27787","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:400","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[12,13],"tindex":"1de72df5-3d95-11e6-a725-09ae08ea307e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:424","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[14,15],"tindex":"1de72df6-3d95-11e6-a725-835018f68467","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:357","type":"CtAssignmentImpl","sourcecode":"code = '2'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"status":-1},{"failures":[16,17,18,19,20,21,22,23],"tindex":"1de72df7-3d95-11e6-a725-43f348c3f9be","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:74","type":"CtInvocationImpl","sourcecode":"buffer.append(charset)"},"status":-1},{"failures":[],"tindex":"1de72df8-3d95-11e6-a725-f326dc2c277f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:519","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":0},{"failures":[],"tindex":"1de72df9-3d95-11e6-a725-d5c21529db1e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.B64:60","type":"CtWhileImpl","sourcecode":"while ((n--) > 0) {\n    buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n    w >>= 6;\n}"},"variableMap":{"w":"index","buffer":"string","n":"index","org.apache.commons.codec.digest.B64.B64T":"test"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:362","type":"CtIfImpl","sourcecode":"if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n    final java.lang.String java.lang.String = string.substring(index, (index + (test.length())));\n    matches = substring.equals(test);\n} "},"status":-2},{"failures":[],"tindex":"1de7550a-3d95-11e6-a725-bfd7b8a6bce4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"c <<= 1"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:742","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":0},{"failures":[],"tindex":"1de7550b-3d95-11e6-a725-dbffa378ad59","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:505","type":"CtIfImpl","sourcecode":"if (!boxes) {\n    if (startsWith && endsWith) {\n        if ((content.length()) == 0) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return (input.length()) == 0;\n                }\n            };\n        } else {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return input.equals(content);\n                }\n            };\n        }\n    } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n        return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n    } else if (startsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n            }\n        };\n    } else if (endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n            }\n        };\n    } \n} else {\n    final boolean boolean = content.startsWith(\"[\");\n    final boolean boolean = content.endsWith(\"]\");\n    if (startsWithBox && endsWithBox) {\n        java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n        if (!(boxContent.contains(\"[\"))) {\n            final boolean boolean = boxContent.startsWith(\"^\");\n            if (negate) {\n                boxContent = boxContent.substring(1);\n            } \n            final java.lang.String java.lang.String = boxContent;\n            final boolean boolean = !negate;\n            if (startsWith && endsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                    }\n                };\n            } else if (startsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                    }\n                };\n            } else if (endsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                    }\n                };\n            } \n        } \n    } \n}"},"status":0},{"failures":[24,25,26,27,28],"tindex":"1de7550c-3d95-11e6-a725-55fe8bcfc9ed","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:217","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[12,13],"tindex":"1de7550d-3d95-11e6-a725-d51c14f4b254","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:213","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = 0"},"variableMap":{"length":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:524","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"1de7550e-3d95-11e6-a725-3d29fb3c250f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:191","type":"CtInvocationImpl","sourcecode":"ls.add(line)"},"variableMap":{"line":"lang","ls":"ls"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:142","type":"CtInvocationImpl","sourcecode":"ls.add(lang)"},"status":-2},{"failures":[],"tindex":"1de77c1f-3d95-11e6-a725-7dcf7d16c2d2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"variableMap":{"t":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","left":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[29,30,31],"tindex":"1de77c20-3d95-11e6-a725-25ec3a43ac1e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:478","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer)"},"status":-1},{"failures":[32,12,13],"tindex":"1de77c21-3d95-11e6-a725-1362ad2639f5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"variableMap":{"encodeSize":"index","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:285","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"1de77c22-3d95-11e6-a725-2d1db6d8ade7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp))"},"variableMap":{"tempResult":"singleByte","pBytes":"singleByte","keyLen":"org.apache.commons.codec.binary.BaseNCodec.EOF","cp":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[],"tindex":"1de77c23-3d95-11e6-a725-cba43977380b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"status":0},{"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"tindex":"1de77c24-3d95-11e6-a725-5f5857d0edb5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:145","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[((240 & (data[i])) >>> 4)]"},"status":-1},{"failures":[12,13],"tindex":"1de77c25-3d95-11e6-a725-814bdf31bbae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[56,57,58,59,60],"tindex":"1de77c26-3d95-11e6-a725-5386e37d6bac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:145","type":"CtInvocationImpl","sourcecode":"buffer.write(hex2)"},"status":-1},{"failures":[61,62,63,64],"tindex":"1de7a337-3d95-11e6-a725-7dc035ddaa48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:205","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"status":-1},{"failures":[],"tindex":"1de7a338-3d95-11e6-a725-5167b154b94d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_NN"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[65],"tindex":"1de7a339-3d95-11e6-a725-c73bde3fb145","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:197","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[56,57,58,66,60],"tindex":"1de7a33a-3d95-11e6-a725-09f42c1736dd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"u"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:174","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"status":-1},{"failures":[],"tindex":"1de7a33b-3d95-11e6-a725-93b6886be93b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE","y":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:261","type":"CtInvocationImpl","sourcecode":"ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int)"},"status":-2},{"failures":[],"tindex":"1de7a33c-3d95-11e6-a725-93b973ea1ed4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:55","type":"CtLocalVariableImpl","sourcecode":"int int = start"},"variableMap":{"start":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:343","type":"CtLocalVariableImpl","sourcecode":"final int int = context.int"},"status":-2},{"failures":[],"tindex":"1de7a33d-3d95-11e6-a725-479dc44ab9ce","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"variableMap":{"length":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:273","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[(raw.int) << 3]"},"status":-2},{"failures":[],"tindex":"1de7a33e-3d95-11e6-a725-a985e3b0d330","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:138","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"1de7a33f-3d95-11e6-a725-7189bafde605","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"variableMap":{"diff":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:362","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-2},{"failures":[67,68],"tindex":"1de7ca50-3d95-11e6-a725-4329bc164873","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"variableMap":{"b":"c","t":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"status":-1},{"failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"tindex":"1de7ca51-3d95-11e6-a725-97ddb24620d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","ruleType":"rt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtIfImpl","sourcecode":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} "},"status":-1},{"failures":[],"tindex":"1de7ca52-3d95-11e6-a725-3f2b85fa10c8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:85","type":"CtIfImpl","sourcecode":"if (!(source instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n} "},"status":0},{"failures":[67,68],"tindex":"1de7ca53-3d95-11e6-a725-5dc82488d042","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:311","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results)"},"variableMap":{"left":"right","right":"right","results":"results"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:308","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 16, 65535, results)"},"status":-1},{"failures":[],"tindex":"1de7ca54-3d95-11e6-a725-27d7fbaef28d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:497","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"1de7ca55-3d95-11e6-a725-9d0ee5d6d70c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:414","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"variableMap":{"inMultilineComment":"doEncode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:46","type":"CtAssignmentImpl","sourcecode":"this.boolean = doEncode"},"status":-2},{"failures":[65,87,88,89,90,91,92],"tindex":"1de7ca56-3d95-11e6-a725-a9f2c25de70b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:289","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[],"tindex":"1de7ca57-3d95-11e6-a725-4b1aa803a22c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"variableMap":{"ch":"alternate"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:953","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"status":-2},{"failures":[93,94,95],"tindex":"1de7f168-3d95-11e6-a725-75518f344657","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"l_raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-1},{"failures":[67,68],"tindex":"1de7f169-3d95-11e6-a725-d14f6d573300","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"d","cnt":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"status":-1},{"failures":[],"tindex":"1de7f16a-3d95-11e6-a725-1904e2fa5a5b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"text","txt":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"1de7f16b-3d95-11e6-a725-9116f6c9641b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"patternLength","to":"patternLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:222","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean)) {\n    patternLength = 1;\n} "},"status":-2},{"failures":[96,97],"tindex":"1de7f16c-3d95-11e6-a725-bf5abf5bad62","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:207","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"bigBytes","key":"bigBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-1},{"failures":[98,99],"tindex":"1de7f16d-3d95-11e6-a725-1f45af11692f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:297","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[],"tindex":"1de7f16e-3d95-11e6-a725-bd5078fea2db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:367","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"variableMap":{"u":"c","buffer":"out","l":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:115","type":"CtIfImpl","sourcecode":"if (c > 0) {\n    java.io.OutputStream.write(buf, 0, c);\n} "},"status":-2},{"failures":[],"tindex":"1de7f16f-3d95-11e6-a725-2b7e1629bb6c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:297","type":"CtAssignmentImpl","sourcecode":"context.byte[] = null"},"variableMap":{"context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:256","type":"CtAssignmentImpl","sourcecode":"context.byte[] = b"},"status":-2},{"failures":[67,68],"tindex":"1de7f170-3d95-11e6-a725-0719cdd7c508","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"variableMap":{"c":"c","d":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:356","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[],"tindex":"1de7f171-3d95-11e6-a725-35a96941461e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:420","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = l + remainder"},"variableMap":{"l":"source","remainder":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:490","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = cleanup(source)"},"status":-2},{"failures":[67,68],"tindex":"1de81882-3d95-11e6-a725-5f1df66501cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:378","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = s"},"status":-1},{"failures":[],"tindex":"1de81883-3d95-11e6-a725-c3ffb8e141f5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"variableMap":{"keyLen":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[context.int]"},"status":-2},{"failures":[100,101],"tindex":"1de81884-3d95-11e6-a725-3976a8c9919d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:178","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index))"},"status":-1},{"failures":[],"tindex":"1de81885-3d95-11e6-a725-fd032b22a7b5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"to","name2Size":"terminator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-2},{"failures":[],"tindex":"1de81886-3d95-11e6-a725-4b6bfea8661f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"str","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:48","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}"},"status":-2},{"failures":[],"tindex":"1de81887-3d95-11e6-a725-99fc03403d70","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"pos","l_ascii":"buffer","bits":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:354","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[],"tindex":"1de81888-3d95-11e6-a725-0f649585795f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:81","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[29,30,31],"tindex":"1de81889-3d95-11e6-a725-6f33f34d33de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:482","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:474","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer)"},"status":-1},{"failures":[12,13],"tindex":"1de8188a-3d95-11e6-a725-b172c9254624","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[],"tindex":"1debc20b-3d95-11e6-a725-afc0d3685083","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:84","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"status":0},{"failures":[102,103,104,105,106,107,108],"tindex":"1debe91c-3d95-11e6-a725-6124a674bede","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:269","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"1debe91d-3d95-11e6-a725-23a23e5c3d17","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"org.apache.commons.codec.language.Caverphone2.TEN_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String"},"status":-2},{"failures":[],"tindex":"1debe91e-3d95-11e6-a725-03b43c357597","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:252","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"1debe91f-3d95-11e6-a725-c1ec4893f204","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int"},"status":-2},{"failures":[],"tindex":"1debe920-3d95-11e6-a725-5151aaebafa8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n    if (incl.contains(\" \")) {\n        throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n    } else {\n        lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n            final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n            final int int = currentLine;\n            final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                private final int myLine = cLine;\n\n                private final java.lang.String loc = location;\n\n                @java.lang.Override\n                public java.lang.String toString() {\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    sb.append(\"Rule\");\n                    sb.append(\"{line=\").append(int);\n                    sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                    sb.append(\", pat='\").append(pat).append('\\'');\n                    sb.append(\", lcon='\").append(lCon).append('\\'');\n                    sb.append(\", rcon='\").append(rCon).append('\\'');\n                    sb.append('}');\n                    return sb.toString();\n                }\n            };\n            final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n            java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                lines.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"variableMap":{"loc":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","rawLine":"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE","$anonymous0":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","e":"e","line":"org.apache.commons.codec.language.bm.ResourceConstants.CMT","pattern":"loc","length":"currentLine","$anonymous3":"$anonymous3","$anonymous2":"location","$anonymous1":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","myLine":"currentLine","org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"pattern","location":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","lines":"lines","currentLine":"currentLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:407","type":"CtWhileImpl","sourcecode":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String java.lang.String = scanner.nextLine();\n    java.lang.String java.lang.String = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inMultilineComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inMultilineComment = true;\n        } else {\n            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            if (cmtI >= 0) {\n                line = line.substring(0, cmtI);\n            } \n            line = line.trim();\n            if ((line.length()) == 0) {\n                continue;\n            } \n            if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n                if (incl.contains(\" \")) {\n                    throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n                } else {\n                    lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n                }\n            } else {\n                final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                if ((parts.int) != 4) {\n                    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                } else {\n                    try {\n                        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                        final int int = currentLine;\n                        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                            private final int myLine = cLine;\n\n                            private final java.lang.String loc = location;\n\n                            @java.lang.Override\n                            public java.lang.String toString() {\n                                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                sb.append(\"Rule\");\n                                sb.append(\"{line=\").append(int);\n                                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                                sb.append(\", pat='\").append(pat).append('\\'');\n                                sb.append(\", lcon='\").append(lCon).append('\\'');\n                                sb.append(\", rcon='\").append(rCon).append('\\'');\n                                sb.append('}');\n                                return sb.toString();\n                            }\n                        };\n                        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                        if (rules == null) {\n                            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                            lines.put(patternKey, rules);\n                        } \n                        rules.add(r);\n                    } catch (final java.lang.IllegalArgumentException e) {\n                        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"1debe921-3d95-11e6-a725-7f9a5b124b6e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"keyLen","lineSeparator":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:275","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= keyLen ; i++) {\n    altCtx.update(keyBytes);\n}"},"status":-2},{"failures":[6,7,8,9,10,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152],"tindex":"1dec1032-3d95-11e6-a725-81e905cd16b3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:437","type":"CtAssignmentImpl","sourcecode":"chrs[index] = element[1]"},"variableMap":{"chrs":"chars","index":"i","element":"chars"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[111,122,123,125,126,127,128],"tindex":"1dec1033-3d95-11e6-a725-45dfd98cf939","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[153,154,155,156],"tindex":"1dec1034-3d95-11e6-a725-c1bc0e15a47c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:150","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.close()"},"status":-1},{"failures":[153,154,157,158,159,160,161,162,163],"tindex":"1dec1035-3d95-11e6-a725-99dab0c3e004","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(i))"},"variableMap":{"i":"org.apache.commons.codec.binary.Base32.MASK_5BITS","singleByte":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:516","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"1dec1036-3d95-11e6-a725-a730c5d6c848","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:469","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[12,13],"tindex":"1dec1037-3d95-11e6-a725-09b46b96778a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:727","type":"CtInvocationImpl","sourcecode":"result.append(\"TS\", \"FX\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:607","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n    result.append('S');\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[11,12,13],"tindex":"1dec1038-3d95-11e6-a725-9d7a782d1a2e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:292","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"1dec1039-3d95-11e6-a725-093d5ac39144","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"status":0},{"failures":[],"tindex":"1dec103a-3d95-11e6-a725-1f0c6b3f77d6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(bytes)"},"variableMap":{"bytes":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return pArray"},"status":0},{"failures":[69,70,164,165,71,72,73,74,75,76,77,166,167,78,79,168,80,169,170,171,81,82,83,84,85,86,172,173],"tindex":"1dec103b-3d95-11e6-a725-03840a222171","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"line","leftCharacter":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","rightCharacter":"line","location":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-1},{"failures":[],"tindex":"1dec103c-3d95-11e6-a725-c94ace91b92d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[12,13],"tindex":"1dec103d-3d95-11e6-a725-3faecd1af4c1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:419","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\")"},"status":-1},{"failures":[70,72,73,76,83,84,85,86],"tindex":"1dec103e-3d95-11e6-a725-6302f2e649f8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:215","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int)"},"status":-1},{"failures":[],"tindex":"1dec374f-3d95-11e6-a725-ef4a45b820d4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:361","type":"CtAssignmentImpl","sourcecode":"ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"variableMap":{"ctx":"altCtx","algorithm":"algorithm"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:307","type":"CtAssignmentImpl","sourcecode":"altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-2},{"failures":[],"tindex":"1dec3750-3d95-11e6-a725-e9acb4f18791","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:517","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}"},"variableMap":{"input":"input","content":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:510","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return (input.length()) == 0;\n    }\n}"},"status":-2},{"failures":[],"tindex":"1dec3751-3d95-11e6-a725-2f7ab7065a03","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('^')"},"status":0},{"failures":[46],"tindex":"1dec3752-3d95-11e6-a725-f919bed00351","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:161","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:500","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"status":-1},{"failures":[],"tindex":"1dec3753-3d95-11e6-a725-175fa86b09e4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:67","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"status":0},{"failures":[],"tindex":"1dec3754-3d95-11e6-a725-7d0350737714","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:119","type":"CtIfImpl","sourcecode":"if (propagate) {\n    java.io.OutputStream.flush();\n} "},"status":0},{"failures":[110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],"tindex":"1dec3755-3d95-11e6-a725-072099b20b4f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"variableMap":{"length":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:283","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext)"},"status":-1},{"failures":[],"tindex":"1dec3756-3d95-11e6-a725-25b3373ebcf6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:141","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = scanner.nextLine()"},"variableMap":{"scanner":"lsScanner"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = lsScanner.nextLine().trim()"},"status":0},{"failures":[],"tindex":"1dec3757-3d95-11e6-a725-57782ac5dc3f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"status":-2},{"failures":[174],"tindex":"1dec3758-3d95-11e6-a725-a1d3496c0a86","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"status":-1},{"failures":[],"tindex":"1dec3759-3d95-11e6-a725-55060fcee42a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"status":-2},{"failures":[],"tindex":"1dec375a-3d95-11e6-a725-d11dd675dcee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"length","name2Size":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"status":-2},{"failures":[],"tindex":"1dec375b-3d95-11e6-a725-2da59c096b9b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:192","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-2},{"failures":[12,13],"tindex":"1dec5e6c-3d95-11e6-a725-3922130cd901","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"result.appendPrimary('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"status":-1},{"failures":[],"tindex":"1dec5e6d-3d95-11e6-a725-7f8cdd9c818b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.NameType:42","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"status":-2},{"failures":[],"tindex":"1dec5e6e-3d95-11e6-a725-87407ac6220f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"length","keyLen":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:208","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = data.int"},"status":-2},{"failures":[],"tindex":"1dec5e6f-3d95-11e6-a725-0bcf3f90f96e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"replacedName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:392","type":"CtReturnImpl","sourcecode":"return replacedName"},"status":-2},{"failures":[175,176],"tindex":"1dec5e70-3d95-11e6-a725-578f94a81994","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:249","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}"},"status":-1},{"failures":[],"tindex":"1dec5e71-3d95-11e6-a725-e9d4a13060e5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"this":"this","lineSeparator":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:431","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"status":-2},{"failures":[6,7,8,9,10],"tindex":"1dec5e72-3d95-11e6-a725-cb89367de0ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:179","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-1},{"failures":[177],"tindex":"1dec5e73-3d95-11e6-a725-5d57641aba5d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-1},{"failures":[178,179],"tindex":"1dec5e74-3d95-11e6-a725-9901de6b158f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[32,11,12,13],"tindex":"1dec5e75-3d95-11e6-a725-eb184686d892","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"index","cnt":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":66,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":14,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":63,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":16,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":25,"org.apache.commons.codec.binary.Base64Test.testBase64":64,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":26,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":75,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":31,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":4,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":12,"org.apache.commons.codec.binary.Base64Test.testUUID":46,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":55,"org.apache.commons.codec.binary.Base64Test.testSingletons":60,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":39,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":41,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":7,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":8,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":6,"org.apache.commons.codec.binary.Base64Test.testPairs":45,"org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks":23,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":54,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":40,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":67,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":5,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":24,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":49,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":44,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":50,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":53,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":73,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":30,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":43,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":51,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":0,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":52,"org.apache.commons.codec.binary.Base64Test.testCodec68":61,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":28,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":19,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":57,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":13,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":58,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":68,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":65,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":71,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":2,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":59,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":33,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":27,"org.apache.commons.codec.language.SoundexTest.testB650":29,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":34,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":22,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":42,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":69,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":37,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":9,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":10,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":48,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":62,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":20,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":36,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":21,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":70,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":72,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":11,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":56,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":47,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":18,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":74},"transformations":[{"failures":[],"tindex":"8dac8f3d-17be-11e6-8d70-f9d8aee65270","series":0,"name":"replace","transplant":{"toString":"final int startDst = (bitlen / 8) - len","position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"variableMap":{"bitlen":"index","len":"index"},"type":"adrStmt","transplantationPoint":{"toString":"int b = bytes[index]","position":"org.apache.commons.codec.net.QuotedPrintableCodec:202","type":"CtLocalVariableImpl","sourcecode":"int int = bytes[index]"},"status":-2},{"failures":[0],"tindex":"8dacb64e-17be-11e6-8d70-49bd9bc1369c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"string","key":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.UTF_16BE)","position":"org.apache.commons.codec.binary.StringUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[1,2,3,4],"tindex":"8dacb64f-17be-11e6-8d70-d95320ed07c4","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return phonemeBuilder.makeString()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:481","type":"CtReturnImpl","sourcecode":"return phonemeBuilder.makeString()"},"status":-1},{"failures":[],"tindex":"8dacdd60-17be-11e6-8d70-1ff5c2a2217a","series":0,"name":"replace","transplant":{"toString":"return value < 0 ? value + 256 : value","position":"org.apache.commons.codec.digest.UnixCrypt:322","type":"CtReturnImpl","sourcecode":"return value < 0 ? value + 256 : value"},"variableMap":{"value":"c"},"type":"adrStmt","transplantationPoint":{"toString":"return c","position":"org.apache.commons.codec.language.bm.Rule:94","type":"CtReturnImpl","sourcecode":"return c"},"status":-2},{"failures":[5,6],"tindex":"8dacdd61-17be-11e6-8d70-ab482f9f9367","series":0,"name":"add","transplant":{"toString":"b[8] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"b[8] = 0"},"variableMap":{"b":"l_ascii"},"type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"status":-1},{"failures":[7],"tindex":"8dacdd62-17be-11e6-8d70-6dd6af33d607","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"input = input.trim()","position":"org.apache.commons.codec.language.DoubleMetaphone:892","type":"CtAssignmentImpl","sourcecode":"input = input.trim()"},"status":-1},{"failures":[8,9],"tindex":"8dacdd63-17be-11e6-8d70-b557575b6c82","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ci\", \"si\")","position":"org.apache.commons.codec.language.Caverphone2:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"status":-1},{"failures":[],"tindex":"8dacdd64-17be-11e6-8d70-57e195072291","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.CharSequenceUtils:73","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"8dacdd65-17be-11e6-8d70-11a042d5c62b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i += patternLength","position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"variableMap":{"patternLength":"index","i":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:621","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-3},{"failures":[],"tindex":"8dad0476-17be-11e6-8d70-0f4a6299a8b6","series":0,"name":"add","transplant":{"toString":"final boolean useChunking = (lineLength > 0) && (chunkSeparatorLength > 0)","position":"org.apache.commons.codec.binary.BaseNCodec:208","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (lineLength > 0) && (chunkSeparatorLength > 0)"},"variableMap":{"chunkSeparatorLength":"length","lineLength":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean branchingRequired = ((replacements.length) > 1) && branching","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:520","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = ((replacements.int) > 1) && branching"},"status":-2},{"failures":[],"tindex":"8dad0477-17be-11e6-8d70-75a2afe2b947","series":0,"name":"replace","transplant":{"toString":"d = (d >>> 1) | (d << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:393","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"8dad0478-17be-11e6-8d70-878c33643afb","series":0,"name":"replace","transplant":{"toString":"return (org.apache.commons.codec.binary.Base64.this.encodeTable) == (org.apache.commons.codec.binary.Base64.URL_SAFE_ENCODE_TABLE)","position":"org.apache.commons.codec.binary.Base64:306","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.binary.Base64.this.byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])"},"variableMap":{"encodeTable":"arrayOctet","org.apache.commons.codec.binary.Base64.URL_SAFE_ENCODE_TABLE":"arrayOctet"},"type":"adrStmt","transplantationPoint":{"toString":"if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.Base64:539","type":"CtIfImpl","sourcecode":"if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n    return false;\n} "},"status":-3},{"failures":[],"tindex":"8dad0479-17be-11e6-8d70-e9f8711e7f25","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.BaseNCodec:497","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"8dad047a-17be-11e6-8d70-0b81602b675a","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"status":-2},{"failures":[],"tindex":"8dad2b8b-17be-11e6-8d70-cdf675516f48","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('_')","position":"org.apache.commons.codec.net.URLCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('_')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:100","type":"CtForImpl","sourcecode":"for (int int = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-2},{"failures":[10],"tindex":"8dad2b8c-17be-11e6-8d70-ef7bffb82604","series":0,"name":"replace","transplant":{"toString":"final int nameLength = name.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:160","type":"CtLocalVariableImpl","sourcecode":"final int int = name.length()"},"variableMap":{"name":"es2"},"type":"adrStmt","transplantationPoint":{"toString":"final int lengthToMatch = java.lang.Math.min(es1.length(), es2.length())","position":"org.apache.commons.codec.language.SoundexUtils:114","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(es1.length(), es2.length())"},"status":-1},{"failures":[],"tindex":"8dad2b8d-17be-11e6-8d70-0563eb49068b","series":0,"name":"add","transplant":{"toString":"final char[] chars = new char[len]","position":"org.apache.commons.codec.language.SoundexUtils:46","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[len]"},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] newData = new char[length]","position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"status":-2},{"failures":[],"tindex":"8dad2b8e-17be-11e6-8d70-dd757b30fc5b","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:641","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()"},"status":-2},{"failures":[],"tindex":"8dad2b8f-17be-11e6-8d70-07decf569fdb","series":0,"name":"replace","transplant":{"toString":"this.algorithm = algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:78","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = algorithm"},"variableMap":{"algorithm":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-2},{"failures":[],"tindex":"8dad52a0-17be-11e6-8d70-99837726d7de","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder = phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:185","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = phonemeBuilder"},"variableMap":{"phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:477","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1)"},"status":-2},{"failures":[],"tindex":"8dadeee1-17be-11e6-8d70-8134a41eea8c","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('*')","position":"org.apache.commons.codec.net.URLCodec:89","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('*')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:100","type":"CtForImpl","sourcecode":"for (int int = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-2},{"failures":[11,12,13,14],"tindex":"8dadeee2-17be-11e6-8d70-2faad2ed8a40","series":0,"name":"replace","transplant":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.append('T');\n} else {\n    result.append('0', 'T');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:684","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.append('T');\n} else {\n    result.append('0', 'T');\n}"},"status":-1},{"failures":[],"tindex":"8dadeee3-17be-11e6-8d70-23459c01292e","series":0,"name":"replace","transplant":{"toString":"str = str.substring(0, ((str.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"variableMap":{"str":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:144","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[],"tindex":"8dadeee4-17be-11e6-8d70-f138e58d4685","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"lsScanner.close()","position":"org.apache.commons.codec.language.bm.Languages:196","type":"CtInvocationImpl","sourcecode":"lsScanner.close()"},"status":-2},{"failures":[],"tindex":"8dadeee5-17be-11e6-8d70-89f64f5f5b68","series":0,"name":"replace","transplant":{"toString":"inExtendedComment = false","position":"org.apache.commons.codec.language.bm.Languages:185","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"variableMap":{"inExtendedComment":"eof"},"type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base64:338","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"8dadeee6-17be-11e6-8d70-45e8f9f0df60","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(str, getDefaultCharset())","position":"org.apache.commons.codec.net.URLCodec:293","type":"CtReturnImpl","sourcecode":"return decode(str, getDefaultCharset())"},"status":-2},{"failures":[11,12,15,13,14],"tindex":"8dae15f7-17be-11e6-8d70-b9c91706ad0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:303","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"8dae15f8-17be-11e6-8d70-b12a6429eb6c","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inExtendedComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-2},{"failures":[12,16,17,14,18],"tindex":"8dae15f9-17be-11e6-8d70-177abbd2f9ba","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.toString()","position":"org.apache.commons.codec.language.DoubleMetaphone:1001","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.toString()"},"status":-1},{"failures":[],"tindex":"8dae15fa-17be-11e6-8d70-752acf78a5ad","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)"},"variableMap":{"altResult":"b","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.COV2CHAR[c])));\n}","position":"org.apache.commons.codec.digest.UnixCrypt:237","type":"CtForImpl","sourcecode":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n}"},"status":-2},{"failures":[],"tindex":"8dae15fb-17be-11e6-8d70-a32b69ebcfaa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(baseNCodec.hasData(context))) {\n    final byte[] buf = new byte[doEncode ? 4096 : 8192];\n    final int c = in.read(buf);\n    if (doEncode) {\n        baseNCodec.encode(buf, 0, c, context);\n    } else {\n        baseNCodec.decode(buf, 0, c, context);\n    }\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:156","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n    final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n    final int int = java.io.InputStream.read(buf);\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n} "},"status":-2},{"failures":[19],"tindex":"8dae15fc-17be-11e6-8d70-718a59f64c04","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:197","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[11,12,16,20,21,13,14,22],"tindex":"8dae15fd-17be-11e6-8d70-838fa4f2e424","series":0,"name":"replace","transplant":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:538","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}"},"status":-1},{"failures":[],"tindex":"8dae3d0e-17be-11e6-8d70-af8edcd68d47","series":0,"name":"replace","transplant":{"toString":"int index2 = start","position":"org.apache.commons.codec.binary.CharSequenceUtils:55","type":"CtLocalVariableImpl","sourcecode":"int int = start"},"variableMap":{"start":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int keyLen = keyBytes.length","position":"org.apache.commons.codec.digest.Md5Crypt:180","type":"CtLocalVariableImpl","sourcecode":"final int int = keyBytes.int"},"status":-2},{"failures":[],"tindex":"8dae3d0f-17be-11e6-8d70-71d933c7fe6d","series":0,"name":"replace","transplant":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:417","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray())","position":"org.apache.commons.codec.binary.BinaryCodec:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray())"},"status":-2},{"failures":[23],"tindex":"8dae3d10-17be-11e6-8d70-7fb396f92678","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.phonemeText.append(phonemeRight.phonemeText)","position":"org.apache.commons.codec.language.bm.Rule:116","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(phonemeRight.java.lang.StringBuilder)"},"status":-1},{"failures":[1,2,3,4,24,25,26,27],"tindex":"8dae3d11-17be-11e6-8d70-73123a4a3f46","series":0,"name":"add","transplant":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"variableMap":{"rules":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n    final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n    final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n    final int cLine = currentLine;\n    final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n        private final int myLine = cLine;\n\n        private final java.lang.String loc = location;\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n            sb.append(\"Rule\");\n            sb.append(\"{line=\").append(myLine);\n            sb.append(\", loc='\").append(loc).append('\\'');\n            sb.append(\", pat='\").append(pat).append('\\'');\n            sb.append(\", lcon='\").append(lCon).append('\\'');\n            sb.append(\", rcon='\").append(rCon).append('\\'');\n            sb.append('}');\n            return sb.toString();\n        }\n    };\n    final java.lang.String patternKey = r.pattern.substring(0, 1);\n    java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n        lines.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}","position":"org.apache.commons.codec.language.bm.Rule:449","type":"CtTryImpl","sourcecode":"try {\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n    final int int = currentLine;\n    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n        private final int myLine = cLine;\n\n        private final java.lang.String loc = location;\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sb.append(\"Rule\");\n            sb.append(\"{line=\").append(int);\n            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n            sb.append(\", pat='\").append(pat).append('\\'');\n            sb.append(\", lcon='\").append(lCon).append('\\'');\n            sb.append(\", rcon='\").append(rCon).append('\\'');\n            sb.append('}');\n            return sb.toString();\n        }\n    };\n    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n        lines.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}"},"status":-1},{"failures":[],"tindex":"8dae6322-17be-11e6-8d70-431fe2c95afd","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QCodec.this.charset.name()","position":"org.apache.commons.codec.net.QCodec:337","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.java.nio.charset.Charset.name()"},"status":0},{"failures":[],"tindex":"8dae6323-17be-11e6-8d70-bd6279c3b790","series":0,"name":"add","transplant":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"variableMap":{"maxPhonemes":"w"},"type":"adrStmt","transplantationPoint":{"toString":"w >>= 6","position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"status":-2},{"failures":[],"tindex":"8daed854-17be-11e6-8d70-0ffbbdd54744","series":0,"name":"add","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:94","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[28],"tindex":"8daeff65-17be-11e6-8d70-3d9fefae597c","series":0,"name":"replace","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.QuotedPrintableCodec:576","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"8daeff66-17be-11e6-8d70-1d2ef7e00f06","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"t"},"type":"adrStmt","transplantationPoint":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"status":-2},{"failures":[],"tindex":"8daeff67-17be-11e6-8d70-198bcb29408c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:600","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"variableMap":{"str":"str","charset":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str.toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.SoundexUtils:54","type":"CtReturnImpl","sourcecode":"return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[],"tindex":"8daeff68-17be-11e6-8d70-b1aa2f9f3d0d","series":0,"name":"add","transplant":{"toString":"final char ch = getNextChar()","position":"org.apache.commons.codec.language.ColognePhonetic:274","type":"CtLocalVariableImpl","sourcecode":"final char char = getNextChar()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char last","position":"org.apache.commons.codec.language.Soundex:267","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[7],"tindex":"8daeff69-17be-11e6-8d70-1330b6269187","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.DoubleMetaphone:890","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[11,12],"tindex":"8daeff6a-17be-11e6-8d70-4b1ec6fc44e9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:343","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[],"tindex":"8daeff6b-17be-11e6-8d70-43c295ff2b87","series":0,"name":"add","transplant":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.QCodec:271","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)"},"status":-2},{"failures":[],"tindex":"8daeff6c-17be-11e6-8d70-37e4fd622e5b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"line = line.trim()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:277","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"status":0},{"failures":[],"tindex":"8daf267d-17be-11e6-8d70-b3aad31c66b4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"nextBranches.clear()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"nextBranches.clear()"},"status":0},{"failures":[29,30],"tindex":"8daf267e-17be-11e6-8d70-5fe8cc12ea08","series":0,"name":"replace","transplant":{"toString":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtIfImpl","sourcecode":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} "},"variableMap":{"c":"mappedChar"},"type":"adrStmt","transplantationPoint":{"toString":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"status":-1},{"failures":[],"tindex":"8daf267f-17be-11e6-8d70-7307c68093c8","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.length()) >= (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.maxLength)) && ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.length()) >= (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.maxLength))","position":"org.apache.commons.codec.language.DoubleMetaphone:1005","type":"CtReturnImpl","sourcecode":"return ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) >= (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) && ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) >= (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int))"},"status":0},{"failures":[],"tindex":"8daf2680-17be-11e6-8d70-6bb8c55fb106","series":0,"name":"add","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder(\"             \")","position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"status":-2},{"failures":[],"tindex":"8daf2681-17be-11e6-8d70-0b3d006fc5c8","series":0,"name":"replace","transplant":{"toString":"return out","position":"org.apache.commons.codec.digest.UnixCrypt:317","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"schedule"},"type":"adrStmt","transplantationPoint":{"toString":"return schedule","position":"org.apache.commons.codec.digest.UnixCrypt:381","type":"CtReturnImpl","sourcecode":"return schedule"},"status":-3},{"failures":[],"tindex":"8daf2682-17be-11e6-8d70-cbd01845e2f6","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"t+\", \"T\")","position":"org.apache.commons.codec.language.Caverphone1:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"t+\", \"T\")"},"variableMap":{"txt":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:316","type":"CtAssignmentImpl","sourcecode":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))"},"status":-2},{"failures":[],"tindex":"8daf2683-17be-11e6-8d70-b16cb6b6e26c","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(keyBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:251","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"status":-2},{"failures":[],"tindex":"8daf2684-17be-11e6-8d70-3dd53bf7ebc0","series":0,"name":"replace","transplant":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:279","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}"},"variableMap":{"ii":"ii","jj":"jj","l_ascii":"ascii","length":"jj","raw":"l_raw","org.apache.commons.codec.binary.BinaryCodec.BITS":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n    } \n}","position":"org.apache.commons.codec.binary.BinaryCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n    } \n}"},"status":-3},{"failures":[],"tindex":"8daf4d95-17be-11e6-8d70-b5dfb9a174f3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5, key)","position":"org.apache.commons.codec.digest.HmacUtils:63","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"variableMap":{"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5":"algorithm","key":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"status":-3},{"failures":[],"tindex":"8daf4d96-17be-11e6-8d70-e5830ff2ce39","series":0,"name":"replace","transplant":{"toString":"int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.length) - 3), bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:305","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes)"},"variableMap":{"bytes":"saltBytes","length":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int saltLen = saltBytes.length","position":"org.apache.commons.codec.digest.Sha2Crypt:156","type":"CtLocalVariableImpl","sourcecode":"final int int = saltBytes.int"},"status":-2},{"failures":[],"tindex":"8daf4d97-17be-11e6-8d70-39be2578054a","series":0,"name":"add","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"length","to":"i"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.length)","position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"status":-2},{"failures":[],"tindex":"8daf4d98-17be-11e6-8d70-4f001341ef42","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:730","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"8daf4d99-17be-11e6-8d70-b5bdd939cdfb","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String line = lsScanner.nextLine().trim()","position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = lsScanner.nextLine().trim()"},"status":-2},{"failures":[],"tindex":"8daf4d9a-17be-11e6-8d70-47e7d7ffc25d","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"org.apache.commons.codec.binary.BaseNCodec.EOF","tempResult":"singleByte","pBytes":"singleByte","cp":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"toString":"baseNCodec.encode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:145","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[31,32,33,34,35,36,37,38],"tindex":"8daf4d9b-17be-11e6-8d70-a58436791535","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}"},"status":-1},{"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"tindex":"8daf74ac-17be-11e6-8d70-6110c41ca039","series":0,"name":"add","transplant":{"toString":"java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len)","position":"org.apache.commons.codec.binary.Base64:768","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len)"},"variableMap":{"resizedBytes":"pArray","bigBytes":"pArray","len":"org.apache.commons.codec.binary.BaseNCodec.EOF","startSrc":"org.apache.commons.codec.binary.BaseNCodec.EOF","startDst":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"toString":"decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context)","position":"org.apache.commons.codec.binary.BaseNCodec:411","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"status":-1},{"failures":[],"tindex":"8daf74ad-17be-11e6-8d70-473708ac8a2a","series":0,"name":"add","transplant":{"toString":"this.encodedBlockSize = encodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"variableMap":{"encodedBlockSize":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"cnt -= blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"status":-2},{"failures":[74,75],"tindex":"8daf74ae-17be-11e6-8d70-af9124b2db1e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:348","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)"},"status":-1},{"failures":[],"tindex":"8daf74af-17be-11e6-8d70-b96b732c1d64","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"jj","to":"ii"},"type":"adrStmt","transplantationPoint":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:249","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}"},"status":-2},{"failures":[],"tindex":"8daf74b0-17be-11e6-8d70-8b54720bb635","series":0,"name":"add","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int c = in.read(buf)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:158","type":"CtLocalVariableImpl","sourcecode":"final int int = java.io.InputStream.read(buf)"},"status":-2},{"failures":[],"tindex":"8daf74b1-17be-11e6-8d70-492653fc7b35","series":0,"name":"add","transplant":{"toString":"cnt -= blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"a","cnt":"n"},"type":"adrStmt","transplantationPoint":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"status":-2},{"failures":[],"tindex":"8daf74b2-17be-11e6-8d70-e3355af449e5","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] charsToTrim = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] langs = parts[1].split(\"\\\\+\")","position":"org.apache.commons.codec.language.bm.Lang:174","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\")"},"status":-2},{"failures":[],"tindex":"8daf74b3-17be-11e6-8d70-edaac141f5d0","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder = phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:185","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = phonemeBuilder"},"variableMap":{"phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:477","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1)"},"status":-2},{"failures":[],"tindex":"8db010f4-17be-11e6-8d70-0911077155cf","series":0,"name":"add","transplant":{"toString":"throw new java.io.IOException(\"mark/reset not supported\")","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:181","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"mark/reset not supported\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN)))","position":"org.apache.commons.codec.language.bm.Lang:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)))"},"status":-2},{"failures":[],"tindex":"8db010f5-17be-11e6-8d70-131c8199fded","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:245","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"8db010f6-17be-11e6-8d70-b3d15a7e558e","series":0,"name":"replace","transplant":{"toString":"final boolean startsWithBox = content.startsWith(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:545","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.startsWith(\"[\")"},"variableMap":{"content":"boxContent"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean negate = boxContent.startsWith(\"^\")","position":"org.apache.commons.codec.language.bm.Rule:552","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = boxContent.startsWith(\"^\")"},"status":0},{"failures":[],"tindex":"8db03807-17be-11e6-8d70-210ec63cd40d","series":0,"name":"replace","transplant":{"toString":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.RADIX)) + \"): \") + b));\n} ","position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"variableMap":{"b":"org.apache.commons.codec.net.QCodec.BLANK","org.apache.commons.codec.net.URLCodec.RADIX":"length","i":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.net.QCodec.this.encodeBlanks) {\n    for (int i = 0 ; i < (data.length) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n            data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n        } \n    }\n} ","position":"org.apache.commons.codec.net.QCodec:158","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.net.QCodec.this.boolean) {\n    for (int int = 0 ; i < (data.int) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n            data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"8db03808-17be-11e6-8d70-7f8d2581cade","series":0,"name":"add","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.URLCodec:290","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"8db03809-17be-11e6-8d70-b1ddddc587ae","series":0,"name":"replace","transplant":{"toString":"boxContent = boxContent.substring(1)","position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"boxContent = boxContent.substring(1)"},"variableMap":{"boxContent":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"m+\", \"M\")","position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"status":-2},{"failures":[74,75],"tindex":"8db0380a-17be-11e6-8d70-5361a77b1290","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"left = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:309","type":"CtAssignmentImpl","sourcecode":"left = results[0]"},"status":-1},{"failures":[74,75],"tindex":"8db0380b-17be-11e6-8d70-fbc0b555e23e","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results)","position":"org.apache.commons.codec.digest.UnixCrypt:311","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results)"},"variableMap":{"left":"c","right":"c","results":"results"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)","position":"org.apache.commons.codec.digest.UnixCrypt:351","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)"},"status":-1},{"failures":[],"tindex":"8db0380c-17be-11e6-8d70-dd18135ad550","series":0,"name":"replace","transplant":{"toString":"result.append(\"N\", \"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:617","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":80,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
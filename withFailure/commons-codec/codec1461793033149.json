{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":81,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":20,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":120,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":26,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":67,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":44,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":112,"org.apache.commons.codec.net.URLCodecTest.testEncodeNull":107,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":121,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":100,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":9,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":61,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":83,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":54,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":93,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":122,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":52,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":79,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":119,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":63,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":35,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":47,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":80,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":109,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":128,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":33,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":118,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":108,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":129,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":84,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":90,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":68,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":69,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":87,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":111,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":25,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":39,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":113,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":41,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":127,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":105,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":30,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":50,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":78,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":36,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":115,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":29,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":102,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":59,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":123,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":92,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":14,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":103,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":99,"org.apache.commons.codec.language.NysiisTest.testDropBy":97,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":38,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":76,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":22,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.binary.Base64Test.testUUID":86,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":65,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":74,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":56,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":48,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":88,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":91,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":55,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":71,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":64,"org.apache.commons.codec.language.NysiisTest.testRule7":96,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":72,"org.apache.commons.codec.language.NysiisTest.testRule6":95,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":98,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":37,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":3,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":16,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":18,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":58,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":62,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":89,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":101,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":114,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":125,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":49,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":85,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":4,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":104,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":27,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":73,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":34,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":6},"transformations":[{"failures":[0,1,2],"tindex":"344b1a55-0cc0-11e6-b664-fbfbf729b2c0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"variableMap":{"pos":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:724","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"344b4166-0cc0-11e6-b664-f79ae4f4b606","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"variableMap":{"result":"inExtendedComment","value":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","element":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-2},{"failures":[3],"tindex":"344b4167-0cc0-11e6-b664-4d8e07b7fdaa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:238","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"status":-1},{"failures":[],"tindex":"344b6878-0cc0-11e6-b664-e7b171647cc2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:541","type":"CtInvocationImpl","sourcecode":"currentBranches.clear()"},"status":-2},{"failures":[4,5],"tindex":"344b6879-0cc0-11e6-b664-515156a68f88","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:181","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"mark/reset not supported\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-1},{"failures":[6,7],"tindex":"344b687a-0cc0-11e6-b664-6916b3903a05","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"status":-1},{"failures":[],"tindex":"344b687b-0cc0-11e6-b664-515636a6090c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y3\", \"Y3\")"},"status":0},{"failures":[],"tindex":"344b8f8c-0cc0-11e6-b664-619db09241b6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"variableMap":{"a":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:133","type":"CtIfImpl","sourcecode":"if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (readLen == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(buf);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return readLen;\n}"},"status":-2},{"failures":[],"tindex":"344b8f8d-0cc0-11e6-b664-cff9078e5aad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:380","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"variableMap":{"obj":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n    return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"344bb69e-0cc0-11e6-b664-bbfe4fa6b369","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:369","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)))"},"status":-2},{"failures":[],"tindex":"344bb69f-0cc0-11e6-b664-51ad41275aea","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:361","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:471","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"344bb6a0-0cc0-11e6-b664-49bbee4300b9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = dc.substring(0, 1)"},"variableMap":{"dc":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:333","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[],"tindex":"344bddb1-0cc0-11e6-b664-7d1ebd5ed2f1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:281","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"))"},"status":-2},{"failures":[46,0,1,2],"tindex":"344bddb2-0cc0-11e6-b664-f3f39cfa8fc5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:169","type":"CtAssignmentImpl","sourcecode":"index = handleT(value, result, index)"},"status":-1},{"failures":[],"tindex":"344bddb3-0cc0-11e6-b664-2f49b87f5a3b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w3\", \"W3\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"status":-2},{"failures":[47,48,49],"tindex":"344c04c4-0cc0-11e6-b664-c153377c35d2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:87","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"status":-1},{"failures":[],"tindex":"344c04c5-0cc0-11e6-b664-9593c4814797","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:369","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"344c04c6-0cc0-11e6-b664-472d01428a27","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:95","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[50,51],"tindex":"344c04c7-0cc0-11e6-b664-bb09576c92e3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"code = '0'"},"variableMap":{"code":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:188","type":"CtAssignmentImpl","sourcecode":"last = '*'"},"status":-1},{"failures":[],"tindex":"344c2bd8-0cc0-11e6-b664-adf8f3ef6da4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:73","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[52,53,54,55],"tindex":"344c2bd9-0cc0-11e6-b664-3169c9eb2e98","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:102","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[56],"tindex":"344c2bda-0cc0-11e6-b664-33c582c87e2e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"344c2bdb-0cc0-11e6-b664-1970f0f729ff","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:212","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = rule.getPattern()"},"status":-2},{"failures":[],"tindex":"344c52ec-0cc0-11e6-b664-4d3822d985b8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:70","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('%')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('>')"},"status":0},{"failures":[],"tindex":"344c52ed-0cc0-11e6-b664-a35856e489e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:188","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"344c52ee-0cc0-11e6-b664-31a2506ddca7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"variableMap":{"maxLength":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:461","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[],"tindex":"344c52ef-0cc0-11e6-b664-9f60be5df095","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:449","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"org.apache.commons.codec.binary.Base64.MASK_6BITS","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"ibitWorkArea","context":"context","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:387","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"344c7a00-0cc0-11e6-b664-ef1f89e5cd85","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:638","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"344c7a01-0cc0-11e6-b664-f3a3f3ef37d2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:293","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(available(context), bAvail)"},"status":-2},{"failures":[57,58,59,60,61,62,63,64,65],"tindex":"344c7a02-0cc0-11e6-b664-cb49280385b2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:391","type":"CtAssignmentImpl","sourcecode":"context.long = (context.long) >> 1"},"variableMap":{"context":"context","lbitWorkArea":"lbitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:507","type":"CtAssignmentImpl","sourcecode":"context.long = ((context.long) << 8) + b"},"status":-1},{"failures":[66,67,68,69,70,71,72,73,74,75,76,77],"tindex":"344c7a03-0cc0-11e6-b664-2fa1f41edd2f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:371","type":"CtIfImpl","sourcecode":"if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-1},{"failures":[78],"tindex":"344c7a04-0cc0-11e6-b664-1daa08e43d93","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"variableMap":{"buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:313","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[52,53,54,79],"tindex":"344ca115-0cc0-11e6-b664-8f95647d2c82","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:481","type":"CtReturnImpl","sourcecode":"return phonemeBuilder.makeString()"},"status":-1},{"failures":[57,80,81,58,82,83,84,59,60,61],"tindex":"344ca116-0cc0-11e6-b664-39be0759793f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte byte = in[(inPos++)];\n    if (b == (byte)) {\n        context.boolean = true;\n        break;\n    } else {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n            final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n            if (result >= 0) {\n                context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n                if ((context.int) == 0) {\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-1},{"failures":[],"tindex":"344ca117-0cc0-11e6-b664-47a7edba35e1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:634","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-2},{"failures":[85],"tindex":"344ca118-0cc0-11e6-b664-97fa7d1d5582","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:207","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key)"},"variableMap":{"key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:659","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest)"},"status":-1},{"failures":[],"tindex":"344ca119-0cc0-11e6-b664-9f20fd97470d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:387","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-2},{"failures":[86],"tindex":"344cc82a-0cc0-11e6-b664-27a2ba5ab769","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:411","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"status":-1},{"failures":[],"tindex":"344cc82b-0cc0-11e6-b664-432290ab8506","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:118","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[46,0,1,2],"tindex":"344cc82c-0cc0-11e6-b664-6f88ddc2fabf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:419","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:765","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n    result.append(\"S\", \"TS\");\n} else {\n    result.append('S');\n}"},"status":-1},{"failures":[],"tindex":"344cc82d-0cc0-11e6-b664-3141af90579f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"text","firstLetter":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[46,0,1,2],"tindex":"344cc82e-0cc0-11e6-b664-21313bc115e8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"result.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:399","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"344cc82f-0cc0-11e6-b664-5b6f091455d3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:95","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n    return \"\";\n} "},"status":-2},{"failures":[87,88,89,90,91,92,93],"tindex":"344cc830-0cc0-11e6-b664-972a6dad79ea","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:658","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:50","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data).digest()"},"status":-1},{"failures":[75],"tindex":"344cef41-0cc0-11e6-b664-f9c2ffe954b9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"tmp","key":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)"},"status":-1},{"failures":[94,46,0,1,2],"tindex":"344cef42-0cc0-11e6-b664-0582daeb23de","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:172","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"status":-1},{"failures":[],"tindex":"344cef43-0cc0-11e6-b664-a707a7a6c092","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:947","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-2},{"failures":[],"tindex":"344cef44-0cc0-11e6-b664-3f42ad9d6fcd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:225","type":"CtAssignmentImpl","sourcecode":"name1 = cleanName(name1)"},"variableMap":{"name1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":-2},{"failures":[95,96,97],"tindex":"344cef45-0cc0-11e6-b664-317b4c568ea7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:298","type":"CtAssignmentImpl","sourcecode":"lastChar = key.charAt(((key.length()) - 1))"},"status":-1},{"failures":[],"tindex":"344cef46-0cc0-11e6-b664-8f3c8a189fcd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"status":-2},{"failures":[],"tindex":"344d1657-0cc0-11e6-b664-1dd7fedbd5bc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"maxLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:963","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} "},"status":-2},{"failures":[46,1,2],"tindex":"344d1658-0cc0-11e6-b664-cfc1da7f9877","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"variableMap":{"cp":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:476","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[98,99,100,101,52,53,54,79],"tindex":"344d1659-0cc0-11e6-b664-fd1466b2ac7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:389","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n}"},"status":-1},{"failures":[1,2],"tindex":"344d165a-0cc0-11e6-b664-ab3dafccb3b9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:335","type":"CtIfImpl","sourcecode":"if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n    result.append(\"KS\");\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[],"tindex":"344d165b-0cc0-11e6-b664-9d445a05b2f1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:437","type":"CtInvocationImpl","sourcecode":"words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType))"},"status":0},{"failures":[],"tindex":"344d165c-0cc0-11e6-b664-8d0897d849fa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:361","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"encodeTable","ibitWorkArea":"org.apache.commons.codec.binary.Base32.MASK_5BITS","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"pos","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:516","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[74,75,76],"tindex":"344d3d6d-0cc0-11e6-b664-47f81530b3d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:89","type":"CtForImpl","sourcecode":"for (int int = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[102],"tindex":"344d3d6e-0cc0-11e6-b664-f7a665c634ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:127","type":"CtInvocationImpl","sourcecode":"local.append(inwd, 1, ((inwd.int) - 1))"},"status":-1},{"failures":[],"tindex":"344d3d6f-0cc0-11e6-b664-692c60d6170b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:335","type":"CtIfImpl","sourcecode":"if (!(obj instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n} "},"status":-2},{"failures":[103,46,0,1,2],"tindex":"344d3d70-0cc0-11e6-b664-b7112b2debf5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:143","type":"CtInvocationImpl","sourcecode":"result.append('M')"},"status":-1},{"failures":[104,46,0,1,2,105],"tindex":"344d3d71-0cc0-11e6-b664-61a61c7c64ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"variableMap":{"rightLength":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:166","type":"CtAssignmentImpl","sourcecode":"index = handleS(value, result, index, slavoGermanic)"},"status":-1},{"failures":[],"tindex":"344d3d72-0cc0-11e6-b664-d52a13878eff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:239","type":"CtAssignmentImpl","sourcecode":"name1 = getFirst3Last3(name1)"},"variableMap":{"name1":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:273","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-2},{"failures":[6,7],"tindex":"344d3d73-0cc0-11e6-b664-450ca7e6c5cf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"a"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"status":-1},{"failures":[6,7],"tindex":"344d6484-0cc0-11e6-b664-55006338bab5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"iValue","l_ascii":"b","bits":"iValue"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[106,107,108,109,110,111],"tindex":"344d6485-0cc0-11e6-b664-3b334d444a57","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:260","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)"},"variableMap":{"data":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:194","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes)"},"status":-1},{"failures":[],"tindex":"344d6486-0cc0-11e6-b664-23974897efd0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:389","type":"CtAssignmentImpl","sourcecode":"code = '6'"},"status":-2},{"failures":[112,113,114],"tindex":"344d6487-0cc0-11e6-b664-6bd2294e479e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:489","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:487","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)"},"status":-1},{"failures":[],"tindex":"344d6488-0cc0-11e6-b664-2d405f3b6052","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:118","type":"CtIfImpl","sourcecode":"if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.lang.Math.min(java.util.Set<java.lang.String>.size(), sl.java.util.Set<java.lang.String>.size()));\n    for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n        if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n            ls.add(lang);\n        } \n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}"},"status":-2},{"failures":[0,1,2],"tindex":"344d6489-0cc0-11e6-b664-55c62d29bdd9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"result.append('K', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"status":-1},{"failures":[66,67,68,69,115,70,71,72,73,116,74,75,76,77,117],"tindex":"344d648a-0cc0-11e6-b664-87397f49b352","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"b","name2Size":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-1},{"failures":[],"tindex":"344d8b9b-0cc0-11e6-b664-930594345e68","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"status":0},{"failures":[6,7],"tindex":"344d8b9c-0cc0-11e6-b664-71a99c3709ac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:321","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"variableMap":{"index":"el"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-1},{"failures":[],"tindex":"344d8b9d-0cc0-11e6-b664-4b94eb1ae023","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:112","type":"CtIfImpl","sourcecode":"if (!(languages.isEmpty())) {\n    final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n    if ((newPhonemes.size()) < maxPhonemes) {\n        newPhonemes.add(join);\n        if ((newPhonemes.size()) >= maxPhonemes) {\n            break EXPR;\n        } \n    } \n} "},"status":0},{"failures":[],"tindex":"344d8b9e-0cc0-11e6-b664-9ddcd45308c0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:240","type":"CtAssignmentImpl","sourcecode":"name2 = getFirst3Last3(name2)"},"variableMap":{"name2":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"status":-2},{"failures":[],"tindex":"344d8b9f-0cc0-11e6-b664-6fc89218b3bf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:394","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[],"tindex":"344d8ba0-0cc0-11e6-b664-6bfb506ff36b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:94","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"344db2b1-0cc0-11e6-b664-f9cae5ab0b90","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:554","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)"},"variableMap":{"binaryData":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:334","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"status":0},{"failures":[57,81,58,59,60,61],"tindex":"344db2b2-0cc0-11e6-b664-e5c031492ba6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:85","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[len >> 1]"},"variableMap":{"len":"decodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:375","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[118],"tindex":"344db2b3-0cc0-11e6-b664-b1b88790ab5a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key, null)"},"status":-1},{"failures":[],"tindex":"344db2b4-0cc0-11e6-b664-077dff501323","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"variableMap":{"bigBytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"failures":[57,59,60,61,62,63,119,120,121,64,65],"tindex":"344db2b5-0cc0-11e6-b664-a3650cc2a599","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:462","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[1,2],"tindex":"344db2b6-0cc0-11e6-b664-5b379b2c4f68","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[],"tindex":"344db2b7-0cc0-11e6-b664-0b8549fbb430","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:68","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('#')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:70","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('%')"},"status":0},{"failures":[],"tindex":"344db2b8-0cc0-11e6-b664-8b42219a4c3b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"variableMap":{"sBytes":"b","blocksize":"org.apache.commons.codec.binary.BaseNCodec.EOF","tempResult":"b","cp":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (todo > 0) {\n    int int = ((int)(java.lang.Math.min(b.int, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    todo -= len;\n}"},"status":-2},{"failures":[122,123,124,125,126,127],"tindex":"344dd9c9-0cc0-11e6-b664-d5ee458462b0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)"},"status":-1},{"failures":[],"tindex":"344dd9ca-0cc0-11e6-b664-5dbcf12fa729","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:138","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (scanner.hasNextLine()) {\n        final java.lang.String java.lang.String = scanner.nextLine();\n        java.lang.String java.lang.String = rawLine;\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = true;\n            } else {\n                final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                if (cmtI >= 0) {\n                    line = line.substring(0, cmtI);\n                } \n                line = line.trim();\n                if ((line.length()) == 0) {\n                    continue;\n                } \n                final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                if ((parts.int) != 3) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                } \n                final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                final boolean boolean = parts[2].equals(\"true\");\n                rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n            }\n        }\n    }\n} finally {\n    scanner.close();\n}"},"status":-2},{"failures":[],"tindex":"344dd9cb-0cc0-11e6-b664-9144afdb2551","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"cnt = keyBytes.int"},"status":-2},{"failures":[],"tindex":"344dd9cc-0cc0-11e6-b664-874556a827f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[128,129],"tindex":"344dd9cd-0cc0-11e6-b664-73b144239d38","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"variableMap":{"b":"length","t":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":89,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
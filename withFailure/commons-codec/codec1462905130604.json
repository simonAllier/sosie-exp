{"failureDictionary":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":21,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":12,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":40,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":47,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":37,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":13,"org.apache.commons.codec.binary.Base64Test.testBase64":45,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":25,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":17,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":16,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":3,"org.apache.commons.codec.binary.Base64Test.testUUID":31,"org.apache.commons.codec.binary.Base64Test.testSingletons":41,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":51,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":15,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":11,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":44,"org.apache.commons.codec.binary.Base64Test.testPairs":30,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":39,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":10,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":46,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":48,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":14,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":33,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":34,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":38,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":23,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":35,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":36,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":22,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":2,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":5,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":27,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":4,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":42,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":6,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":1,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":52,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":54,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":29,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":19,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":9,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":50,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":49,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":28,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":8,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":43,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":18,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":24,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":20,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":32,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0},"transformations":[{"failures":[],"tindex":"82046c33-16dd-11e6-bf22-772fb4769e9b","series":0,"name":"replace","transplant":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"variableMap":{"value":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)","position":"org.apache.commons.codec.net.URLCodec:273","type":"CtReturnImpl","sourcecode":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"status":-2},{"failures":[],"tindex":"82049344-16dd-11e6-bf22-656472a40533","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[0,1,2,3],"tindex":"82049345-16dd-11e6-bf22-0b0cd957d7d5","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return buffer.toString()","position":"org.apache.commons.codec.digest.UnixCrypt:250","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[4,5,6],"tindex":"82049346-16dd-11e6-bf22-4ddc77bc1595","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}","position":"org.apache.commons.codec.digest.HmacUtils:206","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-1},{"failures":[],"tindex":"82049347-16dd-11e6-bf22-9dc90ad19661","series":0,"name":"replace","transplant":{"toString":"rightLength++","position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"variableMap":{"rightLength":"unencodedBlockSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.unencodedBlockSize = unencodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"status":-2},{"failures":[7,8],"tindex":"8204ba58-16dd-11e6-bf22-0349746f7270","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.RADIX)) + \"): \") + b));\n} ","position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"status":-1},{"failures":[],"tindex":"8204ba59-16dd-11e6-bf22-873650c694c3","series":0,"name":"add","transplant":{"toString":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"variableMap":{"chrs":"chrs","index":"length","element":"chrs"},"type":"adrStmt","transplantationPoint":{"toString":"for (int index = 0 ; index < (chrs.length) ; index++) {\n    if ((chrs[index]) > 'Z') {\n        for (final char[] element : org.apache.commons.codec.language.ColognePhonetic.PREPROCESS_MAP) {\n            if ((chrs[index]) == (element[0])) {\n                chrs[index] = element[1];\n                break;\n            } \n        }\n    } \n}","position":"org.apache.commons.codec.language.ColognePhonetic:433","type":"CtForImpl","sourcecode":"for (int int = 0 ; index < (chrs.int) ; index++) {\n    if ((chrs[index]) > 'Z') {\n        for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n            if ((chrs[index]) == (element[0])) {\n                chrs[index] = element[1];\n                break;\n            } \n        }\n    } \n}"},"status":-2},{"failures":[],"tindex":"8204e16a-16dd-11e6-bf22-c199de929115","series":0,"name":"add","transplant":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> rules = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType, org.apache.commons.codec.language.bm.RuleType.RULES, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:399","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet)"},"variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","languageSet":"languageSet"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules2 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:403","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet)"},"status":-2},{"failures":[],"tindex":"8204e16b-16dd-11e6-bf22-6f9d38154e99","series":0,"name":"replace","transplant":{"toString":"c = (c >>> 2) | (c << 26)","position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 2) | (c << 26)"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:343","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-2},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"8204e16c-16dd-11e6-bf22-9348bb5f9f9e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 30))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:510","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"8205087d-16dd-11e6-bf22-2bd7aa53e1d5","series":0,"name":"replace","transplant":{"toString":"char lastChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char chr","position":"org.apache.commons.codec.language.ColognePhonetic:334","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"8205087e-16dd-11e6-bf22-79362ab26924","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n} ","position":"org.apache.commons.codec.binary.Base64:373","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"status":-1},{"failures":[],"tindex":"8205087f-16dd-11e6-bf22-93202edab009","series":0,"name":"replace","transplant":{"toString":"t = (t >>> 4) | (t << 28)","position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"d"},"type":"adrStmt","transplantationPoint":{"toString":"d = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:344","type":"CtAssignmentImpl","sourcecode":"d = results[0]"},"status":-2},{"failures":[],"tindex":"82052f90-16dd-11e6-bf22-331ef82d30bd","series":0,"name":"replace","transplant":{"toString":"boxContent = boxContent.substring(1)","position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"boxContent = boxContent.substring(1)"},"variableMap":{"boxContent":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"name1LtRStart = name1.substring(i, (i + 1))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:312","type":"CtAssignmentImpl","sourcecode":"name1LtRStart = name1.substring(i, (i + 1))"},"status":-2},{"failures":[],"tindex":"82052f91-16dd-11e6-bf22-cb5c021d3a4a","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH"},"type":"adrStmt","transplantationPoint":{"toString":"if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)) {\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n    pos = 1;\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:288","type":"CtIfImpl","sourcecode":"if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    pos = 1;\n}"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":15,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
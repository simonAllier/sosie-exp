{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":18,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":33,"org.apache.commons.codec.language.NysiisTest.testSnat":8,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":34,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":59,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":64,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":75,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":39,"org.apache.commons.codec.language.NysiisTest.testDropBy":10,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":69,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":38,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":66,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":48,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":20,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":15,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":71,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":17,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":73,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":58,"org.apache.commons.codec.language.NysiisTest.testRule2":50,"org.apache.commons.codec.language.NysiisTest.testRule1":4,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":46,"org.apache.commons.codec.language.NysiisTest.testRule7":52,"org.apache.commons.codec.language.NysiisTest.testRule6":5,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":47,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":24,"org.apache.commons.codec.language.NysiisTest.testRule5":51,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":57,"org.apache.commons.codec.language.NysiisTest.testCap":1,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":41,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":30,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":9,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":45,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":43,"org.apache.commons.codec.language.NysiisTest.testBran":6,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":13,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":27,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":29,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":44,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":54,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":22,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":70,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":72,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":53,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":55,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":56,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":63,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":61,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":67,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":76,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":42,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":32,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":19,"org.apache.commons.codec.language.SoundexTest.testB650":36,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":77,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":74,"org.apache.commons.codec.language.NysiisTest.testDad":49,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":62,"org.apache.commons.codec.language.SoundexTest.testNewInstance":40,"org.apache.commons.codec.language.NysiisTest.testOthers":11,"org.apache.commons.codec.language.NysiisTest.testTranan":12,"org.apache.commons.codec.language.SoundexTest.testDifference":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":68,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":0,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":26,"org.apache.commons.codec.language.NysiisTest.testDan":2,"org.apache.commons.codec.language.NysiisTest.testFal":3,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":28,"org.apache.commons.codec.language.NysiisTest.testSnad":7,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":16,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":14,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":60},"transformations":[{"failures":[],"tindex":"89fc92f3-1225-11e6-bf6e-794f333279c6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index = handleCH(value, result, index)","position":"org.apache.commons.codec.language.DoubleMetaphone:287","type":"CtAssignmentImpl","sourcecode":"index = handleCH(value, result, index)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"89fcba04-1225-11e6-bf6e-09bafc90404c","series":0,"name":"replace","transplant":{"toString":"buffer.setCharAt(0, charZero)","position":"org.apache.commons.codec.digest.UnixCrypt:211","type":"CtInvocationImpl","sourcecode":"buffer.setCharAt(0, charZero)"},"variableMap":{"buffer":"key","charZero":"lastChar"},"type":"adrStmt","transplantationPoint":{"toString":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} ","position":"org.apache.commons.codec.language.Nysiis:304","type":"CtIfImpl","sourcecode":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} "},"status":-1},{"failures":[],"tindex":"89fcba05-1225-11e6-bf6e-c5adfa40bd1b","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 18) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))]","position":"org.apache.commons.codec.binary.Base64:387","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"org.apache.commons.codec.binary.Base64.MASK_6BITS","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"org.apache.commons.codec.binary.Base64.MASK_6BITS","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))]","position":"org.apache.commons.codec.binary.Base64:389","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-3},{"failures":[14,15],"tindex":"89fce116-1225-11e6-bf6e-65c568e3aa55","series":0,"name":"replace","transplant":{"toString":"return index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return index + 1"},"variableMap":{"index":"a"},"type":"adrStmt","transplantationPoint":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"status":-1},{"failures":[16,17],"tindex":"89fce117-1225-11e6-bf6e-89ca51185ecb","series":0,"name":"replace","transplant":{"toString":"if ((charAt(value, (index + 1))) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    index++;\n    result.append('L');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:551","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    index++;\n    result.append('L');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:711","type":"CtIfImpl","sourcecode":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}"},"status":-1},{"failures":[],"tindex":"89fce118-1225-11e6-bf6e-056549071358","series":0,"name":"replace","transplant":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"variableMap":{"index":"lineLength"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineLength = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0","position":"org.apache.commons.codec.binary.BaseNCodec:209","type":"CtAssignmentImpl","sourcecode":"this.int = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0"},"status":-2},{"failures":[18],"tindex":"89fd0829-1225-11e6-bf6e-fbc428c5df01","series":0,"name":"replace","transplant":{"toString":"result.append('J', 'A')","position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"result.append('J', 'A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:741","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[19,20,21,22,23,24,11,25],"tindex":"89fd082a-1225-11e6-bf6e-430eeae595b1","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.SoundexUtils:56","type":"CtReturnImpl","sourcecode":"return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[],"tindex":"89fd082b-1225-11e6-bf6e-4d60b963b097","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n    data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n} ","position":"org.apache.commons.codec.net.QCodec:160","type":"CtIfImpl","sourcecode":"if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n} "},"status":-2},{"failures":[],"tindex":"89fd2f3c-1225-11e6-bf6e-17297f988839","series":0,"name":"replace","transplant":{"toString":"str = str.substring(0, ((str.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"variableMap":{"str":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[],"tindex":"89fd2f3d-1225-11e6-bf6e-4f72bf69b9ff","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"status":-2},{"failures":[],"tindex":"89fd2f3e-1225-11e6-bf6e-c74fe05d7f7d","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n    result.append('J');\n    index += 3;\n} else {\n    result.append(\"TK\");\n    index += 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:387","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n    result.append('J');\n    index += 3;\n} else {\n    result.append(\"TK\");\n    index += 2;\n}"},"status":-2},{"failures":[],"tindex":"89fd2f3f-1225-11e6-bf6e-a9e02412150c","series":0,"name":"replace","transplant":{"toString":"this.decodeSize = (org.apache.commons.codec.binary.Base32.this.encodeSize) - 1","position":"org.apache.commons.codec.binary.Base32:306","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base32.this.int) - 1"},"variableMap":{"encodeSize":"index","decodeSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:303","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-3},{"failures":[26,27,28,29,30,31],"tindex":"89fd5650-1225-11e6-bf6e-edbd4e4ca121","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"b","to":"b"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.URLCodec:179","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"89fd5651-1225-11e6-bf6e-ed500ea01bf5","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:181","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} "},"status":-2},{"failures":[],"tindex":"89fd5652-1225-11e6-bf6e-11f4ff7fcbc9","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"g\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:91","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"g\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"wh3\", \"Wh3\")","position":"org.apache.commons.codec.language.Caverphone2:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":0},{"failures":[],"tindex":"89fd5653-1225-11e6-bf6e-35dff1cd2fd5","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.URLCodec:295","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)"},"status":-2},{"failures":[],"tindex":"89fd7d64-1225-11e6-bf6e-2943481819ac","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int i = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.RADIX)","position":"org.apache.commons.codec.net.Utils:43","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)"},"status":-2},{"failures":[19,32,33,34,35,36,37,38,39,20,21,22,23,40,41,42,43,44,45,46,24,47,0,48,1,49,2,3,4,50,51,5,52,6,7,8,9,10,11,12,13,25,53,54,55,56],"tindex":"89fd7d65-1225-11e6-bf6e-f925918ad4a0","series":0,"name":"replace","transplant":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"count","l_ascii":"chars","bits":"count"},"type":"adrStmt","transplantationPoint":{"toString":"chars[(count++)] = str.charAt(i)","position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[],"tindex":"89fd7d66-1225-11e6-bf6e-0feede15a020","series":0,"name":"add","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.BCodec:180","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"89fda477-1225-11e6-bf6e-df9ce28a9354","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[512]","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = new byte[org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH]","position":"org.apache.commons.codec.digest.HmacUtils:766","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int]"},"status":-2},{"failures":[],"tindex":"89fda478-1225-11e6-bf6e-5b63e323c342","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(finalb, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":-3},{"failures":[57,58],"tindex":"89fda479-1225-11e6-bf6e-351fca96bc16","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:249","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}"},"status":-1},{"failures":[],"tindex":"89fdcb8a-1225-11e6-bf6e-991526ab8bbe","series":0,"name":"add","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return matcher.find()","position":"org.apache.commons.codec.language.bm.Rule:595","type":"CtReturnImpl","sourcecode":"return matcher.find()"},"status":-2},{"failures":[59,18,60,17],"tindex":"89fdcb8b-1225-11e6-bf6e-e3d856292bad","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.toString()","position":"org.apache.commons.codec.language.DoubleMetaphone:1001","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.toString()"},"status":-1},{"failures":[],"tindex":"89fdcb8c-1225-11e6-bf6e-1fc791e31c48","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")","position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.DigestUtils:70","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":0},{"failures":[61,62,63,64,65,66,67,68,69],"tindex":"89fdcb8d-1225-11e6-bf6e-256fc57251fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule : rules) {\n    if (rule.matches(inputContext)) {\n        if (branching) {\n            nextBranches.clear();\n        } \n        final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n        final boolean branchingRequired = ((replacements.length) > 1) && branching;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n            for (final java.lang.String nextReplacement : replacements) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n                final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                nextBranch.processNextReplacement(nextReplacement, force);\n                if (branching) {\n                    nextBranches.add(nextBranch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (branching) {\n            currentBranches.clear();\n            currentBranches.addAll(nextBranches);\n        } \n        index += (rule.getPatternLength()) - 1;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:514","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n    if (rule.matches(inputContext)) {\n        if (branching) {\n            nextBranches.clear();\n        } \n        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n        final boolean boolean = ((replacements.int) > 1) && branching;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n            for (final java.lang.String java.lang.String : replacements) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                nextBranch.processNextReplacement(nextReplacement, force);\n                if (branching) {\n                    nextBranches.add(nextBranch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (branching) {\n            currentBranches.clear();\n            currentBranches.addAll(nextBranches);\n        } \n        index += (rule.getPatternLength()) - 1;\n        break;\n    } \n}"},"status":-1},{"failures":[],"tindex":"89fdf29e-1225-11e6-bf6e-7379e66b80bf","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"data","raw":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:375","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data)"},"status":-3},{"failures":[],"tindex":"89fdf29f-1225-11e6-bf6e-8d306c631e39","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:280","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"89fdf2a0-1225-11e6-bf6e-af07b98ef9d4","series":0,"name":"replace","transplant":{"toString":"this.charset = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET","position":"org.apache.commons.codec.binary.Hex:190","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.java.nio.charset.Charset"},"variableMap":{"charset":"charset","org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"this.charset = charset","position":"org.apache.commons.codec.net.BCodec:69","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-3},{"failures":[70,71,72,73,74],"tindex":"89fdf2a1-1225-11e6-bf6e-c3d511092d4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"e$\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"e$\", \"\")"},"status":-1},{"failures":[75,76,77],"tindex":"89fe19b2-1225-11e6-bf6e-7309ca75dbbd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:470","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer)"},"status":-1},{"failures":[],"tindex":"89fe19b3-1225-11e6-bf6e-5312c11248a0","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"d\", \"t\")","position":"org.apache.commons.codec.language.Caverphone2:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"status":-3},{"failures":[],"tindex":"89fe19b4-1225-11e6-bf6e-d39e20256c20","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:289","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0}],"header":{"groupId":"commons-codec","transformationCount":34,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
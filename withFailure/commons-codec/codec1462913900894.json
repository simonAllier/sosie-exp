{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":43,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":175,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":107,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":9,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":93,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":139,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":114,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":125,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":178,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":110,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":124,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":154,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":60,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":136,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":168,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":119,"org.apache.commons.codec.binary.Base64Test.testTriplets":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":180,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":59,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":143,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":131,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":104,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":162,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":129,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":132,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":82,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":159,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":37,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":62,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":65,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":149,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":167,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":22,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":16,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":126,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":115,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":135,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":144,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":24,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":105,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":25,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":101,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":134,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":80,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":145,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":174,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":177,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":73,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":147,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":148,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":161,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":173,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":33,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":68,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":138,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":153,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":40,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":6,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":170,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":47,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":130,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":15,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":10,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":38,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":164,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":165,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":54,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":108,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":109,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":90,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":152,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":160,"org.apache.commons.codec.language.MetaphoneTest.testWhy":99,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":87,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":86,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":76,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":146,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":141,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":0,"org.apache.commons.codec.language.MetaphoneTest.testTCH":98,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":94,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":50,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":44,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":79,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":32,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":92,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":100,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":95,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":75,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":49,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":118,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":163,"org.apache.commons.codec.binary.Base64Test.testBase64":46,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":158,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":123,"org.apache.commons.codec.binary.Base64Test.testUUID":18,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":172,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":11,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":30,"org.apache.commons.codec.binary.Base64Test.testSingletons":39,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":61,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":157,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":84,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":121,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":74,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":120,"org.apache.commons.codec.binary.Base64Test.testPairs":17,"org.apache.commons.codec.binary.Base64Test.testConstructors":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":169,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":150,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":83,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":51,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":106,"org.apache.commons.codec.binary.Base64Test.testCodec112":34,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":69,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":151,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":111,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":103,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":116,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":3,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":166,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":81,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":77,"org.apache.commons.codec.binary.Base64Test.testCodec68":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":156,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":128,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":78,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":96,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":113,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":57,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":137,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":63,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":176,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":35,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":52,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":1,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":4,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":36,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":88,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":102,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":155,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":5,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":70,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":89,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":127,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":122,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":85,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":140,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":64,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":179,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":21,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":42,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":91,"org.apache.commons.codec.language.SoundexTest.testDifference":112,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":97,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":133,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":56,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":117,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":171,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":31,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":71,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":142},"transformations":[{"failures":[0],"tindex":"ed864d8e-16f1-11e6-a507-37bcad013a02","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"ed86749f-16f1-11e6-a507-9f7b0d6f0eb1","series":0,"name":"replace","transplant":{"toString":"if (replacedName.contains(dc)) {\n    final java.lang.String singleLetter = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"variableMap":{"replacedName":"org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN","dc":"org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.NameType s : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Lang.Langs.put(s, org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String.format(org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN, s.getName()), org.apache.commons.codec.language.bm.Languages.getInstance(s)));\n}","position":"org.apache.commons.codec.language.bm.Lang:101","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.put(s, org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String.format(org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String, s.getName()), org.apache.commons.codec.language.bm.Languages.getInstance(s)));\n}"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"tindex":"ed869bb0-16f1-11e6-a507-ad4c576d4eb7","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (((pad) == element) || (isInAlphabet(element))) {\n    return true;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:500","type":"CtIfImpl","sourcecode":"if (((byte) == element) || (isInAlphabet(element))) {\n    return true;\n} "},"status":-1},{"failures":[],"tindex":"ed869bb1-16f1-11e6-a507-b3f2e09e71c8","series":0,"name":"replace","transplant":{"toString":"this.maxLength = maxLength","position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"variableMap":{"maxLength":"value"},"type":"adrStmt","transplantationPoint":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24","position":"org.apache.commons.codec.digest.UnixCrypt:388","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24"},"status":-2},{"failures":[96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"ed8c8f22-16f1-11e6-a507-6bab45e45236","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return code.toString()","position":"org.apache.commons.codec.language.Metaphone:335","type":"CtReturnImpl","sourcecode":"return code.toString()"},"status":-1},{"failures":[111],"tindex":"ed8c8f23-16f1-11e6-a507-857766cbd15c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n}","position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n}"},"status":-1},{"failures":[],"tindex":"ed8c8f24-16f1-11e6-a507-811f400c217e","series":0,"name":"replace","transplant":{"toString":"sb.append(\", rcon='\").append(rCon).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:467","type":"CtInvocationImpl","sourcecode":"sb.append(\", rcon='\").append(rCon).append('\\'')"},"variableMap":{"rCon":"word","sb":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"-\").append(encode(word))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\").append(encode(word))"},"status":0},{"failures":[],"tindex":"ed8cb635-16f1-11e6-a507-61350d1d30ba","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:544","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[],"tindex":"ed8cb636-16f1-11e6-a507-ab28a7357b7a","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-2},{"failures":[],"tindex":"ed8cdd47-16f1-11e6-a507-71f2e8566ca2","series":0,"name":"replace","transplant":{"toString":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"c","preHWChar":"c","firstCode":"c"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtIfImpl","sourcecode":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} "},"status":-2},{"failures":[112,113],"tindex":"ed8cdd48-16f1-11e6-a507-85bdd741c929","series":0,"name":"replace","transplant":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Soundex:263","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":-1},{"failures":[114],"tindex":"ed8cdd49-16f1-11e6-a507-b3ed9c17c321","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:689","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"key","key":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:475","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"status":-1},{"failures":[],"tindex":"ed8d045a-16f1-11e6-a507-b5757ca97072","series":0,"name":"replace","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"len","y":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"status":-2},{"failures":[],"tindex":"ed8d045b-16f1-11e6-a507-393979436802","series":0,"name":"replace","transplant":{"toString":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))","position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))"},"variableMap":{"pArray":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:246","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-2},{"failures":[],"tindex":"ed8d2b6c-16f1-11e6-a507-a13a8905d715","series":0,"name":"replace","transplant":{"toString":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:479","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2)"},"variableMap":{"phonemeBuilder":"phonemeBuilder","finalRules2":"finalRules1"},"type":"adrStmt","transplantationPoint":{"toString":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:477","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1)"},"status":-3},{"failures":[],"tindex":"ed8d2b6d-16f1-11e6-a507-e59264e9045d","series":0,"name":"replace","transplant":{"toString":"b = '+'","position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"b = '+'"},"variableMap":{"b":"savedPos"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += (context.pos) - savedPos","position":"org.apache.commons.codec.binary.Base64:371","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2},{"failures":[],"tindex":"ed8d527e-16f1-11e6-a507-4722d300095a","series":0,"name":"replace","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"if ((context.readPos) >= (context.pos)) {\n    context.buffer = null;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:296","type":"CtIfImpl","sourcecode":"if ((context.int) >= (context.int)) {\n    context.byte[] = null;\n} "},"status":-2},{"failures":[],"tindex":"ed8d527f-16f1-11e6-a507-a7596b7f0754","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(']')","position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('^')","position":"org.apache.commons.codec.net.QCodec:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('^')"},"status":0},{"failures":[115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132],"tindex":"ed8d5280-16f1-11e6-a507-0732c6ba13c9","series":0,"name":"replace","transplant":{"toString":"inExtendedComment = false","position":"org.apache.commons.codec.language.bm.Lang:146","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"variableMap":{"inExtendedComment":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = true","position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"status":-1},{"failures":[133,134,135,136,137,138],"tindex":"ed8d7991-16f1-11e6-a507-7514e40bdb01","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"charset","key":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))","position":"org.apache.commons.codec.net.URLCodec:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"status":-1},{"failures":[],"tindex":"ed8d7992-16f1-11e6-a507-cb06c197b9f5","series":0,"name":"replace","transplant":{"toString":"final int open = ph.indexOf(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"variableMap":{"ph":"value"},"type":"adrStmt","transplantationPoint":{"toString":"int index = isSilentStart(value) ? 1 : 0","position":"org.apache.commons.codec.language.DoubleMetaphone:93","type":"CtLocalVariableImpl","sourcecode":"int int = isSilentStart(value) ? 1 : 0"},"status":-2},{"failures":[139,140],"tindex":"ed8da0a3-16f1-11e6-a507-55d56d19fed8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (cnt > blocksize) {\n    ctx.update(altResult, 0, blocksize);\n    cnt -= blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:223","type":"CtWhileImpl","sourcecode":"while (cnt > blocksize) {\n    ctx.update(altResult, 0, blocksize);\n    cnt -= blocksize;\n}"},"status":-1},{"failures":[],"tindex":"ed8da0a4-16f1-11e6-a507-013ced0b6ef4","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")","position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(\"Null key\")","position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"status":-2},{"failures":[],"tindex":"ed8da0a5-16f1-11e6-a507-674c1dc5eb36","series":0,"name":"add","transplant":{"toString":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.ENGLISH);\n} ","position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtIfImpl","sourcecode":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[],"tindex":"ed8dc7b6-16f1-11e6-a507-19fe9cc4154e","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:503","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":-3},{"failures":[],"tindex":"ed8dc7b7-16f1-11e6-a507-8943173ca53d","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"org.apache.commons.codec.binary.Base32.MASK_5BITS","pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:514","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[141,134,137],"tindex":"ed8deec8-16f1-11e6-a507-c7260b9b4ca7","series":0,"name":"replace","transplant":{"toString":"for (int i = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i);\n}","position":"org.apache.commons.codec.net.URLCodec:78","type":"CtForImpl","sourcecode":"for (int int = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(' ')","position":"org.apache.commons.codec.net.URLCodec:91","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(' ')"},"status":-1},{"failures":[142,143],"tindex":"ed8deec9-16f1-11e6-a507-dfd8b404da4a","series":0,"name":"replace","transplant":{"toString":"b = '+'","position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"b = '+'"},"variableMap":{"b":"d"},"type":"adrStmt","transplantationPoint":{"toString":"d = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:344","type":"CtAssignmentImpl","sourcecode":"d = results[0]"},"status":-1},{"failures":[144,145],"tindex":"ed8deeca-16f1-11e6-a507-a322ea613a0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (lastCode == '/') {\n    continue;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtIfImpl","sourcecode":"if (lastCode == '/') {\n    continue;\n} "},"status":-1},{"failures":[105],"tindex":"ed8e15db-16f1-11e6-a507-596801bf4429","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:295","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"ed8e15dc-16f1-11e6-a507-67cfc4b53269","series":0,"name":"replace","transplant":{"toString":"if (lineSeparator == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n} ","position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (lineSeparator == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n} "},"variableMap":{"lineSeparator":"pArray","lineLength":"length"},"type":"adrStmt","transplantationPoint":{"toString":"decode(pArray, 0, pArray.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:410","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, pArray.int, context)"},"status":-2},{"failures":[1,2,4,146,147,148,149,150,151,152,153,154,155,156,157,111,158,159,160,133,134,135,137,138,161,42,51,52,54],"tindex":"ed8e15dd-16f1-11e6-a507-ef0f15e89f58","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false))","position":"org.apache.commons.codec.binary.Base64:569","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false))"},"variableMap":{"binaryData":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.US_ASCII)","position":"org.apache.commons.codec.binary.StringUtils:319","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[116,122,129,130,131,132],"tindex":"ed8e3cee-16f1-11e6-a507-09f458a039f9","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:716","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"ed8e3cef-16f1-11e6-a507-7d1cdedf40f8","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"data"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (data.length) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n        data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n    } \n}","position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"status":-2},{"failures":[],"tindex":"ed8e6400-16f1-11e6-a507-9958dfbfe263","series":0,"name":"replace","transplant":{"toString":"final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])","position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String replacement3 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"status":-2},{"failures":[],"tindex":"ed8e8b11-16f1-11e6-a507-49aeab47da68","series":0,"name":"replace","transplant":{"toString":"return colognePhonetic(text1).equals(colognePhonetic(text2))","position":"org.apache.commons.codec.language.ColognePhonetic:422","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text1).equals(colognePhonetic(text2))"},"variableMap":{"text1":"value","text2":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"status":-2},{"failures":[],"tindex":"ed8e8b12-16f1-11e6-a507-b33279991499","series":0,"name":"replace","transplant":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"result = true"},"variableMap":{"result":"eof"},"type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base64:433","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"ed8e8b13-16f1-11e6-a507-a3f09a2b62d9","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"why\", \"Why\")","position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"why\", \"Why\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_K.matcher(str).replaceFirst(\"C\")","position":"org.apache.commons.codec.language.Nysiis:263","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\")"},"status":-2},{"failures":[115,116,162,163,117,118,119,120,121,122,123,164,165,124,125,166,126,167,168,169,127,128,129,130,131,132],"tindex":"ed8e8b14-16f1-11e6-a507-6f8a537a9677","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} ","position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-1},{"failures":[],"tindex":"ed8eb225-16f1-11e6-a507-6d7d9dbdcd79","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern p = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher m = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"line","salt":"line","prefix":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[142,143],"tindex":"ed8eb226-16f1-11e6-a507-59be9c3314fb","series":0,"name":"replace","transplant":{"toString":"c |= 1","position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"variableMap":{"c":"right"},"type":"adrStmt","transplantationPoint":{"toString":"right = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:304","type":"CtAssignmentImpl","sourcecode":"right = results[1]"},"status":-1},{"failures":[170,171,172],"tindex":"ed8eb227-16f1-11e6-a507-89819bed4a62","series":0,"name":"replace","transplant":{"toString":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n    result.append('K');\n    index += 2;\n} else if (index == 0) {\n    if ((charAt(value, (index + 2))) == 'I') {\n        result.append('J');\n    } else {\n        result.append('K');\n    }\n    index += 2;\n} else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n    index += 2;\n} else {\n    if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        result.append('F');\n    } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n        result.append('K');\n    } \n    index += 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:467","type":"CtIfImpl","sourcecode":"if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n    result.append('K');\n    index += 2;\n} else if (index == 0) {\n    if ((charAt(value, (index + 2))) == 'I') {\n        result.append('J');\n    } else {\n        result.append('K');\n    }\n    index += 2;\n} else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n    index += 2;\n} else {\n    if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        result.append('F');\n    } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n        result.append('K');\n    } \n    index += 2;\n}"},"status":-1},{"failures":[],"tindex":"ed8ed938-16f1-11e6-a507-5b17303adcbe","series":0,"name":"replace","transplant":{"toString":"if (result >= 0) {\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n    context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n    if ((context.modulus) == 0) {\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    } \n} ","position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"variableMap":{"result":"length","org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"length","ibitWorkArea":"length","pos":"length","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"length","context":"context","org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE":"length","buffer":"pArray","modulus":"length"},"type":"adrStmt","transplantationPoint":{"toString":"encode(pArray, 0, pArray.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:430","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, pArray.int, context)"},"status":-2},{"failures":[],"tindex":"ed8ed939-16f1-11e6-a507-79573eae9fc8","series":0,"name":"replace","transplant":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str","l":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.Soundex:264","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"failures":[111],"tindex":"ed8f004a-16f1-11e6-a507-03a329a7eb3f","series":0,"name":"add","transplant":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"i","l_ascii":"tmp","bits":"i"},"type":"adrStmt","transplantationPoint":{"toString":"tmp[i] = b","position":"org.apache.commons.codec.net.QCodec:185","type":"CtAssignmentImpl","sourcecode":"tmp[i] = b"},"status":-1},{"failures":[],"tindex":"ed8f004b-16f1-11e6-a507-8db435587f4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.folding = folding","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"status":-2},{"failures":[],"tindex":"ed8f004c-16f1-11e6-a507-7f3eb3329adb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base32:343","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[173,174,114,175,176,177,178,179],"tindex":"ed8f004d-16f1-11e6-a507-fff8f827c9fd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"mac.update(buffer, 0, read)","position":"org.apache.commons.codec.digest.HmacUtils:770","type":"CtInvocationImpl","sourcecode":"mac.update(buffer, 0, read)"},"status":-1},{"failures":[],"tindex":"ed8f275e-16f1-11e6-a507-21640bf68418","series":0,"name":"replace","transplant":{"toString":"return newData","position":"org.apache.commons.codec.language.ColognePhonetic:262","type":"CtReturnImpl","sourcecode":"return newData"},"variableMap":{"newData":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_N","position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":0},{"failures":[],"tindex":"ed8f275f-16f1-11e6-a507-cd9743764eeb","series":0,"name":"replace","transplant":{"toString":"final java.lang.String singleLetter = dc.substring(0, 1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = dc.substring(0, 1)"},"variableMap":{"dc":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name1LtREnd = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:302","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[],"tindex":"ed8f2760-16f1-11e6-a507-1190c0923d9b","series":0,"name":"replace","transplant":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str","l":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[180],"tindex":"ed8f2761-16f1-11e6-a507-212f0c557d91","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:221","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[142,143],"tindex":"ed8f2762-16f1-11e6-a507-cba07fffb400","series":0,"name":"replace","transplant":{"toString":"left = (t >>> 1) | (t << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"variableMap":{"t":"t","left":"t"},"type":"adrStmt","transplantationPoint":{"toString":"t = left","position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":53,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
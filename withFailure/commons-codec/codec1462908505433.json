{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":18,"org.apache.commons.codec.binary.HexTest.testCustomCharset":25,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":17,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":22,"org.apache.commons.codec.binary.Base64Test.testBase64":50,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":1,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":12,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":13,"org.apache.commons.codec.binary.Base64Test.testUUID":38,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":34,"org.apache.commons.codec.binary.Base64Test.testSingletons":48,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":55,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":60,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":57,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":6,"org.apache.commons.codec.binary.Base64Test.testPairs":37,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":28,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":10,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":44,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":56,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":51,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":61,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":2,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":40,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":36,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":41,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":32,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":35,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":27,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":42,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":43,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":8,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":59,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":15,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":20,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":9,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":5,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":14,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":24,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":29,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":45,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":19,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":4,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":46,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":52,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":30,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":47,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":33,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":7,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":53,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":58,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":16,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":23,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":26,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":49,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":54,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":31,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":21,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":0,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":3,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":39,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":11},"transformations":[{"failures":[0],"tindex":"5d927553-16e5-11e6-8e07-1933ca47af94","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"wy\", \"Wy\")","position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wy\", \"Wy\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"wh3\", \"Wh3\")","position":"org.apache.commons.codec.language.Caverphone1:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":-1},{"failures":[],"tindex":"5d929c64-16e5-11e6-8e07-9d20ff6c5e75","series":0,"name":"replace","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(encodeSize, context)","position":"org.apache.commons.codec.binary.Base32:445","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"5d929c65-16e5-11e6-8e07-3735f848bc22","series":0,"name":"replace","transplant":{"toString":"final char[] newData = new char[length]","position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"variableMap":{"length":"l"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] out = new char[l << 1]","position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"status":-1},{"failures":[],"tindex":"5d929c66-16e5-11e6-8e07-43d61062a8bd","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.RuleType rt : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> rs = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages ls = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String l : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}","position":"org.apache.commons.codec.language.bm.Rule:217","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String java.lang.String : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}"},"status":-2},{"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"5d92c377-16e5-11e6-8e07-5be9a72c222d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (context.eof) {\n    return ;\n} ","position":"org.apache.commons.codec.binary.Base64:429","type":"CtIfImpl","sourcecode":"if (context.boolean) {\n    return ;\n} "},"status":-2},{"failures":[],"tindex":"5d92ea88-16e5-11e6-8e07-f7c0ea6b914e","series":0,"name":"add","transplant":{"toString":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")","position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")","position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"status":-2},{"failures":[59,60,61],"tindex":"5d92ea89-16e5-11e6-8e07-2f96918970a5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n    } \n}","position":"org.apache.commons.codec.binary.BinaryCodec:209","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n    } \n}"},"status":-1},{"failures":[],"tindex":"5d92ea8a-16e5-11e6-8e07-d9b2c6a6eadf","series":0,"name":"replace","transplant":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:154","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"variableMap":{"sb":"phonemeText"},"type":"adrStmt","transplantationPoint":{"toString":"return (((phonemeText.toString()) + \"[\") + (languages)) + \"]\"","position":"org.apache.commons.codec.language.bm.Rule:168","type":"CtReturnImpl","sourcecode":"return (((java.lang.StringBuilder.toString()) + \"[\") + (org.apache.commons.codec.language.bm.Languages.LanguageSet)) + \"]\""},"status":0}],"header":{"groupId":"commons-codec","transformationCount":8,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
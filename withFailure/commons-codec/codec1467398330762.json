{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":198,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":197,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":151,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":4,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":2,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":3,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":162,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":110,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":217,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":104,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":152,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":9,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":92,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":106,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":135,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":127,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":134,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":206,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":100,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":8,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":101,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":59,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":60,"org.apache.commons.codec.language.NysiisTest.testCap":163,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":63,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":27,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":61,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":24,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":62,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":210,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":50,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":204,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":121,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":79,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":189,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":150,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":117,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":155,"org.apache.commons.codec.language.SoundexTest.testB650":95,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":82,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":186,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":201,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":74,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":51,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":154,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":83,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":91,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":70,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":81,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":209,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":146,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":203,"org.apache.commons.codec.language.NysiisTest.testDropBy":132,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":192,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":159,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":108,"org.apache.commons.codec.binary.Base64Test.testUUID":56,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":179,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":77,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":205,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":76,"org.apache.commons.codec.language.NysiisTest.testRule1":167,"org.apache.commons.codec.language.NysiisTest.testRule7":131,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":36,"org.apache.commons.codec.language.NysiisTest.testRule6":130,"org.apache.commons.codec.language.NysiisTest.testRule5":168,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":125,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":194,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":17,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":99,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":196,"org.apache.commons.codec.language.NysiisTest.testBran":169,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":105,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":225,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":53,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":158,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":85,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":183,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":67,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":142,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":199,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":123,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":136,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":107,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":148,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":42,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":113,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":143,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":219,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":114,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":16,"org.apache.commons.codec.language.NysiisTest.testDad":164,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":47,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":28,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":58,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":15,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":145,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":161,"org.apache.commons.codec.language.NysiisTest.testDan":165,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":102,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":141,"org.apache.commons.codec.language.NysiisTest.testSnat":171,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":188,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":187,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":222,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":221,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":84,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":137,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":48,"org.apache.commons.codec.binary.Base64Test.testTriplets":200,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":160,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":103,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":33,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":31,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":34,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":149,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":80,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":45,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":64,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":111,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":208,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":223,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":140,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":213,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":109,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":157,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse":22,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":126,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":89,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":153,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":178,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":86,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":66,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":30,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":122,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":32,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":97,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":191,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":184,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":116,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":11,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":29,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":43,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":19,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":93,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":73,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":129,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":182,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":144,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":176,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":185,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":139,"org.apache.commons.codec.language.NysiisTest.testTranan":174,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":212,"org.apache.commons.codec.language.NysiisTest.testFal":166,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":25,"org.apache.commons.codec.language.NysiisTest.testSnad":170,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":180,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":13,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":147,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":14,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":0,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":124,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":94,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":1,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":207,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":216,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":190,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":202,"org.apache.commons.codec.binary.Base64Test.testBase64":69,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":220,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":119,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":44,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":65,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":138,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":35,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":218,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":90,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":214,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":41,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":54,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":172,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":115,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":211,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":52,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":128,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":98,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":181,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":46,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":72,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":177,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":133,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":224,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":12,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":78,"org.apache.commons.codec.language.NysiisTest.testOthers":173,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":68,"org.apache.commons.codec.language.SoundexTest.testDifference":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":193,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":23,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":156,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":112,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":215,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":120,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":195,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":118},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"0e05e465-3fbb-11e6-81f8-6b1f9043612b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:387","type":"CtAssignmentImpl","sourcecode":"code = '5'"},"variableMap":{"code":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:271","type":"CtAssignmentImpl","sourcecode":"last = getMappingCode(str, 0)"},"status":-1},{"failures":[],"tindex":"0e060b76-3fbb-11e6-81f8-6b515190e3ca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:235","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"0e063287-3fbb-11e6-81f8-d721196c13ee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return digit"},"variableMap":{"digit":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtIfImpl","sourcecode":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (readLen == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(buf);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return readLen;\n}"},"status":-2},{"failures":[],"tindex":"0e063288-3fbb-11e6-81f8-9b619ddd8971","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"variableMap":{"txt":"pattern"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:170","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"status":-2},{"failures":[],"tindex":"0e063289-3fbb-11e6-81f8-8fa78bce5854","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:157","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[boolean ? 4096 : 8192]"},"status":-2},{"failures":[9,10,11,12,13,14,15,16,17,18,19],"tindex":"0e06328a-3fbb-11e6-81f8-9f0ca27152a2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:430","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"status":-1},{"failures":[],"tindex":"0e06599b-3fbb-11e6-81f8-e9fbccf3a824","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"variableMap":{"concat":"found"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:231","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean"},"status":0},{"failures":[20,21,22],"tindex":"0e06599c-3fbb-11e6-81f8-fb9aff5d8f3a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:219","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"0e06599d-3fbb-11e6-81f8-e7af65ca08ba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:412","type":"CtIfImpl","sourcecode":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inMultilineComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inMultilineComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n            if (incl.contains(\" \")) {\n                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n            } else {\n                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                    final int int = currentLine;\n                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                        private final int myLine = cLine;\n\n                        private final java.lang.String loc = location;\n\n                        @java.lang.Override\n                        public java.lang.String toString() {\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            sb.append(\"Rule\");\n                            sb.append(\"{line=\").append(int);\n                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                            sb.append(\", pat='\").append(pat).append('\\'');\n                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                            sb.append('}');\n                            return sb.toString();\n                        }\n                    };\n                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                        lines.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}"},"variableMap":{"loc":"pattern","rawLine":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE","org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","$anonymous0":"location","e":"e","line":"pattern","org.apache.commons.codec.language.bm.ResourceConstants.CMT":"$anonymous2","inMultilineComment":"inMultilineComment","length":"myLine","pattern":"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE","$anonymous3":"$anonymous3","$anonymous2":"loc","$anonymous1":"$anonymous2","myLine":"myLine","org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","location":"pattern","lines":"lines","currentLine":"currentLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:407","type":"CtWhileImpl","sourcecode":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String java.lang.String = scanner.nextLine();\n    java.lang.String java.lang.String = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inMultilineComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inMultilineComment = true;\n        } else {\n            final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n            if (cmtI >= 0) {\n                line = line.substring(0, cmtI);\n            } \n            line = line.trim();\n            if ((line.length()) == 0) {\n                continue;\n            } \n            if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n                if (incl.contains(\" \")) {\n                    throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n                } else {\n                    lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n                }\n            } else {\n                final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                if ((parts.int) != 4) {\n                    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n                } else {\n                    try {\n                        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                        final int int = currentLine;\n                        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                            private final int myLine = cLine;\n\n                            private final java.lang.String loc = location;\n\n                            @java.lang.Override\n                            public java.lang.String toString() {\n                                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                sb.append(\"Rule\");\n                                sb.append(\"{line=\").append(int);\n                                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                                sb.append(\", pat='\").append(pat).append('\\'');\n                                sb.append(\", lcon='\").append(lCon).append('\\'');\n                                sb.append(\", rcon='\").append(rCon).append('\\'');\n                                sb.append('}');\n                                return sb.toString();\n                            }\n                        };\n                        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                        if (rules == null) {\n                            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                            lines.put(patternKey, rules);\n                        } \n                        rules.add(r);\n                    } catch (final java.lang.IllegalArgumentException e) {\n                        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"0e06f5de-3fbb-11e6-81f8-3d13183bd6bd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-2},{"failures":[23,24,25,26,27,28,29,30],"tindex":"0e06f5df-3fbb-11e6-81f8-3de5670074e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:55","type":"CtLocalVariableImpl","sourcecode":"int int = start"},"variableMap":{"start":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:167","type":"CtLocalVariableImpl","sourcecode":"final int int = bytes[i]"},"status":-1},{"failures":[],"tindex":"0e071cf0-3fbb-11e6-81f8-77d89b0b5de6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:160","type":"CtIfImpl","sourcecode":"if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n} "},"status":-2},{"failures":[],"tindex":"0e071cf1-3fbb-11e6-81f8-916f000305f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:70","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"0e071cf2-3fbb-11e6-81f8-5f8f9d0768e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-2},{"failures":[31,32,33,34],"tindex":"0e071cf3-3fbb-11e6-81f8-a9d0d1c20bfa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:245","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"0e074404-3fbb-11e6-81f8-2345f3f06de0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"lastCode = code"},"variableMap":{"code":"current","lastCode":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"status":-2},{"failures":[35],"tindex":"0e074405-3fbb-11e6-81f8-e96c523d207e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:106","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.isEmpty()"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:111","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.size()) == 1"},"status":-1},{"failures":[],"tindex":"0e074406-3fbb-11e6-81f8-395c8614c57b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:193","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"variableMap":{"strict":"found"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = false"},"status":-2},{"failures":[36],"tindex":"0e074407-3fbb-11e6-81f8-233bab1974cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"status":-1},{"failures":[10,16],"tindex":"0e074408-3fbb-11e6-81f8-a1205c679008","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:224","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[10,16],"tindex":"0e074409-3fbb-11e6-81f8-edbb82c6bc43","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"status":-1},{"failures":[37,38],"tindex":"0e076b1a-3fbb-11e6-81f8-e1eb09758d58","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return index + 3"},"status":-1},{"failures":[],"tindex":"0e076b1b-3fbb-11e6-81f8-b1ee156a5a7b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"status":-2},{"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"0e076b1c-3fbb-11e6-81f8-d9ff2390a06b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"b[8] = 0"},"variableMap":{"b":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:449","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[79,80,81],"tindex":"0e076b1d-3fbb-11e6-81f8-e78ccc707057","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:183","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-1},{"failures":[82],"tindex":"0e076b1e-3fbb-11e6-81f8-15346da767a8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"2\")"},"status":-1},{"failures":[],"tindex":"0e07922f-3fbb-11e6-81f8-9b2eb431f338","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.Caverphone1.SIX_1":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[],"tindex":"0e079230-3fbb-11e6-81f8-5b377a3a2306","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:173","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementDefault.split(\"\\\\|\")"},"variableMap":{"replacementDefault":"replacementAtStart"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:171","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementAtStart.split(\"\\\\|\")"},"status":-2},{"failures":[25,26,83,27,29,84,85,30],"tindex":"0e079231-3fbb-11e6-81f8-093e4a1a19cc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:109","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.this.java.lang.String = charset"},"status":-1},{"failures":[],"tindex":"0e079232-3fbb-11e6-81f8-f92985b10382","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:186","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[86,87,88,89,90,91,92],"tindex":"0e079233-3fbb-11e6-81f8-41eff15bd5e4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:797","type":"CtInvocationImpl","sourcecode":"digest.update(buffer, 0, read)"},"status":-1},{"failures":[93,0,94,1,95,2,3,4,96,97,98,5,99,6,7,100,101,8],"tindex":"0e079234-3fbb-11e6-81f8-09a684db8a48","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:167","type":"CtReturnImpl","sourcecode":"return soundex(str)"},"status":-1},{"failures":[],"tindex":"0e07b845-3fbb-11e6-81f8-fd63add954f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:286","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:478","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer)"},"status":-2},{"failures":[102,103],"tindex":"0e07b846-3fbb-11e6-81f8-434ef105fe8d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"status":-1},{"failures":[],"tindex":"0e07b847-3fbb-11e6-81f8-61f3fbde1856","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0},{"failures":[104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"tindex":"0e07b848-3fbb-11e6-81f8-9bc1b2bc0cea","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:143","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"variableMap":{"b":"i","org.apache.commons.codec.net.URLCodec.RADIX":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:360","type":"CtLocalVariableImpl","sourcecode":"final char char = accentedWord.charAt(i)"},"status":-1},{"failures":[],"tindex":"0e07b849-3fbb-11e6-81f8-8fb838457826","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:429","type":"CtInvocationImpl","sourcecode":"buffer.append(saltString)"},"variableMap":{"saltString":"org.apache.commons.codec.net.RFC1522Codec.PREFIX","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:73","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)"},"status":-2},{"failures":[],"tindex":"0e07b84a-3fbb-11e6-81f8-23069b02d4a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:194","type":"CtContinueImpl","sourcecode":"continue"},"status":0},{"failures":[],"tindex":"0e07b84b-3fbb-11e6-81f8-4334e004512e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:279","type":"CtForImpl","sourcecode":"for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}"},"variableMap":{"input":"chars","suffix":"chars"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:240","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (chars.length()) ; i++) {\n    if ((chars.charAt(i)) == input) {\n        return true;\n    } \n}"},"status":-2},{"failures":[122,37,38],"tindex":"0e07df5c-3fbb-11e6-81f8-91cddfc3c6dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:358","type":"CtReturnImpl","sourcecode":"return index + 2"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:492","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"failures":[123,124,125,126,127,128,129],"tindex":"0e07df5d-3fbb-11e6-81f8-fbf5c07be190","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:115","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-1},{"failures":[],"tindex":"0e07df5e-3fbb-11e6-81f8-477db9e9731e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:251","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object))"},"status":-2},{"failures":[],"tindex":"0e07df5f-3fbb-11e6-81f8-07ccdaaedcaf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"phonemeText"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:110","type":"CtAssignmentImpl","sourcecode":"this.java.lang.StringBuilder = new java.lang.StringBuilder(phonemeText)"},"status":-2},{"failures":[],"tindex":"0e07df60-3fbb-11e6-81f8-738eb477c2f6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"variableMap":{"t":"index","left":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:457","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"0e07df61-3fbb-11e6-81f8-77ef56b67135","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"variableMap":{"result":"force","value":"nextReplacement","element":"nextReplacement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:530","type":"CtInvocationImpl","sourcecode":"nextBranch.processNextReplacement(nextReplacement, force)"},"status":-2},{"failures":[],"tindex":"0e07df62-3fbb-11e6-81f8-4bc84e644f5e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:232","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"0e080673-3fbb-11e6-81f8-25b82c30c449","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_AF":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"status":0},{"failures":[10,11,12],"tindex":"0e080674-3fbb-11e6-81f8-c5af41d0d374","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:473","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)"},"status":-1},{"failures":[],"tindex":"0e080675-3fbb-11e6-81f8-15490fade55c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:125","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String)"},"status":0},{"failures":[],"tindex":"0e080676-3fbb-11e6-81f8-5fed2de257af","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"count","to":"count"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:275","type":"CtIfImpl","sourcecode":"if ((mapped != '0') && (mapped != last)) {\n    out[(count++)] = mapped;\n} "},"status":-2},{"failures":[],"tindex":"0e080677-3fbb-11e6-81f8-dd176de8a741","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:190","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (str.length()) ; i++) {\n    current = getMappingCode(str.charAt(i));\n    if (current == last) {\n        continue;\n    } else if (current != 0) {\n        sBuf.append(current);\n    } \n    last = current;\n}"},"status":-2},{"failures":[],"tindex":"0e080678-3fbb-11e6-81f8-d93bb098c2f8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:325","type":"CtReturnImpl","sourcecode":"return index"},"variableMap":{"index":"compareCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"status":-2},{"failures":[],"tindex":"0e082d89-3fbb-11e6-81f8-a5d911c6950e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:148","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[130,131,132],"tindex":"0e082d8a-3fbb-11e6-81f8-c5425caf2c3b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:385","type":"CtAssignmentImpl","sourcecode":"code = '7'"},"variableMap":{"code":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:298","type":"CtAssignmentImpl","sourcecode":"lastChar = key.charAt(((key.length()) - 1))"},"status":-1},{"failures":[133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160],"tindex":"0e082d8b-3fbb-11e6-81f8-017547ddd3e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"decodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:288","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-1},{"failures":[161,162,163,164,165,166,167,168,131,169,170,171,172,132,173,174,175],"tindex":"0e082d8c-3fbb-11e6-81f8-796d481e9d45","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:212","type":"CtInvocationImpl","sourcecode":"buffer.setCharAt(1, charOne)"},"variableMap":{"buffer":"key","charOne":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:310","type":"CtIfImpl","sourcecode":"if (lastChar == 'A') {\n    key.deleteCharAt(((key.length()) - 1));\n} "},"status":-1},{"failures":[176,5],"tindex":"0e082d8d-3fbb-11e6-81f8-c768ba8601b0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:298","type":"CtLocalVariableImpl","sourcecode":"final int int = (name1.length()) - 1"},"variableMap":{"name1":"es1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:114","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(es1.length(), es2.length())"},"status":-1},{"failures":[],"tindex":"0e08549e-3fbb-11e6-81f8-633dbfce5bd5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:273","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[(raw.int) << 3]"},"status":-2},{"failures":[177],"tindex":"0e08549f-3fbb-11e6-81f8-0faba794618e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:195","type":"CtReturnImpl","sourcecode":"return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u')"},"status":-1},{"failures":[178,179,180,181,182,183,184,185],"tindex":"0e0854a0-3fbb-11e6-81f8-e9043067df04","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:286","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)"},"status":-1},{"failures":[177,186,187,188,189,190],"tindex":"0e0854a1-3fbb-11e6-81f8-774451cf20ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:506","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    continue;\n} "},"variableMap":{"rules":"ruleList"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:241","type":"CtInvocationImpl","sourcecode":"java.util.Collections.sort(ruleList, new java.util.Comparator<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>() {\n    @java.lang.Override\n    public int compare(final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule1, final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule2) {\n        return (rule2.getPatternLength()) - (rule1.getPatternLength());\n    }\n})"},"status":-1},{"failures":[102,103],"tindex":"0e0854a2-3fbb-11e6-81f8-a9c80fcb4f45","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"variableMap":{"u":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:288","type":"CtAssignmentImpl","sourcecode":"right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule)"},"status":-1},{"failures":[],"tindex":"0e0854a3-3fbb-11e6-81f8-1b1c03e52d4c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"rawLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:258","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"status":-2},{"failures":[90],"tindex":"0e0854a4-3fbb-11e6-81f8-b9d63a24e3f7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:594","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"status":-1},{"failures":[],"tindex":"0e087bb5-3fbb-11e6-81f8-c78e4797b6b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"0e087bb6-3fbb-11e6-81f8-3d2ef6323c8b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"charset","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:109","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.this.java.lang.String = charset"},"status":-2},{"failures":[],"tindex":"0e087bb7-3fbb-11e6-81f8-13c4e984d266","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:406","type":"CtIfImpl","sourcecode":"if ((pArray == null) || ((pArray.int) == 0)) {\n    return pArray;\n} "},"variableMap":{"pArray":"buffer","length":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:269","type":"CtIfImpl","sourcecode":"if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n    return resizeBuffer(context);\n} "},"status":-2},{"failures":[177,186,191,187,188,192,189,193,190,194,195,196,197],"tindex":"0e087bb8-3fbb-11e6-81f8-39fce4888219","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:317","type":"CtAssignmentImpl","sourcecode":"rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>()"},"status":-1},{"failures":[122,198,37,38],"tindex":"0e087bb9-3fbb-11e6-81f8-4be52bc1bb21","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:400","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"0e087bba-3fbb-11e6-81f8-5dfe5c049f8a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"org.apache.commons.codec.language.Caverphone2.TEN_1","key":"org.apache.commons.codec.language.Caverphone2.TEN_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String"},"status":-2},{"failures":[39,40,41,199],"tindex":"0e087bbb-3fbb-11e6-81f8-35df244486f4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"status":-1},{"failures":[38],"tindex":"0e087bbc-3fbb-11e6-81f8-c91b5fe7bf48","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[],"tindex":"0e087bbd-3fbb-11e6-81f8-89beeeb8131e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"variableMap":{"c":"left","d":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:301","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-2},{"failures":[177,186,191,187,188,192,189,193,190],"tindex":"0e08a2ce-3fbb-11e6-81f8-21da7794ab46","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"ch","c2":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:385","type":"CtIfImpl","sourcecode":"if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n    ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n} "},"status":-1},{"failures":[],"tindex":"0e08a2cf-3fbb-11e6-81f8-bf051e42aef7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"0e08a2d0-3fbb-11e6-81f8-fd8a1308bf68","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:220","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = ctx1.digest()"},"status":-2},{"failures":[],"tindex":"0e08a2d1-3fbb-11e6-81f8-2512890930fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:269","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\")"},"status":-2},{"failures":[],"tindex":"0e08a2d2-3fbb-11e6-81f8-351b17f75eba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtIfImpl","sourcecode":"if (target.equals(element)) {\n    result = true;\n    break;\n} "},"variableMap":{"result":"force","target":"nextReplacement","element":"nextReplacement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:530","type":"CtInvocationImpl","sourcecode":"nextBranch.processNextReplacement(nextReplacement, force)"},"status":-2},{"failures":[],"tindex":"0e08a2d3-3fbb-11e6-81f8-010e40ee89c1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"status":-2},{"failures":[198,38],"tindex":"0e08a2d4-3fbb-11e6-81f8-af791c38a65a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:520","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"status":-1},{"failures":[102,103],"tindex":"0e08c9e5-3fbb-11e6-81f8-5b5f48b451bf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"c","tempResult":"b","pBytes":"b","cp":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"status":-1},{"failures":[39,40,199,43,44,48,49,53,200,201,56,57,58,59,60,61,62,202,63,64,65,203,204,68,205,69,206,207,70,208,73,209,210,211,212],"tindex":"0e08c9e6-3fbb-11e6-81f8-e78f8abd457d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:388","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-1},{"failures":[],"tindex":"0e08c9e7-3fbb-11e6-81f8-c9ebfe060275","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:75","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('*')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:70","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('%')"},"status":0},{"failures":[122,37,38],"tindex":"0e08c9e8-3fbb-11e6-81f8-91a0ca30eb35","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[],"tindex":"0e08c9e9-3fbb-11e6-81f8-8f1333c406da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"0e08c9ea-3fbb-11e6-81f8-b7b7d0fd6ced","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"status":-2},{"failures":[],"tindex":"0e08c9eb-3fbb-11e6-81f8-e3a2ef995462","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"index","right":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:393","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[],"tindex":"0e08c9ec-3fbb-11e6-81f8-853006f8a883","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()"},"status":-2},{"failures":[],"tindex":"0e08c9ed-3fbb-11e6-81f8-cbf4e1a0ab23","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:468","type":"CtIfImpl","sourcecode":"if ((++index) < (branches.int)) {\n    sb.append('|');\n} "},"status":-2},{"failures":[132],"tindex":"0e08f0fe-3fbb-11e6-81f8-291361db277c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:120","type":"CtIfImpl","sourcecode":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"next":"next","org.apache.commons.codec.language.Nysiis.CHARS_AF":"org.apache.commons.codec.language.Nysiis.CHARS_FF","curr":"next"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:153","type":"CtIfImpl","sourcecode":"if ((curr == 'P') && (next == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[31,32,33,34,213,214,215,216,217,218,35,219,220,221,222,223,224,225],"tindex":"0e08f0ff-3fbb-11e6-81f8-231cbcb2f026","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:229","type":"CtInvocationImpl","sourcecode":"rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")))"},"variableMap":{"rs":"rs","rt":"rt","s":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:223","type":"CtInvocationImpl","sourcecode":"rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)))"},"status":-1},{"failures":[50,51,52,150,152,153],"tindex":"0e08f100-3fbb-11e6-81f8-df71f5c09103","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return n - todo"},"status":-1},{"failures":[],"tindex":"0e08f101-3fbb-11e6-81f8-2940140d0172","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:84","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[10,11,12],"tindex":"0e08f102-3fbb-11e6-81f8-ab6a8a933e8d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:490","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)"},"status":-1},{"failures":[31,32,33,34,213,214,215,216,217,218,35,219,220,221,222,223,224,225],"tindex":"0e08f103-3fbb-11e6-81f8-53ae33efeae8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:398","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.parsePhoneme(ph)"},"variableMap":{"ph":"ph"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtIfImpl","sourcecode":"if (ph.startsWith(\"(\")) {\n    if (!(ph.endsWith(\")\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n    } \n    final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();\n    final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1));\n    for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n        phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n    }\n    if ((body.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n        phs.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n    } \n    return new org.apache.commons.codec.language.bm.Rule.PhonemeList(phs);\n} else {\n    return org.apache.commons.codec.language.bm.Rule.parsePhoneme(ph);\n}"},"status":-1},{"failures":[35],"tindex":"0e08f104-3fbb-11e6-81f8-bfcc6caf76b1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:357","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} "},"status":-1},{"failures":[],"tindex":"0e091815-3fbb-11e6-81f8-8f7d194b0e7c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":-2},{"failures":[],"tindex":"0e091816-3fbb-11e6-81f8-fdaef4fe7f9b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0},{"failures":[37,38],"tindex":"0e091817-3fbb-11e6-81f8-45adc50c7e34","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"status":-1},{"failures":[],"tindex":"0e091818-3fbb-11e6-81f8-0fa83e375fb4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:308","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
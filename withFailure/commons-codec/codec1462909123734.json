{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":52,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":16,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":17,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":18,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":36,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":4,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":48,"org.apache.commons.codec.language.NysiisTest.testDropBy":43,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":20,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":21,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":49,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":53,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":56,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":12,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":63,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":3,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":41,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":45,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":46,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":13,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":54,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":57,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":66,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":33,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":35,"org.apache.commons.codec.language.NysiisTest.testRule6":42,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":34,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":55,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":39,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":65,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":47,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":28,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":32,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":30,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":31,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":70,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":37,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":38,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":69,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":51,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":71,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":72,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":59,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":40,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":61,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":24,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":5,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":29,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":15,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":10,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":50,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":6,"org.apache.commons.codec.language.SoundexTest.testB650":19,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":9,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":67,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":68,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":58,"org.apache.commons.codec.language.SoundexTest.testNewInstance":27,"org.apache.commons.codec.language.NysiisTest.testOthers":44,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":8,"org.apache.commons.codec.language.SoundexTest.testDifference":26,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":2,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":62,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":60,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":7,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":11},"transformations":[{"failures":[0,1],"tindex":"ce1cc5fd-16e6-11e6-9cbd-3f983369b7c5","series":0,"name":"add","transplant":{"toString":"result.append('J', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"KL\", \"L\")","position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"status":-1},{"failures":[],"tindex":"ce1ced0e-16e6-11e6-9cbd-4fb9f13aebe4","series":0,"name":"replace","transplant":{"toString":"final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim()","position":"org.apache.commons.codec.language.bm.Rule:435","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim()"},"variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"name","line":"name"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String lastThree = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)), nameLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:164","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength)"},"status":-3},{"failures":[2],"tindex":"ce1d141f-16e6-11e6-9cbd-a9b2cc88285e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"n += 2","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"status":-1},{"failures":[],"tindex":"ce1d1420-16e6-11e6-9cbd-1beb38f0a93e","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i += patternLength","position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"variableMap":{"patternLength":"index","i":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:763","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-3},{"failures":[],"tindex":"ce1d3b31-16e6-11e6-9cbd-2301801bacc9","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))","position":"org.apache.commons.codec.language.AbstractCaverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))"},"variableMap":{"str1":"value1","str2":"value2"},"type":"adrStmt","transplantationPoint":{"toString":"return isDoubleMetaphoneEqual(value1, value2, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:231","type":"CtReturnImpl","sourcecode":"return isDoubleMetaphoneEqual(value1, value2, false)"},"status":-2},{"failures":[3,4,5,6,7,8,9,10],"tindex":"ce1d3b32-16e6-11e6-9cbd-d32003a671d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(pBytes, 0, keyLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:398","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-1},{"failures":[11,12],"tindex":"ce1d3b33-16e6-11e6-9cbd-6fec2d09c2b6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[13],"tindex":"ce1d6244-16e6-11e6-9cbd-a3a80a1b5f66","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)","position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"variableMap":{"byteArray":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"failures":[],"tindex":"ce1d6245-16e6-11e6-9cbd-3735d8d9ae87","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:412","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"c\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"status":-3},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"ce1d6246-16e6-11e6-9cbd-1b0be098ad63","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(out)","position":"org.apache.commons.codec.language.Soundex:281","type":"CtReturnImpl","sourcecode":"return new java.lang.String(out)"},"status":-1},{"failures":[],"tindex":"ce1d8957-16e6-11e6-9cbd-8d3770564e40","series":0,"name":"replace","transplant":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str","l":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:208","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[36],"tindex":"ce1d8958-16e6-11e6-9cbd-13536ea77bf3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"status":-1},{"failures":[37,38,39],"tindex":"ce1db069-16e6-11e6-9cbd-13ebd6c78e9b","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^rough\", \"rou2f\")","position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[],"tindex":"ce1db06a-16e6-11e6-9cbd-4d114789ccab","series":0,"name":"replace","transplant":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"index","keyLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:601","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"ce1db06b-16e6-11e6-9cbd-fd9ecd24b33b","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (key.length) ; i++) {\n    key[i] = 0;\n}","position":"org.apache.commons.codec.digest.UnixCrypt:216","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (key.int) ; i++) {\n    key[i] = 0;\n}"},"variableMap":{"length":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","key":"decodeTable"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte b = in[(inPos++)];\n    if (b == (pad)) {\n        context.eof = true;\n        break;\n    } else {\n        final byte[] buffer = ensureBufferSize(decodeSize, context);\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.decodeTable.length))) {\n            final int result = org.apache.commons.codec.binary.Base32.this.decodeTable[b];\n            if (result >= 0) {\n                context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK);\n                context.lbitWorkArea = ((context.lbitWorkArea) << (org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE)) + result;\n                if ((context.modulus) == 0) {\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.binary.Base32:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte byte = in[(inPos++)];\n    if (b == (byte)) {\n        context.boolean = true;\n        break;\n    } else {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n            final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n            if (result >= 0) {\n                context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n                if ((context.int) == 0) {\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-2},{"failures":[40,41],"tindex":"ce1dfe8c-16e6-11e6-9cbd-bb7141b7321c","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"variableMap":{"input":"input","this":"this","content":"bContent"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} "},"status":-1},{"failures":[],"tindex":"ce1e4cad-16e6-11e6-9cbd-dd5472a650d7","series":0,"name":"replace","transplant":{"toString":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:339","type":"CtWhileImpl","sourcecode":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"l","sBytes":"data","tempResult":"data","saltLen":"l","cp":"l"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0, j = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}","position":"org.apache.commons.codec.binary.Hex:144","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}"},"status":-2},{"failures":[42,43,44],"tindex":"ce1e4cae-16e6-11e6-9cbd-137223cdd3b0","series":0,"name":"replace","transplant":{"toString":"code.append('0')","position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"key"},"type":"adrStmt","transplantationPoint":{"toString":"key.deleteCharAt(((key.length()) - 2))","position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"status":-1},{"failures":[45,40,41,46,47,48,49,50],"tindex":"ce1e73bf-16e6-11e6-9cbd-e99a04b48010","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.add(phoneme)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(phoneme)"},"status":-1},{"failures":[],"tindex":"ce1e73c0-16e6-11e6-9cbd-55c72b4784ce","series":0,"name":"replace","transplant":{"toString":"sb.append('}')","position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"variableMap":{"sb":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(si.next())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:261","type":"CtInvocationImpl","sourcecode":"sb.append(si.next())"},"status":0},{"failures":[],"tindex":"ce1e73c1-16e6-11e6-9cbd-65ae3415d390","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.maxLength = maxLength","position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"status":-2},{"failures":[4,5,6],"tindex":"ce22b982-16e6-11e6-9cbd-31e4fbb64f9b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:487","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:474","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer)"},"status":-1},{"failures":[],"tindex":"ce22b983-16e6-11e6-9cbd-e96779ee02ad","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.SEPHARDIC, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:241","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))"},"variableMap":{"org.apache.commons.codec.language.bm.NameType.SEPHARDIC":"org.apache.commons.codec.language.bm.NameType.ASHKENAZI","org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.ASHKENAZI, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:238","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))"},"status":0},{"failures":[],"tindex":"ce22b984-16e6-11e6-9cbd-39790c00f4a2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"try {\n    return decodeText(str);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.QCodec:268","type":"CtTryImpl","sourcecode":"try {\n    return decodeText(str);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[51,52,0,1],"tindex":"ce22e095-16e6-11e6-9cbd-2b2bb3ffaaa4","series":0,"name":"replace","transplant":{"toString":"return 3","position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:697","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"failures":[],"tindex":"ce22e096-16e6-11e6-9cbd-a5035588886b","series":0,"name":"add","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:103","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"ce22e097-16e6-11e6-9cbd-2fb514c3e928","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.languages = java.util.Collections.unmodifiableSet(languages)","position":"org.apache.commons.codec.language.bm.Languages:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = java.util.Collections.unmodifiableSet(languages)"},"status":-2},{"failures":[],"tindex":"ce237cd8-16e6-11e6-9cbd-c1ffb184b463","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e)","position":"org.apache.commons.codec.language.bm.Rule:480","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e)"},"status":0},{"failures":[],"tindex":"ce237cd9-16e6-11e6-9cbd-f9a9f8a96e2c","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^trough\", \"trou2f\")","position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^trough\", \"trou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:122","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"status":0},{"failures":[],"tindex":"ce237cda-16e6-11e6-9cbd-47c5aad21edd","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5, key)","position":"org.apache.commons.codec.digest.HmacUtils:63","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"variableMap":{"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5":"algorithm","key":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"status":-3},{"failures":[53],"tindex":"ce237cdb-16e6-11e6-9cbd-778921e23e6f","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.URLCodec:290","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[0,1],"tindex":"ce237cdc-16e6-11e6-9cbd-f5e06507937d","series":0,"name":"replace","transplant":{"toString":"result.append(\"KN\", \"N\")","position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\", \"N\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"KS\")","position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"status":-1},{"failures":[],"tindex":"ce23a3ed-16e6-11e6-9cbd-5d1927cb2250","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Soundex.this.soundexMapping","position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_C"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_C","position":"org.apache.commons.codec.language.Nysiis:143","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"ce23a3ee-16e6-11e6-9cbd-83ee389f2fc7","series":0,"name":"replace","transplant":{"toString":"if (lineLength > 0) {\n    this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:283","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"encodeSize","encodeSize":"length","length":"lineLength","lineSeparator":"lineSeparator","lineLength":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n        this.lineSeparator = new byte[lineSeparator.length];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n    } else {\n        this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n        this.lineSeparator = null;\n    }\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:278","type":"CtIfImpl","sourcecode":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n        this.byte[] = new byte[lineSeparator.int];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n    } else {\n        this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        this.byte[] = null;\n    }\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"status":-3},{"failures":[],"tindex":"ce23caff-16e6-11e6-9cbd-7df195ce93e8","series":0,"name":"replace","transplant":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"variableMap":{"maxPhonemes":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b += 256","position":"org.apache.commons.codec.binary.Base64:383","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"status":-2},{"failures":[],"tindex":"ce24dc70-16e6-11e6-9cbd-2fdb349d5190","series":0,"name":"replace","transplant":{"toString":"int ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:221","type":"CtLocalVariableImpl","sourcecode":"int int = keyLen"},"variableMap":{"keyLen":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int keyLen = keyBytes.length","position":"org.apache.commons.codec.digest.Sha2Crypt:136","type":"CtLocalVariableImpl","sourcecode":"final int int = keyBytes.int"},"status":-2},{"failures":[54,55,56,57,58,59,60,61],"tindex":"ce24dc71-16e6-11e6-9cbd-654b835c3071","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)","position":"org.apache.commons.codec.net.RFC1522Codec:80","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)"},"status":-1},{"failures":[],"tindex":"ce24dc72-16e6-11e6-9cbd-c72f1b97509f","series":0,"name":"add","transplant":{"toString":"u >>>= 1","position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"variableMap":{"u":"b"},"type":"adrStmt","transplantationPoint":{"toString":"results[1] = b","position":"org.apache.commons.codec.digest.UnixCrypt:410","type":"CtAssignmentImpl","sourcecode":"results[1] = b"},"status":0},{"failures":[],"tindex":"ce24dc73-16e6-11e6-9cbd-9b0b804b8c56","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"boxContent = boxContent.substring(1)","position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"boxContent = boxContent.substring(1)"},"status":0},{"failures":[],"tindex":"ce24dc74-16e6-11e6-9cbd-e72802decc79","series":0,"name":"replace","transplant":{"toString":"b[(offset++)] = ((byte)(iValue & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"variableMap":{"b":"buffer","offset":"org.apache.commons.codec.binary.Base64.MASK_6BITS","iValue":"org.apache.commons.codec.binary.Base64.MASK_6BITS"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 12) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))]","position":"org.apache.commons.codec.binary.Base64:388","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"ce250385-16e6-11e6-9cbd-8d5a62f986fe","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int count = 1","position":"org.apache.commons.codec.language.Soundex:268","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[62,51,52,0,1],"tindex":"ce250386-16e6-11e6-9cbd-3f0ef2f7955d","series":0,"name":"add","transplant":{"toString":"result.append('R')","position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:637","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[51,52,0,1],"tindex":"ce250387-16e6-11e6-9cbd-f977381ab272","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:694","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[37,63,38,64,39,65,66,67],"tindex":"ce250388-16e6-11e6-9cbd-b5838fa5fe86","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"w3\", \"W3\")","position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w3\", \"W3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[aeiou]\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:91","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[68,69,70,71,72],"tindex":"ce250389-16e6-11e6-9cbd-278dade9fc04","series":0,"name":"replace","transplant":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"sBuf"},"type":"adrStmt","transplantationPoint":{"toString":"sBuf.append(current)","position":"org.apache.commons.codec.language.RefinedSoundex:196","type":"CtInvocationImpl","sourcecode":"sBuf.append(current)"},"status":-1},{"failures":[],"tindex":"ce25038a-16e6-11e6-9cbd-af5bd99ae98d","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"variableMap":{"maxPhonemes":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX"},"type":"adrStmt","transplantationPoint":{"toString":"if ((strA.length()) > (strB.length())) {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strA.length())));\n} else {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strB.length())));\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtIfImpl","sourcecode":"if ((strA.length()) > (strB.length())) {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n} else {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n}"},"status":-2},{"failures":[],"tindex":"ce252a9b-16e6-11e6-9cbd-7b1819722819","series":0,"name":"replace","transplant":{"toString":"s = (s >>> 16) | (t & -65536)","position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"s = (s >>> 16) | (t & -65536)"},"variableMap":{"s":"compareCode","t":"compareCode"},"type":"adrStmt","transplantationPoint":{"toString":"compareCode = s1.compareTo(s2)","position":"org.apache.commons.codec.StringEncoderComparator:84","type":"CtAssignmentImpl","sourcecode":"compareCode = s1.compareTo(s2)"},"status":-2},{"failures":[],"tindex":"ce252a9c-16e6-11e6-9cbd-f99f156a175e","series":0,"name":"add","transplant":{"toString":"this.doEncode = doEncode","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:46","type":"CtAssignmentImpl","sourcecode":"this.boolean = doEncode"},"variableMap":{"doEncode":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = false","position":"org.apache.commons.codec.language.bm.Lang:146","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":48,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
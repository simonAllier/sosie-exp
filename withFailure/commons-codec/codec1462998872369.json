{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":63,"org.apache.commons.codec.language.NysiisTest.testSnat":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":5,"org.apache.commons.codec.language.NysiisTest.testDropBy":24,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":12,"org.apache.commons.codec.binary.Base64Test.testBase64":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":3,"org.apache.commons.codec.binary.Base64Test.testUUID":49,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":72,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":46,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":58,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":40,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":68,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":31,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":70,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":57,"org.apache.commons.codec.language.NysiisTest.testRule2":18,"org.apache.commons.codec.language.NysiisTest.testRule1":17,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":78,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":64,"org.apache.commons.codec.language.NysiisTest.testRule6":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":4,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":69,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":52,"org.apache.commons.codec.language.NysiisTest.testCap":13,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":48,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":53,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":30,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":56,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":23,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":47,"org.apache.commons.codec.language.NysiisTest.testBran":20,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":38,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":54,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":55,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":9,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":74,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":71,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":39,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":59,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":32,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":65,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":75,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":28,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":1,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":60,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":10,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":80,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":44,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":7,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":43,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":66,"org.apache.commons.codec.language.NysiisTest.testDad":14,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":77,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":33,"org.apache.commons.codec.language.NysiisTest.testOthers":25,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":51,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":79,"org.apache.commons.codec.language.NysiisTest.testTranan":26,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":67,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":37,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":11,"org.apache.commons.codec.language.NysiisTest.testDan":15,"org.apache.commons.codec.language.NysiisTest.testFal":16,"org.apache.commons.codec.language.NysiisTest.testSnad":21,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":29,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":73,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":8,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":50},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"c4767399-17b7-11e6-9a96-b3c2e3e69883","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return phonemeBuilder.makeString()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:481","type":"CtReturnImpl","sourcecode":"return phonemeBuilder.makeString()"},"status":-1},{"failures":[],"tindex":"c4769aaa-17b7-11e6-9a96-0badd0e17cb1","series":0,"name":"replace","transplant":{"toString":"this.data = new char[buffSize]","position":"org.apache.commons.codec.language.ColognePhonetic:212","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[buffSize]"},"variableMap":{"data":"mapping","buffSize":"length"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = new char[mapping.length]","position":"org.apache.commons.codec.language.Soundex:96","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[mapping.int]"},"status":-3},{"failures":[8,9],"tindex":"c4775dfb-17b7-11e6-9a96-4fb3c8e49452","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (pad)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:465","type":"CtIfImpl","sourcecode":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"c4775dfc-17b7-11e6-9a96-9564b90e95f8","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} ","position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtIfImpl","sourcecode":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} "},"status":-2},{"failures":[10],"tindex":"c477850d-17b7-11e6-9a96-838655834042","series":0,"name":"replace","transplant":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd, 1, ((inwd.length) - 1))","position":"org.apache.commons.codec.language.Metaphone:131","type":"CtInvocationImpl","sourcecode":"local.append(inwd, 1, ((inwd.int) - 1))"},"status":-1},{"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"tindex":"c477850e-17b7-11e6-9a96-83839fb86af0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"key.append(chars[i])","position":"org.apache.commons.codec.language.Nysiis:288","type":"CtInvocationImpl","sourcecode":"key.append(chars[i])"},"status":-1},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"c477850f-17b7-11e6-9a96-43dc05a5b0cc","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"if ((context.modulus) == 0) {\n    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n} ","position":"org.apache.commons.codec.binary.Base64:448","type":"CtIfImpl","sourcecode":"if ((context.int) == 0) {\n    buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"status":-1},{"failures":[68],"tindex":"c477ac20-17b7-11e6-9a96-cd4fed521404","series":0,"name":"replace","transplant":{"toString":"for (int i = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:97","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('+')","position":"org.apache.commons.codec.net.QCodec:76","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('+')"},"status":-1},{"failures":[],"tindex":"c477ac21-17b7-11e6-9a96-353f377b3f4b","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (int j = 0 ; j < 25 ; j++) {\n    for (int i = 0 ; i < 32 ; i += 4) {\n        left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n        right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n    }\n    t = left;\n    left = right;\n    right = t;\n}","position":"org.apache.commons.codec.digest.UnixCrypt:285","type":"CtForImpl","sourcecode":"for (int int = 0 ; j < 25 ; j++) {\n    for (int int = 0 ; i < 32 ; i += 4) {\n        left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n        right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n    }\n    t = left;\n    left = right;\n    right = t;\n}"},"status":-2},{"failures":[],"tindex":"c477ac22-17b7-11e6-9a96-6d544b26fd94","series":0,"name":"replace","transplant":{"toString":"if ((context.modulus) == 0) {\n    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n} ","position":"org.apache.commons.codec.binary.Base64:448","type":"CtIfImpl","sourcecode":"if ((context.int) == 0) {\n    buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"variableMap":{"ibitWorkArea":"decodeSize","pos":"modulus","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","buffer":"decodeTable","modulus":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte b = in[(inPos++)];\n    if (b == (pad)) {\n        context.eof = true;\n        break;\n    } else {\n        final byte[] buffer = ensureBufferSize(decodeSize, context);\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.decodeTable.length))) {\n            final int result = org.apache.commons.codec.binary.Base32.this.decodeTable[b];\n            if (result >= 0) {\n                context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK);\n                context.lbitWorkArea = ((context.lbitWorkArea) << (org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE)) + result;\n                if ((context.modulus) == 0) {\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.binary.Base32:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte byte = in[(inPos++)];\n    if (b == (byte)) {\n        context.boolean = true;\n        break;\n    } else {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n            final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n            if (result >= 0) {\n                context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n                if ((context.int) == 0) {\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"c477fa43-17b7-11e6-9a96-7bd154380e28","series":0,"name":"add","transplant":{"toString":"return ch","position":"org.apache.commons.codec.language.ColognePhonetic:276","type":"CtReturnImpl","sourcecode":"return ch"},"variableMap":{"ch":"mappedChar"},"type":"adrStmt","transplantationPoint":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"status":-2},{"failures":[],"tindex":"c477fa44-17b7-11e6-9a96-e7d4bfd57fe4","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (si.hasNext()) {\n    sb.append(si.next());\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:260","type":"CtIfImpl","sourcecode":"if (si.hasNext()) {\n    sb.append(si.next());\n} "},"status":-2},{"failures":[],"tindex":"c477fa45-17b7-11e6-9a96-e552e767f9dc","series":0,"name":"replace","transplant":{"toString":"this.soundexMapping = org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING","position":"org.apache.commons.codec.language.Soundex:82","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.Soundex.org.apache.commons.codec.language.Soundex.char[]"},"variableMap":{"org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING":"soundexMapping","soundexMapping":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.Soundex:109","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[],"tindex":"c4782156-17b7-11e6-9a96-71cd9fb08740","series":0,"name":"replace","transplant":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"variableMap":{"rules":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"status":-3},{"failures":[],"tindex":"c4782157-17b7-11e6-9a96-11b3ff1cdb4a","series":0,"name":"replace","transplant":{"toString":"startSrc = 1","position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"startSrc = 1"},"variableMap":{"startSrc":"t"},"type":"adrStmt","transplantationPoint":{"toString":"b ^= t","position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"status":-2},{"failures":[],"tindex":"c4782158-17b7-11e6-9a96-d9fca371f57d","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"index","encodeSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-3},{"failures":[],"tindex":"c4782159-17b7-11e6-9a96-e1a0ee396aa9","series":0,"name":"replace","transplant":{"toString":"final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])","position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:310","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2])"},"status":-2},{"failures":[5,7],"tindex":"c478486a-17b7-11e6-9a96-a590e2eeeffd","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Languages:264","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[68],"tindex":"c478486b-17b7-11e6-9a96-357535e59149","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(')')","position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:81","type":"CtForImpl","sourcecode":"for (int int = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"c478486c-17b7-11e6-9a96-812f81f6bc71","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"k+\", \"K\")","position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ci\", \"si\")","position":"org.apache.commons.codec.language.Caverphone1:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"status":0},{"failures":[],"tindex":"c478486d-17b7-11e6-9a96-55ac3a369c30","series":0,"name":"add","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))","position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))"},"variableMap":{"sBytes":"pArray","tempResult":"pArray","saltLen":"length","cp":"length"},"type":"adrStmt","transplantationPoint":{"toString":"encode(pArray, 0, pArray.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:430","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, pArray.int, context)"},"status":-2},{"failures":[69,70],"tindex":"c4786f7e-17b7-11e6-9a96-6d8880d9e4d1","series":0,"name":"replace","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"bits"},"type":"adrStmt","transplantationPoint":{"toString":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}","position":"org.apache.commons.codec.binary.BinaryCodec:250","type":"CtIfImpl","sourcecode":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}"},"status":-1},{"failures":[],"tindex":"c4786f7f-17b7-11e6-9a96-df46a971defc","series":0,"name":"add","transplant":{"toString":"return firstLetter + name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:421","type":"CtReturnImpl","sourcecode":"return firstLetter + name"},"variableMap":{"name":"str","firstLetter":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"failures":[71,72,73,74,75,76,77],"tindex":"c4786f80-17b7-11e6-9a96-7f0fb02aa12c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (ii > 0) {\n    ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n    ii -= 16;\n}","position":"org.apache.commons.codec.digest.Md5Crypt:222","type":"CtWhileImpl","sourcecode":"while (ii > 0) {\n    ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n    ii -= 16;\n}"},"status":-1},{"failures":[],"tindex":"c4786f81-17b7-11e6-9a96-6fffaf162ea6","series":0,"name":"replace","transplant":{"toString":"final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.RADIX))","position":"org.apache.commons.codec.net.URLCodec:143","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"variableMap":{"b":"index","org.apache.commons.codec.net.URLCodec.RADIX":"index"},"type":"adrStmt","transplantationPoint":{"toString":"final char hwChar = str.charAt((index - 1))","position":"org.apache.commons.codec.language.Soundex:188","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 1))"},"status":-3},{"failures":[],"tindex":"c4789692-17b7-11e6-9a96-33a1ca0bd774","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"t+\", \"T\")","position":"org.apache.commons.codec.language.Caverphone1:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"t+\", \"T\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"name1 = removeVowels(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:231","type":"CtAssignmentImpl","sourcecode":"name1 = removeVowels(name1)"},"status":-2},{"failures":[78,79,80],"tindex":"c4789693-17b7-11e6-9a96-df17f4c170f2","series":0,"name":"replace","transplant":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"variableMap":{"rawLine":"dc"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String singleLetter = dc.substring(0, 1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = dc.substring(0, 1)"},"status":-1},{"failures":[],"tindex":"c4789694-17b7-11e6-9a96-731325b66941","series":0,"name":"replace","transplant":{"toString":"final int u = org.apache.commons.codec.net.Utils.digit16(bytes[i])","position":"org.apache.commons.codec.net.QuotedPrintableCodec:365","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i])"},"variableMap":{"bytes":"data","i":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int l = data.length","position":"org.apache.commons.codec.binary.Hex:141","type":"CtLocalVariableImpl","sourcecode":"final int int = data.int"},"status":-2},{"failures":[],"tindex":"c4789695-17b7-11e6-9a96-8b042dea1673","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int rounds = org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT","position":"org.apache.commons.codec.digest.Sha2Crypt:139","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":29,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
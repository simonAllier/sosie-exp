{"failureDictionary":{"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":35,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":4,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":168,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":128,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":46,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":185,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":76,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":117,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":140,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":123,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":101,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":94,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":69,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":68,"org.apache.commons.codec.language.NysiisTest.testCap":169,"org.apache.commons.codec.digest.Sha2CryptTest.testCtor":99,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":67,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":83,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":79,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":71,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":136,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":113,"org.apache.commons.codec.binary.HexTest.testEncodeClassCastException":151,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":0,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":75,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":111,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":114,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":98,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":190,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":24,"org.apache.commons.codec.binary.HexTest.testDecodeClassCastException":157,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":132,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":139,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":16,"org.apache.commons.codec.language.NysiisTest.testDropBy":181,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":43,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":73,"org.apache.commons.codec.CharEncodingTest.testConstructor":78,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":86,"org.apache.commons.codec.binary.Base64Test.testUUID":145,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":81,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":188,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":38,"org.apache.commons.codec.language.NysiisTest.testRule2":174,"org.apache.commons.codec.language.NysiisTest.testRule1":173,"org.apache.commons.codec.language.NysiisTest.testRule7":177,"org.apache.commons.codec.language.NysiisTest.testRule6":176,"org.apache.commons.codec.language.NysiisTest.testRule5":175,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":192,"org.apache.commons.codec.binary.HexTest.testCustomCharsetToString":163,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":32,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":97,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":120,"org.apache.commons.codec.digest.CryptTest.testCrypt":80,"org.apache.commons.codec.binary.BinaryCodecTest.initializationError":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":55,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":34,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt":87,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":152,"org.apache.commons.codec.language.NysiisTest.testBran":178,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":184,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":61,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":70,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":12,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":104,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":131,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":72,"org.apache.commons.codec.digest.Md5CryptTest.testCtor":84,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":158,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":6,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":135,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":49,"org.apache.commons.codec.digest.B64Test.testB64from24bit":91,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":96,"org.apache.commons.codec.language.NysiisTest.testDad":170,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":2,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":95,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":167,"org.apache.commons.codec.language.NysiisTest.testDan":171,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":17,"org.apache.commons.codec.binary.HexTest.testCustomCharsetBadName":153,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":8,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":109,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":9,"org.apache.commons.codec.binary.HexTest.testCustomCharset":149,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":92,"org.apache.commons.codec.language.NysiisTest.testSnat":180,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":26,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":119,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":186,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":125,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":5,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":53,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":187,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":58,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData":112,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":116,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":65,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":42,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":63,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":66,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":11,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":36,"org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":57,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":106,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":129,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":40,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":20,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":118,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":1,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":13,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":85,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":137,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":74,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":133,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":162,"org.apache.commons.codec.digest.HmacUtilsTest.testConstructor":22,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":25,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":105,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":121,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":82,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":52,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":103,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":107,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":150,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":165,"org.apache.commons.codec.language.NysiisTest.testTranan":183,"org.apache.commons.codec.language.NysiisTest.testFal":172,"org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException":126,"org.apache.commons.codec.language.NysiisTest.testSnad":179,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":89,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":19,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":77,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":124,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":115,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":130,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":93,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":147,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":45,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":146,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":31,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":108,"org.apache.commons.codec.digest.DigestUtilsTest.testConstructable":127,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":50,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":164,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":141,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":143,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":48,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":134,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":47,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":156,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":59,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":138,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":102,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":41,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":144,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":191,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":159,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3":160,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5":161,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":100,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":148,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":189,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":14,"org.apache.commons.codec.language.bm.PhoneticEngineTest.initializationError":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":60,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":122,"org.apache.commons.codec.digest.B64Test.testB64T":90,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":21,"org.apache.commons.codec.language.NysiisTest.testOthers":182,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":30,"org.apache.commons.codec.language.bm.LanguageGuessingTest.initializationError":39,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":155,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0":154,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":44,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":142,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":33,"org.apache.commons.codec.digest.UnixCryptTest.testCtor":110},"transformations":[{"failures":[],"tindex":"2c4baf81-1167-11e6-8437-cb1e542b23d0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:464","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"2c4bd692-1167-11e6-8437-b950fdbc6b1c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:532","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"variableMap":{"data":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:217","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value)"},"status":0},{"failures":[],"tindex":"2c4bd693-1167-11e6-8437-a51fad36c10b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:292","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[],"tindex":"2c4bd694-1167-11e6-8437-bb83297c3e95","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:300","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":0},{"failures":[],"tindex":"2c4bd695-1167-11e6-8437-51b3e01579fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"result.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:307","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-2},{"failures":[],"tindex":"2c4bd696-1167-11e6-8437-49d9bed2d827","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)"},"status":-2},{"failures":[],"tindex":"2c4bfda7-1167-11e6-8437-5ffe8f78b7c1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:295","type":"CtInvocationImpl","sourcecode":"ctx1.reset()"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"2c4bfda8-1167-11e6-8437-c17faad97f9b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:208","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = data.int"},"status":-1},{"failures":[],"tindex":"2c4bfda9-1167-11e6-8437-013488d0e187","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:171","type":"CtTryImpl","sourcecode":"try {\n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    buffer.write(((char)((u << 4) + l)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n}"},"status":-2},{"failures":[],"tindex":"2c4bfdaa-1167-11e6-8437-03a321f70896","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:383","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"status":-2},{"failures":[],"tindex":"2c4bfdab-1167-11e6-8437-11cbb2b60bb9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:465","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer)"},"variableMap":{"altResult":"finalb","buffer":"passwd"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:288","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)"},"status":-2},{"failures":[],"tindex":"2c4c24bc-1167-11e6-8437-830c6ecf9c45","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:380","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"variableMap":{"obj":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:413","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(object)))"},"status":-2},{"failures":[79,80,81,82,83,84,85,86,87,88,89,90,91,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,142,143,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"2c4c24bd-1167-11e6-8437-670ade90b063","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"t = right"},"variableMap":{"t":"right","right":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:316","type":"CtAssignmentImpl","sourcecode":"out[1] = right"},"status":-1},{"failures":[],"tindex":"2c4c24be-1167-11e6-8437-49cfdd16ae65","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:296","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = name2.toCharArray()"},"variableMap":{"name2":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:251","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object))"},"status":-2},{"failures":[],"tindex":"2c4c4bcf-1167-11e6-8437-a7dde7490840","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:269","type":"CtReturnImpl","sourcecode":"return decodeText(str)"},"variableMap":{"str":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:403","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"status":-2},{"failures":[],"tindex":"2c4c4bd0-1167-11e6-8437-0b85fafe0a29","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:361","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-2},{"failures":[],"tindex":"2c4c4bd1-1167-11e6-8437-25b459e2e2da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"code = '8'"},"status":-2},{"failures":[],"tindex":"2c4c4bd2-1167-11e6-8437-b7308fb9d4a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:953","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"lastCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:394","type":"CtIfImpl","sourcecode":"if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n    output.addRight(code);\n} "},"status":-2},{"failures":[],"tindex":"2c4c4bd3-1167-11e6-8437-b1464e5a4cd8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:151","type":"CtAssignmentImpl","sourcecode":"rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds))"},"variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MAX":"index","org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MIN":"index","rounds":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:750","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1"},"status":-3},{"failures":[],"tindex":"2c4c4bd4-1167-11e6-8437-7da34fac7839","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:214","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))"},"variableMap":{"obj":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:222","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return decode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n}"},"status":-2},{"failures":[],"tindex":"2c4c72e5-1167-11e6-8437-7fea69d2456d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    inMultilineComment = false;\n} "},"status":-2},{"failures":[],"tindex":"2c4c72e6-1167-11e6-8437-595643323705","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"currentLine","len":"currentLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:307","type":"CtTryImpl","sourcecode":"try {\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n    final char char = r.java.lang.String.charAt(0);\n    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n        ruleMapping.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}"},"status":-3},{"failures":[93,95,96,98,117,135,140],"tindex":"2c4c72e7-1167-11e6-8437-cf273b38db7a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:389","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data)"},"status":-1},{"failures":[],"tindex":"2c4c99f8-1167-11e6-8437-abc45b5dca46","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:265","type":"CtInvocationImpl","sourcecode":"ctx1.update(saltBytes)"},"status":0},{"failures":[],"tindex":"2c4c99f9-1167-11e6-8437-33114cb7cf46","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"variableMap":{"b":"b","c":"length","u":"org.apache.commons.codec.binary.BaseNCodec.EOF","y":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (todo > 0) {\n    int int = ((int)(java.lang.Math.min(b.int, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    todo -= len;\n}"},"status":-2},{"failures":[],"tindex":"2c4c99fa-1167-11e6-8437-5595ec14ae0e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:188","type":"CtAssignmentImpl","sourcecode":"last = '*'"},"variableMap":{"last":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:386","type":"CtAssignmentImpl","sourcecode":"ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch)"},"status":-2},{"failures":[109,116,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"2c4c99fb-1167-11e6-8437-834dd278f348","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:307","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-1},{"failures":[],"tindex":"2c4cc10c-1167-11e6-8437-13850c88ae1e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:89","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3gh3\", \"3kh3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"status":-2},{"failures":[144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,79,80,81,82,83,84,85,86,87,88,89,90,91,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"2c4cc10d-1167-11e6-8437-299ea76b24f2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:185","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = phonemeBuilder"},"status":-1},{"failures":[],"tindex":"2c4cc10e-1167-11e6-8437-a1b81f3a3f4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:420","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-2},{"failures":[],"tindex":"2c4cc10f-1167-11e6-8437-0579e95e0952","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"variableMap":{"source":"inputContext"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:519","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'))"},"status":-2},{"failures":[],"tindex":"2c4ce820-1167-11e6-8437-75fb14997f90","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:298","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:225","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key)"},"status":-2},{"failures":[],"tindex":"2c4ce821-1167-11e6-8437-b595894cda31","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:333","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[93,95,96,98,117,119,121,122],"tindex":"2c4ce822-1167-11e6-8437-6333591f2d0c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"blocksize","tempResult":"altResult","pBytes":"altResult","keyLen":"blocksize","cp":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:371","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[41,49,63,64,65,66],"tindex":"2c4ce823-1167-11e6-8437-bb7911a3da3e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:716","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"2c4ce824-1167-11e6-8437-4f6867dd70d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"status":-2},{"failures":[],"tindex":"2c4ce825-1167-11e6-8437-87088658d4cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:500","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n    int int = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.long = ((context.long) << 8) + b;\n    if (0 == (context.int)) {\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n        if (((int) > 0) && ((int) <= (context.int))) {\n            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n            context.int += byte[].int;\n            context.int = 0;\n        } \n    } \n}"},"status":-2},{"failures":[],"tindex":"2c4d0f36-1167-11e6-8437-37f4c9648e6b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:94","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184],"tindex":"2c4d0f37-1167-11e6-8437-7d15ed6f06bb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"local.setCharAt(0, 'W')"},"variableMap":{"local":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"status":-1},{"failures":[],"tindex":"2c4d0f38-1167-11e6-8437-03769c6c1de2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:97","type":"CtLocalVariableImpl","sourcecode":"int int = read(byte[], 0, 1)"},"status":-2},{"failures":[144,145,146,149,152,162],"tindex":"2c4d0f39-1167-11e6-8437-a941198e74aa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"variableMap":{"sBytes":"out","blocksize":"len","tempResult":"out","cp":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:88","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; j < len ; i++) {\n    int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n    j++;\n    f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n    j++;\n    out[i] = ((byte)(f & 255));\n}"},"status":-1},{"failures":[],"tindex":"2c4d0f3a-1167-11e6-8437-1da518fb608f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:363","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:360","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"2c4d0f3b-1167-11e6-8437-f3b9f7329dbf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:483","type":"CtReturnImpl","sourcecode":"return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true)"},"variableMap":{"basen":"base64"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:524","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64))"},"status":-2},{"failures":[],"tindex":"2c4d0f3c-1167-11e6-8437-4378b978c14e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtIfImpl","sourcecode":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} "},"status":-2},{"failures":[],"tindex":"2c4d364d-1167-11e6-8437-614fe6423a51","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:221","type":"CtLocalVariableImpl","sourcecode":"int int = keyLen"},"variableMap":{"keyLen":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:201","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(java.lang.Math.min(b.int, todo)))"},"status":-2},{"failures":[],"tindex":"2c4d364e-1167-11e6-8437-ed978239344a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:204","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:490","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[185,186,187,188,189,190,191],"tindex":"2c4d364f-1167-11e6-8437-199fe3a8a872","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"2c4d3650-1167-11e6-8437-2de24bb6a9b4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"status":-2},{"failures":[],"tindex":"2c4d3651-1167-11e6-8437-393eb41a289c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:137","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"variableMap":{"obj":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:60","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)))"},"status":-2},{"failures":[],"tindex":"2c4d3652-1167-11e6-8437-b527c9a2c36d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^cough\", \"cou2f\")"},"status":0},{"failures":[188],"tindex":"2c4d3653-1167-11e6-8437-7f9f865abe8b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:89","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"2c4d3654-1167-11e6-8437-cdd4b1df50cf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:532","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.startsWith(input, content)"},"variableMap":{"input":"other","content":"other"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:109","type":"CtReturnImpl","sourcecode":"return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString())"},"status":-2},{"failures":[192],"tindex":"2c4d3655-1167-11e6-8437-a728cb9dbdd8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:161","type":"CtAssignmentImpl","sourcecode":"data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":-1},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"2c4d5d66-1167-11e6-8437-071e8d95b6e1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:291","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = parts[1]"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":54,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
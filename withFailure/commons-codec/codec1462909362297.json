{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":12,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":126,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully":200,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":140,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":36,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":26,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":104,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":112,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully":203,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":196,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":43,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":74,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":99,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":116,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":61,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":62,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":66,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":115,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":63,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":64,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":51,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":118,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":134,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":175,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":70,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":119,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":178,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":57,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":6,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":111,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":202,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":188,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":167,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully":204,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":56,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":95,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":159,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":147,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":137,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":168,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":127,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":14,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":166,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":50,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":68,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":121,"org.apache.commons.codec.language.NysiisTest.testDropBy":173,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":189,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":5,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":93,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":129,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":21,"org.apache.commons.codec.binary.Base64Test.testUUID":59,"org.apache.commons.codec.binary.Base64Test.testSingletons":69,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":91,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":150,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":135,"org.apache.commons.codec.binary.Base64Test.testPairs":58,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":39,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":149,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":100,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":92,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":24,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":9,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":98,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":11,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt":198,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":103,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":90,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":80,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":117,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":185,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":17,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":141,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":155,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":42,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":49,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":156,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":41,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":125,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":128,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":124,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":180,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":37,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":110,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":132,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":177,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":164,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":109,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":172,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":143,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":190,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":133,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":182,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":122,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":170,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":183,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":97,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":4,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":105,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":87,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":179,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":191,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":86,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":114,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":79,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":78,"org.apache.commons.codec.binary.Base64Test.testTriplets":163,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":130,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":171,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":32,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":30,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":33,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":195,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":46,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":131,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":38,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":184,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":67,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":76,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":139,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":197,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":88,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":153,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":181,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":81,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":176,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":186,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":20,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":154,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":102,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":160,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":162,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":2,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":201,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":106,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":54,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":199,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":44,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":77,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":120,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":194,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":23,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":19,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":101,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":123,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":53,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":22,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":192,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":13,"org.apache.commons.codec.language.MetaphoneTest.testTCH":144,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":108,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":169,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":40,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":145,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":136,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":35,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":75,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":8,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":65,"org.apache.commons.codec.binary.Base64Test.testBase64":73,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":85,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":29,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":55,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":165,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":84,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":83,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":157,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":34,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":96,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":146,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":152,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":138,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":174,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":16,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":142,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":158,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":187,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":89,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":107,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":151,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":193,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":71,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":7,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":161,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":48,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":82,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":10,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":60},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"tindex":"5c515889-16e7-11e6-98fb-fb06e36c3ffb","series":0,"name":"replace","transplant":{"toString":"final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:310","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String rightCharacter = parts[1]","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:291","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = parts[1]"},"status":-1},{"failures":[13,14,15,16,17,18,19,20,21,22],"tindex":"5c51a6aa-16e7-11e6-98fb-47fea217eb22","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.MD5)","position":"org.apache.commons.codec.digest.DigestUtils:98","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[],"tindex":"5c51cdbb-16e7-11e6-98fb-f57a77df3c63","series":0,"name":"add","transplant":{"toString":"u >>>= 1","position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"variableMap":{"u":"length"},"type":"adrStmt","transplantationPoint":{"toString":"cnt = keyBytes.length","position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"cnt = keyBytes.int"},"status":-2},{"failures":[],"tindex":"5c51cdbc-16e7-11e6-98fb-65f3afc5bbdb","series":0,"name":"replace","transplant":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char charZero = salt.charAt(0)","position":"org.apache.commons.codec.digest.UnixCrypt:209","type":"CtLocalVariableImpl","sourcecode":"final char char = salt.charAt(0)"},"status":-2},{"failures":[23,24],"tindex":"5c51cdbd-16e7-11e6-98fb-b7efaca7b348","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:85","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"5c51cdbe-16e7-11e6-98fb-7f904a3177e5","series":0,"name":"replace","transplant":{"toString":"return bytes == null ? null : new java.lang.String(bytes , charset)","position":"org.apache.commons.codec.binary.StringUtils:257","type":"CtReturnImpl","sourcecode":"return bytes == null ? null : new java.lang.String(bytes , charset)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.UTF_8","bytes":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.UTF_8)","position":"org.apache.commons.codec.binary.StringUtils:383","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"5c51f4cf-16e7-11e6-98fb-d34123f20882","series":0,"name":"replace","transplant":{"toString":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.WWW_FORM_URL;\n} ","position":"org.apache.commons.codec.net.URLCodec:125","type":"CtIfImpl","sourcecode":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n} "},"variableMap":{"urlsafe":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('\\'')","position":"org.apache.commons.codec.net.QCodec:72","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\'')"},"status":-2},{"failures":[25],"tindex":"5c51f4d0-16e7-11e6-98fb-b9e3ef5dd9b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS","position":"org.apache.commons.codec.net.QuotedPrintableCodec:278","type":"CtAssignmentImpl","sourcecode":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet"},"status":-1},{"failures":[26],"tindex":"5c521be1-16e7-11e6-98fb-4b7f2fb03dba","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:221","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[27,28,29],"tindex":"5c521be2-16e7-11e6-98fb-d339e396f74a","series":0,"name":"add","transplant":{"toString":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n    switch (value.charAt(index)) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n        case 'Y' :\n            index = handleAEIOUY(result, index);\n            break;\n        case 'B' :\n            result.append('P');\n            index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n            break;\n        case '\\u00c7' :\n            result.append('S');\n            index++;\n            break;\n        case 'C' :\n            index = handleC(value, result, index);\n            break;\n        case 'D' :\n            index = handleD(value, result, index);\n            break;\n        case 'F' :\n            result.append('F');\n            index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n            break;\n        case 'G' :\n            index = handleG(value, result, index, slavoGermanic);\n            break;\n        case 'H' :\n            index = handleH(value, result, index);\n            break;\n        case 'J' :\n            index = handleJ(value, result, index, slavoGermanic);\n            break;\n        case 'K' :\n            result.append('K');\n            index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n            break;\n        case 'L' :\n            index = handleL(value, result, index);\n            break;\n        case 'M' :\n            result.append('M');\n            index = conditionM0(value, index) ? index + 2 : index + 1;\n            break;\n        case 'N' :\n            result.append('N');\n            index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n            break;\n        case '\\u00d1' :\n            result.append('N');\n            index++;\n            break;\n        case 'P' :\n            index = handleP(value, result, index);\n            break;\n        case 'Q' :\n            result.append('K');\n            index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n            break;\n        case 'R' :\n            index = handleR(value, result, index, slavoGermanic);\n            break;\n        case 'S' :\n            index = handleS(value, result, index, slavoGermanic);\n            break;\n        case 'T' :\n            index = handleT(value, result, index);\n            break;\n        case 'V' :\n            result.append('F');\n            index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n            break;\n        case 'W' :\n            index = handleW(value, result, index);\n            break;\n        case 'X' :\n            index = handleX(value, result, index);\n            break;\n        case 'Z' :\n            index = handleZ(value, result, index, slavoGermanic);\n            break;\n        default :\n            index++;\n            break;\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:97","type":"CtWhileImpl","sourcecode":"while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n    switch (value.charAt(index)) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n        case 'Y' :\n            index = handleAEIOUY(result, index);\n            break;\n        case 'B' :\n            result.append('P');\n            index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n            break;\n        case '\\u00c7' :\n            result.append('S');\n            index++;\n            break;\n        case 'C' :\n            index = handleC(value, result, index);\n            break;\n        case 'D' :\n            index = handleD(value, result, index);\n            break;\n        case 'F' :\n            result.append('F');\n            index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n            break;\n        case 'G' :\n            index = handleG(value, result, index, slavoGermanic);\n            break;\n        case 'H' :\n            index = handleH(value, result, index);\n            break;\n        case 'J' :\n            index = handleJ(value, result, index, slavoGermanic);\n            break;\n        case 'K' :\n            result.append('K');\n            index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n            break;\n        case 'L' :\n            index = handleL(value, result, index);\n            break;\n        case 'M' :\n            result.append('M');\n            index = conditionM0(value, index) ? index + 2 : index + 1;\n            break;\n        case 'N' :\n            result.append('N');\n            index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n            break;\n        case '\\u00d1' :\n            result.append('N');\n            index++;\n            break;\n        case 'P' :\n            index = handleP(value, result, index);\n            break;\n        case 'Q' :\n            result.append('K');\n            index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n            break;\n        case 'R' :\n            index = handleR(value, result, index, slavoGermanic);\n            break;\n        case 'S' :\n            index = handleS(value, result, index, slavoGermanic);\n            break;\n        case 'T' :\n            index = handleT(value, result, index);\n            break;\n        case 'V' :\n            result.append('F');\n            index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n            break;\n        case 'W' :\n            index = handleW(value, result, index);\n            break;\n        case 'X' :\n            index = handleX(value, result, index);\n            break;\n        case 'Z' :\n            index = handleZ(value, result, index, slavoGermanic);\n            break;\n        default :\n            index++;\n            break;\n    }\n}"},"status":-1},{"failures":[30,31,32,33,34,35,36,37],"tindex":"5c529113-16e7-11e6-98fb-e7778b96a78b","series":0,"name":"replace","transplant":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n    final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n    final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n    final int cLine = currentLine;\n    final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n        private final int myLine = cLine;\n\n        private final java.lang.String loc = location;\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n            sb.append(\"Rule\");\n            sb.append(\"{line=\").append(myLine);\n            sb.append(\", loc='\").append(loc).append('\\'');\n            sb.append(\", pat='\").append(pat).append('\\'');\n            sb.append(\", lcon='\").append(lCon).append('\\'');\n            sb.append(\", rcon='\").append(rCon).append('\\'');\n            sb.append('}');\n            return sb.toString();\n        }\n    };\n    final java.lang.String patternKey = r.pattern.substring(0, 1);\n    java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n        lines.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}","position":"org.apache.commons.codec.language.bm.Rule:449","type":"CtTryImpl","sourcecode":"try {\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n    final int int = currentLine;\n    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n        private final int myLine = cLine;\n\n        private final java.lang.String loc = location;\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sb.append(\"Rule\");\n            sb.append(\"{line=\").append(int);\n            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n            sb.append(\", pat='\").append(pat).append('\\'');\n            sb.append(\", lcon='\").append(lCon).append('\\'');\n            sb.append(\", rcon='\").append(rCon).append('\\'');\n            sb.append('}');\n            return sb.toString();\n        }\n    };\n    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n        lines.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}"},"status":-1},{"failures":[],"tindex":"5c52df34-16e7-11e6-98fb-a17a85364c8f","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:362","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}"},"status":-2},{"failures":[38,39,30,31,32,33],"tindex":"5c52df35-16e7-11e6-98fb-6fc3e28e85df","series":0,"name":"replace","transplant":{"toString":"return index + 3","position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return index + 3"},"variableMap":{"index":"c"},"type":"adrStmt","transplantationPoint":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"status":-1},{"failures":[40],"tindex":"5c530646-16e7-11e6-98fb-1fb84b5f0d0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[];\n} "},"status":-1},{"failures":[41,42,43,44],"tindex":"5c530647-16e7-11e6-98fb-859b00e92629","series":0,"name":"replace","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:240","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[],"tindex":"5c530648-16e7-11e6-98fb-efdfbed20fd4","series":0,"name":"replace","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"c","minRating":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"c"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:348","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)"},"status":-3},{"failures":[27,28,29],"tindex":"5c535469-16e7-11e6-98fb-ff93f1360c3d","series":0,"name":"replace","transplant":{"toString":"b ^= t","position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"variableMap":{"b":"index","t":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:319","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"5c53546a-16e7-11e6-98fb-e90d8e2b24fe","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"j"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(finalb[j])","position":"org.apache.commons.codec.digest.Md5Crypt:239","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb[j])"},"status":-2},{"failures":[45,46],"tindex":"5c53546b-16e7-11e6-98fb-1d768fc02692","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)","position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)"},"variableMap":{"binaryData":"l_ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-1},{"failures":[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"5c53546c-16e7-11e6-98fb-4f5b242f1f84","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(finalb, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n} ","position":"org.apache.commons.codec.binary.Base64:373","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"status":-1},{"failures":[],"tindex":"5c537b7d-16e7-11e6-98fb-271908db8a0b","series":0,"name":"replace","transplant":{"toString":"this.maxLength = maxLength","position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"variableMap":{"maxLength":"ii"},"type":"adrStmt","transplantationPoint":{"toString":"ii -= 16","position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"ii -= 16"},"status":-2},{"failures":[],"tindex":"5c579a2e-16e7-11e6-98fb-0184a6e68d64","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"tempResult"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"status":-3},{"failures":[30,31,32,33,81,34,82,35,36,83,84,37,85,86,87,88,89,90],"tindex":"5c57c13f-16e7-11e6-98fb-05ba964f88d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-1},{"failures":[28,29],"tindex":"5c57c140-16e7-11e6-98fb-a1f9b942ce93","series":0,"name":"add","transplant":{"toString":"result.append('A', 'F')","position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:488","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"5c57c141-16e7-11e6-98fb-b3a900eca2b9","series":0,"name":"replace","transplant":{"toString":"return 3","position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}"},"status":-2},{"failures":[],"tindex":"5c57e852-16e7-11e6-98fb-135d39889983","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int t = ((a << (16 - n)) ^ a) & m","position":"org.apache.commons.codec.digest.UnixCrypt:393","type":"CtLocalVariableImpl","sourcecode":"final int int = ((a << (16 - n)) ^ a) & m"},"status":-2},{"failures":[],"tindex":"5c57e853-16e7-11e6-98fb-33fb5d74c813","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder()","position":"org.apache.commons.codec.net.RFC1522Codec:72","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[91,92,93,94,95,47,48,96],"tindex":"5c57e854-16e7-11e6-98fb-0f3a3fd15e3c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"data = doDecoding(data)","position":"org.apache.commons.codec.net.RFC1522Codec:154","type":"CtAssignmentImpl","sourcecode":"data = doDecoding(data)"},"status":-1},{"failures":[],"tindex":"5c57e855-16e7-11e6-98fb-df2e33a145ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Caverphone:74","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} "},"status":0},{"failures":[32],"tindex":"5c57e856-16e7-11e6-98fb-bfa73e49aac5","series":0,"name":"replace","transplant":{"toString":"return this","position":"org.apache.commons.codec.language.bm.Languages:234","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls)","position":"org.apache.commons.codec.language.bm.Languages:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls)"},"status":-1},{"failures":[],"tindex":"5c580f67-16e7-11e6-98fb-37c0277a646c","series":0,"name":"add","transplant":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder(\"             \")","position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"status":-2},{"failures":[],"tindex":"5c580f68-16e7-11e6-98fb-9b618d459c64","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.BCodec:180","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"5c580f69-16e7-11e6-98fb-ff5755e4ce56","series":0,"name":"add","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"5c580f6a-16e7-11e6-98fb-e909519f8f74","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"k+\", \"K\")","position":"org.apache.commons.codec.language.Caverphone2:102","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"status":0},{"failures":[97,98],"tindex":"5c580f6b-16e7-11e6-98fb-71ff35707872","series":0,"name":"replace","transplant":{"toString":"return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw))","position":"org.apache.commons.codec.binary.BinaryCodec:299","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw))"},"variableMap":{"raw":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, null)","position":"org.apache.commons.codec.digest.Sha2Crypt:83","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, null)"},"status":-1},{"failures":[99,100,101,102,103],"tindex":"5c58367c-16e7-11e6-98fb-b9496155370b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = (bytes.length) - 2 ; i < (bytes.length) ; i++) {\n    b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    encode = (!(printable.get(b))) || ((i > ((bytes.length) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:317","type":"CtForImpl","sourcecode":"for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n    b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n}"},"status":-1},{"failures":[104,105,106,107,108,109,110,111],"tindex":"5c58367d-16e7-11e6-98fb-5d6f559c953c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(pBytes, 0, keyLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:369","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-1},{"failures":[],"tindex":"5c58367e-16e7-11e6-98fb-55cb4c9c79cb","series":0,"name":"add","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String string = key.toString()","position":"org.apache.commons.codec.language.Nysiis:315","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = key.toString()"},"status":-2},{"failures":[],"tindex":"5c58367f-16e7-11e6-98fb-6f696b88cea4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('@')","position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"status":0},{"failures":[41,112,113,114],"tindex":"5c583680-16e7-11e6-98fb-7b5eedeef3f1","series":0,"name":"replace","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[],"tindex":"5c585c91-16e7-11e6-98fb-155ea07c5375","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:339","type":"CtWhileImpl","sourcecode":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}"},"status":0},{"failures":[115,116,117,118,119],"tindex":"5c585c92-16e7-11e6-98fb-eb276ddb2fd2","series":0,"name":"replace","transplant":{"toString":"code = '1'","position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"code = '1'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '7'","position":"org.apache.commons.codec.language.ColognePhonetic:385","type":"CtAssignmentImpl","sourcecode":"code = '7'"},"status":-1},{"failures":[],"tindex":"5c585c93-16e7-11e6-98fb-79c446d1fdad","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"l","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"l"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n}","position":"org.apache.commons.codec.language.bm.Rule:222","type":"CtTryImpl","sourcecode":"try {\n    rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n}"},"status":-3},{"failures":[],"tindex":"5c585c94-16e7-11e6-98fb-f10113c4dc8f","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"index","encodeSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:424","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-3},{"failures":[],"tindex":"5c5883a5-16e7-11e6-98fb-4939da13dbc9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.pattern = pattern","position":"org.apache.commons.codec.language.bm.Lang:86","type":"CtAssignmentImpl","sourcecode":"this.java.util.regex.Pattern = pattern"},"status":-2},{"failures":[52,54,55,56,68,72,74,78,80],"tindex":"5c58d1c6-16e7-11e6-98fb-a1ae2e0dc497","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n    context.currentLinePos = 0;\n} ","position":"org.apache.commons.codec.binary.Base64:392","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-1},{"failures":[],"tindex":"5c58f8d7-16e7-11e6-98fb-d1bec8fc7392","series":0,"name":"add","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"status":-2},{"failures":[],"tindex":"5c58f8d8-16e7-11e6-98fb-779ac1796d38","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"status":-2},{"failures":[120,121,27,122,28,29],"tindex":"5c58f8d9-16e7-11e6-98fb-5372f7ceb849","series":0,"name":"replace","transplant":{"toString":"if (slavoGermanic) {\n    result.append('S');\n} else {\n    result.append('S', 'X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtIfImpl","sourcecode":"if (slavoGermanic) {\n    result.append('S');\n} else {\n    result.append('S', 'X');\n}"},"variableMap":{"result":"result","slavoGermanic":"slavoGermanic"},"type":"adrStmt","transplantationPoint":{"toString":"switch (value.charAt(index)) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n    case 'Y' :\n        index = handleAEIOUY(result, index);\n        break;\n    case 'B' :\n        result.append('P');\n        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n        break;\n    case '\\u00c7' :\n        result.append('S');\n        index++;\n        break;\n    case 'C' :\n        index = handleC(value, result, index);\n        break;\n    case 'D' :\n        index = handleD(value, result, index);\n        break;\n    case 'F' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n        break;\n    case 'G' :\n        index = handleG(value, result, index, slavoGermanic);\n        break;\n    case 'H' :\n        index = handleH(value, result, index);\n        break;\n    case 'J' :\n        index = handleJ(value, result, index, slavoGermanic);\n        break;\n    case 'K' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n        break;\n    case 'L' :\n        index = handleL(value, result, index);\n        break;\n    case 'M' :\n        result.append('M');\n        index = conditionM0(value, index) ? index + 2 : index + 1;\n        break;\n    case 'N' :\n        result.append('N');\n        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n        break;\n    case '\\u00d1' :\n        result.append('N');\n        index++;\n        break;\n    case 'P' :\n        index = handleP(value, result, index);\n        break;\n    case 'Q' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n        break;\n    case 'R' :\n        index = handleR(value, result, index, slavoGermanic);\n        break;\n    case 'S' :\n        index = handleS(value, result, index, slavoGermanic);\n        break;\n    case 'T' :\n        index = handleT(value, result, index);\n        break;\n    case 'V' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n        break;\n    case 'W' :\n        index = handleW(value, result, index);\n        break;\n    case 'X' :\n        index = handleX(value, result, index);\n        break;\n    case 'Z' :\n        index = handleZ(value, result, index, slavoGermanic);\n        break;\n    default :\n        index++;\n        break;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:98","type":"CtSwitchImpl","sourcecode":"switch (value.charAt(index)) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n    case 'Y' :\n        index = handleAEIOUY(result, index);\n        break;\n    case 'B' :\n        result.append('P');\n        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n        break;\n    case '\\u00c7' :\n        result.append('S');\n        index++;\n        break;\n    case 'C' :\n        index = handleC(value, result, index);\n        break;\n    case 'D' :\n        index = handleD(value, result, index);\n        break;\n    case 'F' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n        break;\n    case 'G' :\n        index = handleG(value, result, index, slavoGermanic);\n        break;\n    case 'H' :\n        index = handleH(value, result, index);\n        break;\n    case 'J' :\n        index = handleJ(value, result, index, slavoGermanic);\n        break;\n    case 'K' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n        break;\n    case 'L' :\n        index = handleL(value, result, index);\n        break;\n    case 'M' :\n        result.append('M');\n        index = conditionM0(value, index) ? index + 2 : index + 1;\n        break;\n    case 'N' :\n        result.append('N');\n        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n        break;\n    case '\\u00d1' :\n        result.append('N');\n        index++;\n        break;\n    case 'P' :\n        index = handleP(value, result, index);\n        break;\n    case 'Q' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n        break;\n    case 'R' :\n        index = handleR(value, result, index, slavoGermanic);\n        break;\n    case 'S' :\n        index = handleS(value, result, index, slavoGermanic);\n        break;\n    case 'T' :\n        index = handleT(value, result, index);\n        break;\n    case 'V' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n        break;\n    case 'W' :\n        index = handleW(value, result, index);\n        break;\n    case 'X' :\n        index = handleX(value, result, index);\n        break;\n    case 'Z' :\n        index = handleZ(value, result, index, slavoGermanic);\n        break;\n    default :\n        index++;\n        break;\n}"},"status":-1},{"failures":[123,124,125,126,127,128,54,55,129,130,131,132,78,133,79,134,135,136,137,138,80],"tindex":"5c591fea-16e7-11e6-98fb-d7c8aa51a2a9","series":0,"name":"replace","transplant":{"toString":"return 3","position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"status":-1},{"failures":[139],"tindex":"5c591feb-16e7-11e6-98fb-b3651e4b94d3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (lRulesIS == null) {\n    throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN)));\n} ","position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtIfImpl","sourcecode":"if (lRulesIS == null) {\n    throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n} "},"status":-1},{"failures":[100,102],"tindex":"5c591fec-16e7-11e6-98fb-2572067824f1","series":0,"name":"replace","transplant":{"toString":"buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"variableMap":{"buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:296","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[],"tindex":"5c5946fd-16e7-11e6-98fb-8d22e21aea79","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return (input.length()) == 0;\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:510","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return (input.length()) == 0;\n    }\n}"},"variableMap":{"input":"input","this":"this"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:517","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}"},"status":0},{"failures":[],"tindex":"5c5946fe-16e7-11e6-98fb-2f7135cfd036","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} "},"status":0},{"failures":[140,141],"tindex":"5c596e0f-16e7-11e6-98fb-d70d705c5f2a","series":0,"name":"replace","transplant":{"toString":"for (int i = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}"},"variableMap":{"altCtx":"messageDigest","altResult":"valueToDigest","saltBytes":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"messageDigest.update(valueToDigest)","position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"status":-1},{"failures":[142,143,144,145,146,147,44],"tindex":"5c596e10-16e7-11e6-98fb-db277f1f2d9e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((index >= 0) && (index < ((string.length()) - 1))) {\n    matches = (string.charAt((index + 1))) == c;\n} ","position":"org.apache.commons.codec.language.Metaphone:353","type":"CtIfImpl","sourcecode":"if ((index >= 0) && (index < ((string.length()) - 1))) {\n    matches = (string.charAt((index + 1))) == c;\n} "},"status":-1},{"failures":[],"tindex":"5c596e11-16e7-11e6-98fb-e90a819c38ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:226","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[47,48,96,148,149,150,151,128,54,55,152,153,58,59,60,61,62,63,64,66,67,154,155,156,69,71,73,157,158,77,159,132,78,160,133,79,80],"tindex":"5c596e12-16e7-11e6-98fb-1b9a36a7aacb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"switch (context.modulus) {\n    case 1 :\n        break;\n    case 2 :\n        context.ibitWorkArea = (context.ibitWorkArea) >> 4;\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 3 :\n        context.ibitWorkArea = (context.ibitWorkArea) >> 2;\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base64:466","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 1 :\n        break;\n    case 2 :\n        context.int = (context.int) >> 4;\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        context.int = (context.int) >> 2;\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-1},{"failures":[120,161,162,27,28,29],"tindex":"5c599523-16e7-11e6-98fb-45f5bbb4c567","series":0,"name":"replace","transplant":{"toString":"result.append(\"N\", \"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n    index++;\n} else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n    result.append('X', 'S');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        result.append('S');\n    } else {\n        result.append('X');\n    }\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n    if (slavoGermanic) {\n        result.append('S');\n    } else {\n        result.append('S', 'X');\n    }\n    index += 3;\n} else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n    result.append('S', 'X');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n    index = handleSC(value, result, index);\n} else {\n    if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n        result.appendAlternate('S');\n    } else {\n        result.append('S');\n    }\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:599","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n    index++;\n} else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n    result.append('X', 'S');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        result.append('S');\n    } else {\n        result.append('X');\n    }\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n    if (slavoGermanic) {\n        result.append('S');\n    } else {\n        result.append('S', 'X');\n    }\n    index += 3;\n} else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n    result.append('S', 'X');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n    index = handleSC(value, result, index);\n} else {\n    if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n        result.appendAlternate('S');\n    } else {\n        result.append('S');\n    }\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n}"},"status":-1},{"failures":[],"tindex":"5c59bc34-16e7-11e6-98fb-f9746a86ec26","series":0,"name":"replace","transplant":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char lastChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"status":-2},{"failures":[47,48,49,50,51,52,53,54,55,163,56,59,60,164,61,62,63,64,65,66,67,165,68,70,71,72,73,74,75,166,76,77,78,79,80],"tindex":"5c59bc35-16e7-11e6-98fb-e99c1904b96e","series":0,"name":"replace","transplant":{"toString":"final byte[] pBytes = new byte[keyLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"variableMap":{"keyLen":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(encodeSize, context)","position":"org.apache.commons.codec.binary.Base64:379","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[],"tindex":"5c59bc36-16e7-11e6-98fb-c930d26cfbf1","series":0,"name":"replace","transplant":{"toString":"code = '3'","position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"variableMap":{"code":"ch"},"type":"adrStmt","transplantationPoint":{"toString":"lastChar = ch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"status":-2},{"failures":[29],"tindex":"5c59bc37-16e7-11e6-98fb-d7373635170a","series":0,"name":"replace","transplant":{"toString":"result.append('J', 'H')","position":"org.apache.commons.codec.language.DoubleMetaphone:522","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:535","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"status":-1},{"failures":[],"tindex":"5c59bc38-16e7-11e6-98fb-037d02d44650","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int incount = 1","position":"org.apache.commons.codec.language.Soundex:268","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[167,168,169],"tindex":"5c59e349-16e7-11e6-98fb-47206bdc455e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"d\", \"t\")","position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"status":-1},{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"5c59e34a-16e7-11e6-98fb-1f2d5045acae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"rules.add(r)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:320","type":"CtInvocationImpl","sourcecode":"rules.add(r)"},"status":-1},{"failures":[170,171],"tindex":"5c59e34b-16e7-11e6-98fb-9b9c503e0b42","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0)","position":"org.apache.commons.codec.digest.UnixCrypt:228","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0)"},"status":-1},{"failures":[105,110],"tindex":"5c59e34c-16e7-11e6-98fb-57570badda65","series":0,"name":"add","transplant":{"toString":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"variableMap":{"b":"tempResult","c":"cp","u":"cp","y":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"status":-1},{"failures":[105,106,107],"tindex":"5c59e34d-16e7-11e6-98fb-176d14aef5ad","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"status":-1},{"failures":[27,29],"tindex":"5c59e34e-16e7-11e6-98fb-851c4cf72c7a","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:836","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"5c59e34f-16e7-11e6-98fb-1d13af66aa64","series":0,"name":"add","transplant":{"toString":"this.encodedBlockSize = encodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"variableMap":{"encodedBlockSize":"c"},"type":"adrStmt","transplantationPoint":{"toString":"c = (c >>> 1) | (c << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 1) | (c << 27)"},"status":-2},{"failures":[],"tindex":"5c5a0a60-16e7-11e6-98fb-2ba7b29891bf","series":0,"name":"replace","transplant":{"toString":"left = right","position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"variableMap":{"left":"length","right":"length"},"type":"adrStmt","transplantationPoint":{"toString":"this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:284","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int)"},"status":-2},{"failures":[],"tindex":"5c5a0a61-16e7-11e6-98fb-c919fa1a937a","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:111","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.DigestUtils:70","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"5c5a0a62-16e7-11e6-98fb-991490f56a7b","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:286","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:474","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer)"},"status":-2},{"failures":[],"tindex":"5c5a0a63-16e7-11e6-98fb-c71c1f1c3292","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n    result.append('J', 'A');\n} else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n    result.append('J', 'H');\n} else if (index == ((value.length()) - 1)) {\n    result.append('J', ' ');\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:526","type":"CtIfImpl","sourcecode":"if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n    result.append('J', 'A');\n} else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n    result.append('J', 'H');\n} else if (index == ((value.length()) - 1)) {\n    result.append('J', ' ');\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} "},"status":-2},{"failures":[172,173],"tindex":"5c5a3174-16e7-11e6-98fb-b57cd5474bee","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'P') && (next == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_FF;\n} ","position":"org.apache.commons.codec.language.Nysiis:153","type":"CtIfImpl","sourcecode":"if ((curr == 'P') && (next == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"next":"next","org.apache.commons.codec.language.Nysiis.CHARS_FF":"org.apache.commons.codec.language.Nysiis.CHARS_AF","curr":"next"},"type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_AF;\n} ","position":"org.apache.commons.codec.language.Nysiis:120","type":"CtIfImpl","sourcecode":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[174],"tindex":"5c5a3175-16e7-11e6-98fb-8f52f6631007","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"string","key":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.UTF_16BE)","position":"org.apache.commons.codec.binary.StringUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"5c5a3176-16e7-11e6-98fb-fd59fafbfcd6","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.soundexMapping, 0, mapping.length)","position":"org.apache.commons.codec.language.Soundex:97","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.char[], 0, mapping.int)"},"variableMap":{"mapping":"org.apache.commons.codec.language.ColognePhonetic.SCZ","soundexMapping":"org.apache.commons.codec.language.ColognePhonetic.SCZ","length":"rightLength"},"type":"adrStmt","transplantationPoint":{"toString":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AEIJOUY, chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SCZ, nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.WFPV, chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.GKQ, chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.CKQ, lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.TDX, chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}","position":"org.apache.commons.codec.language.ColognePhonetic:338","type":"CtWhileImpl","sourcecode":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}"},"status":-3},{"failures":[92],"tindex":"5c5a5887-16e7-11e6-98fb-af2d7668ffff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final byte b : bytes) {\n    if (b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n        hasUnderscores = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.net.QCodec:174","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        hasUnderscores = true;\n        break;\n    } \n}"},"status":-1},{"failures":[91,92,93,94,95,47,48,96],"tindex":"5c5a5888-16e7-11e6-98fb-2315bfb37eb3","series":0,"name":"replace","transplant":{"toString":"v &= e1","position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"from","e1":"from"},"type":"adrStmt","transplantationPoint":{"toString":"from = to + 1","position":"org.apache.commons.codec.net.RFC1522Codec:151","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"status":-1},{"failures":[],"tindex":"5c5a7f99-16e7-11e6-98fb-87c4dcfe026f","series":0,"name":"replace","transplant":{"toString":"if (negate) {\n    boxContent = boxContent.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtIfImpl","sourcecode":"if (negate) {\n    boxContent = boxContent.substring(1);\n} "},"variableMap":{"negate":"found","boxContent":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule rule : rules) {\n    final java.lang.String pattern = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.input, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:211","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule : rules) {\n    final java.lang.String java.lang.String = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n        break;\n    } \n}"},"status":-2},{"failures":[],"tindex":"5c5a7f9a-16e7-11e6-98fb-f9b5ee9d13c4","series":0,"name":"add","transplant":{"toString":"final java.lang.String body = ph.substring(1, ((ph.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"test"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String substring = string.substring(index, (index + (test.length())))","position":"org.apache.commons.codec.language.Metaphone:364","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = string.substring(index, (index + (test.length())))"},"status":-2},{"failures":[],"tindex":"5c5a7f9b-16e7-11e6-98fb-1f890271c5c4","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String upperName = name.toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:84","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[],"tindex":"5c5aa6ac-16e7-11e6-98fb-cb7f656ec339","series":0,"name":"replace","transplant":{"toString":"return value < 0 ? value + 256 : value","position":"org.apache.commons.codec.digest.UnixCrypt:322","type":"CtReturnImpl","sourcecode":"return value < 0 ? value + 256 : value"},"variableMap":{"value":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:641","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193],"tindex":"5c5aa6ad-16e7-11e6-98fb-3d766d563f74","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(sBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"key"},"type":"adrStmt","transplantationPoint":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"status":-1},{"failures":[16,194,17,18,19,20,21,22],"tindex":"5c5aa6ae-16e7-11e6-98fb-2fb0bfded473","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:286","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)"},"status":-1},{"failures":[30,31,32,33,81,34,82,35,36,83,84,37,85,86,87,88,89,90],"tindex":"5c5aa6af-16e7-11e6-98fb-8ff2fc775adc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"status":-1},{"failures":[],"tindex":"5c5aa6b0-16e7-11e6-98fb-cb6f0b226ba7","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"line","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"location"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.contains(\"=\")) {\n    final java.lang.String[] parts = line.split(\"=\");\n    if ((parts.length) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        final java.lang.String leftCharacter = parts[0];\n        final java.lang.String rightCharacter = parts[1];\n        if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n        } \n        asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n    }\n} else {\n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String pattern = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n            final java.lang.String replacement1 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n            final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n            final java.lang.String replacement3 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule r = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n            final char patternKey = r.pattern.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = ruleMapping.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                ruleMapping.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtIfImpl","sourcecode":"if (line.contains(\"=\")) {\n    final java.lang.String[] java.lang.String[] = line.split(\"=\");\n    if ((parts.int) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        final java.lang.String java.lang.String = parts[0];\n        final java.lang.String java.lang.String = parts[1];\n        if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n        } \n        asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n            final char char = r.java.lang.String.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                ruleMapping.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-3},{"failures":[],"tindex":"5c5acdc1-16e7-11e6-98fb-cdef3771fcfb","series":0,"name":"add","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"location"},"type":"adrStmt","transplantationPoint":{"toString":"lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)))","position":"org.apache.commons.codec.language.bm.Rule:440","type":"CtInvocationImpl","sourcecode":"lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)))"},"status":0},{"failures":[],"tindex":"5c5af4d2-16e7-11e6-98fb-0b9eb1ca51bc","series":0,"name":"replace","transplant":{"toString":"final byte[] buffer = new byte[org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH]","position":"org.apache.commons.codec.digest.DigestUtils:793","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int]"},"variableMap":{"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH":"readPos"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buf = new byte[(context.pos) - (context.readPos)]","position":"org.apache.commons.codec.binary.BaseNCodec:432","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(context.int) - (context.int)]"},"status":-2},{"failures":[],"tindex":"5c5af4d3-16e7-11e6-98fb-e3a884372ea0","series":0,"name":"replace","transplant":{"toString":"d = (d >>> 2) | (d << 26)","position":"org.apache.commons.codec.digest.UnixCrypt:363","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 2) | (d << 26)"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:750","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1"},"status":-2},{"failures":[162,28,29],"tindex":"5c5af4d4-16e7-11e6-98fb-d3b5136599f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:476","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"5c5af4d5-16e7-11e6-98fb-753fef6c5892","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:283","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd)"},"status":-2},{"failures":[],"tindex":"5c5af4d6-16e7-11e6-98fb-d98abcc67d2d","series":0,"name":"replace","transplant":{"toString":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:346","type":"CtAssignmentImpl","sourcecode":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)"},"variableMap":{"c":"b"},"type":"adrStmt","transplantationPoint":{"toString":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:307","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)"},"status":-2},{"failures":[92,93,195],"tindex":"5c5b1be7-16e7-11e6-98fb-fdb5ec9e4361","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('%')","position":"org.apache.commons.codec.net.QCodec:70","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('%')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(' ')","position":"org.apache.commons.codec.net.QCodec:65","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(' ')"},"status":-1},{"failures":[],"tindex":"5c5b1be8-16e7-11e6-98fb-5f29edb3ab1e","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:283","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd)"},"variableMap":{"finalb":"obj","passwd":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"5c5b1be9-16e7-11e6-98fb-4f092f7fd627","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:531","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"5c5b1bea-16e7-11e6-98fb-a505b2cd0612","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[9]","position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] saltBytes = saltString.getBytes(org.apache.commons.codec.Charsets.UTF_8)","position":"org.apache.commons.codec.digest.Sha2Crypt:155","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[16,196,194,17,18,197,19,20,21,198,199,22],"tindex":"5c5b1beb-16e7-11e6-98fb-91c2f01a21b6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((m == null) || (!(m.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:189","type":"CtIfImpl","sourcecode":"if ((m == null) || (!(m.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-1},{"failures":[200,201,202,203,204],"tindex":"5c5b1bec-16e7-11e6-98fb-6b6f5575e146","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:192","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
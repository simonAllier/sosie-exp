{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":21,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":64,"org.apache.commons.codec.binary.HexTest.testCustomCharset":41,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":134,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":55,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":73,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":78,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":88,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":150,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":13,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":20,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":12,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":56,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":148,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":156,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":2,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":93,"org.apache.commons.codec.binary.Base64Test.testTriplets":98,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":60,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":47,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":74,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":6,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":38,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":7,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":54,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":111,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":81,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":119,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":122,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":153,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":137,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":90,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":136,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":28,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":105,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":14,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":106,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":48,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":63,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":110,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":8,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":135,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":107,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":108,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":34,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":125,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":139,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":18,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":23,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":35,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":75,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":79,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":141,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":143,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":17,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":45,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":145,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":115,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":133,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":76,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":142,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":5,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":100,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":151,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":95,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":72,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":123,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":67,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":89,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":99,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":144,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":42,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":80,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":61,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":149,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":127,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":77,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":154,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":29,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":62,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":70,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":37,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":121,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":155,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":124,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":69,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":113,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":147,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":1,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":120,"org.apache.commons.codec.language.NysiisTest.testDropBy":50,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":109,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":140,"org.apache.commons.codec.binary.Base64Test.testBase64":118,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":11,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":59,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":39,"org.apache.commons.codec.binary.Base64Test.testUUID":102,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":132,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":96,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":112,"org.apache.commons.codec.binary.Base64Test.testSingletons":114,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":58,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":86,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":117,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":10,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":91,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":32,"org.apache.commons.codec.binary.Base64Test.testPairs":101,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":44,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":36,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":82,"org.apache.commons.codec.language.NysiisTest.testRule1":158,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":57,"org.apache.commons.codec.language.NysiisTest.testRule6":49,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":83,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":0,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":43,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":126,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":16,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":94,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":40,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":138,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":22,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":30,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":128,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":65,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":130,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":85,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":97,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":71,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":157,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":52,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":15,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":152,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":92,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":19,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":26,"org.apache.commons.codec.language.NysiisTest.testOthers":51,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":104,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":116,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":68,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":84,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":129,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":131,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":103,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":46},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"068ab4c0-0cbb-11e6-a812-a7542f37eaf6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:210","type":"CtIfImpl","sourcecode":"if (rules != null) {\n    for (final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule : rules) {\n        final java.lang.String java.lang.String = rule.getPattern();\n        patternLength = pattern.length();\n        if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n            break;\n        } \n    }\n} "},"status":-1},{"failures":[8,0,9,1,2,10,3,11,12,13,14,15,16,4,5,6,7],"tindex":"068adbd1-0cbb-11e6-a812-07556b7520dc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:217","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String java.lang.String : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}"},"status":-1},{"failures":[],"tindex":"068adbd2-0cbb-11e6-a812-cb2b20e5c565","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    inMultilineComment = false;\n} "},"variableMap":{"line":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","inMultilineComment":"inExtendedComment","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-2},{"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"068b02e3-0cbb-11e6-a812-a98d4ab21077","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"variableMap":{"blocksize":"j","cp":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:145","type":"CtUnaryOperatorImpl","sourcecode":"(j++)"},"status":-1},{"failures":[],"tindex":"068b02e4-0cbb-11e6-a812-fbd4f2bcc1c0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"variableMap":{"name":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:231","type":"CtAssignmentImpl","sourcecode":"name1 = removeVowels(name1)"},"status":-2},{"failures":[],"tindex":"068b02e5-0cbb-11e6-a812-9b2af7ca1e74","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:97","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"068b02e6-0cbb-11e6-a812-2332203ddf82","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:765","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"status":-2},{"failures":[46,47],"tindex":"068b02e7-0cbb-11e6-a812-cd574ba0a8fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"status":-1},{"failures":[],"tindex":"068b02e8-0cbb-11e6-a812-4fbd4b8055db","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:321","type":"CtLocalVariableImpl","sourcecode":"final int int = b"},"status":-2},{"failures":[],"tindex":"068b29f9-0cbb-11e6-a812-4147d36892db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone:89","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str)"},"variableMap":{"str":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"status":-2},{"failures":[],"tindex":"068b29fa-0cbb-11e6-a812-258b36eb47da","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"status":-2},{"failures":[48],"tindex":"068b29fb-0cbb-11e6-a812-3b59e4642777","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"why\", \"Why\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"status":-1},{"failures":[49,50,51],"tindex":"068b29fc-0cbb-11e6-a812-c5e1f37d8599","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"variableMap":{"code":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"status":-1},{"failures":[52,53,54,55,56,57,58,59,60,61,62],"tindex":"068b29fd-0cbb-11e6-a812-83a22b474892","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:516","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"encodeTable","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:483","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"068b29fe-0cbb-11e6-a812-6b49aae33edd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"status":-2},{"failures":[59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,62],"tindex":"068b29ff-0cbb-11e6-a812-a52b78049b18","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"decodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n            context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"068b5110-0cbb-11e6-a812-3987256e58f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"curr","curr":"curr"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:167","type":"CtReturnImpl","sourcecode":"return new char[]{ curr }"},"status":-2},{"failures":[],"tindex":"068b5111-0cbb-11e6-a812-bbe6ff3ac0b7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"variableMap":{"s":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:389","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[],"tindex":"068b5112-0cbb-11e6-a812-ad26fe919a25","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:188","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"variableMap":{"e":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[76],"tindex":"068b5113-0cbb-11e6-a812-a3bf943f83f3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","ascii":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[77,78,79,80,81,82,83,84,85,86,87,88,89],"tindex":"068b7824-0cbb-11e6-a812-610192ffa844","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"i","name2Size":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:360","type":"CtTryImpl","sourcecode":"try {\n    if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n        continue;\n    } \n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    buffer.write(((char)((u << 4) + l)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n}"},"status":-1},{"failures":[48,90,91,92],"tindex":"068b7825-0cbb-11e6-a812-0551c51b1966","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[],"tindex":"068b7826-0cbb-11e6-a812-f50a69c383c0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:245","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))"},"variableMap":{"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES","org.apache.commons.codec.language.bm.NameType.GENERIC":"org.apache.commons.codec.language.bm.NameType.ASHKENAZI"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:238","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))"},"status":0},{"failures":[93,94,95,96,52,53,54,55,97,56,57,58,59,60,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,61,62,124,125,126,127,128,129,130],"tindex":"068b7827-0cbb-11e6-a812-63fa7accbacf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:453","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data)"},"variableMap":{"data":"buf"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:434","type":"CtReturnImpl","sourcecode":"return buf"},"status":-1},{"failures":[],"tindex":"068b7828-0cbb-11e6-a812-a7b5e109c896","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:677","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n    result.append('X');\n    index += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.append('T');\n    } else {\n        result.append('0', 'T');\n    }\n    index += 2;\n} else {\n    result.append('T');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[5],"tindex":"068b9f39-0cbb-11e6-a812-0f3e33c21a59","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:440","type":"CtInvocationImpl","sourcecode":"words2.addAll(words)"},"variableMap":{"words":"words2","words2":"words2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:437","type":"CtInvocationImpl","sourcecode":"words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType))"},"status":-1},{"failures":[],"tindex":"068b9f3a-0cbb-11e6-a812-7d958ef7f9ab","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:269","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName))"},"variableMap":{"resName":"org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)))"},"status":-2},{"failures":[5],"tindex":"068b9f3b-0cbb-11e6-a812-75db46d2244b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:440","type":"CtInvocationImpl","sourcecode":"words2.addAll(words)"},"variableMap":{"words":"words2","words2":"words2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:435","type":"CtInvocationImpl","sourcecode":"words2.add(lastPart)"},"status":-1},{"failures":[],"tindex":"068b9f3c-0cbb-11e6-a812-f577c74d21de","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:355","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.get(nameType).get(rt)"},"status":0},{"failures":[131,132,133,134],"tindex":"068b9f3d-0cbb-11e6-a812-b5a292f3e1fd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:518","type":"CtIfImpl","sourcecode":"if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    result.append('H');\n} else {\n    result.append('J', 'H');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:760","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('J');\n    index += 2;\n} else {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n        result.append(\"S\", \"TS\");\n    } else {\n        result.append('S');\n    }\n    index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n}"},"status":-1},{"failures":[135,136,137,138,139,140,141,142],"tindex":"068bc64e-0cbb-11e6-a812-cfceed782ce6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:401","type":"CtReturnImpl","sourcecode":"return output.toString()"},"status":-1},{"failures":[],"tindex":"068bc64f-0cbb-11e6-a812-577ad7fa4e02","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"local.setCharAt(0, 'W')"},"variableMap":{"local":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:413","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"068bc650-0cbb-11e6-a812-e3c8c26317fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:116","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2)"},"variableMap":{"s1":"pattern","s2":"pattern"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:177","type":"CtReturnImpl","sourcecode":"return java.lang.String.length()"},"status":-2},{"failures":[143],"tindex":"068bc651-0cbb-11e6-a812-b3c7c157f3db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:75","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"q\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"x\", \"k\")"},"status":-1},{"failures":[131,132,133,134],"tindex":"068bc652-0cbb-11e6-a812-c1966cbdc1cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"variableMap":{"value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:784","type":"CtIfImpl","sourcecode":"if (index <= 1) {\n    return false;\n} else if (isVowel(charAt(value, (index - 2)))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = charAt(value, (index + 2));\n    return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"status":-1},{"failures":[],"tindex":"068bc653-0cbb-11e6-a812-5b2284c3ba33","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-2},{"failures":[81,83,144,145,146],"tindex":"068bed64-0cbb-11e6-a812-eb33c3c82c11","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:318","type":"CtAssignmentImpl","sourcecode":"b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"status":-1},{"failures":[],"tindex":"068bed65-0cbb-11e6-a812-8bddb66c943f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtIfImpl","sourcecode":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} "},"status":-2},{"failures":[],"tindex":"068bed66-0cbb-11e6-a812-338ccd6ded2f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"last = mapped"},"variableMap":{"last":"last","mapped":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:188","type":"CtAssignmentImpl","sourcecode":"last = '*'"},"status":0},{"failures":[],"tindex":"068bed67-0cbb-11e6-a812-07b90df58e5d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:72","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[131,132,147,133,134],"tindex":"068bed68-0cbb-11e6-a812-bdcaa86bc788","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:301","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n    result.append('K');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        result.append('S', 'X');\n    } else {\n        result.append('S');\n    }\n    index += 2;\n} else {\n    result.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        index += 3;\n    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}"},"status":-1},{"failures":[],"tindex":"068bed69-0cbb-11e6-a812-35afbc0eb4b8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:286","type":"CtThrowImpl","sourcecode":"throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e)"},"variableMap":{"e":"value","charsetName":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:203","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"))"},"status":-2},{"failures":[],"tindex":"068bed6a-0cbb-11e6-a812-69d98c555768","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:70","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('%')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:80","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('/')"},"status":0},{"failures":[],"tindex":"068bed6b-0cbb-11e6-a812-ab1f1c23ea03","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"variableMap":{"s":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:488","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[],"tindex":"068bed6c-0cbb-11e6-a812-09c358d8a2b3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:214","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:312","type":"CtIfImpl","sourcecode":"if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"status":-2},{"failures":[],"tindex":"068c147d-0cbb-11e6-a812-9be1d6295853","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:95","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"068c147e-0cbb-11e6-a812-677a497565cf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:541","type":"CtInvocationImpl","sourcecode":"currentBranches.clear()"},"status":-2},{"failures":[],"tindex":"068c147f-0cbb-11e6-a812-d75a7c3db3d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:154","type":"CtAssignmentImpl","sourcecode":"data = doDecoding(data)"},"variableMap":{"data":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:405","type":"CtAssignmentImpl","sourcecode":"altResult = ctx.digest()"},"status":-2},{"failures":[],"tindex":"068c1480-0cbb-11e6-a812-733ce5d4a79a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:504","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"status":-2},{"failures":[131,132,147,148,149,133,134],"tindex":"068c1481-0cbb-11e6-a812-6f5f02ef6efa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('A');\n} "},"status":-1},{"failures":[],"tindex":"068c1482-0cbb-11e6-a812-4172ba666a50","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:136","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.this(charset, false)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.UTF_8","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:125","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.this(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset, strict)"},"status":-2},{"failures":[],"tindex":"068c1483-0cbb-11e6-a812-65ebbf29543c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:348","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = rulesApplication.isFound()"},"status":-2},{"failures":[52,53,54,55,56,57,58,59,60,61,71,62],"tindex":"068c1484-0cbb-11e6-a812-57134eeec537","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:452","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"068c1485-0cbb-11e6-a812-11a3319e8933","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:238","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))"},"variableMap":{"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES","org.apache.commons.codec.language.bm.NameType.ASHKENAZI":"org.apache.commons.codec.language.bm.NameType.GENERIC"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:245","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))"},"status":0},{"failures":[131,132,134],"tindex":"068c3b96-0cbb-11e6-a812-abcad29e6e96","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:325","type":"CtReturnImpl","sourcecode":"return index"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:591","type":"CtReturnImpl","sourcecode":"return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"068c3b97-0cbb-11e6-a812-1703f843649c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))"},"variableMap":{"pArray":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:163","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"068c3b98-0cbb-11e6-a812-67510a39fd67","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"status":-2},{"failures":[],"tindex":"068c3b99-0cbb-11e6-a812-cdfbd487973a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:284","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:467","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer)"},"status":-2},{"failures":[],"tindex":"068c3b9a-0cbb-11e6-a812-5702cac9cf61","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:614","type":"CtAssignmentImpl","sourcecode":"str = str.substring(1)"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"status":-2},{"failures":[150,151,152],"tindex":"068c3b9b-0cbb-11e6-a812-d1de2839677e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:487","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:489","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer)"},"status":-1},{"failures":[],"tindex":"068c3b9c-0cbb-11e6-a812-9dfd64eb7351","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:476","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[],"tindex":"068c3b9d-0cbb-11e6-a812-c91b3247c9c6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:246","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:285","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-2},{"failures":[],"tindex":"068c3b9e-0cbb-11e6-a812-1b458b9e07e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[context.int]"},"variableMap":{"pos":"encodeSize","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:501","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-2},{"failures":[],"tindex":"068c3b9f-0cbb-11e6-a812-dfc4078d6842","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"variableMap":{"b":"singleByte","offset":"i","iValue":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(i))"},"status":-2},{"failures":[83,145],"tindex":"068c62b0-0cbb-11e6-a812-b78106e84204","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"status":-1},{"failures":[],"tindex":"068c62b1-0cbb-11e6-a812-39c4860be8c6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:231","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)))"},"status":-2},{"failures":[],"tindex":"068c62b2-0cbb-11e6-a812-79c35e093f63","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:322","type":"CtReturnImpl","sourcecode":"return value < 0 ? value + 256 : value"},"variableMap":{"value":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"status":-2},{"failures":[],"tindex":"068c62b3-0cbb-11e6-a812-e549908bbae6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"currentLinePos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"status":-2},{"failures":[],"tindex":"068c62b4-0cbb-11e6-a812-65e5483569ed","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} "},"status":-2},{"failures":[],"tindex":"068c62b5-0cbb-11e6-a812-b1a422f5a93c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:273","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length())"},"status":-2},{"failures":[],"tindex":"068c62b6-0cbb-11e6-a812-67d2708ba5e0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:141","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[153,154,155],"tindex":"068c62b7-0cbb-11e6-a812-33a5f221d284","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:72","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cy\", \"sy\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"status":-1},{"failures":[],"tindex":"068c62b8-0cbb-11e6-a812-b593a2742be7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:155","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"068c62b9-0cbb-11e6-a812-f74aa07ee230","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:287","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[],"tindex":"068c62ba-0cbb-11e6-a812-67bf47d967c8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(',')"},"status":0},{"failures":[150,151,152],"tindex":"068c89cb-0cbb-11e6-a812-91260020edd2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:469","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer)"},"status":-1},{"failures":[],"tindex":"068c89cc-0cbb-11e6-a812-6b8457938b81","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:71","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"068c89cd-0cbb-11e6-a812-13204b0efe9b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"status":-2},{"failures":[],"tindex":"068c89ce-0cbb-11e6-a812-7b9a0d1ca9d9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"status":0},{"failures":[],"tindex":"068c89cf-0cbb-11e6-a812-2f2a8efd9a5b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:94","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"068c89d0-0cbb-11e6-a812-5132d30c6836","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:240","type":"CtAssignmentImpl","sourcecode":"name2 = getFirst3Last3(name2)"},"variableMap":{"name2":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[156,157,95,96,59,60,71],"tindex":"068c89d1-0cbb-11e6-a812-050a91554b40","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:768","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len)"},"variableMap":{"resizedBytes":"b","bigBytes":"b","len":"offset","startSrc":"len","startDst":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:92","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-1},{"failures":[131,132,133,134],"tindex":"068c89d2-0cbb-11e6-a812-15061531604a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:332","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n    if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n        result.append(\"KS\");\n    } else {\n        result.append('X');\n    }\n    index += 3;\n} else {\n    result.append('K');\n    index += 2;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:709","type":"CtIfImpl","sourcecode":"if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n    if (isVowel(charAt(value, (index + 1)))) {\n        result.append('A', 'F');\n    } else {\n        result.append('A');\n    }\n    index++;\n} else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.appendAlternate('F');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n    result.append(\"TS\", \"FX\");\n    index += 4;\n} else {\n    index++;\n}"},"status":-1},{"failures":[158,50],"tindex":"068c89d3-0cbb-11e6-a812-8958704d8f28","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:262","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\")"},"status":-1},{"failures":[],"tindex":"068c89d4-0cbb-11e6-a812-45cc16557e13","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"variableMap":{"t":"pos","left":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:510","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[],"tindex":"068cb0e5-0cbb-11e6-a812-93d5819d290c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"variableMap":{"name":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:337","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"status":-2},{"failures":[46,47],"tindex":"068cb0e6-0cbb-11e6-a812-adb21fedcdb7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:321","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"variableMap":{"index":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:303","type":"CtAssignmentImpl","sourcecode":"left = results[0]"},"status":-1},{"failures":[],"tindex":"068cb0e7-0cbb-11e6-a812-3dafccad38cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"variableMap":{"length":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:273","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[(raw.int) << 3]"},"status":-2},{"failures":[],"tindex":"068cb0e8-0cbb-11e6-a812-ab055b7a7e92","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"status":-2},{"failures":[4,5,6,7],"tindex":"068cb0e9-0cbb-11e6-a812-33d523066533","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:234","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":90,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
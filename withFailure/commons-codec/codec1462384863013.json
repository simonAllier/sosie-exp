{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":60,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":73,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":81,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":72,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":3,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":82,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":99,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":93,"org.apache.commons.codec.binary.Base64Test.testTriplets":47,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":7,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":112,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":42,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":35,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":89,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":92,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":64,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":66,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":17,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":12,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":18,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":21,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":19,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":20,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":86,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":100,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":113,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":24,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":95,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":58,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":70,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":63,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":49,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":74,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":4,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":57,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":71,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":46,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":33,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":108,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":78,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":48,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":8,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":88,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":34,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":103,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":107,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":109,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":10,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":43,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":30,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":110,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":61,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":85,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":54,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":80,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":84,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":102,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":65,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":51,"org.apache.commons.codec.binary.Base64Test.testBase64":29,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":14,"org.apache.commons.codec.net.QCodecTest.testNullInput":2,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":23,"org.apache.commons.codec.binary.Base64Test.testSingletons":27,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":75,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":83,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":37,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":101,"org.apache.commons.codec.binary.Base64Test.testPairs":13,"org.apache.commons.codec.binary.Base64Test.testConstructors":50,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":36,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":31,"org.apache.commons.codec.binary.Base64Test.testCodec112":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":96,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":94,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":41,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":11,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":87,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":104,"org.apache.commons.codec.binary.Base64Test.testCodec68":59,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":105,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":68,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":90,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":25,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":32,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":39,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":26,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":76,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":106,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":9,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":97,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":77,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":5,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":38,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":45,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":114,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":91,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":16,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":28,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":44,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":79,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":67,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":40,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":53,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":98,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":111},"transformations":[{"failures":[],"tindex":"2a5f85d6-1222-11e6-9a7b-796246883f89","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('K', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"result.append('K', 'X')"},"status":0},{"failures":[],"tindex":"2a5face7-1222-11e6-9a7b-4bc4255cb68a","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"toString":"if ((lineLength) > 0) {\n    len += (((len + (lineLength)) - 1) / (lineLength)) * (chunkSeparatorLength);\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    len += (((len + (int)) - 1) / (int)) * (int);\n} "},"status":-2},{"failures":[],"tindex":"2a5face8-1222-11e6-9a7b-7ffbcf774327","series":0,"name":"add","transplant":{"toString":"for (int i = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.B64T.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.B64T.length())));\n}","position":"org.apache.commons.codec.digest.B64:74","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n}"},"variableMap":{"saltString":"input","num":"i","org.apache.commons.codec.digest.B64.B64T":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (rules != null) {\n    for (final org.apache.commons.codec.language.bm.Rule rule : rules) {\n        final java.lang.String pattern = rule.getPattern();\n        patternLength = pattern.length();\n        if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.input, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i)) {\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true;\n            break;\n        } \n    }\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:210","type":"CtIfImpl","sourcecode":"if (rules != null) {\n    for (final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule : rules) {\n        final java.lang.String java.lang.String = rule.getPattern();\n        patternLength = pattern.length();\n        if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n            break;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"2a5fd3f9-1222-11e6-9a7b-e59a813336d5","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone2:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0},{"failures":[],"tindex":"2a5ffb0a-1222-11e6-9a7b-8f02ddf766b0","series":0,"name":"replace","transplant":{"toString":"sb.append(ch)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:388","type":"CtInvocationImpl","sourcecode":"sb.append(ch)"},"variableMap":{"ch":"c","sb":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(c)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:365","type":"CtInvocationImpl","sourcecode":"sb.append(c)"},"status":-3},{"failures":[],"tindex":"2a5ffb0b-1222-11e6-9a7b-07c206f9f042","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base32:343","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"2a5ffb0c-1222-11e6-9a7b-c5ccc736a445","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"nextReplacement"},"type":"adrStmt","transplantationPoint":{"toString":"nextBranch.processNextReplacement(nextReplacement, force)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:530","type":"CtInvocationImpl","sourcecode":"nextBranch.processNextReplacement(nextReplacement, force)"},"status":-2},{"failures":[0,1],"tindex":"2a60221d-1222-11e6-9a7b-29b9cfba9cde","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[2],"tindex":"2a60221e-1222-11e6-9a7b-573d6aecafa1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:170","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"2a60221f-1222-11e6-9a7b-51811ce16446","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))","position":"org.apache.commons.codec.language.AbstractCaverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))"},"variableMap":{"str1":"value","str2":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"status":-2},{"failures":[],"tindex":"2a604930-1222-11e6-9a7b-c5f7f13fd717","series":0,"name":"replace","transplant":{"toString":"for (int i = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:89","type":"CtForImpl","sourcecode":"for (int int = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"status":0},{"failures":[3,4,5],"tindex":"2a607041-1222-11e6-9a7b-fff3e7757a12","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:469","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer)"},"status":-1},{"failures":[],"tindex":"2a607042-1222-11e6-9a7b-d163de63b20a","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:787","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"2a607043-1222-11e6-9a7b-ed927c0579a1","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384, key)","position":"org.apache.commons.codec.digest.HmacUtils:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"2a609754-1222-11e6-9a7b-7d823b2a0610","series":0,"name":"replace","transplant":{"toString":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS","position":"org.apache.commons.codec.net.QuotedPrintableCodec:278","type":"CtAssignmentImpl","sourcecode":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet"},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"urlsafe","printable":"urlsafe"},"type":"adrStmt","transplantationPoint":{"toString":"urlsafe = org.apache.commons.codec.net.URLCodec.WWW_FORM_URL","position":"org.apache.commons.codec.net.URLCodec:126","type":"CtAssignmentImpl","sourcecode":"urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet"},"status":-3},{"failures":[],"tindex":"2a609755-1222-11e6-9a7b-a9c6e3526081","series":0,"name":"replace","transplant":{"toString":"(length)++","position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"length":"u"},"type":"adrStmt","transplantationPoint":{"toString":"u = ((u ^ (u << 16)) ^ r) ^ (sArr[s])","position":"org.apache.commons.codec.digest.UnixCrypt:329","type":"CtAssignmentImpl","sourcecode":"u = ((u ^ (u << 16)) ^ r) ^ (sArr[s])"},"status":-3},{"failures":[],"tindex":"2a60be66-1222-11e6-9a7b-41611b8aa504","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.URLCodec:139","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-2},{"failures":[6,7,8,9,10],"tindex":"2a60be67-1222-11e6-9a7b-d56a91a82285","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:363","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:361","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"2a60be68-1222-11e6-9a7b-ab8fe96f2bc7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"readResults(result, 0, result.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:413","type":"CtInvocationImpl","sourcecode":"readResults(result, 0, result.int, context)"},"status":-1},{"failures":[42,3,4,5,43,44,45,46],"tindex":"2a60e579-1222-11e6-9a7b-8d572f48ed6a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 1 ; i <= keyLen ; i++) {\n    altCtx.update(keyBytes);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:275","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= keyLen ; i++) {\n    altCtx.update(keyBytes);\n}"},"status":-1},{"failures":[],"tindex":"2a60e57a-1222-11e6-9a7b-51b5bf5b2748","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))","position":"org.apache.commons.codec.language.bm.Lang:169","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))"},"status":-2},{"failures":[47,11,48,49,12,13,14,15,50,16,17,18,19,20,51,21,52,22,23,53,54,24,55,25,26,56,57,27,58,59,28,60,61,62,29,63,64,65,30,31,32,66,33,34,67,68,6,7,69,70,71,72,73,74,75,8,76,77,78,79,80,81,10,82,83,84,85,86,87,35,36,37,38,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,39,40,41,106],"tindex":"2a610c8b-1222-11e6-9a7b-4bfbd77e9da0","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.BaseNCodec:504","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"2a610c8c-1222-11e6-9a7b-fd846997bc3e","series":0,"name":"replace","transplant":{"toString":"this.decodeSize = (org.apache.commons.codec.binary.Base64.this.encodeSize) - 1","position":"org.apache.commons.codec.binary.Base64:295","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.this.int) - 1"},"variableMap":{"encodeSize":"right","decodeSize":"right"},"type":"adrStmt","transplantationPoint":{"toString":"out[1] = right","position":"org.apache.commons.codec.digest.UnixCrypt:316","type":"CtAssignmentImpl","sourcecode":"out[1] = right"},"status":-3},{"failures":[0,1],"tindex":"2a61339d-1222-11e6-9a7b-11c1076f12d9","series":0,"name":"replace","transplant":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:341","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[],"tindex":"2a61339e-1222-11e6-9a7b-017fe1692fbf","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.charset","position":"org.apache.commons.codec.net.QuotedPrintableCodec:548","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QCodec.this.charset","position":"org.apache.commons.codec.net.QCodec:328","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.java.nio.charset.Charset"},"status":-2},{"failures":[],"tindex":"2a61339f-1222-11e6-9a7b-b7e8ce3789a0","series":0,"name":"add","transplant":{"toString":"name = cleanName(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:132","type":"CtAssignmentImpl","sourcecode":"name = cleanName(name)"},"variableMap":{"name":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:316","type":"CtAssignmentImpl","sourcecode":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))"},"status":-2},{"failures":[],"tindex":"2a615ab0-1222-11e6-9a7b-859ccf1a8178","series":0,"name":"replace","transplant":{"toString":"return str","position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return str"},"variableMap":{"str":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone1.SIX_1","position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"status":0},{"failures":[],"tindex":"2a615ab1-1222-11e6-9a7b-c1f736650ff3","series":0,"name":"add","transplant":{"toString":"this.languages = languages","position":"org.apache.commons.codec.language.bm.Languages:289","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = languages"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"toString":"this.languages = java.util.Collections.unmodifiableSet(languages)","position":"org.apache.commons.codec.language.bm.Languages:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = java.util.Collections.unmodifiableSet(languages)"},"status":-2},{"failures":[],"tindex":"2a61f6f2-1222-11e6-9a7b-cb868bec27a6","series":0,"name":"replace","transplant":{"toString":"return phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:335","type":"CtReturnImpl","sourcecode":"return phonemeBuilder"},"variableMap":{"phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:196","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder"},"status":0},{"failures":[107],"tindex":"2a61f6f3-1222-11e6-9a7b-3318c9a32cb0","series":0,"name":"replace","transplant":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")","position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"status":-1},{"failures":[108,109,110],"tindex":"2a61f6f4-1222-11e6-9a7b-93e6dc73d0da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"d\", \"t\")","position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"status":-1},{"failures":[],"tindex":"2a621e05-1222-11e6-9a7b-fda5ecc3035c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base64:293","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"status":-2},{"failures":[],"tindex":"2a621e06-1222-11e6-9a7b-0dee59e77bd7","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)","position":"org.apache.commons.codec.digest.DigestUtils:363","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.ISO_8859_1)","position":"org.apache.commons.codec.binary.StringUtils:114","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"2a621e07-1222-11e6-9a7b-f15d99bd40f8","series":0,"name":"add","transplant":{"toString":"final java.lang.String bContent = boxContent","position":"org.apache.commons.codec.language.bm.Rule:556","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = boxContent"},"variableMap":{"boxContent":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name2RtLEnd = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:305","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[111,112],"tindex":"2a621e08-1222-11e6-9a7b-abc020cf5ff6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"t = left","position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"status":-1},{"failures":[113,114],"tindex":"2a621e09-1222-11e6-9a7b-297db42fb910","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l3\", \"L3\")","position":"org.apache.commons.codec.language.Caverphone2:115","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":36,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":3,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":24,"org.apache.commons.codec.language.NysiisTest.testSnat":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":23,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":35,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":2,"org.apache.commons.codec.language.NysiisTest.testDropBy":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":27,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":36,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":32,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":34,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":22,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":41,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":37,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":26,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":40,"org.apache.commons.codec.language.NysiisTest.testDad":7,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":1,"org.apache.commons.codec.language.NysiisTest.testRule2":11,"org.apache.commons.codec.language.NysiisTest.testRule1":10,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":33,"org.apache.commons.codec.language.NysiisTest.testOthers":18,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":0,"org.apache.commons.codec.language.NysiisTest.testRule6":12,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":39,"org.apache.commons.codec.language.NysiisTest.testTranan":19,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":4,"org.apache.commons.codec.language.NysiisTest.testDan":8,"org.apache.commons.codec.language.NysiisTest.testFal":9,"org.apache.commons.codec.language.NysiisTest.testCap":6,"org.apache.commons.codec.language.NysiisTest.testSnad":14,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":21,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":28,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":29,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3":30,"org.apache.commons.codec.language.NysiisTest.testBran":13,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":20,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5":31,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":38,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":25},"transformations":[{"failures":[],"tindex":"b6701489-16e1-11e6-b423-31fa65cdf381","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"status":-2},{"failures":[],"tindex":"b67062aa-16e1-11e6-b423-9f691375d0cb","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.QCodec:232","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":0},{"failures":[],"tindex":"b67062ab-16e1-11e6-b423-bbc5fa66ead9","series":0,"name":"add","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:948","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"hex1"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(hex1)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:186","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-2},{"failures":[],"tindex":"b67089bc-16e1-11e6-b423-47a7022c18dd","series":0,"name":"add","transplant":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:287","type":"CtReturnImpl","sourcecode":"return l_ascii"},"variableMap":{"l_ascii":"org.apache.commons.codec.language.Nysiis.CHARS_AF"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_AF","position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"b67089bd-16e1-11e6-b423-c7eae32ba342","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (key.length) ; i++) {\n    key[i] = 0;\n}","position":"org.apache.commons.codec.digest.UnixCrypt:216","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (key.int) ; i++) {\n    key[i] = 0;\n}"},"variableMap":{"length":"length","key":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (bytes.length) ; i++) {\n    final int b = bytes[i];\n    if (b == '+') {\n        buffer.write(' ');\n    } else if (b == (org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR)) {\n        try {\n            final int u = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            buffer.write(((char)((u << 4) + l)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n        }\n    } else {\n        buffer.write(b);\n    }\n}","position":"org.apache.commons.codec.net.URLCodec:166","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final int int = bytes[i];\n    if (b == '+') {\n        buffer.write(' ');\n    } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n        try {\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            buffer.write(((char)((u << 4) + l)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n        }\n    } else {\n        buffer.write(b);\n    }\n}"},"status":-2},{"failures":[0,1,2,3],"tindex":"b670b0ce-16e1-11e6-b423-5f17551f073f","series":0,"name":"replace","transplant":{"toString":"return 3","position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"b670b0cf-16e1-11e6-b423-17d6124a9cc6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((chars[i]) != (chars[(i - 1)])) {\n    key.append(chars[i]);\n} ","position":"org.apache.commons.codec.language.Nysiis:287","type":"CtIfImpl","sourcecode":"if ((chars[i]) != (chars[(i - 1)])) {\n    key.append(chars[i]);\n} "},"status":-1},{"failures":[21,22],"tindex":"b670d7e0-16e1-11e6-b423-c55df9f8004f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('J', 'H')","position":"org.apache.commons.codec.language.DoubleMetaphone:530","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"status":-1},{"failures":[],"tindex":"b670d7e1-16e1-11e6-b423-bb22c8cad42a","series":0,"name":"replace","transplant":{"toString":"upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"str":"txt","upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"c\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"status":-3},{"failures":[21,23,24,25,26],"tindex":"b670d7e2-16e1-11e6-b423-3169f3c627ef","series":0,"name":"replace","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.toString()","position":"org.apache.commons.codec.language.DoubleMetaphone:997","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.toString()"},"status":-1},{"failures":[],"tindex":"b670fef3-16e1-11e6-b423-1d89af6df035","series":0,"name":"add","transplant":{"toString":"int index1 = thisStart","position":"org.apache.commons.codec.binary.CharSequenceUtils:54","type":"CtLocalVariableImpl","sourcecode":"int int = thisStart"},"variableMap":{"thisStart":"avail"},"type":"adrStmt","transplantationPoint":{"toString":"final int c = baseNCodec.readResults(buf, 0, avail, context)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:114","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"b670fef4-16e1-11e6-b423-4b65c5ff8d9d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:294","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[],"tindex":"b6712605-16e1-11e6-b423-ab3ab99be70d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", lcon='\").append(lCon).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:466","type":"CtInvocationImpl","sourcecode":"sb.append(\", lcon='\").append(lCon).append('\\'')"},"status":0},{"failures":[],"tindex":"b6712606-16e1-11e6-b423-b1e6dac48087","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"z\", \"s\")","position":"org.apache.commons.codec.language.Caverphone2:89","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"z\", \"s\")"},"status":0},{"failures":[],"tindex":"b6712607-16e1-11e6-b423-09eb02f5fb4a","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"finalRules can not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:317","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":0},{"failures":[21,22,27,24],"tindex":"b6714d18-16e1-11e6-b423-85187dbc05c5","series":0,"name":"replace","transplant":{"toString":"if (index == 0) {\n    result.append('S');\n    index++;\n} else {\n    if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n        result.append(\"KS\");\n    } \n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('S');\n    index++;\n} else {\n    if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n        result.append(\"KS\");\n    } \n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n    result.append(\"S\", \"TS\");\n} else {\n    result.append('S');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:765","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n    result.append(\"S\", \"TS\");\n} else {\n    result.append('S');\n}"},"status":-1},{"failures":[28],"tindex":"b6717429-16e1-11e6-b423-5d5d8325e2df","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"e$\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"e$\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"status":-1},{"failures":[],"tindex":"b671742a-16e1-11e6-b423-ff027eb061c7","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"result.append('A')","position":"org.apache.commons.codec.language.DoubleMetaphone:716","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"status":-2},{"failures":[],"tindex":"b671742b-16e1-11e6-b423-11f8e4fee9b6","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.Soundex:260","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[29,30,31,32,33],"tindex":"b6719b3c-16e1-11e6-b423-cdbedad2dbd8","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")","position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"status":-1},{"failures":[],"tindex":"b6719b3d-16e1-11e6-b423-31de4141467c","series":0,"name":"replace","transplant":{"toString":"if (((pad) == element) || (isInAlphabet(element))) {\n    return true;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:500","type":"CtIfImpl","sourcecode":"if (((byte) == element) || (isInAlphabet(element))) {\n    return true;\n} "},"variableMap":{"pad":"byteToCheck","element":"byteToCheck"},"type":"adrStmt","transplantationPoint":{"toString":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}","position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"status":-3},{"failures":[],"tindex":"b671c24e-16e1-11e6-b423-8dd2d9986f78","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int incount = 1","position":"org.apache.commons.codec.language.Soundex:268","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[34,35,36,37,38,39,40,41],"tindex":"b671c24f-16e1-11e6-b423-e5fc11983191","series":0,"name":"replace","transplant":{"toString":"b += 256","position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"cnt"},"type":"adrStmt","transplantationPoint":{"toString":"cnt >>= 1","position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"status":-1},{"failures":[],"tindex":"b671c250-16e1-11e6-b423-490e9751cb45","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (salt == null) {\n    final java.util.Random randomGenerator = new java.util.Random();\n    final int numSaltChars = org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS.length;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    final java.util.Random java.util.Random = new java.util.Random();\n    final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":24,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
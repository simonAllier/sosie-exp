{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":90,"org.apache.commons.codec.language.NysiisTest.testSnat":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":44,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":43,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":98,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":8,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":76,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":69,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":39,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":65,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":59,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":62,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":18,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":80,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":87,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":53,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":52,"org.apache.commons.codec.language.NysiisTest.testCap":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":79,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":63,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":17,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":51,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":15,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":16,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":55,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":89,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":31,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":57,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":92,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":93,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":96,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":2,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":3,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":58,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":42,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":46,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":99,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":105,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":74,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":75,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":95,"org.apache.commons.codec.language.SoundexTest.testNewInstance":12,"org.apache.commons.codec.language.NysiisTest.testTranan":29,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":50,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":91,"org.apache.commons.codec.language.NysiisTest.testFal":24,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":20,"org.apache.commons.codec.language.NysiisTest.testSnad":26,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":33,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":88,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":102,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":5,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":6,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":68,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":48,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":45,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":73,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":32,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":70,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":82,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":94,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":64,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":78,"org.apache.commons.codec.language.NysiisTest.testBran":25,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":30,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":1,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":49,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":10,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":97,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":84,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":54,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":0,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":40,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":14,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":83,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":72,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":100,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":104,"org.apache.commons.codec.language.NysiisTest.testDad":22,"org.apache.commons.codec.language.NysiisTest.testOthers":28,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":103,"org.apache.commons.codec.language.SoundexTest.testDifference":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":47,"org.apache.commons.codec.language.NysiisTest.testDan":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":67,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":85,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":38},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"tindex":"7cdf7d71-16e2-11e6-b262-39c9e45efdad","series":0,"name":"replace","transplant":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:144","type":"CtReturnImpl","sourcecode":"return name"},"variableMap":{"name":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str.toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.SoundexUtils:54","type":"CtReturnImpl","sourcecode":"return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[],"tindex":"7cdfa482-16e2-11e6-b262-cf4d628137ea","series":0,"name":"replace","transplant":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"variableMap":{"key":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} "},"status":-2},{"failures":[],"tindex":"7cdfcb93-16e2-11e6-b262-9b80700ef0a4","series":0,"name":"replace","transplant":{"toString":"final int t = ((a << (16 - n)) ^ a) & m","position":"org.apache.commons.codec.digest.UnixCrypt:393","type":"CtLocalVariableImpl","sourcecode":"final int int = ((a << (16 - n)) ^ a) & m"},"variableMap":{"a":"length","m":"length","n":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int len = data.length","position":"org.apache.commons.codec.binary.Hex:79","type":"CtLocalVariableImpl","sourcecode":"final int int = data.int"},"status":-2},{"failures":[],"tindex":"7cdfcb94-16e2-11e6-b262-3f20fb89a12f","series":0,"name":"replace","transplant":{"toString":"final java.util.List<org.apache.commons.codec.language.bm.Rule> allRules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>()","position":"org.apache.commons.codec.language.bm.Rule:301","type":"CtLocalVariableImpl","sourcecode":"final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey)","position":"org.apache.commons.codec.language.bm.Rule:473","type":"CtLocalVariableImpl","sourcecode":"java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey)"},"status":-2},{"failures":[],"tindex":"7cdff2a5-16e2-11e6-b262-e92b9b5fdbd9","series":0,"name":"replace","transplant":{"toString":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)","position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"variableMap":{"str":"algorithm"},"type":"adrStmt","transplantationPoint":{"toString":"this.algorithm = algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:78","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = algorithm"},"status":-2},{"failures":[31,32,33,34,35,36,37],"tindex":"7cdff2a6-16e2-11e6-b262-27316fcffb86","series":0,"name":"replace","transplant":{"toString":"ctx.update(saltBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:211","type":"CtInvocationImpl","sourcecode":"ctx.update(saltBytes)"},"variableMap":{"ctx":"ctx1","saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"if ((i % 7) != 0) {\n    ctx1.update(keyBytes);\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:268","type":"CtIfImpl","sourcecode":"if ((i % 7) != 0) {\n    ctx1.update(keyBytes);\n} "},"status":-1},{"failures":[],"tindex":"7ce019b7-16e2-11e6-b262-13dd7b0fe328","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base64:449","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = pad","position":"org.apache.commons.codec.binary.Base64:365","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[38,39],"tindex":"7ce019b8-16e2-11e6-b262-5bc976048740","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b ^= t","position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"status":-1},{"failures":[40,41,42,43,44,45,46,47,48],"tindex":"7ce019b9-16e2-11e6-b262-55f2db41a021","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ruleMapping.put(patternKey, rules)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:318","type":"CtInvocationImpl","sourcecode":"ruleMapping.put(patternKey, rules)"},"status":-1},{"failures":[],"tindex":"7ce040ca-16e2-11e6-b262-1b8ed9a897f9","series":0,"name":"replace","transplant":{"toString":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + salt;\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"variableMap":{"salt":"str","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"str"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}","position":"org.apache.commons.codec.language.SoundexUtils:48","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}"},"status":-3},{"failures":[],"tindex":"7ce040cb-16e2-11e6-b262-a73b8c358b39","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:362","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}"},"status":-2},{"failures":[],"tindex":"7ce067dc-16e2-11e6-b262-85b478fde3fa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.QCodec:232","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-2},{"failures":[],"tindex":"7ce08eed-16e2-11e6-b262-9712328ea87d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[^a-z]\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"status":0},{"failures":[],"tindex":"7ce08eee-16e2-11e6-b262-5b0235e18b22","series":0,"name":"add","transplant":{"toString":"return metaphone(str)","position":"org.apache.commons.codec.language.Metaphone:403","type":"CtReturnImpl","sourcecode":"return metaphone(str)"},"variableMap":{"str":"source"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.engine.encode(source)","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(source)"},"status":-2},{"failures":[49],"tindex":"7ce08eef-16e2-11e6-b262-fb5cc983a902","series":0,"name":"replace","transplant":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the any language set.\")","position":"org.apache.commons.codec.language.bm.Languages:259","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the any language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[50],"tindex":"7ce0b600-16e2-11e6-b262-1f6996346606","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"status":-1},{"failures":[],"tindex":"7ce0b601-16e2-11e6-b262-bf6aa945ec1d","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"dg\", \"2g\")","position":"org.apache.commons.codec.language.Caverphone1:78","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"dg\", \"2g\")"},"variableMap":{"txt":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[51,52,53,54,55,56,57,58],"tindex":"7ce0dd12-16e2-11e6-b262-738fe6e516f0","series":0,"name":"replace","transplant":{"toString":"if (element == key) {\n    return true;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (element == key) {\n    return true;\n} "},"variableMap":{"key":"key","element":"key"},"type":"adrStmt","transplantationPoint":{"toString":"for (final char element : arr) {\n    if (element == key) {\n        return true;\n    } \n}","position":"org.apache.commons.codec.language.ColognePhonetic:300","type":"CtForEachImpl","sourcecode":"for (final char char : arr) {\n    if (element == key) {\n        return true;\n    } \n}"},"status":-1},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"tindex":"7ce0dd13-16e2-11e6-b262-ede21f21292c","series":0,"name":"add","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"line","leftCharacter":"line","rightCharacter":"line","location":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-1},{"failures":[40,41,42,43,44,45,46,47,48],"tindex":"7ce10424-16e2-11e6-b262-5943b22d2773","series":0,"name":"add","transplant":{"toString":"sb.append('}')","position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"variableMap":{"sb":"builder"},"type":"adrStmt","transplantationPoint":{"toString":"builder.append(replacement)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:139","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(replacement)"},"status":-1},{"failures":[85,86],"tindex":"7ce10425-16e2-11e6-b262-a7c84e0ee70a","series":0,"name":"replace","transplant":{"toString":"final boolean negate = boxContent.startsWith(\"^\")","position":"org.apache.commons.codec.language.bm.Rule:552","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = boxContent.startsWith(\"^\")"},"variableMap":{"boxContent":"value"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean slavoGermanic = isSlavoGermanic(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:92","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = isSlavoGermanic(value)"},"status":-1},{"failures":[],"tindex":"7ce10426-16e2-11e6-b262-678600b1d8a2","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (bytes.length) ; i++) {\n    final byte b = bytes[i];\n    if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n        tmp[i] = b;\n    } else {\n        tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n    }\n}","position":"org.apache.commons.codec.net.QCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final byte byte = bytes[i];\n    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        tmp[i] = b;\n    } else {\n        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    }\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.BLANK":"org.apache.commons.codec.net.QuotedPrintableCodec.CR","bytes":"bytes","tmp":"bytes","length":"i","org.apache.commons.codec.net.QCodec.UNDERSCORE":"org.apache.commons.codec.net.QuotedPrintableCodec.CR"},"type":"adrStmt","transplantationPoint":{"toString":"if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) {\n    continue;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:362","type":"CtIfImpl","sourcecode":"if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    continue;\n} "},"status":-3},{"failures":[87,88],"tindex":"7ce12b37-16e2-11e6-b262-fd81103b7e73","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"cq\", \"2q\")","position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l3\", \"L3\")","position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"status":-1},{"failures":[],"tindex":"7ce12b38-16e2-11e6-b262-b17e7ede022a","series":0,"name":"replace","transplant":{"toString":"this.charset = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET","position":"org.apache.commons.codec.binary.Hex:190","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.java.nio.charset.Charset"},"variableMap":{"charset":"charset","org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"this.charset = charset","position":"org.apache.commons.codec.net.QuotedPrintableCodec:149","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-3},{"failures":[89,90],"tindex":"7ce12b39-16e2-11e6-b262-7565f301611e","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:475","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"variableMap":{"valueToDigest":"key","key":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:388","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"status":-1},{"failures":[],"tindex":"7ce1524a-16e2-11e6-b262-77836e1c51ac","series":0,"name":"replace","transplant":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 2))) == 'I') {\n    result.append('J');\n} else {\n    result.append('K');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:471","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 2))) == 'I') {\n    result.append('J');\n} else {\n    result.append('K');\n}"},"status":-2},{"failures":[91,92,93,94,95,96,97],"tindex":"7ce1524b-16e2-11e6-b262-8d85a89d6918","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"7ce1524c-16e2-11e6-b262-7188352da7ff","series":0,"name":"replace","transplant":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"offset","encodeSize":"value"},"type":"adrStmt","transplantationPoint":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24","position":"org.apache.commons.codec.digest.UnixCrypt:388","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24"},"status":-3},{"failures":[],"tindex":"7ce1524d-16e2-11e6-b262-a3c23e1ea4e5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.BCodec.this.decodeText(value)","position":"org.apache.commons.codec.net.BCodec:181","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.BCodec.this.decodeText(value)"},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return encodeText(str, charset)","position":"org.apache.commons.codec.net.QCodec:211","type":"CtReturnImpl","sourcecode":"return encodeText(str, charset)"},"status":-2},{"failures":[],"tindex":"7ce1795e-16e2-11e6-b262-05906967e763","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:561","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}"},"variableMap":{"input":"input","bContent":"this","this":"this","shouldMatch":"startsWith"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} "},"status":-2},{"failures":[98,99,100],"tindex":"7ce1a06f-16e2-11e6-b262-d78bfe19b5b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:471","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer)"},"status":-1},{"failures":[50],"tindex":"7ce1a070-16e2-11e6-b262-8339a3fdad24","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")","position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"status":-1},{"failures":[],"tindex":"7ce1a071-16e2-11e6-b262-b1ccb7b9a4f3","series":0,"name":"replace","transplant":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:487","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)"},"status":-2},{"failures":[],"tindex":"7ce1c782-16e2-11e6-b262-6b25a7b4f391","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone2:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[101,98,99,100,102,103,104,105],"tindex":"7ce1c783-16e2-11e6-b262-8759ffa26972","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"altResult = ctx.digest()","position":"org.apache.commons.codec.digest.Sha2Crypt:405","type":"CtAssignmentImpl","sourcecode":"altResult = ctx.digest()"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":35,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
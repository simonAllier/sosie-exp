{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":10,"org.apache.commons.codec.binary.HexTest.testCustomCharset":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":7,"org.apache.commons.codec.language.NysiisTest.testSnat":123,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":12,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":26,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":79,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":65,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":158,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":137,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":135,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":136,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":49,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull":161,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":111,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":138,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":53,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":32,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":41,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":39,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":156,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":16,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":148,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":150,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":149,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":51,"org.apache.commons.codec.language.NysiisTest.testCap":112,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":43,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":84,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":17,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":145,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":83,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":146,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":31,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":37,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":35,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":104,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":90,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":91,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":36,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":72,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":87,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":108,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":11,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":155,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":30,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":40,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":139,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":62,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":86,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":159,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":63,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":129,"org.apache.commons.codec.language.SoundexTest.testB650":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":15,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":25,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":103,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":151,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":80,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":107,"org.apache.commons.codec.language.SoundexTest.testNewInstance":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":19,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":92,"org.apache.commons.codec.language.NysiisTest.testTranan":127,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":58,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":59,"org.apache.commons.codec.language.NysiisTest.testFal":115,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":0,"org.apache.commons.codec.language.NysiisTest.testSnad":122,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":64,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":3,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":131,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":132,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":157,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":133,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":46,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":68,"org.apache.commons.codec.language.NysiisTest.testDropBy":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":28,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":78,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":57,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":34,"org.apache.commons.codec.binary.Base64Test.testUUID":67,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":105,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":76,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":94,"org.apache.commons.codec.language.NysiisTest.testRule2":117,"org.apache.commons.codec.language.NysiisTest.testRule1":116,"org.apache.commons.codec.language.NysiisTest.testRule7":120,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":95,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":99,"org.apache.commons.codec.language.NysiisTest.testRule6":119,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":77,"org.apache.commons.codec.language.NysiisTest.testRule5":118,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":44,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":75,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":143,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":66,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":61,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":70,"org.apache.commons.codec.language.NysiisTest.testBran":121,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":128,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":153,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":100,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":109,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":140,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":55,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":152,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":2,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":101,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":38,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":73,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":97,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":24,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":144,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":130,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":47,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":160,"org.apache.commons.codec.language.NysiisTest.testDad":113,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":85,"org.apache.commons.codec.language.NysiisTest.testOthers":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":27,"org.apache.commons.codec.language.SoundexTest.testDifference":141,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":110,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":81,"org.apache.commons.codec.language.NysiisTest.testDan":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":96,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":74,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":45,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":33,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":18,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":29},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"fdda4651-17c7-11e6-a3e3-316ab9bae478","series":0,"name":"add","transplant":{"toString":"name1Char[(name1Size - i)] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"name1Char[(name1Size - i)] = ' '"},"variableMap":{"name1Char":"name2Char","name1Size":"i","i":"name2Size"},"type":"adrStmt","transplantationPoint":{"toString":"name2Char[(name2Size - i)] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:327","type":"CtAssignmentImpl","sourcecode":"name2Char[(name2Size - i)] = ' '"},"status":-1},{"failures":[],"tindex":"fdda6d62-17c7-11e6-a3e3-b787b73572d7","series":0,"name":"replace","transplant":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", rcon='\").append(rCon).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:467","type":"CtInvocationImpl","sourcecode":"sb.append(\", rcon='\").append(rCon).append('\\'')"},"status":0},{"failures":[],"tindex":"fdda6d63-17c7-11e6-a3e3-35283fdb75c7","series":0,"name":"replace","transplant":{"toString":"if (!(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found)) {\n    patternLength = 1;\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:222","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean)) {\n    patternLength = 1;\n} "},"variableMap":{"found":"eof","patternLength":"inAvail"},"type":"adrStmt","transplantationPoint":{"toString":"if (inAvail < 0) {\n    context.eof = true;\n} ","position":"org.apache.commons.codec.binary.Base32:342","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"fdda9474-17c7-11e6-a3e3-19f14e74b59b","series":0,"name":"replace","transplant":{"toString":"return doubleMetaphone(value, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:450","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"status":-2},{"failures":[24,25,26,27,28],"tindex":"fdda9475-17c7-11e6-a3e3-edc3baf9cd56","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (atStart) {\n    return replacementAtStart;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:181","type":"CtIfImpl","sourcecode":"if (atStart) {\n    return java.lang.String[];\n} "},"status":-1},{"failures":[29,30,31,32],"tindex":"fdda9476-17c7-11e6-a3e3-d3284e260947","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.digest.UnixCrypt.SHIFT2[i]) {\n    c = (c >>> 2) | (c << 26);\n    d = (d >>> 2) | (d << 26);\n} else {\n    c = (c >>> 1) | (c << 27);\n    d = (d >>> 1) | (d << 27);\n}","position":"org.apache.commons.codec.digest.UnixCrypt:361","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n    c = (c >>> 2) | (c << 26);\n    d = (d >>> 2) | (d << 26);\n} else {\n    c = (c >>> 1) | (c << 27);\n    d = (d >>> 1) | (d << 27);\n}"},"variableMap":{"c":"j","d":"d","i":"c","org.apache.commons.codec.digest.UnixCrypt.SHIFT2":"org.apache.commons.codec.digest.UnixCrypt.SHIFT2"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < 16 ; i++) {\n    if (org.apache.commons.codec.digest.UnixCrypt.SHIFT2[i]) {\n        c = (c >>> 2) | (c << 26);\n        d = (d >>> 2) | (d << 26);\n    } else {\n        c = (c >>> 1) | (c << 27);\n        d = (d >>> 1) | (d << 27);\n    }\n    c &= 268435455;\n    d &= 268435455;\n    int s = (((org.apache.commons.codec.digest.UnixCrypt.SKB[0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SKB[1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n    final int t = (((org.apache.commons.codec.digest.UnixCrypt.SKB[4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SKB[5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n    schedule[(j++)] = (t << 16) | (s & 65535);\n    s = (s >>> 16) | (t & -65536);\n    s = (s << 4) | (s >>> 28);\n    schedule[(j++)] = s;\n}","position":"org.apache.commons.codec.digest.UnixCrypt:360","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < 16 ; i++) {\n    if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n        c = (c >>> 2) | (c << 26);\n        d = (d >>> 2) | (d << 26);\n    } else {\n        c = (c >>> 1) | (c << 27);\n        d = (d >>> 1) | (d << 27);\n    }\n    c &= 268435455;\n    d &= 268435455;\n    int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n    final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n    schedule[(j++)] = (t << 16) | (s & 65535);\n    s = (s >>> 16) | (t & -65536);\n    s = (s << 4) | (s >>> 28);\n    schedule[(j++)] = s;\n}"},"status":-1},{"failures":[33,34],"tindex":"fddabb87-17c7-11e6-a3e3-51585983776c","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n    result.append('X');\n    index += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.append('T');\n    } else {\n        result.append('0', 'T');\n    }\n    index += 2;\n} else {\n    result.append('T');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:677","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n    result.append('X');\n    index += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.append('T');\n    } else {\n        result.append('0', 'T');\n    }\n    index += 2;\n} else {\n    result.append('T');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}"},"status":-1},{"failures":[],"tindex":"fddae298-17c7-11e6-a3e3-e52e6173b8a4","series":0,"name":"replace","transplant":{"toString":"final int[] schedule = new int[32]","position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int[] out = new int[2]","position":"org.apache.commons.codec.digest.UnixCrypt:314","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"status":-2},{"failures":[],"tindex":"fddb09a9-17c7-11e6-a3e3-9f7bc93c1e46","series":0,"name":"add","transplant":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:148","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_N","position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[35],"tindex":"fddb09aa-17c7-11e6-a3e3-c1dd16337ade","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)","position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)"},"variableMap":{"keyBytes":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))","position":"org.apache.commons.codec.digest.DigestUtils:500","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"status":-1},{"failures":[36,37,38],"tindex":"fddb09ab-17c7-11e6-a3e3-29365a3c4c34","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:641","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:207","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest)"},"status":-1},{"failures":[],"tindex":"fddb09ac-17c7-11e6-a3e3-b385bfa1fe62","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))","position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[],"tindex":"fddb09ad-17c7-11e6-a3e3-771194021421","series":0,"name":"add","transplant":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"accentedWord"},"type":"adrStmt","transplantationPoint":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"status":-2},{"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51],"tindex":"fddb30be-17c7-11e6-a3e3-b9cbe914fec2","series":0,"name":"replace","transplant":{"toString":"for (java.lang.String lang : sl.languages) {\n    ls.add(lang);\n}","position":"org.apache.commons.codec.language.bm.Languages:141","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n    ls.add(lang);\n}"},"variableMap":{"languages":"languages","ls":"languages","sl":"sl"},"type":"adrStmt","transplantationPoint":{"toString":"for (java.lang.String lang : languages) {\n    if (sl.languages.contains(lang)) {\n        ls.add(lang);\n    } \n}","position":"org.apache.commons.codec.language.bm.Languages:123","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n    if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n        ls.add(lang);\n    } \n}"},"status":-1},{"failures":[],"tindex":"fddb30bf-17c7-11e6-a3e3-f96e5dc7041c","series":0,"name":"add","transplant":{"toString":"c &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"status":-2},{"failures":[],"tindex":"fddc1b20-17c7-11e6-a3e3-0786dd4ac9af","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)","position":"org.apache.commons.codec.digest.UnixCrypt:302","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)"},"variableMap":{"left":"length","right":"length","results":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (l_ascii.length) - 1 ; ii < (raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:248","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}"},"status":-2},{"failures":[29,32],"tindex":"fddc4231-17c7-11e6-a3e3-bb858ddac7ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:348","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)"},"status":-1},{"failures":[],"tindex":"fddc4232-17c7-11e6-a3e3-81ecd5810c8e","series":0,"name":"replace","transplant":{"toString":"if ((charAt(value, (index + 1))) == 'M') {\n    return true;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:844","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'M') {\n    return true;\n} "},"variableMap":{"index":"i","value":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if ((input.charAt(i)) != (prefix.charAt(i))) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:605","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (prefix.charAt(i))) {\n    return false;\n} "},"status":-2},{"failures":[],"tindex":"fddc4233-17c7-11e6-a3e3-c392fccee95c","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-2},{"failures":[52,53,0,1,2,54,3,4,55,5,6,56,7,8,57,9,10,11,12,13,14,58,15,59,16,17,18,60,19,61,20,62,21,63,22,64,65,23],"tindex":"fddc4234-17c7-11e6-a3e3-0f5ddb4cca8d","series":0,"name":"replace","transplant":{"toString":"final int lengthToMatch = java.lang.Math.min(es1.length(), es2.length())","position":"org.apache.commons.codec.language.SoundexUtils:114","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(es1.length(), es2.length())"},"variableMap":{"es1":"name1","es2":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"final int name1Size = (name1.length()) - 1","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:298","type":"CtLocalVariableImpl","sourcecode":"final int int = (name1.length()) - 1"},"status":-1},{"failures":[],"tindex":"fddc6945-17c7-11e6-a3e3-012f7294fb65","series":0,"name":"replace","transplant":{"toString":"return digit","position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return digit"},"variableMap":{"digit":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:325","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[66,67,68,69,70,71,72],"tindex":"fddc6946-17c7-11e6-a3e3-db7080a8ac6e","series":0,"name":"add","transplant":{"toString":"b = '+'","position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"b = '+'"},"variableMap":{"b":"j"},"type":"adrStmt","transplantationPoint":{"toString":"j++","position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"status":-1},{"failures":[],"tindex":"fddc6947-17c7-11e6-a3e3-83d402eaf376","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:90","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"fddc6948-17c7-11e6-a3e3-3d22e12efc98","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n))","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:193","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n))"},"status":-2},{"failures":[73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"tindex":"fddc6949-17c7-11e6-a3e3-ebc22fdd9750","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.US_ASCII)","position":"org.apache.commons.codec.binary.StringUtils:163","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[99],"tindex":"fddc905a-17c7-11e6-a3e3-77c115a82790","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"b\", \"p\")","position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"status":-1},{"failures":[],"tindex":"fddc905b-17c7-11e6-a3e3-e5b845bf8c9b","series":0,"name":"replace","transplant":{"toString":"while (r == 0) {\n    r = read(singleByte, 0, 1);\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:98","type":"CtWhileImpl","sourcecode":"while (r == 0) {\n    r = read(byte[], 0, 1);\n}"},"variableMap":{"r":"pos","singleByte":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:393","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":-3},{"failures":[],"tindex":"fddc905c-17c7-11e6-a3e3-81f8779f02b1","series":0,"name":"add","transplant":{"toString":"d = (d >>> 1) | (d << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:524","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"fddc905d-17c7-11e6-a3e3-5f017ee7581a","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"status":-2},{"failures":[],"tindex":"fddc905e-17c7-11e6-a3e3-bd4a634f27d3","series":0,"name":"add","transplant":{"toString":"t = (t >>> 4) | (t << 28)","position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:718","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"fddc905f-17c7-11e6-a3e3-8b3423d754a2","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i = i","position":"org.apache.commons.codec.language.bm.PhoneticEngine:187","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int = i"},"variableMap":{"i":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:707","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"fddda1d0-17c7-11e6-a3e3-f389e0a916fb","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((newPhonemes.size()) >= maxPhonemes) {\n    break EXPR;\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:116","type":"CtIfImpl","sourcecode":"if ((newPhonemes.size()) >= maxPhonemes) {\n    break EXPR;\n} "},"status":-2},{"failures":[],"tindex":"fddda1d1-17c7-11e6-a3e3-dddec3723088","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder()","position":"org.apache.commons.codec.net.RFC1522Codec:72","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[100,101,102,103,104,105,106],"tindex":"fddda1d2-17c7-11e6-a3e3-5d02d98bc4fc","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(finalb, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:275","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"fddda1d3-17c7-11e6-a3e3-e37d17fd822f","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('!')","position":"org.apache.commons.codec.net.QCodec:66","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('!')"},"status":-2},{"failures":[],"tindex":"fddda1d4-17c7-11e6-a3e3-cfe1d0543c8b","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = encodeTable[((context.ibitWorkArea) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))]","position":"org.apache.commons.codec.binary.Base64:390","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"pos","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"pos","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = pad","position":"org.apache.commons.codec.binary.Base64:354","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-3},{"failures":[],"tindex":"fdddc8e5-17c7-11e6-a3e3-13faf359acf4","series":0,"name":"add","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"cachedString","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"if ((cachedString) == null) {\n    cachedString = builder.toString();\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:152","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null) {\n    java.lang.String = java.lang.StringBuilder.toString();\n} "},"status":-2},{"failures":[93,95,107,108,109],"tindex":"fdddc8e6-17c7-11e6-a3e3-5d375e8ad1ec","series":0,"name":"replace","transplant":{"toString":"j++","position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"variableMap":{"j":"b"},"type":"adrStmt","transplantationPoint":{"toString":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:290","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer)"},"status":-1},{"failures":[],"tindex":"fdddc8e7-17c7-11e6-a3e3-573baf75931f","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e)","position":"org.apache.commons.codec.language.bm.Rule:225","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e)"},"status":-2},{"failures":[],"tindex":"fdddc8e8-17c7-11e6-a3e3-d9c1c2613a27","series":0,"name":"replace","transplant":{"toString":"index = index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"index = index + 2"},"variableMap":{"index":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b = 256 + b","position":"org.apache.commons.codec.net.QuotedPrintableCodec:204","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"status":0},{"failures":[110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155],"tindex":"fdddc8e9-17c7-11e6-a3e3-d5c5d252faa3","series":0,"name":"replace","transplant":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"i","l_ascii":"chars","bits":"i"},"type":"adrStmt","transplantationPoint":{"toString":"chars[(count++)] = str.charAt(i)","position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[156],"tindex":"fdddc8ea-17c7-11e6-a3e3-87a0d80d44b4","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:353","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[157],"tindex":"fdddeffb-17c7-11e6-a3e3-fd6a20ebe172","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"fdddeffc-17c7-11e6-a3e3-9b69b8d3b153","series":0,"name":"add","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int right = 0","position":"org.apache.commons.codec.digest.UnixCrypt:283","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"fdddeffd-17c7-11e6-a3e3-2fe49f7fea4b","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"o2"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.lang.Comparable<java.lang.Comparable<?>> s1 = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.stringEncoder.encode(o1)));\n    final java.lang.Comparable<?> s2 = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.stringEncoder.encode(o2)));\n    compareCode = s1.compareTo(s2);\n} catch (final org.apache.commons.codec.EncoderException ee) {\n    compareCode = 0;\n}","position":"org.apache.commons.codec.StringEncoderComparator:79","type":"CtTryImpl","sourcecode":"try {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.lang.Comparable<java.lang.Comparable<?>> java.lang.Comparable<java.lang.Comparable<?>> = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o1)));\n    final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o2)));\n    compareCode = s1.compareTo(s2);\n} catch (final org.apache.commons.codec.EncoderException ee) {\n    compareCode = 0;\n}"},"status":-2},{"failures":[],"tindex":"fdddeffe-17c7-11e6-a3e3-9d0493213ff1","series":0,"name":"replace","transplant":{"toString":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:471","type":"CtReturnImpl","sourcecode":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"variableMap":{"str":"org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX","charset":"org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)","position":"org.apache.commons.codec.digest.Md5Crypt:161","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)"},"status":-2},{"failures":[158,159,160],"tindex":"fdde170f-17c7-11e6-a3e3-d35d23a9624b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:461","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:486","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer)"},"status":-1},{"failures":[],"tindex":"fdde1710-17c7-11e6-a3e3-3f4b618557d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"nextChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:344","type":"CtAssignmentImpl","sourcecode":"nextChar = '-'"},"status":-2},{"failures":[161],"tindex":"fdde1711-17c7-11e6-a3e3-f7fefd6b175f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":49,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":4,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":37,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":92,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":117,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":156,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":195,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":115,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":242,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":76,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":130,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":171,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":180,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":72,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":202,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":221,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":38,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":101,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":201,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":214,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":162,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":247,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":246,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":56,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":57,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":60,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":31,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":245,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":95,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":58,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":86,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":30,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":59,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":170,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":127,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":216,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":249,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":97,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":7,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":99,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":213,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":96,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":252,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":209,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":174,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":241,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":85,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":118,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":235,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":93,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":208,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":158,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":231,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":160,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":178,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":163,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":151,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":143,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":88,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":123,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":215,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":94,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":149,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":211,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":230,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":250,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":91,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":152,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":23,"org.apache.commons.codec.binary.Base64Test.testUUID":54,"org.apache.commons.codec.binary.Base64Test.testSingletons":65,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":89,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":74,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":140,"org.apache.commons.codec.binary.Base64Test.testPairs":53,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":73,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":103,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":90,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":179,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":134,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":84,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":220,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":139,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":157,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":229,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":50,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":32,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":248,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":11,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":26,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":63,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":196,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":36,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":64,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":146,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":165,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":169,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":35,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":132,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":204,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":150,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":136,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":126,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":116,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":176,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":83,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":45,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":194,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":191,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":82,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":148,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":166,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":17,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":48,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":144,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":232,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":10,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":240,"org.apache.commons.codec.binary.HexTest.testCustomCharset":197,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":203,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":237,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":77,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":236,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":120,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":9,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":226,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":188,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":225,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":193,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":205,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":2,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":46,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":153,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":16,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":111,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":109,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":112,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":164,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":1,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":61,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":133,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":18,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":0,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":121,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":227,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":239,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":222,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":219,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":181,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":8,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":12,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":22,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":128,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":243,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":98,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":100,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":124,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":251,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":62,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":199,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":19,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":33,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":47,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":105,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":110,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":27,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":78,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":192,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":43,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":87,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":70,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":186,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":233,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":244,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":155,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":187,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":147,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":28,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":104,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":138,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":183,"org.apache.commons.codec.language.MetaphoneTest.testWhy":168,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":145,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":218,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":161,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":190,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":24,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":80,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":122,"org.apache.commons.codec.language.MetaphoneTest.testTCH":167,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":81,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":154,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":114,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":141,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":173,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":172,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":210,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":238,"org.apache.commons.codec.binary.Base64Test.testBase64":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":224,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":6,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":131,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":44,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":207,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":125,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":198,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":129,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":102,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":68,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":182,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":206,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":135,"org.apache.commons.codec.binary.Base64Test.testCodec112":212,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":113,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":41,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":177,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":51,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":189,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":217,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":184,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":25,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":34,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":137,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":69,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":159,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":234,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":200,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":228,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":21,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":75,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":14,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":66,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":185,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":29,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":223,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":5,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":55},"transformations":[{"failures":[],"tindex":"d294b6ca-3fe9-11e6-9b4b-d3d3018b3b84","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:503","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":0},{"failures":[],"tindex":"d294dddb-3fe9-11e6-9b4b-01cb576a29ce","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"str","org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":-2},{"failures":[0,1],"tindex":"d294dddc-3fe9-11e6-9b4b-51e3c5ec0de4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","ascii":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[],"tindex":"d29504ed-3fe9-11e6-9b4b-f7af35e723d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:438","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-2},{"failures":[2,3,4,5,6],"tindex":"d29504ee-3fe9-11e6-9b4b-25aed95e2e69","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:570","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"status":-1},{"failures":[],"tindex":"d29504ef-3fe9-11e6-9b4b-517695c2aa76","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"variableMap":{"cp":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:371","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2},{"failures":[7,8,9,10,11,12,13,14],"tindex":"d29504f0-3fe9-11e6-9b4b-6338d8096e38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:769","type":"CtWhileImpl","sourcecode":"while (read > (-1)) {\n    mac.update(buffer, 0, read);\n    read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int);\n}"},"status":-1},{"failures":[],"tindex":"d2952c01-3fe9-11e6-9b4b-c71bb61fc086","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"status":0},{"failures":[],"tindex":"d2952c02-3fe9-11e6-9b4b-972e09047360","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:208","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (lineLength > 0) && (chunkSeparatorLength > 0)"},"status":-2},{"failures":[15,16],"tindex":"d2952c03-3fe9-11e6-9b4b-5dcb7eb2f2a1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:300","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-1},{"failures":[],"tindex":"d2952c04-3fe9-11e6-9b4b-2bd2c5493a16","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:120","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.flush()"},"variableMap":{"out":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:85","type":"CtIfImpl","sourcecode":"if (!(source instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n} "},"status":-2},{"failures":[17,18,19,20,21],"tindex":"d2952c05-3fe9-11e6-9b4b-4534ebf3fb44","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:215","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[22,23,24,25,26,27,28],"tindex":"d2952c06-3fe9-11e6-9b4b-df465af3d93f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:260","type":"CtAssignmentImpl","sourcecode":"altResult = ctx.digest()"},"variableMap":{"altResult":"finalb","ctx":"ctx1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:277","type":"CtAssignmentImpl","sourcecode":"finalb = ctx1.digest()"},"status":-1},{"failures":[],"tindex":"d2955317-3fe9-11e6-9b4b-1774dca159f3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:182","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null)"},"status":-2},{"failures":[],"tindex":"d2955318-3fe9-11e6-9b4b-33f155019b43","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:626","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"variableMap":{"data":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:100","type":"CtReturnImpl","sourcecode":"return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":0},{"failures":[5,6],"tindex":"d2955319-3fe9-11e6-9b4b-ad1473fa4bdf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:437","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[],"tindex":"d295531a-3fe9-11e6-9b4b-5b227f4f5a12","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)"},"status":-2},{"failures":[],"tindex":"d295531b-3fe9-11e6-9b4b-1768c44fa64e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:76","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"x\", \"k\")"},"status":0},{"failures":[],"tindex":"d2957a2c-3fe9-11e6-9b4b-4335e036e21c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"status":0},{"failures":[29,30,31,32,33],"tindex":"d2957a2d-3fe9-11e6-9b4b-4bf4e990b67c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(bytes)"},"variableMap":{"bytes":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:194","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes)"},"status":-1},{"failures":[],"tindex":"d2957a2e-3fe9-11e6-9b4b-d1e6909fa9fb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:515","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:364","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"d2957a2f-3fe9-11e6-9b4b-532ad1920ee5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"variableMap":{"cp":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:202","type":"CtAssignmentImpl","sourcecode":"len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len)"},"status":-2},{"failures":[],"tindex":"d2957a30-3fe9-11e6-9b4b-e7eae7907424","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:465","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[34,35,36,37,38],"tindex":"d295a141-3fe9-11e6-9b4b-b5a18fe4b2de","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:202","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[],"tindex":"d295a142-3fe9-11e6-9b4b-6d36c0663193","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:250","type":"CtAssignmentImpl","sourcecode":"finalb = ctx.digest()"},"variableMap":{"finalb":"tempResult","ctx":"altCtx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:324","type":"CtAssignmentImpl","sourcecode":"tempResult = altCtx.digest()"},"status":-2},{"failures":[],"tindex":"d295a143-3fe9-11e6-9b4b-af123e2dbe20","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"status":-2},{"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"d295a144-3fe9-11e6-9b4b-9f80f9861499","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[avail]"},"variableMap":{"avail":"decodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:462","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"d295a145-3fe9-11e6-9b4b-0355e92a67cd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:257","type":"CtAssignmentImpl","sourcecode":"ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{"ctx1":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:361","type":"CtAssignmentImpl","sourcecode":"ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-1},{"failures":[],"tindex":"d295c856-3fe9-11e6-9b4b-a98c6feeb693","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:503","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":-2},{"failures":[],"tindex":"d295c857-3fe9-11e6-9b4b-ed5a56800f92","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-2},{"failures":[88],"tindex":"d295c858-3fe9-11e6-9b4b-fbcbe37e4f18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:705","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"status":-1},{"failures":[],"tindex":"d295c859-3fe9-11e6-9b4b-53e372ed3633","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:258","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx1.update(keyBytes);\n} else {\n    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n}"},"status":-2},{"failures":[],"tindex":"d295c85a-3fe9-11e6-9b4b-3d01a883986b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:251","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"status":-2},{"failures":[89,90,91,92,93],"tindex":"d295ef6b-3fe9-11e6-9b4b-594805533efc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:174","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        hasUnderscores = true;\n        break;\n    } \n}"},"status":-1},{"failures":[94,95],"tindex":"d295ef6c-3fe9-11e6-9b4b-7f1ed454e87d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:316","type":"CtAssignmentImpl","sourcecode":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))"},"status":-1},{"failures":[15,96,97,16],"tindex":"d295ef6d-3fe9-11e6-9b4b-c5088c346ac6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"b[8] = 0"},"variableMap":{"b":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:222","type":"CtAssignmentImpl","sourcecode":"key[i] = ((byte)(iChar << 1))"},"status":-1},{"failures":[98,99,100,101,102,103,104,105,106,107,108],"tindex":"d295ef6e-3fe9-11e6-9b4b-99d4fd628b3f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:403","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:578","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str.getBytes(charset)))"},"status":-1},{"failures":[6],"tindex":"d2974eff-3fe9-11e6-9b4b-358f01bb2533","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:530","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"status":-1},{"failures":[],"tindex":"d2974f00-3fe9-11e6-9b4b-c10ac8e12db9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:335","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"status":-2},{"failures":[],"tindex":"d2974f01-3fe9-11e6-9b4b-b727f6cdd773","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"variableMap":{"txt":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"status":-2},{"failures":[],"tindex":"d2974f02-3fe9-11e6-9b4b-fbcca6c4ffd3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"status":-2},{"failures":[],"tindex":"d2974f03-3fe9-11e6-9b4b-bfb820e789a9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:322","type":"CtReturnImpl","sourcecode":"return value < 0 ? value + 256 : value"},"variableMap":{"value":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer)"},"status":-2},{"failures":[],"tindex":"d2974f04-3fe9-11e6-9b4b-6353c2092d28","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:364","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:363","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[109,110,111,112,113,114,115,116],"tindex":"d2974f05-3fe9-11e6-9b4b-6f5032ecb5fe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:478","type":"CtInvocationImpl","sourcecode":"rules.add(r)"},"status":-1},{"failures":[7,8,117,9,10,11,12,118,119,14,120,121,122,123,124,125,126,127,128,129,88,130,131,42,43,44,132,45,133,46,134,47,135,136,48,49,50,137,138,139,51,54,66,140,67,141,68,69,142,143,70,71,144,145,146,147,148,149,150,151,152,153],"tindex":"d2974f06-3fe9-11e6-9b4b-c31a07fb7f59","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"variableMap":{"base64String":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:235","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"d2977617-3fe9-11e6-9b4b-d1684fb054a2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.Charsets:74","type":"CtReturnImpl","sourcecode":"return charset == null ? java.nio.charset.Charset.defaultCharset() : charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"status":0},{"failures":[],"tindex":"d2977618-3fe9-11e6-9b4b-1ba7c6dbe4f5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:428","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Metaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-2},{"failures":[154],"tindex":"d2977619-3fe9-11e6-9b4b-01084c9120d0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"status":-1},{"failures":[155,94,156,157,158,159,160,161,162,163],"tindex":"d297761a-3fe9-11e6-9b4b-f128fcce6f8c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:231","type":"CtAssignmentImpl","sourcecode":"name1 = removeVowels(name1)"},"status":-1},{"failures":[],"tindex":"d297761b-3fe9-11e6-9b4b-778c2c7d10b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:783","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"d299c00c-3fe9-11e6-9b4b-2fcd358bc9fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:81","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[89,90,91,164,93,39,40,165],"tindex":"d299c00d-3fe9-11e6-9b4b-992ad8a67402","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:74","type":"CtInvocationImpl","sourcecode":"buffer.append(charset)"},"status":-1},{"failures":[],"tindex":"d299c00e-3fe9-11e6-9b4b-2de8bd71038f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:106","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w3\", \"W3\")"},"status":0},{"failures":[],"tindex":"d299c00f-3fe9-11e6-9b4b-c775dc87afe4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:389","type":"CtAssignmentImpl","sourcecode":"replacedName = replacedName.replace(dc, singleLetter)"},"variableMap":{"singleLetter":"str","replacedName":"str","dc":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:262","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-2},{"failures":[109,110,111,112],"tindex":"d299c010-3fe9-11e6-9b4b-e9414d6abf3e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true"},"status":-1},{"failures":[34,166,167,168,169,35,154,170,171,172,173,174,175,176,177,36,178,179,180,181,182,37,183,38,184,185,186,187,188,189],"tindex":"d299c011-3fe9-11e6-9b4b-9f8b7d8d688e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"org.apache.commons.codec.language.Metaphone.FRONTV","leftCharacter":"org.apache.commons.codec.language.Metaphone.VARSON","rightCharacter":"org.apache.commons.codec.language.Metaphone.VARSON","location":"org.apache.commons.codec.language.Metaphone.FRONTV"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:155","type":"CtSwitchImpl","sourcecode":"switch (symb) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (n == 0) {\n            code.append(symb);\n        } \n        break;\n    case 'B' :\n        if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n            break;\n        } \n        code.append(symb);\n        break;\n    case 'C' :\n        if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n            break;\n        } \n        if (regionMatch(local, n, \"CIA\")) {\n            code.append('X');\n            break;\n        } \n        if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n            code.append('S');\n            break;\n        } \n        if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n            code.append('K');\n            break;\n        } \n        if (isNextChar(local, n, 'H')) {\n            if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                code.append('K');\n            } else {\n                code.append('X');\n            }\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n            code.append('J');\n            n += 2;\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'G' :\n        if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n            break;\n        } \n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n            break;\n        } \n        if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n            break;\n        } \n        if (isPreviousChar(local, n, 'G')) {\n            hard = true;\n        } else {\n            hard = false;\n        }\n        if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n            code.append('J');\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'H' :\n        if (isLastChar(wdsz, n)) {\n            break;\n        } \n        if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n            break;\n        } \n        if (isVowel(local, (n + 1))) {\n            code.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        code.append(symb);\n        break;\n    case 'K' :\n        if (n > 0) {\n            if (!(isPreviousChar(local, n, 'C'))) {\n                code.append(symb);\n            } \n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'P' :\n        if (isNextChar(local, n, 'H')) {\n            code.append('F');\n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'Q' :\n        code.append('K');\n        break;\n    case 'S' :\n        if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n            code.append('X');\n        } else {\n            code.append('S');\n        }\n        break;\n    case 'T' :\n        if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n            code.append('X');\n            break;\n        } \n        if (regionMatch(local, n, \"TCH\")) {\n            break;\n        } \n        if (regionMatch(local, n, \"TH\")) {\n            code.append('0');\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'V' :\n        code.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n            code.append(symb);\n        } \n        break;\n    case 'X' :\n        code.append('K');\n        code.append('S');\n        break;\n    case 'Z' :\n        code.append('S');\n        break;\n    default :\n        break;\n}"},"status":-1},{"failures":[],"tindex":"d299e722-3fe9-11e6-9b4b-3b492ba4f5d5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:539","type":"CtIfImpl","sourcecode":"if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n    return false;\n} "},"variableMap":{"arrayOctet":"arrayOctet","i":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:538","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n    if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n        return false;\n    } \n}"},"status":-2},{"failures":[190,30,31,191,192,193,33],"tindex":"d299e723-3fe9-11e6-9b4b-87f3ad6b4c94","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:292","type":"CtTryImpl","sourcecode":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-1},{"failures":[],"tindex":"d299e724-3fe9-11e6-9b4b-177830665dfc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:121","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3$\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":0},{"failures":[],"tindex":"d299e725-3fe9-11e6-9b4b-a9d9244f5db1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:343","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[7,8,194,9,10,11,12,119,13,14,195,121,122,196,124,125,126,127,128,129,88,130,131,137,197,138,139,198,199],"tindex":"d299e726-3fe9-11e6-9b4b-df38958222ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"variableMap":{"length":"l"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"status":-1},{"failures":[],"tindex":"d29a0e37-3fe9-11e6-9b4b-679aa346b26e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:285","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:478","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer)"},"status":-2},{"failures":[],"tindex":"d29a0e38-3fe9-11e6-9b4b-7fb2073ff988","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"code = '8'"},"variableMap":{"code":"chr"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:235","type":"CtAssignmentImpl","sourcecode":"char[][int] = chr"},"status":-2},{"failures":[],"tindex":"d29a0e39-3fe9-11e6-9b4b-8f2f585ababe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"patternKey","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"patternKey"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:474","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n    lines.put(patternKey, rules);\n} "},"status":-2},{"failures":[4,6],"tindex":"d29c311a-3fe9-11e6-9b4b-9fd57d572986","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:836","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"d29c311b-3fe9-11e6-9b4b-37e68c6c2c68","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtIfImpl","sourcecode":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"input","name2":"suffix","name1":"suffix","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtIfImpl","sourcecode":"if ((suffix.length()) > (input.length())) {\n    return false;\n} "},"status":-2},{"failures":[35,36,38,186],"tindex":"d29c311c-3fe9-11e6-9b4b-3f54cc4767e4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:240","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[39,40,165,43,44,46,50,200,201,202,203,204,205,206,207,208,209,53,54,55,56,57,58,59,210,60,61,211,212,65,213,66,140,67,214,141,142,70,145,151,152,153,215,216,217,72,73,74,75,218],"tindex":"d29c311d-3fe9-11e6-9b4b-27d123d9a439","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:431","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"status":-1},{"failures":[],"tindex":"d29c311e-3fe9-11e6-9b4b-5b8e81c62301","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"variableMap":{"name":"name2","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:240","type":"CtAssignmentImpl","sourcecode":"name2 = getFirst3Last3(name2)"},"status":-2},{"failures":[29,190,30,31,32,33],"tindex":"d29c311f-3fe9-11e6-9b4b-6fa87f477d0e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"urlsafe"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:135","type":"CtIfImpl","sourcecode":"if (urlsafe.get(b)) {\n    if (b == ' ') {\n        b = '+';\n    } \n    buffer.write(b);\n} else {\n    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n    buffer.write(hex1);\n    buffer.write(hex2);\n}"},"status":-1},{"failures":[219,220,221],"tindex":"d29c5830-3fe9-11e6-9b4b-bf18d7bdc9a7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:147","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"status":-1},{"failures":[],"tindex":"d29c5831-3fe9-11e6-9b4b-4bff71823cf4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))"},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:392","type":"CtReturnImpl","sourcecode":"return metaphone(((java.lang.String)(obj)))"},"status":-2},{"failures":[109,110,111,112,222,113,223,114,115,116,224,225,226,227,228,229],"tindex":"d29c5832-3fe9-11e6-9b4b-c72f648457a5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtIfImpl","sourcecode":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","rs":"rs","rt":"rt","s":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:221","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"d29c5833-3fe9-11e6-9b4b-6951952250c4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch"},"status":-2},{"failures":[],"tindex":"d29c5834-3fe9-11e6-9b4b-6db337ae0295","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:46","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = source"},"variableMap":{"source":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:305","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[230,2,231,3,4,5,6],"tindex":"d29c5835-3fe9-11e6-9b4b-afc6efac731b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('A');\n} "},"status":-1},{"failures":[],"tindex":"d29c5836-3fe9-11e6-9b4b-9197e69aeb85","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int"},"variableMap":{"i":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[],"tindex":"d29c7f47-3fe9-11e6-9b4b-a124c6d07989","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-2},{"failures":[230,3,4,232,5,233],"tindex":"d29c7f48-3fe9-11e6-9b4b-c770516cc946","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:958","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[],"tindex":"d29c7f49-3fe9-11e6-9b4b-670ee4b29d25","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:569","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[234,235,236,237,238],"tindex":"d29c7f4a-3fe9-11e6-9b4b-d5ffc39c18e8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:545","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"d29c7f4b-3fe9-11e6-9b4b-8b5ac78cea1a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"decodeSize","to":"modulus"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:461","type":"CtIfImpl","sourcecode":"if ((context.boolean) && ((context.int) != 0)) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    switch (context.int) {\n        case 1 :\n            break;\n        case 2 :\n            context.int = (context.int) >> 4;\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            context.int = (context.int) >> 2;\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n} "},"status":-2},{"failures":[],"tindex":"d29c7f4c-3fe9-11e6-9b4b-eb9ccb9f58ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:704","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n    result.append('R');\n    index += 2;\n} else {\n    if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n        if (isVowel(charAt(value, (index + 1)))) {\n            result.append('A', 'F');\n        } else {\n            result.append('A');\n        }\n        index++;\n    } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.appendAlternate('F');\n        index++;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n        result.append(\"TS\", \"FX\");\n        index += 4;\n    } else {\n        index++;\n    }\n}"},"status":-2},{"failures":[],"tindex":"d29c7f4d-3fe9-11e6-9b4b-29129e115828","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:219","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"d29c7f4e-3fe9-11e6-9b4b-dfaf2bcb459f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (next == 'N') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n}"},"variableMap":{"next":"next","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_SSS","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_SSS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:148","type":"CtIfImpl","sourcecode":"if (((curr == 'S') && (next == 'C')) && (aNext == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-2},{"failures":[],"tindex":"d29c7f4f-3fe9-11e6-9b4b-1188cae9b7b3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:379","type":"CtInvocationImpl","sourcecode":"ctx.update(sBytes, 0, saltLen)"},"variableMap":{"sBytes":"altResult","saltLen":"blocksize","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:224","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-2},{"failures":[],"tindex":"d29ca660-3fe9-11e6-9b4b-375f4ce4d24b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return index + 1"},"variableMap":{"index":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:389","type":"CtReturnImpl","sourcecode":"return value"},"status":0},{"failures":[145,239,240,150,241,242,243,151,152,153],"tindex":"d29ca661-3fe9-11e6-9b4b-8b00f2d686b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:356","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-1},{"failures":[4,5,6],"tindex":"d29ca662-3fe9-11e6-9b4b-790085087292","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:681","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[],"tindex":"d29ca663-3fe9-11e6-9b4b-aba9956c3dcf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:77","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[22,23,24,25,244,26,27,28],"tindex":"d29ca664-3fe9-11e6-9b4b-994715a9b05c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:287","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd)"},"status":-1},{"failures":[113,223,114,116,224,226],"tindex":"d29ca665-3fe9-11e6-9b4b-d7f871a63709","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtIfImpl","sourcecode":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} "},"variableMap":{"cs1":"input","cs2":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtIfImpl","sourcecode":"if ((suffix.length()) > (input.length())) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"d29ca666-3fe9-11e6-9b4b-b529015c7de2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:72","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"d29ca667-3fe9-11e6-9b4b-2ffa2eb0e9f8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"pos","len":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:496","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":-2},{"failures":[],"tindex":"d29ca668-3fe9-11e6-9b4b-73fc9de88982","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:284","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[34,166,167,154,170,36,179,180,181,182,37,186,187,188],"tindex":"d29ccd79-3fe9-11e6-9b4b-cd91215855aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:184","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16))"},"variableMap":{"b":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:150","type":"CtLocalVariableImpl","sourcecode":"final char char = local.charAt(n)"},"status":-1},{"failures":[],"tindex":"d29ccd7a-3fe9-11e6-9b4b-3f9900c3867b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:103","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('~')"},"status":0},{"failures":[],"tindex":"d29ccd7b-3fe9-11e6-9b4b-2b36eea6e9fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:176","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Character.digit(ch, 16)"},"status":-2},{"failures":[245,246,247,248,249,250,251,252],"tindex":"d29ccd7c-3fe9-11e6-9b4b-df990706660b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:97","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.char[], 0, mapping.int)"},"variableMap":{"mapping":"org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX","soundexMapping":"org.apache.commons.codec.language.ColognePhonetic.AEIJOUY","length":"rightLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:338","type":"CtWhileImpl","sourcecode":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}"},"status":-1},{"failures":[109,110,111,112,113,116],"tindex":"d29ccd7d-3fe9-11e6-9b4b-677c0b805eab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:540","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.endsWith(input, content)"},"variableMap":{"input":"input","content":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:718","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i))"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
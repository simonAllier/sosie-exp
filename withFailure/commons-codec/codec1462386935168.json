{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":64,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":55,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":70,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":69,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":38,"org.apache.commons.codec.language.NysiisTest.testDropBy":34,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":74,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":42,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":58,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":53,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":39,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":18,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":28,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":41,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":13,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":49,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":21,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":26,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":47,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":50,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":10,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":29,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":7,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":57,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":8,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":59,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":36,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":35,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":0,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":19,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt":22,"org.apache.commons.codec.language.NysiisTest.testBran":33,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":75,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":62,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":32,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":11,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":46,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":2,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":61,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":6,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":54,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":48,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":68,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":66,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":15,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":72,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":9,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":40,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":63,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":65,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":67,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":60,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":52,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":51,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":73,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":37,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":16,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":12},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"fd794828-1226-11e6-9f97-9b3f24da1b7f","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:374","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":-1},{"failures":[],"tindex":"fd796f39-1226-11e6-9f97-ff942dc1e467","series":0,"name":"replace","transplant":{"toString":"tmp[i] = org.apache.commons.codec.net.QCodec.BLANK","position":"org.apache.commons.codec.net.QCodec:187","type":"CtAssignmentImpl","sourcecode":"tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"variableMap":{"org.apache.commons.codec.net.QCodec.BLANK":"org.apache.commons.codec.net.QCodec.UNDERSCORE","tmp":"data","i":"i"},"type":"adrStmt","transplantationPoint":{"toString":"data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE","position":"org.apache.commons.codec.net.QCodec:161","type":"CtAssignmentImpl","sourcecode":"data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":-3},{"failures":[],"tindex":"fd79964a-1226-11e6-9f97-77f4c5759941","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:948","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"patternKey"},"type":"adrStmt","transplantationPoint":{"toString":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    ruleMapping.put(patternKey, rules);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:316","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    ruleMapping.put(patternKey, rules);\n} "},"status":-2},{"failures":[],"tindex":"fd79964b-1226-11e6-9f97-39e03e455d62","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Null key\")","position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"fd79bd5c-1226-11e6-9f97-471bbf6cc999","series":0,"name":"replace","transplant":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inExtendedComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-2},{"failures":[],"tindex":"fd79bd5d-1226-11e6-9f97-15fc06c60d5a","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.GENERIC, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:245","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))"},"variableMap":{"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES","org.apache.commons.codec.language.bm.NameType.GENERIC":"org.apache.commons.codec.language.bm.NameType.ASHKENAZI"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.ASHKENAZI, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:238","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))"},"status":0},{"failures":[],"tindex":"fd79e46e-1226-11e6-9f97-57b1d8769fff","series":0,"name":"replace","transplant":{"toString":"return encode(((java.lang.String)(source)))","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:88","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(source)))"},"variableMap":{"source":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.binary.BaseNCodec:378","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"fd79e46f-1226-11e6-9f97-eb64cce6e74b","series":0,"name":"add","transplant":{"toString":"return el","position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return el"},"variableMap":{"el":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"toString":"return context.eof ? org.apache.commons.codec.binary.BaseNCodec.EOF : 0","position":"org.apache.commons.codec.binary.BaseNCodec:301","type":"CtReturnImpl","sourcecode":"return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0"},"status":-2},{"failures":[11],"tindex":"fd7aa7c0-1226-11e6-9f97-79579aba6538","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))","position":"org.apache.commons.codec.digest.DigestUtils:426","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))","position":"org.apache.commons.codec.digest.DigestUtils:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"status":-1},{"failures":[],"tindex":"fd7af5e1-1226-11e6-9f97-afb33aab15c0","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))","position":"org.apache.commons.codec.digest.UnixCrypt:205","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"status":-2},{"failures":[],"tindex":"fd7b1cf2-1226-11e6-9f97-2f2ec7b3fba1","series":0,"name":"replace","transplant":{"toString":"key[i] = ((byte)(iChar << 1))","position":"org.apache.commons.codec.digest.UnixCrypt:222","type":"CtAssignmentImpl","sourcecode":"key[i] = ((byte)(iChar << 1))"},"variableMap":{"iChar":"ibitWorkArea","i":"pos","key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"fd7b1cf3-1226-11e6-9f97-e7853ca4da2b","series":0,"name":"add","transplant":{"toString":"code = chr","position":"org.apache.commons.codec.language.ColognePhonetic:391","type":"CtAssignmentImpl","sourcecode":"code = chr"},"variableMap":{"code":"ch","chr":"ch"},"type":"adrStmt","transplantationPoint":{"toString":"data[getNextPos()] = ch","position":"org.apache.commons.codec.language.ColognePhonetic:255","type":"CtAssignmentImpl","sourcecode":"char[][getNextPos()] = ch"},"status":-2},{"failures":[],"tindex":"fd7b4404-1226-11e6-9f97-5df8656b1e0f","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (key.length) ; i++) {\n    key[i] = 0;\n}","position":"org.apache.commons.codec.digest.UnixCrypt:216","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (key.int) ; i++) {\n    key[i] = 0;\n}"},"variableMap":{"length":"org.apache.commons.codec.binary.BaseNCodec.EOF","key":"singleByte"},"type":"adrStmt","transplantationPoint":{"toString":"baseNCodec.decode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:147","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[12,13],"tindex":"fd7b4405-1226-11e6-9f97-31121dd790d5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"left = (t >>> 1) | (t << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"status":-1},{"failures":[14,15,16,17,18],"tindex":"fd7b4406-1226-11e6-9f97-f1905eee71e0","series":0,"name":"replace","transplant":{"toString":"final byte[] resizedBytes = new byte[bitlen / 8]","position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[bitlen / 8]"},"variableMap":{"bitlen":"decodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(decodeSize, context)","position":"org.apache.commons.codec.binary.Base32:352","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[19,20,21,22,23,24],"tindex":"fd7b6b17-1226-11e6-9f97-51a70637a62c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))","position":"org.apache.commons.codec.digest.DigestUtils:249","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"variableMap":{"data":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)","position":"org.apache.commons.codec.digest.Md5Crypt:161","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)"},"status":-1},{"failures":[],"tindex":"fd7b6b18-1226-11e6-9f97-25d233c2f201","series":0,"name":"add","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (input.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication rulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , maxPhonemes).invoke();\n    i = rulesApplication.getI();\n    phonemeBuilder = rulesApplication.getPhonemeBuilder();\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:469","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (input.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n    i = rulesApplication.getI();\n    phonemeBuilder = rulesApplication.getPhonemeBuilder();\n}"},"status":0},{"failures":[],"tindex":"fd7b9229-1226-11e6-9f97-ef393618eb7b","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:181","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} "},"status":-2},{"failures":[],"tindex":"fd7b922a-1226-11e6-9f97-47a42e042fd4","series":0,"name":"add","transplant":{"toString":"if ((curr == 'P') && (next == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_FF;\n} ","position":"org.apache.commons.codec.language.Nysiis:153","type":"CtIfImpl","sourcecode":"if ((curr == 'P') && (next == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_FF":"org.apache.commons.codec.language.Nysiis.CHARS_G","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_G;\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_S;\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_N;\n} ","position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":0},{"failures":[],"tindex":"fd7bb93b-1226-11e6-9f97-879f7968ffb7","series":0,"name":"add","transplant":{"toString":"d = (d >>> 2) | (d << 26)","position":"org.apache.commons.codec.digest.UnixCrypt:363","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 2) | (d << 26)"},"variableMap":{"d":"cnt"},"type":"adrStmt","transplantationPoint":{"toString":"cnt >>= 1","position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"status":-2},{"failures":[25,26],"tindex":"fd7be04c-1226-11e6-9f97-c332a3959fd5","series":0,"name":"add","transplant":{"toString":"startSrc = 1","position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"startSrc = 1"},"variableMap":{"startSrc":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:389","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[27,28,29],"tindex":"fd7be04d-1226-11e6-9f97-7984bbb85621","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(' ')","position":"org.apache.commons.codec.net.QCodec:65","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(' ')"},"status":-1},{"failures":[],"tindex":"fd7be04e-1226-11e6-9f97-69602c633c4c","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder = phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:185","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = phonemeBuilder"},"variableMap":{"phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"phonemeBuilder = rulesApplication.getPhonemeBuilder()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:473","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = rulesApplication.getPhonemeBuilder()"},"status":-2},{"failures":[25,26],"tindex":"fd7d66ef-1226-11e6-9f97-6d872bf79532","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:446","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[30],"tindex":"fd7d8e00-1226-11e6-9f97-e3cf6469e4ff","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:186","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-1},{"failures":[],"tindex":"fd7d8e01-1226-11e6-9f97-7fd2ebca52dd","series":0,"name":"replace","transplant":{"toString":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} "},"variableMap":{"sb":"key"},"type":"adrStmt","transplantationPoint":{"toString":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} ","position":"org.apache.commons.codec.language.Nysiis:296","type":"CtIfImpl","sourcecode":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} "},"status":-2},{"failures":[31,32],"tindex":"fd7d8e02-1226-11e6-9f97-05475e20d03b","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:281","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))"},"status":-1},{"failures":[],"tindex":"fd7d8e03-1226-11e6-9f97-6308a26972fc","series":0,"name":"replace","transplant":{"toString":"name1 = removeDoubleConsonants(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"variableMap":{"name1":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")","position":"org.apache.commons.codec.language.Caverphone1:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"status":-2},{"failures":[33,34],"tindex":"fd7db514-1226-11e6-9f97-2babde3e1695","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"variableMap":{"next":"prev","prev":"curr","curr":"prev"},"type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"status":-1},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"tindex":"fd7db515-1226-11e6-9f97-af6be7b544f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"try {\n    boolean inExtendedComment = false;\n    while (lsScanner.hasNextLine()) {\n        final java.lang.String line = lsScanner.nextLine().trim();\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n                inExtendedComment = true;\n            } else if ((line.length()) > 0) {\n                ls.add(line);\n            } \n        }\n    }\n} finally {\n    lsScanner.close();\n}","position":"org.apache.commons.codec.language.bm.Languages:179","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (lsScanner.hasNextLine()) {\n        final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = true;\n            } else if ((line.length()) > 0) {\n                ls.add(line);\n            } \n        }\n    }\n} finally {\n    lsScanner.close();\n}"},"status":-1},{"failures":[],"tindex":"fd7db516-1226-11e6-9f97-1124cb88e466","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:317","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"fd7db517-1226-11e6-9f97-fd2918216ed3","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"sh\", \"s2\")","position":"org.apache.commons.codec.language.Caverphone2:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"status":0},{"failures":[51,52],"tindex":"fd7ddc28-1226-11e6-9f97-0b4a011eb6d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.RADIX)) + \"): \") + b));\n} ","position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"status":-1},{"failures":[],"tindex":"fd7ddc29-1226-11e6-9f97-e7501214e24e","series":0,"name":"add","transplant":{"toString":"t = (t >>> 4) | (t << 28)","position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:490","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"fd7ddc2a-1226-11e6-9f97-cff88434dafa","series":0,"name":"replace","transplant":{"toString":"c = (c >>> 2) | (c << 26)","position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 2) | (c << 26)"},"variableMap":{"c":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:391","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[25,26,53,54,55],"tindex":"fd7ddc2b-1226-11e6-9f97-112684167bac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:303","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"fd7ddc2c-1226-11e6-9f97-9bee4f60d418","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ry\", \"Ry\")","position":"org.apache.commons.codec.language.Caverphone1:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ry\", \"Ry\")"},"variableMap":{"txt":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"name2 = removeVowels(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:232","type":"CtAssignmentImpl","sourcecode":"name2 = removeVowels(name2)"},"status":-2},{"failures":[],"tindex":"fd7e033d-1226-11e6-9f97-b5a5829c784c","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")","position":"org.apache.commons.codec.binary.BaseNCodec:382","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:90","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[56,57],"tindex":"fd7e033e-1226-11e6-9f97-557815672428","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)","position":"org.apache.commons.codec.binary.Base64:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)"},"variableMap":{"binaryData":"l_ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-1},{"failures":[],"tindex":"fd7e033f-1226-11e6-9f97-f950e79ab694","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"this"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.util.Map.Entry<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>> rule : org.apache.commons.codec.language.DaitchMokotoffSoundex.RULES.entrySet()) {\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> ruleList = rule.getValue();\n    java.util.Collections.sort(ruleList, new java.util.Comparator<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>() {\n        @java.lang.Override\n        public int compare(final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule1, final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule2) {\n            return (rule2.getPatternLength()) - (rule1.getPatternLength());\n        }\n    });\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:239","type":"CtForEachImpl","sourcecode":"for (final java.util.Map.Entry<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>> java.util.Map.Entry<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>> : org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.entrySet()) {\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = rule.getValue();\n    java.util.Collections.sort(ruleList, new java.util.Comparator<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>() {\n        @java.lang.Override\n        public int compare(final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule1, final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule2) {\n            return (rule2.getPatternLength()) - (rule1.getPatternLength());\n        }\n    });\n}"},"status":-2},{"failures":[58],"tindex":"fd7e2a50-1226-11e6-9f97-b16835b69ecd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.pos += lineSeparator.length","position":"org.apache.commons.codec.binary.Base32:520","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-1},{"failures":[],"tindex":"fd7e2a51-1226-11e6-9f97-dd645c7fccde","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))","position":"org.apache.commons.codec.language.AbstractCaverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))"},"variableMap":{"str1":"value","str2":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"status":-2},{"failures":[],"tindex":"fd7e2a52-1226-11e6-9f97-655837dc8f75","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")","position":"org.apache.commons.codec.binary.BaseNCodec:382","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"fd7e5163-1226-11e6-9f97-4b97364b123a","series":0,"name":"add","transplant":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char last","position":"org.apache.commons.codec.language.RefinedSoundex:187","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[59,60,61,62],"tindex":"fd7e5164-1226-11e6-9f97-f9b84c8ccf23","series":0,"name":"replace","transplant":{"toString":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}","position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"variableMap":{"byteToCheck":"org.apache.commons.codec.net.QuotedPrintableCodec.TAB"},"type":"adrStmt","transplantationPoint":{"toString":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.SPACE)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.TAB))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:238","type":"CtReturnImpl","sourcecode":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))"},"status":-1},{"failures":[],"tindex":"fd7e5165-1226-11e6-9f97-b5c58c342b9a","series":0,"name":"add","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int index = 0","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:553","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"fd7e5166-1226-11e6-9f97-8d39553be906","series":0,"name":"replace","transplant":{"toString":"last = current","position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"variableMap":{"current":"code","last":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '4'","position":"org.apache.commons.codec.language.ColognePhonetic:361","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-2},{"failures":[],"tindex":"fd7e5167-1226-11e6-9f97-83d60e1461ee","series":0,"name":"replace","transplant":{"toString":"return java.security.MessageDigest.getInstance(algorithm)","position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"variableMap":{"algorithm":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_1"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_1)","position":"org.apache.commons.codec.digest.DigestUtils:112","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"fd7e7878-1226-11e6-9f97-192882d81033","series":0,"name":"replace","transplant":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.UTF_8), salt)","position":"org.apache.commons.codec.digest.Crypt:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt)"},"status":-2},{"failures":[],"tindex":"fd7e7879-1226-11e6-9f97-5ff55638cfa3","series":0,"name":"replace","transplant":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"variableMap":{"singleByte":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"status":-3},{"failures":[],"tindex":"fd7e787a-1226-11e6-9f97-4db22867cd01","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}","position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"fd7e787b-1226-11e6-9f97-ffda452f0cc1","series":0,"name":"add","transplant":{"toString":"name = getFirst3Last3(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"name = getFirst3Last3(name)"},"variableMap":{"name":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[63,64],"tindex":"fd7e9f8c-1226-11e6-9f97-7f9e9ee51706","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"f+\", \"F\")","position":"org.apache.commons.codec.language.Caverphone1:96","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"r\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:108","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r\", \"2\")"},"status":-1},{"failures":[],"tindex":"fd7e9f8d-1226-11e6-9f97-270d83327278","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"m+\", \"M\")","position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0},{"failures":[65],"tindex":"fd7e9f8e-1226-11e6-9f97-b96c7ca17171","series":0,"name":"replace","transplant":{"toString":"return +1","position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2)","position":"org.apache.commons.codec.language.RefinedSoundex:116","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2)"},"status":-1},{"failures":[12,13],"tindex":"fd7e9f8f-1226-11e6-9f97-6f1e70af3b17","series":0,"name":"replace","transplant":{"toString":"int index2 = start","position":"org.apache.commons.codec.binary.CharSequenceUtils:55","type":"CtLocalVariableImpl","sourcecode":"int int = start"},"variableMap":{"start":"m"},"type":"adrStmt","transplantationPoint":{"toString":"final int t = ((a << (16 - n)) ^ a) & m","position":"org.apache.commons.codec.digest.UnixCrypt:393","type":"CtLocalVariableImpl","sourcecode":"final int int = ((a << (16 - n)) ^ a) & m"},"status":-1},{"failures":[],"tindex":"fd7e9f90-1226-11e6-9f97-8d5d66ff81ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}"},"status":-2},{"failures":[],"tindex":"fd7ec6a1-1226-11e6-9f97-2755ac05d13b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.phonemes = phonemes","position":"org.apache.commons.codec.language.bm.Rule:180","type":"CtAssignmentImpl","sourcecode":"this.java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = phonemes"},"status":-2},{"failures":[66,67,68,69,70,71,72,73,74],"tindex":"fd807452-1226-11e6-9f97-c17a28ade706","series":0,"name":"replace","transplant":{"toString":"final boolean startsWith = regex.startsWith(\"^\")","position":"org.apache.commons.codec.language.bm.Rule:500","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = regex.startsWith(\"^\")"},"variableMap":{"regex":"replacement"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean append = (((lastReplacement) == null) || (!(lastReplacement.endsWith(replacement)))) || forceAppend","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:136","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend"},"status":-1},{"failures":[],"tindex":"fd807453-1226-11e6-9f97-b5d895889f7d","series":0,"name":"add","transplant":{"toString":"this.pad = pad","position":"org.apache.commons.codec.binary.BaseNCodec:212","type":"CtAssignmentImpl","sourcecode":"this.byte = pad"},"variableMap":{"pad":"org.apache.commons.codec.net.QCodec.BLANK"},"type":"adrStmt","transplantationPoint":{"toString":"tmp[i] = org.apache.commons.codec.net.QCodec.BLANK","position":"org.apache.commons.codec.net.QCodec:187","type":"CtAssignmentImpl","sourcecode":"tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":-2},{"failures":[],"tindex":"fd809b64-1226-11e6-9f97-39d9875f1b27","series":0,"name":"add","transplant":{"toString":"final java.lang.String input = cleanup(source)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:490","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = cleanup(source)"},"variableMap":{"source":"ph"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String before = ph.substring(0, open)","position":"org.apache.commons.codec.language.bm.Rule:371","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(0, open)"},"status":-2},{"failures":[60],"tindex":"fd809b65-1226-11e6-9f97-2b4d01269564","series":0,"name":"replace","transplant":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:313","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[],"tindex":"fd809b66-1226-11e6-9f97-b3cf2d79bbc2","series":0,"name":"add","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"read","to":"read"},"type":"adrStmt","transplantationPoint":{"toString":"mac.update(buffer, 0, read)","position":"org.apache.commons.codec.digest.HmacUtils:770","type":"CtInvocationImpl","sourcecode":"mac.update(buffer, 0, read)"},"status":-2},{"failures":[],"tindex":"fd809b67-1226-11e6-9f97-d73af4ec3fb5","series":0,"name":"replace","transplant":{"toString":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:347","type":"CtAssignmentImpl","sourcecode":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)"},"variableMap":{"d":"ii"},"type":"adrStmt","transplantationPoint":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"status":-2},{"failures":[75],"tindex":"fd809b68-1226-11e6-9f97-350ff2e3466c","series":0,"name":"replace","transplant":{"toString":"for (final byte element : arrayOctet) {\n    if (((pad) == element) || (isInAlphabet(element))) {\n        return true;\n    } \n}","position":"org.apache.commons.codec.binary.BaseNCodec:499","type":"CtForEachImpl","sourcecode":"for (final byte byte : arrayOctet) {\n    if (((byte) == element) || (isInAlphabet(element))) {\n        return true;\n    } \n}"},"variableMap":{"pad":"pad","arrayOctet":"arrayOctet"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (arrayOctet.length) ; i++) {\n    if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (pad)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.binary.BaseNCodec:464","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n    if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":"fd80c279-1226-11e6-9f97-df9ef25c939c","series":0,"name":"add","transplant":{"toString":"final byte[] pBytes = new byte[keyLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"variableMap":{"keyLen":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(encodeSize, context)","position":"org.apache.commons.codec.binary.Base64:379","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-2},{"failures":[],"tindex":"fd80c27a-1226-11e6-9f97-8da62c61f457","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:111","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"fd80c27b-1226-11e6-9f97-8769ec115968","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.RuleType rt : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> rs = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages ls = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String l : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}","position":"org.apache.commons.codec.language.bm.Rule:217","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String java.lang.String : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}"},"status":-2},{"failures":[25,26,54],"tindex":"fd80e98c-1226-11e6-9f97-b351d00d96cf","series":0,"name":"replace","transplant":{"toString":"result.append(\"X\", \"SK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"result.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:628","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[],"tindex":"fd80e98d-1226-11e6-9f97-b73d6ee40bc8","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"b","to":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base64:382","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"status":-2},{"failures":[],"tindex":"fd80e98e-1226-11e6-9f97-ef0d6b72aa87","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384, key)","position":"org.apache.commons.codec.digest.HmacUtils:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"fd80e98f-1226-11e6-9f97-57abac0cc6f9","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('%')","position":"org.apache.commons.codec.net.QCodec:70","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('%')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('$')","position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"status":0},{"failures":[],"tindex":"fd80e990-1226-11e6-9f97-750679a226eb","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"r3\", \"R3\")","position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r3\", \"R3\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"name1 = removeDoubleConsonants(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"status":-2},{"failures":[38,40,43],"tindex":"fd8110a1-1226-11e6-9f97-0ffa2ef1e0c5","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Languages:269","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"fd8110a2-1226-11e6-9f97-15c59d0c454f","series":0,"name":"replace","transplant":{"toString":"c &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"context.pos += lineSeparator.length","position":"org.apache.commons.codec.binary.Base32:520","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-2},{"failures":[],"tindex":"fd8110a3-1226-11e6-9f97-c7eb354a4b13","series":0,"name":"replace","transplant":{"toString":"code.append('J')","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\"Rule\")","position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"status":0},{"failures":[],"tindex":"fd8110a4-1226-11e6-9f97-736e760d46a0","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('[')","position":"org.apache.commons.codec.net.QCodec:92","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('[')"},"status":0},{"failures":[],"tindex":"fd8110a5-1226-11e6-9f97-257a89023a9d","series":0,"name":"replace","transplant":{"toString":"return count >= minRating","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:260","type":"CtReturnImpl","sourcecode":"return count >= minRating"},"variableMap":{"count":"length","minRating":"length"},"type":"adrStmt","transplantationPoint":{"toString":"return (array == null) || ((array.length) == 0)","position":"org.apache.commons.codec.binary.BinaryCodec:226","type":"CtReturnImpl","sourcecode":"return (array == null) || ((array.int) == 0)"},"status":-2},{"failures":[],"tindex":"fd8110a6-1226-11e6-9f97-af8b3c80162a","series":0,"name":"add","transplant":{"toString":"this.soundexMapping = org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING","position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"variableMap":{"soundexMapping":"soundexMapping","org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.Soundex:109","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":79,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
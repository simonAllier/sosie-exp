{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":47,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":109,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":84,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":83,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":78,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":12,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":103,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":18,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":37,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":72,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":92,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":97,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":70,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":73,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":0,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":5,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":85,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":74,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":106,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":3,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":55,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":36,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":99,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":19,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":57,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":9,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":59,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":62,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":110,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":107,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":34,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":10,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":71,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":45,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":67,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":49,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":17,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":56,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":96,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":65,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":90,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":44,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":111,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":13,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":63,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":108,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":98,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":104,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR":22,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":93,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":68,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":77,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":88,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":51,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":48,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":82,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":58,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":24,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":28,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":80,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":79,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":2,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":29,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":75,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":33,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":87,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":35,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":6,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":100,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":101,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":25,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":27,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":40,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":102,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":113,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":86,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":91,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":81,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":95,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":21,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":94,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":50,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":105,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":112,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":76,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":53,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":89},"transformations":[{"failures":[],"tindex":"1e7cdfa4-16e9-11e6-bf1a-9bd315e115e4","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"[aeiou]\", \"3\")","position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)","position":"org.apache.commons.codec.language.RefinedSoundex:179","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-2},{"failures":[],"tindex":"1e7d54d5-16e9-11e6-bf1a-0de520f7e18a","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:86","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"status":0},{"failures":[0,1,2],"tindex":"1e7d7be6-16e9-11e6-bf1a-e5079a9ae588","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"continue","position":"org.apache.commons.codec.net.QuotedPrintableCodec:363","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"1e7d7be7-16e9-11e6-bf1a-6f6b08e5a127","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 25))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:511","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:509","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-3},{"failures":[],"tindex":"1e7da2f8-16e9-11e6-bf1a-0380e5f9571a","series":0,"name":"add","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (l_ascii.length) - 1 ; ii < (raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:248","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"1e7df119-16e9-11e6-bf1a-9923af8f9cda","series":0,"name":"replace","transplant":{"toString":"result.append('P')","position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"variableMap":{"result":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"1e7df11a-16e9-11e6-bf1a-a19d33f59eed","series":0,"name":"add","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] rawData = org.apache.commons.codec.net.RFC1522Codec.this.doEncoding(text.getBytes(charset))","position":"org.apache.commons.codec.net.RFC1522Codec:78","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.net.RFC1522Codec.this.doEncoding(text.getBytes(charset))"},"status":-2},{"failures":[3,4,5,6,7,8,9,10],"tindex":"1e7e182b-16e9-11e6-bf1a-a3f7ff2b81a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"text = text.toUpperCase(java.util.Locale.GERMAN)","position":"org.apache.commons.codec.language.ColognePhonetic:429","type":"CtAssignmentImpl","sourcecode":"text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[],"tindex":"1e7e182c-16e9-11e6-bf1a-01e0fae50bb9","series":0,"name":"replace","transplant":{"toString":"diff++","position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[],"tindex":"1e7e182d-16e9-11e6-bf1a-a5653b5faf2e","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.NameType s : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Lang.Langs.put(s, org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String.format(org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN, s.getName()), org.apache.commons.codec.language.bm.Languages.getInstance(s)));\n}","position":"org.apache.commons.codec.language.bm.Lang:101","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.put(s, org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String.format(org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String, s.getName()), org.apache.commons.codec.language.bm.Languages.getInstance(s)));\n}"},"status":-2},{"failures":[11,12,13,14,15,16,17,18,19,20],"tindex":"1e7e3f3e-16e9-11e6-bf1a-7dc5d074cca9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"switch (context.modulus) {\n    case 2 :\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 3 :\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 4 :\n        context.lbitWorkArea = (context.lbitWorkArea) >> 4;\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 5 :\n        context.lbitWorkArea = (context.lbitWorkArea) >> 1;\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 6 :\n        context.lbitWorkArea = (context.lbitWorkArea) >> 6;\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 7 :\n        context.lbitWorkArea = (context.lbitWorkArea) >> 3;\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base32:378","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 2 :\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 4 :\n        context.long = (context.long) >> 4;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 5 :\n        context.long = (context.long) >> 1;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 6 :\n        context.long = (context.long) >> 6;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 7 :\n        context.long = (context.long) >> 3;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-1},{"failures":[21],"tindex":"1e7e8d5f-16e9-11e6-bf1a-35c4e8572f7a","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")","position":"org.apache.commons.codec.language.bm.Rule:369","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")","position":"org.apache.commons.codec.binary.BaseNCodec:336","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")"},"status":-1},{"failures":[],"tindex":"1e7e8d60-16e9-11e6-bf1a-e3096a0c45bd","series":0,"name":"add","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:267","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-2},{"failures":[22],"tindex":"1e7eb471-16e9-11e6-bf1a-5110b85127c6","series":0,"name":"replace","transplant":{"toString":"name = removeDoubleConsonants(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"variableMap":{"name":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[],"tindex":"1e7eb472-16e9-11e6-bf1a-e3a7741fee17","series":0,"name":"add","transplant":{"toString":"this.baseNCodec = baseNCodec","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = baseNCodec"},"variableMap":{"baseNCodec":"basedCodec"},"type":"adrStmt","transplantationPoint":{"toString":"this.baseNCodec = basedCodec","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = basedCodec"},"status":-2},{"failures":[23,24],"tindex":"1e7eb473-16e9-11e6-bf1a-bb9373a69037","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('F')","position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('R')","position":"org.apache.commons.codec.language.DoubleMetaphone:706","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"status":-1},{"failures":[25,26,27,28,29,30,31,32],"tindex":"1e7edb84-16e9-11e6-bf1a-a120e6938672","series":0,"name":"replace","transplant":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(charset)","position":"org.apache.commons.codec.net.RFC1522Codec:74","type":"CtInvocationImpl","sourcecode":"buffer.append(charset)"},"status":-1},{"failures":[33],"tindex":"1e7edb85-16e9-11e6-bf1a-818c7835b70f","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))","position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"variableMap":{"raw":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:417","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-1},{"failures":[],"tindex":"1e7edb86-16e9-11e6-bf1a-5d82063d788c","series":0,"name":"replace","transplant":{"toString":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} ","position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String branch : branches) {\n    sb.append(branch);\n    if ((++index) < (branches.length)) {\n        sb.append('|');\n    } \n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:466","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : branches) {\n    sb.append(branch);\n    if ((++index) < (branches.int)) {\n        sb.append('|');\n    } \n}"},"status":-2},{"failures":[],"tindex":"1e7f0297-16e9-11e6-bf1a-a9c6d021e1b0","series":0,"name":"add","transplant":{"toString":"if (atStart) {\n    return replacementAtStart;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:181","type":"CtIfImpl","sourcecode":"if (atStart) {\n    return java.lang.String[];\n} "},"variableMap":{"atStart":"nextCharIsVowel","replacementAtStart":"replacementBeforeVowel"},"type":"adrStmt","transplantationPoint":{"toString":"if (nextCharIsVowel) {\n    return replacementBeforeVowel;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:187","type":"CtIfImpl","sourcecode":"if (nextCharIsVowel) {\n    return java.lang.String[];\n} "},"status":0},{"failures":[],"tindex":"1e7f0298-16e9-11e6-bf1a-ed1c034d6fbb","series":0,"name":"replace","transplant":{"toString":"final byte[] resizedBytes = new byte[bitlen / 8]","position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[bitlen / 8]"},"variableMap":{"bitlen":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] b = new byte[(context.buffer.length) * (org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR)]","position":"org.apache.commons.codec.binary.BaseNCodec:254","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)]"},"status":0},{"failures":[34],"tindex":"1e7f29a9-16e9-11e6-bf1a-490f76fde875","series":0,"name":"replace","transplant":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:474","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"1e7f29aa-16e9-11e6-bf1a-67fd7683073c","series":0,"name":"add","transplant":{"toString":"java.security.MessageDigest ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()","position":"org.apache.commons.codec.digest.Md5Crypt:216","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.security.MessageDigest ctx = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()","position":"org.apache.commons.codec.digest.Md5Crypt:196","type":"CtLocalVariableImpl","sourcecode":"final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"status":-2},{"failures":[],"tindex":"1e7f50bb-16e9-11e6-bf1a-b5adbb2af413","series":0,"name":"replace","transplant":{"toString":"this.folding = folding","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"variableMap":{"folding":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"toString":"inMultilineComment = false","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:262","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"status":-2},{"failures":[35,36,37,38,39,40,41],"tindex":"1e7f50bc-16e9-11e6-bf1a-795f5465bb3d","series":0,"name":"add","transplant":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:289","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[],"tindex":"1e7f50bd-16e9-11e6-bf1a-1f6884bd4927","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.RefinedSoundex.this.soundexMapping, 0, mapping.length)","position":"org.apache.commons.codec.language.RefinedSoundex:78","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.RefinedSoundex.this.char[], 0, mapping.int)"},"variableMap":{"mapping":"chrs","soundexMapping":"chrs","length":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"status":-3},{"failures":[],"tindex":"1e7f77ce-16e9-11e6-bf1a-952fa4aeede8","series":0,"name":"add","transplant":{"toString":"return upperName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"variableMap":{"upperName":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return doubleMetaphone(value, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"status":-2},{"failures":[],"tindex":"1e7f77cf-16e9-11e6-bf1a-4bd516a60a51","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int c = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0)","position":"org.apache.commons.codec.digest.UnixCrypt:340","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0)"},"status":-2},{"failures":[23,24],"tindex":"1e7f77d0-16e9-11e6-bf1a-e7bad2c9b1c7","series":0,"name":"replace","transplant":{"toString":"return 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[],"tindex":"1e7f9ee1-16e9-11e6-bf1a-a384980d1969","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:373","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-2},{"failures":[],"tindex":"1e7f9ee2-16e9-11e6-bf1a-8f6555e54b87","series":0,"name":"replace","transplant":{"toString":"b = 256 + b","position":"org.apache.commons.codec.net.QuotedPrintableCodec:204","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 4","position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"status":-2},{"failures":[],"tindex":"1e7f9ee3-16e9-11e6-bf1a-57e09bb27360","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base64:449","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:362","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"1e7f9ee4-16e9-11e6-bf1a-971cc27cb0a9","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:90","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[23,24,34,42],"tindex":"1e7fc5f5-16e9-11e6-bf1a-47de5c31c421","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:789","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"1e7fc5f6-16e9-11e6-bf1a-d52eb246d562","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"r\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:108","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r\", \"2\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"toString":"line = line.substring(0, cmtI)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:273","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-2},{"failures":[43,44,45,46,47,48,49,50,51,52,53,33,54],"tindex":"1e7fc5f7-16e9-11e6-bf1a-f7229cc557c5","series":0,"name":"replace","transplant":{"toString":"final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:310","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String rightCharacter = parts[1]","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:291","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = parts[1]"},"status":-1},{"failures":[],"tindex":"1e7fc5f8-16e9-11e6-bf1a-536b16ffd6c5","series":0,"name":"replace","transplant":{"toString":"int index1 = thisStart","position":"org.apache.commons.codec.binary.CharSequenceUtils:54","type":"CtLocalVariableImpl","sourcecode":"int int = thisStart"},"variableMap":{"thisStart":"keyLen"},"type":"adrStmt","transplantationPoint":{"toString":"int ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:221","type":"CtLocalVariableImpl","sourcecode":"int int = keyLen"},"status":-3},{"failures":[55,56],"tindex":"1e7fed09-16e9-11e6-bf1a-7fc1688f1c51","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)","position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)"},"status":-1},{"failures":[57,58,59,60,61],"tindex":"1e7fed0a-16e9-11e6-bf1a-0b3aaaa413b8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"h\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"status":-1},{"failures":[17,18,19,62,63,64],"tindex":"1e7fed0b-16e9-11e6-bf1a-c92497fdf200","series":0,"name":"replace","transplant":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"n"},"type":"adrStmt","transplantationPoint":{"toString":"return n - todo","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return n - todo"},"status":-1},{"failures":[],"tindex":"1e7fed0c-16e9-11e6-bf1a-dbbf8452c132","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int len = str.length()","position":"org.apache.commons.codec.language.SoundexUtils:45","type":"CtLocalVariableImpl","sourcecode":"final int int = str.length()"},"status":-2},{"failures":[65,66,67],"tindex":"1e7fed0d-16e9-11e6-bf1a-d7d9369364e4","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return saltString.toString()","position":"org.apache.commons.codec.digest.B64:77","type":"CtReturnImpl","sourcecode":"return saltString.toString()"},"status":-1},{"failures":[],"tindex":"1e7fed0e-16e9-11e6-bf1a-9d89d59ad7d8","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(\"Null key\")","position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"status":-2},{"failures":[23,24,68,69,42],"tindex":"1e80141f-16e9-11e6-bf1a-0f09ee939f16","series":0,"name":"replace","transplant":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n    if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n        result.append(\"KS\");\n    } else {\n        result.append('X');\n    }\n    index += 3;\n} else {\n    result.append('K');\n    index += 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:332","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n    if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n        result.append(\"KS\");\n    } else {\n        result.append('X');\n    }\n    index += 3;\n} else {\n    result.append('K');\n    index += 2;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-1},{"failures":[],"tindex":"1e801420-16e9-11e6-bf1a-77e1ddaa8572","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"cmtI"},"type":"adrStmt","transplantationPoint":{"toString":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} ","position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[],"tindex":"1e803b31-16e9-11e6-bf1a-ed2a4f051329","series":0,"name":"replace","transplant":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"variableMap":{"obj":"source"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(source instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.AbstractCaverphone:57","type":"CtIfImpl","sourcecode":"if (!(source instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} "},"status":0},{"failures":[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"1e803b32-16e9-11e6-bf1a-01e6debcd1c6","series":0,"name":"replace","transplant":{"toString":"final int nameLength = name.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:160","type":"CtLocalVariableImpl","sourcecode":"final int int = name.length()"},"variableMap":{"name":"ph"},"type":"adrStmt","transplantationPoint":{"toString":"final int open = ph.indexOf(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"status":-1},{"failures":[],"tindex":"1e803b33-16e9-11e6-bf1a-092453cff839","series":0,"name":"replace","transplant":{"toString":"return readLen","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:167","type":"CtReturnImpl","sourcecode":"return readLen"},"variableMap":{"readLen":"len"},"type":"adrStmt","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"status":-3},{"failures":[],"tindex":"1e803b34-16e9-11e6-bf1a-333065f7418d","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"lang"},"type":"adrStmt","transplantationPoint":{"toString":"return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang)","position":"org.apache.commons.codec.language.bm.Rule:249","type":"CtReturnImpl","sourcecode":"return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", nameType.getName(), rt.getName(), lang)"},"status":-3},{"failures":[7],"tindex":"1e806245-16e9-11e6-bf1a-8d99d5009bd7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"rightLength++","position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"status":-1},{"failures":[],"tindex":"1e806246-16e9-11e6-bf1a-29582b2004c6","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"status":-2},{"failures":[88],"tindex":"1e806247-16e9-11e6-bf1a-6922d823e1d8","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))","position":"org.apache.commons.codec.digest.DigestUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"variableMap":{"data":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))","position":"org.apache.commons.codec.binary.Base64:595","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))"},"status":-1},{"failures":[],"tindex":"1e806248-16e9-11e6-bf1a-97fa66d51601","series":0,"name":"replace","transplant":{"toString":"b = 256 + b","position":"org.apache.commons.codec.net.QuotedPrintableCodec:204","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"variableMap":{"b":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"status":-2},{"failures":[],"tindex":"1e806249-16e9-11e6-bf1a-9965a50291ad","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)","position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"variableMap":{"byteArray":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.net.QCodec:289","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"1e80624a-16e9-11e6-bf1a-355c32398b6a","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:455","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-2},{"failures":[],"tindex":"1e80895b-16e9-11e6-bf1a-4f42739d439d","series":0,"name":"replace","transplant":{"toString":"this.doEncode = doEncode","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:46","type":"CtAssignmentImpl","sourcecode":"this.boolean = doEncode"},"variableMap":{"doEncode":"hasUnderscores"},"type":"adrStmt","transplantationPoint":{"toString":"hasUnderscores = true","position":"org.apache.commons.codec.net.QCodec:176","type":"CtAssignmentImpl","sourcecode":"hasUnderscores = true"},"status":-2},{"failures":[23,68,42,89,90],"tindex":"1e80895c-16e9-11e6-bf1a-4b44df8c6213","series":0,"name":"replace","transplant":{"toString":"sb.append(\"Rule\")","position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"variableMap":{"sb":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:958","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[91,92],"tindex":"1e80895d-16e9-11e6-bf1a-576278e688b1","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:749","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))","position":"org.apache.commons.codec.digest.DigestUtils:426","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-1},{"failures":[70,71,72,73],"tindex":"1e80895e-16e9-11e6-bf1a-c998798c1061","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:245","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[31],"tindex":"1e80b06f-16e9-11e6-bf1a-d70c1d7bf68b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('+')","position":"org.apache.commons.codec.net.QCodec:76","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('+')"},"status":-1},{"failures":[],"tindex":"1e80b070-16e9-11e6-bf1a-25c9f1ad4af6","series":0,"name":"replace","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"b","y":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"status":-2},{"failures":[51],"tindex":"1e80b071-16e9-11e6-bf1a-cd402672b5d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((folding) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS.containsKey(ch))) {\n    ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS.get(ch);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:385","type":"CtIfImpl","sourcecode":"if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n    ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n} "},"status":-1},{"failures":[],"tindex":"1e80b072-16e9-11e6-bf1a-a5747b128c80","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.Metaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:428","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Metaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:318","type":"CtAssignmentImpl","sourcecode":"b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"status":-2},{"failures":[],"tindex":"1e80b073-16e9-11e6-bf1a-a5d694409926","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(baseNCodec.hasData(context))) {\n    final byte[] buf = new byte[doEncode ? 4096 : 8192];\n    final int c = in.read(buf);\n    if (doEncode) {\n        baseNCodec.encode(buf, 0, c, context);\n    } else {\n        baseNCodec.decode(buf, 0, c, context);\n    }\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:156","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n    final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n    final int int = java.io.InputStream.read(buf);\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n} "},"status":-2},{"failures":[],"tindex":"1e80d784-16e9-11e6-bf1a-d94b007213c7","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))","position":"org.apache.commons.codec.digest.UnixCrypt:205","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"status":-2},{"failures":[],"tindex":"1e80d785-16e9-11e6-bf1a-af53e9bde833","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(']')","position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"status":0},{"failures":[],"tindex":"1e80d786-16e9-11e6-bf1a-dfc1ed728a83","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:295","type":"CtInvocationImpl","sourcecode":"ctx1.reset()"},"status":-2},{"failures":[],"tindex":"1e80d787-16e9-11e6-bf1a-c7cb1a663f58","series":0,"name":"add","transplant":{"toString":"l_ascii[(jj - bits)] = '1'","position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","l_ascii":"buffer","bits":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:364","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"1e80d788-16e9-11e6-bf1a-13f81756ca0c","series":0,"name":"replace","transplant":{"toString":"while ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n    builder.append('0');\n    cachedString = null;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:116","type":"CtWhileImpl","sourcecode":"while ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n    java.lang.StringBuilder.append('0');\n    java.lang.String = null;\n}"},"variableMap":{"org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH":"maxPhonemes","builder":"input","cachedString":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule rule : rules) {\n    final java.lang.String pattern = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.input, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:211","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule : rules) {\n    final java.lang.String java.lang.String = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n        break;\n    } \n}"},"status":-2},{"failures":[93,94,95,96,97],"tindex":"1e80fe99-16e9-11e6-bf1a-1763cfd3c52f","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:288","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:464","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer)"},"status":-1},{"failures":[98,99,100],"tindex":"1e80fe9a-16e9-11e6-bf1a-cfec34b6a59c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(' ')","position":"org.apache.commons.codec.net.URLCodec:91","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(' ')"},"status":-1},{"failures":[25,26,27,28,29,30,31,32],"tindex":"1e80fe9b-16e9-11e6-bf1a-6d2466fd31d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.SEP)","position":"org.apache.commons.codec.net.RFC1522Codec:77","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char)"},"status":-1},{"failures":[101],"tindex":"1e80fe9c-16e9-11e6-bf1a-7788876da29d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtIfImpl","sourcecode":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} "},"status":-1},{"failures":[31],"tindex":"1e8125ad-16e9-11e6-bf1a-651ccc0bd241","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:81","type":"CtForImpl","sourcecode":"for (int int = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"1e8125ae-16e9-11e6-bf1a-9f12503291bc","series":0,"name":"replace","transplant":{"toString":"newPhonemes.add(join)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:115","type":"CtInvocationImpl","sourcecode":"newPhonemes.add(join)"},"variableMap":{"newPhonemes":"phonemes","join":"phoneme"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.add(phoneme)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(phoneme)"},"status":0},{"failures":[3,4,5,6,7,102,8,9,10,103,104],"tindex":"1e8125af-16e9-11e6-bf1a-c71be8a84c04","series":0,"name":"add","transplant":{"toString":"index += 4","position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"variableMap":{"index":"length"},"type":"adrStmt","transplantationPoint":{"toString":"(length)--","position":"org.apache.commons.codec.language.ColognePhonetic:275","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"status":-1},{"failures":[105,98,99,106,100,107],"tindex":"1e8125b0-16e9-11e6-bf1a-97792d68e13e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final byte c : bytes) {\n    int b = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (urlsafe.get(b)) {\n        if (b == ' ') {\n            b = '+';\n        } \n        buffer.write(b);\n    } else {\n        buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR);\n        final char hex1 = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.RADIX));\n        final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.RADIX));\n        buffer.write(hex1);\n        buffer.write(hex2);\n    }\n}","position":"org.apache.commons.codec.net.URLCodec:130","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    int int = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (urlsafe.get(b)) {\n        if (b == ' ') {\n            b = '+';\n        } \n        buffer.write(b);\n    } else {\n        buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        buffer.write(hex1);\n        buffer.write(hex2);\n    }\n}"},"status":-1},{"failures":[],"tindex":"1e814cc1-16e9-11e6-bf1a-933cca237ec9","series":0,"name":"replace","transplant":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"variableMap":{"i":"pos","key":"encodeTable"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 5))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:515","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[108,109,110,111,0,1,2,112,113],"tindex":"1e814cc2-16e9-11e6-bf1a-911ba908f843","series":0,"name":"replace","transplant":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:410","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes)"},"status":-1},{"failures":[],"tindex":"1e814cc3-16e9-11e6-bf1a-81ac5288ef58","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:286","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"length","lineSeparator":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (bytes.length) ; i++) {\n    final byte b = bytes[i];\n    if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n        tmp[i] = b;\n    } else {\n        tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n    }\n}","position":"org.apache.commons.codec.net.QCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final byte byte = bytes[i];\n    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        tmp[i] = b;\n    } else {\n        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    }\n}"},"status":-3},{"failures":[105,98,99,100,107],"tindex":"1e814cc4-16e9-11e6-bf1a-7316e7a3a873","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.write(hex1)","position":"org.apache.commons.codec.net.URLCodec:144","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-1},{"failures":[],"tindex":"1e814cc5-16e9-11e6-bf1a-b13de967fde6","series":0,"name":"replace","transplant":{"toString":"c = (c >>> 1) | (c << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 1) | (c << 27)"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:557","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"1e8173d6-16e9-11e6-bf1a-05bd30d76c9d","series":0,"name":"add","transplant":{"toString":"return resizedBytes","position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"variableMap":{"resizedBytes":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:254","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false)"},"status":-2},{"failures":[],"tindex":"1e8173d7-16e9-11e6-bf1a-1d85bc0ebde1","series":0,"name":"replace","transplant":{"toString":"lastChar = chr","position":"org.apache.commons.codec.language.ColognePhonetic:398","type":"CtAssignmentImpl","sourcecode":"lastChar = chr"},"variableMap":{"lastChar":"code","chr":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '6'","position":"org.apache.commons.codec.language.ColognePhonetic:389","type":"CtAssignmentImpl","sourcecode":"code = '6'"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":84,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
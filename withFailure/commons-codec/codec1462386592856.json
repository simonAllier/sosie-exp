{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":24,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":13,"org.apache.commons.codec.binary.HexTest.testCustomCharset":15,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":49,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":58,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":62,"org.apache.commons.codec.language.NysiisTest.testDropBy":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":42,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":23,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":63,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":57,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":7,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":36,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":67,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":72,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":65,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":68,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":56,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":31,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":18,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":52,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":51,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":53,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":61,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":46,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":69,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":17,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3":70,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5":71,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":21,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":26,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":33,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":50,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":20,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":14,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":19,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":55,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":37,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":43,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":6,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":64,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":10,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":38,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":59,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":16,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":22,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":29,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":73,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":54,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":27,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":3,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":35},"transformations":[{"failures":[],"tindex":"31713a77-1226-11e6-b330-3baf3fe532d2","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.URLCodec:179","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-2},{"failures":[0,1],"tindex":"31716188-1226-11e6-b330-ffab1ae8aeb5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:468","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"31718899-1226-11e6-b330-afe1bce0589f","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = str.substring(1)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:333","type":"CtAssignmentImpl","sourcecode":"str = str.substring(1)"},"status":-2},{"failures":[],"tindex":"3171889a-1226-11e6-b330-0f692a375925","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"toString":"line = line.trim()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:277","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"status":-2},{"failures":[],"tindex":"3171889b-1226-11e6-b330-0339650b039e","series":0,"name":"replace","transplant":{"toString":"this.encodeTable = org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE","position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"lineSeparator","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base64:293","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"status":-2},{"failures":[2],"tindex":"3171afac-1226-11e6-b330-0fad546bc4bf","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_AF;\n} ","position":"org.apache.commons.codec.language.Nysiis:120","type":"CtIfImpl","sourcecode":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_AF":"org.apache.commons.codec.language.Nysiis.CHARS_C","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.CHARS_NN;\n    } else {\n        return org.apache.commons.codec.language.Nysiis.CHARS_C;\n    }\n} ","position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"status":-1},{"failures":[],"tindex":"3171afad-1226-11e6-b330-65202533ac22","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int open = ph.indexOf(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"status":-2},{"failures":[],"tindex":"3171d6be-1226-11e6-b330-e54529b43d77","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int j = 0","position":"org.apache.commons.codec.digest.UnixCrypt:235","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[3,4,5,6,7,8,9,10],"tindex":"3171d6bf-1226-11e6-b330-eb8df71d4626","series":0,"name":"add","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(keyBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:194","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"3171d6c0-1226-11e6-b330-339e38b8d94a","series":0,"name":"replace","transplant":{"toString":"name = removeDoubleConsonants(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"variableMap":{"name":"input"},"type":"adrStmt","transplantationPoint":{"toString":"input = input.trim()","position":"org.apache.commons.codec.language.DoubleMetaphone:892","type":"CtAssignmentImpl","sourcecode":"input = input.trim()"},"status":-2},{"failures":[3,4,5,11,6,7],"tindex":"3171fdd1-1226-11e6-b330-a5b4e059ec0b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:467","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer)"},"status":-1},{"failures":[0,1,12,13],"tindex":"3171fdd2-1226-11e6-b330-a35b563c1299","series":0,"name":"add","transplant":{"toString":"pos = 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"variableMap":{"pos":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1"},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"3171fdd3-1226-11e6-b330-cf566136e240","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"out[(j++)] = toDigits[(15 & (data[i]))]","position":"org.apache.commons.codec.binary.Hex:146","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[(15 & (data[i]))]"},"status":-1},{"failures":[],"tindex":"317224e4-1226-11e6-b330-892686b29ea6","series":0,"name":"add","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:430","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())"},"status":-2},{"failures":[],"tindex":"317224e5-1226-11e6-b330-5380340cc6b9","series":0,"name":"replace","transplant":{"toString":"return ls.equals(org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES) ? org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE : ls","position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls"},"variableMap":{"ls":"other","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"other","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"other"},"type":"adrStmt","transplantationPoint":{"toString":"return other","position":"org.apache.commons.codec.language.bm.Languages:117","type":"CtReturnImpl","sourcecode":"return other"},"status":-3},{"failures":[],"tindex":"31724bf6-1226-11e6-b330-aba44ab62564","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int n = 0","position":"org.apache.commons.codec.language.Metaphone:146","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[0,1,13],"tindex":"31724bf7-1226-11e6-b330-551ea8c2777d","series":0,"name":"replace","transplant":{"toString":"result.append(\"KS\")","position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('H')","position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"status":-1},{"failures":[],"tindex":"31724bf8-1226-11e6-b330-1dbc90e7d739","series":0,"name":"add","transplant":{"toString":"try {\n    final byte[] byteArray = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n    return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n    return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"variableMap":{"e":"value","object":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(value)))","position":"org.apache.commons.codec.net.BCodec:201","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(value)))"},"status":-2},{"failures":[],"tindex":"31727309-1226-11e6-b330-af386c45522c","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('[')","position":"org.apache.commons.codec.net.QCodec:92","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('[')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:101","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i)"},"status":-2},{"failures":[],"tindex":"3172730a-1226-11e6-b330-55b9859d7779","series":0,"name":"replace","transplant":{"toString":"final char last2Char = key.charAt(((key.length()) - 2))","position":"org.apache.commons.codec.language.Nysiis:302","type":"CtLocalVariableImpl","sourcecode":"final char char = key.charAt(((key.length()) - 2))"},"variableMap":{"key":"cs"},"type":"adrStmt","transplantationPoint":{"toString":"char c1 = cs.charAt((index1++))","position":"org.apache.commons.codec.binary.CharSequenceUtils:59","type":"CtLocalVariableImpl","sourcecode":"char char = cs.charAt((index1++))"},"status":-2},{"failures":[],"tindex":"31729a1b-1226-11e6-b330-ef858e3f618b","series":0,"name":"replace","transplant":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"variableMap":{"singleByte":"sBytes"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i <= (rounds - 1) ; i++) {\n    ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n    if ((i & 1) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } else {\n        ctx.update(altResult, 0, blocksize);\n    }\n    if ((i % 3) != 0) {\n        ctx.update(sBytes, 0, saltLen);\n    } \n    if ((i % 7) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } \n    if ((i & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(pBytes, 0, keyLen);\n    }\n    altResult = ctx.digest();\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:356","type":"CtForImpl","sourcecode":"for (int int = 0 ; i <= (rounds - 1) ; i++) {\n    ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n    if ((i & 1) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } else {\n        ctx.update(altResult, 0, blocksize);\n    }\n    if ((i % 3) != 0) {\n        ctx.update(sBytes, 0, saltLen);\n    } \n    if ((i % 7) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } \n    if ((i & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(pBytes, 0, keyLen);\n    }\n    altResult = ctx.digest();\n}"},"status":-3},{"failures":[],"tindex":"31729a1c-1226-11e6-b330-f5adb4cc08b3","series":0,"name":"replace","transplant":{"toString":"b += 256","position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base64:380","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[],"tindex":"3172c12d-1226-11e6-b330-c55ba9bdc0b9","series":0,"name":"replace","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"b","y":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"status":-2},{"failures":[],"tindex":"3172c12e-1226-11e6-b330-b17d3396a633","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Caverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)))","position":"org.apache.commons.codec.binary.BinaryCodec:120","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)))"},"status":-2},{"failures":[],"tindex":"3172e83f-1226-11e6-b330-8f63ca679617","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"location"},"type":"adrStmt","transplantationPoint":{"toString":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String rawLine = scanner.nextLine();\n    java.lang.String line = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)) {\n            inMultilineComment = false;\n        } \n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)) {\n        inMultilineComment = true;\n    } else {\n        final int cmtI = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.COMMENT);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.contains(\"=\")) {\n            final java.lang.String[] parts = line.split(\"=\");\n            if ((parts.length) != 2) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                final java.lang.String leftCharacter = parts[0];\n                final java.lang.String rightCharacter = parts[1];\n                if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                } \n                asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n            }\n        } else {\n            final java.lang.String[] parts = line.split(\"\\\\s+\");\n            if ((parts.length) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String pattern = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                    final java.lang.String replacement1 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                    final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                    final java.lang.String replacement3 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule r = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                    final char patternKey = r.pattern.charAt(0);\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = ruleMapping.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                        ruleMapping.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:255","type":"CtWhileImpl","sourcecode":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String java.lang.String = scanner.nextLine();\n    java.lang.String java.lang.String = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n            inMultilineComment = false;\n        } \n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        inMultilineComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.contains(\"=\")) {\n            final java.lang.String[] java.lang.String[] = line.split(\"=\");\n            if ((parts.int) != 2) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                final java.lang.String java.lang.String = parts[0];\n                final java.lang.String java.lang.String = parts[1];\n                if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                } \n                asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                    final char char = r.java.lang.String.charAt(0);\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                        ruleMapping.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}"},"status":-3},{"failures":[],"tindex":"31735d70-1226-11e6-b330-511532de6528","series":0,"name":"replace","transplant":{"toString":"int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:287","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"variableMap":{"bytes":"buffer","i":"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH"},"type":"adrStmt","transplantationPoint":{"toString":"int read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH)","position":"org.apache.commons.codec.digest.DigestUtils:794","type":"CtLocalVariableImpl","sourcecode":"int int = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int)"},"status":-2},{"failures":[],"tindex":"31735d71-1226-11e6-b330-9b067ae5add5","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n    hasUnderscores = true;\n    break;\n} ","position":"org.apache.commons.codec.net.QCodec:175","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    hasUnderscores = true;\n    break;\n} "},"status":-2},{"failures":[],"tindex":"31735d72-1226-11e6-b330-5f7b12df2397","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"y\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"2\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[33],"tindex":"31738483-1226-11e6-b330-116803cbd192","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:749","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))","position":"org.apache.commons.codec.digest.DigestUtils:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"status":-1},{"failures":[37,38,39,40,41,42,43,44,45,46,47],"tindex":"31738484-1226-11e6-b330-9517565a2ce1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch())","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:493","type":"CtInvocationImpl","sourcecode":"currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch())"},"status":-1},{"failures":[],"tindex":"31738485-1226-11e6-b330-f38f4f210f48","series":0,"name":"replace","transplant":{"toString":"int rounds = org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT","position":"org.apache.commons.codec.digest.Sha2Crypt:139","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int"},"variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int numSaltChars = org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS.length","position":"org.apache.commons.codec.digest.UnixCrypt:201","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int"},"status":-2},{"failures":[],"tindex":"31738486-1226-11e6-b330-8b25f580ea37","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"k+\", \"K\")","position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"mb$\", \"m2\")","position":"org.apache.commons.codec.language.Caverphone2:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"status":0},{"failures":[],"tindex":"31738487-1226-11e6-b330-2fe5f9f87317","series":0,"name":"replace","transplant":{"toString":"salt = (org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + salt","position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt"},"variableMap":{"salt":"str","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_K.matcher(str).replaceFirst(\"C\")","position":"org.apache.commons.codec.language.Nysiis:263","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\")"},"status":-3},{"failures":[48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"3173ab98-1226-11e6-b330-4781ea3f5e3c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) {\n    continue;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:362","type":"CtIfImpl","sourcecode":"if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"3173ab99-1226-11e6-b330-516510517780","series":0,"name":"replace","transplant":{"toString":"return compareCode","position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"variableMap":{"compareCode":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:576","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[],"tindex":"3173ab9a-1226-11e6-b330-6b838a3fea6c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"3173ab9b-1226-11e6-b330-13f599eb43a4","series":0,"name":"replace","transplant":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n    } \n}","position":"org.apache.commons.codec.binary.BinaryCodec:209","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n    } \n}"},"variableMap":{"jj":"length","ii":"length","length":"length","l_raw":"l_raw","ascii":"l_raw","org.apache.commons.codec.binary.BinaryCodec.BITS":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (ascii.length) - 1 ; ii < (l_raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n        } \n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:181","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n        } \n    }\n}"},"status":-2},{"failures":[56,60,57],"tindex":"3173d2ac-1226-11e6-b330-c73ef9f36a63","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('-')","position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:89","type":"CtForImpl","sourcecode":"for (int int = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[5,8],"tindex":"3173d2ad-1226-11e6-b330-4fa5cfb83b41","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(sBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"tempResult"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"status":-1},{"failures":[],"tindex":"3173d2ae-1226-11e6-b330-c132f9575acf","series":0,"name":"replace","transplant":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"source"},"type":"adrStmt","transplantationPoint":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"3173d2af-1226-11e6-b330-274bc31bbf1d","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(saltBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:265","type":"CtInvocationImpl","sourcecode":"ctx1.update(saltBytes)"},"status":-2},{"failures":[],"tindex":"3173d2b0-1226-11e6-b330-3d0517d14d03","series":0,"name":"replace","transplant":{"toString":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + salt;\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"variableMap":{"salt":"str","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE"},"type":"adrStmt","transplantationPoint":{"toString":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-2},{"failures":[],"tindex":"3173f9c1-1226-11e6-b330-8b58f097a9fe","series":0,"name":"replace","transplant":{"toString":"return algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"variableMap":{"algorithm":"firstThree"},"type":"adrStmt","transplantationPoint":{"toString":"return firstThree + lastThree","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return firstThree + lastThree"},"status":-3},{"failures":[35],"tindex":"3173f9c2-1226-11e6-b330-c979eddd4a85","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))","position":"org.apache.commons.codec.digest.DigestUtils:705","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"status":-1},{"failures":[61,62,63,64,65,66,67,68],"tindex":"3173f9c3-1226-11e6-b330-5d4638674349","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Rule:199","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[69,70,71,72,73],"tindex":"3173f9c4-1226-11e6-b330-01f65dfce7fa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"status":-1},{"failures":[],"tindex":"317420d5-1226-11e6-b330-330fe8bda901","series":0,"name":"replace","transplant":{"toString":"patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:223","type":"CtAssignmentImpl","sourcecode":"patternLength = 1"},"variableMap":{"patternLength":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"status":-2},{"failures":[65,66,67,68],"tindex":"31753246-1226-11e6-b330-d10833ddd213","series":0,"name":"replace","transplant":{"toString":"if ((prefix.length()) > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:601","type":"CtIfImpl","sourcecode":"if ((prefix.length()) > (input.length())) {\n    return false;\n} "},"variableMap":{"input":"input","prefix":"prefix"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:604","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":48,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
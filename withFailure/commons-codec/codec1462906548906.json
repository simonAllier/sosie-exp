{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":117,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":81,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":86,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":73,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":31,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":30,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":27,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":43,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":119,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":21,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":57,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":19,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":22,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":47,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":37,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":64,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":69,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":36,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":60,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":91,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":115,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":90,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":79,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":116,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":23,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":89,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":68,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":123,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":108,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":93,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":112,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":103,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":120,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":63,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":96,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":110,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":82,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":97,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":111,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":11,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":101,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":6,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":118,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":124,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":3,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":71,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":74,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":10,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":102,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":18,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":48,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":84,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":85,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":75,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":105,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":87,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":98,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":122,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":61,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":46,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":0,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":62,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":14,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":95,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":29,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":42,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":55,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":104,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":15,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":41,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":8,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":40,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":76,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":24,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":121,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":70,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":114,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":34,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":92,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":109,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":100,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":49,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":51,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":94,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":78,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":9,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":45,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":33,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":28,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":7,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":2,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":1,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":106,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":25,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":83,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":52},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"cf644884-16e0-11e6-86bb-5bb5d0aaae8a","series":0,"name":"replace","transplant":{"toString":"altCtx.reset()","position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"variableMap":{"altCtx":"altCtx"},"type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(saltBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:200","type":"CtInvocationImpl","sourcecode":"altCtx.update(saltBytes)"},"status":-1},{"failures":[],"tindex":"cf646f95-16e0-11e6-86bb-cb70180d224c","series":0,"name":"replace","transplant":{"toString":"line = line.trim()","position":"org.apache.commons.codec.language.bm.Lang:159","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"variableMap":{"line":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^tough\", \"tou2f\")","position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"status":-2},{"failures":[8],"tindex":"cf646f96-16e0-11e6-86bb-7f167b74c577","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))","position":"org.apache.commons.codec.binary.Base64:595","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))"},"variableMap":{"binaryData":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))","position":"org.apache.commons.codec.digest.DigestUtils:594","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"status":-1},{"failures":[],"tindex":"cf646f97-16e0-11e6-86bb-bd11798f0490","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtIfImpl","sourcecode":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"cf6496a8-16e0-11e6-86bb-e701e6d12d63","series":0,"name":"add","transplant":{"toString":"ii >>= 1","position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"encodedBlockSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.encodedBlockSize = encodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"status":-2},{"failures":[9,10,11,12,13,14],"tindex":"cf6496a9-16e0-11e6-86bb-ddb87e31d547","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] parts = line.split(\"=\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:285","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"=\")"},"variableMap":{"line":"source"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] branches = soundex(source, true)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"status":-1},{"failures":[],"tindex":"cf6496aa-16e0-11e6-86bb-d5c9282a6cd0","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n    output.addRight(code);\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:394","type":"CtIfImpl","sourcecode":"if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n    output.addRight(code);\n} "},"status":-2},{"failures":[15,16,17],"tindex":"cf6496ab-16e0-11e6-86bb-9bb7615bbe8a","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(',')","position":"org.apache.commons.codec.net.QCodec:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(',')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:98","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"cf64bdbc-16e0-11e6-86bb-cd9898b6e77d","series":0,"name":"replace","transplant":{"toString":"final java.lang.String resName = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)","position":"org.apache.commons.codec.language.bm.Rule:265","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)"},"variableMap":{"lang":"source"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String txt = source","position":"org.apache.commons.codec.language.Caverphone1:46","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = source"},"status":-2},{"failures":[],"tindex":"cf64bdbd-16e0-11e6-86bb-6d6b726b3e95","series":0,"name":"replace","transplant":{"toString":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"encoding","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"encoding"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"status":-3},{"failures":[18],"tindex":"cf64bdbe-16e0-11e6-86bb-cde95e69ef87","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:313","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"tindex":"cf64e4cf-16e0-11e6-86bb-3531ad70c054","series":0,"name":"replace","transplant":{"toString":"hard = true","position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"variableMap":{"hard":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = false","position":"org.apache.commons.codec.language.bm.Languages:185","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"status":-1},{"failures":[5,6,7],"tindex":"cf64e4d0-16e0-11e6-86bb-85eced278e4f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)"},"status":-1},{"failures":[],"tindex":"cf64e4d1-16e0-11e6-86bb-a3f37b4b44fa","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"org.apache.commons.codec.net.RFC1522Codec.POSTFIX"},"type":"adrStmt","transplantationPoint":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"status":-2},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46],"tindex":"cf64e4d2-16e0-11e6-86bb-e186402e3c0f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 25))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:511","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"cf650be3-16e0-11e6-86bb-2db12458327f","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.StringUtils:75","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[15,16,17,47,48,49,50,51],"tindex":"cf650be4-16e0-11e6-86bb-b39fd3a32d08","series":0,"name":"replace","transplant":{"toString":"code.append('0')","position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)","position":"org.apache.commons.codec.net.RFC1522Codec:80","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)"},"status":-1},{"failures":[],"tindex":"cf650be5-16e0-11e6-86bb-651674a04c81","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"mb$\", \"m2\")","position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^rough\", \"rou2f\")","position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"status":0},{"failures":[0,1,2,3,4,5,6,7],"tindex":"cf650be6-16e0-11e6-86bb-f5a960c27d9b","series":0,"name":"add","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, cnt)","position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-1},{"failures":[52,53],"tindex":"cf6532f7-16e0-11e6-86bb-09810b4fca80","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:346","type":"CtAssignmentImpl","sourcecode":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)"},"status":-1},{"failures":[],"tindex":"cf6532f8-16e0-11e6-86bb-0941b58f07a8","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")","position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"status":-2},{"failures":[54,55],"tindex":"cf6532f9-16e0-11e6-86bb-bf3b9c5dac09","series":0,"name":"replace","transplant":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"KS\")","position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"status":-1},{"failures":[],"tindex":"cf6532fa-16e0-11e6-86bb-cb046b70ce3f","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"k+\", \"K\")","position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"saltString"},"type":"adrStmt","transplantationPoint":{"toString":"saltString = m.group(1)","position":"org.apache.commons.codec.digest.Md5Crypt:192","type":"CtAssignmentImpl","sourcecode":"saltString = m.group(1)"},"status":-2},{"failures":[56,57],"tindex":"cf655a0b-16e0-11e6-86bb-bd2c00c14a2f","series":0,"name":"replace","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))","position":"org.apache.commons.codec.digest.DigestUtils:426","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-1},{"failures":[],"tindex":"cf655a0c-16e0-11e6-86bb-351e865aa7e7","series":0,"name":"replace","transplant":{"toString":"this.phonemes = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:78","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>()"},"variableMap":{"phonemes":"phonemes"},"type":"adrStmt","transplantationPoint":{"toString":"this.phonemes = phonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:83","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = phonemes"},"status":-3},{"failures":[],"tindex":"cf672ecd-16e0-11e6-86bb-f3e8d49cbbb8","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"inputContext"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule : rules) {\n    if (rule.matches(inputContext)) {\n        if (branching) {\n            nextBranches.clear();\n        } \n        final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n        final boolean branchingRequired = ((replacements.length) > 1) && branching;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n            for (final java.lang.String nextReplacement : replacements) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n                final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                nextBranch.processNextReplacement(nextReplacement, force);\n                if (branching) {\n                    nextBranches.add(nextBranch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (branching) {\n            currentBranches.clear();\n            currentBranches.addAll(nextBranches);\n        } \n        index += (rule.getPatternLength()) - 1;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:514","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n    if (rule.matches(inputContext)) {\n        if (branching) {\n            nextBranches.clear();\n        } \n        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n        final boolean boolean = ((replacements.int) > 1) && branching;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n            for (final java.lang.String java.lang.String : replacements) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                nextBranch.processNextReplacement(nextReplacement, force);\n                if (branching) {\n                    nextBranches.add(nextBranch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (branching) {\n            currentBranches.clear();\n            currentBranches.addAll(nextBranches);\n        } \n        index += (rule.getPatternLength()) - 1;\n        break;\n    } \n}"},"status":-2},{"failures":[],"tindex":"cf6755de-16e0-11e6-86bb-6b6229a30c45","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.BCodec:121","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"cf6755df-16e0-11e6-86bb-f560f75c2b1b","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"m+\", \"M\")","position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"sh\", \"s2\")","position":"org.apache.commons.codec.language.Caverphone1:84","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"status":0},{"failures":[58,59,54,55],"tindex":"cf6755e0-16e0-11e6-86bb-ab7f97d4db8a","series":0,"name":"replace","transplant":{"toString":"result.append('F')","position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-1},{"failures":[],"tindex":"cf6755e1-16e0-11e6-86bb-27a1d3fae07f","series":0,"name":"replace","transplant":{"toString":"return context.startsWith(pattern)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:199","type":"CtReturnImpl","sourcecode":"return context.startsWith(java.lang.String)"},"variableMap":{"context":"txt","pattern":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Lang.LangRule.this.pattern.matcher(txt).find()","position":"org.apache.commons.codec.language.bm.Lang:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Lang.LangRule.this.java.util.regex.Pattern.matcher(txt).find()"},"status":-3},{"failures":[55],"tindex":"cf677cf2-16e0-11e6-86bb-1b2a97ed56ac","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.DoubleMetaphone:830","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[60,61,62],"tindex":"cf677cf3-16e0-11e6-86bb-53f4741a5815","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"h\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"status":-1},{"failures":[],"tindex":"cf677cf4-16e0-11e6-86bb-2311bfa7fb71","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('~')","position":"org.apache.commons.codec.net.QCodec:103","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('~')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(org.apache.commons.codec.net.QuotedPrintableCodec.SPACE)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:107","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[],"tindex":"cf677cf5-16e0-11e6-86bb-c903a47d85ad","series":0,"name":"replace","transplant":{"toString":"rightLength++","position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"variableMap":{"rightLength":"length"},"type":"adrStmt","transplantationPoint":{"toString":"context.pos += lineSeparator.length","position":"org.apache.commons.codec.binary.Base32:520","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-2},{"failures":[],"tindex":"cf677cf6-16e0-11e6-86bb-e55e91549f0e","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"status":-2},{"failures":[],"tindex":"cf677cf7-16e0-11e6-86bb-d99149f1bbe0","series":0,"name":"replace","transplant":{"toString":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"variableMap":{"index":"ipl","value":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (ipl > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:706","type":"CtIfImpl","sourcecode":"if (ipl > (input.length())) {\n    return false;\n} "},"status":-2},{"failures":[],"tindex":"cf67a408-16e0-11e6-86bb-cd20f5904f85","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.charset","position":"org.apache.commons.codec.net.QuotedPrintableCodec:548","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.this.charset","position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"status":-2},{"failures":[63],"tindex":"cf67a409-16e0-11e6-86bb-75440522e09a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"g\", \"k\")","position":"org.apache.commons.codec.language.Caverphone2:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"g\", \"k\")"},"status":-1},{"failures":[],"tindex":"cf67a40a-16e0-11e6-86bb-b7ce0d630bf9","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":-3},{"failures":[64],"tindex":"cf67a40b-16e0-11e6-86bb-09a5bbf8e369","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:260","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)"},"variableMap":{"data":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw)","position":"org.apache.commons.codec.binary.BinaryCodec:83","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw)"},"status":-1},{"failures":[],"tindex":"cf67a40c-16e0-11e6-86bb-ef80015ce86d","series":0,"name":"replace","transplant":{"toString":"return doubleMetaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DoubleMetaphone:206","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n}","position":"org.apache.commons.codec.net.QCodec:286","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n}"},"status":-2},{"failures":[],"tindex":"cf67a40d-16e0-11e6-86bb-a57893735b84","series":0,"name":"replace","transplant":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:185","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16))"},"status":-2},{"failures":[65,66,67,68,69,70,71],"tindex":"cf67cb1e-16e0-11e6-86bb-4579f48a36cc","series":0,"name":"replace","transplant":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd)","position":"org.apache.commons.codec.language.Metaphone:115","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-1},{"failures":[],"tindex":"cf67cb1f-16e0-11e6-86bb-c77583be96d6","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"status":-2},{"failures":[],"tindex":"cf67cb20-16e0-11e6-86bb-e53644c8df9b","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(finalb, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:298","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"status":-2},{"failures":[],"tindex":"cf67cb21-16e0-11e6-86bb-13143171584d","series":0,"name":"add","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.this.charset.name()","position":"org.apache.commons.codec.binary.Hex:322","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset.name()"},"status":-2},{"failures":[],"tindex":"cf67cb22-16e0-11e6-86bb-059f843b7497","series":0,"name":"add","transplant":{"toString":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"str","firstLetter":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:208","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"cf67f233-16e0-11e6-86bb-35e7d1390300","series":0,"name":"add","transplant":{"toString":"saltString.append(org.apache.commons.codec.digest.B64.B64T.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.B64T.length())))","position":"org.apache.commons.codec.digest.B64:75","type":"CtInvocationImpl","sourcecode":"saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())))"},"variableMap":{"saltString":"buffer","org.apache.commons.codec.digest.B64.B64T":"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_PREFIX"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_PREFIX)","position":"org.apache.commons.codec.digest.Sha2Crypt:425","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)"},"status":-2},{"failures":[],"tindex":"cf67f234-16e0-11e6-86bb-5f0d90648ae7","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int name1Size = (name1.length()) - 1","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:298","type":"CtLocalVariableImpl","sourcecode":"final int int = (name1.length()) - 1"},"status":-2},{"failures":[],"tindex":"cf67f235-16e0-11e6-86bb-8f126871e9f2","series":0,"name":"replace","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}","position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"variableMap":{"obj":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(value)))","position":"org.apache.commons.codec.net.BCodec:201","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(value)))"},"status":-2},{"failures":[],"tindex":"cf67f236-16e0-11e6-86bb-538adddb0943","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ci\", \"si\")","position":"org.apache.commons.codec.language.Caverphone1:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"q\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:75","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"q\", \"k\")"},"status":0},{"failures":[],"tindex":"cf67f237-16e0-11e6-86bb-1f2358042fa2","series":0,"name":"replace","transplant":{"toString":"return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:195","type":"CtReturnImpl","sourcecode":"return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u')"},"variableMap":{"ch":"element"},"type":"adrStmt","transplantationPoint":{"toString":"if (element == key) {\n    return true;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (element == key) {\n    return true;\n} "},"status":-2},{"failures":[],"tindex":"cf67f238-16e0-11e6-86bb-a9c1dfd16bb4","series":0,"name":"replace","transplant":{"toString":"txt = txt + (org.apache.commons.codec.language.Caverphone2.TEN_1)","position":"org.apache.commons.codec.language.Caverphone2:125","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String)"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"name","txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-3},{"failures":[62],"tindex":"cf681949-16e0-11e6-86bb-b96b9b615621","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")","position":"org.apache.commons.codec.language.Caverphone1:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[72],"tindex":"cf68194a-16e0-11e6-86bb-4fced81d5b5a","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))","position":"org.apache.commons.codec.digest.DigestUtils:500","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:495","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"status":-1},{"failures":[],"tindex":"cf68194b-16e0-11e6-86bb-cf5e8e50aa73","series":0,"name":"add","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String pattern = rule.getPattern()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:212","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = rule.getPattern()"},"status":-2},{"failures":[73],"tindex":"cf68194c-16e0-11e6-86bb-6f6db7e6305b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS","position":"org.apache.commons.codec.net.QuotedPrintableCodec:278","type":"CtAssignmentImpl","sourcecode":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet"},"status":-1},{"failures":[],"tindex":"cf68194d-16e0-11e6-86bb-bf36676fdb69","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"last = getMappingCode(str, 0)","position":"org.apache.commons.codec.language.Soundex:271","type":"CtAssignmentImpl","sourcecode":"last = getMappingCode(str, 0)"},"status":-2},{"failures":[],"tindex":"cf68194e-16e0-11e6-86bb-d17a3ac25ebd","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Soundex.this.soundexMapping","position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"variableMap":{"soundexMapping":"l_ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:287","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-3},{"failures":[],"tindex":"cf68194f-16e0-11e6-86bb-1b47a9fef1a0","series":0,"name":"replace","transplant":{"toString":"final java.lang.String singleLetter = dc.substring(0, 1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = dc.substring(0, 1)"},"variableMap":{"dc":"name"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String upperName = name.toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:84","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[20,21,24,25,26,27,28,29,30,31],"tindex":"cf681950-16e0-11e6-86bb-696b6d11954f","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:604","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}"},"variableMap":{"input":"prefix","prefix":"prefix"},"type":"adrStmt","transplantationPoint":{"toString":"if ((prefix.length()) > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:601","type":"CtIfImpl","sourcecode":"if ((prefix.length()) > (input.length())) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"cf684061-16e0-11e6-86bb-8b01d01ba54d","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder key = new java.lang.StringBuilder(str.length())","position":"org.apache.commons.codec.language.Nysiis:273","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length())"},"status":-2},{"failures":[62],"tindex":"cf684062-16e0-11e6-86bb-ab8203da064e","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"cq\", \"2q\")","position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")","position":"org.apache.commons.codec.language.Caverphone1:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[],"tindex":"cf684063-16e0-11e6-86bb-5f5043a05cf6","series":0,"name":"replace","transplant":{"toString":"if (replacedName.contains(dc)) {\n    final java.lang.String singleLetter = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"variableMap":{"replacedName":"line","dc":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)) {\n    inMultilineComment = false;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    inMultilineComment = false;\n} "},"status":-2},{"failures":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"tindex":"cf684064-16e0-11e6-86bb-35dcd53961ce","series":0,"name":"replace","transplant":{"toString":"chrs[index] = element[1]","position":"org.apache.commons.codec.language.ColognePhonetic:437","type":"CtAssignmentImpl","sourcecode":"chrs[index] = element[1]"},"variableMap":{"chrs":"name1Char","index":"i","element":"name1Char"},"type":"adrStmt","transplantationPoint":{"toString":"name1Char[i] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"name1Char[i] = ' '"},"status":-1},{"failures":[],"tindex":"cf684065-16e0-11e6-86bb-51edb26d53ac","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> rules : ruleMap.values()) {\n    allRules.addAll(rules);\n}","position":"org.apache.commons.codec.language.bm.Rule:302","type":"CtForEachImpl","sourcecode":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n    allRules.addAll(rules);\n}"},"status":-2},{"failures":[],"tindex":"cf686776-16e0-11e6-86bb-2f5f12bd2eea","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.ColognePhonetic:321","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[89,90,91,92,93,94,95,96,97,98],"tindex":"cf686777-16e0-11e6-86bb-577dc871d20c","series":0,"name":"replace","transplant":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"variableMap":{"index":"length"},"type":"adrStmt","transplantationPoint":{"toString":"(length)++","position":"org.apache.commons.codec.language.ColognePhonetic:236","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[99,100,101,102,103,104,105],"tindex":"cf686778-16e0-11e6-86bb-efb5c432e51f","series":0,"name":"add","transplant":{"toString":"ctx1.update(saltBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:218","type":"CtInvocationImpl","sourcecode":"ctx1.update(saltBytes)"},"variableMap":{"ctx1":"ctx1","saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:217","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"cf686779-16e0-11e6-86bb-dbead4107b0e","series":0,"name":"replace","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"boxContent"},"type":"adrStmt","transplantationPoint":{"toString":"if (negate) {\n    boxContent = boxContent.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtIfImpl","sourcecode":"if (negate) {\n    boxContent = boxContent.substring(1);\n} "},"status":-2},{"failures":[106,107,108,109,110],"tindex":"cf68677a-16e0-11e6-86bb-210061ee53df","series":0,"name":"replace","transplant":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"status":-1},{"failures":[52,111,112,53],"tindex":"cf68677b-16e0-11e6-86bb-07c01b78d153","series":0,"name":"replace","transplant":{"toString":"cp += blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"variableMap":{"blocksize":"u","cp":"u"},"type":"adrStmt","transplantationPoint":{"toString":"u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"status":-1},{"failures":[],"tindex":"cf68677c-16e0-11e6-86bb-8df48d66b0a4","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"cf68677d-16e0-11e6-86bb-b1f467c826ef","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx.reset()","position":"org.apache.commons.codec.digest.Sha2Crypt:501","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"status":-2},{"failures":[],"tindex":"cf688e8e-16e0-11e6-86bb-0d3fd246cc19","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('-')","position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('@')","position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"status":0},{"failures":[113,114,115],"tindex":"cf688e8f-16e0-11e6-86bb-47f589185ce7","series":0,"name":"replace","transplant":{"toString":"return toString().hashCode()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:124","type":"CtReturnImpl","sourcecode":"return toString().hashCode()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return compareCode","position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"status":-1},{"failures":[],"tindex":"cf688e90-16e0-11e6-86bb-71595d270385","series":0,"name":"add","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:221","type":"CtLocalVariableImpl","sourcecode":"int int = keyLen"},"status":-2},{"failures":[],"tindex":"cf688e91-16e0-11e6-86bb-d9fbdde37390","series":0,"name":"replace","transplant":{"toString":"final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim()","position":"org.apache.commons.codec.language.bm.Rule:435","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim()"},"variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"input","line":"input"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String remainder = input.substring(2)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:411","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(2)"},"status":-3},{"failures":[],"tindex":"cf688e92-16e0-11e6-86bb-a590f30da722","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('\\\\')","position":"org.apache.commons.codec.net.QCodec:93","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\\\')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"status":0},{"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"tindex":"cf688e93-16e0-11e6-86bb-dd66270e20a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"try {\n    rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n}","position":"org.apache.commons.codec.language.bm.Rule:222","type":"CtTryImpl","sourcecode":"try {\n    rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n}"},"status":-1},{"failures":[72],"tindex":"cf68b5a4-16e0-11e6-86bb-69c81fff9aed","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:211","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[],"tindex":"cf68b5a5-16e0-11e6-86bb-9bc899109420","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (data.length) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n        data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n    } \n}","position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"status":-2},{"failures":[],"tindex":"cf68b5a6-16e0-11e6-86bb-6ffc39562190","series":0,"name":"replace","transplant":{"toString":"java.lang.String name1LtRStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:301","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"lang"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String resName = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang)","position":"org.apache.commons.codec.language.bm.Rule:254","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang)"},"status":-3},{"failures":[59,54],"tindex":"cf68b5a7-16e0-11e6-86bb-6bce057c2f79","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-1},{"failures":[42,43,44,116,117,45,118,119,120,46],"tindex":"cf68b5a8-16e0-11e6-86bb-85c7a819fae0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"switch (context.modulus) {\n    case 2 :\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 3 :\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 4 :\n        context.lbitWorkArea = (context.lbitWorkArea) >> 4;\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 5 :\n        context.lbitWorkArea = (context.lbitWorkArea) >> 1;\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 6 :\n        context.lbitWorkArea = (context.lbitWorkArea) >> 6;\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 7 :\n        context.lbitWorkArea = (context.lbitWorkArea) >> 3;\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base32:378","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 2 :\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 4 :\n        context.long = (context.long) >> 4;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 5 :\n        context.long = (context.long) >> 1;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 6 :\n        context.long = (context.long) >> 6;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 7 :\n        context.long = (context.long) >> 3;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-1},{"failures":[],"tindex":"cf68dcb9-16e0-11e6-86bb-3b9c20d41765","series":0,"name":"replace","transplant":{"toString":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))","position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))"},"variableMap":{"pArray":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-2},{"failures":[],"tindex":"cf68dcba-16e0-11e6-86bb-514e09dac92c","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inExtendedComment = true;\n} else if ((line.length()) > 0) {\n    ls.add(line);\n} ","position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = true;\n} else if ((line.length()) > 0) {\n    ls.add(line);\n} "},"status":-2},{"failures":[],"tindex":"cf68dcbb-16e0-11e6-86bb-2500cd03db2e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}","position":"org.apache.commons.codec.binary.StringUtils:141","type":"CtTryImpl","sourcecode":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}"},"status":-2},{"failures":[],"tindex":"cf68dcbc-16e0-11e6-86bb-0d623ae3c513","series":0,"name":"replace","transplant":{"toString":"if ((binaryData == null) || ((binaryData.length) == 0)) {\n    return binaryData;\n} ","position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((binaryData == null) || ((binaryData.int) == 0)) {\n    return binaryData;\n} "},"variableMap":{"binaryData":"bytes","length":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if (hasUnderscores) {\n    final byte[] tmp = new byte[bytes.length];\n    for (int i = 0 ; i < (bytes.length) ; i++) {\n        final byte b = bytes[i];\n        if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n            tmp[i] = b;\n        } else {\n            tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n        }\n    }\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n} ","position":"org.apache.commons.codec.net.QCodec:180","type":"CtIfImpl","sourcecode":"if (hasUnderscores) {\n    final byte[] byte[] = new byte[bytes.int];\n    for (int int = 0 ; i < (bytes.int) ; i++) {\n        final byte byte = bytes[i];\n        if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n            tmp[i] = b;\n        } else {\n            tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n        }\n    }\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n} "},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"tindex":"cf6903cd-16e0-11e6-86bb-e52bf371fa43","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:395","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}"},"status":-1},{"failures":[],"tindex":"cf6903ce-16e0-11e6-86bb-4bb8133f9087","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"out.flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:120","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.flush()"},"status":0},{"failures":[],"tindex":"cf6903cf-16e0-11e6-86bb-85577bd279f6","series":0,"name":"replace","transplant":{"toString":"while (cnt > 0) {\n    if ((cnt & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(keyBytes);\n    }\n    cnt >>= 1;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:247","type":"CtWhileImpl","sourcecode":"while (cnt > 0) {\n    if ((cnt & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(keyBytes);\n    }\n    cnt >>= 1;\n}"},"variableMap":{"blocksize":"read","altResult":"buffer","keyBytes":"buffer","ctx":"digest","cnt":"read"},"type":"adrStmt","transplantationPoint":{"toString":"digest.update(buffer, 0, read)","position":"org.apache.commons.codec.digest.DigestUtils:797","type":"CtInvocationImpl","sourcecode":"digest.update(buffer, 0, read)"},"status":-2},{"failures":[],"tindex":"cf6903d0-16e0-11e6-86bb-f123fcab54b7","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder sb = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:378","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"cf6903d1-16e0-11e6-86bb-1954e267ea50","series":0,"name":"add","transplant":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char code","position":"org.apache.commons.codec.language.ColognePhonetic:333","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[58,54,55],"tindex":"cf6903d2-16e0-11e6-86bb-394ab1be6d7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n    result.append('K');\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n    result.append('J');\n} else {\n    result.append('J', 'K');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:442","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n    result.append('K');\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n    result.append('J');\n} else {\n    result.append('J', 'K');\n}"},"status":-1},{"failures":[52,53],"tindex":"cf692ae3-16e0-11e6-86bb-437c51581a1b","series":0,"name":"replace","transplant":{"toString":"d &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"offset"},"type":"adrStmt","transplantationPoint":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8","position":"org.apache.commons.codec.digest.UnixCrypt:386","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8"},"status":-1},{"failures":[],"tindex":"cf692ae4-16e0-11e6-86bb-c185361a65c3","series":0,"name":"replace","transplant":{"toString":"final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.RADIX))","position":"org.apache.commons.codec.net.URLCodec:143","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"variableMap":{"b":"index2","org.apache.commons.codec.net.URLCodec.RADIX":"index2"},"type":"adrStmt","transplantationPoint":{"toString":"char c2 = substring.charAt((index2++))","position":"org.apache.commons.codec.binary.CharSequenceUtils:60","type":"CtLocalVariableImpl","sourcecode":"char char = substring.charAt((index2++))"},"status":-3},{"failures":[],"tindex":"cf692ae5-16e0-11e6-86bb-bfffe7ebc6c4","series":0,"name":"replace","transplant":{"toString":"diff++","position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"modulus"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base64:380","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[0,1,2,121,3,4,5,6,7,122,123,124],"tindex":"cf692ae6-16e0-11e6-86bb-d94a8f2e4211","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return buffer.toString()","position":"org.apache.commons.codec.digest.Sha2Crypt:506","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[],"tindex":"cf692ae7-16e0-11e6-86bb-21d11588588b","series":0,"name":"add","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"if (0 == (context.modulus)) {\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 18) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 12) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[((context.ibitWorkArea) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    context.currentLinePos += org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n        java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n        context.pos += lineSeparator.length;\n        context.currentLinePos = 0;\n    } \n} ","position":"org.apache.commons.codec.binary.Base64:386","type":"CtIfImpl","sourcecode":"if (0 == (context.int)) {\n    buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    if (((int) > 0) && ((int) <= (context.int))) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n        context.int = 0;\n    } \n} "},"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
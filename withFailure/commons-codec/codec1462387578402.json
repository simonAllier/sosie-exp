{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":47,"org.apache.commons.codec.binary.HexTest.testCustomCharset":38,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":68,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":82,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":74,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":95,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":73,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":88,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":46,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":8,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":59,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":87,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":3,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":21,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":17,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":22,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":25,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":23,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":24,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":44,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":49,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":56,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":53,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":43,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":27,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":9,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":99,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":67,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":72,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":76,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":89,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":14,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":86,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":35,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":69,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":71,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":96,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":98,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":39,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":66,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":36,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":91,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":83,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":58,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":78,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":75,"org.apache.commons.codec.binary.Base64Test.testBase64":32,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":94,"org.apache.commons.codec.binary.Base64Test.testUUID":19,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":63,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":15,"org.apache.commons.codec.binary.Base64Test.testSingletons":30,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":92,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":5,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":54,"org.apache.commons.codec.binary.Base64Test.testPairs":18,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":41,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":57,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":4,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":33,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":97,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":93,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":79,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":2,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":81,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":40,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":61,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":100,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":12,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":37,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":48,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":28,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":34,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":29,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":70,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":13,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":55,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":90,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":6,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":85,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":7,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":45,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":52,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":31,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":84,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":77,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":1,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":50,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":80,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":10,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":20},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"7cdf9ca3-1228-11e6-b4be-6bae18ef01af","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"switch (context.modulus) {\n    case 1 :\n        break;\n    case 2 :\n        context.ibitWorkArea = (context.ibitWorkArea) >> 4;\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 3 :\n        context.ibitWorkArea = (context.ibitWorkArea) >> 2;\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base64:466","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 1 :\n        break;\n    case 2 :\n        context.int = (context.int) >> 4;\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        context.int = (context.int) >> 2;\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-1},{"failures":[],"tindex":"7ce038e4-1228-11e6-b4be-b924b46e9aec","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.CharSequenceUtils:67","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"7ce038e5-1228-11e6-b4be-25959acff25c","series":0,"name":"replace","transplant":{"toString":"if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n} ","position":"org.apache.commons.codec.binary.Base32:495","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"variableMap":{"currentLinePos":"offset","pos":"len","context":"context","length":"len","buffer":"b","lineSeparator":"b","lineLength":"len"},"type":"adrStmt","transplantationPoint":{"toString":"if (doEncode) {\n    baseNCodec.encode(b, offset, len, context);\n} else {\n    baseNCodec.decode(b, offset, len, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:92","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-3},{"failures":[],"tindex":"7ce05ff6-1228-11e6-b4be-2bb6036bfd39","series":0,"name":"add","transplant":{"toString":"return encode(((java.lang.String)(pObject)))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:114","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(pObject)))"},"variableMap":{"pObject":"source"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(source)))","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:88","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(source)))"},"status":-2},{"failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"7ce08707-1228-11e6-b4be-5bcf0fde4143","series":0,"name":"add","transplant":{"toString":"l_ascii[(jj - bits)] = '1'","position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"j","l_ascii":"out","bits":"i"},"type":"adrStmt","transplantationPoint":{"toString":"out[(j++)] = toDigits[(15 & (data[i]))]","position":"org.apache.commons.codec.binary.Hex:146","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[(15 & (data[i]))]"},"status":-1},{"failures":[60,61],"tindex":"7ce08708-1228-11e6-b4be-3552f8ba9b05","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"last = current","position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"status":-1},{"failures":[62,63,64,65,66,67,68,69],"tindex":"7ce0ae19-1228-11e6-b4be-3fe5f1e6d967","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"value","leftCharacter":"value","rightCharacter":"value","location":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:538","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}"},"status":-1},{"failures":[],"tindex":"7ce0d52a-1228-11e6-b4be-e9a004823035","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", lcon='\").append(lCon).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:466","type":"CtInvocationImpl","sourcecode":"sb.append(\", lcon='\").append(lCon).append('\\'')"},"status":0},{"failures":[],"tindex":"7ce0d52b-1228-11e6-b4be-f75c3e5a4e61","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int c = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0)","position":"org.apache.commons.codec.digest.UnixCrypt:340","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0)"},"status":-2},{"failures":[],"tindex":"7ce0d52c-1228-11e6-b4be-0556acaa7219","series":0,"name":"replace","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"length","name2Size":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if (salt == null) {\n    final java.util.Random randomGenerator = new java.util.Random();\n    final int numSaltChars = org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS.length;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    final java.util.Random java.util.Random = new java.util.Random();\n    final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-2},{"failures":[70,71,72,73,74,75,76,77,78],"tindex":"7ce1234d-1228-11e6-b4be-e9e0c8e42b02","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String rawLine = scanner.nextLine();\n    java.lang.String line = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)) {\n            inMultilineComment = false;\n        } \n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)) {\n        inMultilineComment = true;\n    } else {\n        final int cmtI = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.COMMENT);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.contains(\"=\")) {\n            final java.lang.String[] parts = line.split(\"=\");\n            if ((parts.length) != 2) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                final java.lang.String leftCharacter = parts[0];\n                final java.lang.String rightCharacter = parts[1];\n                if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                } \n                asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n            }\n        } else {\n            final java.lang.String[] parts = line.split(\"\\\\s+\");\n            if ((parts.length) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String pattern = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                    final java.lang.String replacement1 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                    final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                    final java.lang.String replacement3 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule r = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                    final char patternKey = r.pattern.charAt(0);\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = ruleMapping.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                        ruleMapping.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:255","type":"CtWhileImpl","sourcecode":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String java.lang.String = scanner.nextLine();\n    java.lang.String java.lang.String = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n            inMultilineComment = false;\n        } \n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        inMultilineComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.contains(\"=\")) {\n            final java.lang.String[] java.lang.String[] = line.split(\"=\");\n            if ((parts.int) != 2) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                final java.lang.String java.lang.String = parts[0];\n                final java.lang.String java.lang.String = parts[1];\n                if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                } \n                asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                    final char char = r.java.lang.String.charAt(0);\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                        ruleMapping.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"7ce1bf8e-1228-11e6-b4be-0781daf760f0","series":0,"name":"add","transplant":{"toString":"return this","position":"org.apache.commons.codec.language.bm.Languages:234","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return ls.equals(org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES) ? org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE : ls","position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls"},"status":-2},{"failures":[70,71,72,73,74,78],"tindex":"7ce1bf8f-1228-11e6-b4be-5fe1693f691b","series":0,"name":"replace","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:472","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-1},{"failures":[],"tindex":"7ce1bf90-1228-11e6-b4be-2fa21f1404a7","series":0,"name":"add","transplant":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"status":-2},{"failures":[70,71,72,73,74,75,76,77,78],"tindex":"7ce1e6a1-1228-11e6-b4be-3bab946b1b6d","series":0,"name":"replace","transplant":{"toString":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"variableMap":{"ch":"ch"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String nextReplacement : replacements) {\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n    final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n    nextBranch.processNextReplacement(nextReplacement, force);\n    if (branching) {\n        nextBranches.add(nextBranch);\n    } else {\n        break;\n    }\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:523","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : replacements) {\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n    final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n    nextBranch.processNextReplacement(nextReplacement, force);\n    if (branching) {\n        nextBranches.add(nextBranch);\n    } else {\n        break;\n    }\n}"},"status":-1},{"failures":[],"tindex":"7ce20db2-1228-11e6-b4be-f920de5217f4","series":0,"name":"replace","transplant":{"toString":"if (lineLength > 0) {\n    this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:283","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"cp","encodeSize":"cp","length":"cp","lineSeparator":"tempResult","lineLength":"cp"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"status":-3},{"failures":[],"tindex":"7ce20db3-1228-11e6-b4be-0918528bc35a","series":0,"name":"replace","transplant":{"toString":"(length)++","position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"length":"cp"},"type":"adrStmt","transplantationPoint":{"toString":"cp = 0","position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"status":-3},{"failures":[],"tindex":"7ce234c4-1228-11e6-b4be-115bd9cc458a","series":0,"name":"add","transplant":{"toString":"final java.lang.String firstLetter = name.substring(0, 1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"variableMap":{"name":"input"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String inputContext = input.substring(index)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:504","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(index)"},"status":-2},{"failures":[],"tindex":"7ce234c5-1228-11e6-b4be-395e5d157a8b","series":0,"name":"replace","transplant":{"toString":"if (next == 'N') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_NN;\n} else {\n    return org.apache.commons.codec.language.Nysiis.CHARS_C;\n}","position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (next == 'N') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n}"},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_G","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"toString":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_G;\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_S;\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_N;\n} ","position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-2},{"failures":[],"tindex":"7ce234c6-1228-11e6-b4be-f72084d7f86a","series":0,"name":"replace","transplant":{"toString":"final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:185","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16))"},"variableMap":{"b":"index2"},"type":"adrStmt","transplantationPoint":{"toString":"char c2 = substring.charAt((index2++))","position":"org.apache.commons.codec.binary.CharSequenceUtils:60","type":"CtLocalVariableImpl","sourcecode":"char char = substring.charAt((index2++))"},"status":0},{"failures":[63],"tindex":"7ce234c7-1228-11e6-b4be-3f06d90b7f70","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.appendAlternate('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"status":-1},{"failures":[],"tindex":"7ce25bd8-1228-11e6-b4be-8d00d734a21c","series":0,"name":"replace","transplant":{"toString":"int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:287","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"variableMap":{"bytes":"bytes","i":"i"},"type":"adrStmt","transplantationPoint":{"toString":"final int u = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])","position":"org.apache.commons.codec.net.URLCodec:172","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"status":-2},{"failures":[70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"7ce25bd9-1228-11e6-b4be-3f863ecf715f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"inMultilineComment = true","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:268","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = true"},"status":-1},{"failures":[],"tindex":"7ce25bda-1228-11e6-b4be-f59279aa5b2c","series":0,"name":"add","transplant":{"toString":"java.lang.String boxContent = content.substring(1, ((content.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:549","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1))"},"variableMap":{"content":"input"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String remainder = input.substring(2)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:411","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(2)"},"status":-2},{"failures":[],"tindex":"7ce25bdb-1228-11e6-b4be-5d38a5c80808","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('*')","position":"org.apache.commons.codec.net.QCodec:75","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('*')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"status":0},{"failures":[],"tindex":"7ce25bdc-1228-11e6-b4be-2d004c681120","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('$')","position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('.')","position":"org.apache.commons.codec.net.QCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('.')"},"status":0},{"failures":[83,84,85,86,87,88,89,90],"tindex":"7ce282ed-1228-11e6-b4be-c5b5d15741f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:368","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}"},"status":-1},{"failures":[62,63],"tindex":"7ce2a9fe-1228-11e6-b4be-cbc554bd0cea","series":0,"name":"replace","transplant":{"toString":"result.append(\"S\", \"TS\")","position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:535","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"status":-1},{"failures":[],"tindex":"7ce2a9ff-1228-11e6-b4be-2b1ef3781750","series":0,"name":"add","transplant":{"toString":"return encode(((java.lang.String)(pObject)))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:114","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(pObject)))"},"variableMap":{"pObject":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}","position":"org.apache.commons.codec.net.BCodec:198","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"status":-2},{"failures":[],"tindex":"7ce2aa00-1228-11e6-b4be-f9e5fec25173","series":0,"name":"replace","transplant":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"source"},"type":"adrStmt","transplantationPoint":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-3},{"failures":[62,63,67],"tindex":"7ce2aa01-1228-11e6-b4be-d1b285f14248","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[0,1,2,91,92,93,94,95,96],"tindex":"7ce2d112-1228-11e6-b4be-d5b654945f8d","series":0,"name":"add","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"org.apache.commons.codec.net.RFC1522Codec.PREFIX","leftCharacter":"org.apache.commons.codec.net.RFC1522Codec.POSTFIX","rightCharacter":"org.apache.commons.codec.net.RFC1522Codec.POSTFIX","location":"org.apache.commons.codec.net.RFC1522Codec.PREFIX"},"type":"adrStmt","transplantationPoint":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"status":-1},{"failures":[],"tindex":"7ce2d113-1228-11e6-b4be-1d7c096c48d5","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"cq\", \"2q\")","position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone2:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[62,63,67],"tindex":"7ce2d114-1228-11e6-b4be-c136223ac352","series":0,"name":"replace","transplant":{"toString":"result.append('H')","position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[],"tindex":"7ce2d115-1228-11e6-b4be-611a3a338be3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))","position":"org.apache.commons.codec.digest.DigestUtils:438","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:762","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"status":0},{"failures":[],"tindex":"7ce2f826-1228-11e6-b4be-7fb9d610f52b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.Soundex.this.maxLength = maxLength","position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"variableMap":{"maxLength":"d"},"type":"adrStmt","transplantationPoint":{"toString":"d = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:349","type":"CtAssignmentImpl","sourcecode":"d = results[0]"},"status":-2},{"failures":[],"tindex":"7ce2f827-1228-11e6-b4be-59e90531d37f","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.lContext","position":"org.apache.commons.codec.language.bm.Rule:657","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern"},"variableMap":{"lContext":"org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER","position":"org.apache.commons.codec.language.bm.Rule:526","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern"},"status":-2},{"failures":[97,98,99,100],"tindex":"7ce2f828-1228-11e6-b4be-137a8788ad6e","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.SPACE)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.TAB))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:238","type":"CtReturnImpl","sourcecode":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))"},"status":-1},{"failures":[],"tindex":"7ce2f829-1228-11e6-b4be-459a6124a435","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((i % 7) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:386","type":"CtIfImpl","sourcecode":"if ((i % 7) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} "},"status":-2},{"failures":[],"tindex":"7ce2f82a-1228-11e6-b4be-adea1cb396ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:159","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":0},{"failures":[93],"tindex":"7ce2f82b-1228-11e6-b4be-05e48f62dada","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final byte b : bytes) {\n    if (b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n        hasUnderscores = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.net.QCodec:174","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        hasUnderscores = true;\n        break;\n    } \n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":41,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
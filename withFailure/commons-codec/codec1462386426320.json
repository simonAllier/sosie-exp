{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":97,"org.apache.commons.codec.binary.HexTest.testCustomCharset":103,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":39,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":70,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":100,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":69,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":120,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":4,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":82,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":58,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":119,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":26,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":38,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":62,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":92,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":118,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":60,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":63,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":10,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":22,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":111,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":110,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":83,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":64,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":109,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":53,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":89,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":113,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":95,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":49,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":98,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":78,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":90,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":86,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":115,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":94,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":107,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":55,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":33,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":48,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":116,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":61,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":28,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":76,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":40,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":6,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":0,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":77,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":9,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":52,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":13,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":23,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":84,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR":15,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":108,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":34,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":30,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":3,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":57,"org.apache.commons.codec.language.NysiisTest.testDropBy":44,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":114,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":68,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":32,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":79,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":93,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":67,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":66,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":106,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":91,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":56,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":29,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":105,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":50,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":5,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":73,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":102,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":54,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":112,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":1,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":75,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":85,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":72,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":88,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":59,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":41,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":36,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":96,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":101,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":35,"org.apache.commons.codec.language.SoundexTest.testDifference":81,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":7,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":99,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":65,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN":17,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":25},"transformations":[{"failures":[],"tindex":"ce2d3e10-1225-11e6-8d6c-4945ceef45e5","series":0,"name":"replace","transplant":{"toString":"upperName = removeAccents(upperName)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:91","type":"CtAssignmentImpl","sourcecode":"upperName = removeAccents(upperName)"},"variableMap":{"upperName":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ly\", \"Ly\")","position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"status":-2},{"failures":[],"tindex":"ce2d6521-1225-11e6-8d6c-15368de3f66d","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"mac.reset()","position":"org.apache.commons.codec.digest.HmacUtils:765","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"status":-2},{"failures":[],"tindex":"ce2d6522-1225-11e6-8d6c-9d093733fcd1","series":0,"name":"replace","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"n","y":"n"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(isPreviousChar(local, n, 'C'))) {\n    code.append(symb);\n} ","position":"org.apache.commons.codec.language.Metaphone:265","type":"CtIfImpl","sourcecode":"if (!(isPreviousChar(local, n, 'C'))) {\n    code.append(symb);\n} "},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"ce2d8c33-1225-11e6-8d6c-9d7a757ce38e","series":0,"name":"replace","transplant":{"toString":"return (n + 1) == wdsz","position":"org.apache.commons.codec.language.Metaphone:371","type":"CtReturnImpl","sourcecode":"return (n + 1) == wdsz"},"variableMap":{"wdsz":"count","n":"minRating"},"type":"adrStmt","transplantationPoint":{"toString":"return count >= minRating","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:260","type":"CtReturnImpl","sourcecode":"return count >= minRating"},"status":-1},{"failures":[14],"tindex":"ce2d8c34-1225-11e6-8d6c-0d388a2aefb4","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:211","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[],"tindex":"ce2db345-1225-11e6-8d6c-a15655e0c4c5","series":0,"name":"replace","transplant":{"toString":"name2 = removeDoubleConsonants(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"variableMap":{"name2":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"y\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"3\")"},"status":-2},{"failures":[],"tindex":"ce2db346-1225-11e6-8d6c-6986222d1ff5","series":0,"name":"replace","transplant":{"toString":"langs.retainAll(rule.languages)","position":"org.apache.commons.codec.language.bm.Lang:221","type":"CtInvocationImpl","sourcecode":"langs.retainAll(rule.java.util.Set<java.lang.String>)"},"variableMap":{"languages":"langs","rule":"rule","langs":"languages"},"type":"adrStmt","transplantationPoint":{"toString":"langs.removeAll(rule.languages)","position":"org.apache.commons.codec.language.bm.Lang:223","type":"CtInvocationImpl","sourcecode":"langs.removeAll(rule.java.util.Set<java.lang.String>)"},"status":-3},{"failures":[],"tindex":"ce2db347-1225-11e6-8d6c-fddcc5c328f4","series":0,"name":"replace","transplant":{"toString":"java.lang.String txt = source","position":"org.apache.commons.codec.language.Caverphone1:46","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = source"},"variableMap":{"source":"boxContent"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String bContent = boxContent","position":"org.apache.commons.codec.language.bm.Rule:556","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = boxContent"},"status":-2},{"failures":[],"tindex":"ce2dda58-1225-11e6-8d6c-15caf54af8e6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"status":0},{"failures":[],"tindex":"ce2dda59-1225-11e6-8d6c-375e539813b2","series":0,"name":"add","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"status":-2},{"failures":[],"tindex":"ce2dda5a-1225-11e6-8d6c-5df476095a95","series":0,"name":"replace","transplant":{"toString":"salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))","position":"org.apache.commons.codec.digest.Sha2Crypt:103","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"variableMap":{"salt":"txt","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^tough\", \"tou2f\")","position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"status":-3},{"failures":[0,15,16,17],"tindex":"ce2e016b-1225-11e6-8d6c-bbff9919612e","series":0,"name":"replace","transplant":{"toString":"name = cleanName(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:132","type":"CtAssignmentImpl","sourcecode":"name = cleanName(name)"},"variableMap":{"name":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:412","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[18,19,20],"tindex":"ce2e016c-1225-11e6-8d6c-1b95c8e05fdf","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('`')","position":"org.apache.commons.codec.net.QCodec:96","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('`')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:97","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"ce2e287d-1225-11e6-8d6c-bd6998a2bed9","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"if ((m == null) || (!(m.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:189","type":"CtIfImpl","sourcecode":"if ((m == null) || (!(m.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-2},{"failures":[21,22,23,24],"tindex":"ce2e287e-1225-11e6-8d6c-11a256909751","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[aeiou]\", \"3\")","position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[25,26],"tindex":"ce2e287f-1225-11e6-8d6c-998aa110fd28","series":0,"name":"add","transplant":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"variableMap":{"index":"right"},"type":"adrStmt","transplantationPoint":{"toString":"right = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:312","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-1},{"failures":[],"tindex":"ce2e4e90-1225-11e6-8d6c-f159794c57db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(source instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:85","type":"CtIfImpl","sourcecode":"if (!(source instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n} "},"status":0},{"failures":[],"tindex":"ce2e4e91-1225-11e6-8d6c-930dba4fca9a","series":0,"name":"replace","transplant":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"variableMap":{"a":"diff","t":"diff","n":"diff"},"type":"adrStmt","transplantationPoint":{"toString":"diff++","position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"status":-2},{"failures":[19],"tindex":"ce2e4e92-1225-11e6-8d6c-6fb602899308","series":0,"name":"add","transplant":{"toString":"inMultilineComment = false","position":"org.apache.commons.codec.language.bm.Rule:414","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"variableMap":{"inMultilineComment":"hasUnderscores"},"type":"adrStmt","transplantationPoint":{"toString":"hasUnderscores = true","position":"org.apache.commons.codec.net.QCodec:176","type":"CtAssignmentImpl","sourcecode":"hasUnderscores = true"},"status":-1},{"failures":[],"tindex":"ce2e4e93-1225-11e6-8d6c-49571d266502","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"length","to":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if (rule.matches(inputContext)) {\n    if (branching) {\n        nextBranches.clear();\n    } \n    final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n    final boolean branchingRequired = ((replacements.length) > 1) && branching;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n        for (final java.lang.String nextReplacement : replacements) {\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n            final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n            nextBranch.processNextReplacement(nextReplacement, force);\n            if (branching) {\n                nextBranches.add(nextBranch);\n            } else {\n                break;\n            }\n        }\n    }\n    if (branching) {\n        currentBranches.clear();\n        currentBranches.addAll(nextBranches);\n    } \n    index += (rule.getPatternLength()) - 1;\n    break;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:515","type":"CtIfImpl","sourcecode":"if (rule.matches(inputContext)) {\n    if (branching) {\n        nextBranches.clear();\n    } \n    final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n    final boolean boolean = ((replacements.int) > 1) && branching;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n        for (final java.lang.String java.lang.String : replacements) {\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n            final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n            nextBranch.processNextReplacement(nextReplacement, force);\n            if (branching) {\n                nextBranches.add(nextBranch);\n            } else {\n                break;\n            }\n        }\n    }\n    if (branching) {\n        currentBranches.clear();\n        currentBranches.addAll(nextBranches);\n    } \n    index += (rule.getPatternLength()) - 1;\n    break;\n} "},"status":-2},{"failures":[],"tindex":"ce2e9cb4-1225-11e6-8d6c-91bcf52faa8f","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] charsToTrim = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] langs = parts[1].split(\"\\\\+\")","position":"org.apache.commons.codec.language.bm.Lang:174","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\")"},"status":-2},{"failures":[],"tindex":"ce2e9cb5-1225-11e6-8d6c-5b912f7945f7","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"scanner.close()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:236","type":"CtInvocationImpl","sourcecode":"scanner.close()"},"status":-2},{"failures":[],"tindex":"ce2e9cb6-1225-11e6-8d6c-afa186e0cffc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.pattern = pattern","position":"org.apache.commons.codec.language.bm.Lang:86","type":"CtAssignmentImpl","sourcecode":"this.java.util.regex.Pattern = pattern"},"status":-2},{"failures":[],"tindex":"ce2f11e7-1225-11e6-8d6c-7303060fd83e","series":0,"name":"replace","transplant":{"toString":"pos = 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"variableMap":{"pos":"unencodedBlockSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.unencodedBlockSize = unencodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"status":-2},{"failures":[27,28,29],"tindex":"ce2f11e8-1225-11e6-8d6c-9d8a8034ac81","series":0,"name":"replace","transplant":{"toString":"name2Char[(name2Size - i)] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:327","type":"CtAssignmentImpl","sourcecode":"name2Char[(name2Size - i)] = ' '"},"variableMap":{"name2Char":"l_ascii","i":"jj","name2Size":"jj"},"type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '1'","position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"status":-1},{"failures":[],"tindex":"ce2f38f9-1225-11e6-8d6c-1909349d0f83","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))","position":"org.apache.commons.codec.binary.Base64:595","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))"},"variableMap":{"binaryData":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return bytes == null ? null : new java.lang.String(bytes , charset)","position":"org.apache.commons.codec.binary.StringUtils:257","type":"CtReturnImpl","sourcecode":"return bytes == null ? null : new java.lang.String(bytes , charset)"},"status":-2},{"failures":[],"tindex":"ce2f38fa-1225-11e6-8d6c-67af74060e60","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"terminator"},"type":"adrStmt","transplantationPoint":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-2},{"failures":[30],"tindex":"ce2f600b-1225-11e6-8d6c-a771667d0c89","series":0,"name":"replace","transplant":{"toString":"return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data))","position":"org.apache.commons.codec.binary.Hex:161","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))","position":"org.apache.commons.codec.digest.DigestUtils:688","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"status":-1},{"failures":[],"tindex":"ce2f600c-1225-11e6-8d6c-75cc70777fe8","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} ","position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[31,32,33],"tindex":"ce2f600d-1225-11e6-8d6c-edf11e1d5f40","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append(\"N\", \"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[],"tindex":"ce2f871e-1225-11e6-8d6c-4fc3cce586c0","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme left : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme join = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:109","type":"CtForEachImpl","sourcecode":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"ce2f871f-1225-11e6-8d6c-5f7685ee9612","series":0,"name":"add","transplant":{"toString":"return data","position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return data"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()"},"status":-2},{"failures":[34,35,36,37,38,39,40,41],"tindex":"ce2fae30-1225-11e6-8d6c-a5f3f393802f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, cnt)","position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-1},{"failures":[],"tindex":"ce2fae31-1225-11e6-8d6c-f5b261bb32ef","series":0,"name":"add","transplant":{"toString":"return index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return index + 1"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:362","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-2},{"failures":[42,43],"tindex":"ce2fae32-1225-11e6-8d6c-d1407e57b6d5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:375","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data)"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"status":-1},{"failures":[],"tindex":"ce2fae33-1225-11e6-8d6c-01ceae1503dd","series":0,"name":"replace","transplant":{"toString":"this.pattern = pattern","position":"org.apache.commons.codec.language.bm.Rule:645","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"variableMap":{"pattern":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tia\", \"sia\")","position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"status":-2},{"failures":[],"tindex":"ce2fae34-1225-11e6-8d6c-2b4032dd517e","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int rounds = org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT","position":"org.apache.commons.codec.digest.Sha2Crypt:139","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int"},"status":-2},{"failures":[],"tindex":"ce2fd545-1225-11e6-8d6c-710a18c05f92","series":0,"name":"add","transplant":{"toString":"for (int i = 0 ; (i < (key.length)) && (i < (original.length)) ; i++) {\n    final int iChar = original[i];\n    key[i] = ((byte)(iChar << 1));\n}","position":"org.apache.commons.codec.digest.UnixCrypt:220","type":"CtForImpl","sourcecode":"for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n    final int int = original[i];\n    key[i] = ((byte)(iChar << 1));\n}"},"variableMap":{"original":"lineSeparator","length":"length","key":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"status":-2},{"failures":[44],"tindex":"ce2fd546-1225-11e6-8d6c-330deaade0a4","series":0,"name":"replace","transplant":{"toString":"return new char[]{ prev }","position":"org.apache.commons.codec.language.Nysiis:159","type":"CtReturnImpl","sourcecode":"return new char[]{ prev }"},"variableMap":{"prev":"next"},"type":"adrStmt","transplantationPoint":{"toString":"if (next == 'N') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_NN;\n} else {\n    return org.apache.commons.codec.language.Nysiis.CHARS_C;\n}","position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (next == 'N') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n}"},"status":-1},{"failures":[],"tindex":"ce2fd547-1225-11e6-8d6c-d3b0c946308c","series":0,"name":"replace","transplant":{"toString":"if (c1 == c2) {\n    continue;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"hex2","c2":"hex2"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(hex2)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:187","type":"CtInvocationImpl","sourcecode":"buffer.write(hex2)"},"status":-2},{"failures":[],"tindex":"ce2fd548-1225-11e6-8d6c-61039c7c5002","series":0,"name":"replace","transplant":{"toString":"final java.io.InputStream lRulesIS = org.apache.commons.codec.language.bm.Lang.class.getClassLoader().getResourceAsStream(languageRulesResourceName)","position":"org.apache.commons.codec.language.bm.Lang:131","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName)"},"variableMap":{"org.apache.commons.codec.language.bm.Lang.class":"org.apache.commons.codec.language.bm.Languages.class","languageRulesResourceName":"resName"},"type":"adrStmt","transplantationPoint":{"toString":"final java.io.InputStream rulesIS = org.apache.commons.codec.language.bm.Languages.class.getClassLoader().getResourceAsStream(resName)","position":"org.apache.commons.codec.language.bm.Rule:255","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName)"},"status":0},{"failures":[0,3,4,5,45,46,47,9,10,13],"tindex":"ce2fd549-1225-11e6-8d6c-e5a0c4f5968a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name1 = removeVowels(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:231","type":"CtAssignmentImpl","sourcecode":"name1 = removeVowels(name1)"},"status":-1},{"failures":[48,49],"tindex":"ce2ffc5a-1225-11e6-8d6c-3b245325bfd2","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null)","position":"org.apache.commons.codec.digest.Crypt:46","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null)"},"variableMap":{"keyBytes":"original"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null)","position":"org.apache.commons.codec.digest.UnixCrypt:182","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null)"},"status":-1},{"failures":[],"tindex":"ce2ffc5b-1225-11e6-8d6c-53df563f75a1","series":0,"name":"replace","transplant":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str","l":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(str, getDefaultCharset())","position":"org.apache.commons.codec.net.URLCodec:293","type":"CtReturnImpl","sourcecode":"return decode(str, getDefaultCharset())"},"status":-2},{"failures":[],"tindex":"ce2ffc5c-1225-11e6-8d6c-139576e000e8","series":0,"name":"replace","transplant":{"toString":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch"},"status":-2},{"failures":[],"tindex":"ce2ffc5d-1225-11e6-8d6c-0d57b79fb449","series":0,"name":"replace","transplant":{"toString":"j++","position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"variableMap":{"j":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:524","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-3},{"failures":[],"tindex":"ce30236e-1225-11e6-8d6c-d98f5d72c776","series":0,"name":"replace","transplant":{"toString":"final boolean endsWith = regex.endsWith(\"$\")","position":"org.apache.commons.codec.language.bm.Rule:501","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = regex.endsWith(\"$\")"},"variableMap":{"regex":"content"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean endsWithBox = content.endsWith(\"]\")","position":"org.apache.commons.codec.language.bm.Rule:546","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.endsWith(\"]\")"},"status":0},{"failures":[31,32],"tindex":"ce30236f-1225-11e6-8d6c-c56e0407c24d","series":0,"name":"replace","transplant":{"toString":"u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"ce302370-1225-11e6-8d6c-1bbcd3417f80","series":0,"name":"replace","transplant":{"toString":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n        this.lineSeparator = new byte[lineSeparator.length];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n    } else {\n        this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n        this.lineSeparator = null;\n    }\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:278","type":"CtIfImpl","sourcecode":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n        this.byte[] = new byte[lineSeparator.int];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n    } else {\n        this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        this.byte[] = null;\n    }\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"i","encodeSize":"y","length":"u","lineSeparator":"b","lineLength":"i"},"type":"adrStmt","transplantationPoint":{"toString":"for ( ; i < 13 ; i++) {\n    int j = 0;\n    int c = 0;\n    for ( ; j < 6 ; j++) {\n        c <<= 1;\n        if (((b[y]) & u) != 0) {\n            c |= 1;\n        } \n        u >>>= 1;\n        if (u == 0) {\n            y++;\n            u = 128;\n        } \n        buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.COV2CHAR[c])));\n    }\n}","position":"org.apache.commons.codec.digest.UnixCrypt:234","type":"CtForImpl","sourcecode":"for ( ; i < 13 ; i++) {\n    int int = 0;\n    int int = 0;\n    for ( ; j < 6 ; j++) {\n        c <<= 1;\n        if (((b[y]) & u) != 0) {\n            c |= 1;\n        } \n        u >>>= 1;\n        if (u == 0) {\n            y++;\n            u = 128;\n        } \n        buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n    }\n}"},"status":-3},{"failures":[50],"tindex":"ce304a81-1225-11e6-8d6c-4fc268c2a52c","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[],"tindex":"ce304a82-1225-11e6-8d6c-05ccc6f20151","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(finalb, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:298","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"status":-2},{"failures":[],"tindex":"ce304a83-1225-11e6-8d6c-715eb4d9a76d","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (arrayOctet.length) ; i++) {\n    if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.binary.Base64:538","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n    if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n        return false;\n    } \n}"},"variableMap":{"arrayOctet":"decodeTable","length":"length"},"type":"adrStmt","transplantationPoint":{"toString":"return ((octet >= 0) && (octet < (decodeTable.length))) && ((decodeTable[octet]) != (-1))","position":"org.apache.commons.codec.binary.Base32:537","type":"CtReturnImpl","sourcecode":"return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1))"},"status":-2},{"failures":[51,52,53,54,55],"tindex":"ce307194-1225-11e6-8d6c-e7210759cc15","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"status":-1},{"failures":[],"tindex":"ce307195-1225-11e6-8d6c-03cee2f93816","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:528","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'))"},"status":-2},{"failures":[],"tindex":"ce307196-1225-11e6-8d6c-8b9eb8ddbb28","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[56,57,58,59,60,61,62,63],"tindex":"ce307197-1225-11e6-8d6c-41164a7b5204","series":0,"name":"replace","transplant":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"variableMap":{"rules":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inMultilineComment = true;\n} else {\n    final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)) {\n        final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim();\n        if (incl.contains(\" \")) {\n            throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n        } else {\n            lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n        }\n    } else {\n        final java.lang.String[] parts = line.split(\"\\\\s+\");\n        if ((parts.length) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                final int cLine = currentLine;\n                final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                    private final int myLine = cLine;\n\n                    private final java.lang.String loc = location;\n\n                    @java.lang.Override\n                    public java.lang.String toString() {\n                        final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                        sb.append(\"Rule\");\n                        sb.append(\"{line=\").append(myLine);\n                        sb.append(\", loc='\").append(loc).append('\\'');\n                        sb.append(\", pat='\").append(pat).append('\\'');\n                        sb.append(\", lcon='\").append(lCon).append('\\'');\n                        sb.append(\", rcon='\").append(rCon).append('\\'');\n                        sb.append('}');\n                        return sb.toString();\n                    }\n                };\n                final java.lang.String patternKey = r.pattern.substring(0, 1);\n                java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                    lines.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n        final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n        if (incl.contains(\" \")) {\n            throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n        } else {\n            lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                final int int = currentLine;\n                final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                    private final int myLine = cLine;\n\n                    private final java.lang.String loc = location;\n\n                    @java.lang.Override\n                    public java.lang.String toString() {\n                        final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                        sb.append(\"Rule\");\n                        sb.append(\"{line=\").append(int);\n                        sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                        sb.append(\", pat='\").append(pat).append('\\'');\n                        sb.append(\", lcon='\").append(lCon).append('\\'');\n                        sb.append(\", rcon='\").append(rCon).append('\\'');\n                        sb.append('}');\n                        return sb.toString();\n                    }\n                };\n                final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                    lines.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"ce30bfb8-1225-11e6-8d6c-a9de128589f9","series":0,"name":"add","transplant":{"toString":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:339","type":"CtWhileImpl","sourcecode":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"org.apache.commons.codec.digest.Md5Crypt.ROUNDS","sBytes":"keyBytes","tempResult":"saltBytes","saltLen":"org.apache.commons.codec.digest.Md5Crypt.ROUNDS","cp":"org.apache.commons.codec.digest.Md5Crypt.ROUNDS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.ROUNDS) ; i++) {\n    ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n    if ((i & 1) != 0) {\n        ctx1.update(keyBytes);\n    } else {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE);\n    }\n    if ((i % 3) != 0) {\n        ctx1.update(saltBytes);\n    } \n    if ((i % 7) != 0) {\n        ctx1.update(keyBytes);\n    } \n    if ((i & 1) != 0) {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE);\n    } else {\n        ctx1.update(keyBytes);\n    }\n    finalb = ctx1.digest();\n}","position":"org.apache.commons.codec.digest.Md5Crypt:256","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n    ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n    if ((i & 1) != 0) {\n        ctx1.update(keyBytes);\n    } else {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n    }\n    if ((i % 3) != 0) {\n        ctx1.update(saltBytes);\n    } \n    if ((i % 7) != 0) {\n        ctx1.update(keyBytes);\n    } \n    if ((i & 1) != 0) {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n    } else {\n        ctx1.update(keyBytes);\n    }\n    finalb = ctx1.digest();\n}"},"status":-2},{"failures":[],"tindex":"ce30bfb9-1225-11e6-8d6c-6fafb8787dee","series":0,"name":"replace","transplant":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}"},"status":-2},{"failures":[],"tindex":"ce30bfba-1225-11e6-8d6c-1df561d1df00","series":0,"name":"replace","transplant":{"toString":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtIfImpl","sourcecode":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} "},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return metaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Metaphone:392","type":"CtReturnImpl","sourcecode":"return metaphone(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"ce30e6cb-1225-11e6-8d6c-9f3182e60a12","series":0,"name":"replace","transplant":{"toString":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"c","minRating":"c"},"type":"adrStmt","transplantationPoint":{"toString":"c = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:356","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-3},{"failures":[],"tindex":"ce30e6cc-1225-11e6-8d6c-e9cda730d307","series":0,"name":"replace","transplant":{"toString":"altCtx.update(saltBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:200","type":"CtInvocationImpl","sourcecode":"altCtx.update(saltBytes)"},"variableMap":{"altCtx":"ctx1","saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:219","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-3},{"failures":[],"tindex":"ce30e6cd-1225-11e6-8d6c-d1788e1788c6","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this","position":"org.apache.commons.codec.language.bm.Rule:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(((org.apache.commons.codec.language.bm.Rule.Phoneme.this.phonemeText.toString()) + (right.phonemeText.toString())) , org.apache.commons.codec.language.bm.Rule.Phoneme.this.languages.restrictTo(right.languages))","position":"org.apache.commons.codec.language.bm.Rule:151","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(((org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.toString()) + (right.java.lang.StringBuilder.toString())) , org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet.restrictTo(right.org.apache.commons.codec.language.bm.Languages.LanguageSet))"},"status":0},{"failures":[64,56,65,57,58,66,67,59,68,69,70,71,72,73,60,61,62,63],"tindex":"ce30e6ce-1225-11e6-8d6c-d1508fb19526","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-1},{"failures":[74,75,76,77,78,79,80],"tindex":"ce310ddf-1225-11e6-8d6c-a5809816f764","series":0,"name":"add","transplant":{"toString":"altCtx.update(keyBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:194","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"variableMap":{"altCtx":"ctx1","keyBytes":"saltBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(saltBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:218","type":"CtInvocationImpl","sourcecode":"ctx1.update(saltBytes)"},"status":-1},{"failures":[],"tindex":"ce310de0-1225-11e6-8d6c-1b4f72233acc","series":0,"name":"replace","transplant":{"toString":"name = getFirst3Last3(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"name = getFirst3Last3(name)"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"h\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"status":-2},{"failures":[25,26],"tindex":"ce310de1-1225-11e6-8d6c-bd118c77d494","series":0,"name":"replace","transplant":{"toString":"b ^= t","position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"variableMap":{"b":"left","t":"left"},"type":"adrStmt","transplantationPoint":{"toString":"t = left","position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"status":-1},{"failures":[],"tindex":"ce310de2-1225-11e6-8d6c-6f54bd342765","series":0,"name":"replace","transplant":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"variableMap":{"a":"left","t":"left","n":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:313","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-2},{"failures":[30],"tindex":"ce310de3-1225-11e6-8d6c-a145456117d3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_512)","position":"org.apache.commons.codec.digest.DigestUtils:160","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[],"tindex":"ce310de4-1225-11e6-8d6c-e99be56cedac","series":0,"name":"replace","transplant":{"toString":"final char last2Char = key.charAt(((key.length()) - 2))","position":"org.apache.commons.codec.language.Nysiis:302","type":"CtLocalVariableImpl","sourcecode":"final char char = key.charAt(((key.length()) - 2))"},"variableMap":{"key":"key"},"type":"adrStmt","transplantationPoint":{"toString":"char lastChar = key.charAt(((key.length()) - 1))","position":"org.apache.commons.codec.language.Nysiis:293","type":"CtLocalVariableImpl","sourcecode":"char char = key.charAt(((key.length()) - 1))"},"status":-2},{"failures":[],"tindex":"ce3134f5-1225-11e6-8d6c-2561ce84ca0a","series":0,"name":"add","transplant":{"toString":"code = '8'","position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"code = '8'"},"variableMap":{"code":"nextChar"},"type":"adrStmt","transplantationPoint":{"toString":"nextChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:344","type":"CtAssignmentImpl","sourcecode":"nextChar = '-'"},"status":0},{"failures":[60,61,62,63],"tindex":"ce3134f6-1225-11e6-8d6c-07af0eebf331","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} "},"status":-1},{"failures":[81],"tindex":"ce3134f7-1225-11e6-8d6c-11bbb721316b","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.Soundex:260","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"ce3134f8-1225-11e6-8d6c-3dcf48e897bb","series":0,"name":"replace","transplant":{"toString":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.encodeSize = (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base32:290","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.int = (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n    this.byte[] = null;\n}"},"variableMap":{"encodeSize":"blocksize","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"blocksize","length":"blocksize","lineSeparator":"tempResult","lineLength":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"status":-3},{"failures":[],"tindex":"ce315c09-1225-11e6-8d6c-3137b2675b1e","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder sb = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:464","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"ce315c0a-1225-11e6-8d6c-1d17264ddeab","series":0,"name":"replace","transplant":{"toString":"return metaphone(str)","position":"org.apache.commons.codec.language.Metaphone:403","type":"CtReturnImpl","sourcecode":"return metaphone(str)"},"variableMap":{"str":"org.apache.commons.codec.language.bm.Languages.ANY"},"type":"adrStmt","transplantationPoint":{"toString":"return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.ANY","position":"org.apache.commons.codec.language.bm.Lang:204","type":"CtReturnImpl","sourcecode":"return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String"},"status":-2},{"failures":[],"tindex":"ce315c0b-1225-11e6-8d6c-95bdf8741d49","series":0,"name":"replace","transplant":{"toString":"this.stringEncoder = stringEncoder","position":"org.apache.commons.codec.StringEncoderComparator:58","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = stringEncoder"},"variableMap":{"stringEncoder":"stringEncoder"},"type":"adrStmt","transplantationPoint":{"toString":"this.stringEncoder = null","position":"org.apache.commons.codec.StringEncoderComparator:48","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = null"},"status":-2},{"failures":[82,83,84,85,86,87,88,89,90,91,30,92,93,94,95,96,14,97,43,98,99,100,101,102,103,104,105,106,107],"tindex":"ce315c0c-1225-11e6-8d6c-3b951aaa8eb0","series":0,"name":"replace","transplant":{"toString":"final char[] chars = new char[len]","position":"org.apache.commons.codec.language.SoundexUtils:46","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[len]"},"variableMap":{"len":"l"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] out = new char[l << 1]","position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"status":-1},{"failures":[51,108],"tindex":"ce315c0d-1225-11e6-8d6c-e7d4f77b5a9c","series":0,"name":"replace","transplant":{"toString":"v &= e1","position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"b","e1":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b = 256 + b","position":"org.apache.commons.codec.net.URLCodec:133","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"status":-1},{"failures":[],"tindex":"ce31831e-1225-11e6-8d6c-e556d311f975","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n    result.append('K');\n    index += 2;\n} else if (index == 0) {\n    if ((charAt(value, (index + 2))) == 'I') {\n        result.append('J');\n    } else {\n        result.append('K');\n    }\n    index += 2;\n} else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n    index += 2;\n} else {\n    if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        result.append('F');\n    } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n        result.append('K');\n    } \n    index += 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:467","type":"CtIfImpl","sourcecode":"if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n    result.append('K');\n    index += 2;\n} else if (index == 0) {\n    if ((charAt(value, (index + 2))) == 'I') {\n        result.append('J');\n    } else {\n        result.append('K');\n    }\n    index += 2;\n} else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n    index += 2;\n} else {\n    if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        result.append('F');\n    } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n        result.append('K');\n    } \n    index += 2;\n}"},"status":-2},{"failures":[],"tindex":"ce31831f-1225-11e6-8d6c-916af5902451","series":0,"name":"add","transplant":{"toString":"final char c = charAt(value, (index + 2))","position":"org.apache.commons.codec.language.DoubleMetaphone:791","type":"CtLocalVariableImpl","sourcecode":"final char char = charAt(value, (index + 2))"},"variableMap":{"index":"index1","value":"cs"},"type":"adrStmt","transplantationPoint":{"toString":"char c1 = cs.charAt((index1++))","position":"org.apache.commons.codec.binary.CharSequenceUtils:59","type":"CtLocalVariableImpl","sourcecode":"char char = cs.charAt((index1++))"},"status":-2},{"failures":[],"tindex":"ce318320-1225-11e6-8d6c-ab944d9a6837","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ly\", \"Ly\")","position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"status":0},{"failures":[],"tindex":"ce31aa31-1225-11e6-8d6c-1d075793617b","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"inAvail"},"type":"adrStmt","transplantationPoint":{"toString":"if (inAvail < 0) {\n    context.eof = true;\n} ","position":"org.apache.commons.codec.binary.Base64:432","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"ce31aa32-1225-11e6-8d6c-4bdc5fa38190","series":0,"name":"add","transplant":{"toString":"name = removeVowels(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:136","type":"CtAssignmentImpl","sourcecode":"name = removeVowels(name)"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tio\", \"sio\")","position":"org.apache.commons.codec.language.Caverphone1:79","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tio\", \"sio\")"},"status":-2},{"failures":[34,35,36,37,38],"tindex":"ce31aa33-1225-11e6-8d6c-dd4dea76101f","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:464","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:462","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer)"},"status":-1},{"failures":[],"tindex":"ce31aa34-1225-11e6-8d6c-5d426a73b0f6","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:604","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}"},"variableMap":{"input":"other","prefix":"other"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n    return false;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:105","type":"CtIfImpl","sourcecode":"if (!(other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)) {\n    return false;\n} "},"status":-2},{"failures":[109,110,111,112,113,114,115,116],"tindex":"ce31aa35-1225-11e6-8d6c-0b45fa5e0798","series":0,"name":"replace","transplant":{"toString":"if (element == key) {\n    return true;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (element == key) {\n    return true;\n} "},"variableMap":{"key":"key","element":"key"},"type":"adrStmt","transplantationPoint":{"toString":"for (final char element : arr) {\n    if (element == key) {\n        return true;\n    } \n}","position":"org.apache.commons.codec.language.ColognePhonetic:300","type":"CtForEachImpl","sourcecode":"for (final char char : arr) {\n    if (element == key) {\n        return true;\n    } \n}"},"status":-1},{"failures":[],"tindex":"ce31d146-1225-11e6-8d6c-6f9dd9a538ac","series":0,"name":"replace","transplant":{"toString":"return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1))","position":"org.apache.commons.codec.language.DoubleMetaphone:858","type":"CtReturnImpl","sourcecode":"return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1))"},"variableMap":{"value":"value2"},"type":"adrStmt","transplantationPoint":{"toString":"return isDoubleMetaphoneEqual(value1, value2, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:231","type":"CtReturnImpl","sourcecode":"return isDoubleMetaphoneEqual(value1, value2, false)"},"status":-2},{"failures":[],"tindex":"ce31d147-1225-11e6-8d6c-9bb9c313aff6","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:111","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[117,118,119,120],"tindex":"ce31d148-1225-11e6-8d6c-95710c058461","series":0,"name":"replace","transplant":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[],"tindex":"ce31d149-1225-11e6-8d6c-e53a100f1916","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:490","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"ce31d14a-1225-11e6-8d6c-753ff6f5c7ad","series":0,"name":"add","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"keyLen","to":"keyLen"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(pBytes, 0, keyLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:387","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-2},{"failures":[],"tindex":"ce31d14b-1225-11e6-8d6c-5164b6fcafb1","series":0,"name":"add","transplant":{"toString":"int patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int left = 0","position":"org.apache.commons.codec.digest.UnixCrypt:282","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"ce31d14c-1225-11e6-8d6c-a11b65459901","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"KN\", \"N\")","position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\", \"N\")"},"status":-2},{"failures":[],"tindex":"ce31f85d-1225-11e6-8d6c-890ae47e2c23","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name2 = removeDoubleConsonants(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"status":0},{"failures":[],"tindex":"ce31f85e-1225-11e6-8d6c-c367a82b0d4e","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('^')","position":"org.apache.commons.codec.net.QCodec:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('^')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('-')","position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"status":-2},{"failures":[],"tindex":"ce31f85f-1225-11e6-8d6c-d5f7302c1a05","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)","position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"variableMap":{"byteArray":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}","position":"org.apache.commons.codec.net.BCodec:198","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"status":-2},{"failures":[31,32],"tindex":"ce31f860-1225-11e6-8d6c-23dca594d048","series":0,"name":"replace","transplant":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.appendAlternate('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"status":-1},{"failures":[25,26],"tindex":"ce321f71-1225-11e6-8d6c-5bc9a1f8b14a","series":0,"name":"replace","transplant":{"toString":"c |= 1","position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"variableMap":{"c":"value"},"type":"adrStmt","transplantationPoint":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24","position":"org.apache.commons.codec.digest.UnixCrypt:388","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24"},"status":-1},{"failures":[],"tindex":"ce321f72-1225-11e6-8d6c-81cb1ea474a6","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName))","position":"org.apache.commons.codec.language.bm.Languages:175","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName))"},"status":-2},{"failures":[],"tindex":"ce321f73-1225-11e6-8d6c-c55c018fddc3","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"ce\", \"se\")","position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ce\", \"se\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"toString":"line = line.trim()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:277","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
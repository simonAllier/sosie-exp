{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":58,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":38,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":25,"org.apache.commons.codec.language.NysiisTest.testDropBy":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":29,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":28,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":7,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":44,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":20,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":51,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":3,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":18,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":11,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":59,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":48,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":5,"org.apache.commons.codec.language.NysiisTest.testRule7":53,"org.apache.commons.codec.language.NysiisTest.testRule6":52,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":2,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":46,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":47,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":22,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":4,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":33,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":43,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":56,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":61,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":32,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":27,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":10,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":49,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":55,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":35,"org.apache.commons.codec.language.SoundexTest.testDifference":12,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":41,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":24,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":14,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":6},"transformations":[{"failures":[],"tindex":"a68ba3fa-16e5-11e6-a43b-810f0a060b0d","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"ii","to":"ii"},"type":"adrStmt","transplantationPoint":{"toString":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-2},{"failures":[],"tindex":"a68bcb0b-16e5-11e6-a43b-5114dd9cbaea","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"scanner.close()","position":"org.apache.commons.codec.language.bm.Lang:182","type":"CtInvocationImpl","sourcecode":"scanner.close()"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"a68bcb0c-16e5-11e6-a43b-832b227c9d70","series":0,"name":"replace","transplant":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append(symb)","position":"org.apache.commons.codec.language.Metaphone:162","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-1},{"failures":[6,7],"tindex":"a68bcb0d-16e5-11e6-a43b-8907ff38e888","series":0,"name":"replace","transplant":{"toString":"w >>= 6","position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"variableMap":{"w":"c"},"type":"adrStmt","transplantationPoint":{"toString":"c = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:350","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[8,9,10],"tindex":"a68bf21e-16e5-11e6-a43b-e73bac6d605b","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"status":-1},{"failures":[11],"tindex":"a68bf21f-16e5-11e6-a43b-63da6fdf4cc1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"a68bf220-16e5-11e6-a43b-e1349dc9ee6c","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:314","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[12,13],"tindex":"a68bf221-16e5-11e6-a43b-7bb1c9217873","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"diff++","position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"status":-1},{"failures":[],"tindex":"a68bf222-16e5-11e6-a43b-37520853ff7b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code = '0'","position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"code = '0'"},"status":-2},{"failures":[14,15],"tindex":"a68c1933-16e5-11e6-a43b-cde90f1d4997","series":0,"name":"replace","transplant":{"toString":"n++","position":"org.apache.commons.codec.language.Metaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"variableMap":{"n":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:424","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[16],"tindex":"a68c1934-16e5-11e6-a43b-6d584c95b06b","series":0,"name":"add","transplant":{"toString":"todo -= len","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:206","type":"CtOperatorAssignmentImpl","sourcecode":"todo -= len"},"variableMap":{"todo":"len","len":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"toString":"len += (((len + (lineLength)) - 1) / (lineLength)) * (chunkSeparatorLength)","position":"org.apache.commons.codec.binary.BaseNCodec:521","type":"CtOperatorAssignmentImpl","sourcecode":"len += (((len + (int)) - 1) / (int)) * (int)"},"status":-1},{"failures":[],"tindex":"a68c1935-16e5-11e6-a43b-e7b033438118","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Soundex.this.soundexMapping","position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"variableMap":{"soundexMapping":"out"},"type":"adrStmt","transplantationPoint":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:148","type":"CtReturnImpl","sourcecode":"return out"},"status":-3},{"failures":[],"tindex":"a68c1936-16e5-11e6-a43b-2f8f2338e915","series":0,"name":"replace","transplant":{"toString":"final java.io.InputStream langIS = org.apache.commons.codec.language.bm.Languages.class.getClassLoader().getResourceAsStream(languagesResourceName)","position":"org.apache.commons.codec.language.bm.Languages:172","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName)"},"variableMap":{"languagesResourceName":"languageRulesResourceName","org.apache.commons.codec.language.bm.Languages.class":"org.apache.commons.codec.language.bm.Lang.class"},"type":"adrStmt","transplantationPoint":{"toString":"final java.io.InputStream lRulesIS = org.apache.commons.codec.language.bm.Lang.class.getClassLoader().getResourceAsStream(languageRulesResourceName)","position":"org.apache.commons.codec.language.bm.Lang:131","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName)"},"status":0},{"failures":[],"tindex":"a68c4047-16e5-11e6-a43b-5b32a9723192","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[9]","position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] saltBytes = saltString.getBytes(org.apache.commons.codec.Charsets.UTF_8)","position":"org.apache.commons.codec.digest.Md5Crypt:194","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"a68c4048-16e5-11e6-a43b-5517f4c99e69","series":0,"name":"add","transplant":{"toString":"result.append('K', 'J')","position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"KN\", \"N\")","position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\", \"N\")"},"status":0},{"failures":[],"tindex":"a68c4049-16e5-11e6-a43b-f1f3b129b33a","series":0,"name":"replace","transplant":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"modulus","keyLen":"modulus"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base32:502","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[],"tindex":"a68c404a-16e5-11e6-a43b-8f188f981acf","series":0,"name":"add","transplant":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"status":-2},{"failures":[],"tindex":"a68c675b-16e5-11e6-a43b-efbf706d79f2","series":0,"name":"add","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"left","to":"left"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < 32 ; i += 4) {\n    left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n    right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n}","position":"org.apache.commons.codec.digest.UnixCrypt:286","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < 32 ; i += 4) {\n    left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n    right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n}"},"status":-2},{"failures":[17],"tindex":"a68c675c-16e5-11e6-a43b-0100bd8eed3a","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"w3\", \"W3\")","position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w3\", \"W3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"g\", \"k\")","position":"org.apache.commons.codec.language.Caverphone2:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"g\", \"k\")"},"status":-1},{"failures":[],"tindex":"a68c8e6d-16e5-11e6-a43b-1b62ff196fb2","series":0,"name":"replace","transplant":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"decodeSize","keyLen":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.decodeSize = (org.apache.commons.codec.binary.Base32.this.encodeSize) - 1","position":"org.apache.commons.codec.binary.Base32:306","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base32.this.int) - 1"},"status":0},{"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"a68c8e6e-16e5-11e6-a43b-8d050a39a71b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String l : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:221","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"a68c8e6f-16e5-11e6-a43b-0305428023ef","series":0,"name":"add","transplant":{"toString":"this.concat = concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"variableMap":{"concat":"strict"},"type":"adrStmt","transplantationPoint":{"toString":"this.strict = strict","position":"org.apache.commons.codec.net.QuotedPrintableCodec:150","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"status":-2},{"failures":[],"tindex":"a68cb580-16e5-11e6-a43b-27bd77ec6410","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"saltBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"status":-2},{"failures":[],"tindex":"a68cb581-16e5-11e6-a43b-5901b53bb006","series":0,"name":"replace","transplant":{"toString":"if (n < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtIfImpl","sourcecode":"if (n < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n} "},"variableMap":{"n":"len"},"type":"adrStmt","transplantationPoint":{"toString":"if ((lineLength) > 0) {\n    len += (((len + (lineLength)) - 1) / (lineLength)) * (chunkSeparatorLength);\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    len += (((len + (int)) - 1) / (int)) * (int);\n} "},"status":-2},{"failures":[34,35,36,37,38,39,40,41,42],"tindex":"a68cb582-16e5-11e6-a43b-eddd7c0e3000","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String rawLine = scanner.nextLine();\n    java.lang.String line = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)) {\n            inMultilineComment = false;\n        } \n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START)) {\n        inMultilineComment = true;\n    } else {\n        final int cmtI = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.COMMENT);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.contains(\"=\")) {\n            final java.lang.String[] parts = line.split(\"=\");\n            if ((parts.length) != 2) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                final java.lang.String leftCharacter = parts[0];\n                final java.lang.String rightCharacter = parts[1];\n                if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                } \n                asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n            }\n        } else {\n            final java.lang.String[] parts = line.split(\"\\\\s+\");\n            if ((parts.length) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String pattern = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                    final java.lang.String replacement1 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                    final java.lang.String replacement2 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                    final java.lang.String replacement3 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule r = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                    final char patternKey = r.pattern.charAt(0);\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = ruleMapping.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                        ruleMapping.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:255","type":"CtWhileImpl","sourcecode":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String java.lang.String = scanner.nextLine();\n    java.lang.String java.lang.String = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n            inMultilineComment = false;\n        } \n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        inMultilineComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.contains(\"=\")) {\n            final java.lang.String[] java.lang.String[] = line.split(\"=\");\n            if ((parts.int) != 2) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                final java.lang.String java.lang.String = parts[0];\n                final java.lang.String java.lang.String = parts[1];\n                if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                } \n                asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                    final char char = r.java.lang.String.charAt(0);\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                        ruleMapping.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"a68cdc93-16e5-11e6-a43b-cb12068dee79","series":0,"name":"replace","transplant":{"toString":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"a68d03a4-16e5-11e6-a43b-a30a3bd0b90f","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"ibitWorkArea","lineSeparator":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"if ((context.modulus) == 0) {\n    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n} ","position":"org.apache.commons.codec.binary.Base64:448","type":"CtIfImpl","sourcecode":"if ((context.int) == 0) {\n    buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"status":-3},{"failures":[43,44,17,45,46,47,48,49],"tindex":"a68d03a5-16e5-11e6-a43b-f9f04aae2e9b","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:122","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"status":-1},{"failures":[50,51],"tindex":"a68d03a6-16e5-11e6-a43b-2bbc1b1288f5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))","position":"org.apache.commons.codec.digest.DigestUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))","position":"org.apache.commons.codec.digest.DigestUtils:412","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-1},{"failures":[6,7],"tindex":"a68d03a7-16e5-11e6-a43b-333e5adc7d87","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"u >>>= 1","position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"status":-1},{"failures":[52,53,54],"tindex":"a68d03a8-16e5-11e6-a43b-89fa6765b26a","series":0,"name":"replace","transplant":{"toString":"code = '7'","position":"org.apache.commons.codec.language.ColognePhonetic:385","type":"CtAssignmentImpl","sourcecode":"code = '7'"},"variableMap":{"code":"lastChar"},"type":"adrStmt","transplantationPoint":{"toString":"lastChar = key.charAt(((key.length()) - 1))","position":"org.apache.commons.codec.language.Nysiis:298","type":"CtAssignmentImpl","sourcecode":"lastChar = key.charAt(((key.length()) - 1))"},"status":-1},{"failures":[55],"tindex":"a68d03a9-16e5-11e6-a43b-138fb4c302e9","series":0,"name":"replace","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[18,19,20,21,23,25,26,27],"tindex":"a68d2aba-16e5-11e6-a43b-a33f4902601f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part))","position":"org.apache.commons.codec.language.bm.Rule:390","type":"CtInvocationImpl","sourcecode":"phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part))"},"status":-1},{"failures":[14,15],"tindex":"a68d2abb-16e5-11e6-a43b-3de1a42abdd5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:393","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"a68d2abc-16e5-11e6-a43b-0dcf1afdfc9e","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":-3},{"failures":[14,15,56],"tindex":"a68d2abd-16e5-11e6-a43b-37ce9b136f8c","series":0,"name":"add","transplant":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-1},{"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"a68d2abe-16e5-11e6-a43b-0352fbb36f55","series":0,"name":"replace","transplant":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"text"},"type":"adrStmt","transplantationPoint":{"toString":"if (rule.matches(text)) {\n    if (rule.acceptOnMatch) {\n        langs.retainAll(rule.languages);\n    } else {\n        langs.removeAll(rule.languages);\n    }\n} ","position":"org.apache.commons.codec.language.bm.Lang:219","type":"CtIfImpl","sourcecode":"if (rule.matches(text)) {\n    if (rule.boolean) {\n        langs.retainAll(rule.java.util.Set<java.lang.String>);\n    } else {\n        langs.removeAll(rule.java.util.Set<java.lang.String>);\n    }\n} "},"status":-1},{"failures":[],"tindex":"a68d2abf-16e5-11e6-a43b-9fddf5f0d483","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> rules : ruleMap.values()) {\n    allRules.addAll(rules);\n}","position":"org.apache.commons.codec.language.bm.Rule:302","type":"CtForEachImpl","sourcecode":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n    allRules.addAll(rules);\n}"},"status":0},{"failures":[],"tindex":"a68d51d0-16e5-11e6-a43b-37bd4689dd23","series":0,"name":"replace","transplant":{"toString":"while ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n    builder.append('0');\n    cachedString = null;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:116","type":"CtWhileImpl","sourcecode":"while ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n    java.lang.StringBuilder.append('0');\n    java.lang.String = null;\n}"},"variableMap":{"org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH":"compareCode","builder":"o2","cachedString":"o2"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.lang.Comparable<java.lang.Comparable<?>> s1 = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.stringEncoder.encode(o1)));\n    final java.lang.Comparable<?> s2 = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.stringEncoder.encode(o2)));\n    compareCode = s1.compareTo(s2);\n} catch (final org.apache.commons.codec.EncoderException ee) {\n    compareCode = 0;\n}","position":"org.apache.commons.codec.StringEncoderComparator:79","type":"CtTryImpl","sourcecode":"try {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.lang.Comparable<java.lang.Comparable<?>> java.lang.Comparable<java.lang.Comparable<?>> = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o1)));\n    final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o2)));\n    compareCode = s1.compareTo(s2);\n} catch (final org.apache.commons.codec.EncoderException ee) {\n    compareCode = 0;\n}"},"status":-3},{"failures":[57,58],"tindex":"a68d51d1-16e5-11e6-a43b-03662284fa22","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:285","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[59,60,16,61],"tindex":"a68d51d2-16e5-11e6-a43b-5902ed1024a3","series":0,"name":"replace","transplant":{"toString":"return n - todo","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return n - todo"},"variableMap":{"todo":"len","n":"len"},"type":"adrStmt","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"status":-1},{"failures":[],"tindex":"a68d51d3-16e5-11e6-a43b-3b61ba192fe3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtIfImpl","sourcecode":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} "},"status":0}],"header":{"groupId":"commons-codec","transformationCount":42,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
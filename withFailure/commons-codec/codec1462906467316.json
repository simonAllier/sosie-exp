{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":43,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":22,"org.apache.commons.codec.binary.HexTest.testCustomCharset":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":133,"org.apache.commons.codec.language.NysiisTest.testSnat":177,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":139,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":7,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":154,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":42,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":94,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":165,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":80,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":128,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":122,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":161,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":73,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":77,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":2,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":86,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":3,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":19,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":71,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":62,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":145,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":98,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":107,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":106,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":157,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":70,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":97,"org.apache.commons.codec.language.NysiisTest.testCap":166,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":132,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":148,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":85,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":61,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":105,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":146,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":115,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":109,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":40,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":45,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":104,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":35,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":78,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":21,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":81,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":111,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":39,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":31,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":118,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":56,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":138,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":103,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":112,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":1,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":151,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":10,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":24,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":117,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":51,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":152,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":92,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":136,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":121,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":143,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":53,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":130,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":149,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":162,"org.apache.commons.codec.language.NysiisTest.testTranan":180,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":142,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":144,"org.apache.commons.codec.language.NysiisTest.testFal":169,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":123,"org.apache.commons.codec.language.NysiisTest.testSnad":176,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":153,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":163,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":37,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":127,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":14,"org.apache.commons.codec.language.NysiisTest.testDropBy":120,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":65,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":87,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":110,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":91,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":160,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":135,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":68,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":52,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":90,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":158,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":89,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":30,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":100,"org.apache.commons.codec.language.NysiisTest.testRule2":171,"org.apache.commons.codec.language.NysiisTest.testRule1":170,"org.apache.commons.codec.language.NysiisTest.testRule7":174,"org.apache.commons.codec.language.NysiisTest.testRule6":173,"org.apache.commons.codec.language.NysiisTest.testRule5":172,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":124,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":84,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":96,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":178,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":29,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":150,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":83,"org.apache.commons.codec.language.NysiisTest.testBran":175,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":181,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":129,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":102,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":50,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":26,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":108,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":44,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":125,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":182,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":131,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":4,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":63,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":16,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":64,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":156,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":159,"org.apache.commons.codec.language.NysiisTest.testDad":167,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":41,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":48,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":116,"org.apache.commons.codec.language.NysiisTest.testOthers":179,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":155,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":11,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":164,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":113,"org.apache.commons.codec.language.NysiisTest.testDan":168,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":140,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":88,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":141,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":147,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":72},"transformations":[{"failures":[0,1,2,3],"tindex":"9ec27c2c-16e0-11e6-b0f6-0b7d8d009851","series":0,"name":"replace","transplant":{"toString":"if (ipl > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:706","type":"CtIfImpl","sourcecode":"if (ipl > (input.length())) {\n    return false;\n} "},"variableMap":{"input":"prefix","ipl":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if ((input.charAt(i)) != (prefix.charAt(i))) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:605","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (prefix.charAt(i))) {\n    return false;\n} "},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12],"tindex":"9ec2a33d-16e0-11e6-b0f6-e1f852a8656e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (append && ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH))) {\n    builder.append(replacement);\n    if ((builder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n        builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length());\n    } \n    cachedString = null;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:138","type":"CtIfImpl","sourcecode":"if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n    java.lang.StringBuilder.append(replacement);\n    if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n        java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n    } \n    java.lang.String = null;\n} "},"status":-1},{"failures":[],"tindex":"9ec2a33e-16e0-11e6-b0f6-27eb2e81dbe8","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] charsToTrim = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] langs = parts[1].split(\"\\\\+\")","position":"org.apache.commons.codec.language.bm.Lang:174","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\")"},"status":-2},{"failures":[],"tindex":"9ec2a33f-16e0-11e6-b0f6-8fd979b745f0","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean useChunking = (lineLength > 0) && (chunkSeparatorLength > 0)","position":"org.apache.commons.codec.binary.BaseNCodec:208","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (lineLength > 0) && (chunkSeparatorLength > 0)"},"status":-2},{"failures":[],"tindex":"9ec2ca50-16e0-11e6-b0f6-97ce84f3c16f","series":0,"name":"add","transplant":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))","position":"org.apache.commons.codec.language.bm.Lang:169","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))"},"variableMap":{"rawLine":"location","languageRulesResourceName":"location"},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:322","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e)"},"status":-2},{"failures":[],"tindex":"9ec2ca51-16e0-11e6-b0f6-bf7af84481dc","series":0,"name":"add","transplant":{"toString":"final java.lang.String target = value.substring(start, (start + length))","position":"org.apache.commons.codec.language.DoubleMetaphone:919","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = value.substring(start, (start + length))"},"variableMap":{"start":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","length":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","value":"name"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String firstThree = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:163","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)"},"status":-2},{"failures":[0,1,2,3,13,14,15,16],"tindex":"9ec2ca52-16e0-11e6-b0f6-a3257bcf245a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"newPhonemes.add(join)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:115","type":"CtInvocationImpl","sourcecode":"newPhonemes.add(join)"},"status":-1},{"failures":[17,18],"tindex":"9ec2f163-16e0-11e6-b0f6-fb3d268f36dd","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[19],"tindex":"9ec2f164-16e0-11e6-b0f6-7b558ccb15f2","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('{')","position":"org.apache.commons.codec.net.QCodec:100","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('{')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('+')","position":"org.apache.commons.codec.net.QCodec:76","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('+')"},"status":-1},{"failures":[20,17,18],"tindex":"9ec2f165-16e0-11e6-b0f6-ff209ce3f984","series":0,"name":"replace","transplant":{"toString":"patternLength = pattern.length()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:213","type":"CtAssignmentImpl","sourcecode":"patternLength = pattern.length()"},"variableMap":{"patternLength":"index","pattern":"value"},"type":"adrStmt","transplantationPoint":{"toString":"index = handleGH(value, result, index)","position":"org.apache.commons.codec.language.DoubleMetaphone:411","type":"CtAssignmentImpl","sourcecode":"index = handleGH(value, result, index)"},"status":-1},{"failures":[],"tindex":"9ec2f166-16e0-11e6-b0f6-616756f021aa","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.RFC1522Codec.this.encodeText(text, java.nio.charset.Charset.forName(charsetName))","position":"org.apache.commons.codec.net.RFC1522Codec:107","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.RFC1522Codec.this.encodeText(text, java.nio.charset.Charset.forName(charsetName))"},"variableMap":{"text":"data","charsetName":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:762","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"status":-2},{"failures":[],"tindex":"9ec31877-16e0-11e6-b0f6-b597d3f4fab2","series":0,"name":"replace","transplant":{"toString":"return java.security.MessageDigest.getInstance(algorithm)","position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"variableMap":{"algorithm":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_256"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_256)","position":"org.apache.commons.codec.digest.DigestUtils:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[21],"tindex":"9ec31878-16e0-11e6-b0f6-45366d16c91f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"x\", \"k\")","position":"org.apache.commons.codec.language.Caverphone2:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"x\", \"k\")"},"status":-1},{"failures":[],"tindex":"9ec31879-16e0-11e6-b0f6-4d6545e5c430","series":0,"name":"replace","transplant":{"toString":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}","position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtIfImpl","sourcecode":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}"},"variableMap":{"input":"this","this":"this","content":"this"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:569","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}"},"status":-2},{"failures":[8,9,11],"tindex":"9ec33f8a-16e0-11e6-b0f6-4d0580185662","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (rules == null) {\n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:506","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"9ec33f8b-16e0-11e6-b0f6-15ed14293a69","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Soundex.this.maxLength","position":"org.apache.commons.codec.language.Soundex:208","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.int"},"variableMap":{"maxLength":"b"},"type":"adrStmt","transplantationPoint":{"toString":"return b","position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return b"},"status":-3},{"failures":[20,22,17,18],"tindex":"9ec3669c-16e0-11e6-b0f6-89f4bcbb60f6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:560","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-1},{"failures":[23,24,25],"tindex":"9ec3669d-16e0-11e6-b0f6-c372810c0d7e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:471","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer)"},"status":-1},{"failures":[],"tindex":"9ec3669e-16e0-11e6-b0f6-5b4aaa88e0b5","series":0,"name":"replace","transplant":{"toString":"diff++","position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"r"},"type":"adrStmt","transplantationPoint":{"toString":"r = read(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:99","type":"CtAssignmentImpl","sourcecode":"r = read(byte[], 0, 1)"},"status":0},{"failures":[],"tindex":"9ec3669f-16e0-11e6-b0f6-55670dc989ad","series":0,"name":"replace","transplant":{"toString":"text = preprocess(text)","position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"variableMap":{"text":"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX"},"type":"adrStmt","transplantationPoint":{"toString":"salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))","position":"org.apache.commons.codec.digest.Sha2Crypt:541","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"status":-2},{"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"tindex":"9ec366a0-16e0-11e6-b0f6-15b5cd0b665d","series":0,"name":"replace","transplant":{"toString":"name2Char[(name2Size - i)] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:327","type":"CtAssignmentImpl","sourcecode":"name2Char[(name2Size - i)] = ' '"},"variableMap":{"name2Char":"out","i":"j","name2Size":"i"},"type":"adrStmt","transplantationPoint":{"toString":"out[(j++)] = toDigits[((240 & (data[i])) >>> 4)]","position":"org.apache.commons.codec.binary.Hex:145","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[((240 & (data[i])) >>> 4)]"},"status":-1},{"failures":[49,50,51,52,53,54,55,56,57,58,59],"tindex":"9ec38db1-16e0-11e6-b0f6-f9794e7d45c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:286","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int)"},"status":-1},{"failures":[60,61,62,63,64,65,66,67,68,69],"tindex":"9ec38db2-16e0-11e6-b0f6-919df565491e","series":0,"name":"replace","transplant":{"toString":"sb.append(\", rcon='\").append(rCon).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:467","type":"CtInvocationImpl","sourcecode":"sb.append(\", rcon='\").append(rCon).append('\\'')"},"variableMap":{"rCon":"org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII","sb":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII.charAt(pos))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:363","type":"CtInvocationImpl","sourcecode":"sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos))"},"status":-1},{"failures":[70,71],"tindex":"9ec38db3-16e0-11e6-b0f6-493b267d64e8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:249","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}"},"status":-1},{"failures":[72,73],"tindex":"9ec3b4c4-16e0-11e6-b0f6-47703b4117c2","series":0,"name":"replace","transplant":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"variableMap":{"i":"offset","key":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)((iValue >>> 24) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:402","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 24) & 255))"},"status":-1},{"failures":[],"tindex":"9ec3b4c5-16e0-11e6-b0f6-3f212e50a1ff","series":0,"name":"add","transplant":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str","l":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:225","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"9ec3b4c6-16e0-11e6-b0f6-3b8786141b48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING","position":"org.apache.commons.codec.language.Soundex:82","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.Soundex.org.apache.commons.codec.language.Soundex.char[]"},"status":-2},{"failures":[],"tindex":"9ec3b4c7-16e0-11e6-b0f6-733aa62758fd","series":0,"name":"add","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"code"},"type":"adrStmt","transplantationPoint":{"toString":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AEIJOUY, chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SCZ, nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.WFPV, chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.GKQ, chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.CKQ, lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.TDX, chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}","position":"org.apache.commons.codec.language.ColognePhonetic:338","type":"CtWhileImpl","sourcecode":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}"},"status":-2},{"failures":[],"tindex":"9ec3dbd8-16e0-11e6-b0f6-1950c24af184","series":0,"name":"replace","transplant":{"toString":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} "},"variableMap":{"es1":"value","es2":"value","i":"index","diff":"index"},"type":"adrStmt","transplantationPoint":{"toString":"switch (value.charAt(index)) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n    case 'Y' :\n        index = handleAEIOUY(result, index);\n        break;\n    case 'B' :\n        result.append('P');\n        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n        break;\n    case '\\u00c7' :\n        result.append('S');\n        index++;\n        break;\n    case 'C' :\n        index = handleC(value, result, index);\n        break;\n    case 'D' :\n        index = handleD(value, result, index);\n        break;\n    case 'F' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n        break;\n    case 'G' :\n        index = handleG(value, result, index, slavoGermanic);\n        break;\n    case 'H' :\n        index = handleH(value, result, index);\n        break;\n    case 'J' :\n        index = handleJ(value, result, index, slavoGermanic);\n        break;\n    case 'K' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n        break;\n    case 'L' :\n        index = handleL(value, result, index);\n        break;\n    case 'M' :\n        result.append('M');\n        index = conditionM0(value, index) ? index + 2 : index + 1;\n        break;\n    case 'N' :\n        result.append('N');\n        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n        break;\n    case '\\u00d1' :\n        result.append('N');\n        index++;\n        break;\n    case 'P' :\n        index = handleP(value, result, index);\n        break;\n    case 'Q' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n        break;\n    case 'R' :\n        index = handleR(value, result, index, slavoGermanic);\n        break;\n    case 'S' :\n        index = handleS(value, result, index, slavoGermanic);\n        break;\n    case 'T' :\n        index = handleT(value, result, index);\n        break;\n    case 'V' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n        break;\n    case 'W' :\n        index = handleW(value, result, index);\n        break;\n    case 'X' :\n        index = handleX(value, result, index);\n        break;\n    case 'Z' :\n        index = handleZ(value, result, index, slavoGermanic);\n        break;\n    default :\n        index++;\n        break;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:98","type":"CtSwitchImpl","sourcecode":"switch (value.charAt(index)) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n    case 'Y' :\n        index = handleAEIOUY(result, index);\n        break;\n    case 'B' :\n        result.append('P');\n        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n        break;\n    case '\\u00c7' :\n        result.append('S');\n        index++;\n        break;\n    case 'C' :\n        index = handleC(value, result, index);\n        break;\n    case 'D' :\n        index = handleD(value, result, index);\n        break;\n    case 'F' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n        break;\n    case 'G' :\n        index = handleG(value, result, index, slavoGermanic);\n        break;\n    case 'H' :\n        index = handleH(value, result, index);\n        break;\n    case 'J' :\n        index = handleJ(value, result, index, slavoGermanic);\n        break;\n    case 'K' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n        break;\n    case 'L' :\n        index = handleL(value, result, index);\n        break;\n    case 'M' :\n        result.append('M');\n        index = conditionM0(value, index) ? index + 2 : index + 1;\n        break;\n    case 'N' :\n        result.append('N');\n        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n        break;\n    case '\\u00d1' :\n        result.append('N');\n        index++;\n        break;\n    case 'P' :\n        index = handleP(value, result, index);\n        break;\n    case 'Q' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n        break;\n    case 'R' :\n        index = handleR(value, result, index, slavoGermanic);\n        break;\n    case 'S' :\n        index = handleS(value, result, index, slavoGermanic);\n        break;\n    case 'T' :\n        index = handleT(value, result, index);\n        break;\n    case 'V' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n        break;\n    case 'W' :\n        index = handleW(value, result, index);\n        break;\n    case 'X' :\n        index = handleX(value, result, index);\n        break;\n    case 'Z' :\n        index = handleZ(value, result, index, slavoGermanic);\n        break;\n    default :\n        index++;\n        break;\n}"},"status":-2},{"failures":[],"tindex":"9ec402e9-16e0-11e6-b0f6-eb18a0bfe73d","series":0,"name":"add","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"length","len":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int index = 0 ; index < (input.length()) ; index++) {\n    final char ch = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String inputContext = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = org.apache.commons.codec.language.DaitchMokotoffSoundex.RULES.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> nextBranches = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.EMPTY_LIST;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean branchingRequired = ((replacements.length) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n                for (final java.lang.String nextReplacement : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:496","type":"CtForImpl","sourcecode":"for (int int = 0 ; index < (input.length()) ; index++) {\n    final char char = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String java.lang.String = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean boolean = ((replacements.int) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                for (final java.lang.String java.lang.String : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}"},"status":-2},{"failures":[],"tindex":"9ec429fa-16e0-11e6-b0f6-a99b7032c603","series":0,"name":"add","transplant":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"9ec429fb-16e0-11e6-b0f6-81f90ca96cc7","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.NameType.this.name","position":"org.apache.commons.codec.language.bm.NameType:51","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.NameType.this.java.lang.String"},"variableMap":{"name":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))","position":"org.apache.commons.codec.digest.DigestUtils:626","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"status":-3},{"failures":[],"tindex":"9ec4510c-16e0-11e6-b0f6-f900146ffd15","series":0,"name":"add","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder(\"             \")","position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"status":-2},{"failures":[],"tindex":"9ec4510d-16e0-11e6-b0f6-910dfbe3c492","series":0,"name":"replace","transplant":{"toString":"b[(offset++)] = ((byte)(iValue & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"variableMap":{"b":"encodeTable","offset":"pos","iValue":"org.apache.commons.codec.binary.Base32.MASK_5BITS"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 20))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:512","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"9ec4510e-16e0-11e6-b0f6-d1b5234bb47a","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:299","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results)"},"variableMap":{"left":"jj","right":"bits","results":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"toString":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-2},{"failures":[],"tindex":"9ec4510f-16e0-11e6-b0f6-85cccd3eb520","series":0,"name":"add","transplant":{"toString":"final java.util.Set<java.lang.String> ls = new java.util.HashSet<java.lang.String>()","position":"org.apache.commons.codec.language.bm.Languages:171","type":"CtLocalVariableImpl","sourcecode":"final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Set<java.lang.String> langs = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")))","position":"org.apache.commons.codec.language.bm.Rule:373","type":"CtLocalVariableImpl","sourcecode":"final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")))"},"status":-2},{"failures":[20,17,18],"tindex":"9ec45110-16e0-11e6-b0f6-7756df831f0d","series":0,"name":"replace","transplant":{"toString":"result.append('J', ' ')","position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:455","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[74,75,76,77,78,79,80,81,82,83],"tindex":"9ec47821-16e0-11e6-b0f6-2b282afe7f24","series":0,"name":"replace","transplant":{"toString":"if (n < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtIfImpl","sourcecode":"if (n < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n} "},"variableMap":{"n":"todo"},"type":"adrStmt","transplantationPoint":{"toString":"while (todo > 0) {\n    int len = ((int)(java.lang.Math.min(b.length, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n        break;\n    } \n    todo -= len;\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (todo > 0) {\n    int int = ((int)(java.lang.Math.min(b.int, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    todo -= len;\n}"},"status":-1},{"failures":[],"tindex":"9ec47822-16e0-11e6-b0f6-3d13062289be","series":0,"name":"add","transplant":{"toString":"for (int i = (input.length()) - 1, j = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:279","type":"CtForImpl","sourcecode":"for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}"},"variableMap":{"input":"prefix","suffix":"prefix"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:604","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}"},"status":-2},{"failures":[84],"tindex":"9ec47823-16e0-11e6-b0f6-01682bcd64b2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^h\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^h\", \"A\")"},"status":-1},{"failures":[0,1,2,3,85,13,86,87,88,14,15,89,90,16,91,92,93,94,95,96,97,98,99,100,101,102],"tindex":"9ec47824-16e0-11e6-b0f6-b5c565dd0c8f","series":0,"name":"replace","transplant":{"toString":"final int name1Size = (name1.length()) - 1","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:298","type":"CtLocalVariableImpl","sourcecode":"final int int = (name1.length()) - 1"},"variableMap":{"name1":"line"},"type":"adrStmt","transplantationPoint":{"toString":"final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT)","position":"org.apache.commons.codec.language.bm.Lang:153","type":"CtLocalVariableImpl","sourcecode":"final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"status":-1},{"failures":[8,9,11],"tindex":"9ec47825-16e0-11e6-b0f6-fbc5ee6ae8ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"continue","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:507","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"9ec49f36-16e0-11e6-b0f6-b908c14d84e2","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")","position":"org.apache.commons.codec.language.bm.Rule:369","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")"},"status":0},{"failures":[],"tindex":"9ec49f37-16e0-11e6-b0f6-171e1ddf13f1","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = builder.toString()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:153","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.StringBuilder.toString()"},"status":-2},{"failures":[72,103,104,73],"tindex":"9ec49f38-16e0-11e6-b0f6-7b0a67087607","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.COV2CHAR[c])));\n}","position":"org.apache.commons.codec.digest.UnixCrypt:237","type":"CtForImpl","sourcecode":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n}"},"status":-1},{"failures":[],"tindex":"9ec49f39-16e0-11e6-b0f6-e52aa90a52d9","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_MAC.matcher(str).replaceFirst(\"MCC\")","position":"org.apache.commons.codec.language.Nysiis:261","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\")"},"status":-2},{"failures":[105,106,107,108,109,110,111,112],"tindex":"9ec49f3a-16e0-11e6-b0f6-c1021bb3ca8f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"output.addRight(code)","position":"org.apache.commons.codec.language.ColognePhonetic:395","type":"CtInvocationImpl","sourcecode":"output.addRight(code)"},"status":-1},{"failures":[72,73],"tindex":"9ec49f3b-16e0-11e6-b0f6-05da4dffc607","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results)","position":"org.apache.commons.codec.digest.UnixCrypt:305","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results)"},"status":-1},{"failures":[113,114,115,116,117,118],"tindex":"9ec4c64c-16e0-11e6-b0f6-5980dc103495","series":0,"name":"replace","transplant":{"toString":"int index2 = start","position":"org.apache.commons.codec.binary.CharSequenceUtils:55","type":"CtLocalVariableImpl","sourcecode":"int int = start"},"variableMap":{"start":"i"},"type":"adrStmt","transplantationPoint":{"toString":"final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])","position":"org.apache.commons.codec.net.URLCodec:173","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"status":-1},{"failures":[20,22,17,18],"tindex":"9ec4c64d-16e0-11e6-b0f6-e5a8b3027f7c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:560","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-1},{"failures":[],"tindex":"9ec4c64e-16e0-11e6-b0f6-63c993934469","series":0,"name":"replace","transplant":{"toString":"this.baseNCodec = basedCodec","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = basedCodec"},"variableMap":{"basedCodec":"baseNCodec","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"toString":"this.baseNCodec = baseNCodec","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = baseNCodec"},"status":-3},{"failures":[119],"tindex":"9ec4c64f-16e0-11e6-b0f6-0152569e364c","series":0,"name":"replace","transplant":{"toString":"if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n    return cs1.equals(cs2);\n} ","position":"org.apache.commons.codec.binary.StringUtils:77","type":"CtIfImpl","sourcecode":"if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n    return cs1.equals(cs2);\n} "},"variableMap":{"cs1":"cs2","cs2":"cs2"},"type":"adrStmt","transplantationPoint":{"toString":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtIfImpl","sourcecode":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"9ec4c650-16e0-11e6-b0f6-cdfe83e48fbc","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"c"},"type":"adrStmt","transplantationPoint":{"toString":"if (doEncode) {\n    baseNCodec.encode(buf, 0, c, context);\n} else {\n    baseNCodec.decode(buf, 0, c, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:159","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[],"tindex":"9ec4c651-16e0-11e6-b0f6-eb38f556a085","series":0,"name":"replace","transplant":{"toString":"int value = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])","position":"org.apache.commons.codec.digest.UnixCrypt:385","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])"},"variableMap":{"b":"bigBytes","offset":"length"},"type":"adrStmt","transplantationPoint":{"toString":"int len = bigBytes.length","position":"org.apache.commons.codec.binary.Base64:759","type":"CtLocalVariableImpl","sourcecode":"int int = bigBytes.int"},"status":-2},{"failures":[120],"tindex":"9ec4ed62-16e0-11e6-b0f6-bd9b30452e84","series":0,"name":"replace","transplant":{"toString":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_G;\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_S;\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_N;\n} ","position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_S":"org.apache.commons.codec.language.Nysiis.CHARS_C","org.apache.commons.codec.language.Nysiis.CHARS_G":"org.apache.commons.codec.language.Nysiis.CHARS_C","org.apache.commons.codec.language.Nysiis.CHARS_N":"org.apache.commons.codec.language.Nysiis.CHARS_NN","curr":"next"},"type":"adrStmt","transplantationPoint":{"toString":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.CHARS_NN;\n    } else {\n        return org.apache.commons.codec.language.Nysiis.CHARS_C;\n    }\n} ","position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"status":-1},{"failures":[],"tindex":"9ec4ed63-16e0-11e6-b0f6-69f0c58479d7","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"variableMap":{"altResult":"obj","buffer":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:413","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,65,151,66,152,67,153,154,155],"tindex":"9ec4ed64-16e0-11e6-b0f6-dde592975603","series":0,"name":"add","transplant":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"name2RtLStart"},"type":"adrStmt","transplantationPoint":{"toString":"if (name1LtRStart.equals(name2RtLStart)) {\n    name1Char[i] = ' ';\n    name2Char[i] = ' ';\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtIfImpl","sourcecode":"if (name1LtRStart.equals(name2RtLStart)) {\n    name1Char[i] = ' ';\n    name2Char[i] = ' ';\n} "},"status":-1},{"failures":[],"tindex":"9ec4ed65-16e0-11e6-b0f6-15a7eb6eac67","series":0,"name":"replace","transplant":{"toString":"final java.lang.String body = ph.substring(1, ((ph.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name2RtLStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:304","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[],"tindex":"9ec4ed66-16e0-11e6-b0f6-1f4727b22eb7","series":0,"name":"add","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"encodeTable"},"type":"adrStmt","transplantationPoint":{"toString":"this.encodeTable = org.apache.commons.codec.binary.Base32.ENCODE_TABLE","position":"org.apache.commons.codec.binary.Base32:287","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[156,23],"tindex":"9ec51477-16e0-11e6-b0f6-a9c79e760d10","series":0,"name":"add","transplant":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"tempResult"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"status":-1},{"failures":[],"tindex":"9ec51478-16e0-11e6-b0f6-1feaa29f8919","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.languages = languages","position":"org.apache.commons.codec.language.bm.Languages:289","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = languages"},"status":-2},{"failures":[157,158,159],"tindex":"9ec51479-16e0-11e6-b0f6-d3deed83e8d4","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"p+\", \"P\")","position":"org.apache.commons.codec.language.Caverphone1:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"s+\", \"S\")","position":"org.apache.commons.codec.language.Caverphone2:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"s+\", \"S\")"},"status":-1},{"failures":[],"tindex":"9ec5147a-16e0-11e6-b0f6-6dca715aecf6","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.addAll(newPhonemes)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:125","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.addAll(newPhonemes)"},"variableMap":{"newPhonemes":"newPhonemes","phonemes":"newPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"newPhonemes.add(join)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:115","type":"CtInvocationImpl","sourcecode":"newPhonemes.add(join)"},"status":-3},{"failures":[],"tindex":"9ec5147b-16e0-11e6-b0f6-7b0565aef749","series":0,"name":"add","transplant":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> ruleMap = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs)","position":"org.apache.commons.codec.language.bm.Rule:300","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs)"},"variableMap":{"nameType":"nameType","rt":"ruleType","langs":"languageSet"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules2 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:403","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet)"},"status":-2},{"failures":[],"tindex":"9ec5147c-16e0-11e6-b0f6-77f62ad8bfe5","series":0,"name":"replace","transplant":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"org.apache.commons.codec.digest.B64.B64T"},"type":"adrStmt","transplantationPoint":{"toString":"while ((n--) > 0) {\n    buffer.append(org.apache.commons.codec.digest.B64.B64T.charAt((w & 63)));\n    w >>= 6;\n}","position":"org.apache.commons.codec.digest.B64:60","type":"CtWhileImpl","sourcecode":"while ((n--) > 0) {\n    buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n    w >>= 6;\n}"},"status":-2},{"failures":[],"tindex":"9ec53b8d-16e0-11e6-b0f6-2d80e08ddb7e","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"input","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule rule : rules) {\n    final java.lang.String pattern = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.input, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:211","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule : rules) {\n    final java.lang.String java.lang.String = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n        break;\n    } \n}"},"status":-2},{"failures":[],"tindex":"9ec53b8e-16e0-11e6-b0f6-0da69220fe7a","series":0,"name":"replace","transplant":{"toString":"this.charset = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET","position":"org.apache.commons.codec.binary.Hex:190","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.java.nio.charset.Charset"},"variableMap":{"charset":"charset","org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"this.charset = charset","position":"org.apache.commons.codec.net.QCodec:130","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-3},{"failures":[],"tindex":"9ec53b8f-16e0-11e6-b0f6-6151491a41dc","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"b"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(context.buffer, context.readPos, b, bPos, len)","position":"org.apache.commons.codec.binary.BaseNCodec:294","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len)"},"status":-2},{"failures":[],"tindex":"9ec562a0-16e0-11e6-b0f6-75c9f4a9c241","series":0,"name":"replace","transplant":{"toString":"java.lang.String replacedName = name.toUpperCase()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"variableMap":{"name":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name2RtLStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:304","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":0},{"failures":[160,161,162,75,163],"tindex":"9ec562a1-16e0-11e6-b0f6-33049feb9299","series":0,"name":"replace","transplant":{"toString":"final byte[] pBytes = new byte[keyLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"variableMap":{"keyLen":"decodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(decodeSize, context)","position":"org.apache.commons.codec.binary.Base32:352","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[20,22,17,18],"tindex":"9ec562a2-16e0-11e6-b0f6-675588004b3a","series":0,"name":"replace","transplant":{"toString":"result.append('R')","position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-1},{"failures":[164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,120,179,180,181],"tindex":"9ec562a3-16e0-11e6-b0f6-71ad392fcf14","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"key.append(str.charAt(0))","position":"org.apache.commons.codec.language.Nysiis:274","type":"CtInvocationImpl","sourcecode":"key.append(str.charAt(0))"},"status":-1},{"failures":[182],"tindex":"9ec562a4-16e0-11e6-b0f6-3716e410ec71","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(isPreviousChar(local, n, 'C'))) {\n    code.append(symb);\n} ","position":"org.apache.commons.codec.language.Metaphone:265","type":"CtIfImpl","sourcecode":"if (!(isPreviousChar(local, n, 'C'))) {\n    code.append(symb);\n} "},"status":-1},{"failures":[],"tindex":"9ec562a5-16e0-11e6-b0f6-37f20c5f3a0c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[],"tindex":"9ec562a6-16e0-11e6-b0f6-4f4a02978bf2","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.this.charset","position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.BCodec.this.charset","position":"org.apache.commons.codec.net.BCodec:240","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.BCodec.this.java.nio.charset.Charset"},"status":-2},{"failures":[],"tindex":"9ec589b7-16e0-11e6-b0f6-434e1c64eac8","series":0,"name":"add","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")","position":"org.apache.commons.codec.language.bm.Rule:369","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"))","position":"org.apache.commons.codec.net.BCodec:203","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"))"},"status":-2},{"failures":[],"tindex":"9ec589b8-16e0-11e6-b0f6-97a92f3c144b","series":0,"name":"add","transplant":{"toString":"ls.add(lang)","position":"org.apache.commons.codec.language.bm.Languages:142","type":"CtInvocationImpl","sourcecode":"ls.add(lang)"},"variableMap":{"ls":"ls","lang":"line"},"type":"adrStmt","transplantationPoint":{"toString":"ls.add(line)","position":"org.apache.commons.codec.language.bm.Languages:191","type":"CtInvocationImpl","sourcecode":"ls.add(line)"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":77,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
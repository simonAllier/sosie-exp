{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":27,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":53,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":48,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":42,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":46,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":31,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":36,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":29,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":37,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":43,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":6,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":49,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":38,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":24,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":51,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":52,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":8,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":26,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":20,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":15,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":4,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":7,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":21,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":40,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":23,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":30},"transformations":[{"failures":[0,1,2,3,4],"tindex":"f7843987-1702-11e6-8642-476b043f42c2","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return encodeText(str, charset)","position":"org.apache.commons.codec.net.QCodec:211","type":"CtReturnImpl","sourcecode":"return encodeText(str, charset)"},"status":-1},{"failures":[5,6,7,8,9],"tindex":"f7846098-1702-11e6-8642-65b8797efef9","series":0,"name":"replace","transplant":{"toString":"final int startDst = (bitlen / 8) - len","position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"variableMap":{"bitlen":"i","len":"i"},"type":"adrStmt","transplantationPoint":{"toString":"int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:287","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"status":-1},{"failures":[10],"tindex":"f7846099-1702-11e6-8642-3d958cf3b0e9","series":0,"name":"replace","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"location"},"type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String leftCharacter = parts[0];\n    final java.lang.String rightCharacter = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:286","type":"CtIfImpl","sourcecode":"if ((parts.int) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String java.lang.String = parts[0];\n    final java.lang.String java.lang.String = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}"},"status":-1},{"failures":[11,12,13],"tindex":"f78487aa-1702-11e6-8642-29d6f000870c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b = '+'","position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"b = '+'"},"status":-1},{"failures":[],"tindex":"f78487ab-1702-11e6-8642-79890c11d0d7","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"status":0},{"failures":[],"tindex":"f78487ac-1702-11e6-8642-cb0087ffeb24","series":0,"name":"replace","transplant":{"toString":"result.append('X', 'S')","position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"variableMap":{"result":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:203","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n} "},"status":-2},{"failures":[],"tindex":"f78487ad-1702-11e6-8642-afa1b9cdfa25","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ry\", \"Ry\")","position":"org.apache.commons.codec.language.Caverphone1:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ry\", \"Ry\")"},"variableMap":{"txt":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"name2 = removeDoubleConsonants(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,10],"tindex":"f784aebe-1702-11e6-8642-dfa44041e458","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int index = 0 ; index < (input.length()) ; index++) {\n    final char ch = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String inputContext = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = org.apache.commons.codec.language.DaitchMokotoffSoundex.RULES.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> nextBranches = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.EMPTY_LIST;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean branchingRequired = ((replacements.length) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n                for (final java.lang.String nextReplacement : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:496","type":"CtForImpl","sourcecode":"for (int int = 0 ; index < (input.length()) ; index++) {\n    final char char = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String java.lang.String = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean boolean = ((replacements.int) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                for (final java.lang.String java.lang.String : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}"},"status":-1},{"failures":[14,15,16,17,18,19,20,21,10,22,23,24,25],"tindex":"f784d5cf-1702-11e6-8642-05e5dccd5ba2","series":0,"name":"replace","transplant":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"location"},"type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String leftCharacter = parts[0];\n    final java.lang.String rightCharacter = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:286","type":"CtIfImpl","sourcecode":"if ((parts.int) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String java.lang.String = parts[0];\n    final java.lang.String java.lang.String = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}"},"status":-1},{"failures":[],"tindex":"f784fce0-1702-11e6-8642-4b1992b80c78","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"s+\", \"S\")","position":"org.apache.commons.codec.language.Caverphone1:92","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"s+\", \"S\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone2:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[14,15,16,17,18,19,20,21,10],"tindex":"f784fce1-1702-11e6-8642-cbdf0a413135","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"nextBranch.processNextReplacement(nextReplacement, force)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:530","type":"CtInvocationImpl","sourcecode":"nextBranch.processNextReplacement(nextReplacement, force)"},"status":-1},{"failures":[],"tindex":"f784fce2-1702-11e6-8642-31bd331fa90d","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.isBase64(arrayOctet)","position":"org.apache.commons.codec.binary.Base64:498","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.isBase64(arrayOctet)"},"status":0},{"failures":[],"tindex":"f784fce3-1702-11e6-8642-75c1f8c84106","series":0,"name":"add","transplant":{"toString":"if ((pArray == null) || ((pArray.length) == 0)) {\n    return pArray;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:406","type":"CtIfImpl","sourcecode":"if ((pArray == null) || ((pArray.int) == 0)) {\n    return pArray;\n} "},"variableMap":{"pArray":"binaryData","length":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if ((binaryData == null) || ((binaryData.length) == 0)) {\n    return binaryData;\n} ","position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((binaryData == null) || ((binaryData.int) == 0)) {\n    return binaryData;\n} "},"status":-2},{"failures":[14,15,16,17,18,19,20,21,10],"tindex":"f78523f4-1702-11e6-8642-512a5f765973","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:554","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}"},"status":-1},{"failures":[26,27,28,29],"tindex":"f78523f5-1702-11e6-8642-c7c6397527a4","series":0,"name":"replace","transplant":{"toString":"result.append('J', 'A')","position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"result.append('J', 'A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:694","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"f78523f6-1702-11e6-8642-abee872f3ce1","series":0,"name":"replace","transplant":{"toString":"c <<= 1","position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"c <<= 1"},"variableMap":{"c":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:318","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"status":-2},{"failures":[],"tindex":"f78523f7-1702-11e6-8642-8f2f1cb5c28f","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"status":0},{"failures":[],"tindex":"f7854b08-1702-11e6-8642-27d83b12648e","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return java.security.MessageDigest.getInstance(algorithm)","position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"status":-2},{"failures":[],"tindex":"f7854b09-1702-11e6-8642-d9b47851f018","series":0,"name":"replace","transplant":{"toString":"final org.apache.commons.codec.language.bm.Languages.LanguageSet ls = guessLanguages(text)","position":"org.apache.commons.codec.language.bm.Lang:203","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text)"},"variableMap":{"text":"input"},"type":"adrStmt","transplantationPoint":{"toString":"final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.lang.guessLanguages(input)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:384","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input)"},"status":-2},{"failures":[],"tindex":"f7854b0a-1702-11e6-8642-7fda5c231bd6","series":0,"name":"replace","transplant":{"toString":"return doubleMetaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DoubleMetaphone:206","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(value)))","position":"org.apache.commons.codec.net.BCodec:201","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(value)))"},"status":-2},{"failures":[],"tindex":"f7854b0b-1702-11e6-8642-8d4818beb4be","series":0,"name":"replace","transplant":{"toString":"final java.security.MessageDigest ctx = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()","position":"org.apache.commons.codec.digest.Md5Crypt:196","type":"CtLocalVariableImpl","sourcecode":"final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.security.MessageDigest altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)","position":"org.apache.commons.codec.digest.Sha2Crypt:188","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-2},{"failures":[],"tindex":"f7854b0c-1702-11e6-8642-19f1eac0eb56","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (data.length) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n        data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n    } \n}","position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"status":-2},{"failures":[],"tindex":"f785721d-1702-11e6-8642-ab0ff7b785f4","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"tio\", \"sio\")","position":"org.apache.commons.codec.language.Caverphone1:79","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tio\", \"sio\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:144","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[],"tindex":"f785721e-1702-11e6-8642-9b4f2eb9c939","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"status":-2},{"failures":[30,31],"tindex":"f785721f-1702-11e6-8642-7da5dbd64839","series":0,"name":"add","transplant":{"toString":"left = (t >>> 1) | (t << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"variableMap":{"t":"left","left":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:313","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-1},{"failures":[32,33],"tindex":"f7857220-1702-11e6-8642-23a46d685815","series":0,"name":"replace","transplant":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"status":-1},{"failures":[],"tindex":"f7857221-1702-11e6-8642-a59c01bf2620","series":0,"name":"replace","transplant":{"toString":"name = removeVowels(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:136","type":"CtAssignmentImpl","sourcecode":"name = removeVowels(name)"},"variableMap":{"name":"algorithm"},"type":"adrStmt","transplantationPoint":{"toString":"this.algorithm = algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:78","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = algorithm"},"status":-2},{"failures":[],"tindex":"f7857222-1702-11e6-8642-3fec82730779","series":0,"name":"replace","transplant":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"variableMap":{"key":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())","position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"status":-2},{"failures":[],"tindex":"f7859933-1702-11e6-8642-9731d4fdb67b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n    result.append('K');\n    index += 2;\n} else if (index == 0) {\n    if ((charAt(value, (index + 2))) == 'I') {\n        result.append('J');\n    } else {\n        result.append('K');\n    }\n    index += 2;\n} else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n    index += 2;\n} else {\n    if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        result.append('F');\n    } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n        result.append('K');\n    } \n    index += 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:467","type":"CtIfImpl","sourcecode":"if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n    result.append('K');\n    index += 2;\n} else if (index == 0) {\n    if ((charAt(value, (index + 2))) == 'I') {\n        result.append('J');\n    } else {\n        result.append('K');\n    }\n    index += 2;\n} else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n    index += 2;\n} else {\n    if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        result.append('F');\n    } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n        result.append('K');\n    } \n    index += 2;\n}"},"status":-2},{"failures":[],"tindex":"f7859934-1702-11e6-8642-d157d5c1c0d4","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Soundex.this.soundexMapping","position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_AF"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_AF","position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"tindex":"f7859935-1702-11e6-8642-0bbb462bc2ee","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"line","leftCharacter":"line","rightCharacter":"line","location":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"f785c046-1702-11e6-8642-1f9a4b0e4686","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:219","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-2},{"failures":[52],"tindex":"f785c047-1702-11e6-8642-b141da9dcb75","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:211","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-1},{"failures":[53],"tindex":"f785c048-1702-11e6-8642-d946dc881761","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((ascii == null) || ((ascii.length) == 0)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:172","type":"CtIfImpl","sourcecode":"if ((ascii == null) || ((ascii.int) == 0)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[],"tindex":"f785c049-1702-11e6-8642-136f6980d750","series":0,"name":"replace","transplant":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"str"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.URLCodec:292","type":"CtTryImpl","sourcecode":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"f785c04a-1702-11e6-8642-6fcf1785ca8b","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)","position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"variableMap":{"byteArray":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":36,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
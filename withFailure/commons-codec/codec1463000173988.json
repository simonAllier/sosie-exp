{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":23,"org.apache.commons.codec.binary.HexTest.testCustomCharset":109,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":123,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":114,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":6,"org.apache.commons.codec.language.NysiisTest.testSnat":134,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":143,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":104,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":8,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":73,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":69,"org.apache.commons.codec.binary.Base64Test.testTriplets":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":12,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":27,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":83,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":117,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":137,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":115,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":118,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":16,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":89,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":5,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":66,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":45,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":4,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":58,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":99,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":63,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":128,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":127,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":39,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":34,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":40,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":22,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":44,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":93,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":126,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":41,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":42,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":92,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":14,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":130,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":74,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":85,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":97,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":98,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":132,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":48,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":111,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":70,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":95,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":103,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":53,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":122,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":133,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":116,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":33,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":113,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":26,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":141,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":64,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":125,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":32,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":90,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":102,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":21,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":20,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":65,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":75,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":96,"org.apache.commons.codec.language.MetaphoneTest.testTCH":112,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":29,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":24,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":138,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":60,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":13,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":47,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":121,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":142,"org.apache.commons.codec.language.NysiisTest.testDropBy":135,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":43,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":131,"org.apache.commons.codec.binary.Base64Test.testBase64":57,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":88,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":11,"org.apache.commons.codec.binary.Base64Test.testUUID":36,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":108,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":2,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":46,"org.apache.commons.codec.binary.Base64Test.testSingletons":52,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":10,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":86,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":18,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":56,"org.apache.commons.codec.binary.Base64Test.testPairs":35,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":100,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":17,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":9,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":61,"org.apache.commons.codec.binary.Base64Test.testCodec112":49,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":84,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":101,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":119,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":80,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":31,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":15,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":110,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":76,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":136,"org.apache.commons.codec.binary.Base64Test.testCodec68":54,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":106,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":77,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":94,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":129,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":67,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":50,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":62,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":78,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":51,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":81,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":7,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":105,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":25,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":0,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":120,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":19,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":140,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":68,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":38,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":55,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":139,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":91,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":79,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":72,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":107,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":37,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":71,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":82,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":124},"transformations":[{"failures":[],"tindex":"cc4998b2-17ba-11e6-96b7-5b81cb8b3f90","series":0,"name":"replace","transplant":{"toString":"result.append('R')","position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"result.append('K', 'X')"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"tindex":"cc49bfc3-17ba-11e6-96b7-1d4f998a1143","series":0,"name":"replace","transplant":{"toString":"context.buffer = null","position":"org.apache.commons.codec.binary.BaseNCodec:297","type":"CtAssignmentImpl","sourcecode":"context.byte[] = null"},"variableMap":{"context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"context.buffer = new byte[getDefaultBufferSize()]","position":"org.apache.commons.codec.binary.BaseNCodec:250","type":"CtAssignmentImpl","sourcecode":"context.byte[] = new byte[getDefaultBufferSize()]"},"status":-1},{"failures":[],"tindex":"cc49bfc4-17ba-11e6-96b7-41db7f8bf36f","series":0,"name":"replace","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"lineLength"},"type":"adrStmt","transplantationPoint":{"toString":"if (lineSeparator == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n} ","position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (lineSeparator == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n} "},"status":-2},{"failures":[82,83],"tindex":"cc49bfc5-17ba-11e6-96b7-93bffe75f87a","series":0,"name":"replace","transplant":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"variableMap":{"index":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:313","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-1},{"failures":[],"tindex":"cc49bfc6-17ba-11e6-96b7-5b43ddbaae1a","series":0,"name":"replace","transplant":{"toString":"sb.append('}')","position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"variableMap":{"sb":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(si.next())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:261","type":"CtInvocationImpl","sourcecode":"sb.append(si.next())"},"status":0},{"failures":[84],"tindex":"cc49e6d7-17ba-11e6-96b7-45e3012fa8fc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"mb$\", \"m2\")","position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"status":-1},{"failures":[],"tindex":"cc49e6d8-17ba-11e6-96b7-a3b5e32fe631","series":0,"name":"add","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"in"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte[] buffer = ensureBufferSize(encodeSize, context);\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK);\n    int b = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.ibitWorkArea = ((context.ibitWorkArea) << 8) + b;\n    if (0 == (context.modulus)) {\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 18) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 12) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[((context.ibitWorkArea) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        context.currentLinePos += org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n        if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n            java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n            context.pos += lineSeparator.length;\n            context.currentLinePos = 0;\n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base64:378","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    int int = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.int = ((context.int) << 8) + b;\n    if (0 == (context.int)) {\n        buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        if (((int) > 0) && ((int) <= (context.int))) {\n            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n            context.int += byte[].int;\n            context.int = 0;\n        } \n    } \n}"},"status":0},{"failures":[85,55,61,62,64,86,87,88,89,90,91,92,93,94,95,78,79,81,96,97,98,99,100,101,102,103,104,105,106],"tindex":"cc4a0de9-17ba-11e6-96b7-9741a176c03a","series":0,"name":"replace","transplant":{"toString":"return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw))","position":"org.apache.commons.codec.binary.BinaryCodec:299","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw))"},"variableMap":{"raw":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.US_ASCII)","position":"org.apache.commons.codec.binary.StringUtils:319","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"cc4a0dea-17ba-11e6-96b7-6d9a5a6fbcc5","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int result = org.apache.commons.codec.binary.Base32.this.decodeTable[b]","position":"org.apache.commons.codec.binary.Base32:354","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.binary.Base32.this.byte[][b]"},"status":-2},{"failures":[107,108],"tindex":"cc4a0deb-17ba-11e6-96b7-a754d0d75823","series":0,"name":"replace","transplant":{"toString":"result.append('X', 'S')","position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n    result.append(\"KS\");\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:335","type":"CtIfImpl","sourcecode":"if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n    result.append(\"KS\");\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[31,36,59,109,110,111],"tindex":"cc4a0dec-17ba-11e6-96b7-339845e6c457","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"j++","position":"org.apache.commons.codec.binary.Hex:92","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"status":-1},{"failures":[],"tindex":"cc4a0ded-17ba-11e6-96b7-533c616aaa5d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:101","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"cc4a34fe-17ba-11e6-96b7-853606902979","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:93","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-3},{"failures":[112,113,114],"tindex":"cc4a34ff-17ba-11e6-96b7-bb052f004232","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd)","position":"org.apache.commons.codec.language.Metaphone:134","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-1},{"failures":[],"tindex":"cc4a3500-17ba-11e6-96b7-2d9d5aca836a","series":0,"name":"replace","transplant":{"toString":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch"},"status":-2},{"failures":[115,116,117,118,119,120],"tindex":"cc4a3501-17ba-11e6-96b7-7535469b48ee","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ls.add(lang)","position":"org.apache.commons.codec.language.bm.Languages:125","type":"CtInvocationImpl","sourcecode":"ls.add(lang)"},"status":-1},{"failures":[107,121,122,123,124,125],"tindex":"cc4a3502-17ba-11e6-96b7-9f8a164fa696","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:947","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-1},{"failures":[],"tindex":"cc4a3503-17ba-11e6-96b7-73b22c46e798","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"status":0},{"failures":[],"tindex":"cc4a5c14-17ba-11e6-96b7-cbab1c2e5848","series":0,"name":"replace","transplant":{"toString":"final java.lang.String remainder = input.substring(((l.length()) + 1))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:419","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(((l.length()) + 1))"},"variableMap":{"input":"name","l":"name"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String replacedName = name.toUpperCase()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"status":-2},{"failures":[],"tindex":"cc4a5c15-17ba-11e6-96b7-532bdfb53117","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"string","key":"charsetName"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}","position":"org.apache.commons.codec.binary.StringUtils:141","type":"CtTryImpl","sourcecode":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}"},"status":-2},{"failures":[],"tindex":"cc4a5c16-17ba-11e6-96b7-c3bd9d187225","series":0,"name":"replace","transplant":{"toString":"this.encodeTable = org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE","position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"finalb","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:277","type":"CtAssignmentImpl","sourcecode":"finalb = ctx1.digest()"},"status":-3},{"failures":[],"tindex":"cc4a5c17-17ba-11e6-96b7-0ffe2fc3e5ed","series":0,"name":"add","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:388","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"status":-2},{"failures":[126,127,128,129,130,131,132,133],"tindex":"cc4a5c18-17ba-11e6-96b7-17e37f845cce","series":0,"name":"replace","transplant":{"toString":"code = '8'","position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"code = '8'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '0'","position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"code = '0'"},"status":-1},{"failures":[],"tindex":"cc4a8329-17ba-11e6-96b7-053184efc5fc","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int w = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255)","position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255)"},"status":-2},{"failures":[],"tindex":"cc4a832a-17ba-11e6-96b7-15372fe89eb9","series":0,"name":"replace","transplant":{"toString":"lastChar = ch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"variableMap":{"ch":"code","lastChar":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '5'","position":"org.apache.commons.codec.language.ColognePhonetic:387","type":"CtAssignmentImpl","sourcecode":"code = '5'"},"status":-2},{"failures":[],"tindex":"cc4a832b-17ba-11e6-96b7-35546c21b6f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtIfImpl","sourcecode":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} "},"status":0},{"failures":[],"tindex":"cc4a832c-17ba-11e6-96b7-d5e4e662f277","series":0,"name":"add","transplant":{"toString":"d &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"cp"},"type":"adrStmt","transplantationPoint":{"toString":"cp += blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"status":0},{"failures":[],"tindex":"cc4a832d-17ba-11e6-96b7-13fdd4b38e7c","series":0,"name":"add","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.net.URLCodec:315","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"cc4a832e-17ba-11e6-96b7-e9e760754590","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} ","position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtIfImpl","sourcecode":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} "},"status":-2},{"failures":[],"tindex":"cc4a832f-17ba-11e6-96b7-535e81097270","series":0,"name":"add","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:224","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":0},{"failures":[134,135,136],"tindex":"cc4aaa40-17ba-11e6-96b7-a5c1a39f1c29","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"prev","curr":"prev"},"type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"status":-1},{"failures":[],"tindex":"cc4aaa41-17ba-11e6-96b7-939cb81c5856","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (key.length) ; i++) {\n    key[i] = 0;\n}","position":"org.apache.commons.codec.digest.UnixCrypt:216","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (key.int) ; i++) {\n    key[i] = 0;\n}"},"status":0},{"failures":[],"tindex":"cc4aaa42-17ba-11e6-96b7-ebf671f4aba4","series":0,"name":"replace","transplant":{"toString":"saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8)","position":"org.apache.commons.codec.digest.Md5Crypt:185","type":"CtAssignmentImpl","sourcecode":"saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8)"},"variableMap":{"saltString":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone2:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":-2},{"failures":[],"tindex":"cc4aaa43-17ba-11e6-96b7-579cec84c948","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> rules : ruleMap.values()) {\n    allRules.addAll(rules);\n}","position":"org.apache.commons.codec.language.bm.Rule:302","type":"CtForEachImpl","sourcecode":"for (final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> : ruleMap.values()) {\n    allRules.addAll(rules);\n}"},"status":-2},{"failures":[],"tindex":"cc4aaa44-17ba-11e6-96b7-5f3c27a3aa16","series":0,"name":"add","transplant":{"toString":"this.chunkSeparatorLength = chunkSeparatorLength","position":"org.apache.commons.codec.binary.BaseNCodec:210","type":"CtAssignmentImpl","sourcecode":"this.int = chunkSeparatorLength"},"variableMap":{"chunkSeparatorLength":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:313","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-2},{"failures":[],"tindex":"cc4aaa45-17ba-11e6-96b7-7bb8297ffe47","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.lineSeparator = new byte[lineSeparator.length]","position":"org.apache.commons.codec.binary.Base64:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[lineSeparator.int]"},"status":-2},{"failures":[137,138,139,140,141],"tindex":"cc4aaa46-17ba-11e6-96b7-637b0babfaac","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:466","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer)"},"status":-1},{"failures":[],"tindex":"cc4aaa47-17ba-11e6-96b7-7926b4529ad5","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:309","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-2},{"failures":[],"tindex":"cc4ad158-17ba-11e6-96b7-b5ca837760ed","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:154","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-3},{"failures":[1,2,13,14,15,20,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,55,56,57,58,59,60,63,64,69,73,77,78,79,81],"tindex":"cc4ad159-17ba-11e6-96b7-036f6cc71238","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.ibitWorkArea = ((context.ibitWorkArea) << 8) + b","position":"org.apache.commons.codec.binary.Base64:385","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << 8) + b"},"status":-1},{"failures":[],"tindex":"cc4ad15a-17ba-11e6-96b7-590bcec37157","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"wy\", \"Wy\")","position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wy\", \"Wy\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = getFirst3Last3(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"name = getFirst3Last3(name)"},"status":-2},{"failures":[142,120,143],"tindex":"cc4ad15b-17ba-11e6-96b7-3d5e34eaef6d","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Languages:269","type":"CtReturnImpl","sourcecode":"return false"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":42,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
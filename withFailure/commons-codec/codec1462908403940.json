{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":21,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":42,"org.apache.commons.codec.language.NysiisTest.testSnat":15,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":43,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":44,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":74,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":66,"org.apache.commons.codec.language.NysiisTest.testDropBy":17,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":45,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":37,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":69,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":3,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":38,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":67,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":73,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":1,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":28,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":65,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":71,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":75,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":23,"org.apache.commons.codec.language.NysiisTest.testRule2":9,"org.apache.commons.codec.language.NysiisTest.testRule1":8,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":57,"org.apache.commons.codec.language.NysiisTest.testRule7":12,"org.apache.commons.codec.language.NysiisTest.testRule6":11,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":59,"org.apache.commons.codec.language.NysiisTest.testRule5":10,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":58,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":72,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":26,"org.apache.commons.codec.language.NysiisTest.testCap":4,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":31,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":52,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":39,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":56,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":29,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":54,"org.apache.commons.codec.language.NysiisTest.testBran":13,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":20,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":35,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":55,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":64,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":49,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":63,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":60,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":68,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":48,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":32,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":53,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":41,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":36,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":27,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":40,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":33,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":25,"org.apache.commons.codec.language.NysiisTest.testDad":5,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":76,"org.apache.commons.codec.language.SoundexTest.testNewInstance":51,"org.apache.commons.codec.language.NysiisTest.testOthers":18,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":24,"org.apache.commons.codec.language.NysiisTest.testTranan":19,"org.apache.commons.codec.language.SoundexTest.testDifference":50,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":2,"org.apache.commons.codec.language.NysiisTest.testDan":6,"org.apache.commons.codec.language.NysiisTest.testFal":7,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":61,"org.apache.commons.codec.language.NysiisTest.testSnad":14,"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":70,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":34,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":22,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0},"transformations":[{"failures":[],"tindex":"211561a7-16e5-11e6-a733-6fbbd422284b","series":0,"name":"add","transplant":{"toString":"context.currentLinePos += org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base32:517","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"variableMap":{"currentLinePos":"currentLinePos","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"currentLinePos","context":"context"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos = 0","position":"org.apache.commons.codec.binary.Base64:395","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"status":-2},{"failures":[],"tindex":"211588b8-16e5-11e6-a733-c5b691478758","series":0,"name":"add","transplant":{"toString":"final java.io.InputStream lRulesIS = org.apache.commons.codec.language.bm.Lang.class.getClassLoader().getResourceAsStream(languageRulesResourceName)","position":"org.apache.commons.codec.language.bm.Lang:131","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName)"},"variableMap":{"org.apache.commons.codec.language.bm.Lang.class":"org.apache.commons.codec.language.DaitchMokotoffSoundex.class","languageRulesResourceName":"org.apache.commons.codec.language.DaitchMokotoffSoundex.RESOURCE_FILE"},"type":"adrStmt","transplantationPoint":{"toString":"final java.io.InputStream rulesIS = org.apache.commons.codec.language.DaitchMokotoffSoundex.class.getClassLoader().getResourceAsStream(org.apache.commons.codec.language.DaitchMokotoffSoundex.RESOURCE_FILE)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:229","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.Class.getClassLoader().getResourceAsStream(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)"},"status":-2},{"failures":[],"tindex":"2115afc9-16e5-11e6-a733-772497b57f6d","series":0,"name":"replace","transplant":{"toString":"final int[] schedule = new int[32]","position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int[] out = new int[2]","position":"org.apache.commons.codec.digest.UnixCrypt:314","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"status":-2},{"failures":[0,1],"tindex":"2115afca-16e5-11e6-a733-1744a010e2e8","series":0,"name":"replace","transplant":{"toString":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"variableMap":{"b":"b","offset":"offset","iValue":"iValue"},"type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"2115d6db-16e5-11e6-a733-c7c62fdfa697","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"key.append(str.charAt(0))","position":"org.apache.commons.codec.language.Nysiis:274","type":"CtInvocationImpl","sourcecode":"key.append(str.charAt(0))"},"status":-1},{"failures":[21],"tindex":"2115d6dc-16e5-11e6-a733-cfe111014e34","series":0,"name":"replace","transplant":{"toString":"return upperName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"variableMap":{"upperName":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return doubleMetaphone(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:217","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value)"},"status":-1},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"2115d6dd-16e5-11e6-a733-f51c51d1c29e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((m == null) || (!(m.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:146","type":"CtIfImpl","sourcecode":"if ((m == null) || (!(m.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-1},{"failures":[],"tindex":"2115d6de-16e5-11e6-a733-e788dbe97ffe","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"z\", \"s\")","position":"org.apache.commons.codec.language.Caverphone1:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"z\", \"s\")"},"variableMap":{"txt":"text"},"type":"adrStmt","transplantationPoint":{"toString":"text = text.toUpperCase(java.util.Locale.GERMAN)","position":"org.apache.commons.codec.language.ColognePhonetic:429","type":"CtAssignmentImpl","sourcecode":"text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[],"tindex":"2115fdef-16e5-11e6-a733-a3e6bcecaf32","series":0,"name":"add","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}","position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}","position":"org.apache.commons.codec.net.BCodec:198","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"status":-2},{"failures":[],"tindex":"21162500-16e5-11e6-a733-8dd8dd7705c9","series":0,"name":"replace","transplant":{"toString":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} "},"variableMap":{"input":"input","bContent":"input","endsWith":"startsWith","this":"this","shouldMatch":"startsWith","startsWith":"startsWith"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWithBox && endsWithBox) {\n    java.lang.String boxContent = content.substring(1, ((content.length()) - 1));\n    if (!(boxContent.contains(\"[\"))) {\n        final boolean negate = boxContent.startsWith(\"^\");\n        if (negate) {\n            boxContent = boxContent.substring(1);\n        } \n        final java.lang.String bContent = boxContent;\n        final boolean shouldMatch = !negate;\n        if (startsWith && endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (startsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                }\n            };\n        } \n    } \n} ","position":"org.apache.commons.codec.language.bm.Rule:548","type":"CtIfImpl","sourcecode":"if (startsWithBox && endsWithBox) {\n    java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n    if (!(boxContent.contains(\"[\"))) {\n        final boolean boolean = boxContent.startsWith(\"^\");\n        if (negate) {\n            boxContent = boxContent.substring(1);\n        } \n        final java.lang.String java.lang.String = boxContent;\n        final boolean boolean = !negate;\n        if (startsWith && endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (startsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                }\n            };\n        } \n    } \n} "},"status":-2},{"failures":[],"tindex":"21169a31-16e5-11e6-a733-2570a795b6ce","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder sb = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:145","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[0,1],"tindex":"21169a32-16e5-11e6-a733-3552e1df387d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"left = right","position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"status":-1},{"failures":[],"tindex":"21169a33-16e5-11e6-a733-7bc6b017f2c9","series":0,"name":"replace","transplant":{"toString":"return encodeText(str, charset)","position":"org.apache.commons.codec.net.QCodec:230","type":"CtReturnImpl","sourcecode":"return encodeText(str, charset)"},"variableMap":{"str":"input","charset":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(input, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:385","type":"CtReturnImpl","sourcecode":"return encode(input, languageSet)"},"status":-2},{"failures":[],"tindex":"2116c144-16e5-11e6-a733-4f2f3f98d552","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"2116c145-16e5-11e6-a733-dbb9e97bfa99","series":0,"name":"replace","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"saltBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:504","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"status":0},{"failures":[],"tindex":"2116c146-16e5-11e6-a733-c7c7b0d2799b","series":0,"name":"add","transplant":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX"},"type":"adrStmt","transplantationPoint":{"toString":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strA.length())))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:337","type":"CtReturnImpl","sourcecode":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())))"},"status":-2},{"failures":[37,38,39],"tindex":"2116e857-16e5-11e6-a733-cd8e286f1ca2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.engine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.engine.getNameType() , ruleType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.engine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.engine.getMaxPhonemes())","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:161","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , ruleType , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes())"},"status":-1},{"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"tindex":"2116e858-16e5-11e6-a733-2b7010bfa7fd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)","position":"org.apache.commons.codec.language.Soundex:262","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-1},{"failures":[63,64,65,66,67,68,69],"tindex":"2116e859-16e5-11e6-a733-559de792d585","series":0,"name":"replace","transplant":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:289","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[],"tindex":"21170f6a-16e5-11e6-a733-7f8da4479fa9","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (bytes.length) ; i++) {\n    final int b = bytes[i];\n    if (b == '+') {\n        buffer.write(' ');\n    } else if (b == (org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR)) {\n        try {\n            final int u = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            buffer.write(((char)((u << 4) + l)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n        }\n    } else {\n        buffer.write(b);\n    }\n}","position":"org.apache.commons.codec.net.URLCodec:166","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final int int = bytes[i];\n    if (b == '+') {\n        buffer.write(' ');\n    } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n        try {\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            buffer.write(((char)((u << 4) + l)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n        }\n    } else {\n        buffer.write(b);\n    }\n}"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"2117367b-16e5-11e6-a733-3378a61efcf5","series":0,"name":"add","transplant":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"key"},"type":"adrStmt","transplantationPoint":{"toString":"key.append(str.charAt(0))","position":"org.apache.commons.codec.language.Nysiis:274","type":"CtInvocationImpl","sourcecode":"key.append(str.charAt(0))"},"status":-1},{"failures":[],"tindex":"2117367c-16e5-11e6-a733-23baf9fe34f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.languages = languages","position":"org.apache.commons.codec.language.bm.Languages:289","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = languages"},"status":-2},{"failures":[],"tindex":"2117367d-16e5-11e6-a733-ef44103cdc17","series":0,"name":"add","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.RADIX)) + \"): \") + b));\n} ","position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"status":-2},{"failures":[],"tindex":"2117367e-16e5-11e6-a733-a988a150fe2e","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)","position":"org.apache.commons.codec.digest.UnixCrypt:351","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)"},"status":-2},{"failures":[],"tindex":"21175d8f-16e5-11e6-a733-a5a9f7e7e79e","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_AF","position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_AF":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"status":-2},{"failures":[70],"tindex":"21175d90-16e5-11e6-a733-45e92561b8af","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.BCodec:139","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"21175d91-16e5-11e6-a733-d1461adfc4ab","series":0,"name":"replace","transplant":{"toString":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"variableMap":{"b":"lineSeparator","c":"currentLinePos","u":"length","y":"currentLinePos"},"type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n    context.currentLinePos = 0;\n} ","position":"org.apache.commons.codec.binary.Base64:392","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-2},{"failures":[],"tindex":"21175d92-16e5-11e6-a733-0ff0b7c68776","series":0,"name":"replace","transplant":{"toString":"context.buffer = null","position":"org.apache.commons.codec.binary.BaseNCodec:297","type":"CtAssignmentImpl","sourcecode":"context.byte[] = null"},"variableMap":{"context":"context","buffer":"b"},"type":"adrStmt","transplantationPoint":{"toString":"context.buffer = b","position":"org.apache.commons.codec.binary.BaseNCodec:256","type":"CtAssignmentImpl","sourcecode":"context.byte[] = b"},"status":-3},{"failures":[],"tindex":"211784a3-16e5-11e6-a733-c9958c624caa","series":0,"name":"add","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (((pad) == element) || (isInAlphabet(element))) {\n    return true;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:500","type":"CtIfImpl","sourcecode":"if (((byte) == element) || (isInAlphabet(element))) {\n    return true;\n} "},"status":0},{"failures":[71,72,73,74,75,76],"tindex":"211784a4-16e5-11e6-a733-992e911c2208","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"status":-1},{"failures":[0,1],"tindex":"211784a5-16e5-11e6-a733-c7d4319b472a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"right = t","position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":31,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
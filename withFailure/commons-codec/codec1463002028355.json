{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":38,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":37,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":86,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":85,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":44,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":4,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":90,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":5,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":27,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":52,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":1,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":41,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":67,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":89,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":100,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":0,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":62,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":17,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":57,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":63,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":98,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":6,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":88,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":64,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":65,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":95,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":48,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":97,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":30,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":36,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":81,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":94,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":78,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":103,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":35,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":39,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":28,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":79,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":49,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":91,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":75,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":84,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":104,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":9,"org.apache.commons.codec.binary.Base64Test.testBase64":74,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":14,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":96,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":33,"org.apache.commons.codec.binary.Base64Test.testUUID":59,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":68,"org.apache.commons.codec.binary.Base64Test.testSingletons":72,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":82,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":24,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":54,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":12,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":11,"org.apache.commons.codec.binary.Base64Test.testPairs":58,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":53,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":76,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":83,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":99,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":7,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":40,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":42,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":70,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":77,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":21,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":23,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":71,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":34,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":80,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":13,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":55,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":93,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":102,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":43,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":61,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":73,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":92,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":29,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":46,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":105},"transformations":[{"failures":[],"tindex":"1d93d9d1-17bf-11e6-9947-9d3aa50c2434","series":0,"name":"replace","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return +1","position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"status":0},{"failures":[],"tindex":"1d9400e2-17bf-11e6-9947-f11bf17a6d3f","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"string","key":"charsetName"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}","position":"org.apache.commons.codec.binary.StringUtils:141","type":"CtTryImpl","sourcecode":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}"},"status":-2},{"failures":[0,1],"tindex":"1d9427f3-17bf-11e6-9947-7bd39de6d925","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"status":-1},{"failures":[],"tindex":"1d9427f4-17bf-11e6-9947-01e2903768f7","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int b = bytes[i]","position":"org.apache.commons.codec.net.URLCodec:167","type":"CtLocalVariableImpl","sourcecode":"final int int = bytes[i]"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"1d9427f5-17bf-11e6-9947-555b70f591c6","series":0,"name":"replace","transplant":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"boxContent"},"type":"adrStmt","transplantationPoint":{"toString":"if (negate) {\n    boxContent = boxContent.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtIfImpl","sourcecode":"if (negate) {\n    boxContent = boxContent.substring(1);\n} "},"status":-1},{"failures":[],"tindex":"1d9427f6-17bf-11e6-9947-99fe749cd33a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n    return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:51","type":"CtIfImpl","sourcecode":"if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n    return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n} "},"status":0},{"failures":[20],"tindex":"1d944f07-17bf-11e6-9947-2dcbed3c6743","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.DoubleMetaphone:894","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[21,22,23,24,25,26,27,28],"tindex":"1d944f08-17bf-11e6-9947-bd2e4b20dd9d","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return buffer.toString()","position":"org.apache.commons.codec.net.RFC1522Codec:81","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[],"tindex":"1d944f09-17bf-11e6-9947-93393d0ced33","series":0,"name":"add","transplant":{"toString":"return result","position":"org.apache.commons.codec.binary.BaseNCodec:414","type":"CtReturnImpl","sourcecode":"return result"},"variableMap":{"result":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:410","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes)"},"status":-2},{"failures":[],"tindex":"1d944f0a-17bf-11e6-9947-c927b0387256","series":0,"name":"add","transplant":{"toString":"final char[] name2Char = name2.toCharArray()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:296","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = name2.toCharArray()"},"variableMap":{"name2":"object"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] charArray = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object))","position":"org.apache.commons.codec.binary.Hex:251","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object))"},"status":-2},{"failures":[29,30,31,32,33],"tindex":"1d94c43b-17bf-11e6-9947-91cc47aa9337","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:639","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1"},"status":-1},{"failures":[34,35,36,37,38],"tindex":"1d94c43c-17bf-11e6-9947-956262a3bccd","series":0,"name":"replace","transplant":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append('|')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"status":-1},{"failures":[39],"tindex":"1d94c43d-17bf-11e6-9947-f918797305d7","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.RefinedSoundex:177","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[39],"tindex":"1d94c43e-17bf-11e6-9947-e5156700cbb3","series":0,"name":"replace","transplant":{"toString":"return 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2)","position":"org.apache.commons.codec.language.RefinedSoundex:116","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2)"},"status":-1},{"failures":[],"tindex":"1d94eb4f-17bf-11e6-9947-0d9c4bc44948","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"urlsafe"},"type":"adrStmt","transplantationPoint":{"toString":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.WWW_FORM_URL;\n} ","position":"org.apache.commons.codec.net.URLCodec:125","type":"CtIfImpl","sourcecode":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n} "},"status":-3},{"failures":[],"tindex":"1d94eb50-17bf-11e6-9947-7d822aafb654","series":0,"name":"replace","transplant":{"toString":"int index = isSilentStart(value) ? 1 : 0","position":"org.apache.commons.codec.language.DoubleMetaphone:93","type":"CtLocalVariableImpl","sourcecode":"int int = isSilentStart(value) ? 1 : 0"},"variableMap":{"value":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"final int name2Size = (name2.length()) - 1","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:299","type":"CtLocalVariableImpl","sourcecode":"final int int = (name2.length()) - 1"},"status":-2},{"failures":[],"tindex":"1d94eb51-17bf-11e6-9947-fdf9146f31f4","series":0,"name":"replace","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":0},{"failures":[21,22,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"1d951262-17bf-11e6-9947-e71c050663b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (b == (pad)) {\n    context.eof = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n        final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n        if (result >= 0) {\n            context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n            context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n            if ((context.modulus) == 0) {\n                buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            } \n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base64:438","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[83],"tindex":"1d951263-17bf-11e6-9947-8dc27b707714","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"h\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"status":-1},{"failures":[84,85,86,87,88,89],"tindex":"1d953974-17bf-11e6-9947-0f1c98e97833","series":0,"name":"replace","transplant":{"toString":"code = '3'","position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"variableMap":{"code":"last"},"type":"adrStmt","transplantationPoint":{"toString":"last = getMappingCode(str, 0)","position":"org.apache.commons.codec.language.Soundex:271","type":"CtAssignmentImpl","sourcecode":"last = getMappingCode(str, 0)"},"status":-1},{"failures":[],"tindex":"1d953975-17bf-11e6-9947-ddc30c5d2821","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:93","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-3},{"failures":[90,91,92,93,94],"tindex":"1d953976-17bf-11e6-9947-4b3f4a1a03d6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:464","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer)"},"status":-1},{"failures":[],"tindex":"1d953977-17bf-11e6-9947-79908664cdb3","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"this.name = name","position":"org.apache.commons.codec.language.bm.NameType:42","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"status":-2},{"failures":[],"tindex":"1d956088-17bf-11e6-9947-63fcc42f84cc","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:461","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)"},"variableMap":{"altResult":"obj","buffer":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Caverphone:74","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[21,22,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82],"tindex":"1d956089-17bf-11e6-9947-0576be65b831","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base64:450","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[95,96,97,98,99,83,100,101,102],"tindex":"1d95608a-17bf-11e6-9947-3b99c2eef5f0","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"[^a-z]\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"r3\", \"R3\")","position":"org.apache.commons.codec.language.Caverphone2:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r3\", \"R3\")"},"status":-1},{"failures":[],"tindex":"1d95608b-17bf-11e6-9947-57152e09cda8","series":0,"name":"replace","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"i","len":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n}","position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n}"},"status":-3},{"failures":[83,101,102],"tindex":"1d95879c-17bf-11e6-9947-35103e24f3c6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[103,104,30,31,105,32],"tindex":"1d95879d-17bf-11e6-9947-6b63cd9fd755","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:947","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":29,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
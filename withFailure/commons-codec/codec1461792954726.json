{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":176,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":2,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":129,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":141,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":6,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":82,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":193,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":25,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":183,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN":199,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":179,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":162,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":163,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":99,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":196,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":98,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":164,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":21,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":105,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":151,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":4,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":174,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":125,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":126,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":96,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":147,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":137,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":173,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":192,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":93,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":195,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":132,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":157,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":80,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":81,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":65,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":121,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":154,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR":200,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":63,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":17,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":24,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":180,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":104,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":31,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":101,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":148,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":136,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":37,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":201,"org.apache.commons.codec.binary.Base64Test.testUUID":55,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":90,"org.apache.commons.codec.binary.Base64Test.testSingletons":103,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":94,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":185,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":57,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":152,"org.apache.commons.codec.binary.Base64Test.testPairs":159,"org.apache.commons.codec.binary.Base64Test.testConstructors":160,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":184,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":72,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":46,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":68,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":52,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":143,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":9,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":170,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":28,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":171,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":190,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":32,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":39,"org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter":74,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":49,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":140,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":112,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":130,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":166,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":43,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":161,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":30,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":12,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":50,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":75,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":83,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":8,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":146,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":135,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":145,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":127,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":134,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":14,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":115,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":114,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":181,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":77,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":45,"org.apache.commons.codec.binary.Base64Test.testTriplets":156,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":38,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":76,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":119,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":117,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":120,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":172,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":149,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":100,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":44,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":62,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":204,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":116,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":158,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":191,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":203,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":108,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":84,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":5,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":10,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":22,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":89,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":194,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":18,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":202,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":169,"org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence":206,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":47,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":1,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":144,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":178,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":118,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":133,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":87,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":40,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":95,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":64,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":198,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":29,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":122,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":35,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":27,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":107,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":91,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":16,"org.apache.commons.codec.language.MetaphoneTest.testTCH":128,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":92,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":177,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":153,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":111,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":139,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":165,"org.apache.commons.codec.binary.Base64Test.testBase64":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":113,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":26,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":41,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":167,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":182,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":85,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":70,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":19,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":23,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":60,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":48,"org.apache.commons.codec.binary.Base64Test.testCodec112":102,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":109,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":189,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":54,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":106,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":155,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":197,"org.apache.commons.codec.binary.Base64Test.testCodec68":175,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":124,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":34,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":79,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":123,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":150,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":61,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":187,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":131,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":88,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":186,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":71,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":13,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":138,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":205,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":78,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":142,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":188,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":110,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":73,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":168,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":97},"transformations":[{"failures":[],"tindex":"058adf00-0cc0-11e6-9b8f-a34dbdd0bce0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:81","type":"CtForImpl","sourcecode":"for (int int = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":0},{"failures":[0,1,2,3],"tindex":"058b0611-0cc0-11e6-9b8f-0932fa64db9e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"variableMap":{"code":"alternate"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:964","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[],"tindex":"058b0612-0cc0-11e6-9b8f-7bcde0f71900","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:293","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.this.java.util.Set<java.lang.String>"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"058b2d23-0cc0-11e6-9b8f-8d0e732040ca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:579","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:235","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"058b2d24-0cc0-11e6-9b8f-d5ef54526eca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:67","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"status":0},{"failures":[66,67,68,69,70,71],"tindex":"058b5435-0cc0-11e6-9b8f-c992fb4bab81","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"status":-1},{"failures":[72],"tindex":"058b5436-0cc0-11e6-9b8f-799abdcf929e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:158","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.net.QCodec.this.boolean) {\n    for (int int = 0 ; i < (data.int) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n            data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n        } \n    }\n} "},"status":-1},{"failures":[1,73,3],"tindex":"058b5437-0cc0-11e6-9b8f-73095d09a162","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[],"tindex":"058b5438-0cc0-11e6-9b8f-bdbda7fcb28e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"variableMap":{"byteArray":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:335","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"status":-2},{"failures":[74],"tindex":"058b7b49-0cc0-11e6-9b8f-a97390e60fc3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtIfImpl","sourcecode":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} "},"status":-1},{"failures":[],"tindex":"058b7b4a-0cc0-11e6-9b8f-4dcf864c8446","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:185","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"058b7b4b-0cc0-11e6-9b8f-6b4e303f3458","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:176","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-2},{"failures":[75,76],"tindex":"058ba25c-0cc0-11e6-9b8f-67c0c372a005","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"variableMap":{"b":"key","offset":"i","iValue":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"status":-1},{"failures":[75,76],"tindex":"058ba25d-0cc0-11e6-9b8f-cbc16843b88f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"startSrc = 1"},"variableMap":{"startSrc":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:288","type":"CtAssignmentImpl","sourcecode":"right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule)"},"status":-1},{"failures":[],"tindex":"058ba25e-0cc0-11e6-9b8f-a7490f711aef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"status":0},{"failures":[],"tindex":"058bc96f-0cc0-11e6-9b8f-2fe6b46f8b5b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"status":-2},{"failures":[1,73,3],"tindex":"058bc970-0cc0-11e6-9b8f-cbdd6a828f13","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[],"tindex":"058bc971-0cc0-11e6-9b8f-4deaf52e6549","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"variableMap":{"b":"buffer","offset":"pos","iValue":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:456","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[],"tindex":"058bc972-0cc0-11e6-9b8f-29e38368d022","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:147","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"status":-2},{"failures":[],"tindex":"058bf083-0cc0-11e6-9b8f-8d3ec3753ba6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:428","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Metaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:477","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[],"tindex":"058bf084-0cc0-11e6-9b8f-2d7ee5df369e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"status":0},{"failures":[],"tindex":"058bf085-0cc0-11e6-9b8f-c1ca20312fba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:70","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"058bf086-0cc0-11e6-9b8f-e730f7f0d32d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:176","type":"CtAssignmentImpl","sourcecode":"hasUnderscores = true"},"variableMap":{"hasUnderscores":"accept"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:177","type":"CtInvocationImpl","sourcecode":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))"},"status":-2},{"failures":[],"tindex":"058c1797-0cc0-11e6-9b8f-7f98c853b4a2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"u"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"status":-2},{"failures":[],"tindex":"058c1798-0cc0-11e6-9b8f-696cf66f7984","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:222","type":"CtReturnImpl","sourcecode":"return (context.byte[]) != null"},"status":-2},{"failures":[],"tindex":"058c1799-0cc0-11e6-9b8f-a3195e516153","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacAlgorithms:51","type":"CtConstructorCallImpl","sourcecode":"new org.apache.commons.codec.digest.HmacAlgorithms(\"HmacSHA256\")"},"status":0},{"failures":[],"tindex":"058c179a-0cc0-11e6-9b8f-65d9e3562521","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}"},"status":-2},{"failures":[0,77,78,79,80,81,1,2,82,83,84,73,3,85,86],"tindex":"058c3eab-0cc0-11e6-9b8f-a12a164bb01e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:69","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"status":-1},{"failures":[],"tindex":"058c3eac-0cc0-11e6-9b8f-ddb8049194bf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[87,88,89,90,91,92,93,94,95,75,76],"tindex":"058c3ead-0cc0-11e6-9b8f-51cb6820d815","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"variableMap":{"data":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtIfImpl","sourcecode":"if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt);\n} else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt);\n} else if (salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt);\n} else {\n    return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt);\n}"},"status":-1},{"failures":[],"tindex":"058c65be-0cc0-11e6-9b8f-37aadad68d72","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:360","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[],"tindex":"058c65bf-0cc0-11e6-9b8f-37d5483d0a43","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:238","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))"},"variableMap":{"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES","org.apache.commons.codec.language.bm.NameType.ASHKENAZI":"org.apache.commons.codec.language.bm.NameType.GENERIC"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:245","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))"},"status":0},{"failures":[],"tindex":"058c8cd0-0cc0-11e6-9b8f-031316ff4da9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:303","type":"CtInvocationImpl","sourcecode":"allRules.addAll(rules)"},"status":0},{"failures":[7],"tindex":"058c8cd1-0cc0-11e6-9b8f-5fbace172edb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:552","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest)"},"variableMap":{"valueToDigest":"valueToDigest","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest)"},"status":-1},{"failures":[],"tindex":"058c8cd2-0cc0-11e6-9b8f-c1dca73d272c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wy\", \"Wy\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-2},{"failures":[40,41,45,52,96,55,97,98,99,100,101,102,103,56,59,62,64,104,105,106,107],"tindex":"058c8cd3-0cc0-11e6-9b8f-e57d5465f0c6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:351","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-1},{"failures":[],"tindex":"058cb3e4-0cc0-11e6-9b8f-9701221739c2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:337","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"058cb3e5-0cc0-11e6-9b8f-f3d346a91edd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"status":-2},{"failures":[],"tindex":"058cdaf6-0cc0-11e6-9b8f-0f295f7687c8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"variableMap":{"compareCode":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:392","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[108,109,110,111,112,113,114,115,116,117,118,119,120],"tindex":"058cdaf7-0cc0-11e6-9b8f-bf51374b8ead","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"lang","leftCharacter":"lang","rightCharacter":"lang","location":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:124","type":"CtIfImpl","sourcecode":"if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n    ls.add(lang);\n} "},"status":-1},{"failures":[121],"tindex":"058cdaf8-0cc0-11e6-9b8f-1b1c22b90c4e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"encoding","leftCharacter":"encoding","rightCharacter":"encoding","location":"encoding"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"status":-1},{"failures":[],"tindex":"058d0209-0cc0-11e6-9b8f-4f4968c0be54","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:288","type":"CtIfImpl","sourcecode":"if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n}"},"variableMap":{"obj":"pObject"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:114","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(pObject)))"},"status":-2},{"failures":[],"tindex":"058d020a-0cc0-11e6-9b8f-1550cb88d6fa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:402","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 24) & 255))"},"variableMap":{"b":"buffer","offset":"org.apache.commons.codec.binary.Base64.MASK_6BITS","iValue":"org.apache.commons.codec.binary.Base64.MASK_6BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:351","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"058d020b-0cc0-11e6-9b8f-493a24d5f7d1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"c <<= 1"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:718","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":0},{"failures":[122,123,124,125,126],"tindex":"058d020c-0cc0-11e6-9b8f-670d423b6d18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:387","type":"CtAssignmentImpl","sourcecode":"code = '5'"},"variableMap":{"code":"current"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:192","type":"CtAssignmentImpl","sourcecode":"current = getMappingCode(str.charAt(i))"},"status":-1},{"failures":[127,87,88],"tindex":"058d291d-0cc0-11e6-9b8f-213b7575751b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:486","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer)"},"status":-1},{"failures":[],"tindex":"058d502e-0cc0-11e6-9b8f-17e28e17340f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:100","type":"CtForImpl","sourcecode":"for (int int = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:82","type":"CtForImpl","sourcecode":"for (int int = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i);\n}"},"status":-2},{"failures":[],"tindex":"058d502f-0cc0-11e6-9b8f-7f9657534027","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:539","type":"CtIfImpl","sourcecode":"if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n    return false;\n} "},"variableMap":{"arrayOctet":"arrayOctet","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:465","type":"CtIfImpl","sourcecode":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"058d5030-0cc0-11e6-9b8f-a7d86aa54a02","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"currentLine","to":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtIfImpl","sourcecode":"if (line.contains(\"=\")) {\n    final java.lang.String[] java.lang.String[] = line.split(\"=\");\n    if ((parts.int) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        final java.lang.String java.lang.String = parts[0];\n        final java.lang.String java.lang.String = parts[1];\n        if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n        } \n        asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n            final char char = r.java.lang.String.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                ruleMapping.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"058d7741-0cc0-11e6-9b8f-1140cfba6bfe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"variableMap":{"d":"modulus"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[128,129],"tindex":"058d7742-0cc0-11e6-9b8f-e9d357a04886","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtIfImpl","sourcecode":"if ((inwd[1]) == 'H') {\n    local.append(inwd, 1, ((inwd.int) - 1));\n    local.setCharAt(0, 'W');\n} else {\n    local.append(inwd);\n}"},"status":-1},{"failures":[],"tindex":"058d7743-0cc0-11e6-9b8f-73951d255b21","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:171","type":"CtLocalVariableImpl","sourcecode":"final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:373","type":"CtLocalVariableImpl","sourcecode":"final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")))"},"status":-2},{"failures":[],"tindex":"058d7744-0cc0-11e6-9b8f-e7d69832caf5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"status":-2},{"failures":[],"tindex":"058d7745-0cc0-11e6-9b8f-1f51a702fc04","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"variableMap":{"encoding":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-2},{"failures":[1,73,3],"tindex":"058d9e56-0cc0-11e6-9b8f-df56165b1a2c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:506","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"058d9e57-0cc0-11e6-9b8f-3159fd7df60b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"variableMap":{"algorithm":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:112","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[130],"tindex":"058d9e58-0cc0-11e6-9b8f-332f018883d5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[78,1,2,73,3],"tindex":"058d9e59-0cc0-11e6-9b8f-b769c8ed41d9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:744","type":"CtIfImpl","sourcecode":"if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n    result.append(\"KS\");\n} "},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:633","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n    result.appendAlternate('S');\n} else {\n    result.append('S');\n}"},"status":-1},{"failures":[77,1,2,73,3],"tindex":"058d9e5a-0cc0-11e6-9b8f-dd1df4a6b0ee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:303","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[131,132,133,134,135,136,137,138,139],"tindex":"058d9e5b-0cc0-11e6-9b8f-438425afd2b0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:317","type":"CtAssignmentImpl","sourcecode":"rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>()"},"variableMap":{"rules":"rules"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:318","type":"CtInvocationImpl","sourcecode":"ruleMapping.put(patternKey, rules)"},"status":-1},{"failures":[27,28,140,29,30,31,141,33,142,143,37,38,39,144,40,145,146,147,41,148,149,150,43,44,45,46,47,48,49,50,51,151,152,153,154,155,52,156,54,157,96,158,159,55,97,160,161,162,163,98,164,165,99,166,100,167,168,101,169,102,170,171,172,173,103,174,175,56,176,177,57,58,178,179,59,180,60,61,62,64,65,181,182,104,105,106,183,184,185,186,107,187,188,189,190],"tindex":"058dc56c-0cc0-11e6-9b8f-9750da3e991f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:500","type":"CtIfImpl","sourcecode":"if (((byte) == element) || (isInAlphabet(element))) {\n    return true;\n} "},"status":-1},{"failures":[27,191,140,32,192,141,193,194,33,37,38,39,40,41,149,43,45,50,51,151,152,153,154,155,52],"tindex":"058dc56d-0cc0-11e6-9b8f-3dcf3320f564","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return index + 1"},"variableMap":{"index":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"status":-1},{"failures":[],"tindex":"058dc56e-0cc0-11e6-9b8f-01ebaef3e4e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:232","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch))"},"status":-2},{"failures":[],"tindex":"058dc56f-0cc0-11e6-9b8f-39018a91139c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:244","type":"CtUnaryOperatorImpl","sourcecode":"y++"},"variableMap":{"y":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:365","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[],"tindex":"058dc570-0cc0-11e6-9b8f-6fd50abe26bd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"chunkSeparatorLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"lineLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"lineLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"lineLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"lineLength","minRating":"chunkSeparatorLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"chunkSeparatorLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"chunkSeparatorLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"chunkSeparatorLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"chunkSeparatorLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    len += (((len + (int)) - 1) / (int)) * (int);\n} "},"status":-2},{"failures":[1,2,73,3],"tindex":"058dec81-0cc0-11e6-9b8f-6da921f70569","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"variableMap":{"cnt":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:559","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"058dec82-0cc0-11e6-9b8f-bb6a63a25581","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:475","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[32,195,37,38,39,144,40,41,51],"tindex":"058dec83-0cc0-11e6-9b8f-752c98d08fbf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtIfImpl","sourcecode":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len > 0) {\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    flush(false);\n} "},"status":-1},{"failures":[],"tindex":"058dec84-0cc0-11e6-9b8f-9b4270d746a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:114","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"058dec85-0cc0-11e6-9b8f-57e7a056f2ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[196],"tindex":"058dec86-0cc0-11e6-9b8f-83f573e59242","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"status":-1},{"failures":[197],"tindex":"058e1397-0cc0-11e6-9b8f-1f1af3d0d187","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"string","key":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[131,132,133,134,135],"tindex":"058e1398-0cc0-11e6-9b8f-1bb01f9649d8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\")"},"variableMap":{"result":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"status":-1},{"failures":[],"tindex":"058e1399-0cc0-11e6-9b8f-3f28d9bc88f4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"variableMap":{"text":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"status":-2},{"failures":[146,147,152,153,174,106],"tindex":"058e139a-0cc0-11e6-9b8f-bf3c21612909","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:346","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"058e139b-0cc0-11e6-9b8f-6164cd0ce6a6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:124","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear()"},"variableMap":{"phonemes":"phonemes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:147","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    if ((sb.length()) > 0) {\n        sb.append(\"|\");\n    } \n    sb.append(ph.getPhonemeText());\n}"},"status":0},{"failures":[],"tindex":"058e139c-0cc0-11e6-9b8f-7362fe5638bc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:244","type":"CtIfImpl","sourcecode":"if (isLastChar(wdsz, n)) {\n    break;\n} "},"variableMap":{"wdsz":"i","n":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"status":-2},{"failures":[],"tindex":"058e139d-0cc0-11e6-9b8f-9362724c0c64","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"variableMap":{"b":"savedPos","t":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:371","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2},{"failures":[7],"tindex":"058e3aae-0cc0-11e6-9b8f-676a4af7df84","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:438","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:510","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"status":-1},{"failures":[],"tindex":"058e3aaf-0cc0-11e6-9b8f-a31aa613e83c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:95","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"058e3ab0-0cc0-11e6-9b8f-ed0bcdbe7b69","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:234","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:130","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet"},"status":-2},{"failures":[198,199,200,201],"tindex":"058e3ab1-0cc0-11e6-9b8f-a1b72d93be80","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"variableMap":{"name":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"status":-1},{"failures":[],"tindex":"058e3ab2-0cc0-11e6-9b8f-d5f6d440c023","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:71","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[66,67,202,203,68,69,204,70,71,205,206],"tindex":"058e3ab3-0cc0-11e6-9b8f-91b6105a7839","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:125","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String)"},"status":-1},{"failures":[75,76],"tindex":"058e3ab4-0cc0-11e6-9b8f-3f3dda2f8272","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"right","right":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:312","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-1},{"failures":[],"tindex":"058e3ab5-0cc0-11e6-9b8f-91da66f8e12a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"name = getFirst3Last3(name)"},"status":-2},{"failures":[],"tindex":"058e61c6-0cc0-11e6-9b8f-f16be24db3c7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"variableMap":{"name1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"status":-2},{"failures":[3],"tindex":"058e61c7-0cc0-11e6-9b8f-61ade3ad07d8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:372","type":"CtInvocationImpl","sourcecode":"result.append('X', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"result.append(\"X\", \"SK\")"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":88,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
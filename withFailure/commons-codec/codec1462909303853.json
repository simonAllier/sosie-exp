{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":30,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":47,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":56,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":38,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":28,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":9,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":17,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":51,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":14,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":36,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":3,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":27,"org.apache.commons.codec.binary.Base64Test.testUUID":54,"org.apache.commons.codec.binary.Base64Test.testSingletons":58,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":63,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":43,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":23,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":41,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":21,"org.apache.commons.codec.binary.Base64Test.testCodec112":57,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":5,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":19,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":49,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":55,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":48,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":25,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":52,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":1,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":53,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":64,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":67,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":62,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":65,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":16,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":68,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":32,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":59,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":50,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":26,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":31,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":33},"transformations":[{"failures":[],"tindex":"39782436-16e7-11e6-8192-73a4af551f3c","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"lastReplacement"},"type":"adrStmt","transplantationPoint":{"toString":"branch.lastReplacement = org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this.lastReplacement","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:96","type":"CtAssignmentImpl","sourcecode":"branch.java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this.java.lang.String"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"39787257-16e7-11e6-8192-01a3c6f1c539","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"line = line.substring(0, cmtI)","position":"org.apache.commons.codec.language.bm.Lang:155","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-1},{"failures":[26,27],"tindex":"39787258-16e7-11e6-8192-979a5e5ea9ba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        result.append(\"X\", \"SK\");\n    } else {\n        result.append(\"SK\");\n    }\n} else {\n    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n        result.append('X', 'S');\n    } else {\n        result.append('X');\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:650","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        result.append(\"X\", \"SK\");\n    } else {\n        result.append(\"SK\");\n    }\n} else {\n    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n        result.append('X', 'S');\n    } else {\n        result.append('X');\n    }\n}"},"status":-1},{"failures":[],"tindex":"39787259-16e7-11e6-8192-eb9f7840a5fb","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"variableMap":{"charset":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"return cachedString","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:155","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-2},{"failures":[],"tindex":"3978996a-16e7-11e6-8192-b992e334c053","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index = handleSC(value, result, index)","position":"org.apache.commons.codec.language.DoubleMetaphone:631","type":"CtAssignmentImpl","sourcecode":"index = handleSC(value, result, index)"},"status":-2},{"failures":[],"tindex":"3978996b-16e7-11e6-8192-bd4095d79dab","series":0,"name":"replace","transplant":{"toString":"final java.io.InputStream rulesIS = org.apache.commons.codec.language.DaitchMokotoffSoundex.class.getClassLoader().getResourceAsStream(org.apache.commons.codec.language.DaitchMokotoffSoundex.RESOURCE_FILE)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:229","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.Class.getClassLoader().getResourceAsStream(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)"},"variableMap":{"org.apache.commons.codec.language.DaitchMokotoffSoundex.RESOURCE_FILE":"languageRulesResourceName","org.apache.commons.codec.language.DaitchMokotoffSoundex.class":"org.apache.commons.codec.language.bm.Lang.class"},"type":"adrStmt","transplantationPoint":{"toString":"final java.io.InputStream lRulesIS = org.apache.commons.codec.language.bm.Lang.class.getClassLoader().getResourceAsStream(languageRulesResourceName)","position":"org.apache.commons.codec.language.bm.Lang:131","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName)"},"status":-3},{"failures":[],"tindex":"3978996c-16e7-11e6-8192-2b76482ff2a1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"3978996d-16e7-11e6-8192-c7ab96f93ec5","series":0,"name":"replace","transplant":{"toString":"java.lang.String replacedName = name.toUpperCase()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"variableMap":{"name":"input"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String text = input.toLowerCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.bm.Lang:215","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":0},{"failures":[],"tindex":"3978c07e-16e7-11e6-8192-e51d779ab0d3","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int w = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255)","position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255)"},"status":-2},{"failures":[28,29,30,31,26,32],"tindex":"3978c07f-16e7-11e6-8192-a1e690bbee06","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:958","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[33,34,35,36],"tindex":"3978c080-16e7-11e6-8192-592cc0484210","series":0,"name":"replace","transplant":{"toString":"out[i] = ((byte)(f & 255))","position":"org.apache.commons.codec.binary.Hex:93","type":"CtAssignmentImpl","sourcecode":"out[i] = ((byte)(f & 255))"},"variableMap":{"f":"offset","i":"iValue","out":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[],"tindex":"3978c081-16e7-11e6-8192-2b0e9690d5ea","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512, key)","position":"org.apache.commons.codec.digest.HmacUtils:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"3978e792-16e7-11e6-8192-9555b5a6c9f2","series":0,"name":"add","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}","position":"org.apache.commons.codec.net.URLCodec:335","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return metaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Metaphone:392","type":"CtReturnImpl","sourcecode":"return metaphone(((java.lang.String)(obj)))"},"status":-2},{"failures":[37,38,39,40,41,42,43,44,45,46],"tindex":"3978e793-16e7-11e6-8192-5f3d8daa112a","series":0,"name":"replace","transplant":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:330","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"3978e794-16e7-11e6-8192-a54b177ad965","series":0,"name":"replace","transplant":{"toString":"final java.util.Scanner lsScanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.ENCODING)","position":"org.apache.commons.codec.language.bm.Languages:178","type":"CtLocalVariableImpl","sourcecode":"final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"variableMap":{"langIS":"lRulesIS","org.apache.commons.codec.language.bm.ResourceConstants.ENCODING":"org.apache.commons.codec.language.bm.ResourceConstants.ENCODING"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Scanner scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.ENCODING)","position":"org.apache.commons.codec.language.bm.Lang:137","type":"CtLocalVariableImpl","sourcecode":"final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"status":-3},{"failures":[29],"tindex":"39790ea5-16e7-11e6-8192-ab394cc091f0","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (slavoGermanic) {\n    result.append('S');\n} else {\n    result.append('S', 'X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtIfImpl","sourcecode":"if (slavoGermanic) {\n    result.append('S');\n} else {\n    result.append('S', 'X');\n}"},"status":-1},{"failures":[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"39790ea6-16e7-11e6-8192-17d535537c8e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = pad","position":"org.apache.commons.codec.binary.Base64:354","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-1},{"failures":[],"tindex":"39790ea7-16e7-11e6-8192-41f8ab9a0141","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final char[] element : org.apache.commons.codec.language.ColognePhonetic.PREPROCESS_MAP) {\n    if ((chrs[index]) == (element[0])) {\n        chrs[index] = element[1];\n        break;\n    } \n}","position":"org.apache.commons.codec.language.ColognePhonetic:435","type":"CtForEachImpl","sourcecode":"for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n    if ((chrs[index]) == (element[0])) {\n        chrs[index] = element[1];\n        break;\n    } \n}"},"status":-2},{"failures":[],"tindex":"397935b8-16e7-11e6-8192-3de64ce94194","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(')')","position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:90","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":0},{"failures":[64,65],"tindex":"397935b9-16e7-11e6-8192-b76f70a103dd","series":0,"name":"add","transplant":{"toString":"sb.append(\"Rule\")","position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"variableMap":{"sb":"saltString"},"type":"adrStmt","transplantationPoint":{"toString":"saltString.append(org.apache.commons.codec.digest.B64.B64T.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.B64T.length())))","position":"org.apache.commons.codec.digest.B64:75","type":"CtInvocationImpl","sourcecode":"saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())))"},"status":-1},{"failures":[],"tindex":"397935ba-16e7-11e6-8192-4db104f09401","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"dc","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"replacedName"},"type":"adrStmt","transplantationPoint":{"toString":"if (replacedName.contains(dc)) {\n    final java.lang.String singleLetter = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"status":-3},{"failures":[26,27],"tindex":"39795ccb-16e7-11e6-8192-adeea4aeaa17","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[66,67,68],"tindex":"39795ccc-16e7-11e6-8192-e50de20d63f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)"},"status":-1},{"failures":[],"tindex":"39795ccd-16e7-11e6-8192-213579d095d8","series":0,"name":"replace","transplant":{"toString":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.SPACE)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.TAB))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:238","type":"CtReturnImpl","sourcecode":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))"},"variableMap":{"b":"i","org.apache.commons.codec.net.QuotedPrintableCodec.SPACE":"pad","org.apache.commons.codec.net.QuotedPrintableCodec.TAB":"pad"},"type":"adrStmt","transplantationPoint":{"toString":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (pad)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:465","type":"CtIfImpl","sourcecode":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} "},"status":-2},{"failures":[],"tindex":"39795cce-16e7-11e6-8192-d19b03b3edd0","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('<')","position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":25,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
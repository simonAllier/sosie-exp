{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":4,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":205,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":73,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":90,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":176,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":174,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":175,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":145,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":177,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":106,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":74,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":30,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":40,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":56,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":38,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":55,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":97,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":187,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":189,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":138,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":188,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":137,"org.apache.commons.codec.language.NysiisTest.testCap":146,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le":8,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":13,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":136,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":10,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":12,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":29,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":140,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":166,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":167,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":143,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":198,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":134,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":33,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":131,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":72,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":47,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":77,"org.apache.commons.codec.language.SoundexTest.testB650":173,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":126,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":91,"org.apache.commons.codec.language.SoundexTest.testNewInstance":181,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":96,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":2,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":196,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":36,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":92,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":76,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":69,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":0,"org.apache.commons.codec.language.NysiisTest.testDropBy":159,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":130,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":141,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":89,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":81,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":16,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":87,"org.apache.commons.codec.language.NysiisTest.testRule2":151,"org.apache.commons.codec.language.NysiisTest.testRule1":150,"org.apache.commons.codec.language.NysiisTest.testRule7":154,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":99,"org.apache.commons.codec.language.NysiisTest.testRule6":153,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":88,"org.apache.commons.codec.language.NysiisTest.testRule5":152,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":182,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":123,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":204,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":117,"org.apache.commons.codec.language.NysiisTest.testBran":155,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":162,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":115,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":80,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":49,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":139,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":202,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":19,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":35,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":65,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":27,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":28,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":58,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":71,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":118,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":183,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":169,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":109,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":46,"org.apache.commons.codec.language.NysiisTest.testDad":147,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":45,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":68,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":144,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":25,"org.apache.commons.codec.language.NysiisTest.testDan":148,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":200,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":64,"org.apache.commons.codec.binary.HexTest.testCustomCharset":116,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":57,"org.apache.commons.codec.language.NysiisTest.testSnat":157,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":93,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":129,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":128,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":112,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":135,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":111,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":48,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":59,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull":124,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":82,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":199,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":85,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":83,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":113,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":63,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":102,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":79,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":186,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":184,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":185,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":15,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":75,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":51,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":95,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":120,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":203,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":119,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":50,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":52,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":84,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":178,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":122,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":127,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":20,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":14,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":42,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":168,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":195,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":67,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":21,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":163,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":62,"org.apache.commons.codec.language.NysiisTest.testTranan":161,"org.apache.commons.codec.language.NysiisTest.testFal":149,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":11,"org.apache.commons.codec.language.NysiisTest.testSnad":156,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":17,"org.apache.commons.codec.language.MetaphoneTest.testTCH":26,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":70,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":44,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":121,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":170,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":171,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":172,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":7,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":105,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":133,"org.apache.commons.codec.binary.Base64Test.testBase64":192,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":201,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":110,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":6,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":108,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":107,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":197,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":98,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":60,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":193,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":103,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":34,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":158,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":190,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":165,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":18,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":179,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":24,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":164,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":194,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":101,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":125,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":114,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":43,"org.apache.commons.codec.language.NysiisTest.testOthers":160,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":191,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":132,"org.apache.commons.codec.language.SoundexTest.testDifference":180,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":9,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":78,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":100,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":104,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":5},"transformations":[{"failures":[],"tindex":"badb89a1-4006-11e6-bf11-1b695a555ca5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return index + 1"},"variableMap":{"index":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtIfImpl","sourcecode":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (readLen == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(buf);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return readLen;\n}"},"status":-2},{"failures":[0,1,2,3,4,5,6],"tindex":"badbd7c2-4006-11e6-bf11-bb7cd3276a95","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"result.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('A');\n} "},"status":-1},{"failures":[],"tindex":"badbd7c3-4006-11e6-bf11-81bfd89bff6d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:412","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"name2","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:315","type":"CtAssignmentImpl","sourcecode":"name2RtLStart = name2.substring(i, (i + 1))"},"status":-2},{"failures":[7],"tindex":"badbd7c4-4006-11e6-bf11-c91a102f8262","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:426","type":"CtIfImpl","sourcecode":"if ((pArray == null) || ((pArray.int) == 0)) {\n    return pArray;\n} "},"status":-1},{"failures":[8],"tindex":"badbd7c5-4006-11e6-bf11-df8b96a93cd4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"variableMap":{"data":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:367","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[9,10,11,12,13,14],"tindex":"badce936-4006-11e6-bf11-4de125b47aa8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"b","to":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:179","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"badce937-4006-11e6-bf11-f160af49a84a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:204","type":"CtBreakImpl","sourcecode":"break"},"status":-2},{"failures":[],"tindex":"badce938-4006-11e6-bf11-d3ee92743f48","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:210","type":"CtAssignmentImpl","sourcecode":"this.int = chunkSeparatorLength"},"variableMap":{"chunkSeparatorLength":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[],"tindex":"badd1049-4006-11e6-bf11-b56bbbd72c50","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:281","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"badd104a-4006-11e6-bf11-459866f3219a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:209","type":"CtLocalVariableImpl","sourcecode":"final char char = salt.charAt(0)"},"status":-2},{"failures":[15,16,17,18,19,20,21],"tindex":"badd104b-4006-11e6-bf11-a19b1173c62f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:200","type":"CtInvocationImpl","sourcecode":"altCtx.update(saltBytes)"},"variableMap":{"altCtx":"ctx1","saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:259","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"badd104c-4006-11e6-bf11-7922c509b006","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"j","tempResult":"keyBytes","pBytes":"keyBytes","keyLen":"ii","cp":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:237","type":"CtWhileImpl","sourcecode":"while (ii > 0) {\n    if ((ii & 1) == 1) {\n        ctx.update(finalb[j]);\n    } else {\n        ctx.update(keyBytes[j]);\n    }\n    ii >>= 1;\n}"},"status":-2},{"failures":[22,23],"tindex":"badd104d-4006-11e6-bf11-739ccb86c58a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:346","type":"CtAssignmentImpl","sourcecode":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)"},"variableMap":{"c":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:356","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"tindex":"badd104e-4006-11e6-bf11-7f758260b58c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:556","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = boxContent"},"variableMap":{"boxContent":"test"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:364","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = string.substring(index, (index + (test.length())))"},"status":-1},{"failures":[40,41,42,43,44,45,46,47],"tindex":"badd375f-4006-11e6-bf11-575fef27cc66","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:395","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}"},"status":-1},{"failures":[0,3,4,5,6],"tindex":"badd3760-4006-11e6-bf11-359f8cda5097","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"status":-1},{"failures":[9,12,13,48,49,50],"tindex":"badd3761-4006-11e6-bf11-0d542a317cc6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"charset","txt":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"status":-1},{"failures":[],"tindex":"badd3762-4006-11e6-bf11-df38da932c2f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:281","type":"CtLocalVariableImpl","sourcecode":"final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char"},"status":-2},{"failures":[],"tindex":"badd3763-4006-11e6-bf11-a30e02f73b9b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:309","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1])"},"status":-2},{"failures":[],"tindex":"badd3764-4006-11e6-bf11-c52d94ead213","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = basedCodec"},"status":-2},{"failures":[],"tindex":"badd5e75-4006-11e6-bf11-097ff49a30d2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:256","type":"CtAssignmentImpl","sourcecode":"context.byte[] = b"},"status":-2},{"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"badd5e76-4006-11e6-bf11-b7208b4ea7ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"status":-1},{"failures":[],"tindex":"badd5e77-4006-11e6-bf11-7b3924a208be","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"jj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-2},{"failures":[5,6],"tindex":"badd5e78-4006-11e6-bf11-358972513201","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"result.append('J', 'A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[],"tindex":"badd5e79-4006-11e6-bf11-3f7ceebb2197","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:226","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1)"},"status":-2},{"failures":[41,42,43],"tindex":"badd5e7a-4006-11e6-bf11-23fe47f4e54a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:479","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)"},"status":-1},{"failures":[],"tindex":"badd858b-4006-11e6-bf11-45699e28180c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:208","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n        } \n    }\n}"},"status":0},{"failures":[83,84,85,86],"tindex":"badd858c-4006-11e6-bf11-472a0ae367e6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"variableMap":{"rawLine":"ph"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:371","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(0, open)"},"status":-1},{"failures":[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"tindex":"badfcf7d-4006-11e6-bf11-f9d21d69cc13","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-1},{"failures":[102,103,104,105,106,107,108,109,110,111,112,113,114,115,83,84,85,86],"tindex":"badfcf7e-4006-11e6-bf11-215a23bc7ad5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","ruleType":"rt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:221","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"badfcf7f-4006-11e6-bf11-f3ac9f0bc58e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"modulus","lineSeparator":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:447","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 2 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 3 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 4 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-2},{"failures":[],"tindex":"badff690-4006-11e6-bf11-a396bc52ce69","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:281","type":"CtLocalVariableImpl","sourcecode":"final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char"},"status":-2},{"failures":[41,42,43],"tindex":"badff691-4006-11e6-bf11-6b22c1279139","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"status":-1},{"failures":[116,117,118,119],"tindex":"badff692-4006-11e6-bf11-8f14baedf967","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"array","key":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset())"},"status":-1},{"failures":[],"tindex":"badff693-4006-11e6-bf11-217ddf7af050","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"variableMap":{"t":"pos","left":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:307","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)"},"status":-2},{"failures":[],"tindex":"badff694-4006-11e6-bf11-57482c1e7095","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"variableMap":{"b":"buffer","offset":"pos","iValue":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:510","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"badff695-4006-11e6-bf11-9969efaae814","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:190","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.java.nio.charset.Charset"},"variableMap":{"charset":"charset","org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:130","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-2},{"failures":[120],"tindex":"bae01da6-4006-11e6-bf11-8991d3a681b7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"x\", \"k\")"},"status":-1},{"failures":[121,122,123],"tindex":"bae01da7-4006-11e6-bf11-0d80923382c7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:278","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}"},"status":-1},{"failures":[124],"tindex":"bae01da8-4006-11e6-bf11-9be075713120","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:598","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"bae01da9-4006-11e6-bf11-7743243226d1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:454","type":"CtLocalVariableImpl","sourcecode":"final int int = currentLine"},"status":-2},{"failures":[],"tindex":"bae01daa-4006-11e6-bf11-7db1ff3249bd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:79","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.binary.StringUtils.newStringUsAscii(rawData))"},"status":-2},{"failures":[],"tindex":"bae01dab-4006-11e6-bf11-4bdaec19aab7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"variableMap":{"key":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-2},{"failures":[],"tindex":"bae01dac-4006-11e6-bf11-c1c04b2daad3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"name","txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtIfImpl","sourcecode":"if (nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int);\n    final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength);\n    return firstThree + lastThree;\n} else {\n    return name;\n}"},"status":-2},{"failures":[],"tindex":"bae044bd-4006-11e6-bf11-e7294df2b2d6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:337","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[saltLen]"},"variableMap":{"saltLen":"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:793","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int]"},"status":-2},{"failures":[125,126,127,128,129,130,131,132,133],"tindex":"bae044be-4006-11e6-bf11-476aab58dd75","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:337","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"status":-1},{"failures":[],"tindex":"bae044bf-4006-11e6-bf11-615a8a549af9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"status":-2},{"failures":[134,135],"tindex":"bae044c0-4006-11e6-bf11-fd6c824e7e49","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:663","type":"CtReturnImpl","sourcecode":"return binaryData"},"variableMap":{"binaryData":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)"},"status":-1},{"failures":[],"tindex":"bae044c1-4006-11e6-bf11-392e89551189","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"status":-2},{"failures":[],"tindex":"bae044c2-4006-11e6-bf11-cfa2b40f562a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:412","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:52","type":"CtAssignmentImpl","sourcecode":"txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[],"tindex":"bae044c3-4006-11e6-bf11-33df2892fce1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:58","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = stringEncoder"},"status":-2},{"failures":[136,137,138,139,140,141,142,143],"tindex":"bae044c4-4006-11e6-bf11-a3187e02e026","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (element == key) {\n    return true;\n} "},"variableMap":{"key":"key","element":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:300","type":"CtForEachImpl","sourcecode":"for (final char char : arr) {\n    if (element == key) {\n        return true;\n    } \n}"},"status":-1},{"failures":[],"tindex":"bae06bd5-4006-11e6-bf11-87220f6b1519","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:302","type":"CtLocalVariableImpl","sourcecode":"final char char = key.charAt(((key.length()) - 2))"},"variableMap":{"key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:293","type":"CtLocalVariableImpl","sourcecode":"char char = key.charAt(((key.length()) - 1))"},"status":-2},{"failures":[],"tindex":"bae06bd6-4006-11e6-bf11-67327aa5114c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"variableMap":{"unencodedBlockSize":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:287","type":"CtAssignmentImpl","sourcecode":"left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule)"},"status":-2},{"failures":[],"tindex":"bae06bd7-4006-11e6-bf11-d31cf1cfc9d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"n+\", \"N\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:75","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"q\", \"k\")"},"status":0},{"failures":[144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],"tindex":"bae06bd8-4006-11e6-bf11-6dfcccffb434","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[3,5,6],"tindex":"bae06bd9-4006-11e6-bf11-994fb17efb06","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n    result.append(\"X\", \"SK\");\n} else {\n    result.append(\"SK\");\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:306","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n    result.append('S', 'X');\n} else {\n    result.append('S');\n}"},"status":-1},{"failures":[],"tindex":"bae06bda-4006-11e6-bf11-fd5b1b51110e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"inAvail"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:432","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n} "},"status":-2},{"failures":[190,191,192,193,194,195,196],"tindex":"bae092eb-4006-11e6-bf11-b5f72208f88e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"variableMap":{"base64String":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))"},"status":-1},{"failures":[146,148,149,150,153,154,155,156,157,158,159,160,161,162],"tindex":"bae092ec-4006-11e6-bf11-b590454e60ec","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:113","type":"CtInvocationImpl","sourcecode":"local.append(inwd, 1, ((inwd.int) - 1))"},"variableMap":{"inwd":"chars","length":"i","local":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:288","type":"CtInvocationImpl","sourcecode":"key.append(chars[i])"},"status":-1},{"failures":[197],"tindex":"bae1cb6d-4006-11e6-bf11-a33dd9def45a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"bae1cb6e-4006-11e6-bf11-adc89812eb2d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:287","type":"CtReturnImpl","sourcecode":"return l_ascii"},"variableMap":{"l_ascii":"org.apache.commons.codec.language.Nysiis.CHARS_A"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"bae1cb6f-4006-11e6-bf11-cf4426fe5309","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"str","org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"bae267b0-4006-11e6-bf11-876009590fc7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"status":-2},{"failures":[],"tindex":"bae267b1-4006-11e6-bf11-239752d432cd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:120","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)))"},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:335","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"status":-2},{"failures":[],"tindex":"bae267b2-4006-11e6-bf11-29e5e61b0fd9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:361","type":"CtAssignmentImpl","sourcecode":"ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":0},{"failures":[3,5,6],"tindex":"bae267b3-4006-11e6-bf11-f32894e48db5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[198],"tindex":"bae267b4-4006-11e6-bf11-d90af44f55aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","ascii":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[],"tindex":"bae28ec5-4006-11e6-bf11-c74113a41b85","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:412","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"variableMap":{"data":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:75","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt)"},"status":-2},{"failures":[],"tindex":"bae28ec6-4006-11e6-bf11-352ca917cad1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"java.lang.Character.MIN_VALUE","preHWChar":"java.lang.Character.MIN_VALUE","firstCode":"java.lang.Character.MIN_VALUE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:905","type":"CtIfImpl","sourcecode":"if ((index < 0) || (index >= (value.length()))) {\n    return java.lang.Character.java.lang.Character.char;\n} "},"status":-2},{"failures":[],"tindex":"bae28ec7-4006-11e6-bf11-85d0ae9748a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"nextBranches.clear()"},"variableMap":{"nextBranches":"nextBranches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:516","type":"CtIfImpl","sourcecode":"if (branching) {\n    nextBranches.clear();\n} "},"status":0},{"failures":[],"tindex":"bae28ec8-4006-11e6-bf11-3d1bbe33e459","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"startSrc = 1"},"variableMap":{"startSrc":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:284","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int)"},"status":-2},{"failures":[],"tindex":"bae28ec9-4006-11e6-bf11-8b263b691585","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r3\", \"R3\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:423","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-2},{"failures":[],"tindex":"bae28eca-4006-11e6-bf11-03e19ac73b05","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:116","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < lengthToMatch ; i++) {\n    if ((es1.charAt(i)) == (es2.charAt(i))) {\n        diff++;\n    } \n}"},"variableMap":{"es1":"pattern","es2":"location","diff":"currentLine","lengthToMatch":"currentLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:307","type":"CtTryImpl","sourcecode":"try {\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n    final char char = r.java.lang.String.charAt(0);\n    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n        ruleMapping.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}"},"status":-2},{"failures":[],"tindex":"bae28ecb-4006-11e6-bf11-c5bf203c6056","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:606","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"bae2b5dc-4006-11e6-bf11-556b7fefa430","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:384","type":"CtAssignmentImpl","sourcecode":"ch = java.lang.Character.toLowerCase(ch)"},"variableMap":{"ch":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:371","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-2},{"failures":[199,200,201,202,203],"tindex":"bae2b5dd-4006-11e6-bf11-b9828b38c295","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:217","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"bae2b5de-4006-11e6-bf11-a150391710f4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:413","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(object)))"},"variableMap":{"this":"obj","object":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:531","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"bae2b5df-4006-11e6-bf11-9f538ab8d4e8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"variableMap":{"a":"s","t":"s","n":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:378","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = s"},"status":-2},{"failures":[125,126,127,128,129,130,131,132,133,204,205],"tindex":"bae2b5e0-4006-11e6-bf11-fba6b0da7367","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"local.setCharAt(0, 'W')"},"variableMap":{"local":"builder"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:152","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null) {\n    java.lang.String = java.lang.StringBuilder.toString();\n} "},"status":-1},{"failures":[19,20],"tindex":"bae2b5e1-4006-11e6-bf11-e15ae02616da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"status":-1},{"failures":[5,6],"tindex":"bae2b5e2-4006-11e6-bf11-01a4ecd9423a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"len--"},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:605","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[5,6],"tindex":"bae2b5e3-4006-11e6-bf11-339723830c32","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\", \"N\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:660","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"status":-1},{"failures":[3,5,6],"tindex":"bae2dcf4-4006-11e6-bf11-13ca39171fb7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"status":-1},{"failures":[],"tindex":"bae2dcf5-4006-11e6-bf11-6dd264c9188f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:292","type":"CtTryImpl","sourcecode":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"bae2dcf6-4006-11e6-bf11-f59c316c8bc3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"status":-2},{"failures":[],"tindex":"bae2dcf7-4006-11e6-bf11-a768f3d7264c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:177","type":"CtReturnImpl","sourcecode":"return java.lang.String.length()"},"status":-2},{"failures":[],"tindex":"bae2dcf8-4006-11e6-bf11-41b980d1afbe","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:243","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(raw.int) << 3]"},"status":-2},{"failures":[5],"tindex":"bae2dcf9-4006-11e6-bf11-fb41f37256d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:983","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars))"},"status":-1},{"failures":[],"tindex":"bae2dcfa-4006-11e6-bf11-754f6b6a6e45","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"last = mapped"},"variableMap":{"last":"chr","mapped":"chr"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:339","type":"CtAssignmentImpl","sourcecode":"chr = input.removeNext()"},"status":-2},{"failures":[9,11,12,14,50],"tindex":"bae2dcfb-4006-11e6-bf11-f7f661c21600","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:174","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"status":-1},{"failures":[],"tindex":"bae3040c-4006-11e6-bf11-8701c394010d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"variableMap":{"bitlen":"length","len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:759","type":"CtLocalVariableImpl","sourcecode":"int int = bigBytes.int"},"status":-2},{"failures":[3,4,5,6],"tindex":"bae3040d-4006-11e6-bf11-5b0bced99189","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-1},{"failures":[],"tindex":"bae3040e-4006-11e6-bf11-c7420c45e0de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"org.apache.commons.codec.language.Metaphone.VARSON","salt":"org.apache.commons.codec.language.Metaphone.FRONTV","prefix":"org.apache.commons.codec.language.Metaphone.FRONTV"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:148","type":"CtWhileImpl","sourcecode":"while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n    final char char = local.charAt(n);\n    if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n        n++;\n    } else {\n        switch (symb) {\n            case 'A' :\n            case 'E' :\n            case 'I' :\n            case 'O' :\n            case 'U' :\n                if (n == 0) {\n                    code.append(symb);\n                } \n                break;\n            case 'B' :\n                if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                    break;\n                } \n                code.append(symb);\n                break;\n            case 'C' :\n                if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    break;\n                } \n                if (regionMatch(local, n, \"CIA\")) {\n                    code.append('X');\n                    break;\n                } \n                if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    code.append('S');\n                    break;\n                } \n                if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                    code.append('K');\n                    break;\n                } \n                if (isNextChar(local, n, 'H')) {\n                    if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                        code.append('K');\n                    } else {\n                        code.append('X');\n                    }\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'D' :\n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                    code.append('J');\n                    n += 2;\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'G' :\n                if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                    break;\n                } \n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                    break;\n                } \n                if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                    break;\n                } \n                if (isPreviousChar(local, n, 'G')) {\n                    hard = true;\n                } else {\n                    hard = false;\n                }\n                if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                    code.append('J');\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'H' :\n                if (isLastChar(wdsz, n)) {\n                    break;\n                } \n                if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                    break;\n                } \n                if (isVowel(local, (n + 1))) {\n                    code.append('H');\n                } \n                break;\n            case 'F' :\n            case 'J' :\n            case 'L' :\n            case 'M' :\n            case 'N' :\n            case 'R' :\n                code.append(symb);\n                break;\n            case 'K' :\n                if (n > 0) {\n                    if (!(isPreviousChar(local, n, 'C'))) {\n                        code.append(symb);\n                    } \n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'P' :\n                if (isNextChar(local, n, 'H')) {\n                    code.append('F');\n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'Q' :\n                code.append('K');\n                break;\n            case 'S' :\n                if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                    code.append('X');\n                } else {\n                    code.append('S');\n                }\n                break;\n            case 'T' :\n                if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                    code.append('X');\n                    break;\n                } \n                if (regionMatch(local, n, \"TCH\")) {\n                    break;\n                } \n                if (regionMatch(local, n, \"TH\")) {\n                    code.append('0');\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'V' :\n                code.append('F');\n                break;\n            case 'W' :\n            case 'Y' :\n                if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                    code.append(symb);\n                } \n                break;\n            case 'X' :\n                code.append('K');\n                code.append('S');\n                break;\n            case 'Z' :\n                code.append('S');\n                break;\n            default :\n                break;\n        }\n        n++;\n    }\n    if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n        code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n    } \n}"},"status":-2},{"failures":[],"tindex":"bae3793f-4006-11e6-bf11-1b72baa42d4d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:201","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int"},"status":-2},{"failures":[],"tindex":"bae3a050-4006-11e6-bf11-89a6c826e32b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:120","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)))"},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:340","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"status":-2},{"failures":[102,103,104,105,106,107,108,109,110,111,112,113,114,115,83,84,85,86],"tindex":"bae3a051-4006-11e6-bf11-9f0ac50687a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:422","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-1},{"failures":[],"tindex":"bae3a052-4006-11e6-bf11-33fed601d989","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"variableMap":{"patternLength":"ibitWorkArea","i":"org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:447","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result"},"status":-2},{"failures":[],"tindex":"bae3a053-4006-11e6-bf11-250ad561807c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r\", \"2\")"},"status":0},{"failures":[],"tindex":"bae3a054-4006-11e6-bf11-6bf81d325185","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
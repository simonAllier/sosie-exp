{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":49,"org.apache.commons.codec.binary.HexTest.testCustomCharset":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":56,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":21,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":81,"org.apache.commons.codec.language.NysiisTest.testSnat":136,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":156,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":66,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":48,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":53,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":25,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":162,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":82,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":126,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":28,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":166,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":120,"org.apache.commons.codec.binary.Base64Test.testTriplets":100,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":91,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":145,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":18,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":89,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":167,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":7,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":77,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":153,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":80,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":22,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":110,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":5,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":119,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":76,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":32,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":33,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":106,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":107,"org.apache.commons.codec.language.NysiisTest.testCap":127,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":19,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":108,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":14,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":109,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":41,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":46,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":51,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":42,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":63,"org.apache.commons.codec.binary.HexTest.testEncodeClassCastException":93,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":157,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":45,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":161,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":115,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":150,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":90,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":29,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":101,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":147,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":67,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":122,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":144,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":27,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":23,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":73,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":85,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":124,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":24,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":62,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":154,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":160,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":165,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":99,"org.apache.commons.codec.language.NysiisTest.testTranan":139,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":74,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":149,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":155,"org.apache.commons.codec.language.NysiisTest.testFal":130,"org.apache.commons.codec.language.NysiisTest.testSnad":135,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":6,"org.apache.commons.codec.language.MetaphoneTest.testTCH":11,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder":2,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":141,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":44,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":13,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":112,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":87,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":118,"org.apache.commons.codec.language.NysiisTest.testDropBy":138,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":146,"org.apache.commons.codec.binary.Base64Test.testBase64":117,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":152,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":58,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":64,"org.apache.commons.codec.binary.Base64Test.testUUID":103,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":111,"org.apache.commons.codec.binary.Base64Test.testSingletons":114,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":123,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":84,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":151,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":116,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":40,"org.apache.commons.codec.binary.Base64Test.testPairs":102,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":43,"org.apache.commons.codec.language.NysiisTest.testRule2":132,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":158,"org.apache.commons.codec.language.NysiisTest.testRule1":131,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":20,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":71,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":83,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":75,"org.apache.commons.codec.binary.Base64Test.testCodec112":113,"org.apache.commons.codec.language.NysiisTest.testRule6":133,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":159,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":34,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":86,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":8,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":148,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":69,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":137,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":36,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":98,"org.apache.commons.codec.language.NysiisTest.testBran":134,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":140,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":92,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":30,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":59,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":164,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":121,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":50,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":60,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":72,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":95,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":16,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":97,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":163,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":78,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":88,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":15,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":68,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":143,"org.apache.commons.codec.language.NysiisTest.testDad":128,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":47,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":54,"org.apache.commons.codec.language.NysiisTest.testOthers":26,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":105,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":70,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":142,"org.apache.commons.codec.language.SoundexTest.testDifference":31,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":125,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":10,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":94,"org.apache.commons.codec.language.NysiisTest.testDan":129,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":3,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":96,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":52,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":57,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":4},"transformations":[{"failures":[],"tindex":"02ccb43d-0cc1-11e6-8883-43925277bedc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"status":-2},{"failures":[],"tindex":"02cd025e-0cc1-11e6-8883-a96f580ee12e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:96","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[0,1],"tindex":"02cd025f-0cc1-11e6-8883-8dfa07d2a06e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:426","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-1},{"failures":[2,3,4,5,6],"tindex":"02cd0260-0cc1-11e6-8883-ada5dc4b2754","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"variableMap":{"rawLine":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:164","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength)"},"status":-1},{"failures":[7,8],"tindex":"02cd0261-0cc1-11e6-8883-571ac49cb76c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtIfImpl","sourcecode":"if (n < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n} "},"status":-1},{"failures":[1],"tindex":"02cd2972-0cc1-11e6-8883-cb1c3e00548a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:594","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:733","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"status":-1},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"02cd2973-0cc1-11e6-8883-71ae483a94dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:348","type":"CtReturnImpl","sourcecode":"return matches"},"status":-1},{"failures":[],"tindex":"02cd2974-0cc1-11e6-8883-a39cc7276b1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"length","y":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"status":-2},{"failures":[26,27,28,29,30,31,32,33],"tindex":"02cd5085-0cc1-11e6-8883-6fae09ae52d7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:327","type":"CtAssignmentImpl","sourcecode":"name2Char[(name2Size - i)] = ' '"},"variableMap":{"name2Char":"chars","i":"count","name2Size":"count"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[],"tindex":"02cd5086-0cc1-11e6-8883-c10c60284965","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:59","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^cough\", \"cou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"status":0},{"failures":[34],"tindex":"02cd5087-0cc1-11e6-8883-0fee2a6d7471","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"status":-1},{"failures":[],"tindex":"02cd7798-0cc1-11e6-8883-293d034b7311","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:314","type":"CtIfImpl","sourcecode":"if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n    return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"02cd7799-0cc1-11e6-8883-75356fa3bbd1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"status":-2},{"failures":[],"tindex":"02cd779a-0cc1-11e6-8883-d58dbca3d67d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"status":-2},{"failures":[35,36,37,38,39,40,0,41,42,43,44,1,45,46,47,48,49,50,51,52,53,54],"tindex":"02cd9eab-0cc1-11e6-8883-fb90a9efc01a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:299","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw)"},"variableMap":{"raw":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:161","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Hex.encodeHex(data)"},"status":-1},{"failures":[],"tindex":"02cd9eac-0cc1-11e6-8883-7fa9f59b9e3a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:64","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.Context.boolean ? 0 : 1"},"status":-2},{"failures":[55,56,57,58],"tindex":"02cd9ead-0cc1-11e6-8883-f316cc827f9c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:143","type":"CtInvocationImpl","sourcecode":"result.append('M')"},"status":-1},{"failures":[],"tindex":"02cdc5be-0cc1-11e6-8883-8fc57da7c83f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:363","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 2) | (d << 26)"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:411","type":"CtAssignmentImpl","sourcecode":"index = handleGH(value, result, index)"},"status":-2},{"failures":[],"tindex":"02cdc5bf-0cc1-11e6-8883-47684837e55c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:117","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"02cdc5c0-0cc1-11e6-8883-d1dfdfc9d9ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))"},"variableMap":{"sBytes":"buffer","tempResult":"buffer","saltLen":"length","cp":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:519","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":-2},{"failures":[59,60,61,62,63,64,65],"tindex":"02cdecd1-0cc1-11e6-8883-7ff86da01d3e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:239","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb[j])"},"status":-1},{"failures":[],"tindex":"02cdecd2-0cc1-11e6-8883-b5ec7e77079a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[66,67,68],"tindex":"02cdecd3-0cc1-11e6-8883-dfc7cc0e9d88","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)"},"status":-1},{"failures":[],"tindex":"02cdecd4-0cc1-11e6-8883-7dc66b067215","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:175","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    hasUnderscores = true;\n    break;\n} "},"status":-2},{"failures":[],"tindex":"02ce13e5-0cc1-11e6-8883-913f6069e12a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:426","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-2},{"failures":[69,70,71,72,73,74],"tindex":"02ce13e6-0cc1-11e6-8883-8f69292c12e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"base64String","key":"base64String"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"status":-1},{"failures":[75,76],"tindex":"02ce13e7-0cc1-11e6-8883-2b24b9e02c35","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[77],"tindex":"02ce3af8-0cc1-11e6-8883-d1dd8eb32988","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"variableMap":{"byteArray":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"failures":[46,49],"tindex":"02ce3af9-0cc1-11e6-8883-6949b2348a41","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key)"},"variableMap":{"key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:338","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest)"},"status":-1},{"failures":[],"tindex":"02ce3afa-0cc1-11e6-8883-a98bf7770303","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:87","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : charsToTrim) {\n    upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n}"},"status":-2},{"failures":[],"tindex":"02ce620b-0cc1-11e6-8883-e5aff60b21aa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:90","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":0},{"failures":[78,79,80,81,82,83,84],"tindex":"02ce620c-0cc1-11e6-8883-b1f929fec17e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:469","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[85,33],"tindex":"02ce620d-0cc1-11e6-8883-711887729bd2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:256","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"compareCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:84","type":"CtAssignmentImpl","sourcecode":"compareCode = s1.compareTo(s2)"},"status":-1},{"failures":[86,87,88,89,90,91],"tindex":"02ce620e-0cc1-11e6-8883-8b7d7c0d4531","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:366","type":"CtInvocationImpl","sourcecode":"phonemes.put(mergedPhoneme, mergedPhoneme)"},"status":-1},{"failures":[92],"tindex":"02ce891f-0cc1-11e6-8883-eb470b204548","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[],"tindex":"02ce8920-0cc1-11e6-8883-335853703d26","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"status":-2},{"failures":[],"tindex":"02ce8921-0cc1-11e6-8883-81f5b466731f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:477","type":"CtIfImpl","sourcecode":"if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n    index += 2;\n} else {\n    if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        result.append('F');\n    } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n        result.append('K');\n    } \n    index += 2;\n}"},"status":-2},{"failures":[93],"tindex":"02ceb032-0cc1-11e6-8883-a59ec9d2203a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:301","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-1},{"failures":[],"tindex":"02ceb033-0cc1-11e6-8883-d7c346e4c5cf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"variableMap":{"u":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:478","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[],"tindex":"02ceb034-0cc1-11e6-8883-1df7bbbba4ce","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:70","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"02ced745-0cc1-11e6-8883-6fa1506def01","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN","to":"sumLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtIfImpl","sourcecode":"if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[],"tindex":"02ced746-0cc1-11e6-8883-eb121362b4a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:193","type":"CtIfImpl","sourcecode":"if (current == last) {\n    continue;\n} else if (current != 0) {\n    sBuf.append(current);\n} "},"status":-2},{"failures":[],"tindex":"02ced747-0cc1-11e6-8883-1f28e2ddf48a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"variableMap":{"n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":0},{"failures":[94],"tindex":"02ced748-0cc1-11e6-8883-7b5966ca3315","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:113","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"02ced749-0cc1-11e6-8883-711fa450e771","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:214","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"02ced74a-0cc1-11e6-8883-09439a477b34","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset())"},"variableMap":{"array":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)"},"status":-2},{"failures":[],"tindex":"02cefe5b-0cc1-11e6-8883-19ad243e6b39","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"bitlen = ((bitlen + 7) >> 3) << 3"},"variableMap":{"bitlen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:763","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,70,116,117,118,119,73,120,121,122,123],"tindex":"02cefe5c-0cc1-11e6-8883-f5c222c18ca4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"variableMap":{"bigBytes":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:621","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false)"},"status":-1},{"failures":[],"tindex":"02cefe5d-0cc1-11e6-8883-217f0cea171b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"status":-2},{"failures":[],"tindex":"02cefe5e-0cc1-11e6-8883-4d438088c68b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:456","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[124],"tindex":"02cefe5f-0cc1-11e6-8883-ddcd6fc1af1a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"2\")"},"status":-1},{"failures":[],"tindex":"02cf2570-0cc1-11e6-8883-b73413c99cd1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"status":0},{"failures":[],"tindex":"02cf2571-0cc1-11e6-8883-fb68c9104154","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))"},"variableMap":{"sBytes":"b","tempResult":"b","saltLen":"org.apache.commons.codec.binary.BaseNCodec.EOF","cp":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (todo > 0) {\n    int int = ((int)(java.lang.Math.min(b.int, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    todo -= len;\n}"},"status":-2},{"failures":[],"tindex":"02cf2572-0cc1-11e6-8883-ab204d0cd80d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:487","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())"},"variableMap":{"str":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:155","type":"CtReturnImpl","sourcecode":"return new java.lang.String(data , charset)"},"status":-2},{"failures":[125,126,127,128,129,130,131,132,133,134,135,136,137,138,26,139,140],"tindex":"02cf2573-0cc1-11e6-8883-3b9b3254da80","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:280","type":"CtForImpl","sourcecode":"for (int int = 1 ; i < len ; i++) {\n    final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n    final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n    final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n    java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n    if ((chars[i]) != (chars[(i - 1)])) {\n        key.append(chars[i]);\n    } \n}"},"status":-1},{"failures":[],"tindex":"02cf2574-0cc1-11e6-8883-f11e654b84a2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:357","type":"CtAssignmentImpl","sourcecode":"code = '2'"},"variableMap":{"code":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"status":0},{"failures":[57,58],"tindex":"02cf2575-0cc1-11e6-8883-4f6820e3014f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:370","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[86],"tindex":"02cf4c86-0cc1-11e6-8883-05b65024f495","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:277","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"02cf4c87-0cc1-11e6-8883-258c59b59be6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:76","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('+')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"status":0},{"failures":[98,101,112,115],"tindex":"02cf4c88-0cc1-11e6-8883-33e272125519","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"variableMap":{"l_raw":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)"},"status":-1},{"failures":[],"tindex":"02cf4c89-0cc1-11e6-8883-35017bab5c0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"index","name2Size":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-2},{"failures":[],"tindex":"02cf4c8a-0cc1-11e6-8883-df4f200a6b12","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:213","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    final java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> = new java.util.EnumMap<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.java.lang.Class);\n    for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n        final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n        final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n        for (final java.lang.String java.lang.String : ls.getLanguages()) {\n            try {\n                rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n            }\n        }\n        if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n            rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n        } \n        rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n    }\n    org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.put(s, java.util.Collections.unmodifiableMap(rts));\n}"},"status":-2},{"failures":[],"tindex":"02cf739b-0cc1-11e6-8883-9923b8904e9a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:287","type":"CtAssignmentImpl","sourcecode":"left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule)"},"variableMap":{"schedule":"results","left":"c","i":"c","eSwap0":"c","right":"c","eSwap1":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:352","type":"CtAssignmentImpl","sourcecode":"c = results[0]"},"status":-2},{"failures":[],"tindex":"02cf739c-0cc1-11e6-8883-917e14b5e7e3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:278","type":"CtLocalVariableImpl","sourcecode":"final int int = chars.int"},"status":-2},{"failures":[],"tindex":"02cf739d-0cc1-11e6-8883-c53600a3e1fd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-2},{"failures":[],"tindex":"02cf739e-0cc1-11e6-8883-d7f06e24a6ae","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"variableMap":{"b":"buffer","offset":"ibitWorkArea","iValue":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:362","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"02cf739f-0cc1-11e6-8883-077cc9dcddda","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:274","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data)"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:338","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest).doFinal()"},"status":-2},{"failures":[],"tindex":"02cf73a0-0cc1-11e6-8883-b7c1dae12536","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:803","type":"CtIfImpl","sourcecode":"if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"variableMap":{"index":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","value":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:244","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    return false;\n} "},"status":-2},{"failures":[141,142,143,144,145,66,67,68],"tindex":"02cf73a1-0cc1-11e6-8883-4dcd98dc898c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:295","type":"CtInvocationImpl","sourcecode":"ctx1.reset()"},"variableMap":{"ctx1":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:396","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[9,10,146,147,148,16,149,17,21,23],"tindex":"02cf9ab2-0cc1-11e6-8883-af31c94600be","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:306","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"status":-1},{"failures":[],"tindex":"02cf9ab3-0cc1-11e6-8883-b5bea8a59e6b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"status":-2},{"failures":[],"tindex":"02cf9ab4-0cc1-11e6-8883-6d66aeca883d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:348","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = rulesApplication.isFound()"},"status":-2},{"failures":[],"tindex":"02cf9ab5-0cc1-11e6-8883-2559ada8e5fb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"variableMap":{"n":"currentLinePos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:517","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"status":-2},{"failures":[],"tindex":"02cf9ab6-0cc1-11e6-8883-851ace074113","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"status":-2},{"failures":[150],"tindex":"02cf9ab7-0cc1-11e6-8883-b15abc5bb5c9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:522","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:307","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[151,152,153,154,155,156,157,158,159,160,161,162,163,164],"tindex":"02cfc1c8-0cc1-11e6-8883-911bacb3d487","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:183","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[165,150,56,57,58],"tindex":"02cfc1c9-0cc1-11e6-8883-c116c3a84b37","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"status":-1},{"failures":[],"tindex":"02cfc1ca-0cc1-11e6-8883-d7078a7623a3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:314","type":"CtIfImpl","sourcecode":"if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtIfImpl","sourcecode":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} "},"status":-2},{"failures":[],"tindex":"02cfc1cb-0cc1-11e6-8883-2305f07077e4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:150","type":"CtReturnImpl","sourcecode":"return (\"Languages(\" + (java.util.Set<java.lang.String>.toString())) + \")\""},"status":0},{"failures":[],"tindex":"02cfc1cc-0cc1-11e6-8883-b1124a8c1fe6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:721","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base64.decodeBase64(pArray)"},"variableMap":{"pArray":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:154","type":"CtAssignmentImpl","sourcecode":"data = doDecoding(data)"},"status":0},{"failures":[166,150,56,57,58],"tindex":"02cfc1cd-0cc1-11e6-8883-5359ae0abb36","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:303","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[94,150,56,57,58],"tindex":"02cfc1ce-0cc1-11e6-8883-370fbe3310d2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:602","type":"CtIfImpl","sourcecode":"if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n    result.append('X', 'S');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        result.append('S');\n    } else {\n        result.append('X');\n    }\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n    if (slavoGermanic) {\n        result.append('S');\n    } else {\n        result.append('S', 'X');\n    }\n    index += 3;\n} else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n    result.append('S', 'X');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n    index = handleSC(value, result, index);\n} else {\n    if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n        result.appendAlternate('S');\n    } else {\n        result.append('S');\n    }\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n}"},"status":-1},{"failures":[141,142,143,144,145,66,67,68],"tindex":"02cfc1cf-0cc1-11e6-8883-1bdbd3b947d8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:181","type":"CtInvocationImpl","sourcecode":"ctx.update(saltBytes)"},"status":-1},{"failures":[],"tindex":"02cfe7e0-0cc1-11e6-8883-91ecd7c9d749","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:358","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":0},{"failures":[89,90,91,167],"tindex":"02cfe7e1-0cc1-11e6-8883-670dfdffef87","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\")"},"variableMap":{"result":"phonemeText"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:121","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(phonemeRight.java.lang.StringBuilder)"},"status":-1},{"failures":[57,58],"tindex":"02cfe7e2-0cc1-11e6-8883-17d076c893a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:611","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":86,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
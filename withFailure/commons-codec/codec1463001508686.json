{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":45,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":21,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":38,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":5,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":44,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":34,"org.apache.commons.codec.binary.Base64Test.testBase64":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":18,"org.apache.commons.codec.binary.Base64Test.testTriplets":25,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":14,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":1,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":4,"org.apache.commons.codec.binary.Base64Test.testUUID":27,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":37,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":11,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":41,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":36,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":43,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":46,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":30,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":31,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":35,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":23,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":32,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":33,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":22,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":20,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":39,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":15,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":17,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":6,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":48,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":10,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":7,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":47,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":9,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":50,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":26,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":29,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":40,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":2,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":24,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":28,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":8,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":13},"transformations":[{"failures":[0],"tindex":"e7d4f657-17bd-11e6-a48f-079151d9a2c0","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:802","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[1,2],"tindex":"e7d51d68-17bd-11e6-a48f-ad92f119efe6","series":0,"name":"replace","transplant":{"toString":"sb.append(\"|\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"status":-1},{"failures":[3,0,4],"tindex":"e7d51d69-17bd-11e6-a48f-c178b4178b54","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:787","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"e7d5447a-17bd-11e6-a48f-c99a38273f58","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"))","position":"org.apache.commons.codec.net.URLCodec:342","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"))"},"status":-2},{"failures":[1,5,6,7,8,2,9,10],"tindex":"e7d5447b-17bd-11e6-a48f-1d5ce3bdaf7f","series":0,"name":"add","transplant":{"toString":"finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:277","type":"CtAssignmentImpl","sourcecode":"finalb = ctx1.digest()"},"variableMap":{"ctx1":"altCtx","finalb":"tempResult"},"type":"adrStmt","transplantationPoint":{"toString":"tempResult = altCtx.digest()","position":"org.apache.commons.codec.digest.Sha2Crypt:324","type":"CtAssignmentImpl","sourcecode":"tempResult = altCtx.digest()"},"status":-1},{"failures":[],"tindex":"e7d5447c-17bd-11e6-a48f-83be1f4c4e8a","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (rule.matches(text)) {\n    if (rule.acceptOnMatch) {\n        langs.retainAll(rule.languages);\n    } else {\n        langs.removeAll(rule.languages);\n    }\n} ","position":"org.apache.commons.codec.language.bm.Lang:219","type":"CtIfImpl","sourcecode":"if (rule.matches(text)) {\n    if (rule.boolean) {\n        langs.retainAll(rule.java.util.Set<java.lang.String>);\n    } else {\n        langs.removeAll(rule.java.util.Set<java.lang.String>);\n    }\n} "},"status":-2},{"failures":[11],"tindex":"e7d5447d-17bd-11e6-a48f-3ba4f54995f7","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:245","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"e7d56b8e-17bd-11e6-a48f-d52ec9bf2c8a","series":0,"name":"replace","transplant":{"toString":"hard = false","position":"org.apache.commons.codec.language.Metaphone:233","type":"CtAssignmentImpl","sourcecode":"hard = false"},"variableMap":{"hard":"eof"},"type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base32:349","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[1,5,6,7,8,2,9,10],"tindex":"e7d56b8f-17bd-11e6-a48f-750411ee8efa","series":0,"name":"replace","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:368","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}"},"status":-1},{"failures":[],"tindex":"e7d56b90-17bd-11e6-a48f-730561c942ec","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:600","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"variableMap":{"str":"charset","charset":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return encodeText(str, charset)","position":"org.apache.commons.codec.net.QCodec:230","type":"CtReturnImpl","sourcecode":"return encodeText(str, charset)"},"status":-2},{"failures":[12],"tindex":"e7d592a1-17bd-11e6-a48f-7b5cc41b7f62","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-1},{"failures":[13,14],"tindex":"e7d592a2-17bd-11e6-a48f-75749e701e53","series":0,"name":"replace","transplant":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"offset","l_ascii":"b","bits":"offset"},"type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)(iValue & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"status":-1},{"failures":[],"tindex":"e7d592a3-17bd-11e6-a48f-093d84bd2948","series":0,"name":"replace","transplant":{"toString":"langs.removeAll(rule.languages)","position":"org.apache.commons.codec.language.bm.Lang:223","type":"CtInvocationImpl","sourcecode":"langs.removeAll(rule.java.util.Set<java.lang.String>)"},"variableMap":{"languages":"langs","rule":"rule","langs":"langs"},"type":"adrStmt","transplantationPoint":{"toString":"langs.retainAll(rule.languages)","position":"org.apache.commons.codec.language.bm.Lang:221","type":"CtInvocationImpl","sourcecode":"langs.retainAll(rule.java.util.Set<java.lang.String>)"},"status":-3},{"failures":[],"tindex":"e7d592a4-17bd-11e6-a48f-d7c4f3e4f750","series":0,"name":"add","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n    result.append('X');\n    index += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.append('T');\n    } else {\n        result.append('0', 'T');\n    }\n    index += 2;\n} else {\n    result.append('T');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:677","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n    result.append('X');\n    index += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.append('T');\n    } else {\n        result.append('0', 'T');\n    }\n    index += 2;\n} else {\n    result.append('T');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[],"tindex":"e7d5b9b5-17bd-11e6-a48f-73db51362202","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"name1LtREnd","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"name1LtREnd"},"type":"adrStmt","transplantationPoint":{"toString":"if (name1LtREnd.equals(name2RtLEnd)) {\n    name1Char[(name1Size - i)] = ' ';\n    name2Char[(name2Size - i)] = ' ';\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtIfImpl","sourcecode":"if (name1LtREnd.equals(name2RtLEnd)) {\n    name1Char[(name1Size - i)] = ' ';\n    name2Char[(name2Size - i)] = ' ';\n} "},"status":-3},{"failures":[],"tindex":"e7d5b9b6-17bd-11e6-a48f-97edf212b691","series":0,"name":"add","transplant":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"ph"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"status":0},{"failures":[],"tindex":"e7d5e0c7-17bd-11e6-a48f-ed288d058446","series":0,"name":"replace","transplant":{"toString":"code.append('J')","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", pat='\").append(pat).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:465","type":"CtInvocationImpl","sourcecode":"sb.append(\", pat='\").append(pat).append('\\'')"},"status":0},{"failures":[],"tindex":"e7d5e0c8-17bd-11e6-a48f-8de5e465f359","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")","position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang))","position":"org.apache.commons.codec.language.bm.Rule:358","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang))"},"status":-2},{"failures":[],"tindex":"e7d5e0c9-17bd-11e6-a48f-e9d029117b20","series":0,"name":"add","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int currentLine = 0","position":"org.apache.commons.codec.language.bm.Rule:404","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[5,6,7],"tindex":"e7d5e0ca-17bd-11e6-a48f-cbce78d64230","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"status":-1},{"failures":[],"tindex":"e7d607db-17bd-11e6-a48f-8984b9871b94","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"altCtx.reset()","position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"status":-2},{"failures":[],"tindex":"e7d607dc-17bd-11e6-a48f-85f7a90fc709","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"status":-2},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"e7d607dd-17bd-11e6-a48f-093ce3d0d02b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))]","position":"org.apache.commons.codec.binary.Base64:389","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-1},{"failures":[50],"tindex":"e7d607de-17bd-11e6-a48f-59b9f8f54d5c","series":0,"name":"replace","transplant":{"toString":"sb.append(\"|\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"e7d62eef-17bd-11e6-a48f-df69f9552ea0","series":0,"name":"replace","transplant":{"toString":"final boolean startsWith = regex.startsWith(\"^\")","position":"org.apache.commons.codec.language.bm.Rule:500","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = regex.startsWith(\"^\")"},"variableMap":{"regex":"content"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean endsWithBox = content.endsWith(\"]\")","position":"org.apache.commons.codec.language.bm.Rule:546","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.endsWith(\"]\")"},"status":0},{"failures":[],"tindex":"e7d62ef0-17bd-11e6-a48f-79de0329c4db","series":0,"name":"add","transplant":{"toString":"int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:287","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"variableMap":{"bytes":"saltBytes","i":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int saltLen = saltBytes.length","position":"org.apache.commons.codec.digest.Sha2Crypt:156","type":"CtLocalVariableImpl","sourcecode":"final int int = saltBytes.int"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":26,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
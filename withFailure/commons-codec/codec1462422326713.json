{"failureDictionary":{"org.apache.commons.codec.binary.HexTest.testCustomCharset":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing":57,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":78,"org.apache.commons.codec.language.NysiisTest.testSnat":11,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":38,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":15,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":70,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":69,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":43,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":62,"org.apache.commons.codec.language.NysiisTest.testDropBy":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing":55,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":74,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":23,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":34,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":44,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":13,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":28,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":7,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":5,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":32,"org.apache.commons.codec.binary.Base64Test.testUUID":61,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":26,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":59,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":19,"org.apache.commons.codec.language.NysiisTest.testRule1":9,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":18,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull":58,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":20,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":53,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":27,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":75,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":48,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":77,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":49,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":64,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":33,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":50,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":25,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":46,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":16,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":17,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":65,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":22,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":31,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":6,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":68,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":24,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":72,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":36,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":3,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":35,"org.apache.commons.codec.language.SoundexTest.testB650":40,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":67,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":21,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":30,"org.apache.commons.codec.language.SoundexTest.testNewInstance":47,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":73,"org.apache.commons.codec.language.NysiisTest.testSnad":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":76,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":0},"transformations":[{"failures":[],"tindex":"647b65e7-1279-11e6-9c92-cb535754ae84","series":0,"name":"add","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.URLCodec:245","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"647b8cf8-1279-11e6-9c92-797821ba505c","series":0,"name":"add","transplant":{"toString":"this.unencodedBlockSize = unencodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"variableMap":{"unencodedBlockSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:343","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-2},{"failures":[0,1,2,3,4],"tindex":"647bb409-1279-11e6-9c92-79bb56db421f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:466","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer)"},"status":-1},{"failures":[],"tindex":"647bb40a-1279-11e6-9c92-f9af44459839","series":0,"name":"replace","transplant":{"toString":"if (negate) {\n    boxContent = boxContent.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtIfImpl","sourcecode":"if (negate) {\n    boxContent = boxContent.substring(1);\n} "},"variableMap":{"negate":"acceptOnMatch","boxContent":"text"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Lang.LangRule rule : org.apache.commons.codec.language.bm.Lang.this.rules) {\n    if (rule.matches(text)) {\n        if (rule.acceptOnMatch) {\n            langs.retainAll(rule.languages);\n        } else {\n            langs.removeAll(rule.languages);\n        }\n    } \n}","position":"org.apache.commons.codec.language.bm.Lang:218","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n    if (rule.matches(text)) {\n        if (rule.boolean) {\n            langs.retainAll(rule.java.util.Set<java.lang.String>);\n        } else {\n            langs.removeAll(rule.java.util.Set<java.lang.String>);\n        }\n    } \n}"},"status":-2},{"failures":[5,6,7,8],"tindex":"647bdb1b-1279-11e6-9c92-71bb866a17ae","series":0,"name":"replace","transplant":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(ph.getPhonemeText())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:151","type":"CtInvocationImpl","sourcecode":"sb.append(ph.getPhonemeText())"},"status":-1},{"failures":[9,10,11,12],"tindex":"647bdb1c-1279-11e6-9c92-3d8e4f36f2a6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_SCH.matcher(str).replaceFirst(\"SSS\")","position":"org.apache.commons.codec.language.Nysiis:265","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"SSS\")"},"status":-1},{"failures":[],"tindex":"647bdb1d-1279-11e6-9c92-8bbbf32fad47","series":0,"name":"replace","transplant":{"toString":"final java.util.Scanner scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.ENCODING)","position":"org.apache.commons.codec.language.bm.Lang:137","type":"CtLocalVariableImpl","sourcecode":"final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"variableMap":{"lRulesIS":"langIS","org.apache.commons.codec.language.bm.ResourceConstants.ENCODING":"org.apache.commons.codec.language.bm.ResourceConstants.ENCODING"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Scanner lsScanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.ENCODING)","position":"org.apache.commons.codec.language.bm.Languages:178","type":"CtLocalVariableImpl","sourcecode":"final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"status":-3},{"failures":[],"tindex":"647c022e-1279-11e6-9c92-f5d2c83df924","series":0,"name":"replace","transplant":{"toString":"int n = outLen","position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"variableMap":{"outLen":"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT"},"type":"adrStmt","transplantationPoint":{"toString":"int rounds = org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT","position":"org.apache.commons.codec.digest.Sha2Crypt:139","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int"},"status":0},{"failures":[13],"tindex":"647c022f-1279-11e6-9c92-63ea91e21201","series":0,"name":"replace","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:244","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"647c0230-1279-11e6-9c92-816329eb83b5","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('-')","position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"status":-2},{"failures":[],"tindex":"647c2941-1279-11e6-9c92-49aa63f5933d","series":0,"name":"add","transplant":{"toString":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"hwChar","preHWChar":"mappedChar","firstCode":"hwChar"},"type":"adrStmt","transplantationPoint":{"toString":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char preHWChar = str.charAt((index - 2));\n    final char firstCode = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} ","position":"org.apache.commons.codec.language.Soundex:189","type":"CtIfImpl","sourcecode":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char char = str.charAt((index - 2));\n    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} "},"status":-2},{"failures":[],"tindex":"647c2942-1279-11e6-9c92-bd3401967645","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (inAvail < 0) {\n    context.eof = true;\n} ","position":"org.apache.commons.codec.binary.Base32:342","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"647c5053-1279-11e6-9c92-411b9cfef2ac","series":0,"name":"replace","transplant":{"toString":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.encodeSize = (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base32:290","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.int = (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n    this.byte[] = null;\n}"},"variableMap":{"encodeSize":"c","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"c","length":"c","lineSeparator":"buf","lineLength":"c"},"type":"adrStmt","transplantationPoint":{"toString":"if (c > 0) {\n    out.write(buf, 0, c);\n} ","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:115","type":"CtIfImpl","sourcecode":"if (c > 0) {\n    java.io.OutputStream.write(buf, 0, c);\n} "},"status":-3},{"failures":[],"tindex":"647c7764-1279-11e6-9c92-31a8b54a10f1","series":0,"name":"replace","transplant":{"toString":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())","position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"variableMap":{"code":"alternate"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.maxLength)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.append(value);\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:963","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} "},"status":-2},{"failures":[],"tindex":"647c9e75-1279-11e6-9c92-7d2c23f6037c","series":0,"name":"add","transplant":{"toString":"final java.util.Scanner lsScanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.ENCODING)","position":"org.apache.commons.codec.language.bm.Languages:178","type":"CtLocalVariableImpl","sourcecode":"final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"variableMap":{"langIS":"lRulesIS","org.apache.commons.codec.language.bm.ResourceConstants.ENCODING":"org.apache.commons.codec.language.bm.ResourceConstants.ENCODING"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Scanner scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.ENCODING)","position":"org.apache.commons.codec.language.bm.Lang:137","type":"CtLocalVariableImpl","sourcecode":"final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"tindex":"647c9e76-1279-11e6-9c92-a506a6a53734","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (strict) {\n    int pos = 1;\n    for (int i = 0 ; i < ((bytes.length) - 3) ; i++) {\n        int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n        if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)) {\n            pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n            pos = 1;\n        }\n    }\n    int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.length) - 3), bytes);\n    boolean encode = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 5)));\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n    if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 2)) {\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n    } \n    for (int i = (bytes.length) - 2 ; i < (bytes.length) ; i++) {\n        b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n        encode = (!(printable.get(b))) || ((i > ((bytes.length) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n    }\n} else {\n    for (final byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        } \n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n        }\n    }\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:282","type":"CtIfImpl","sourcecode":"if (strict) {\n    int int = 1;\n    for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n        int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n        if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n            pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            pos = 1;\n        }\n    }\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n    boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n    if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    } \n    for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n        b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n        encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n    }\n} else {\n    for (final byte byte : bytes) {\n        int int = c;\n        if (b < 0) {\n            b = 256 + b;\n        } \n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"647cec97-1279-11e6-9c92-15a049227673","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH)","position":"org.apache.commons.codec.digest.DigestUtils:798","type":"CtAssignmentImpl","sourcecode":"read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int)"},"status":-2},{"failures":[],"tindex":"647cec98-1279-11e6-9c92-736d5882040d","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:461","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)"},"variableMap":{"altResult":"finalb","buffer":"passwd"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:284","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd)"},"status":-2},{"failures":[],"tindex":"647d13a9-1279-11e6-9c92-8d8bce534bbe","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)"},"variableMap":{"data":"resizedBytes"},"type":"adrStmt","transplantationPoint":{"toString":"return resizedBytes","position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"status":-2},{"failures":[],"tindex":"647d13aa-1279-11e6-9c92-af8b9582ec76","series":0,"name":"replace","transplant":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inMultilineComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = false;\n} "},"variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END","line":"line","inMultilineComment":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)) {\n    inMultilineComment = false;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    inMultilineComment = false;\n} "},"status":-2},{"failures":[],"tindex":"647d3abb-1279-11e6-9c92-f1d110f5878b","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","leftCharacter":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","rightCharacter":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","location":"org.apache.commons.codec.language.bm.ResourceConstants.CMT"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    boolean inExtendedComment = false;\n    while (scanner.hasNextLine()) {\n        final java.lang.String rawLine = scanner.nextLine();\n        java.lang.String line = rawLine;\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n                inExtendedComment = true;\n            } else {\n                final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n                if (cmtI >= 0) {\n                    line = line.substring(0, cmtI);\n                } \n                line = line.trim();\n                if ((line.length()) == 0) {\n                    continue;\n                } \n                final java.lang.String[] parts = line.split(\"\\\\s+\");\n                if ((parts.length) != 3) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                } \n                final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n                final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n                final boolean accept = parts[2].equals(\"true\");\n                rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n            }\n        }\n    }\n} finally {\n    scanner.close();\n}","position":"org.apache.commons.codec.language.bm.Lang:138","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (scanner.hasNextLine()) {\n        final java.lang.String java.lang.String = scanner.nextLine();\n        java.lang.String java.lang.String = rawLine;\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = true;\n            } else {\n                final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                if (cmtI >= 0) {\n                    line = line.substring(0, cmtI);\n                } \n                line = line.trim();\n                if ((line.length()) == 0) {\n                    continue;\n                } \n                final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                if ((parts.int) != 3) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                } \n                final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                final boolean boolean = parts[2].equals(\"true\");\n                rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n            }\n        }\n    }\n} finally {\n    scanner.close();\n}"},"status":-2},{"failures":[],"tindex":"647d3abc-1279-11e6-9c92-0fb543b27319","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:318","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"status":-2},{"failures":[],"tindex":"647d61cd-1279-11e6-9c92-cfccbf524403","series":0,"name":"replace","transplant":{"toString":"return result","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:559","type":"CtReturnImpl","sourcecode":"return result"},"variableMap":{"result":"replacementBeforeVowel"},"type":"adrStmt","transplantationPoint":{"toString":"return replacementBeforeVowel","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:188","type":"CtReturnImpl","sourcecode":"return java.lang.String[]"},"status":-3},{"failures":[31],"tindex":"647d61ce-1279-11e6-9c92-5f50a86858a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:307","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[],"tindex":"647d61cf-1279-11e6-9c92-5165757b952d","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str)","position":"org.apache.commons.codec.language.Caverphone:89","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str)"},"variableMap":{"str":"charsetName"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(bytes , charsetName)","position":"org.apache.commons.codec.binary.StringUtils:284","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , charsetName)"},"status":-2},{"failures":[],"tindex":"647d61d0-1279-11e6-9c92-cd79af3d9ac3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:487","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())"},"variableMap":{"str":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String l : org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType)) {\n    if (input.startsWith((l + \" \"))) {\n        final java.lang.String remainder = input.substring(((l.length()) + 1));\n        final java.lang.String combined = l + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:415","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n    if (input.startsWith((l + \" \"))) {\n        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n        final java.lang.String java.lang.String = l + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n}"},"status":-2},{"failures":[],"tindex":"647d88e1-1279-11e6-9c92-c75e2e743223","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"try {\n    final char[] charArray = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.binary.Hex:250","type":"CtTryImpl","sourcecode":"try {\n    final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"647d88e2-1279-11e6-9c92-e576f64f405e","series":0,"name":"replace","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"length","y":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if ((start >= 0) && ((start + length) <= (value.length()))) {\n    final java.lang.String target = value.substring(start, (start + length));\n    for (final java.lang.String element : criteria) {\n        if (target.equals(element)) {\n            result = true;\n            break;\n        } \n    }\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:918","type":"CtIfImpl","sourcecode":"if ((start >= 0) && ((start + length) <= (value.length()))) {\n    final java.lang.String java.lang.String = value.substring(start, (start + length));\n    for (final java.lang.String java.lang.String : criteria) {\n        if (target.equals(element)) {\n            result = true;\n            break;\n        } \n    }\n} "},"status":-2},{"failures":[32],"tindex":"647d88e3-1279-11e6-9c92-6704af609a11","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.append(value.substring(0, addChars))","position":"org.apache.commons.codec.language.DoubleMetaphone:992","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars))"},"status":-1},{"failures":[],"tindex":"647d88e4-1279-11e6-9c92-e72fcef973a5","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:503","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":-2},{"failures":[],"tindex":"647daff5-1279-11e6-9c92-5969cd474108","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.encodeSize = (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length)","position":"org.apache.commons.codec.binary.Base32:299","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int) + (lineSeparator.int)"},"status":-2},{"failures":[],"tindex":"647daff6-1279-11e6-9c92-bd3588e894e9","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"input"},"type":"adrStmt","transplantationPoint":{"toString":"input = words.iterator().next()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:455","type":"CtAssignmentImpl","sourcecode":"input = words.iterator().next()"},"status":-2},{"failures":[],"tindex":"647daff7-1279-11e6-9c92-d7123c3600cf","series":0,"name":"add","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"avail","y":"avail"},"type":"adrStmt","transplantationPoint":{"toString":"if (avail > 0) {\n    final byte[] buf = new byte[avail];\n    final int c = baseNCodec.readResults(buf, 0, avail, context);\n    if (c > 0) {\n        out.write(buf, 0, c);\n    } \n} ","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:112","type":"CtIfImpl","sourcecode":"if (avail > 0) {\n    final byte[] byte[] = new byte[avail];\n    final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n    if (c > 0) {\n        java.io.OutputStream.write(buf, 0, c);\n    } \n} "},"status":-2},{"failures":[33],"tindex":"647dd708-1279-11e6-9c92-794eed3ec2d2","series":0,"name":"replace","transplant":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:295","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"647dd709-1279-11e6-9c92-8fa2ccab761b","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.NameType s : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Languages.LANGUAGES.put(s, org.apache.commons.codec.language.bm.Languages.getInstance(org.apache.commons.codec.language.bm.Languages.langResourceName(s)));\n}","position":"org.apache.commons.codec.language.bm.Languages:160","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Languages>.put(s, org.apache.commons.codec.language.bm.Languages.getInstance(org.apache.commons.codec.language.bm.Languages.langResourceName(s)));\n}"},"status":-2},{"failures":[],"tindex":"647dd70a-1279-11e6-9c92-c5d417a2a5fd","series":0,"name":"add","transplant":{"toString":"final java.lang.String[] charsToTrim = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] langs = parts[1].split(\"\\\\+\")","position":"org.apache.commons.codec.language.bm.Lang:174","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\")"},"status":-2},{"failures":[7],"tindex":"647dd70b-1279-11e6-9c92-3f7a67b1f7d3","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Rule:609","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[34],"tindex":"647dd70c-1279-11e6-9c92-13736de038d2","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")","position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.URLCodec:250","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-1},{"failures":[],"tindex":"647dfe1d-1279-11e6-9c92-490ecea752be","series":0,"name":"add","transplant":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String str : charsToTrim) {\n    upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY);\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:87","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : charsToTrim) {\n    upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n}"},"status":0},{"failures":[],"tindex":"647dfe1e-1279-11e6-9c92-038af707be69","series":0,"name":"replace","transplant":{"toString":"cnt >>= 1","position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"variableMap":{"cnt":"minRating"},"type":"adrStmt","transplantationPoint":{"toString":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:194","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":0},{"failures":[],"tindex":"647dfe1f-1279-11e6-9c92-154ffc6d6832","series":0,"name":"add","transplant":{"toString":"int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.length) - 3), bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:305","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes)"},"variableMap":{"bytes":"keyBytes","length":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int keyLen = keyBytes.length","position":"org.apache.commons.codec.digest.Md5Crypt:180","type":"CtLocalVariableImpl","sourcecode":"final int int = keyBytes.int"},"status":-2},{"failures":[],"tindex":"647dfe20-1279-11e6-9c92-375c91d38dc9","series":0,"name":"add","transplant":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.binary.BaseNCodec:378","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"status":-2},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"647e2431-1279-11e6-9c92-6548993497a4","series":0,"name":"replace","transplant":{"toString":"return value.charAt(index)","position":"org.apache.commons.codec.language.DoubleMetaphone:908","type":"CtReturnImpl","sourcecode":"return value.charAt(index)"},"variableMap":{"index":"index","value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char preHWChar = str.charAt((index - 2));\n    final char firstCode = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} ","position":"org.apache.commons.codec.language.Soundex:189","type":"CtIfImpl","sourcecode":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char char = str.charAt((index - 2));\n    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} "},"status":-1},{"failures":[],"tindex":"647e2432-1279-11e6-9c92-49dd532f8870","series":0,"name":"replace","transplant":{"toString":"return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset())","position":"org.apache.commons.codec.net.BCodec:162","type":"CtReturnImpl","sourcecode":"return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset())"},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:430","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())"},"status":-2},{"failures":[54,55,56,57,58,59],"tindex":"647e2433-1279-11e6-9c92-dd9743ef2f2c","series":0,"name":"replace","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"name"},"type":"adrStmt","transplantationPoint":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"status":-1},{"failures":[60,61,62,63,64,65],"tindex":"647e2434-1279-11e6-9c92-d198411d632d","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)","position":"org.apache.commons.codec.binary.BinaryCodec:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)"},"variableMap":{"ascii":"out"},"type":"adrStmt","transplantationPoint":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"status":-1},{"failures":[],"tindex":"647e4b45-1279-11e6-9c92-c3d17fae6d81","series":0,"name":"add","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"maxPhonemes","name2Size":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme left : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme join = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:109","type":"CtForEachImpl","sourcecode":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"647e4b46-1279-11e6-9c92-bf463e7fe22e","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:253","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.this.int"},"variableMap":{"maxCodeLen":"b"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer)"},"status":-3},{"failures":[],"tindex":"647e7257-1279-11e6-9c92-d3100bf4184f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.languages = languages","position":"org.apache.commons.codec.language.bm.Lang:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = languages"},"status":-2},{"failures":[],"tindex":"647ec078-1279-11e6-9c92-7556ad1154d6","series":0,"name":"add","transplant":{"toString":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:477","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1)"},"variableMap":{"finalRules1":"finalRules2","phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:479","type":"CtAssignmentImpl","sourcecode":"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2)"},"status":0},{"failures":[66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"647ec079-1279-11e6-9c92-4d4a4a64b93d","series":0,"name":"replace","transplant":{"toString":"final int name2Size = (name2.length()) - 1","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:299","type":"CtLocalVariableImpl","sourcecode":"final int int = (name2.length()) - 1"},"variableMap":{"name2":"org.apache.commons.codec.language.DaitchMokotoffSoundex.COMMENT"},"type":"adrStmt","transplantationPoint":{"toString":"final int cmtI = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.COMMENT)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:271","type":"CtLocalVariableImpl","sourcecode":"final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)"},"status":-1},{"failures":[],"tindex":"647ec07a-1279-11e6-9c92-41fdc644e252","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":52,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
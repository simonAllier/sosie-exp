{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":18,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":21,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":9,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":33,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":53,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":27,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":22,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":30,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":37,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":48,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":52,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":35,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":49,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":5,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":7,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":40,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":38,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":39,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":51,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":45,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":25,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":54,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":31},"transformations":[{"failures":[],"tindex":"18225104-16e6-11e6-a77f-fbb58663fd1b","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:253","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.this.int"},"variableMap":{"maxCodeLen":"maxLength"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Soundex.this.maxLength","position":"org.apache.commons.codec.language.Soundex:208","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.int"},"status":-2},{"failures":[],"tindex":"18229f25-16e6-11e6-a77f-179df8b29c20","series":0,"name":"replace","transplant":{"toString":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch"},"status":-2},{"failures":[],"tindex":"18229f26-16e6-11e6-a77f-49f85ceaafb5","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")","position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the any language set.\")","position":"org.apache.commons.codec.language.bm.Languages:259","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the any language set.\")"},"status":-2},{"failures":[],"tindex":"1822c637-16e6-11e6-a77f-8337c758f0df","series":0,"name":"add","transplant":{"toString":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")","position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"status":-2},{"failures":[],"tindex":"1822c638-16e6-11e6-a77f-c154be075496","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(')')","position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"printable"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < ((bytes.length) - 3) ; i++) {\n    int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)) {\n        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n        pos = 1;\n    }\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:286","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        pos = 1;\n    }\n}"},"status":-3},{"failures":[],"tindex":"1822ed49-16e6-11e6-a77f-53cbcb0c453c","series":0,"name":"add","transplant":{"toString":"if (doEncode) {\n    baseNCodec.encode(buf, 0, c, context);\n} else {\n    baseNCodec.decode(buf, 0, c, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:159","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"variableMap":{"buf":"b","c":"offset","doEncode":"doEncode","context":"context","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.length)) || ((offset + len) > (b.length))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len > 0) {\n    if (doEncode) {\n        baseNCodec.encode(b, offset, len, context);\n    } else {\n        baseNCodec.decode(b, offset, len, context);\n    }\n    flush(false);\n} ","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtIfImpl","sourcecode":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len > 0) {\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    flush(false);\n} "},"status":-2},{"failures":[],"tindex":"1823145a-16e6-11e6-a77f-97e70675f411","series":0,"name":"replace","transplant":{"toString":"this.concat = concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"variableMap":{"concat":"acceptOnMatch"},"type":"adrStmt","transplantationPoint":{"toString":"this.acceptOnMatch = acceptOnMatch","position":"org.apache.commons.codec.language.bm.Lang:88","type":"CtAssignmentImpl","sourcecode":"this.boolean = acceptOnMatch"},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"tindex":"1823898b-16e6-11e6-a77f-b31296f7b6a7","series":0,"name":"add","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.SEP)","position":"org.apache.commons.codec.net.RFC1522Codec:75","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char)"},"status":-1},{"failures":[8,9,10,11],"tindex":"1823898c-16e6-11e6-a77f-95c716267aca","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:785","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[12,13,14,15,16,17,18,19],"tindex":"1823b09d-16e6-11e6-a77f-071bcfeeb6a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(languages.isEmpty())) {\n    final org.apache.commons.codec.language.bm.Rule.Phoneme join = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n    if ((newPhonemes.size()) < maxPhonemes) {\n        newPhonemes.add(join);\n        if ((newPhonemes.size()) >= maxPhonemes) {\n            break EXPR;\n        } \n    } \n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:112","type":"CtIfImpl","sourcecode":"if (!(languages.isEmpty())) {\n    final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n    if ((newPhonemes.size()) < maxPhonemes) {\n        newPhonemes.add(join);\n        if ((newPhonemes.size()) >= maxPhonemes) {\n            break EXPR;\n        } \n    } \n} "},"status":-1},{"failures":[],"tindex":"1823b09e-16e6-11e6-a77f-3f327f1b6f32","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (bigInt == null) {\n    throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n} ","position":"org.apache.commons.codec.binary.Base64:735","type":"CtIfImpl","sourcecode":"if (bigInt == null) {\n    throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n} "},"status":0},{"failures":[],"tindex":"1823d7af-16e6-11e6-a77f-cb877508c797","series":0,"name":"add","transplant":{"toString":"this.soundexMapping = org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING","position":"org.apache.commons.codec.language.Soundex:82","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.Soundex.org.apache.commons.codec.language.Soundex.char[]"},"variableMap":{"org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING":"soundexMapping","soundexMapping":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.RefinedSoundex:90","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[],"tindex":"1823d7b0-16e6-11e6-a77f-ed9f70f7cff8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('[')","position":"org.apache.commons.codec.net.QCodec:92","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('[')"},"status":0},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"1823d7b1-16e6-11e6-a77f-87970176a677","series":0,"name":"replace","transplant":{"toString":"return result.substring(1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:463","type":"CtReturnImpl","sourcecode":"return result.substring(1)"},"variableMap":{"result":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:369","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-1},{"failures":[],"tindex":"1823fec2-16e6-11e6-a77f-49a863b0f9f0","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder(\"             \")","position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder sBuf = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.RefinedSoundex:184","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[36,37],"tindex":"1823fec3-16e6-11e6-a77f-7386ee34ab5b","series":0,"name":"replace","transplant":{"toString":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}","position":"org.apache.commons.codec.language.ColognePhonetic:376","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}"},"variableMap":{"code":"code","lastChar":"nextChar","nextChar":"nextChar","org.apache.commons.codec.language.ColognePhonetic.AHOUKQX":"org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX","org.apache.commons.codec.language.ColognePhonetic.SZ":"org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n    code = '4';\n} else {\n    code = '8';\n}","position":"org.apache.commons.codec.language.ColognePhonetic:370","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n    code = '4';\n} else {\n    code = '8';\n}"},"status":-1},{"failures":[38,39,40,41,42,43,44,45,46],"tindex":"182425d4-16e6-11e6-a77f-3d042d5c5ff8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (append && ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH))) {\n    builder.append(replacement);\n    if ((builder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n        builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length());\n    } \n    cachedString = null;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:138","type":"CtIfImpl","sourcecode":"if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n    java.lang.StringBuilder.append(replacement);\n    if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n        java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n    } \n    java.lang.String = null;\n} "},"status":-1},{"failures":[],"tindex":"18244ce5-16e6-11e6-a77f-9f99ca567d3f","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"ly\", \"Ly\")","position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"variableMap":{"txt":"pattern"},"type":"adrStmt","transplantationPoint":{"toString":"this.pattern = pattern","position":"org.apache.commons.codec.language.bm.Rule:645","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"status":-2},{"failures":[],"tindex":"18244ce6-16e6-11e6-a77f-c5ab3762fab7","series":0,"name":"replace","transplant":{"toString":"switch (context.modulus) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 2) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) << 4) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        if ((encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)) {\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n        } \n        break;\n    case 2 :\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 10) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 4) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) << 2) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        if ((encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)) {\n            buffer[((context.pos)++)] = pad;\n        } \n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base64:344","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n        } \n        break;\n    case 2 :\n        buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n            buffer[((context.int)++)] = byte;\n        } \n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"org.apache.commons.codec.binary.Base32.MASK_5BITS","pad":"pad","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"encodeTable","pos":"modulus","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","buffer":"buffer","modulus":"modulus"},"type":"adrStmt","transplantationPoint":{"toString":"switch (context.modulus) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 3))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 2))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        break;\n    case 2 :\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 11))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 6))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 1))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 4))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        break;\n    case 3 :\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 19))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 14))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 9))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 4))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 1))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        break;\n    case 4 :\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 27))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 22))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 17))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 12))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 7))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 2))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 3))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = pad;\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base32:447","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 2 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 3 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 4 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-3},{"failures":[47],"tindex":"18249b07-16e6-11e6-a77f-ffa52d72a6f4","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")","position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"status":-1},{"failures":[48,49,50,51,52,53,54],"tindex":"18249b08-16e6-11e6-a77f-23790328cdb9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((i % 3) != 0) {\n    ctx1.update(saltBytes);\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx1.update(saltBytes);\n} "},"status":-1},{"failures":[],"tindex":"1824c219-16e6-11e6-a77f-0907a68560ec","series":0,"name":"replace","transplant":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"boxContent"},"type":"adrStmt","transplantationPoint":{"toString":"if (negate) {\n    boxContent = boxContent.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtIfImpl","sourcecode":"if (negate) {\n    boxContent = boxContent.substring(1);\n} "},"status":-2},{"failures":[],"tindex":"1824c21a-16e6-11e6-a77f-45d5edbe5d28","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"variableMap":{"maxCodeLen":"length"},"type":"adrStmt","transplantationPoint":{"toString":"return length","position":"org.apache.commons.codec.language.ColognePhonetic:219","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"1824c21b-16e6-11e6-a77f-c9ab3eab181b","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"why\", \"Why\")","position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"why\", \"Why\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:85","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[12,13,14,15],"tindex":"1825d38c-16e6-11e6-a77f-a7dc5fc92f70","series":0,"name":"replace","transplant":{"toString":"final java.lang.String firstLetter = name.substring(0, 1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"variableMap":{"name":"ph"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String before = ph.substring(0, open)","position":"org.apache.commons.codec.language.bm.Rule:371","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(0, open)"},"status":-1},{"failures":[],"tindex":"1825d38d-16e6-11e6-a77f-574026296a31","series":0,"name":"replace","transplant":{"toString":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"obj","ascii":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.binary.BaseNCodec:378","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-3}],"header":{"groupId":"commons-codec","transformationCount":26,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":16,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":7,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":8,"org.apache.commons.codec.language.NysiisTest.testSnat":40,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":9,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":13,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":1,"org.apache.commons.codec.language.NysiisTest.testDropBy":42,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":11,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":12,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":3,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":4,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":28,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":14,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":15,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":20,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":6,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":5,"org.apache.commons.codec.language.SoundexTest.testB650":10,"org.apache.commons.codec.language.NysiisTest.testDad":30,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":0,"org.apache.commons.codec.language.NysiisTest.testRule2":34,"org.apache.commons.codec.language.SoundexTest.testNewInstance":18,"org.apache.commons.codec.language.NysiisTest.testRule1":33,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":24,"org.apache.commons.codec.language.NysiisTest.testOthers":43,"org.apache.commons.codec.language.NysiisTest.testRule7":37,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":26,"org.apache.commons.codec.language.NysiisTest.testRule6":36,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":25,"org.apache.commons.codec.language.NysiisTest.testRule5":35,"org.apache.commons.codec.language.NysiisTest.testTranan":44,"org.apache.commons.codec.language.SoundexTest.testDifference":17,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":27,"org.apache.commons.codec.language.NysiisTest.testDan":31,"org.apache.commons.codec.language.NysiisTest.testFal":32,"org.apache.commons.codec.language.NysiisTest.testCap":29,"org.apache.commons.codec.language.NysiisTest.testSnad":39,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":19,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":23,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":41,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":21,"org.apache.commons.codec.language.NysiisTest.testBran":38,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":45,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":22,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":2},"transformations":[{"failures":[],"tindex":"0a8422c0-16f1-11e6-a0bc-4bef10344a02","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:730","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"0a8470e1-16f1-11e6-a0bc-afe079da2cc2","series":0,"name":"add","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder()","position":"org.apache.commons.codec.net.RFC1522Codec:72","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"0a8470e2-16f1-11e6-a0bc-5f326128ba6c","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:181","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} "},"status":-2},{"failures":[],"tindex":"0a8497f3-16f1-11e6-a0bc-9377443b397b","series":0,"name":"replace","transplant":{"toString":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"variableMap":{"index":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","value":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)) {\n    return false;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:244","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    return false;\n} "},"status":-2},{"failures":[],"tindex":"0a84bf04-16f1-11e6-a0bc-97bf98d9ec63","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:475","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"variableMap":{"valueToDigest":"keyBytes","key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)","position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)"},"status":-2},{"failures":[],"tindex":"0a84bf05-16f1-11e6-a0bc-5d3d519c6d5c","series":0,"name":"add","transplant":{"toString":"data = doDecoding(data)","position":"org.apache.commons.codec.net.RFC1522Codec:154","type":"CtAssignmentImpl","sourcecode":"data = doDecoding(data)"},"variableMap":{"data":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base64:293","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"0a84bf06-16f1-11e6-a0bc-4526447ce9e9","series":0,"name":"replace","transplant":{"toString":"name1Char[i] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"name1Char[i] = ' '"},"variableMap":{"name1Char":"chars","i":"i"},"type":"adrStmt","transplantationPoint":{"toString":"chars[(count++)] = str.charAt(i)","position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[],"tindex":"0a84e617-16f1-11e6-a0bc-5533647a9a93","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"wh3\", \"Wh3\")","position":"org.apache.commons.codec.language.Caverphone2:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":8,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
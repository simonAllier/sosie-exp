{"failureDictionary":{"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":21,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":57,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":45,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":3,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":27,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":53,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":49,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":51,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":54,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":15,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":44,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":46,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":38,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":30,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":31,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":16,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":55,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":6,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":14,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":10,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":43,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":7,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":26,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":28,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":36,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":40,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":50,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":11,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":52,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":19,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":58,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":33,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":18,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":39,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":34,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":48,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":1,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":2},"transformations":[{"failures":[],"tindex":"c8a0f1ba-17bc-11e6-8675-d3d1f1a4fd9d","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int minRating = 0","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:251","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"c8a118cb-17bc-11e6-8675-03b20d5ceb17","series":0,"name":"add","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.binary.BaseNCodec:501","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"c8a118cc-17bc-11e6-8675-8bed93223043","series":0,"name":"add","transplant":{"toString":"return encode(((byte[])(obj)))","position":"org.apache.commons.codec.binary.BaseNCodec:338","type":"CtReturnImpl","sourcecode":"return encode(((byte[])(obj)))"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray())","position":"org.apache.commons.codec.binary.BinaryCodec:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray())"},"status":-2},{"failures":[],"tindex":"c8a118cd-17bc-11e6-8675-5de3fd6c9d9a","series":0,"name":"replace","transplant":{"toString":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return decode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n}","position":"org.apache.commons.codec.net.BCodec:222","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return decode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n}"},"variableMap":{"value":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"if (ascii instanceof char[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:122","type":"CtIfImpl","sourcecode":"if (ascii instanceof char[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n} "},"status":-2},{"failures":[0,1],"tindex":"c8a13fde-17bc-11e6-8675-5dd7e8f7df26","series":0,"name":"replace","transplant":{"toString":"len--","position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"len--"},"variableMap":{"len":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b = 256 + b","position":"org.apache.commons.codec.net.URLCodec:133","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"status":-1},{"failures":[],"tindex":"c8a13fdf-17bc-11e6-8675-554b0a7203dc","series":0,"name":"replace","transplant":{"toString":"final char[] out = new char[l << 1]","position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"variableMap":{"l":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] l_ascii = new char[(raw.length) << 3]","position":"org.apache.commons.codec.binary.BinaryCodec:273","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[(raw.int) << 3]"},"status":-2},{"failures":[],"tindex":"c8a13fe0-17bc-11e6-8675-0b0b205745e3","series":0,"name":"replace","transplant":{"toString":"return result","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:559","type":"CtReturnImpl","sourcecode":"return result"},"variableMap":{"result":"replacementAtStart"},"type":"adrStmt","transplantationPoint":{"toString":"return replacementAtStart","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:182","type":"CtReturnImpl","sourcecode":"return java.lang.String[]"},"status":-3},{"failures":[2,3],"tindex":"c8a166f1-17bc-11e6-8675-a7588d3773a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"status":-1},{"failures":[],"tindex":"c8a166f2-17bc-11e6-8675-0363ed319ff1","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"status":0},{"failures":[4,5,6],"tindex":"c8a166f3-17bc-11e6-8675-4d97f2fc5b7f","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}","position":"org.apache.commons.codec.binary.BinaryCodec:280","type":"CtIfImpl","sourcecode":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}"},"status":-1},{"failures":[7,8,9,10,11,12,13],"tindex":"c8a166f4-17bc-11e6-8675-31054db21942","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:269","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"c8a18e05-17bc-11e6-8675-79144aa17893","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name = getFirst3Last3(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"name = getFirst3Last3(name)"},"status":0},{"failures":[14,15,16],"tindex":"c8a18e06-17bc-11e6-8675-4dee4c7a7862","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-1},{"failures":[],"tindex":"c8a18e07-17bc-11e6-8675-a5774b78c375","series":0,"name":"replace","transplant":{"toString":"bitlen = ((bitlen + 7) >> 3) << 3","position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"bitlen = ((bitlen + 7) >> 3) << 3"},"variableMap":{"bitlen":"modulus"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base64:380","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[17,18,19,20,21,22,23,24,25],"tindex":"c8a18e08-17bc-11e6-8675-fb2c483eb221","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-1},{"failures":[],"tindex":"c8a1b519-17bc-11e6-8675-0d72a777fd55","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found","position":"org.apache.commons.codec.language.bm.PhoneticEngine:231","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean"},"variableMap":{"found":"allowWSPad"},"type":"adrStmt","transplantationPoint":{"toString":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (pad)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:465","type":"CtIfImpl","sourcecode":"if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n    return false;\n} "},"status":-3},{"failures":[],"tindex":"c8a1b51a-17bc-11e6-8675-7749f1eead3c","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y3\", \"Y3\")"},"variableMap":{"txt":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"name2 = getFirst3Last3(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:240","type":"CtAssignmentImpl","sourcecode":"name2 = getFirst3Last3(name2)"},"status":-2},{"failures":[26,27,28,29,30,31,32,33],"tindex":"c8a1b51b-17bc-11e6-8675-65fab2a61d55","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[aeiou]\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:91","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[17,18,19,20,21,22,23,24,25],"tindex":"c8a1b51c-17bc-11e6-8675-9badd382b85e","series":0,"name":"replace","transplant":{"toString":"sb.append(\", pat='\").append(pat).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:465","type":"CtInvocationImpl","sourcecode":"sb.append(\", pat='\").append(pat).append('\\'')"},"variableMap":{"pat":"replacement","sb":"builder"},"type":"adrStmt","transplantationPoint":{"toString":"builder.append(replacement)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:139","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(replacement)"},"status":-1},{"failures":[],"tindex":"c8a1dc2d-17bc-11e6-8675-9bf141e72fd7","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[9]","position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] l_raw = new byte[(ascii.length) >> 3]","position":"org.apache.commons.codec.binary.BinaryCodec:176","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-2},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"c8a1dc2e-17bc-11e6-8675-9b3c8a657c49","series":0,"name":"replace","transplant":{"toString":"buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"variableMap":{"buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:183","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[],"tindex":"c8a1dc2f-17bc-11e6-8675-cd12dcd72035","series":0,"name":"add","transplant":{"toString":"this.languages = java.util.Collections.unmodifiableSet(languages)","position":"org.apache.commons.codec.language.bm.Languages:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = java.util.Collections.unmodifiableSet(languages)"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"toString":"this.languages = languages","position":"org.apache.commons.codec.language.bm.Lang:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = languages"},"status":-2},{"failures":[],"tindex":"c8a2c690-17bc-11e6-8675-e32fb4e47a8e","series":0,"name":"replace","transplant":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding())","position":"org.apache.commons.codec.net.RFC1522Codec:76","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding())"},"variableMap":{"buffer":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:240","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-2},{"failures":[],"tindex":"c8a2c691-17bc-11e6-8675-51df978ededc","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.RuleType rt : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> rs = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages ls = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String l : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}","position":"org.apache.commons.codec.language.bm.Rule:217","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String java.lang.String : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}"},"status":-2},{"failures":[],"tindex":"c8a2c692-17bc-11e6-8675-bd71b76c6eea","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"ce\", \"se\")","position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ce\", \"se\")"},"variableMap":{"txt":"input"},"type":"adrStmt","transplantationPoint":{"toString":"input = input.trim()","position":"org.apache.commons.codec.language.DoubleMetaphone:892","type":"CtAssignmentImpl","sourcecode":"input = input.trim()"},"status":-2},{"failures":[48,49],"tindex":"c8a2c693-17bc-11e6-8675-3bb89af4ffca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:488","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[50],"tindex":"c8a2eda4-17bc-11e6-8675-6d3b8195a7d0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (slavoGermanic) {\n    result.append('S');\n} else {\n    result.append('S', 'X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtIfImpl","sourcecode":"if (slavoGermanic) {\n    result.append('S');\n} else {\n    result.append('S', 'X');\n}"},"status":-1},{"failures":[51,52,53,54,55,56,57,58],"tindex":"c8a2eda5-17bc-11e6-8675-2307191b0b3b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.addAll(newPhonemes)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:125","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.addAll(newPhonemes)"},"variableMap":{"newPhonemes":"phonemes","phonemes":"phonemes"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.add(phoneme)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(phoneme)"},"status":-1},{"failures":[],"tindex":"c8a2eda6-17bc-11e6-8675-375888530b3a","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1, key)","position":"org.apache.commons.codec.digest.HmacUtils:81","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[32,33],"tindex":"c8a2eda7-17bc-11e6-8675-2f0d17abd0c7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ci\", \"si\")","position":"org.apache.commons.codec.language.Caverphone2:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"status":-1},{"failures":[],"tindex":"c8a2eda8-17bc-11e6-8675-f5cf4a1cc8d9","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"3$\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:121","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3$\", \"A\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":31,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
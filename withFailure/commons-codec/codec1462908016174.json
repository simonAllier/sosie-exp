{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":34,"org.apache.commons.codec.language.NysiisTest.testSnat":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":28,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":55,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":15,"org.apache.commons.codec.language.NysiisTest.testDropBy":67,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":19,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":64,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":16,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":54,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":18,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":59,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":10,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":42,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":71,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":8,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":11,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":36,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":51,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":76,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":49,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":53,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":12,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":75,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":48,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":70,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":37,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":26,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":62,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":30,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":22,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":47,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":3,"org.apache.commons.codec.language.SoundexTest.testB650":74,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":25,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":56,"org.apache.commons.codec.language.NysiisTest.testOthers":68,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":5,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":33,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":61,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":39,"org.apache.commons.codec.language.NysiisTest.testTranan":69,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull":40,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":31,"org.apache.commons.codec.language.NysiisTest.testSnad":65,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":14,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":35,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":73,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":63,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":4},"transformations":[{"failures":[],"tindex":"39f4d5c2-16e4-11e6-aef9-65d0a9869e02","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('&')","position":"org.apache.commons.codec.net.QCodec:71","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('&')"},"status":0},{"failures":[0,1,2,3,4,5,6,7],"tindex":"39f4fcd3-16e4-11e6-aef9-818591c18b12","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(pBytes, 0, keyLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:398","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"39f523e4-16e4-11e6-aef9-51efaae123ab","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"lang","leftCharacter":"lang","rightCharacter":"lang","location":"lang"},"type":"adrStmt","transplantationPoint":{"toString":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} ","position":"org.apache.commons.codec.language.bm.Rule:357","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} "},"status":-1},{"failures":[8],"tindex":"39f523e5-16e4-11e6-aef9-e3c4fadd715e","series":0,"name":"replace","transplant":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        final java.lang.String remainder = input.substring(2);\n        final java.lang.String combined = \"d\" + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n    for (final java.lang.String l : org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType)) {\n        if (input.startsWith((l + \" \"))) {\n            final java.lang.String remainder = input.substring(((l.length()) + 1));\n            final java.lang.String combined = l + remainder;\n            return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n        } \n    }\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        final java.lang.String java.lang.String = input.substring(2);\n        final java.lang.String java.lang.String = \"d\" + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n    for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n        if (input.startsWith((l + \" \"))) {\n            final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n            final java.lang.String java.lang.String = l + remainder;\n            return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n        } \n    }\n} "},"status":-1},{"failures":[],"tindex":"39f54af6-16e4-11e6-aef9-57723ba966e8","series":0,"name":"add","transplant":{"toString":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":-2},{"failures":[24,25,26,27,28,29,30,31,32],"tindex":"39f57207-16e4-11e6-aef9-bf9ff4e81f45","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:390","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-1},{"failures":[],"tindex":"39f57208-16e4-11e6-aef9-23f988798a5d","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")","position":"org.apache.commons.codec.binary.Base32:309","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"status":0},{"failures":[33,34,35,36],"tindex":"39f59919-16e4-11e6-aef9-4bfc2b5180ff","series":0,"name":"replace","transplant":{"toString":"result.append('X', 'S')","position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('A')","position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"status":-1},{"failures":[37,35,36],"tindex":"39f5991a-16e4-11e6-aef9-135be3357c49","series":0,"name":"add","transplant":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:455","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"39f5991b-16e4-11e6-aef9-9f2c97fc7740","series":0,"name":"replace","transplant":{"toString":"final int u = org.apache.commons.codec.net.Utils.digit16(bytes[i])","position":"org.apache.commons.codec.net.QuotedPrintableCodec:365","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i])"},"variableMap":{"bytes":"buffer","i":"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH"},"type":"adrStmt","transplantationPoint":{"toString":"int read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH)","position":"org.apache.commons.codec.digest.DigestUtils:794","type":"CtLocalVariableImpl","sourcecode":"int int = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int)"},"status":-2},{"failures":[38,39,37,35,36],"tindex":"39f5c02c-16e4-11e6-aef9-a9a7ee2a7740","series":0,"name":"replace","transplant":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"status":-1},{"failures":[40],"tindex":"39f5c02d-16e4-11e6-aef9-496a53c63b29","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.QuotedPrintableCodec:469","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"39f5c02e-16e4-11e6-aef9-9d5ca3a23dd2","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"line","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-3},{"failures":[41],"tindex":"39f5e73f-16e4-11e6-aef9-c9ab67b779be","series":0,"name":"replace","transplant":{"toString":"code.append('J')","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd, 1, ((inwd.length) - 1))","position":"org.apache.commons.codec.language.Metaphone:131","type":"CtInvocationImpl","sourcecode":"local.append(inwd, 1, ((inwd.int) - 1))"},"status":-1},{"failures":[8,9,10,11,12,13,42,43,14,15,16,44,45,17,18,46,47,19,20,48,21,49,50,51,22,23],"tindex":"39f5e740-16e4-11e6-aef9-f178505ba1c6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"line = line.substring(0, cmtI)","position":"org.apache.commons.codec.language.bm.Lang:155","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-1},{"failures":[36],"tindex":"39f5e741-16e4-11e6-aef9-53c52e56aea9","series":0,"name":"replace","transplant":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"alternate"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.append(value.substring(0, addChars))","position":"org.apache.commons.codec.language.DoubleMetaphone:992","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars))"},"status":-1},{"failures":[],"tindex":"39f60e52-16e4-11e6-aef9-736bd900df87","series":0,"name":"add","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n    if (isVowel(charAt(value, (index + 1)))) {\n        result.append('A', 'F');\n    } else {\n        result.append('A');\n    }\n    index++;\n} else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.appendAlternate('F');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n    result.append(\"TS\", \"FX\");\n    index += 4;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:709","type":"CtIfImpl","sourcecode":"if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n    if (isVowel(charAt(value, (index + 1)))) {\n        result.append('A', 'F');\n    } else {\n        result.append('A');\n    }\n    index++;\n} else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.appendAlternate('F');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n    result.append(\"TS\", \"FX\");\n    index += 4;\n} else {\n    index++;\n}"},"status":-2},{"failures":[],"tindex":"39f63563-16e4-11e6-aef9-750bd7c36d86","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"39f63564-16e4-11e6-aef9-73bb926cf907","series":0,"name":"replace","transplant":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (int index = 0 ; index < (input.length()) ; index++) {\n    final char ch = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String inputContext = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> rules = org.apache.commons.codec.language.DaitchMokotoffSoundex.RULES.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> nextBranches = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.EMPTY_LIST;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean branchingRequired = ((replacements.length) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n                for (final java.lang.String nextReplacement : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:496","type":"CtForImpl","sourcecode":"for (int int = 0 ; index < (input.length()) ; index++) {\n    final char char = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String java.lang.String = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean boolean = ((replacements.int) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                for (final java.lang.String java.lang.String : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}"},"status":-2},{"failures":[],"tindex":"39f68385-16e4-11e6-aef9-d7c4d0e43f43","series":0,"name":"replace","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"variableMap":{"obj":"source"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(source)))","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:88","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(source)))"},"status":-2},{"failures":[],"tindex":"39f6aa96-16e4-11e6-aef9-41a57d681f8c","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:281","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"39f6aa97-16e4-11e6-aef9-a3b5c1cd7b34","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = false","position":"org.apache.commons.codec.language.bm.Languages:185","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"status":-1},{"failures":[],"tindex":"39f6aa98-16e4-11e6-aef9-7911f6cf09cb","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"status":-2},{"failures":[52,53,54,55,56],"tindex":"39f6d1a9-16e4-11e6-aef9-e14d2082570a","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"for (final byte b : bytes) {\n    if (b == (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n        hasUnderscores = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.net.QCodec:174","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        hasUnderscores = true;\n        break;\n    } \n}"},"status":-1},{"failures":[],"tindex":"39f6d1aa-16e4-11e6-aef9-c5df6a075404","series":0,"name":"replace","transplant":{"toString":"return phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:335","type":"CtReturnImpl","sourcecode":"return phonemeBuilder"},"variableMap":{"phonemeBuilder":"phonemeBuilder"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:196","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder"},"status":0},{"failures":[],"tindex":"39f6f8bb-16e4-11e6-aef9-99fec7b171a3","series":0,"name":"replace","transplant":{"toString":"context.currentLinePos += (context.pos) - savedPos","position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"variableMap":{"currentLinePos":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","savedPos":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","pos":"modulus","context":"context"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base32:356","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[57,58],"tindex":"39f6f8bc-16e4-11e6-aef9-cb68b6396e97","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)","position":"org.apache.commons.codec.digest.DigestUtils:350","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:389","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data)"},"status":-1},{"failures":[],"tindex":"39f71fcd-16e4-11e6-aef9-137e753c5573","series":0,"name":"replace","transplant":{"toString":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:471","type":"CtReturnImpl","sourcecode":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"variableMap":{"str":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","charset":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[59,60,61,62,63],"tindex":"39f71fce-16e4-11e6-aef9-1b46d7137853","series":0,"name":"replace","transplant":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"variableMap":{"i":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:361","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[],"tindex":"39f71fcf-16e4-11e6-aef9-7b5c44ee7d6b","series":0,"name":"add","transplant":{"toString":"return newData","position":"org.apache.commons.codec.language.ColognePhonetic:262","type":"CtReturnImpl","sourcecode":"return newData"},"variableMap":{"newData":"org.apache.commons.codec.language.Nysiis.CHARS_A"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_A","position":"org.apache.commons.codec.language.Nysiis:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"39f746e0-16e4-11e6-aef9-dd9ed0499d66","series":0,"name":"add","transplant":{"toString":"t = right","position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"t = right"},"variableMap":{"t":"j","right":"j"},"type":"adrStmt","transplantationPoint":{"toString":"f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j))","position":"org.apache.commons.codec.binary.Hex:91","type":"CtAssignmentImpl","sourcecode":"f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j))"},"status":0},{"failures":[],"tindex":"39f746e1-16e4-11e6-aef9-ade9c7a7da69","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (java.lang.String lang : sl.languages) {\n    ls.add(lang);\n}","position":"org.apache.commons.codec.language.bm.Languages:141","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n    ls.add(lang);\n}"},"status":-2},{"failures":[],"tindex":"39f746e2-16e4-11e6-aef9-7dc75cdb405f","series":0,"name":"replace","transplant":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", pat='\").append(pat).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:465","type":"CtInvocationImpl","sourcecode":"sb.append(\", pat='\").append(pat).append('\\'')"},"status":0},{"failures":[64,65,66,67,68,69,70],"tindex":"39f76df3-16e4-11e6-aef9-53c5fcdc4780","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_G;\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_S;\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.CHARS_N;\n} ","position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (curr == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else if (curr == 'M') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[8,10],"tindex":"39f76df4-16e4-11e6-aef9-fb05c2220759","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:762","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"variableMap":{"data":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"status":-1},{"failures":[71,72],"tindex":"39f76df5-16e4-11e6-aef9-49b8b30cdf53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} ","position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"status":-1},{"failures":[],"tindex":"39f76df6-16e4-11e6-aef9-112a6acc1651","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"status":0},{"failures":[0,1,2,3,4,5,6,7],"tindex":"39f79507-16e4-11e6-aef9-b19cb73cda3d","series":0,"name":"add","transplant":{"toString":"if ((i % 3) != 0) {\n    ctx1.update(saltBytes);\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx1.update(saltBytes);\n} "},"variableMap":{"ctx1":"ctx","saltBytes":"altResult","i":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:371","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[],"tindex":"39f79508-16e4-11e6-aef9-717e871fa61a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"status":0},{"failures":[8,9,10,11,12,13,42,43,14,15,16,44,45,17,18,46,47,19,20,48,21,49,50,51,22,23],"tindex":"39f79509-16e4-11e6-aef9-4b0176f0cf03","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-1},{"failures":[73],"tindex":"39f7950a-16e4-11e6-aef9-1516e8137b54","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"wy\", \"Wy\")","position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wy\", \"Wy\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"v\", \"f\")","position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"v\", \"f\")"},"status":-1},{"failures":[37,34,35,36],"tindex":"39f7950b-16e4-11e6-aef9-0d4c26f23476","series":0,"name":"add","transplant":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:458","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[74,75,76,77],"tindex":"39f7bc1c-16e4-11e6-aef9-77872fa732ee","series":0,"name":"replace","transplant":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"variableMap":{"mappedChar":"firstCode"},"type":"adrStmt","transplantationPoint":{"toString":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"status":-1},{"failures":[49],"tindex":"39f7bc1d-16e4-11e6-aef9-3d8aa6da3bf3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN)))","position":"org.apache.commons.codec.language.bm.Lang:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)))"},"status":-1},{"failures":[8,9,10,11,13,15,16,17],"tindex":"39f7bc1e-16e4-11e6-aef9-0721757d11bf","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return phonemeBuilder.makeString()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:481","type":"CtReturnImpl","sourcecode":"return phonemeBuilder.makeString()"},"status":-1},{"failures":[],"tindex":"39f7bc1f-16e4-11e6-aef9-3739756b43e7","series":0,"name":"replace","transplant":{"toString":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context)","position":"org.apache.commons.codec.binary.BaseNCodec:431","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"variableMap":{"pArray":"buffer","org.apache.commons.codec.binary.BaseNCodec.EOF":"modulus","context":"context"},"type":"adrStmt","transplantationPoint":{"toString":"if (0 == (context.modulus)) {\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 18) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 12) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 6) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    buffer[((context.pos)++)] = encodeTable[((context.ibitWorkArea) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n    context.currentLinePos += org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n        java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n        context.pos += lineSeparator.length;\n        context.currentLinePos = 0;\n    } \n} ","position":"org.apache.commons.codec.binary.Base64:386","type":"CtIfImpl","sourcecode":"if (0 == (context.int)) {\n    buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    if (((int) > 0) && ((int) <= (context.int))) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n        context.int = 0;\n    } \n} "},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":46,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
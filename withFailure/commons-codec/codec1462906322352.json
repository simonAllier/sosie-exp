{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":28,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":1,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":2,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":22,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":49,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":6,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":38,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":7,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":23,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":11,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":0,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":27,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":10,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":56,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":36,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":14,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":48,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":17,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":50,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":13,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":55,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":18,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":5,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":53,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":26,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":40,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":37,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":24,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":21,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":52,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":31,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":58,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":33,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0":57,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":42,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":8,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":43},"transformations":[{"failures":[],"tindex":"485abc24-16e0-11e6-8899-b1d0bf91a901","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y3\", \"Y3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0},{"failures":[],"tindex":"485ae335-16e0-11e6-8899-59bb4a10002b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = new char[mapping.length]","position":"org.apache.commons.codec.language.RefinedSoundex:77","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[mapping.int]"},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"tindex":"485ae336-16e0-11e6-8899-8569df6b9b99","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(ph.getPhonemeText())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:151","type":"CtInvocationImpl","sourcecode":"sb.append(ph.getPhonemeText())"},"status":-1},{"failures":[8,9],"tindex":"485ae337-16e0-11e6-8899-9b356c591418","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.binary.BaseNCodec:470","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[10,11,12,13,14,15,16,17,18,19,20],"tindex":"485b0a48-16e0-11e6-8899-59631d7bf19f","series":0,"name":"replace","transplant":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"variableMap":{"a":"length"},"type":"adrStmt","transplantationPoint":{"toString":"return (data.length) - (length)","position":"org.apache.commons.codec.language.ColognePhonetic:270","type":"CtReturnImpl","sourcecode":"return (char[].int) - (int)"},"status":-1},{"failures":[],"tindex":"485b0a49-16e0-11e6-8899-0996e81f0f50","series":0,"name":"replace","transplant":{"toString":"baseNCodec.encode(b, offset, len, context)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:93","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context)"},"variableMap":{"b":"singleByte","offset":"org.apache.commons.codec.binary.BaseNCodec.EOF","len":"org.apache.commons.codec.binary.BaseNCodec.EOF","context":"context","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"toString":"if (doEncode) {\n    baseNCodec.encode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context);\n} else {\n    baseNCodec.decode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"485b0a4a-16e0-11e6-8899-af47f904d056","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name1LtRStart = name1.substring(i, (i + 1))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:312","type":"CtAssignmentImpl","sourcecode":"name1LtRStart = name1.substring(i, (i + 1))"},"status":-1},{"failures":[],"tindex":"485b315b-16e0-11e6-8899-612ff3d9e005","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(' ')","position":"org.apache.commons.codec.net.QCodec:65","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(' ')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('|')","position":"org.apache.commons.codec.net.QCodec:101","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('|')"},"status":0},{"failures":[],"tindex":"485b315c-16e0-11e6-8899-031062b16c50","series":0,"name":"replace","transplant":{"toString":"final char[] out = new char[]{ '0' , '0' , '0' , '0' }","position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char[] chars = str.toCharArray()","position":"org.apache.commons.codec.language.Nysiis:277","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = str.toCharArray()"},"status":-2},{"failures":[36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"485b315d-16e0-11e6-8899-e3d6d649b8a1","series":0,"name":"replace","transplant":{"toString":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:395","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}"},"variableMap":{"blocksize":"i","pBytes":"sBytes","altResult":"sBytes","ctx":"ctx","i":"i","keyLen":"saltLen"},"type":"adrStmt","transplantationPoint":{"toString":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} "},"status":-1},{"failures":[],"tindex":"485b315e-16e0-11e6-8899-01ace2b33cc7","series":0,"name":"add","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int lengthToMatch = java.lang.Math.min(es1.length(), es2.length())","position":"org.apache.commons.codec.language.SoundexUtils:114","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(es1.length(), es2.length())"},"status":-2},{"failures":[],"tindex":"485b586f-16e0-11e6-8899-b38b734dad15","series":0,"name":"add","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"len","y":"len"},"type":"adrStmt","transplantationPoint":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"status":-2},{"failures":[],"tindex":"485b5870-16e0-11e6-8899-9d48847f37d6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")","position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"status":0},{"failures":[],"tindex":"485b5871-16e0-11e6-8899-d75b8aa6a39f","series":0,"name":"add","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return buffer.toString()","position":"org.apache.commons.codec.net.RFC1522Codec:81","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-2},{"failures":[48,49,50,51,52],"tindex":"485b5872-16e0-11e6-8899-69d08c2c6cac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"r\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r\", \"2\")"},"status":-1},{"failures":[],"tindex":"485b5873-16e0-11e6-8899-99f3044d77dd","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:475","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer)"},"variableMap":{"altResult":"obj","buffer":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"485b7f84-16e0-11e6-8899-91f618f38d6d","series":0,"name":"replace","transplant":{"toString":"if (other == (org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES)) {\n    return other;\n} else if (other == (org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages sl = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> ls = new java.util.HashSet<java.lang.String>(java.lang.Math.min(languages.size(), sl.languages.size()));\n    for (java.lang.String lang : languages) {\n        if (sl.languages.contains(lang)) {\n            ls.add(lang);\n        } \n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}","position":"org.apache.commons.codec.language.bm.Languages:116","type":"CtIfImpl","sourcecode":"if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return other;\n} else if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.lang.Math.min(java.util.Set<java.lang.String>.size(), sl.java.util.Set<java.lang.String>.size()));\n    for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n        if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n            ls.add(lang);\n        } \n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}"},"variableMap":{"other":"org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES","languages":"langs","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES"},"type":"adrStmt","transplantationPoint":{"toString":"return langs.isEmpty() ? org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES : new org.apache.commons.codec.language.bm.Languages.SomeLanguages(langs)","position":"org.apache.commons.codec.language.bm.Languages:64","type":"CtReturnImpl","sourcecode":"return langs.isEmpty() ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : new org.apache.commons.codec.language.bm.Languages.SomeLanguages(langs)"},"status":-3},{"failures":[],"tindex":"485ba695-16e0-11e6-8899-f9a92ecb1564","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}","position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"485ba696-16e0-11e6-8899-cd0503e9d6f4","series":0,"name":"replace","transplant":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"variableMap":{"value":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"if (txtLength == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n} ","position":"org.apache.commons.codec.language.Metaphone:99","type":"CtIfImpl","sourcecode":"if (txtLength == 1) {\n    return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[53,54,55,56],"tindex":"485ba697-16e0-11e6-8899-737a8a0e30de","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)","position":"org.apache.commons.codec.binary.Base64:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)"},"variableMap":{"binaryData":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)","position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)"},"status":-1},{"failures":[57,58],"tindex":"485bcda8-16e0-11e6-8899-0dec2dd69c59","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (digit == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n} ","position":"org.apache.commons.codec.binary.Hex:177","type":"CtIfImpl","sourcecode":"if (digit == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":21,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":14,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":47,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":15,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":29,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":43,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":38,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":21,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":9,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":42,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":3,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":32,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":30,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":33,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":10,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":11,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":36,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":16,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":20},"transformations":[{"failures":[],"tindex":"30308eea-16e1-11e6-99d1-f5145f36ae47","series":0,"name":"add","transplant":{"toString":"this.acceptOnMatch = acceptOnMatch","position":"org.apache.commons.codec.language.bm.Lang:88","type":"CtAssignmentImpl","sourcecode":"this.boolean = acceptOnMatch"},"variableMap":{"acceptOnMatch":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"toString":"inMultilineComment = true","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:268","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = true"},"status":-2},{"failures":[0,1,2],"tindex":"3031523b-16e1-11e6-99d1-d1ab72af191b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append(\"N\", \"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[],"tindex":"3031523c-16e1-11e6-99d1-7bb0525e13ea","series":0,"name":"replace","transplant":{"toString":"if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n} ","position":"org.apache.commons.codec.binary.Base32:495","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"variableMap":{"currentLinePos":"org.apache.commons.codec.binary.BaseNCodec.EOF","pos":"org.apache.commons.codec.binary.BaseNCodec.EOF","context":"context","length":"org.apache.commons.codec.binary.BaseNCodec.EOF","buffer":"pArray","lineSeparator":"pArray","lineLength":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"toString":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context)","position":"org.apache.commons.codec.binary.BaseNCodec:431","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"status":-3},{"failures":[],"tindex":"3031794d-16e1-11e6-99d1-7b66db6c34f4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:506","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"3031794e-16e1-11e6-99d1-adfda185b80d","series":0,"name":"replace","transplant":{"toString":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"variableMap":{"chrs":"out","index":"length","element":"out"},"type":"adrStmt","transplantationPoint":{"toString":"while ((incount < (str.length())) && (count < (out.length))) {\n    mapped = getMappingCode(str, (incount++));\n    if (mapped != 0) {\n        if ((mapped != '0') && (mapped != last)) {\n            out[(count++)] = mapped;\n        } \n        last = mapped;\n    } \n}","position":"org.apache.commons.codec.language.Soundex:272","type":"CtWhileImpl","sourcecode":"while ((incount < (str.length())) && (count < (out.int))) {\n    mapped = getMappingCode(str, (incount++));\n    if (mapped != 0) {\n        if ((mapped != '0') && (mapped != last)) {\n            out[(count++)] = mapped;\n        } \n        last = mapped;\n    } \n}"},"status":-2},{"failures":[3],"tindex":"3031a05f-16e1-11e6-99d1-5b11cf69f007","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:261","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:733","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"status":-1},{"failures":[4,5,6,7,8,9],"tindex":"3031a060-16e1-11e6-99d1-3d03bb8b3ec1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"baseNCodec.encode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:145","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[],"tindex":"3031c771-16e1-11e6-99d1-6f08ddee692e","series":0,"name":"replace","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"length","y":"length"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    boolean inExtendedComment = false;\n    while (scanner.hasNextLine()) {\n        final java.lang.String rawLine = scanner.nextLine();\n        java.lang.String line = rawLine;\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n                inExtendedComment = true;\n            } else {\n                final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n                if (cmtI >= 0) {\n                    line = line.substring(0, cmtI);\n                } \n                line = line.trim();\n                if ((line.length()) == 0) {\n                    continue;\n                } \n                final java.lang.String[] parts = line.split(\"\\\\s+\");\n                if ((parts.length) != 3) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                } \n                final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n                final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n                final boolean accept = parts[2].equals(\"true\");\n                rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n            }\n        }\n    }\n} finally {\n    scanner.close();\n}","position":"org.apache.commons.codec.language.bm.Lang:138","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (scanner.hasNextLine()) {\n        final java.lang.String java.lang.String = scanner.nextLine();\n        java.lang.String java.lang.String = rawLine;\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = true;\n            } else {\n                final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                if (cmtI >= 0) {\n                    line = line.substring(0, cmtI);\n                } \n                line = line.trim();\n                if ((line.length()) == 0) {\n                    continue;\n                } \n                final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                if ((parts.int) != 3) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                } \n                final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                final boolean boolean = parts[2].equals(\"true\");\n                rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n            }\n        }\n    }\n} finally {\n    scanner.close();\n}"},"status":-2},{"failures":[10,11,12,13,14],"tindex":"30321592-16e1-11e6-99d1-07c64f377c57","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:290","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer)"},"status":-1},{"failures":[],"tindex":"30321593-16e1-11e6-99d1-234110e3f103","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)","position":"org.apache.commons.codec.digest.Sha2Crypt:361","type":"CtAssignmentImpl","sourcecode":"ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":0},{"failures":[15,16],"tindex":"30321594-16e1-11e6-99d1-09c395a7f170","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))","position":"org.apache.commons.codec.digest.DigestUtils:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"status":-1},{"failures":[],"tindex":"30323ca5-16e1-11e6-99d1-3b2f346deb0a","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i = i","position":"org.apache.commons.codec.language.bm.PhoneticEngine:187","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int = i"},"variableMap":{"i":"w"},"type":"adrStmt","transplantationPoint":{"toString":"w >>= 6","position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"status":-2},{"failures":[0,1,17,18,2,19,20],"tindex":"30334e16-16e1-11e6-99d1-999c522cccc4","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"value"},"type":"adrStmt","transplantationPoint":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:948","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"status":-1},{"failures":[21,22,23,24,25,26,27,28,29],"tindex":"30337527-16e1-11e6-99d1-a7b953df85ab","series":0,"name":"replace","transplant":{"toString":"return 3","position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return pattern.length()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:177","type":"CtReturnImpl","sourcecode":"return java.lang.String.length()"},"status":-1},{"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"30337528-16e1-11e6-99d1-910ffcbbbd35","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"status":-1},{"failures":[],"tindex":"30337529-16e1-11e6-99d1-f3ab172ad565","series":0,"name":"replace","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (l_ascii.length) - 1 ; ii < (raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:278","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":16,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
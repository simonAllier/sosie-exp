{"failureDictionary":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":14,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":49,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":48,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":56,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":66,"org.apache.commons.codec.language.NysiisTest.testDropBy":13,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":24,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":53,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":70,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":5,"org.apache.commons.codec.binary.Base64Test.testBase64":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":67,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":69,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":39,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":76,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":55,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":74,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":77,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":34,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":28,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":42,"org.apache.commons.codec.binary.Base64Test.testPairs":20,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":25,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":30,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":32,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":64,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":22,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":63,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":4,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":8,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":16,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":0,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":1,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":2,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":9,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":15,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":59,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":79,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":73,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":19,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":40,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":6,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":7,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":11,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":35,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":78,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":37,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":75,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":47,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":51,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":57,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":68,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":43,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":58,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":61,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":46,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":27,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":52,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":12,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":65,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":54,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":3,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":21,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":38},"transformations":[{"failures":[],"tindex":"56024ce7-16e2-11e6-8fe3-e3b83a44294c","series":0,"name":"replace","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"pos","minRating":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"if (pos > (-1)) {\n    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII.charAt(pos));\n} else {\n    sb.append(c);\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtIfImpl","sourcecode":"if (pos > (-1)) {\n    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n} else {\n    sb.append(c);\n}"},"status":-3},{"failures":[0,1],"tindex":"560273f8-16e2-11e6-8fe3-fb61dfa39bbf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"bitlen = ((bitlen + 7) >> 3) << 3","position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"bitlen = ((bitlen + 7) >> 3) << 3"},"status":-1},{"failures":[],"tindex":"56029b09-16e2-11e6-8fe3-7b764db10afb","series":0,"name":"add","transplant":{"toString":"return string.getBytes(charsetName)","position":"org.apache.commons.codec.binary.StringUtils:142","type":"CtReturnImpl","sourcecode":"return string.getBytes(charsetName)"},"variableMap":{"string":"charsetName","charsetName":"charsetName"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}","position":"org.apache.commons.codec.binary.StringUtils:141","type":"CtTryImpl","sourcecode":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}"},"status":-2},{"failures":[],"tindex":"56029b0a-16e2-11e6-8fe3-534c1066129e","series":0,"name":"replace","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"ibitWorkArea","name2Size":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (pad)) {\n    context.eof = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n        final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n        if (result >= 0) {\n            context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n            context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n            if ((context.modulus) == 0) {\n                buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            } \n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base64:438","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-2},{"failures":[2,3,4,5,6,7],"tindex":"5602c21b-16e2-11e6-8fe3-7f9127175977","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))","position":"org.apache.commons.codec.digest.DigestUtils:438","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"variableMap":{"data":"str"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return encode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.URLCodec:247","type":"CtTryImpl","sourcecode":"try {\n    return encode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-1},{"failures":[8,9,10,11],"tindex":"5602c21c-16e2-11e6-8fe3-532468c50de0","series":0,"name":"replace","transplant":{"toString":"code = '4'","position":"org.apache.commons.codec.language.ColognePhonetic:361","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '1'","position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"code = '1'"},"status":-1},{"failures":[],"tindex":"5602c21d-16e2-11e6-8fe3-6b0ee0249d50","series":0,"name":"replace","transplant":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"text"},"type":"adrStmt","transplantationPoint":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-3},{"failures":[12,13],"tindex":"5602e92e-16e2-11e6-8fe3-59c398f8121c","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'P') && (next == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_FF;\n} ","position":"org.apache.commons.codec.language.Nysiis:153","type":"CtIfImpl","sourcecode":"if ((curr == 'P') && (next == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"next":"next","org.apache.commons.codec.language.Nysiis.CHARS_FF":"org.apache.commons.codec.language.Nysiis.CHARS_AF","curr":"next"},"type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_AF;\n} ","position":"org.apache.commons.codec.language.Nysiis:120","type":"CtIfImpl","sourcecode":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22,23,1,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"5602e92f-16e2-11e6-8fe3-f5826d1ce0d9","series":0,"name":"replace","transplant":{"toString":"b[8] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"b[8] = 0"},"variableMap":{"b":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = pad","position":"org.apache.commons.codec.binary.Base64:365","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-1},{"failures":[],"tindex":"5602e930-16e2-11e6-8fe3-375dff620702","series":0,"name":"replace","transplant":{"toString":"final java.lang.String remainder = input.substring(((l.length()) + 1))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:419","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(((l.length()) + 1))"},"variableMap":{"input":"name","l":"name"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String upperName = name.toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:84","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[],"tindex":"5602e931-16e2-11e6-8fe3-03a9fd8c1cdf","series":0,"name":"add","transplant":{"toString":"if (cs1 == cs2) {\n    return true;\n} ","position":"org.apache.commons.codec.binary.StringUtils:71","type":"CtIfImpl","sourcecode":"if (cs1 == cs2) {\n    return true;\n} "},"variableMap":{"cs1":"suffix","cs2":"suffix"},"type":"adrStmt","transplantationPoint":{"toString":"if ((suffix.length()) > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtIfImpl","sourcecode":"if ((suffix.length()) > (input.length())) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"56031042-16e2-11e6-8fe3-6751343fc6e5","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int right = 0","position":"org.apache.commons.codec.digest.UnixCrypt:283","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[38,39],"tindex":"56031043-16e2-11e6-8fe3-abc35578fe07","series":0,"name":"replace","transplant":{"toString":"n += 2","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"variableMap":{"n":"c"},"type":"adrStmt","transplantationPoint":{"toString":"c = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:345","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[],"tindex":"56031044-16e2-11e6-8fe3-83d3a718de32","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))","position":"org.apache.commons.codec.binary.Base32:292","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))"},"status":0},{"failures":[],"tindex":"56031045-16e2-11e6-8fe3-9d1237349340","series":0,"name":"add","transplant":{"toString":"name2 = removeVowels(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:232","type":"CtAssignmentImpl","sourcecode":"name2 = removeVowels(name2)"},"variableMap":{"name2":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"2\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"status":-2},{"failures":[],"tindex":"56033756-16e2-11e6-8fe3-f58f120ac550","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[9]","position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] bigBytes = bigInt.toByteArray()","position":"org.apache.commons.codec.binary.Base64:752","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = bigInt.toByteArray()"},"status":-2},{"failures":[],"tindex":"56033757-16e2-11e6-8fe3-cf7934afc661","series":0,"name":"replace","transplant":{"toString":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} ","position":"org.apache.commons.codec.binary.Base32:308","type":"CtIfImpl","sourcecode":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} "},"variableMap":{"pad":"org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR"},"type":"adrStmt","transplantationPoint":{"toString":"if (urlsafe.get(b)) {\n    if (b == ' ') {\n        b = '+';\n    } \n    buffer.write(b);\n} else {\n    buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR);\n    final char hex1 = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.RADIX));\n    final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.RADIX));\n    buffer.write(hex1);\n    buffer.write(hex2);\n}","position":"org.apache.commons.codec.net.URLCodec:135","type":"CtIfImpl","sourcecode":"if (urlsafe.get(b)) {\n    if (b == ' ') {\n        b = '+';\n    } \n    buffer.write(b);\n} else {\n    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n    buffer.write(hex1);\n    buffer.write(hex2);\n}"},"status":-2},{"failures":[],"tindex":"56033758-16e2-11e6-8fe3-33890cc1bd08","series":0,"name":"replace","transplant":{"toString":"diff++","position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"encodedBlockSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineLength = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0","position":"org.apache.commons.codec.binary.BaseNCodec:209","type":"CtAssignmentImpl","sourcecode":"this.int = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0"},"status":-2},{"failures":[],"tindex":"56035e69-16e2-11e6-8fe3-bd0110579b1b","series":0,"name":"add","transplant":{"toString":"return result","position":"org.apache.commons.codec.language.DoubleMetaphone:928","type":"CtReturnImpl","sourcecode":"return result"},"variableMap":{"result":"concat"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"status":-2},{"failures":[],"tindex":"56035e6a-16e2-11e6-8fe3-fbef049d42af","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"status":-2},{"failures":[40,41],"tindex":"56035e6b-16e2-11e6-8fe3-d96f2da508e7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l3\", \"L3\")","position":"org.apache.commons.codec.language.Caverphone2:115","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"status":-1},{"failures":[42,43,44],"tindex":"56035e6c-16e2-11e6-8fe3-91a3b459a69b","series":0,"name":"replace","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (input == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"56035e6d-16e2-11e6-8fe3-7fcfcc772ebb","series":0,"name":"add","transplant":{"toString":"context.currentLinePos += org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base32:517","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"variableMap":{"currentLinePos":"readPos","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"readPos","context":"context"},"type":"adrStmt","transplantationPoint":{"toString":"context.readPos += len","position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += len"},"status":-2},{"failures":[45,46,47,48,49,50,51,52,53],"tindex":"5603857e-16e2-11e6-8fe3-8fd8c93b2594","series":0,"name":"add","transplant":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"builder"},"type":"adrStmt","transplantationPoint":{"toString":"builder.append(replacement)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:139","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(replacement)"},"status":-1},{"failures":[],"tindex":"5603857f-16e2-11e6-8fe3-37f6d8dd2c73","series":0,"name":"replace","transplant":{"toString":"if (replacedName.contains(dc)) {\n    final java.lang.String singleLetter = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"variableMap":{"replacedName":"value","dc":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:569","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[54,55],"tindex":"56038580-16e2-11e6-8fe3-cfbef5a7e26c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('X', 'S')","position":"org.apache.commons.codec.language.DoubleMetaphone:660","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"status":-1},{"failures":[],"tindex":"56038581-16e2-11e6-8fe3-136ba0a89693","series":0,"name":"replace","transplant":{"toString":"singleByte[0] = ((byte)(i))","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(i))"},"variableMap":{"i":"pos","singleByte":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:514","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-3},{"failures":[],"tindex":"56038582-16e2-11e6-8fe3-2597ef5466b0","series":0,"name":"replace","transplant":{"toString":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} ","position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"status":-2},{"failures":[],"tindex":"5603ac93-16e2-11e6-8fe3-0f8c7318aaf9","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.length)","position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"variableMap":{"length":"name2Size","i":"name1Size","transcoded":"name2Char","chars":"name1Char"},"type":"adrStmt","transplantationPoint":{"toString":"if (name1LtREnd.equals(name2RtLEnd)) {\n    name1Char[(name1Size - i)] = ' ';\n    name2Char[(name2Size - i)] = ' ';\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtIfImpl","sourcecode":"if (name1LtREnd.equals(name2RtLEnd)) {\n    name1Char[(name1Size - i)] = ' ';\n    name2Char[(name2Size - i)] = ' ';\n} "},"status":-3},{"failures":[56,57,58],"tindex":"5603ac94-16e2-11e6-8fe3-e19969349359","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:485","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)"},"status":-1},{"failures":[],"tindex":"5603ac95-16e2-11e6-8fe3-2323438dd43c","series":0,"name":"replace","transplant":{"toString":"return digit","position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return digit"},"variableMap":{"digit":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:733","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[],"tindex":"5603ac96-16e2-11e6-8fe3-971764a63fd9","series":0,"name":"replace","transplant":{"toString":"salt = (org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + salt","position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt"},"variableMap":{"salt":"name1","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"name1 = removeDoubleConsonants(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"status":-3},{"failures":[],"tindex":"5603ac97-16e2-11e6-8fe3-6f3928537691","series":0,"name":"add","transplant":{"toString":"final char[] chars = new char[len]","position":"org.apache.commons.codec.language.SoundexUtils:46","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[len]"},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] newData = new char[length]","position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"status":-2},{"failures":[],"tindex":"5603d3a8-16e2-11e6-8fe3-8195f01dc570","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:111","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:531","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"5603d3a9-16e2-11e6-8fe3-e7c8d5815d70","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"status":0},{"failures":[59,60,61,62],"tindex":"5603d3aa-16e2-11e6-8fe3-9f4cd46c1abe","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX","key":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))","position":"org.apache.commons.codec.digest.Md5Crypt:72","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"status":-1},{"failures":[63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"tindex":"5603d3ab-16e2-11e6-8fe3-53320f90ed19","series":0,"name":"replace","transplant":{"toString":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:280","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} "},"variableMap":{"input":"input","i":"ipl","j":"i","suffix":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.pattern))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.bm.Rule.this.rContext.isMatch(input.subSequence(ipl, input.length())))) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:713","type":"CtIfImpl","sourcecode":"if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"5603d3ac-16e2-11e6-8fe3-05a24739d940","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (java.lang.String lang : sl.languages) {\n    ls.add(lang);\n}","position":"org.apache.commons.codec.language.bm.Languages:141","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n    ls.add(lang);\n}"},"status":-2},{"failures":[38,78,79,39],"tindex":"5603d3ad-16e2-11e6-8fe3-1315ab4395bd","series":0,"name":"replace","transplant":{"toString":"b ^= t","position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"variableMap":{"b":"j","t":"s"},"type":"adrStmt","transplantationPoint":{"toString":"schedule[(j++)] = s","position":"org.apache.commons.codec.digest.UnixCrypt:378","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = s"},"status":-1},{"failures":[],"tindex":"5603fabe-16e2-11e6-8fe3-974873f70c2f","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < n ; i++) {\n    final char c = accentedWord.charAt(i);\n    final int pos = org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < n ; i++) {\n    final char char = accentedWord.charAt(i);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE":"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_PREFIX","org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII":"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_PREFIX","accentedWord":"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_PREFIX","n":"rounds","sb":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"if (roundsCustom) {\n    buffer.append(org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_PREFIX);\n    buffer.append(rounds);\n    buffer.append(\"$\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:424","type":"CtIfImpl","sourcecode":"if (roundsCustom) {\n    buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n    buffer.append(rounds);\n    buffer.append(\"$\");\n} "},"status":-2},{"failures":[],"tindex":"5603fabf-16e2-11e6-8fe3-0b5241e405eb","series":0,"name":"replace","transplant":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"variableMap":{"a":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:492","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[54,55],"tindex":"5603fac0-16e2-11e6-8fe3-f17ca7906e27","series":0,"name":"add","transplant":{"toString":"result.append('J', 'A')","position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"result.append('J', 'A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:666","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"5603fac1-16e2-11e6-8fe3-0580cbe99d8f","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"[^a-z]\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"variableMap":{"txt":"value"},"type":"adrStmt","transplantationPoint":{"toString":"value = cleanInput(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"status":-2},{"failures":[],"tindex":"5603fac2-16e2-11e6-8fe3-3dd64ab5bac1","series":0,"name":"replace","transplant":{"toString":"s = (s >>> 16) | (t & -65536)","position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"s = (s >>> 16) | (t & -65536)"},"variableMap":{"s":"index","t":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:605","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"5603fac3-16e2-11e6-8fe3-1bb057b9b6b2","series":0,"name":"replace","transplant":{"toString":"this.strict = strict","position":"org.apache.commons.codec.language.Nysiis:193","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"variableMap":{"strict":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"result = true"},"status":-2},{"failures":[],"tindex":"560421d4-16e2-11e6-8fe3-27b9a971d768","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.BCodec:144","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":46,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":4,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":111,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":16,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":104,"org.apache.commons.codec.language.NysiisTest.testSnat":82,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":62,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":41,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":110,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":114,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":67,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":107,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":35,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":20,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":7,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":39,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":10,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":24,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":94,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":22,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":25,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":57,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":29,"org.apache.commons.codec.language.NysiisTest.testCap":73,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":3,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":34,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":103,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":32,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":100,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":109,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":93,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":113,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":8,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":26,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":63,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":108,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":66,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":40,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":92,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":23,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":48,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":42,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":6,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":14,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":70,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":118,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":105,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":69,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":106,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":49,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":88,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":58,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":65,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":2,"org.apache.commons.codec.language.NysiisTest.testTranan":86,"org.apache.commons.codec.language.NysiisTest.testFal":76,"org.apache.commons.codec.language.NysiisTest.testSnad":81,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":52,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":45,"org.apache.commons.codec.language.MetaphoneTest.testTCH":98,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":9,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":33,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":11,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":99,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":19,"org.apache.commons.codec.language.NysiisTest.testDropBy":84,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":56,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":0,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":27,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":17,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":51,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":54,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":30,"org.apache.commons.codec.language.NysiisTest.testRule2":78,"org.apache.commons.codec.language.NysiisTest.testRule1":77,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":95,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":64,"org.apache.commons.codec.language.NysiisTest.testRule6":79,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":55,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":28,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":102,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":18,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":83,"org.apache.commons.codec.language.NysiisTest.testBran":80,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":87,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":116,"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull":117,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":46,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":68,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":96,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":91,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":36,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":112,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":47,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":59,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":89,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":61,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":101,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":5,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":21,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":43,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":13,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":31,"org.apache.commons.codec.language.NysiisTest.testDad":74,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":115,"org.apache.commons.codec.language.NysiisTest.testOthers":85,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":12,"org.apache.commons.codec.language.SoundexTest.testDifference":90,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":71,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":97,"org.apache.commons.codec.language.NysiisTest.testDan":75,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":60,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":15,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":38},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"b1c69732-16e6-11e6-9e53-1da95d082209","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((context.eof) && ((context.modulus) >= 2)) {\n    final byte[] buffer = ensureBufferSize(decodeSize, context);\n    switch (context.modulus) {\n        case 2 :\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            break;\n        case 3 :\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            break;\n        case 4 :\n            context.lbitWorkArea = (context.lbitWorkArea) >> 4;\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            break;\n        case 5 :\n            context.lbitWorkArea = (context.lbitWorkArea) >> 1;\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            break;\n        case 6 :\n            context.lbitWorkArea = (context.lbitWorkArea) >> 6;\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            break;\n        case 7 :\n            context.lbitWorkArea = (context.lbitWorkArea) >> 3;\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n    }\n} ","position":"org.apache.commons.codec.binary.Base32:374","type":"CtIfImpl","sourcecode":"if ((context.boolean) && ((context.int) >= 2)) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    switch (context.int) {\n        case 2 :\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 4 :\n            context.long = (context.long) >> 4;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 5 :\n            context.long = (context.long) >> 1;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 6 :\n            context.long = (context.long) >> 6;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 7 :\n            context.long = (context.long) >> 3;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n} "},"status":-1},{"failures":[],"tindex":"b1c70c63-16e6-11e6-9e53-216174a64522","series":0,"name":"replace","transplant":{"toString":"this.replacementBeforeVowel = replacementBeforeVowel.split(\"\\\\|\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:172","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementBeforeVowel.split(\"\\\\|\")"},"variableMap":{"replacementBeforeVowel":"replacementDefault"},"type":"adrStmt","transplantationPoint":{"toString":"this.replacementDefault = replacementDefault.split(\"\\\\|\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:173","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementDefault.split(\"\\\\|\")"},"status":-2},{"failures":[],"tindex":"b1c92f44-16e6-11e6-9e53-37e3a12fd124","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QCodec.this.charset.name()","position":"org.apache.commons.codec.net.QCodec:337","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.java.nio.charset.Charset.name()"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.UTF_8"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.UTF_8), salt)","position":"org.apache.commons.codec.digest.Crypt:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt)"},"status":-2},{"failures":[],"tindex":"b1c95655-16e6-11e6-9e53-13dfba42c03a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:413","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n} "},"status":0},{"failures":[10,11,12,13,14],"tindex":"b1c95656-16e6-11e6-9e53-cd4040132804","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:288","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)"},"status":-1},{"failures":[],"tindex":"b1c97d67-16e6-11e6-9e53-27f22e283942","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('$')","position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i)","position":"org.apache.commons.codec.net.URLCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i)"},"status":-2},{"failures":[],"tindex":"b1c97d68-16e6-11e6-9e53-b1f32bfb28aa","series":0,"name":"replace","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"location"},"type":"adrStmt","transplantationPoint":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"status":0},{"failures":[],"tindex":"b1c9a479-16e6-11e6-9e53-271c9874bff1","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH)","position":"org.apache.commons.codec.digest.HmacUtils:767","type":"CtLocalVariableImpl","sourcecode":"int int = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int)"},"status":-2},{"failures":[],"tindex":"b1c9a47a-16e6-11e6-9e53-65d01a94a61c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Languages.this.languages","position":"org.apache.commons.codec.language.bm.Languages:293","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.this.java.util.Set<java.lang.String>"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.languages","position":"org.apache.commons.codec.language.bm.Languages:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>"},"status":-2},{"failures":[],"tindex":"b1c9a47b-16e6-11e6-9e53-4901d757baae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[],"tindex":"b1c9cb8c-16e6-11e6-9e53-0dd37360eadd","series":0,"name":"replace","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH","len":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH"},"type":"adrStmt","transplantationPoint":{"toString":"while ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n    builder.append('0');\n    cachedString = null;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:116","type":"CtWhileImpl","sourcecode":"while ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n    java.lang.StringBuilder.append('0');\n    java.lang.String = null;\n}"},"status":-2},{"failures":[15,16],"tindex":"b1c9cb8d-16e6-11e6-9e53-abad9db188b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-1},{"failures":[],"tindex":"b1c9cb8e-16e6-11e6-9e53-7be46d238a1b","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"c\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:85","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[15,17],"tindex":"b1cadcff-16e6-11e6-9e53-e965664df647","series":0,"name":"replace","transplant":{"toString":"result.append('J', 'H')","position":"org.apache.commons.codec.language.DoubleMetaphone:522","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:488","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"b1cadd00-16e6-11e6-9e53-b5f65ff0483b","series":0,"name":"replace","transplant":{"toString":"result.append('0', 'T')","position":"org.apache.commons.codec.language.DoubleMetaphone:690","type":"CtInvocationImpl","sourcecode":"result.append('0', 'T')"},"variableMap":{"result":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"b1cb0411-16e6-11e6-9e53-514592bd0966","series":0,"name":"replace","transplant":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the any language set.\")","position":"org.apache.commons.codec.language.bm.Languages:259","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the any language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))","position":"org.apache.commons.codec.language.bm.Lang:169","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))"},"status":0},{"failures":[],"tindex":"b1cb0412-16e6-11e6-9e53-ff96a1849abf","series":0,"name":"replace","transplant":{"toString":"if (append && ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH))) {\n    builder.append(replacement);\n    if ((builder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n        builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length());\n    } \n    cachedString = null;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:138","type":"CtIfImpl","sourcecode":"if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n    java.lang.StringBuilder.append(replacement);\n    if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n        java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n    } \n    java.lang.String = null;\n} "},"variableMap":{"org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH":"n","builder":"code","replacement":"org.apache.commons.codec.language.Metaphone.VARSON","cachedString":"org.apache.commons.codec.language.Metaphone.FRONTV","append":"hard"},"type":"adrStmt","transplantationPoint":{"toString":"switch (symb) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (n == 0) {\n            code.append(symb);\n        } \n        break;\n    case 'B' :\n        if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n            break;\n        } \n        code.append(symb);\n        break;\n    case 'C' :\n        if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) {\n            break;\n        } \n        if (regionMatch(local, n, \"CIA\")) {\n            code.append('X');\n            break;\n        } \n        if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) {\n            code.append('S');\n            break;\n        } \n        if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n            code.append('K');\n            break;\n        } \n        if (isNextChar(local, n, 'H')) {\n            if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                code.append('K');\n            } else {\n                code.append('X');\n            }\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 2)))) >= 0)) {\n            code.append('J');\n            n += 2;\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'G' :\n        if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n            break;\n        } \n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n            break;\n        } \n        if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n            break;\n        } \n        if (isPreviousChar(local, n, 'G')) {\n            hard = true;\n        } else {\n            hard = false;\n        }\n        if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n            code.append('J');\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'H' :\n        if (isLastChar(wdsz, n)) {\n            break;\n        } \n        if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.VARSON.indexOf(local.charAt((n - 1)))) >= 0)) {\n            break;\n        } \n        if (isVowel(local, (n + 1))) {\n            code.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        code.append(symb);\n        break;\n    case 'K' :\n        if (n > 0) {\n            if (!(isPreviousChar(local, n, 'C'))) {\n                code.append(symb);\n            } \n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'P' :\n        if (isNextChar(local, n, 'H')) {\n            code.append('F');\n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'Q' :\n        code.append('K');\n        break;\n    case 'S' :\n        if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n            code.append('X');\n        } else {\n            code.append('S');\n        }\n        break;\n    case 'T' :\n        if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n            code.append('X');\n            break;\n        } \n        if (regionMatch(local, n, \"TCH\")) {\n            break;\n        } \n        if (regionMatch(local, n, \"TH\")) {\n            code.append('0');\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'V' :\n        code.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n            code.append(symb);\n        } \n        break;\n    case 'X' :\n        code.append('K');\n        code.append('S');\n        break;\n    case 'Z' :\n        code.append('S');\n        break;\n    default :\n        break;\n}","position":"org.apache.commons.codec.language.Metaphone:155","type":"CtSwitchImpl","sourcecode":"switch (symb) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (n == 0) {\n            code.append(symb);\n        } \n        break;\n    case 'B' :\n        if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n            break;\n        } \n        code.append(symb);\n        break;\n    case 'C' :\n        if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n            break;\n        } \n        if (regionMatch(local, n, \"CIA\")) {\n            code.append('X');\n            break;\n        } \n        if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n            code.append('S');\n            break;\n        } \n        if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n            code.append('K');\n            break;\n        } \n        if (isNextChar(local, n, 'H')) {\n            if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                code.append('K');\n            } else {\n                code.append('X');\n            }\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n            code.append('J');\n            n += 2;\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'G' :\n        if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n            break;\n        } \n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n            break;\n        } \n        if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n            break;\n        } \n        if (isPreviousChar(local, n, 'G')) {\n            hard = true;\n        } else {\n            hard = false;\n        }\n        if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n            code.append('J');\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'H' :\n        if (isLastChar(wdsz, n)) {\n            break;\n        } \n        if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n            break;\n        } \n        if (isVowel(local, (n + 1))) {\n            code.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        code.append(symb);\n        break;\n    case 'K' :\n        if (n > 0) {\n            if (!(isPreviousChar(local, n, 'C'))) {\n                code.append(symb);\n            } \n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'P' :\n        if (isNextChar(local, n, 'H')) {\n            code.append('F');\n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'Q' :\n        code.append('K');\n        break;\n    case 'S' :\n        if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n            code.append('X');\n        } else {\n            code.append('S');\n        }\n        break;\n    case 'T' :\n        if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n            code.append('X');\n            break;\n        } \n        if (regionMatch(local, n, \"TCH\")) {\n            break;\n        } \n        if (regionMatch(local, n, \"TH\")) {\n            code.append('0');\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'V' :\n        code.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n            code.append(symb);\n        } \n        break;\n    case 'X' :\n        code.append('K');\n        code.append('S');\n        break;\n    case 'Z' :\n        code.append('S');\n        break;\n    default :\n        break;\n}"},"status":-3},{"failures":[],"tindex":"b1cb5233-16e6-11e6-9e53-9d90a763159c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:366","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-3},{"failures":[],"tindex":"b1cb5234-16e6-11e6-9e53-0f65e3344abc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"hard = true","position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"status":0},{"failures":[18,19,20,21,22,23,24,25],"tindex":"b1cb7945-16e6-11e6-9e53-b78ab5b12398","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(languages.isEmpty())) {\n    final org.apache.commons.codec.language.bm.Rule.Phoneme join = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n    if ((newPhonemes.size()) < maxPhonemes) {\n        newPhonemes.add(join);\n        if ((newPhonemes.size()) >= maxPhonemes) {\n            break EXPR;\n        } \n    } \n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:112","type":"CtIfImpl","sourcecode":"if (!(languages.isEmpty())) {\n    final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n    if ((newPhonemes.size()) < maxPhonemes) {\n        newPhonemes.add(join);\n        if ((newPhonemes.size()) >= maxPhonemes) {\n            break EXPR;\n        } \n    } \n} "},"status":-1},{"failures":[],"tindex":"b1cb7946-16e6-11e6-9e53-8d8bba41ac9f","series":0,"name":"add","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder()","position":"org.apache.commons.codec.net.RFC1522Codec:72","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"b1cb7947-16e6-11e6-9e53-977ca27f8408","series":0,"name":"replace","transplant":{"toString":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH","tempResult":"buffer","pBytes":"buffer","keyLen":"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH","cp":"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH"},"type":"adrStmt","transplantationPoint":{"toString":"while (read > (-1)) {\n    digest.update(buffer, 0, read);\n    read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH);\n}","position":"org.apache.commons.codec.digest.DigestUtils:796","type":"CtWhileImpl","sourcecode":"while (read > (-1)) {\n    digest.update(buffer, 0, read);\n    read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int);\n}"},"status":-2},{"failures":[26,27,28,29,30,31],"tindex":"b1cb7948-16e6-11e6-9e53-d14dc9fc1792","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"t+\", \"T\")","position":"org.apache.commons.codec.language.Caverphone2:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"t+\", \"T\")"},"status":-1},{"failures":[],"tindex":"b1cba059-16e6-11e6-9e53-85c5c783f90d","series":0,"name":"add","transplant":{"toString":"final int[] schedule = new int[32]","position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int[] out = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1)","position":"org.apache.commons.codec.digest.UnixCrypt:226","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1)"},"status":-2},{"failures":[],"tindex":"b1cba05a-16e6-11e6-9e53-675b969e492c","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (bytes.length) ; i++) {\n    final int b = bytes[i];\n    if (b == '+') {\n        buffer.write(' ');\n    } else if (b == (org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR)) {\n        try {\n            final int u = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            buffer.write(((char)((u << 4) + l)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n        }\n    } else {\n        buffer.write(b);\n    }\n}","position":"org.apache.commons.codec.net.URLCodec:166","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final int int = bytes[i];\n    if (b == '+') {\n        buffer.write(' ');\n    } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n        try {\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            buffer.write(((char)((u << 4) + l)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n        }\n    } else {\n        buffer.write(b);\n    }\n}"},"variableMap":{"e":"e","bytes":"bytes","length":"b","buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.LF"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) {\n            continue;\n        } \n        final int u = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.LF))) {\n    buffer.write(b);\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-3},{"failures":[],"tindex":"b1cbc76b-16e6-11e6-9e53-e5753b92a802","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:93","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":0},{"failures":[18,19,20,21,22,23,24,25],"tindex":"b1cbc76c-16e6-11e6-9e53-137738fea6c7","series":0,"name":"add","transplant":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"result = true"},"variableMap":{"result":"found"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = false","position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = false"},"status":-1},{"failures":[],"tindex":"b1cbc76d-16e6-11e6-9e53-6f9cb0872dcd","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"i","lineSeparator":"tmp"},"type":"adrStmt","transplantationPoint":{"toString":"if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n}","position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n}"},"status":-3},{"failures":[],"tindex":"b1cbc76e-16e6-11e6-9e53-8b56652aad13","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray))","position":"org.apache.commons.codec.binary.BaseNCodec:361","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray))"},"variableMap":{"pArray":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:475","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"status":-2},{"failures":[32,33,34,35,36,37],"tindex":"b1cbee7f-16e6-11e6-9e53-c5f5f3c511aa","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(key, null)","position":"org.apache.commons.codec.digest.Crypt:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key, null)"},"variableMap":{"key":"str"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return encode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.URLCodec:247","type":"CtTryImpl","sourcecode":"try {\n    return encode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-1},{"failures":[],"tindex":"b1cbee80-16e6-11e6-9e53-bfd1f311417f","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0, j = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}","position":"org.apache.commons.codec.binary.Hex:144","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}"},"status":-2},{"failures":[38,39],"tindex":"b1cbee81-16e6-11e6-9e53-ebfa3f12c3a9","series":0,"name":"replace","transplant":{"toString":"final int ipl = i + patternLength","position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = i + patternLength"},"variableMap":{"patternLength":"d","i":"d"},"type":"adrStmt","transplantationPoint":{"toString":"final int t = (((org.apache.commons.codec.digest.UnixCrypt.SKB[4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SKB[5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[7][(((d >>> 21) & 15) | ((d >>> 22) & 48))])","position":"org.apache.commons.codec.digest.UnixCrypt:373","type":"CtLocalVariableImpl","sourcecode":"final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))])"},"status":-1},{"failures":[],"tindex":"b1cbee82-16e6-11e6-9e53-9bfbcd5e03cf","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:560","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-2},{"failures":[],"tindex":"b1cc1593-16e6-11e6-9e53-c3bc896df218","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i += patternLength","position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"variableMap":{"patternLength":"index","i":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = handleCH(value, result, index)","position":"org.apache.commons.codec.language.DoubleMetaphone:287","type":"CtAssignmentImpl","sourcecode":"index = handleCH(value, result, index)"},"status":-3},{"failures":[],"tindex":"b1cc1594-16e6-11e6-9e53-7190da72546a","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('}')","position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-2},{"failures":[40],"tindex":"b1cc1595-16e6-11e6-9e53-7b1c06990928","series":0,"name":"replace","transplant":{"toString":"result.append(\"SK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"result.append(\"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:619","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[],"tindex":"b1cc1596-16e6-11e6-9e53-0b1543c5f123","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"wh3\", \"Wh3\")","position":"org.apache.commons.codec.language.Caverphone1:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"j\", \"y\")","position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":0},{"failures":[],"tindex":"b1cc3ca7-16e6-11e6-9e53-17eca438fc48","series":0,"name":"replace","transplant":{"toString":"final int ipl = i + patternLength","position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = i + patternLength"},"variableMap":{"patternLength":"org.apache.commons.codec.net.URLCodec.RADIX","i":"org.apache.commons.codec.net.URLCodec.RADIX"},"type":"adrStmt","transplantationPoint":{"toString":"final int i = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.RADIX)","position":"org.apache.commons.codec.net.Utils:43","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Character.digit(((char)(b)), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)"},"status":-2},{"failures":[41,42,43],"tindex":"b1cc3ca8-16e6-11e6-9e53-b96d394faa10","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"status":-1},{"failures":[44],"tindex":"b1cc3ca9-16e6-11e6-9e53-addb68d65f7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length())","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:142","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length())"},"status":-1},{"failures":[],"tindex":"b1cc3caa-16e6-11e6-9e53-35710f889ada","series":0,"name":"add","transplant":{"toString":"return digit","position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return digit"},"variableMap":{"digit":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[],"tindex":"b1cc3cab-16e6-11e6-9e53-3bd9514f2e46","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('.')","position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('\"')","position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\"')"},"status":-2},{"failures":[45],"tindex":"b1cc63bc-16e6-11e6-9e53-bbc5765c1449","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"wh3\", \"Wh3\")","position":"org.apache.commons.codec.language.Caverphone1:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":-1},{"failures":[46,47,48,49,50,51,52],"tindex":"b1cc63bd-16e6-11e6-9e53-cb370579a3a3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"status":-1},{"failures":[],"tindex":"b1cc63be-16e6-11e6-9e53-6d7a3dbff984","series":0,"name":"replace","transplant":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"result = true"},"variableMap":{"result":"accept"},"type":"adrStmt","transplantationPoint":{"toString":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))","position":"org.apache.commons.codec.language.bm.Lang:177","type":"CtInvocationImpl","sourcecode":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))"},"status":-2},{"failures":[],"tindex":"b1cc63bf-16e6-11e6-9e53-bfde74fae5bf","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:122","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"b1cc8ad0-16e6-11e6-9e53-bdefa75b79b3","series":0,"name":"replace","transplant":{"toString":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} "},"variableMap":{"es1":"line","es2":"line","i":"cmtI","diff":"cmtI"},"type":"adrStmt","transplantationPoint":{"toString":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} ","position":"org.apache.commons.codec.language.bm.Rule:422","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[],"tindex":"b1cc8ad1-16e6-11e6-9e53-ffc8ad466357","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"variableMap":{"txt":"upperName"},"type":"adrStmt","transplantationPoint":{"toString":"upperName = removeAccents(upperName)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:91","type":"CtAssignmentImpl","sourcecode":"upperName = removeAccents(upperName)"},"status":-2},{"failures":[],"tindex":"b1cc8ad2-16e6-11e6-9e53-43eb087d4097","series":0,"name":"replace","transplant":{"toString":"if ((suffix.length()) > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtIfImpl","sourcecode":"if ((suffix.length()) > (input.length())) {\n    return false;\n} "},"variableMap":{"input":"input","suffix":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch)","position":"org.apache.commons.codec.language.bm.Rule:572","type":"CtReturnImpl","sourcecode":"return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch)"},"status":-2},{"failures":[],"tindex":"b1cc8ad3-16e6-11e6-9e53-1f5866e9b04e","series":0,"name":"add","transplant":{"toString":"char lastChar = '\u0000'","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char last","position":"org.apache.commons.codec.language.Soundex:267","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[15,17],"tindex":"b1cc8ad4-16e6-11e6-9e53-138eb87a488e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:711","type":"CtIfImpl","sourcecode":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}"},"status":-1},{"failures":[],"tindex":"b1ccb1e5-16e6-11e6-9e53-c53af40f0a8a","series":0,"name":"replace","transplant":{"toString":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtIfImpl","sourcecode":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"input","name2":"input","name1":"content","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.endsWith(input, content)","position":"org.apache.commons.codec.language.bm.Rule:540","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.endsWith(input, content)"},"status":-3},{"failures":[],"tindex":"b1ccb1e6-16e6-11e6-9e53-25de8adfbe85","series":0,"name":"replace","transplant":{"toString":"salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))","position":"org.apache.commons.codec.digest.Sha2Crypt:103","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"variableMap":{"salt":"name","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = cleanName(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:132","type":"CtAssignmentImpl","sourcecode":"name = cleanName(name)"},"status":-3},{"failures":[15,17,40],"tindex":"b1ccb1e7-16e6-11e6-9e53-7dc4f3fe91b0","series":0,"name":"replace","transplant":{"toString":"result.append(\"N\", \"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"status":-1},{"failures":[],"tindex":"b1ccb1e8-16e6-11e6-9e53-a7cc79e765cb","series":0,"name":"replace","transplant":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:183","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"for (final byte c : bytes) {\n    int b = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (urlsafe.get(b)) {\n        if (b == ' ') {\n            b = '+';\n        } \n        buffer.write(b);\n    } else {\n        buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR);\n        final char hex1 = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.RADIX));\n        final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.RADIX));\n        buffer.write(hex1);\n        buffer.write(hex2);\n    }\n}","position":"org.apache.commons.codec.net.URLCodec:130","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    int int = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (urlsafe.get(b)) {\n        if (b == ' ') {\n            b = '+';\n        } \n        buffer.write(b);\n    } else {\n        buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        buffer.write(hex1);\n        buffer.write(hex2);\n    }\n}"},"status":-2},{"failures":[],"tindex":"b1ccd8f9-16e6-11e6-9e53-35b74bdf9c50","series":0,"name":"replace","transplant":{"toString":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"hwChar","preHWChar":"hwChar","firstCode":"hwChar"},"type":"adrStmt","transplantationPoint":{"toString":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char preHWChar = str.charAt((index - 2));\n    final char firstCode = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} ","position":"org.apache.commons.codec.language.Soundex:189","type":"CtIfImpl","sourcecode":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char char = str.charAt((index - 2));\n    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} "},"status":-2},{"failures":[18,19,20,21,22,23,24,25],"tindex":"b1ccd8fa-16e6-11e6-9e53-ef3039987787","series":0,"name":"replace","transplant":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int cLine = currentLine;\n        final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(myLine);\n                sb.append(\", loc='\").append(loc).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String patternKey = r.pattern.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"b1cd000b-16e6-11e6-9e53-818d96b752e9","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int j = 0","position":"org.apache.commons.codec.digest.UnixCrypt:359","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[53,6],"tindex":"b1cd271c-16e6-11e6-9e53-b11cfc5ba439","series":0,"name":"replace","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return context.eof ? 0 : 1","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:64","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.Context.boolean ? 0 : 1"},"status":-1},{"failures":[],"tindex":"b1cd271d-16e6-11e6-9e53-b32df1a1bfe5","series":0,"name":"replace","transplant":{"toString":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.TEN_1;\n} ","position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-3},{"failures":[41,42,43],"tindex":"b1cd271e-16e6-11e6-9e53-89a8b7f8ffdb","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:462","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:473","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)"},"status":-1},{"failures":[38,39],"tindex":"b1cd271f-16e6-11e6-9e53-83bdf73156f4","series":0,"name":"replace","transplant":{"toString":"u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"d"},"type":"adrStmt","transplantationPoint":{"toString":"d = (d >>> 1) | (d << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"status":-1},{"failures":[54,55,56,57,58,59,60,61],"tindex":"b1cd2720-16e6-11e6-9e53-cd2d342e75f7","series":0,"name":"replace","transplant":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.SEP)","position":"org.apache.commons.codec.net.RFC1522Codec:77","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char)"},"status":-1},{"failures":[],"tindex":"b1cd4e31-16e6-11e6-9e53-e5731cc7bae6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.ENGLISH);\n} ","position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtIfImpl","sourcecode":"if (count == len) {\n    return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[],"tindex":"b1cd4e32-16e6-11e6-9e53-7370aa95d875","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:554","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}"},"status":-2},{"failures":[],"tindex":"b1cd4e33-16e6-11e6-9e53-09918892e93d","series":0,"name":"replace","transplant":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"variableMap":{"maxPhonemes":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = (t >>> 1) | (t << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"status":-2},{"failures":[],"tindex":"b1ce5fa4-16e6-11e6-9e53-41a670b5be1c","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:274","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data)"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()"},"status":-2},{"failures":[],"tindex":"b1ce5fa5-16e6-11e6-9e53-73ded655f43a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^gn\", \"2n\")","position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"status":0},{"failures":[],"tindex":"b1ce5fa6-16e6-11e6-9e53-4fa32398724e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (c1 == c2) {\n    continue;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"status":0},{"failures":[62,63,64,65,66,67,68],"tindex":"b1ce86b7-16e6-11e6-9e53-c3439f00c055","series":0,"name":"replace","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"i"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:101","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"b1ce86b8-16e6-11e6-9e53-431c22b25866","series":0,"name":"replace","transplant":{"toString":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + salt;\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"variableMap":{"salt":"value","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (index == 0) {\n    result.append('S');\n    index++;\n} else {\n    if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n        result.append(\"KS\");\n    } \n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('S');\n    index++;\n} else {\n    if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n        result.append(\"KS\");\n    } \n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n}"},"status":-3},{"failures":[],"tindex":"b1ce86b9-16e6-11e6-9e53-ddec95b17ac2","series":0,"name":"replace","transplant":{"toString":"final int startDst = (bitlen / 8) - len","position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"variableMap":{"bitlen":"c","len":"c"},"type":"adrStmt","transplantationPoint":{"toString":"int s = (((org.apache.commons.codec.digest.UnixCrypt.SKB[0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SKB[1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))])","position":"org.apache.commons.codec.digest.UnixCrypt:370","type":"CtLocalVariableImpl","sourcecode":"int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))])"},"status":-2},{"failures":[],"tindex":"b1ceadca-16e6-11e6-9e53-41120a66455d","series":0,"name":"replace","transplant":{"toString":"final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1])","position":"org.apache.commons.codec.language.bm.Rule:451","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String rightCharacter = parts[1]","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:291","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = parts[1]"},"status":-2},{"failures":[],"tindex":"b1ceadcb-16e6-11e6-9e53-3de45a47c7f1","series":0,"name":"add","transplant":{"toString":"u >>>= 1","position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"variableMap":{"u":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += (context.pos) - savedPos","position":"org.apache.commons.codec.binary.Base64:371","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2},{"failures":[40],"tindex":"b1ceadcc-16e6-11e6-9e53-2f5270fee09b","series":0,"name":"add","transplant":{"toString":"result.append('K', 'J')","position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:619","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[41,42,43],"tindex":"b1ceadcd-16e6-11e6-9e53-8d06a18b1db6","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:469","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:489","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer)"},"status":-1},{"failures":[46,69,47,48,49,50,51,70,52],"tindex":"b1ceadce-16e6-11e6-9e53-eb8d2c4e9d65","series":0,"name":"replace","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return passwd.toString()","position":"org.apache.commons.codec.digest.Md5Crypt:300","type":"CtReturnImpl","sourcecode":"return passwd.toString()"},"status":-1},{"failures":[38,39],"tindex":"b1ced4df-16e6-11e6-9e53-e994d0af7622","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"c = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:356","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[],"tindex":"b1ced4e0-16e6-11e6-9e53-adfa6683e208","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] branches = soundex(source, true)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"variableMap":{"source":"line"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] parts = line.split(\"\\\\s+\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:302","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\")"},"status":-2},{"failures":[],"tindex":"b1ced4e1-16e6-11e6-9e53-7b96e020da17","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.EOF","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"status":-2},{"failures":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"b1ced4e2-16e6-11e6-9e53-7fd9395e9fe4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"key.append(chars[i])","position":"org.apache.commons.codec.language.Nysiis:288","type":"CtInvocationImpl","sourcecode":"key.append(chars[i])"},"status":-1},{"failures":[],"tindex":"b1ced4e3-16e6-11e6-9e53-2f656b378007","series":0,"name":"replace","transplant":{"toString":"return code.toString()","position":"org.apache.commons.codec.language.Metaphone:335","type":"CtReturnImpl","sourcecode":"return code.toString()"},"variableMap":{"code":"result"},"type":"adrStmt","transplantationPoint":{"toString":"return result.substring(1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:463","type":"CtReturnImpl","sourcecode":"return result.substring(1)"},"status":0},{"failures":[],"tindex":"b1ced4e4-16e6-11e6-9e53-6d27a5b6bbe6","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:283","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:486","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer)"},"status":-2},{"failures":[],"tindex":"b1cefbf5-16e6-11e6-9e53-d5006db0d883","series":0,"name":"add","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int minRating = 0","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:185","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[15,17,40],"tindex":"b1cefbf6-16e6-11e6-9e53-7f74e6a83988","series":0,"name":"add","transplant":{"toString":"result.append(\"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:419","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n    result.append('K');\n} else {\n    result.append('X', 'K');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n    result.append('K');\n} else {\n    result.append('X', 'K');\n}"},"status":-1},{"failures":[88,89,90,91],"tindex":"b1cefbf7-16e6-11e6-9e53-47fea6335fa3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:762","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"variableMap":{"data":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"failures":[],"tindex":"b1cefbf8-16e6-11e6-9e53-af9db1cc8dc0","series":0,"name":"replace","transplant":{"toString":"len--","position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"len--"},"variableMap":{"len":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:292","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[38,92,93,39],"tindex":"b1cefbf9-16e6-11e6-9e53-75190eb39f52","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.COV2CHAR[c])));\n}","position":"org.apache.commons.codec.digest.UnixCrypt:237","type":"CtForImpl","sourcecode":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n}"},"status":-1},{"failures":[94,95],"tindex":"b1cf230a-16e6-11e6-9e53-737dfa238e37","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())","position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"status":-1},{"failures":[],"tindex":"b1cf230b-16e6-11e6-9e53-c5b2bfdac628","series":0,"name":"replace","transplant":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"variableMap":{"result":"this"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Collections.sort(ruleList, new java.util.Comparator<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>() {\n    @java.lang.Override\n    public int compare(final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule1, final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule2) {\n        return (rule2.getPatternLength()) - (rule1.getPatternLength());\n    }\n})","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:241","type":"CtInvocationImpl","sourcecode":"java.util.Collections.sort(ruleList, new java.util.Comparator<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>() {\n    @java.lang.Override\n    public int compare(final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule1, final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule2) {\n        return (rule2.getPatternLength()) - (rule1.getPatternLength());\n    }\n})"},"status":-2},{"failures":[],"tindex":"b1cf230c-16e6-11e6-9e53-af2125528148","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('*')","position":"org.apache.commons.codec.net.QCodec:75","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('*')"},"status":0},{"failures":[96,97,98,99,100,101,102,94,103,95,104,105,106,107],"tindex":"b1cf230d-16e6-11e6-9e53-0f9bc2371da2","series":0,"name":"replace","transplant":{"toString":"return 0","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"status":-1},{"failures":[18,21,22,23,24,25],"tindex":"b1cf4a1e-16e6-11e6-9e53-41b1f9ff1986","series":0,"name":"replace","transplant":{"toString":"final java.lang.String before = ph.substring(0, open)","position":"org.apache.commons.codec.language.bm.Rule:371","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(0, open)"},"variableMap":{"ph":"ph","open":"open"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String in = ph.substring((open + 1), ((ph.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:372","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1))"},"status":-1},{"failures":[108,109,110,111,112,113,114,115],"tindex":"b1cf4a1f-16e6-11e6-9e53-6580608f4af1","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"while (read > (-1)) {\n    mac.update(buffer, 0, read);\n    read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH);\n}","position":"org.apache.commons.codec.digest.HmacUtils:769","type":"CtWhileImpl","sourcecode":"while (read > (-1)) {\n    mac.update(buffer, 0, read);\n    read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int);\n}"},"status":-1},{"failures":[116],"tindex":"b1cf4a20-16e6-11e6-9e53-25e290d32beb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.append('J')","position":"org.apache.commons.codec.language.Metaphone:238","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"status":-1},{"failures":[],"tindex":"b1cf4a21-16e6-11e6-9e53-8d914c599b4b","series":0,"name":"replace","transplant":{"toString":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} ","position":"org.apache.commons.codec.language.Nysiis:304","type":"CtIfImpl","sourcecode":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} "},"variableMap":{"last2Char":"c","lastChar":"c","key":"string"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index > 0) && (index < (string.length()))) {\n    matches = (string.charAt((index - 1))) == c;\n} ","position":"org.apache.commons.codec.language.Metaphone:344","type":"CtIfImpl","sourcecode":"if ((index > 0) && (index < (string.length()))) {\n    matches = (string.charAt((index - 1))) == c;\n} "},"status":-2},{"failures":[],"tindex":"b1cf4a22-16e6-11e6-9e53-8f37d7e9bcf1","series":0,"name":"replace","transplant":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"toString":"return length","position":"org.apache.commons.codec.language.ColognePhonetic:219","type":"CtReturnImpl","sourcecode":"return int"},"status":-3},{"failures":[],"tindex":"b1cf7133-16e6-11e6-9e53-07f59c0078c1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.folding = folding","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"status":-2},{"failures":[117,118],"tindex":"b1cf7134-16e6-11e6-9e53-1b543a9d95f0","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.BCodec:178","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"b1cf7135-16e6-11e6-9e53-c7122cbb7a03","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"j\", \"y\")","position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
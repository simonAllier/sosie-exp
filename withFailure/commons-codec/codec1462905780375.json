{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":49,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":12,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":69,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":5,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":18,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":67,"org.apache.commons.codec.language.NysiisTest.testDropBy":78,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":7,"org.apache.commons.codec.binary.Base64Test.testBase64":48,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":82,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":62,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":61,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":76,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":15,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":13,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":16,"org.apache.commons.codec.binary.Base64Test.testUUID":33,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":29,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":42,"org.apache.commons.codec.binary.Base64Test.testSingletons":46,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":54,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":72,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":56,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":74,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":58,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":70,"org.apache.commons.codec.binary.Base64Test.testPairs":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":73,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":41,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":55,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":50,"org.apache.commons.codec.language.NysiisTest.testRule6":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":17,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":68,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":36,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":31,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":37,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":26,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":40,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":11,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":38,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":65,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":39,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":71,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":66,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":59,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":22,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":44,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":51,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":24,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":14,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":8,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":27,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":20,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":52,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":57,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":3,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":60,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":35,"org.apache.commons.codec.language.NysiisTest.testOthers":79,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":47,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":83,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":53,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":9,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":64,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":25,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":34,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":75},"transformations":[{"failures":[],"tindex":"054f9b7c-16df-11e6-8fc1-238eb66aaeb7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"))","position":"org.apache.commons.codec.net.URLCodec:342","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"))"},"status":-2},{"failures":[],"tindex":"054fc28d-16df-11e6-8fc1-e10c78aaf67c","series":0,"name":"replace","transplant":{"toString":"final boolean useChunking = (lineLength > 0) && (chunkSeparatorLength > 0)","position":"org.apache.commons.codec.binary.BaseNCodec:208","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (lineLength > 0) && (chunkSeparatorLength > 0)"},"variableMap":{"chunkSeparatorLength":"org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH","lineLength":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"boolean encode = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 5)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:306","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)))"},"status":-2},{"failures":[0,1],"tindex":"054fc28e-16df-11e6-8fc1-9dbd29198671","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('J', 'H')","position":"org.apache.commons.codec.language.DoubleMetaphone:522","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12],"tindex":"054fc28f-16df-11e6-8fc1-25e9fa7dc396","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((cachedString) == null) {\n    cachedString = builder.toString();\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:152","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null) {\n    java.lang.String = java.lang.StringBuilder.toString();\n} "},"status":-1},{"failures":[],"tindex":"054fc290-16df-11e6-8fc1-11fd3cdb61f6","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Nysiis:214","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.net.QCodec:289","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[13,14,15,16,17,18,19,20],"tindex":"054fe9a1-16df-11e6-8fc1-6164eb56f961","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:362","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}"},"status":-1},{"failures":[21],"tindex":"054fe9a2-16df-11e6-8fc1-87f418754c48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"status":-1},{"failures":[22,23,0],"tindex":"054fe9a3-16df-11e6-8fc1-27b656cb5d65","series":0,"name":"replace","transplant":{"toString":"code.append('0')","position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:981","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[15],"tindex":"055010b4-16df-11e6-8fc1-bda63668de6c","series":0,"name":"replace","transplant":{"toString":"for (java.lang.String lang : languages) {\n    if (sl.languages.contains(lang)) {\n        ls.add(lang);\n    } \n}","position":"org.apache.commons.codec.language.bm.Languages:123","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n    if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n        ls.add(lang);\n    } \n}"},"variableMap":{"languages":"languages","ls":"ls","sl":"sl"},"type":"adrStmt","transplantationPoint":{"toString":"for (java.lang.String lang : sl.languages) {\n    ls.add(lang);\n}","position":"org.apache.commons.codec.language.bm.Languages:141","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n    ls.add(lang);\n}"},"status":-1},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"tindex":"055010b5-16df-11e6-8fc1-93732efbdb9e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-1},{"failures":[],"tindex":"055010b6-16df-11e6-8fc1-03f202b6e450","series":0,"name":"add","transplant":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char current","position":"org.apache.commons.codec.language.RefinedSoundex:187","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[67],"tindex":"055037c7-16df-11e6-8fc1-ffac23c11085","series":0,"name":"replace","transplant":{"toString":"return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw))","position":"org.apache.commons.codec.binary.BinaryCodec:299","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw))"},"variableMap":{"raw":"pArray"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray))","position":"org.apache.commons.codec.binary.BaseNCodec:350","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray))"},"status":-1},{"failures":[],"tindex":"055037c8-16df-11e6-8fc1-f17b030e5192","series":0,"name":"replace","transplant":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((value.length()) <= addChars) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value);\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value.substring(0, addChars));\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:980","type":"CtIfImpl","sourcecode":"if ((value.length()) <= addChars) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n}"},"status":-2},{"failures":[68,69,70,71,72],"tindex":"055037c9-16df-11e6-8fc1-0361fc1d59c4","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (array == null) || ((array.length) == 0)","position":"org.apache.commons.codec.binary.BinaryCodec:226","type":"CtReturnImpl","sourcecode":"return (array == null) || ((array.int) == 0)"},"status":-1},{"failures":[],"tindex":"05505eda-16df-11e6-8fc1-1928dccc6db8","series":0,"name":"replace","transplant":{"toString":"final java.lang.String pattern = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:308","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String lastPart = parts[((parts.length) - 1)]","position":"org.apache.commons.codec.language.bm.PhoneticEngine:434","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = parts[((parts.int) - 1)]"},"status":-2},{"failures":[73],"tindex":"05505edb-16df-11e6-8fc1-7dc128ef39d1","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)))","position":"org.apache.commons.codec.binary.BinaryCodec:120","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)))"},"variableMap":{"ascii":"pObject"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(pObject)))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:114","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(pObject)))"},"status":-1},{"failures":[],"tindex":"05505edc-16df-11e6-8fc1-3920795707d1","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2))","position":"org.apache.commons.codec.language.Caverphone:102","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2))"},"variableMap":{"str1":"text1","str2":"text2"},"type":"adrStmt","transplantationPoint":{"toString":"return colognePhonetic(text1).equals(colognePhonetic(text2))","position":"org.apache.commons.codec.language.ColognePhonetic:422","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text1).equals(colognePhonetic(text2))"},"status":-2},{"failures":[],"tindex":"05505edd-16df-11e6-8fc1-9f7660339d3a","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"target"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String element : criteria) {\n    if (target.equals(element)) {\n        result = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.DoubleMetaphone:921","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : criteria) {\n    if (target.equals(element)) {\n        result = true;\n        break;\n    } \n}"},"status":-2},{"failures":[74],"tindex":"055085ee-16df-11e6-8fc1-2f8d938615ff","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:285","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-1},{"failures":[75,76],"tindex":"055085ef-16df-11e6-8fc1-23a4d276ef5c","series":0,"name":"replace","transplant":{"toString":"int index1 = thisStart","position":"org.apache.commons.codec.binary.CharSequenceUtils:54","type":"CtLocalVariableImpl","sourcecode":"int int = thisStart"},"variableMap":{"thisStart":"offset"},"type":"adrStmt","transplantationPoint":{"toString":"int value = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])","position":"org.apache.commons.codec.digest.UnixCrypt:385","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])"},"status":-1},{"failures":[77,78,79],"tindex":"055085f0-16df-11e6-8fc1-5f861cc9da33","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((key.length()) > 2) {\n    final char last2Char = key.charAt(((key.length()) - 2));\n    if ((last2Char == 'A') && (lastChar == 'Y')) {\n        key.deleteCharAt(((key.length()) - 2));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:301","type":"CtIfImpl","sourcecode":"if ((key.length()) > 2) {\n    final char char = key.charAt(((key.length()) - 2));\n    if ((last2Char == 'A') && (lastChar == 'Y')) {\n        key.deleteCharAt(((key.length()) - 2));\n    } \n} "},"status":-1},{"failures":[],"tindex":"0550ad01-16df-11e6-8fc1-978faeece4e6","series":0,"name":"replace","transplant":{"toString":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} ","position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"variableMap":{"code":"key"},"type":"adrStmt","transplantationPoint":{"toString":"if ((key.length()) > 2) {\n    final char last2Char = key.charAt(((key.length()) - 2));\n    if ((last2Char == 'A') && (lastChar == 'Y')) {\n        key.deleteCharAt(((key.length()) - 2));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:301","type":"CtIfImpl","sourcecode":"if ((key.length()) > 2) {\n    final char char = key.charAt(((key.length()) - 2));\n    if ((last2Char == 'A') && (lastChar == 'Y')) {\n        key.deleteCharAt(((key.length()) - 2));\n    } \n} "},"status":-2},{"failures":[],"tindex":"0550ad02-16df-11e6-8fc1-f9b5a9b77d7f","series":0,"name":"add","transplant":{"toString":"hard = false","position":"org.apache.commons.codec.language.Metaphone:233","type":"CtAssignmentImpl","sourcecode":"hard = false"},"variableMap":{"hard":"accept"},"type":"adrStmt","transplantationPoint":{"toString":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))","position":"org.apache.commons.codec.language.bm.Lang:177","type":"CtInvocationImpl","sourcecode":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))"},"status":-2},{"failures":[80,81,82,83,22,23,0,1],"tindex":"0550ad03-16df-11e6-8fc1-6ba72e857ef4","series":0,"name":"replace","transplant":{"toString":"ii -= 16","position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"ii -= 16"},"variableMap":{"ii":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:574","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"0550ad04-16df-11e6-8fc1-e10259bb509a","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")","position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"0550d415-16df-11e6-8fc1-0bab6c28dded","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"result.append('A', 'F')","position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":26,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
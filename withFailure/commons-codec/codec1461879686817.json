{"failureDictionary":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":30,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":38,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":37,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":63,"org.apache.commons.codec.binary.Base64Test.testBase64":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":28,"org.apache.commons.codec.binary.Base64Test.testTriplets":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":62,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":55,"org.apache.commons.codec.binary.Base64Test.testUUID":10,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":53,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":56,"org.apache.commons.codec.binary.Base64Test.testSingletons":18,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":27,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":47,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":21,"org.apache.commons.codec.binary.Base64Test.testPairs":9,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":15,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":22,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":24,"org.apache.commons.codec.binary.Base64Test.testCodec112":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":58,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":45,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":65,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":57,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":32,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":12,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":13,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":29,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":19,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":50,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":52,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":54,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":40,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":48,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":26,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":3,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":25,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":35,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":44,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":20,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":5,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":33,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":41,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":59,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":11,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":4},"transformations":[{"failures":[],"tindex":"f5e47741-0d89-11e6-9560-6fa3664acfc1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:96","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-3},{"failures":[],"tindex":"f5e49e52-0d89-11e6-9560-d729dd3908c1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:71","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('&')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"status":0},{"failures":[],"tindex":"f5e49e53-0d89-11e6-9560-c9832fcf722c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:124","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear()"},"variableMap":{"phonemes":"newPhonemes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:109","type":"CtForEachImpl","sourcecode":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}"},"status":-3},{"failures":[],"tindex":"f5e49e54-0d89-11e6-9560-ff819f88566e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtIfImpl","sourcecode":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"f5e49e55-0d89-11e6-9560-43b4b58b8b27","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:287","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"tindex":"f5e4c566-0d89-11e6-9560-b9a2c1782463","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:295","type":"CtInvocationImpl","sourcecode":"ctx1.reset()"},"variableMap":{"ctx1":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:371","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"f5e4c567-0d89-11e6-9560-2140d5a3191f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"org.apache.commons.codec.binary.Base64.MASK_6BITS","l_ascii":"encodeTable","bits":"org.apache.commons.codec.binary.Base64.MASK_6BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:351","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-1},{"failures":[],"tindex":"f5e4c568-0d89-11e6-9560-8b65e870b77d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:222","type":"CtReturnImpl","sourcecode":"return (context.byte[]) != null"},"status":-2},{"failures":[],"tindex":"f5e4c569-0d89-11e6-9560-f992c71d6897","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:167","type":"CtReturnImpl","sourcecode":"return soundex(str)"},"status":-2},{"failures":[],"tindex":"f5e4ec7a-0d89-11e6-9560-233ec6a47a5a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:72","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-3},{"failures":[],"tindex":"f5e4ec7b-0d89-11e6-9560-b90cb52fe70f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:472","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"encodeTable","pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:509","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"f5e4ec7c-0d89-11e6-9560-f7eded381524","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:104","type":"CtCaseImpl","sourcecode":"case 'Y' :\n    index = handleAEIOUY(result, index);\n    break;"},"status":-3},{"failures":[34,35,36,37,38,39,40,41,42],"tindex":"f5e4ec7d-0d89-11e6-9560-47f8c6606114","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:260","type":"CtIfImpl","sourcecode":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        inMultilineComment = false;\n    } \n    continue;\n} "},"variableMap":{"line":"location","inMultilineComment":"inMultilineComment","org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    inMultilineComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.contains(\"=\")) {\n        final java.lang.String[] java.lang.String[] = line.split(\"=\");\n        if ((parts.int) != 2) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            final java.lang.String java.lang.String = parts[0];\n            final java.lang.String java.lang.String = parts[1];\n            if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n            } \n            asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                final char char = r.java.lang.String.charAt(0);\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                    ruleMapping.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"f5e5138e-0d89-11e6-9560-27f7ba5416f8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:116","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[43,8,9,10,11,44,45,46,12,13,14,15,47,16,48,18,19,20,21,49,23,24,25,26,27,28,29,32,33,50,51,52],"tindex":"f5e5138f-0d89-11e6-9560-a9402d92d361","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"binaryData","key":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:640","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int)"},"status":-1},{"failures":[],"tindex":"f5e53aa0-0d89-11e6-9560-0f398bf74130","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} "},"variableMap":{"sb":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtIfImpl","sourcecode":"if ((inwd[1]) == 'H') {\n    local.append(inwd, 1, ((inwd.int) - 1));\n    local.setCharAt(0, 'W');\n} else {\n    local.append(inwd);\n}"},"status":-2},{"failures":[],"tindex":"f5e53aa1-0d89-11e6-9560-ab5a34e30efc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:133","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:236","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"f5e53aa2-0d89-11e6-9560-3f2709f2cb5c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"variableMap":{"c":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:478","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[],"tindex":"f5e53aa3-0d89-11e6-9560-3fb5364f596e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n    return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"f5e561b4-0d89-11e6-9560-91fc52423e57","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:222","type":"CtLocalVariableImpl","sourcecode":"int int = keyBytes.int"},"variableMap":{"keyBytes":"bytes","length":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:173","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"status":-3},{"failures":[],"tindex":"f5e561b5-0d89-11e6-9560-9fcbfec2c09f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:371","type":"CtIfImpl","sourcecode":"if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-2},{"failures":[],"tindex":"f5e561b6-0d89-11e6-9560-4d82e004f826","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"status":0},{"failures":[],"tindex":"f5e561b7-0d89-11e6-9560-a723e8588c7d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:72","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\'')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:103","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('~')"},"status":0},{"failures":[],"tindex":"f5e588c8-0d89-11e6-9560-4ddd3a863c42","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[],"tindex":"f5e588c9-0d89-11e6-9560-6f048ed5742c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += len"},"variableMap":{"len":"pos","context":"context","readPos":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:383","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":-2},{"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66],"tindex":"f5e588ca-0d89-11e6-9560-1f3e8b859d7a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:706","type":"CtIfImpl","sourcecode":"if (ipl > (input.length())) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"f5e588cb-0d89-11e6-9560-577eedd88a15","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:250","type":"CtReturnImpl","sourcecode":"return encode(str, getCharset())"},"status":-3},{"failures":[],"tindex":"f5e588cc-0d89-11e6-9560-3f6214e08dc7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:503","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":28,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":50,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":27,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":69,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":75,"org.apache.commons.codec.language.NysiisTest.testSnat":61,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":8,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":20,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":28,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":45,"org.apache.commons.codec.language.NysiisTest.testDropBy":62,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":33,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":24,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":82,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":19,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":72,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":71,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":39,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":51,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":22,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":86,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":80,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":17,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":34,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":58,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":68,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":26,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":77,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":43,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":12,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":67,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":78,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":14,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":47,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":48,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":18,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":40,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":59,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":81,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":3,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":63,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":64,"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull":41,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":57,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":37,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":88,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":85,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":9,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":83,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":56,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":36,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":44,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":76,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":0,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":89,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":23,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":74,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":16,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":90,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":92,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":65,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":29,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":66,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":79,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":4,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":55,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":42,"org.apache.commons.codec.digest.B64Test.testB64from24bit":84,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":30,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":25,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":54,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":91,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":21,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":35,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":73,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":31,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":7,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":15,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":87,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":49,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":32,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":52,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":38},"transformations":[{"failures":[],"tindex":"d3c5bac9-16ed-11e6-b256-e313f8ecb002","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2))","position":"org.apache.commons.codec.language.Caverphone:102","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2))"},"variableMap":{"str1":"base64","str2":"base64"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64))","position":"org.apache.commons.codec.binary.Base64:524","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64))"},"status":-2},{"failures":[],"tindex":"d3c608ea-16ed-11e6-b256-af8df918eda8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"status":-2},{"failures":[],"tindex":"d3c608eb-16ed-11e6-b256-99ce682596be","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.BCodec:144","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"variableMap":{"e":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"))","position":"org.apache.commons.codec.net.QCodec:291","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"))"},"status":-2},{"failures":[0,1,2],"tindex":"d3c608ec-16ed-11e6-b256-370c17fea433","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n    result.append(\"KN\", \"N\");\n} else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n    result.append(\"N\", \"KN\");\n} else {\n    result.append(\"KN\");\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:413","type":"CtIfImpl","sourcecode":"if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n    result.append(\"KN\", \"N\");\n} else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n    result.append(\"N\", \"KN\");\n} else {\n    result.append(\"KN\");\n}"},"status":-1},{"failures":[],"tindex":"d3c62ffd-16ed-11e6-b256-ed938e707322","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (negate) {\n    boxContent = boxContent.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtIfImpl","sourcecode":"if (negate) {\n    boxContent = boxContent.substring(1);\n} "},"status":0},{"failures":[],"tindex":"d3c62ffe-16ed-11e6-b256-7bd6d5eaf084","series":0,"name":"add","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))","position":"org.apache.commons.codec.digest.DigestUtils:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"status":-2},{"failures":[],"tindex":"d3c6570f-16ed-11e6-b256-939be464a8b4","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:638","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[3,4],"tindex":"d3c65710-16ed-11e6-b256-cd52126aeb59","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))","position":"org.apache.commons.codec.digest.DigestUtils:688","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)","position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)"},"status":-1},{"failures":[5,6],"tindex":"d3c65711-16ed-11e6-b256-4d5ec25cfb35","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.ASHKENAZI, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:238","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))"},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"d3c67e22-16ed-11e6-b256-9380f0279006","series":0,"name":"replace","transplant":{"toString":"int index1 = thisStart","position":"org.apache.commons.codec.binary.CharSequenceUtils:54","type":"CtLocalVariableImpl","sourcecode":"int int = thisStart"},"variableMap":{"thisStart":"i"},"type":"adrStmt","transplantationPoint":{"toString":"final int b = bytes[i]","position":"org.apache.commons.codec.net.QuotedPrintableCodec:358","type":"CtLocalVariableImpl","sourcecode":"final int int = bytes[i]"},"status":-1},{"failures":[],"tindex":"d3c67e23-16ed-11e6-b256-1d4beae36f05","series":0,"name":"replace","transplant":{"toString":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"variableMap":{"b":"key","offset":"i","iValue":"i"},"type":"adrStmt","transplantationPoint":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"status":0},{"failures":[22,23,5,6,24],"tindex":"d3c67e24-16ed-11e6-b256-878bdab05cd4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.clear()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:124","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear()"},"status":-1},{"failures":[],"tindex":"d3c6a535-16ed-11e6-b256-993286d89e61","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"patternKey"},"type":"adrStmt","transplantationPoint":{"toString":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n    lines.put(patternKey, rules);\n} ","position":"org.apache.commons.codec.language.bm.Rule:474","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n    lines.put(patternKey, rules);\n} "},"status":-2},{"failures":[25,26,27],"tindex":"d3c6a536-16ed-11e6-b256-71a322afb5e6","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return doubleMetaphone(value, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"status":-1},{"failures":[28,29,30],"tindex":"d3c6cc47-16ed-11e6-b256-4191397c35f2","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:482","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer)"},"status":-1},{"failures":[1,2],"tindex":"d3c6cc48-16ed-11e6-b256-fff6e6154dd3","series":0,"name":"replace","transplant":{"toString":"result.append('A', 'F')","position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:688","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"d3c6cc49-16ed-11e6-b256-13f9a93460bb","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (doEncode) {\n    baseNCodec.encode(b, offset, len, context);\n} else {\n    baseNCodec.decode(b, offset, len, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:92","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[31,32,33,34],"tindex":"d3c6f35a-16ed-11e6-b256-8102f28a84c6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += (context.pos) - savedPos","position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-1},{"failures":[],"tindex":"d3c6f35b-16ed-11e6-b256-4fd39f21d198","series":0,"name":"replace","transplant":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"text"},"type":"adrStmt","transplantationPoint":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"d3c71a6c-16ed-11e6-b256-632728a4fd0b","series":0,"name":"add","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:517","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}"},"variableMap":{"input":"input","this":"this","content":"this"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    if ((content.length()) == 0) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return (input.length()) == 0;\n            }\n        };\n    } else {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return input.equals(content);\n            }\n        };\n    }\n} else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n    return org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER;\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:506","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    if ((content.length()) == 0) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return (input.length()) == 0;\n            }\n        };\n    } else {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return input.equals(content);\n            }\n        };\n    }\n} else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    };\n} "},"status":0},{"failures":[],"tindex":"d3c7688d-16ed-11e6-b256-85efc2dbb370","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n    return \"\";\n} ","position":"org.apache.commons.codec.language.Metaphone:95","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n    return \"\";\n} "},"status":-2},{"failures":[0,27,1,2],"tindex":"d3c7688e-16ed-11e6-b256-e38b251b6445","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n    result.append(\"KS\");\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:744","type":"CtIfImpl","sourcecode":"if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n    result.append(\"KS\");\n} "},"status":-1},{"failures":[],"tindex":"d3c7688f-16ed-11e6-b256-8d1cc701c664","series":0,"name":"replace","transplant":{"toString":"final int ipl = i + patternLength","position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = i + patternLength"},"variableMap":{"patternLength":"outLen","i":"outLen"},"type":"adrStmt","transplantationPoint":{"toString":"int n = outLen","position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"status":-2},{"failures":[],"tindex":"d3c78fa0-16ed-11e6-b256-d166383aea1d","series":0,"name":"replace","transplant":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:138","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"d3c78fa1-16ed-11e6-b256-4150a3d5a6d3","series":0,"name":"add","transplant":{"toString":"c &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"length"},"type":"adrStmt","transplantationPoint":{"toString":"(length)++","position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":0},{"failures":[],"tindex":"d3c78fa2-16ed-11e6-b256-b9a3deb4a9a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('<')","position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"status":0},{"failures":[],"tindex":"d3c7b6b3-16ed-11e6-b256-096d840b32d7","series":0,"name":"replace","transplant":{"toString":"urlsafe = org.apache.commons.codec.net.URLCodec.WWW_FORM_URL","position":"org.apache.commons.codec.net.URLCodec:126","type":"CtAssignmentImpl","sourcecode":"urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet"},"variableMap":{"urlsafe":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS","position":"org.apache.commons.codec.net.QuotedPrintableCodec:278","type":"CtAssignmentImpl","sourcecode":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet"},"status":-2},{"failures":[],"tindex":"d3c7b6b4-16ed-11e6-b256-9d29b6b36962","series":0,"name":"replace","transplant":{"toString":"name2 = removeDoubleConsonants(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"variableMap":{"name2":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"wh3\", \"Wh3\")","position":"org.apache.commons.codec.language.Caverphone1:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":-2},{"failures":[],"tindex":"d3c7b6b5-16ed-11e6-b256-95a271c52155","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int eSwap0 = org.apache.commons.codec.digest.UnixCrypt.CON_SALT[charZero]","position":"org.apache.commons.codec.digest.UnixCrypt:213","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero]"},"status":-2},{"failures":[],"tindex":"d3c7b6b6-16ed-11e6-b256-e7192a99982c","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] charsToTrim = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] langs = parts[1].split(\"\\\\+\")","position":"org.apache.commons.codec.language.bm.Lang:174","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\")"},"status":-2},{"failures":[12,14,35,36,37],"tindex":"d3c7ddc7-16ed-11e6-b256-611d60d5d2ac","series":0,"name":"replace","transplant":{"toString":"cp = 0","position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"variableMap":{"cp":"b"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:321","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)"},"status":-1},{"failures":[],"tindex":"d3c7ddc8-16ed-11e6-b256-abbefa21fa9b","series":0,"name":"replace","transplant":{"toString":"final int nameLength = name.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:160","type":"CtLocalVariableImpl","sourcecode":"final int int = name.length()"},"variableMap":{"name":"str"},"type":"adrStmt","transplantationPoint":{"toString":"final int len = str.length()","position":"org.apache.commons.codec.language.SoundexUtils:45","type":"CtLocalVariableImpl","sourcecode":"final int int = str.length()"},"status":-3},{"failures":[],"tindex":"d3c7ddc9-16ed-11e6-b256-f5ecc23ae380","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"c","to":"u"},"type":"adrStmt","transplantationPoint":{"toString":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"status":-2},{"failures":[38,39],"tindex":"d3c7ddca-16ed-11e6-b256-f1adf1cdf9eb","series":0,"name":"replace","transplant":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:321","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"variableMap":{"index":"right"},"type":"adrStmt","transplantationPoint":{"toString":"left = right","position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"status":-1},{"failures":[],"tindex":"d3c804db-16ed-11e6-b256-7d6aac4fac41","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(']')","position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"printable"},"type":"adrStmt","transplantationPoint":{"toString":"if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)) {\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n    pos = 1;\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:288","type":"CtIfImpl","sourcecode":"if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    pos = 1;\n}"},"status":-3},{"failures":[40],"tindex":"d3c804dc-16ed-11e6-b256-d5192bbea427","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"f+\", \"F\")","position":"org.apache.commons.codec.language.Caverphone2:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"status":-1},{"failures":[],"tindex":"d3c804dd-16ed-11e6-b256-13b28964531d","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"status":-2},{"failures":[],"tindex":"d3c804de-16ed-11e6-b256-9d6b3976eac8","series":0,"name":"add","transplant":{"toString":"d = (d >>> 1) | (d << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"variableMap":{"d":"e1"},"type":"adrStmt","transplantationPoint":{"toString":"v &= e1","position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"status":-2},{"failures":[],"tindex":"d3c804df-16ed-11e6-b256-97ce685d073b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"status":0},{"failures":[41,42],"tindex":"d3c82bf0-16ed-11e6-b256-af8880e21b9a","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.BCodec:178","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"d3c82bf1-16ed-11e6-b256-2fa144d9021c","series":0,"name":"add","transplant":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:321","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"variableMap":{"index":"savedPos"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += (context.pos) - savedPos","position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2},{"failures":[43,44],"tindex":"d3c82bf2-16ed-11e6-b256-13b46fb6d4e3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)","position":"org.apache.commons.codec.net.BCodec:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)"},"variableMap":{"bytes":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"status":-1},{"failures":[45,0,27,1,2],"tindex":"d3c82bf3-16ed-11e6-b256-970ec8195491","series":0,"name":"replace","transplant":{"toString":"result.append('R')","position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('P')","position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"status":-1},{"failures":[46],"tindex":"d3c82bf4-16ed-11e6-b256-f98a05fd0446","series":0,"name":"replace","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (rule2.getPatternLength()) - (rule1.getPatternLength())","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:244","type":"CtReturnImpl","sourcecode":"return (rule2.getPatternLength()) - (rule1.getPatternLength())"},"status":-1},{"failures":[1,2],"tindex":"d3c82bf5-16ed-11e6-b256-bd60d8bbaa88","series":0,"name":"add","transplant":{"toString":"result.append(\"N\", \"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"status":-1},{"failures":[47,48,49,50],"tindex":"d3c85306-16ed-11e6-b256-d5eff9a0a898","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"2\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"status":-1},{"failures":[],"tindex":"d3c85307-16ed-11e6-b256-afb7095724d8","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))","position":"org.apache.commons.codec.binary.Base64:595","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))"},"variableMap":{"binaryData":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null)","position":"org.apache.commons.codec.digest.Crypt:46","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null)"},"status":-2},{"failures":[51,28,29,30,52,53,54,55],"tindex":"d3c85308-16ed-11e6-b256-c907e870d4e4","series":0,"name":"add","transplant":{"toString":"a ^= t << n","position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"variableMap":{"a":"cnt","t":"cnt","n":"cnt"},"type":"adrStmt","transplantationPoint":{"toString":"cnt >>= 1","position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"status":-1},{"failures":[],"tindex":"d3c85309-16ed-11e6-b256-1984888edf72","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('_')","position":"org.apache.commons.codec.net.URLCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('_')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('>')","position":"org.apache.commons.codec.net.QCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('>')"},"status":-2},{"failures":[],"tindex":"d3c8530a-16ed-11e6-b256-1dd6946efd16","series":0,"name":"replace","transplant":{"toString":"this.strict = strict","position":"org.apache.commons.codec.language.Nysiis:193","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"variableMap":{"strict":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"toString":"inMultilineComment = false","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:262","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"status":-2},{"failures":[],"tindex":"d3c87a1b-16ed-11e6-b256-3ff8b72919b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:294","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[],"tindex":"d3c87a1c-16ed-11e6-b256-3920dea9886f","series":0,"name":"add","transplant":{"toString":"final java.lang.String rawLine = scanner.nextLine()","position":"org.apache.commons.codec.language.bm.Lang:141","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = scanner.nextLine()"},"variableMap":{"scanner":"lsScanner"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String line = lsScanner.nextLine().trim()","position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = lsScanner.nextLine().trim()"},"status":-2},{"failures":[],"tindex":"d3c87a1d-16ed-11e6-b256-b18c34e4dd8b","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:413","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[],"tindex":"d3c87a1e-16ed-11e6-b256-2d76369f6e0a","series":0,"name":"add","transplant":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")","position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"status":-2},{"failures":[56],"tindex":"d3c87a1f-16ed-11e6-b256-4558e131d580","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))","position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"variableMap":{"raw":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.net.URLCodec:315","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-1},{"failures":[],"tindex":"d3c8a130-16ed-11e6-b256-0949d785b73b","series":0,"name":"replace","transplant":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"variableMap":{"key":"passwd"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:288","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)"},"status":-2},{"failures":[57,58,59],"tindex":"d3c8a131-16ed-11e6-b256-751a317e3786","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)"},"variableMap":{"data":"l_raw"},"type":"adrStmt","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-1},{"failures":[],"tindex":"d3c8a132-16ed-11e6-b256-95723f32c74b","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"r$\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r$\", \"3\")"},"variableMap":{"txt":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)])","position":"org.apache.commons.codec.digest.UnixCrypt:202","type":"CtAssignmentImpl","sourcecode":"salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])"},"status":-2},{"failures":[],"tindex":"d3c8a133-16ed-11e6-b256-45bd0a101c77","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^gn\", \"2n\")","position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^tough\", \"tou2f\")","position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"status":0},{"failures":[60,0,27,1,2],"tindex":"d3c8c844-16ed-11e6-b256-ed02ee6290a2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (target.equals(element)) {\n    result = true;\n    break;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtIfImpl","sourcecode":"if (target.equals(element)) {\n    result = true;\n    break;\n} "},"status":-1},{"failures":[61,62,63],"tindex":"d3c8c845-16ed-11e6-b256-99e80dec2013","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"status":-1},{"failures":[64],"tindex":"d3c8c846-16ed-11e6-b256-f595198ae10a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"status":-1},{"failures":[],"tindex":"d3c8c847-16ed-11e6-b256-1dfc32656695","series":0,"name":"add","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"saltLen","to":"saltLen"},"type":"adrStmt","transplantationPoint":{"toString":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} "},"status":-2},{"failures":[],"tindex":"d3c8c848-16ed-11e6-b256-b5e2aac9bc2f","series":0,"name":"replace","transplant":{"toString":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l3\", \"L3\")","position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"status":-3},{"failures":[],"tindex":"d3c8ef59-16ed-11e6-b256-f7a199ce077f","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.NameType s : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Languages.LANGUAGES.put(s, org.apache.commons.codec.language.bm.Languages.getInstance(org.apache.commons.codec.language.bm.Languages.langResourceName(s)));\n}","position":"org.apache.commons.codec.language.bm.Languages:160","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Languages>.put(s, org.apache.commons.codec.language.bm.Languages.getInstance(org.apache.commons.codec.language.bm.Languages.langResourceName(s)));\n}"},"status":-2},{"failures":[],"tindex":"d3c8ef5a-16ed-11e6-b256-27a041cc5413","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", pat='\").append(pat).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:465","type":"CtInvocationImpl","sourcecode":"sb.append(\", pat='\").append(pat).append('\\'')"},"status":0},{"failures":[],"tindex":"d3c8ef5b-16ed-11e6-b256-6f7382ffa87f","series":0,"name":"add","transplant":{"toString":"result.append('A')","position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"variableMap":{"result":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Soundex:150","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"d3c8ef5c-16ed-11e6-b256-ddb976f52c35","series":0,"name":"replace","transplant":{"toString":"sb.append(\"|\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\"Rule\")","position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"status":0},{"failures":[],"tindex":"d3c8ef5d-16ed-11e6-b256-d5b721209d45","series":0,"name":"replace","transplant":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"variableMap":{"singleByte":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"status":-3},{"failures":[],"tindex":"d3c8ef5e-16ed-11e6-b256-0f6f72c0d1bd","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.this.encodeBlanks = b","position":"org.apache.commons.codec.net.QCodec:356","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.QCodec.this.boolean = b"},"variableMap":{"b":"inMultilineComment","encodeBlanks":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"toString":"inMultilineComment = false","position":"org.apache.commons.codec.language.bm.Rule:414","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"status":-3},{"failures":[],"tindex":"d3c9166f-16ed-11e6-b256-4b185b57b9f6","series":0,"name":"replace","transplant":{"toString":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)) {\n    return false;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:244","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    return false;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"index","name2":"value","name1":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.L_R_N_M_B_H_F_V_W_SPACE)) || ((index + 1) == ((value.length()) - 1))))","position":"org.apache.commons.codec.language.DoubleMetaphone:817","type":"CtReturnImpl","sourcecode":"return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))))"},"status":-3},{"failures":[],"tindex":"d3c91670-16ed-11e6-b256-c1d816e1dc6b","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.CharSequenceUtils:67","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[31,65,32,66,67,68,69,33,70,34,71,72],"tindex":"d3c93d81-16ed-11e6-b256-835a0e5b73ab","series":0,"name":"replace","transplant":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"variableMap":{"i":"org.apache.commons.codec.binary.Base32.MASK_5BITS","key":"encodeTable"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:509","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"d3c93d82-16ed-11e6-b256-bbe23b384b1b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.clear()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:124","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear()"},"variableMap":{"phonemes":"newPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"if ((newPhonemes.size()) >= maxPhonemes) {\n    break EXPR;\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:116","type":"CtIfImpl","sourcecode":"if ((newPhonemes.size()) >= maxPhonemes) {\n    break EXPR;\n} "},"status":-3},{"failures":[8,9,11,12,13,14,15,16],"tindex":"d3c93d83-16ed-11e6-b256-1b45cd51057a","series":0,"name":"replace","transplant":{"toString":"return upperName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"variableMap":{"upperName":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:487","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())"},"status":-1},{"failures":[51,52,53,54,55],"tindex":"d3c93d84-16ed-11e6-b256-9128584a3785","series":0,"name":"replace","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)"},"status":-1},{"failures":[],"tindex":"d3c96495-16ed-11e6-b256-dd77701d552a","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ce\", \"se\")","position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ce\", \"se\")"},"status":0},{"failures":[],"tindex":"d3c96496-16ed-11e6-b256-7f15dbd610b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('`')","position":"org.apache.commons.codec.net.QCodec:96","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('`')"},"status":0},{"failures":[],"tindex":"d3c96497-16ed-11e6-b256-c7553d1eeb00","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:477","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer)"},"variableMap":{"altResult":"finalb","buffer":"passwd"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:283","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd)"},"status":-2},{"failures":[73,74,75,76,77,78,79,80,81,82,83],"tindex":"d3c96498-16ed-11e6-b256-3f9145bef997","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:286","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int)"},"status":-1},{"failures":[],"tindex":"d3c96499-16ed-11e6-b256-79c7c6c02bf2","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:948","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"patternKey"},"type":"adrStmt","transplantationPoint":{"toString":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    ruleMapping.put(patternKey, rules);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:316","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    ruleMapping.put(patternKey, rules);\n} "},"status":-2},{"failures":[51,28,29,30,52,53,54,55,84,85,86,87,88,89,90,91],"tindex":"d3c98baa-16ed-11e6-b256-af166c4f499b","series":0,"name":"replace","transplant":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(org.apache.commons.codec.digest.B64.B64T.charAt((w & 63)))","position":"org.apache.commons.codec.digest.B64:61","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)))"},"status":-1},{"failures":[],"tindex":"d3c98bab-16ed-11e6-b256-f3e1c6657001","series":0,"name":"replace","transplant":{"toString":"this.encodedBlockSize = encodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"variableMap":{"encodedBlockSize":"compareCode"},"type":"adrStmt","transplantationPoint":{"toString":"compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"status":-2},{"failures":[],"tindex":"d3c98bac-16ed-11e6-b256-61dd60fca2b0","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"tempResult"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"status":-3},{"failures":[],"tindex":"d3c98bad-16ed-11e6-b256-a7decdd0086a","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.binary.CharSequenceUtils:77","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"d3c98bae-16ed-11e6-b256-fbf2020d0683","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.CharSequenceUtils:67","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"d3c98baf-16ed-11e6-b256-cf3580a8a730","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int v = r ^ (r >>> 16)","position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"status":-2},{"failures":[92],"tindex":"d3c98bb0-16ed-11e6-b256-13c4af202f07","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name1 = removeDoubleConsonants(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"status":-1},{"failures":[],"tindex":"d3c9b2c1-16ed-11e6-b256-29adc2406988","series":0,"name":"replace","transplant":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"source"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.engine.encode(source)","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(source)"},"status":-2},{"failures":[],"tindex":"d3c9b2c2-16ed-11e6-b256-ef25506ed71c","series":0,"name":"replace","transplant":{"toString":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"decodeSize","tempResult":"decodeTable","pBytes":"decodeTable","keyLen":"length","cp":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (pad)) {\n    context.eof = true;\n    break;\n} else {\n    final byte[] buffer = ensureBufferSize(decodeSize, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.decodeTable.length))) {\n        final int result = org.apache.commons.codec.binary.Base32.this.decodeTable[b];\n        if (result >= 0) {\n            context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK);\n            context.lbitWorkArea = ((context.lbitWorkArea) << (org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE)) + result;\n            if ((context.modulus) == 0) {\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            } \n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base32:347","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n            context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-2},{"failures":[],"tindex":"d3c9d9d3-16ed-11e6-b256-970bdc0ba009","series":0,"name":"replace","transplant":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"org.apache.commons.codec.language.Metaphone.FRONTV"},"type":"adrStmt","transplantationPoint":{"toString":"switch (symb) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (n == 0) {\n            code.append(symb);\n        } \n        break;\n    case 'B' :\n        if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n            break;\n        } \n        code.append(symb);\n        break;\n    case 'C' :\n        if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) {\n            break;\n        } \n        if (regionMatch(local, n, \"CIA\")) {\n            code.append('X');\n            break;\n        } \n        if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) {\n            code.append('S');\n            break;\n        } \n        if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n            code.append('K');\n            break;\n        } \n        if (isNextChar(local, n, 'H')) {\n            if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                code.append('K');\n            } else {\n                code.append('X');\n            }\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 2)))) >= 0)) {\n            code.append('J');\n            n += 2;\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'G' :\n        if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n            break;\n        } \n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n            break;\n        } \n        if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n            break;\n        } \n        if (isPreviousChar(local, n, 'G')) {\n            hard = true;\n        } else {\n            hard = false;\n        }\n        if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.FRONTV.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n            code.append('J');\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'H' :\n        if (isLastChar(wdsz, n)) {\n            break;\n        } \n        if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.VARSON.indexOf(local.charAt((n - 1)))) >= 0)) {\n            break;\n        } \n        if (isVowel(local, (n + 1))) {\n            code.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        code.append(symb);\n        break;\n    case 'K' :\n        if (n > 0) {\n            if (!(isPreviousChar(local, n, 'C'))) {\n                code.append(symb);\n            } \n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'P' :\n        if (isNextChar(local, n, 'H')) {\n            code.append('F');\n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'Q' :\n        code.append('K');\n        break;\n    case 'S' :\n        if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n            code.append('X');\n        } else {\n            code.append('S');\n        }\n        break;\n    case 'T' :\n        if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n            code.append('X');\n            break;\n        } \n        if (regionMatch(local, n, \"TCH\")) {\n            break;\n        } \n        if (regionMatch(local, n, \"TH\")) {\n            code.append('0');\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'V' :\n        code.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n            code.append(symb);\n        } \n        break;\n    case 'X' :\n        code.append('K');\n        code.append('S');\n        break;\n    case 'Z' :\n        code.append('S');\n        break;\n    default :\n        break;\n}","position":"org.apache.commons.codec.language.Metaphone:155","type":"CtSwitchImpl","sourcecode":"switch (symb) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (n == 0) {\n            code.append(symb);\n        } \n        break;\n    case 'B' :\n        if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n            break;\n        } \n        code.append(symb);\n        break;\n    case 'C' :\n        if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n            break;\n        } \n        if (regionMatch(local, n, \"CIA\")) {\n            code.append('X');\n            break;\n        } \n        if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n            code.append('S');\n            break;\n        } \n        if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n            code.append('K');\n            break;\n        } \n        if (isNextChar(local, n, 'H')) {\n            if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                code.append('K');\n            } else {\n                code.append('X');\n            }\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n            code.append('J');\n            n += 2;\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'G' :\n        if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n            break;\n        } \n        if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n            break;\n        } \n        if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n            break;\n        } \n        if (isPreviousChar(local, n, 'G')) {\n            hard = true;\n        } else {\n            hard = false;\n        }\n        if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n            code.append('J');\n        } else {\n            code.append('K');\n        }\n        break;\n    case 'H' :\n        if (isLastChar(wdsz, n)) {\n            break;\n        } \n        if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n            break;\n        } \n        if (isVowel(local, (n + 1))) {\n            code.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        code.append(symb);\n        break;\n    case 'K' :\n        if (n > 0) {\n            if (!(isPreviousChar(local, n, 'C'))) {\n                code.append(symb);\n            } \n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'P' :\n        if (isNextChar(local, n, 'H')) {\n            code.append('F');\n        } else {\n            code.append(symb);\n        }\n        break;\n    case 'Q' :\n        code.append('K');\n        break;\n    case 'S' :\n        if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n            code.append('X');\n        } else {\n            code.append('S');\n        }\n        break;\n    case 'T' :\n        if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n            code.append('X');\n            break;\n        } \n        if (regionMatch(local, n, \"TCH\")) {\n            break;\n        } \n        if (regionMatch(local, n, \"TH\")) {\n            code.append('0');\n        } else {\n            code.append('T');\n        }\n        break;\n    case 'V' :\n        code.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n            code.append(symb);\n        } \n        break;\n    case 'X' :\n        code.append('K');\n        code.append('S');\n        break;\n    case 'Z' :\n        code.append('S');\n        break;\n    default :\n        break;\n}"},"status":-2},{"failures":[],"tindex":"d3cac434-16ed-11e6-b256-01525d0aae85","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y3\", \"Y3\")"},"variableMap":{"txt":"text"},"type":"adrStmt","transplantationPoint":{"toString":"text = preprocess(text)","position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"status":-2},{"failures":[],"tindex":"d3cac435-16ed-11e6-b256-a33eccfa8661","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String pattern = rule.getPattern()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:212","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = rule.getPattern()"},"status":-2},{"failures":[],"tindex":"d3cac436-16ed-11e6-b256-b18fe7e12b01","series":0,"name":"replace","transplant":{"toString":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"value","firstLetter":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.BCodec:141","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"d3cac437-16ed-11e6-b256-af7341cce172","series":0,"name":"replace","transplant":{"toString":"final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])","position":"org.apache.commons.codec.net.QuotedPrintableCodec:366","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"variableMap":{"bytes":"in","i":"inPos"},"type":"adrStmt","transplantationPoint":{"toString":"int b = in[(inPos++)]","position":"org.apache.commons.codec.binary.Base64:381","type":"CtLocalVariableImpl","sourcecode":"int int = in[(inPos++)]"},"status":-2},{"failures":[],"tindex":"d3cac438-16ed-11e6-b256-f97896f17978","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-3}],"header":{"groupId":"commons-codec","transformationCount":96,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
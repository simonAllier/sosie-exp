{"failureDictionary":{"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":46,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":39,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":75,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":26,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":35,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":23,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":51,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":21,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":24,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":27,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":87,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":14,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":13,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":82,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":48,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":78,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":83,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":32,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":41,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":12,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":61,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":84,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":85,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":16,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":36,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":29,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":89,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":11,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":19,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":22,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":6,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":53,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":99,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":34,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":60,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":96,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":1,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":64,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":97,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":30,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":55,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":20,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":56,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":93,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":38,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":63,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":5,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":17,"org.apache.commons.codec.binary.Base64Test.testBase64":92,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":45,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":10,"org.apache.commons.codec.binary.Base64Test.testUUID":79,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":88,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":100,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":43,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":70,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":94,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":37,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":59,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":68,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":77,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":31,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":65,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":76,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":73,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":95,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":66,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":90,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":33,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":98,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":49,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":40,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":54,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":72,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":58,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":74,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":81,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":91,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":57,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":7,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":42,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":9,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":80,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":25},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"b17ef29c-16e4-11e6-a22b-a929884e567b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (append && ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH))) {\n    builder.append(replacement);\n    if ((builder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n        builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length());\n    } \n    cachedString = null;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:138","type":"CtIfImpl","sourcecode":"if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n    java.lang.StringBuilder.append(replacement);\n    if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n        java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n    } \n    java.lang.String = null;\n} "},"status":-1},{"failures":[],"tindex":"b17f19ad-16e4-11e6-a22b-553d5317f7ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.buffer = null","position":"org.apache.commons.codec.binary.BaseNCodec:297","type":"CtAssignmentImpl","sourcecode":"context.byte[] = null"},"status":-2},{"failures":[],"tindex":"b17f40be-16e4-11e6-a22b-bf52ced56e5a","series":0,"name":"add","transplant":{"toString":"final char[] name1Char = name1.toCharArray()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:295","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = name1.toCharArray()"},"variableMap":{"name1":"text"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] chrs = text.toCharArray()","position":"org.apache.commons.codec.language.ColognePhonetic:431","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = text.toCharArray()"},"status":-2},{"failures":[],"tindex":"b17f40bf-16e4-11e6-a22b-97fc52eb257b","series":0,"name":"replace","transplant":{"toString":"if (lineLength > 0) {\n    this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:283","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"length","encodeSize":"length","length":"length","lineSeparator":"lineSeparator","lineLength":"length"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"status":-2},{"failures":[],"tindex":"b17f66d0-16e4-11e6-a22b-b9f93554e944","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"cachedString = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:85","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":0},{"failures":[9,10],"tindex":"b1807841-16e4-11e6-a22b-098876097441","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:805","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"b1809f52-16e4-11e6-a22b-f1ef694ab2eb","series":0,"name":"add","transplant":{"toString":"return binaryData","position":"org.apache.commons.codec.binary.Base64:663","type":"CtReturnImpl","sourcecode":"return binaryData"},"variableMap":{"binaryData":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"failures":[],"tindex":"b1809f53-16e4-11e6-a22b-d95b8938d371","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] charsToTrim = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:519","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'))"},"status":-2},{"failures":[],"tindex":"b1809f54-16e4-11e6-a22b-478a46e7b415","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int t = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)])","position":"org.apache.commons.codec.digest.UnixCrypt:330","type":"CtLocalVariableImpl","sourcecode":"int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)])"},"status":-2},{"failures":[11],"tindex":"b180c665-16e4-11e6-a22b-4fc774268e50","series":0,"name":"replace","transplant":{"toString":"result.append('A')","position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:307","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[12,13,14,15,16,17,18,19],"tindex":"b180c666-16e4-11e6-a22b-c786bbc811ef","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(chrs)","position":"org.apache.commons.codec.language.ColognePhonetic:443","type":"CtReturnImpl","sourcecode":"return new java.lang.String(chrs)"},"status":-1},{"failures":[11,9,10],"tindex":"b180c667-16e4-11e6-a22b-abcdf054fb0c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('J', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"status":-1},{"failures":[],"tindex":"b180ed78-16e4-11e6-a22b-218b9cb8670e","series":0,"name":"replace","transplant":{"toString":"final java.lang.String firstThree = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:163","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)"},"variableMap":{"name":"ph","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"open"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String in = ph.substring((open + 1), ((ph.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:372","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1))"},"status":-3},{"failures":[],"tindex":"b180ed79-16e4-11e6-a22b-d1a0f94ad0a2","series":0,"name":"replace","transplant":{"toString":"final char[] newData = new char[length]","position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"variableMap":{"length":"len"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] chars = new char[len]","position":"org.apache.commons.codec.language.SoundexUtils:46","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[len]"},"status":-3},{"failures":[20],"tindex":"b180ed7a-16e4-11e6-a22b-5b1fffba766c","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"r3\", \"R3\")","position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r3\", \"R3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"f+\", \"F\")","position":"org.apache.commons.codec.language.Caverphone1:96","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"status":-1},{"failures":[],"tindex":"b181148b-16e4-11e6-a22b-9da26ff45945","series":0,"name":"add","transplant":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"variableMap":{"maxPhonemes":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:601","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"b181feec-16e4-11e6-a22b-39aec6ef41d1","series":0,"name":"replace","transplant":{"toString":"sb.append('}')","position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"variableMap":{"sb":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\"Rule\")","position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"status":0},{"failures":[21,22,23,24],"tindex":"b18225fd-16e4-11e6-a22b-25ffdaa7224e","series":0,"name":"replace","transplant":{"toString":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtIfImpl","sourcecode":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} "},"variableMap":{"cs1":"prefix","cs2":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:604","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[25,26],"tindex":"b18225fe-16e4-11e6-a22b-1d22866a9f52","series":0,"name":"replace","transplant":{"toString":"d &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"b"},"type":"adrStmt","transplantationPoint":{"toString":"results[1] = b","position":"org.apache.commons.codec.digest.UnixCrypt:410","type":"CtAssignmentImpl","sourcecode":"results[1] = b"},"status":-1},{"failures":[27,28,29,30,31,32,33,34,35,36],"tindex":"b18225ff-16e4-11e6-a22b-ff9da8e1fd0c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (todo > 0) {\n    int len = ((int)(java.lang.Math.min(b.length, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n        break;\n    } \n    todo -= len;\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (todo > 0) {\n    int int = ((int)(java.lang.Math.min(b.int, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    todo -= len;\n}"},"status":-1},{"failures":[],"tindex":"b1824d10-16e4-11e6-a22b-c33981dc2e81","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n    context.currentLinePos = 0;\n} ","position":"org.apache.commons.codec.binary.Base32:518","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-2},{"failures":[],"tindex":"b1824d11-16e4-11e6-a22b-2f6dd2adfb55","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:393","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":-2},{"failures":[37,38,39,40,21,22,23,24],"tindex":"b1824d12-16e4-11e6-a22b-ad8a077d1d81","series":0,"name":"replace","transplant":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"variableMap":{"rules":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)) {\n    final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim();\n    if (incl.contains(\" \")) {\n        throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n    } else {\n        lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n    }\n} else {\n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n            final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n            final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n            final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n            final int cLine = currentLine;\n            final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                private final int myLine = cLine;\n\n                private final java.lang.String loc = location;\n\n                @java.lang.Override\n                public java.lang.String toString() {\n                    final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                    sb.append(\"Rule\");\n                    sb.append(\"{line=\").append(myLine);\n                    sb.append(\", loc='\").append(loc).append('\\'');\n                    sb.append(\", pat='\").append(pat).append('\\'');\n                    sb.append(\", lcon='\").append(lCon).append('\\'');\n                    sb.append(\", rcon='\").append(rCon).append('\\'');\n                    sb.append('}');\n                    return sb.toString();\n                }\n            };\n            final java.lang.String patternKey = r.pattern.substring(0, 1);\n            java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                lines.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:433","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n    if (incl.contains(\" \")) {\n        throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n    } else {\n        lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n            final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n            final int int = currentLine;\n            final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                private final int myLine = cLine;\n\n                private final java.lang.String loc = location;\n\n                @java.lang.Override\n                public java.lang.String toString() {\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    sb.append(\"Rule\");\n                    sb.append(\"{line=\").append(int);\n                    sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                    sb.append(\", pat='\").append(pat).append('\\'');\n                    sb.append(\", lcon='\").append(lCon).append('\\'');\n                    sb.append(\", rcon='\").append(rCon).append('\\'');\n                    sb.append('}');\n                    return sb.toString();\n                }\n            };\n            final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n            java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                lines.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"b1829b33-16e4-11e6-a22b-cbcc742f39d5","series":0,"name":"replace","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START"},"type":"adrStmt","transplantationPoint":{"toString":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}","position":"org.apache.commons.codec.language.bm.Languages:183","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}"},"status":-2},{"failures":[],"tindex":"b1829b34-16e4-11e6-a22b-cb1edae7d91e","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())","position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"status":-2},{"failures":[],"tindex":"b1829b35-16e4-11e6-a22b-cf6bc3faa636","series":0,"name":"replace","transplant":{"toString":"this.encodedBlockSize = encodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"variableMap":{"encodedBlockSize":"r"},"type":"adrStmt","transplantationPoint":{"toString":"r = read(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:99","type":"CtAssignmentImpl","sourcecode":"r = read(byte[], 0, 1)"},"status":-2},{"failures":[],"tindex":"b1829b36-16e4-11e6-a22b-599f16b873b9","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_N","position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[41,37,42,38,39,43,44,40,45,46,47,48,49,50,21,22,23,24],"tindex":"b182c247-16e4-11e6-a22b-a3d87535e448","series":0,"name":"replace","transplant":{"toString":"inMultilineComment = false","position":"org.apache.commons.codec.language.bm.Rule:414","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"variableMap":{"inMultilineComment":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = true","position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"status":-1},{"failures":[51,52,53,54,55,56,57,58,59,60,61,62],"tindex":"b182c248-16e4-11e6-a22b-35c2aad9569e","series":0,"name":"replace","transplant":{"toString":"return result.substring(1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:463","type":"CtReturnImpl","sourcecode":"return result.substring(1)"},"variableMap":{"result":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"return buffer.toString()","position":"org.apache.commons.codec.digest.Sha2Crypt:506","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[],"tindex":"b182c249-16e4-11e6-a22b-cbdb0c05699b","series":0,"name":"replace","transplant":{"toString":"return metaphone(str)","position":"org.apache.commons.codec.language.Metaphone:403","type":"CtReturnImpl","sourcecode":"return metaphone(str)"},"variableMap":{"str":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))","position":"org.apache.commons.codec.digest.DigestUtils:321","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"status":-2},{"failures":[],"tindex":"b182c24a-16e4-11e6-a22b-29e3fb8889fd","series":0,"name":"replace","transplant":{"toString":"return length","position":"org.apache.commons.codec.language.ColognePhonetic:219","type":"CtReturnImpl","sourcecode":"return int"},"variableMap":{"length":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:358","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-3},{"failures":[63],"tindex":"b182c24b-16e4-11e6-a22b-ef57f3cb42af","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))","position":"org.apache.commons.codec.digest.DigestUtils:626","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"variableMap":{"data":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return metaphone(str)","position":"org.apache.commons.codec.language.Metaphone:403","type":"CtReturnImpl","sourcecode":"return metaphone(str)"},"status":-1},{"failures":[],"tindex":"b182c24c-16e4-11e6-a22b-f32c85ff357c","series":0,"name":"replace","transplant":{"toString":"return toString().hashCode()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:124","type":"CtReturnImpl","sourcecode":"return toString().hashCode()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return +1","position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"status":0},{"failures":[],"tindex":"b182e95d-16e4-11e6-a22b-f3ad05f48391","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.CharSequenceUtils:67","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"b182e95e-16e4-11e6-a22b-e19849dc3d66","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"j\", \"y\")","position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":0},{"failures":[64,65],"tindex":"b182e95f-16e4-11e6-a22b-857b7717cd0b","series":0,"name":"replace","transplant":{"toString":"last = mapped","position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"last = mapped"},"variableMap":{"last":"last","mapped":"last"},"type":"adrStmt","transplantationPoint":{"toString":"last = current","position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"status":-1},{"failures":[],"tindex":"b182e960-16e4-11e6-a22b-4fa0afd2a7cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:287","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[],"tindex":"b182e961-16e4-11e6-a22b-1b4b9efa4d89","series":0,"name":"add","transplant":{"toString":"text = preprocess(text)","position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"variableMap":{"text":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"b\", \"p\")","position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"status":-2},{"failures":[66,67,68,69,70,71,72,27,73,74,75,28,29,30,31,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],"tindex":"b1831072-16e4-11e6-a22b-9989ca241d9a","series":0,"name":"replace","transplant":{"toString":"final byte[] pBytes = new byte[keyLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"variableMap":{"keyLen":"decodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(decodeSize, context)","position":"org.apache.commons.codec.binary.Base64:436","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[],"tindex":"b1831073-16e4-11e6-a22b-6f84551f8b2a","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"binaryData","raw":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)","position":"org.apache.commons.codec.binary.Base64:554","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)"},"status":-3},{"failures":[],"tindex":"b1831074-16e4-11e6-a22b-9147e08dd45a","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] charsToTrim = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] parts = line.split(\"\\\\s+\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:302","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\")"},"status":-2},{"failures":[],"tindex":"b1831075-16e4-11e6-a22b-47cc02d08ab6","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"toString":"line = line.substring(0, cmtI)","position":"org.apache.commons.codec.language.bm.Rule:423","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-2},{"failures":[],"tindex":"b1831076-16e4-11e6-a22b-5f5c0f98c897","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"sh\", \"s2\")","position":"org.apache.commons.codec.language.Caverphone1:84","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^gn\", \"2n\")","position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"status":0},{"failures":[],"tindex":"b1833787-16e4-11e6-a22b-a7c014425ba6","series":0,"name":"add","transplant":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"length","keyLen":"length"},"type":"adrStmt","transplantationPoint":{"toString":"(length)--","position":"org.apache.commons.codec.language.ColognePhonetic:275","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"status":0},{"failures":[9,10],"tindex":"b1833788-16e4-11e6-a22b-0fc8ec74c7b0","series":0,"name":"replace","transplant":{"toString":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n    result.append(\"X\", \"SK\");\n} else {\n    result.append(\"SK\");\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n    result.append(\"X\", \"SK\");\n} else {\n    result.append(\"SK\");\n}"},"status":-1},{"failures":[37,38,39,40,21,22,23,24],"tindex":"b1833789-16e4-11e6-a22b-95f852b0f066","series":0,"name":"replace","transplant":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int cLine = currentLine;\n        final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(myLine);\n                sb.append(\", loc='\").append(loc).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String patternKey = r.pattern.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"b1835e9a-16e4-11e6-a22b-c509d824c3a6","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean found = rulesApplication.isFound()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:348","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = rulesApplication.isFound()"},"status":-2},{"failures":[11,9,10],"tindex":"b1835e9b-16e4-11e6-a22b-a31b8c368cb8","series":0,"name":"replace","transplant":{"toString":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:574","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"b18385ac-16e4-11e6-a22b-8dda80f1a1ad","series":0,"name":"replace","transplant":{"toString":"code = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:353","type":"CtAssignmentImpl","sourcecode":"code = '-'"},"variableMap":{"code":"lastChar"},"type":"adrStmt","transplantationPoint":{"toString":"lastChar = ch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"status":0},{"failures":[],"tindex":"b18385ad-16e4-11e6-a22b-5f29b7ff96da","series":0,"name":"replace","transplant":{"toString":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.RADIX)) + \"): \") + b));\n} ","position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"variableMap":{"b":"b","org.apache.commons.codec.net.URLCodec.RADIX":"i","i":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if (b != (org.apache.commons.codec.net.QCodec.UNDERSCORE)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.BLANK;\n}","position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n}"},"status":-3},{"failures":[],"tindex":"b18385ae-16e4-11e6-a22b-e9b29a639ea1","series":0,"name":"replace","transplant":{"toString":"right = (left >>> 1) | (left << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:296","type":"CtAssignmentImpl","sourcecode":"right = (left >>> 1) | (left << 31)"},"variableMap":{"left":"index","right":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:557","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[37,38,39,40,21,22,23,24],"tindex":"b18385af-16e4-11e6-a22b-5b7d7e5faba0","series":0,"name":"replace","transplant":{"toString":"final java.lang.String firstLetter = name.substring(0, 1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"variableMap":{"name":"regex"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String content = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()))","position":"org.apache.commons.codec.language.bm.Rule:502","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()))"},"status":-1},{"failures":[101],"tindex":"b183acc0-16e4-11e6-a22b-13006a1c836e","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"d\", \"t\")","position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[],"tindex":"b183acc1-16e4-11e6-a22b-d7580214279a","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))","position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))"},"variableMap":{"sBytes":"buffer","tempResult":"buffer","saltLen":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","cp":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"if (result >= 0) {\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n    context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n    if ((context.modulus) == 0) {\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    } \n} ","position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-2},{"failures":[],"tindex":"b183acc2-16e4-11e6-a22b-bf8991081489","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (\"Languages(\" + (languages.toString())) + \")\"","position":"org.apache.commons.codec.language.bm.Languages:150","type":"CtReturnImpl","sourcecode":"return (\"Languages(\" + (java.util.Set<java.lang.String>.toString())) + \")\""},"status":0},{"failures":[],"tindex":"b183acc3-16e4-11e6-a22b-b3d21096417a","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:554","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}"},"status":-2},{"failures":[],"tindex":"b183d3d4-16e4-11e6-a22b-b9b8df331d8a","series":0,"name":"replace","transplant":{"toString":"return metaphone(str)","position":"org.apache.commons.codec.language.Metaphone:403","type":"CtReturnImpl","sourcecode":"return metaphone(str)"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:600","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"status":-2},{"failures":[66,67,68],"tindex":"b183d3d5-16e4-11e6-a22b-db251d313cff","series":0,"name":"replace","transplant":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"variableMap":{"l_raw":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.decodeBase64(bytes)","position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(bytes)"},"status":-1},{"failures":[],"tindex":"b183d3d6-16e4-11e6-a22b-e1205342d418","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"finalRules can not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":59,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
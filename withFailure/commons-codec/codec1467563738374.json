{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":66,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":68,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":9,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":79,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":84,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":83,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":80,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":36,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":43,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":82,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":40,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":70,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":12,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":14,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":10,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":13,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":45,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":34,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":41,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":50,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":74,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":58,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":59,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":35,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":73,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":85,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":76,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":46,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":49,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":63,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":87,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":57,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":64,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":11,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":7,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":52,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":16,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":47,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":44,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":69,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":81,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":17,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":28,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":33,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":20,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":75,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":6,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":29,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":38,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":19,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":51,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":26,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":55,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":0,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":78,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":3,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":53,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":18,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":27,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":39},"transformations":[{"failures":[],"tindex":"2ca4a6a2-413c-11e6-9ddd-79ced5d32de4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"cp","cnt":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"status":-2},{"failures":[0,1,2,3,4],"tindex":"2ca4f4c3-413c-11e6-9ddd-7d574ee473a5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:637","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"2ca4f4c4-413c-11e6-9ddd-b5c23e48c42b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"variableMap":{"outLen":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:156","type":"CtLocalVariableImpl","sourcecode":"final int int = saltBytes.int"},"status":-2},{"failures":[5,6,7,8,9],"tindex":"2ca4f4c5-413c-11e6-9ddd-839941c8c424","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"status":-1},{"failures":[],"tindex":"2ca51bd6-413c-11e6-9ddd-832b2eb36202","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} "},"variableMap":{"sb":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:304","type":"CtIfImpl","sourcecode":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} "},"status":-2},{"failures":[],"tindex":"2ca51bd7-413c-11e6-9ddd-6582d4339ef6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"roundsCustom = true"},"variableMap":{"roundsCustom":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:433","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"2ca51bd8-413c-11e6-9ddd-21d4a6cd7552","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"variableMap":{"raw":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:222","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return decode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n}"},"status":-2},{"failures":[],"tindex":"2ca542e9-413c-11e6-9ddd-d5a86815819c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:791","type":"CtInvocationImpl","sourcecode":"mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"object","mac":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtIfImpl","sourcecode":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} "},"status":-2},{"failures":[],"tindex":"2ca542ea-413c-11e6-9ddd-8543bd483d95","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"l"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:367","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"status":-2},{"failures":[10,11,12,13],"tindex":"2ca542eb-413c-11e6-9ddd-059780288a06","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:245","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"2ca542ec-413c-11e6-9ddd-fb7dcae43a54","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"variableMap":{"current":"code","last":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:389","type":"CtAssignmentImpl","sourcecode":"code = '6'"},"status":0},{"failures":[],"tindex":"2ca569fd-413c-11e6-9ddd-3139e0e18158","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:161","type":"CtAssignmentImpl","sourcecode":"data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"variableMap":{"data":"buffer","i":"pos","org.apache.commons.codec.net.QCodec.UNDERSCORE":"pad"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:355","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[14,15,16,17,18,19,20,21],"tindex":"2ca569fe-413c-11e6-9ddd-cf7bd430bca2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:386","type":"CtIfImpl","sourcecode":"if ((i % 7) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} "},"status":-1},{"failures":[3,4],"tindex":"2ca569ff-413c-11e6-9ddd-67342e01de47","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[22,23,24,25,26,1,2,27,3,4,28],"tindex":"2ca56a00-413c-11e6-9ddd-87824867d8d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"value","leftCharacter":"value","rightCharacter":"value","location":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:876","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n    if (value.startsWith(element)) {\n        result = true;\n        break;\n    } \n}"},"status":-1},{"failures":[1,3,4],"tindex":"2ca59111-413c-11e6-9ddd-c79aa0f3d2ca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = false;\n} "},"variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"value","line":"value","inMultilineComment":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:876","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n    if (value.startsWith(element)) {\n        result = true;\n        break;\n    } \n}"},"status":-1},{"failures":[29],"tindex":"2ca59112-413c-11e6-9ddd-d508c3ce5939","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:312","type":"CtIfImpl","sourcecode":"if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n} "},"status":-1},{"failures":[],"tindex":"2ca5b823-413c-11e6-9ddd-57129ad55ee5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"org.apache.commons.codec.binary.Base32.MASK_5BITS","pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:513","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[10,11,12,13],"tindex":"2ca60644-413c-11e6-9ddd-c766a859071b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"variableMap":{"input":"input","content":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:510","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return (input.length()) == 0;\n    }\n}"},"status":-1},{"failures":[30,31,32,33],"tindex":"2ca60645-413c-11e6-9ddd-45266986a881","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:240","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[],"tindex":"2ca60646-413c-11e6-9ddd-1586d0365fdd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:59","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^cough\", \"cou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"status":0},{"failures":[],"tindex":"2ca60647-413c-11e6-9ddd-7ffcdeca3349","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:46","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[len]"},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:241","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"status":-2},{"failures":[34,35,36,37,38],"tindex":"2ca62d58-413c-11e6-9ddd-41d933fc8bed","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:268","type":"CtTryImpl","sourcecode":"try {\n    return decodeText(str);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-1},{"failures":[],"tindex":"2ca62d59-413c-11e6-9ddd-bfec4a5c3c83","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"status":-2},{"failures":[],"tindex":"2ca62d5a-413c-11e6-9ddd-61ecaaa0b76b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"2ca62d5b-413c-11e6-9ddd-27474bd17c50","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"variableMap":{"a":"length","t":"cnt","n":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"cnt = keyBytes.int"},"status":-2},{"failures":[],"tindex":"2ca62d5c-413c-11e6-9ddd-dd534684ef4d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return index + 3"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:300","type":"CtReturnImpl","sourcecode":"return handleCC(value, result, index)"},"status":-2},{"failures":[],"tindex":"2ca6546d-413c-11e6-9ddd-bdef3a734851","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:549","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1))"},"variableMap":{"content":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:163","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)"},"status":-2},{"failures":[],"tindex":"2ca6546e-413c-11e6-9ddd-31846d113d07","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"status":0},{"failures":[39,40],"tindex":"2ca6546f-413c-11e6-9ddd-29d838da84fd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"variableMap":{"b":"d","t":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:347","type":"CtAssignmentImpl","sourcecode":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)"},"status":-1},{"failures":[],"tindex":"2ca65470-413c-11e6-9ddd-cb283f35e3b0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:295","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.this.int) - 1"},"variableMap":{"encodeSize":"readPos","decodeSize":"readPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += len"},"status":-2},{"failures":[],"tindex":"2ca65471-413c-11e6-9ddd-6b500ec1425e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:66","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('!')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[4],"tindex":"2ca67b82-413c-11e6-9ddd-b52d64b98771","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:535","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"status":-1},{"failures":[],"tindex":"2ca67b83-413c-11e6-9ddd-a15812a5338e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"status":0},{"failures":[],"tindex":"2ca67b84-413c-11e6-9ddd-49994b3f8261","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"variableMap":{"from":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","to":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[],"tindex":"2ca67b85-413c-11e6-9ddd-6ff43fdc295e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[],"tindex":"2ca67b86-413c-11e6-9ddd-192260217ce3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:150","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"status":-2},{"failures":[],"tindex":"2ca67b87-413c-11e6-9ddd-e30014abf864","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:98","type":"CtWhileImpl","sourcecode":"while (r == 0) {\n    r = read(byte[], 0, 1);\n}"},"variableMap":{"r":"length","this":"this","singleByte":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (todo > 0) {\n    int int = ((int)(java.lang.Math.min(b.int, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    todo -= len;\n}"},"status":-2},{"failures":[41],"tindex":"2ca6a298-413c-11e6-9ddd-a3496d66ef3a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"variableMap":{"byteArray":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"failures":[],"tindex":"2ca6a299-413c-11e6-9ddd-5b73d67fdd37","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:373","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-2},{"failures":[42,43,44,45],"tindex":"2ca6a29a-413c-11e6-9ddd-cd1496de5d50","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:150","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.close()"},"status":-1},{"failures":[],"tindex":"2ca6a29b-413c-11e6-9ddd-0d1c74f6a7e1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:148","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"org.apache.commons.codec.language.Nysiis.CHARS_AF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"2ca6a29c-413c-11e6-9ddd-995fcb5a2eaa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_A"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"2ca6a29d-413c-11e6-9ddd-69ae6ee729ed","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:216","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:188","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-2},{"failures":[],"tindex":"2ca6c9ae-413c-11e6-9ddd-1d621b69960e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}"},"status":-2},{"failures":[],"tindex":"2ca6c9af-413c-11e6-9ddd-971239fe6654","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"variableMap":{"index":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"status":-2},{"failures":[],"tindex":"2ca6c9b0-413c-11e6-9ddd-136184e14b86","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"status":-2},{"failures":[46,47],"tindex":"2ca6c9b1-413c-11e6-9ddd-7918f35378c5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:406","type":"CtIfImpl","sourcecode":"if ((pArray == null) || ((pArray.int) == 0)) {\n    return pArray;\n} "},"status":-1},{"failures":[],"tindex":"2ca6c9b2-413c-11e6-9ddd-2f1d33193bae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"variableMap":{"value":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:291","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"))"},"status":-2},{"failures":[48,49],"tindex":"2ca6c9b3-413c-11e6-9ddd-dbf6522cdda4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"status":-1},{"failures":[],"tindex":"2ca6f0c4-413c-11e6-9ddd-afb7e5256942","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:438","type":"CtBreakImpl","sourcecode":"break"},"status":0},{"failures":[],"tindex":"2ca6f0c5-413c-11e6-9ddd-497abc45b66a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"lineLength","to":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    len += (((len + (int)) - 1) / (int)) * (int);\n} "},"status":-2},{"failures":[],"tindex":"2ca6f0c6-413c-11e6-9ddd-177dd90abe72","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:131","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName)"},"variableMap":{"org.apache.commons.codec.language.bm.Lang.class":"org.apache.commons.codec.language.bm.Languages.class","languageRulesResourceName":"resName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:255","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName)"},"status":-2},{"failures":[],"tindex":"2ca82947-413c-11e6-9ddd-0930fe174f96","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:47","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"2ca85058-413c-11e6-9ddd-130f21844a0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:269","type":"CtReturnImpl","sourcecode":"return decodeText(str)"},"status":-2},{"failures":[14,15,16,17,18,19,20,21],"tindex":"2ca85059-413c-11e6-9ddd-db9bf1cc4884","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:194","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"status":-1},{"failures":[50],"tindex":"2ca8505a-413c-11e6-9ddd-bfb01d22a01a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:358","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang))"},"status":-1},{"failures":[],"tindex":"2ca8505b-413c-11e6-9ddd-b95ca28fc2db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"lastCode = code"},"variableMap":{"code":"last","lastCode":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:271","type":"CtAssignmentImpl","sourcecode":"last = getMappingCode(str, 0)"},"status":-2},{"failures":[],"tindex":"2ca8505c-413c-11e6-9ddd-1742a0c9e117","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"txt","org.apache.commons.codec.language.Caverphone1.SIX_1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:95","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n    return \"\";\n} "},"status":-2},{"failures":[],"tindex":"2ca8505d-413c-11e6-9ddd-b5afd9cec40c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:162","type":"CtReturnImpl","sourcecode":"return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset())"},"variableMap":{"this":"this","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:123","type":"CtReturnImpl","sourcecode":"return encodeText(value, charset)"},"status":-2},{"failures":[2,3,4],"tindex":"2ca8776e-413c-11e6-9ddd-372da86dd456","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[],"tindex":"2ca8776f-413c-11e6-9ddd-7383c3bc8c5c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:172","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementBeforeVowel.split(\"\\\\|\")"},"variableMap":{"replacementBeforeVowel":"replacementDefault"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:173","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementDefault.split(\"\\\\|\")"},"status":-2},{"failures":[51,52,53,42,43],"tindex":"2ca87770-413c-11e6-9ddd-9ff157cd91f1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:364","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[],"tindex":"2ca87771-413c-11e6-9ddd-677c03d0eb42","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"i","to":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:83","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i)"},"status":-2},{"failures":[],"tindex":"2ca87772-413c-11e6-9ddd-e3dcdb37b207","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"variableMap":{"cmtI":"wdsz","line":"org.apache.commons.codec.language.Metaphone.FRONTV"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:152","type":"CtIfImpl","sourcecode":"if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n    n++;\n} else {\n    switch (symb) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n            if (n == 0) {\n                code.append(symb);\n            } \n            break;\n        case 'B' :\n            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                break;\n            } \n            code.append(symb);\n            break;\n        case 'C' :\n            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                break;\n            } \n            if (regionMatch(local, n, \"CIA\")) {\n                code.append('X');\n                break;\n            } \n            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                code.append('S');\n                break;\n            } \n            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                code.append('K');\n                break;\n            } \n            if (isNextChar(local, n, 'H')) {\n                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                    code.append('K');\n                } else {\n                    code.append('X');\n                }\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'D' :\n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                code.append('J');\n                n += 2;\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'G' :\n            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                break;\n            } \n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                break;\n            } \n            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                break;\n            } \n            if (isPreviousChar(local, n, 'G')) {\n                hard = true;\n            } else {\n                hard = false;\n            }\n            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                code.append('J');\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'H' :\n            if (isLastChar(wdsz, n)) {\n                break;\n            } \n            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                break;\n            } \n            if (isVowel(local, (n + 1))) {\n                code.append('H');\n            } \n            break;\n        case 'F' :\n        case 'J' :\n        case 'L' :\n        case 'M' :\n        case 'N' :\n        case 'R' :\n            code.append(symb);\n            break;\n        case 'K' :\n            if (n > 0) {\n                if (!(isPreviousChar(local, n, 'C'))) {\n                    code.append(symb);\n                } \n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'P' :\n            if (isNextChar(local, n, 'H')) {\n                code.append('F');\n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'Q' :\n            code.append('K');\n            break;\n        case 'S' :\n            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                code.append('X');\n            } else {\n                code.append('S');\n            }\n            break;\n        case 'T' :\n            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                code.append('X');\n                break;\n            } \n            if (regionMatch(local, n, \"TCH\")) {\n                break;\n            } \n            if (regionMatch(local, n, \"TH\")) {\n                code.append('0');\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'V' :\n            code.append('F');\n            break;\n        case 'W' :\n        case 'Y' :\n            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                code.append(symb);\n            } \n            break;\n        case 'X' :\n            code.append('K');\n            code.append('S');\n            break;\n        case 'Z' :\n            code.append('S');\n            break;\n        default :\n            break;\n    }\n    n++;\n}"},"status":-2},{"failures":[],"tindex":"2ca89e83-413c-11e6-9ddd-a5e3b09b7269","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"status":0},{"failures":[10,11,12,13],"tindex":"2ca89e84-413c-11e6-9ddd-f354369c0a69","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true"},"status":-1},{"failures":[39,40],"tindex":"2ca89e85-413c-11e6-9ddd-8be009700df6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:305","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results)"},"variableMap":{"left":"c","right":"c","results":"results"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:351","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)"},"status":-1},{"failures":[],"tindex":"2ca89e86-413c-11e6-9ddd-73bdcc800f25","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:321","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"2ca89e87-413c-11e6-9ddd-0d298693649f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:93","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\\\')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:66","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('!')"},"status":0},{"failures":[],"tindex":"2ca89e88-413c-11e6-9ddd-2b5e8a17dbd6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_S"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:133","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"2ca89e89-413c-11e6-9ddd-99327594031d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:99","type":"CtIfImpl","sourcecode":"if (txtLength == 1) {\n    return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n} "},"status":-2},{"failures":[],"tindex":"2ca9fe1a-413c-11e6-9ddd-a91aa6272897","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}"},"variableMap":{"altCtx":"ctx","altResult":"pBytes","saltBytes":"pBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:387","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-2},{"failures":[],"tindex":"2caa252b-413c-11e6-9ddd-8702851dd32d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:602","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[34,36,54,38,55,56,57,58,59,29,60,61,62,63],"tindex":"2caa252c-413c-11e6-9ddd-6bc427c2c695","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:187","type":"CtInvocationImpl","sourcecode":"buffer.write(hex2)"},"variableMap":{"hex2":"hex1","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:186","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-1},{"failures":[35],"tindex":"2caa252d-413c-11e6-9ddd-b1b172f66a83","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"i","l_ascii":"tmp","bits":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:187","type":"CtAssignmentImpl","sourcecode":"tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":-1},{"failures":[],"tindex":"2caa252e-413c-11e6-9ddd-bb6c796b5a8e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:262","type":"CtReturnImpl","sourcecode":"return newData"},"variableMap":{"newData":"org.apache.commons.codec.language.Nysiis.CHARS_FF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:154","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"2caa4c3f-413c-11e6-9ddd-9b78e5efc08f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"status":0},{"failures":[],"tindex":"2caa4c40-413c-11e6-9ddd-97a847599502","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"variableMap":{"folding":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:343","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"2caa4c41-413c-11e6-9ddd-0b600df1fa4c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[],"tindex":"2caa4c42-413c-11e6-9ddd-93b46eb0f9e0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:411","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(2)"},"variableMap":{"input":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"status":-2},{"failures":[],"tindex":"2caa4c43-413c-11e6-9ddd-499dd737d9ac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"bitlen = ((bitlen + 7) >> 3) << 3"},"variableMap":{"bitlen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:303","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"2caa4c44-413c-11e6-9ddd-b990fa1e743f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"r"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtIfImpl","sourcecode":"if (r > 0) {\n    final byte byte = byte[][0];\n    return b < 0 ? 256 + b : b;\n} "},"status":-2},{"failures":[],"tindex":"2caa4c45-413c-11e6-9ddd-6be1612f511a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:91","type":"CtAssignmentImpl","sourcecode":"upperName = removeAccents(upperName)"},"variableMap":{"upperName":"name2","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"status":-2},{"failures":[],"tindex":"2caa4c46-413c-11e6-9ddd-c581c04cafea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"status":-2},{"failures":[10,11,12,13],"tindex":"2caa4c47-413c-11e6-9ddd-b9493823256a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:577","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}"},"variableMap":{"input":"input","bContent":"input","shouldMatch":"endsWith"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtIfImpl","sourcecode":"if (!(boxContent.contains(\"[\"))) {\n    final boolean boolean = boxContent.startsWith(\"^\");\n    if (negate) {\n        boxContent = boxContent.substring(1);\n    } \n    final java.lang.String java.lang.String = boxContent;\n    final boolean boolean = !negate;\n    if (startsWith && endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n            }\n        };\n    } else if (startsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n            }\n        };\n    } else if (endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n            }\n        };\n    } \n} "},"status":-1},{"failures":[],"tindex":"2caa7358-413c-11e6-9ddd-9554e52f6b94","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"status":0},{"failures":[],"tindex":"2caa7359-413c-11e6-9ddd-25076dd3f6d3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"r"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtIfImpl","sourcecode":"if (r > 0) {\n    final byte byte = byte[][0];\n    return b < 0 ? 256 + b : b;\n} "},"status":-2},{"failures":[34,35,36,54,55,56,57,64,61],"tindex":"2caa735a-413c-11e6-9ddd-efbec7b290c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255)"},"variableMap":{"b2":"c","b0":"c","b1":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:325","type":"CtLocalVariableImpl","sourcecode":"int int = c"},"status":-1},{"failures":[],"tindex":"2caa735b-413c-11e6-9ddd-f11280b0fcf9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:185","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"variableMap":{"inExtendedComment":"strict"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:150","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"status":-2},{"failures":[],"tindex":"2caa735c-413c-11e6-9ddd-dfea8376ab3f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"index","minRating":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:569","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('F');\n    index += 2;\n} else {\n    result.append('P');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[],"tindex":"2caa735d-413c-11e6-9ddd-03f5dd3ff056","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:671","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize))"},"status":-2},{"failures":[],"tindex":"2caa9a6e-413c-11e6-9ddd-6159fae583ab","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"variableMap":{"upperName":"replacedName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:392","type":"CtReturnImpl","sourcecode":"return replacedName"},"status":-2},{"failures":[65],"tindex":"2caa9a6f-413c-11e6-9ddd-93f9455d5fe6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:658","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)"},"status":-1},{"failures":[],"tindex":"2caa9a70-413c-11e6-9ddd-9ba6945f6d7b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:234","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index]"},"variableMap":{"this":"this","index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:189","type":"CtIfImpl","sourcecode":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char char = str.charAt((index - 2));\n    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} "},"status":-2},{"failures":[66],"tindex":"2caa9a71-413c-11e6-9ddd-439053690807","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[51,67,68,52,69,70,71,53,42,43],"tindex":"2caa9a72-413c-11e6-9ddd-d71b8c209376","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"decodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:374","type":"CtIfImpl","sourcecode":"if ((context.boolean) && ((context.int) >= 2)) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    switch (context.int) {\n        case 2 :\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 4 :\n            context.long = (context.long) >> 4;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 5 :\n            context.long = (context.long) >> 1;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 6 :\n            context.long = (context.long) >> 6;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 7 :\n            context.long = (context.long) >> 3;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n} "},"status":-1},{"failures":[72],"tindex":"2caa9a73-413c-11e6-9ddd-c9075ace739a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-1},{"failures":[73,74,75],"tindex":"2caa9a74-413c-11e6-9ddd-a79d0d8d7192","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:84","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[76,77,78,79,80,50,81,82,83,84,85,86,87,10,11,12,13],"tindex":"2caac185-413c-11e6-9ddd-8740d0fa9ffd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:232","type":"CtInvocationImpl","sourcecode":"rts.put(rt, java.util.Collections.unmodifiableMap(rs))"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":86,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":191,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":132,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":130,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":131,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":51,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":104,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":133,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":165,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":228,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":175,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":153,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":201,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":143,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":145,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":144,"org.apache.commons.codec.language.NysiisTest.testCap":105,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":15,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":77,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":12,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":14,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":172,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":244,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":155,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":60,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":151,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":152,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":74,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":99,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":227,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":192,"org.apache.commons.codec.language.SoundexTest.testB650":129,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":94,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":63,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":87,"org.apache.commons.codec.language.SoundexTest.testNewInstance":137,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":200,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":216,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":188,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":91,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":198,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":245,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":230,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":214,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":174,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":194,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":67,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":224,"org.apache.commons.codec.language.NysiisTest.testDropBy":118,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":98,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":85,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":231,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":9,"org.apache.commons.codec.binary.Base64Test.testUUID":207,"org.apache.commons.codec.binary.Base64Test.testRfc2045Section2Dot1CrLfDefinition":66,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":83,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":69,"org.apache.commons.codec.binary.Base64Test.testConstructors":65,"org.apache.commons.codec.language.NysiisTest.testRule2":110,"org.apache.commons.codec.language.NysiisTest.testRule1":109,"org.apache.commons.codec.language.NysiisTest.testRule7":113,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":48,"org.apache.commons.codec.language.NysiisTest.testRule6":112,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":84,"org.apache.commons.codec.language.NysiisTest.testRule5":111,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":237,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":138,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":33,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":180,"org.apache.commons.codec.language.NysiisTest.testBran":114,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":121,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":39,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":73,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":160,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":5,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":168,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":221,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":248,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":225,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":205,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":139,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":125,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":240,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":56,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":171,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":57,"org.apache.commons.codec.language.NysiisTest.testDad":106,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":157,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":235,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":252,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":195,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":223,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":103,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":184,"org.apache.commons.codec.language.NysiisTest.testDan":107,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":162,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":217,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":241,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":44,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":159,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":220,"org.apache.commons.codec.binary.HexTest.testCustomCharset":178,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":58,"org.apache.commons.codec.language.NysiisTest.testSnat":116,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":97,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":79,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":96,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":122,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":193,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":32,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":158,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":163,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":31,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":196,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":242,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":72,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":232,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":45,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":20,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":40,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":43,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":154,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":226,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":76,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":233,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":236,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":213,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":35,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":102,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":0,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":249,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":34,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":190,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":219,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":54,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":142,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":140,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":141,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":156,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":161,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":8,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":173,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":229,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":47,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":169,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":199,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":182,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":50,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":197,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":238,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":17,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":41,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":134,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":95,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":6,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":16,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":80,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":61,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":78,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":124,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":30,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":189,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":215,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":222,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":7,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":148,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":49,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":179,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException":92,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":218,"org.apache.commons.codec.language.NysiisTest.testTranan":120,"org.apache.commons.codec.language.NysiisTest.testFal":108,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":13,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":147,"org.apache.commons.codec.language.NysiisTest.testSnad":115,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":10,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":82,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":167,"org.apache.commons.codec.language.MetaphoneTest.testTCH":185,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":123,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":126,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":186,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":127,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":128,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":23,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":210,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":101,"org.apache.commons.codec.binary.Base64Test.testBase64":209,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":28,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":59,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":176,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":62,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":26,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":170,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":25,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":181,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":202,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":211,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":239,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":243,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":90,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":187,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":117,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":206,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":71,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":246,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":251,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":150,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":4,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":135,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":183,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":146,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":177,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":149,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":234,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":212,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":88,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":204,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":93,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":38,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":81,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":164,"org.apache.commons.codec.language.NysiisTest.testOthers":119,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":208,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":100,"org.apache.commons.codec.language.SoundexTest.testDifference":136,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":11,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":203,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":89,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":22,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":250,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":247},"transformations":[{"failures":[0],"tindex":"56b80857-1225-11e6-b7f4-cd41ce05422c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"f+\", \"F\")","position":"org.apache.commons.codec.language.Caverphone2:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"status":-1},{"failures":[],"tindex":"56b82f68-1225-11e6-b7f4-4504f011b014","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"rightLength"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AEIJOUY, chr)) {\n    code = '0';\n} else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n    if (lastCode == '/') {\n        continue;\n    } \n    code = '-';\n} else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n    code = '1';\n} else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SCZ, nextChar)))) {\n    code = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.WFPV, chr)) {\n    code = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.GKQ, chr)) {\n    code = '4';\n} else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.CKQ, lastChar)))) {\n    code = '4';\n    input.addLeft('S');\n    rightLength++;\n} else if ((chr == 'S') || (chr == 'Z')) {\n    code = '8';\n} else if (chr == 'C') {\n    if (lastCode == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n            code = '4';\n        } else {\n            code = '8';\n        }\n    } else {\n        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n            code = '8';\n        } else {\n            code = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.TDX, chr)) {\n    code = '8';\n} else if (chr == 'R') {\n    code = '7';\n} else if (chr == 'L') {\n    code = '5';\n} else if ((chr == 'M') || (chr == 'N')) {\n    code = '6';\n} else {\n    code = chr;\n}","position":"org.apache.commons.codec.language.ColognePhonetic:347","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '0';\n} else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n    if (lastCode == '/') {\n        continue;\n    } \n    code = '-';\n} else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n    code = '1';\n} else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '4';\n} else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n    code = '4';\n    input.addLeft('S');\n    rightLength++;\n} else if ((chr == 'S') || (chr == 'Z')) {\n    code = '8';\n} else if (chr == 'C') {\n    if (lastCode == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n            code = '4';\n        } else {\n            code = '8';\n        }\n    } else {\n        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n            code = '8';\n        } else {\n            code = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '8';\n} else if (chr == 'R') {\n    code = '7';\n} else if (chr == 'L') {\n    code = '5';\n} else if ((chr == 'M') || (chr == 'N')) {\n    code = '6';\n} else {\n    code = chr;\n}"},"status":-2},{"failures":[1],"tindex":"56b85679-1225-11e6-b7f4-591b27c6cd94","series":0,"name":"replace","transplant":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"variableMap":{"bigBytes":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:547","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(data)"},"status":-1},{"failures":[],"tindex":"56b8567a-1225-11e6-b7f4-8be1afc3d75c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.this.charset","position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QCodec.this.charset","position":"org.apache.commons.codec.net.QCodec:328","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.java.nio.charset.Charset"},"status":-2},{"failures":[],"tindex":"56b8567b-1225-11e6-b7f4-77af3958a4c2","series":0,"name":"replace","transplant":{"toString":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"obj","ascii":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((byte[])(obj)))","position":"org.apache.commons.codec.binary.BaseNCodec:338","type":"CtReturnImpl","sourcecode":"return encode(((byte[])(obj)))"},"status":-3},{"failures":[2,3],"tindex":"56b87d8c-1225-11e6-b7f4-87366d5a037a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:666","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"56b87d8d-1225-11e6-b7f4-891d1c3045a1","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i = i","position":"org.apache.commons.codec.language.bm.PhoneticEngine:187","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int = i"},"variableMap":{"i":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:290","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer)"},"status":-2},{"failures":[],"tindex":"56b967ee-1225-11e6-b7f4-75e632fb77ff","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:413","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ly\", \"Ly\")","position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"status":-3},{"failures":[],"tindex":"56b967ef-1225-11e6-b7f4-9905710dc01c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code = chr","position":"org.apache.commons.codec.language.ColognePhonetic:391","type":"CtAssignmentImpl","sourcecode":"code = chr"},"status":-2},{"failures":[4,5,6,7,8,9,10],"tindex":"56b98f00-1225-11e6-b7f4-c1d043667049","series":0,"name":"replace","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:275","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"56b98f01-1225-11e6-b7f4-cfe07092c077","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} ","position":"org.apache.commons.codec.binary.Base32:308","type":"CtIfImpl","sourcecode":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} "},"status":0},{"failures":[],"tindex":"56b98f02-1225-11e6-b7f4-cda05cc6d738","series":0,"name":"replace","transplant":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inExtendedComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-2},{"failures":[11,12,13,14,15,16],"tindex":"56b98f03-1225-11e6-b7f4-6711e81d4dd2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.write(b)","position":"org.apache.commons.codec.net.URLCodec:179","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"56b98f04-1225-11e6-b7f4-bd7ee3a0132b","series":0,"name":"replace","transplant":{"toString":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"pos","tempResult":"buffer","pBytes":"buffer","keyLen":"readPos","cp":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if ((context.buffer) == null) {\n    context.buffer = new byte[getDefaultBufferSize()];\n    context.pos = 0;\n    context.readPos = 0;\n} else {\n    final byte[] b = new byte[(context.buffer.length) * (org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR)];\n    java.lang.System.arraycopy(context.buffer, 0, b, 0, context.buffer.length);\n    context.buffer = b;\n}","position":"org.apache.commons.codec.binary.BaseNCodec:249","type":"CtIfImpl","sourcecode":"if ((context.byte[]) == null) {\n    context.byte[] = new byte[getDefaultBufferSize()];\n    context.int = 0;\n    context.int = 0;\n} else {\n    final byte[] byte[] = new byte[(context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)];\n    java.lang.System.arraycopy(context.byte[], 0, b, 0, context.byte[].int);\n    context.byte[] = b;\n}"},"status":-2},{"failures":[2,3,17],"tindex":"56b9b615-1225-11e6-b7f4-63d697922d91","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"56b9b616-1225-11e6-b7f4-c1bf6392a534","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:260","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)"},"variableMap":{"data":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"tindex":"56b9b617-1225-11e6-b7f4-f770fab7a663","series":0,"name":"replace","transplant":{"toString":"hard = false","position":"org.apache.commons.codec.language.Metaphone:233","type":"CtAssignmentImpl","sourcecode":"hard = false"},"variableMap":{"hard":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = true","position":"org.apache.commons.codec.language.bm.Lang:150","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"status":-1},{"failures":[13],"tindex":"56b9b618-1225-11e6-b7f4-3709647959cc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.WWW_FORM_URL;\n} ","position":"org.apache.commons.codec.net.URLCodec:125","type":"CtIfImpl","sourcecode":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n} "},"status":-1},{"failures":[],"tindex":"56b9b619-1225-11e6-b7f4-a504440e4883","series":0,"name":"replace","transplant":{"toString":"final org.apache.commons.codec.language.bm.Languages.LanguageSet ls = guessLanguages(text)","position":"org.apache.commons.codec.language.bm.Lang:203","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text)"},"variableMap":{"text":"input"},"type":"adrStmt","transplantationPoint":{"toString":"final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.lang.guessLanguages(input)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:384","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input)"},"status":-2},{"failures":[44,45],"tindex":"56b9dd2a-1225-11e6-b7f4-a730a3487581","series":0,"name":"replace","transplant":{"toString":"right = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:304","type":"CtAssignmentImpl","sourcecode":"right = results[1]"},"variableMap":{"right":"left","results":"results"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:309","type":"CtAssignmentImpl","sourcecode":"left = results[0]"},"status":-1},{"failures":[46,47,48,49,50,51,52],"tindex":"56b9dd2b-1225-11e6-b7f4-2903e16f8872","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:100","type":"CtForImpl","sourcecode":"for (int int = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[53,54,55,56,57,58,59,60],"tindex":"56b9dd2c-1225-11e6-b7f4-e788e240ab3d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII.charAt(pos))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:363","type":"CtInvocationImpl","sourcecode":"sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos))"},"status":-1},{"failures":[],"tindex":"56b9dd2d-1225-11e6-b7f4-e542eb0d761b","series":0,"name":"replace","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"return (context.buffer) != null","position":"org.apache.commons.codec.binary.BaseNCodec:222","type":"CtReturnImpl","sourcecode":"return (context.byte[]) != null"},"status":-2},{"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73],"tindex":"56b9dd2e-1225-11e6-b7f4-e9ef3c021b96","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"status":-1},{"failures":[44,74,75,45],"tindex":"56b9dd2f-1225-11e6-b7f4-61e9e9000689","series":0,"name":"replace","transplant":{"toString":"n += 2","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"variableMap":{"n":"offset"},"type":"adrStmt","transplantationPoint":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8","position":"org.apache.commons.codec.digest.UnixCrypt:386","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8"},"status":-1},{"failures":[76],"tindex":"56ba0440-1225-11e6-b7f4-73034572e1c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (ascii instanceof char[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:122","type":"CtIfImpl","sourcecode":"if (ascii instanceof char[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n} "},"status":-1},{"failures":[13,14,16],"tindex":"56ba0441-1225-11e6-b7f4-47ff8d5692a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"status":-1},{"failures":[],"tindex":"56ba0442-1225-11e6-b7f4-db38b81a0a64","series":0,"name":"add","transplant":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"result = true"},"variableMap":{"result":"accept"},"type":"adrStmt","transplantationPoint":{"toString":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))","position":"org.apache.commons.codec.language.bm.Lang:177","type":"CtInvocationImpl","sourcecode":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))"},"status":-2},{"failures":[2],"tindex":"56ba0443-1225-11e6-b7f4-19085e4cf5f7","series":0,"name":"replace","transplant":{"toString":"int n = outLen","position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"variableMap":{"outLen":"maxLength"},"type":"adrStmt","transplantationPoint":{"toString":"final int addChars = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.maxLength) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.length())","position":"org.apache.commons.codec.language.DoubleMetaphone:979","type":"CtLocalVariableImpl","sourcecode":"final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length())"},"status":-1},{"failures":[],"tindex":"56ba0444-1225-11e6-b7f4-a97acea63b7b","series":0,"name":"replace","transplant":{"toString":"name2 = removeDoubleConsonants(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"variableMap":{"name2":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone2:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"status":-2},{"failures":[],"tindex":"56ba0445-1225-11e6-b7f4-c973d2574e4f","series":0,"name":"replace","transplant":{"toString":"int rounds = org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT","position":"org.apache.commons.codec.digest.Sha2Crypt:139","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int"},"variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_DEFAULT":"i"},"type":"adrStmt","transplantationPoint":{"toString":"final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])","position":"org.apache.commons.codec.net.URLCodec:173","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"status":-3},{"failures":[77,78,79,80,81,82],"tindex":"56ba2b56-1225-11e6-b7f4-112ae49e9f77","series":0,"name":"replace","transplant":{"toString":"local.setCharAt(0, 'W')","position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"local.setCharAt(0, 'W')"},"variableMap":{"local":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:487","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)"},"status":-1},{"failures":[2,3],"tindex":"56ba2b57-1225-11e6-b7f4-3b48d4cdd50d","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n    result.append('S');\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:607","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n    result.append('S');\n} else {\n    result.append('X');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:711","type":"CtIfImpl","sourcecode":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}"},"status":-1},{"failures":[],"tindex":"56ba2b58-1225-11e6-b7f4-cdc514b7c46e","series":0,"name":"replace","transplant":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:188","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":0},{"failures":[83,84,85,86,87,88,89,90,91],"tindex":"56ba5269-1225-11e6-b7f4-8586420da791","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.SEP, from)","position":"org.apache.commons.codec.net.RFC1522Codec:143","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[92],"tindex":"56ba526a-1225-11e6-b7f4-ed021295f900","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")","position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"status":-1},{"failures":[],"tindex":"56ba526b-1225-11e6-b7f4-ff14133883ff","series":0,"name":"replace","transplant":{"toString":"final java.lang.String body = ph.substring(1, ((ph.length()) - 1))","position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name1LtRStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:301","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[],"tindex":"56ba526c-1225-11e6-b7f4-f52994e7543a","series":0,"name":"replace","transplant":{"toString":"this.encodeTable = org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE","position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"lineSeparator","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"status":-2},{"failures":[],"tindex":"56ba526d-1225-11e6-b7f4-2b549670ea43","series":0,"name":"replace","transplant":{"toString":"return doubleMetaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DoubleMetaphone:206","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))","position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"status":-2},{"failures":[],"tindex":"56ba526e-1225-11e6-b7f4-17f2624a4dc5","series":0,"name":"add","transplant":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding())","position":"org.apache.commons.codec.net.RFC1522Codec:76","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding())"},"variableMap":{"buffer":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:287","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-2},{"failures":[],"tindex":"56ba797f-1225-11e6-b7f4-7fb916fdf18b","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"variableMap":{"maxCodeLen":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":-2},{"failures":[],"tindex":"56ba7980-1225-11e6-b7f4-efea3f9d608e","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.length = 0","position":"org.apache.commons.codec.language.ColognePhonetic:213","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = 0"},"variableMap":{"length":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:389","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-3},{"failures":[],"tindex":"56bb3cd1-1225-11e6-b7f4-9fa95009f0b2","series":0,"name":"replace","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"replacedName"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String dc : org.apache.commons.codec.language.MatchRatingApproachEncoder.DOUBLE_CONSONANT) {\n    if (replacedName.contains(dc)) {\n        final java.lang.String singleLetter = dc.substring(0, 1);\n        replacedName = replacedName.replace(dc, singleLetter);\n    } \n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:386","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n    if (replacedName.contains(dc)) {\n        final java.lang.String java.lang.String = dc.substring(0, 1);\n        replacedName = replacedName.replace(dc, singleLetter);\n    } \n}"},"status":-2},{"failures":[93,94,95,96,97,98,99,100,101],"tindex":"56bb3cd2-1225-11e6-b7f4-5104d2d45600","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ruleMapping.put(patternKey, rules)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:318","type":"CtInvocationImpl","sourcecode":"ruleMapping.put(patternKey, rules)"},"status":-1},{"failures":[42],"tindex":"56bb3cd3-1225-11e6-b7f4-213423271e10","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.endsWith(input, content)","position":"org.apache.commons.codec.language.bm.Rule:540","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.endsWith(input, content)"},"variableMap":{"input":"input","content":"bContent"},"type":"adrStmt","transplantationPoint":{"toString":"return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch)","position":"org.apache.commons.codec.language.bm.Rule:580","type":"CtReturnImpl","sourcecode":"return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch)"},"status":-1},{"failures":[102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"56bb3cd4-1225-11e6-b7f4-415ead40c81b","series":0,"name":"replace","transplant":{"toString":"final int sumLength = java.lang.Math.abs(((name1.length()) + (name2.length())))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:250","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.abs(((name1.length()) + (name2.length())))"},"variableMap":{"name2":"str","name1":"str"},"type":"adrStmt","transplantationPoint":{"toString":"final int len = str.length()","position":"org.apache.commons.codec.language.SoundexUtils:45","type":"CtLocalVariableImpl","sourcecode":"final int int = str.length()"},"status":-1},{"failures":[19,27,41,42],"tindex":"56bb63e5-1225-11e6-b7f4-4f440252941e","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:602","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[19,23,24,27,40,41,42,43],"tindex":"56bb63e6-1225-11e6-b7f4-519db826d687","series":0,"name":"replace","transplant":{"toString":"final java.lang.String combined = \"d\" + remainder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:412","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = \"d\" + remainder"},"variableMap":{"remainder":"regex"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String content = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()))","position":"org.apache.commons.codec.language.bm.Rule:502","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()))"},"status":-1},{"failures":[155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,1,174,175,176,177,178,179,180,181,182],"tindex":"56bb63e7-1225-11e6-b7f4-b1c8a114fa0a","series":0,"name":"replace","transplant":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"i","l_ascii":"out","bits":"j"},"type":"adrStmt","transplantationPoint":{"toString":"out[(j++)] = toDigits[(15 & (data[i]))]","position":"org.apache.commons.codec.binary.Hex:146","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[(15 & (data[i]))]"},"status":-1},{"failures":[183,184,185,186,187,188,189],"tindex":"56bb63e8-1225-11e6-b7f4-ad1fd26794b7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((index >= 0) && (index < ((string.length()) - 1))) {\n    matches = (string.charAt((index + 1))) == c;\n} ","position":"org.apache.commons.codec.language.Metaphone:353","type":"CtIfImpl","sourcecode":"if ((index >= 0) && (index < ((string.length()) - 1))) {\n    matches = (string.charAt((index + 1))) == c;\n} "},"status":-1},{"failures":[190],"tindex":"56bb63e9-1225-11e6-b7f4-1d6056f06bf0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"mb$\", \"m2\")","position":"org.apache.commons.codec.language.Caverphone2:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"status":-1},{"failures":[],"tindex":"56bb63ea-1225-11e6-b7f4-976ccccd9452","series":0,"name":"replace","transplant":{"toString":"this.encodeTable = org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE","position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"lineSeparator","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineSeparator = new byte[lineSeparator.length]","position":"org.apache.commons.codec.binary.Base32:300","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[lineSeparator.int]"},"status":-3},{"failures":[],"tindex":"56bb8afb-1225-11e6-b7f4-4542fb31f482","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"sh\", \"s2\")","position":"org.apache.commons.codec.language.Caverphone1:84","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"variableMap":{"txt":"value"},"type":"adrStmt","transplantationPoint":{"toString":"value = cleanInput(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"status":-2},{"failures":[78],"tindex":"56bb8afc-1225-11e6-b7f4-61de3caec800","series":0,"name":"replace","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null)","position":"org.apache.commons.codec.digest.Crypt:46","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null)"},"status":-1},{"failures":[],"tindex":"56bb8afd-1225-11e6-b7f4-05cb53169a54","series":0,"name":"add","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return 0","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[15],"tindex":"56bb8afe-1225-11e6-b7f4-994d947069b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('*')","position":"org.apache.commons.codec.net.URLCodec:89","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('*')"},"status":-1},{"failures":[40],"tindex":"56bb8aff-1225-11e6-b7f4-75355c0664de","series":0,"name":"replace","transplant":{"toString":"if (input == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"variableMap":{"input":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"status":-1},{"failures":[155,156,191,158,159,160,161,192,162,164,193,166,167,194,169,170,171,172,173,1,174,175,176,83,84,85,86,87,88,89,90,11,13,14,15,195,16,196,197,198,46,199,47,200,201,202,48,203,204,205,61,62,206,207,208,69,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,177,179,180,231,232,233,234,235,236,72,237,238,239,240,241,242,243,244,245,246,73,247,248,249,250,251,252],"tindex":"56bbb210-1225-11e6-b7f4-a383fe11c3cd","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:673","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return string.getBytes(charset)","position":"org.apache.commons.codec.binary.StringUtils:96","type":"CtReturnImpl","sourcecode":"return string.getBytes(charset)"},"status":-1},{"failures":[18,19,22,23,24,27,28,31,32,34,38,39,40,41,42,43],"tindex":"56bbb211-1225-11e6-b7f4-b3cbe640b6d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inExtendedComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-1},{"failures":[208,210,213,215],"tindex":"56bbb212-1225-11e6-b7f4-57135c8e4b99","series":0,"name":"replace","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false))","position":"org.apache.commons.codec.binary.Base64:569","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false))"},"status":-1},{"failures":[],"tindex":"56bbb213-1225-11e6-b7f4-4f43052d2d87","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator)","position":"org.apache.commons.codec.binary.Base32:296","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator)"},"status":-2},{"failures":[],"tindex":"56bbb214-1225-11e6-b7f4-d5786ec0e6fa","series":0,"name":"replace","transplant":{"toString":"return decode(str, getDefaultCharset())","position":"org.apache.commons.codec.net.URLCodec:293","type":"CtReturnImpl","sourcecode":"return decode(str, getDefaultCharset())"},"variableMap":{"str":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt)","position":"org.apache.commons.codec.digest.Crypt:75","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt)"},"status":-2},{"failures":[],"tindex":"56bbb215-1225-11e6-b7f4-132afeb607dc","series":0,"name":"replace","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"y","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"c","minRating":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"y","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"c"},"type":"adrStmt","transplantationPoint":{"toString":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"status":-3},{"failures":[],"tindex":"56bbd926-1225-11e6-b7f4-65453e84db50","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[9]","position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(encodeSize, context)","position":"org.apache.commons.codec.binary.Base64:342","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-2},{"failures":[],"tindex":"56bbd927-1225-11e6-b7f4-b7452c6b38bd","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384, key)","position":"org.apache.commons.codec.digest.HmacUtils:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"56bbd928-1225-11e6-b7f4-c9d00c18affa","series":0,"name":"add","transplant":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"source","l":"source"},"type":"adrStmt","transplantationPoint":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"56bbd929-1225-11e6-b7f4-65abb1048c9b","series":0,"name":"replace","transplant":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","text":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inExtendedComment = true;\n} else if ((line.length()) > 0) {\n    ls.add(line);\n} ","position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = true;\n} else if ((line.length()) > 0) {\n    ls.add(line);\n} "},"status":-2},{"failures":[],"tindex":"56bc003a-1225-11e6-b7f4-0f9f868d2331","series":0,"name":"replace","transplant":{"toString":"return length","position":"org.apache.commons.codec.language.ColognePhonetic:219","type":"CtReturnImpl","sourcecode":"return int"},"variableMap":{"length":"i"},"type":"adrStmt","transplantationPoint":{"toString":"return i","position":"org.apache.commons.codec.net.Utils:47","type":"CtReturnImpl","sourcecode":"return i"},"status":-3},{"failures":[],"tindex":"56bc003b-1225-11e6-b7f4-cba0bc952cef","series":0,"name":"replace","transplant":{"toString":"hard = true","position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"variableMap":{"hard":"concat"},"type":"adrStmt","transplantationPoint":{"toString":"this.concat = concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"status":-2},{"failures":[],"tindex":"56bc003c-1225-11e6-b7f4-c5c7ede3ac08","series":0,"name":"replace","transplant":{"toString":"return doubleMetaphone(value, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)","position":"org.apache.commons.codec.net.URLCodec:273","type":"CtReturnImpl","sourcecode":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":70,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
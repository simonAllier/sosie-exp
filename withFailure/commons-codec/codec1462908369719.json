{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":17,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":131,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":130,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":50,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":48,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":49,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":88,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":128,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":81,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":93,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":74,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":20,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":77,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":75,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":78,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":120,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":13,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":107,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":68,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":61,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":63,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":62,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":102,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":97,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":103,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":12,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":60,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":58,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":0,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":104,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":4,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":59,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":105,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":67,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":109,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":19,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":76,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":52,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":129,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":133,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":90,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":1,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":25,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":42,"org.apache.commons.codec.language.SoundexTest.testB650":47,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":118,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":84,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":38,"org.apache.commons.codec.language.SoundexTest.testNewInstance":55,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":119,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":9,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":65,"org.apache.commons.codec.language.NysiisTest.testFal":85,"org.apache.commons.codec.language.MetaphoneTest.testTCH":29,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":21,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":115,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":44,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":45,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":80,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":5,"org.apache.commons.codec.language.NysiisTest.testDropBy":87,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":135,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":132,"org.apache.commons.codec.binary.Base64Test.testBase64":114,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":36,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":92,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":18,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":32,"org.apache.commons.codec.binary.Base64Test.testUUID":99,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":91,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":108,"org.apache.commons.codec.binary.Base64Test.testSingletons":112,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":34,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":122,"org.apache.commons.codec.binary.Base64Test.testPairs":98,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":69,"org.apache.commons.codec.language.NysiisTest.testRule1":86,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":121,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":116,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":70,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":95,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":35,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":79,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":24,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":7,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":41,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":56,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":96,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":53,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":2,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":125,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":110,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":117,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":39,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":64,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":8,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":111,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":83,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":89,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":57,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":82,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":16,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":123,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":23,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":101,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":113,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":22,"org.apache.commons.codec.language.SoundexTest.testDifference":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":134,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":14,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":40,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":127,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":100,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":73},"transformations":[{"failures":[0,1],"tindex":"0caf5d87-16e5-11e6-9733-29fb1a45f0f1","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))","position":"org.apache.commons.codec.digest.DigestUtils:688","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)","position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)"},"status":-1},{"failures":[],"tindex":"0cafaba8-16e5-11e6-9733-4d6f85194d7b","series":0,"name":"add","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"status":-2},{"failures":[],"tindex":"0cafaba9-16e5-11e6-9733-51f0419c411a","series":0,"name":"add","transplant":{"toString":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")","position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.QCodec:232","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10],"tindex":"0cafabaa-16e5-11e6-9733-ade8e2bb8aac","series":0,"name":"replace","transplant":{"toString":"sb.append(\"Rule\")","position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"status":-1},{"failures":[11,12,13,14,15,16,17,18,19],"tindex":"0cafd2bb-16e5-11e6-9733-1ff443c10821","series":0,"name":"replace","transplant":{"toString":"final int digit = java.lang.Character.digit(ch, 16)","position":"org.apache.commons.codec.binary.Hex:176","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Character.digit(ch, 16)"},"variableMap":{"ch":"c"},"type":"adrStmt","transplantationPoint":{"toString":"final int pos = org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE.indexOf(c)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:361","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c)"},"status":-1},{"failures":[],"tindex":"0cafd2bc-16e5-11e6-9733-3992e03ca32e","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:413","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"text","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"text"},"type":"adrStmt","transplantationPoint":{"toString":"text = preprocess(text)","position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"status":-3},{"failures":[20,21,22,23,24,25],"tindex":"0cafd2bd-16e5-11e6-9733-99c0bcc9a707","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:479","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)"},"status":-1},{"failures":[26,27,28],"tindex":"0caff9ce-16e5-11e6-9733-af2d88e03218","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:485","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)"},"status":-1},{"failures":[2,29],"tindex":"0caff9cf-16e5-11e6-9733-4d428a517229","series":0,"name":"replace","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:199","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"0cb020e0-16e5-11e6-9733-5d234d71cd9b","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Rule:602","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"0cb020e1-16e5-11e6-9733-6dce2488bcba","series":0,"name":"replace","transplant":{"toString":"tempResult = altCtx.digest()","position":"org.apache.commons.codec.digest.Sha2Crypt:324","type":"CtAssignmentImpl","sourcecode":"tempResult = altCtx.digest()"},"variableMap":{"tempResult":"finalb","altCtx":"ctx1"},"type":"adrStmt","transplantationPoint":{"toString":"finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:277","type":"CtAssignmentImpl","sourcecode":"finalb = ctx1.digest()"},"status":-3},{"failures":[],"tindex":"0cb020e2-16e5-11e6-9733-9b99e29f7bd2","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"branch.finish()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:555","type":"CtInvocationImpl","sourcecode":"branch.finish()"},"status":-2},{"failures":[30],"tindex":"0cb047f3-16e5-11e6-9733-8129c1b49c66","series":0,"name":"replace","transplant":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"text"},"type":"adrStmt","transplantationPoint":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"status":-1},{"failures":[],"tindex":"0cb06f04-16e5-11e6-9733-814feb8db076","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Nysiis:214","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))","position":"org.apache.commons.codec.binary.BinaryCodec:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))"},"status":-2},{"failures":[31,32,33],"tindex":"0cb06f05-16e5-11e6-9733-ed59be5e1bb1","series":0,"name":"replace","transplant":{"toString":"return +1","position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:402","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"failures":[34,35,36,37,38,39,40,41],"tindex":"0cb09616-16e5-11e6-9733-31fa3ddec539","series":0,"name":"add","transplant":{"toString":"j++","position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"variableMap":{"j":"from"},"type":"adrStmt","transplantationPoint":{"toString":"from = to + 1","position":"org.apache.commons.codec.net.RFC1522Codec:151","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"status":-1},{"failures":[],"tindex":"0cb09617-16e5-11e6-9733-4fa6d3e118b4","series":0,"name":"add","transplant":{"toString":"this.acceptOnMatch = acceptOnMatch","position":"org.apache.commons.codec.language.bm.Lang:88","type":"CtAssignmentImpl","sourcecode":"this.boolean = acceptOnMatch"},"variableMap":{"acceptOnMatch":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"result = true"},"status":-2},{"failures":[20,21,22,23,25],"tindex":"0cb0e438-16e5-11e6-9733-b3aa8d22619a","series":0,"name":"replace","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:466","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer)"},"status":-1},{"failures":[],"tindex":"0cb10b49-16e5-11e6-9733-8dc49fb43dc1","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[],"tindex":"0cb10b4a-16e5-11e6-9733-79eb76f6b54a","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"i","to":"i"},"type":"adrStmt","transplantationPoint":{"toString":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} "},"status":-2},{"failures":[],"tindex":"0cb1325b-16e5-11e6-9733-db1f8557c755","series":0,"name":"add","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int minRating = 0","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:185","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"0cb1325c-16e5-11e6-9733-6343d96480eb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"out[0] = str.charAt(0)","position":"org.apache.commons.codec.language.Soundex:269","type":"CtAssignmentImpl","sourcecode":"out[0] = str.charAt(0)"},"status":-1},{"failures":[64],"tindex":"0cb1325d-16e5-11e6-9733-676cebd4aa09","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"status":-1},{"failures":[],"tindex":"0cb1325e-16e5-11e6-9733-ebe357b9f8d9","series":0,"name":"replace","transplant":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:177","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"0cb1596f-16e5-11e6-9733-b578abe0f26f","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (ascii.length) - 1 ; ii < (l_raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n        } \n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:181","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n        } \n    }\n}"},"status":-2},{"failures":[34,36,37,38,65,66,67,68,69,70,71,72],"tindex":"0cb15970-16e5-11e6-9733-a35c31113e10","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"i","to":"i"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.CR)) {\n        continue;\n    } \n    final int u = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n    final int l = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    buffer.write(((char)((u << 4) + l)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:360","type":"CtTryImpl","sourcecode":"try {\n    if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n        continue;\n    } \n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    buffer.write(((char)((u << 4) + l)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n}"},"status":-1},{"failures":[],"tindex":"0cb21cc1-16e5-11e6-9733-d1ad9e9eba63","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('/')","position":"org.apache.commons.codec.net.QCodec:80","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('/')"},"status":0},{"failures":[73,74],"tindex":"0cb21cc2-16e5-11e6-9733-978ecce60463","series":0,"name":"replace","transplant":{"toString":"cp += blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"variableMap":{"blocksize":"right","cp":"right"},"type":"adrStmt","transplantationPoint":{"toString":"right = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:306","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-1},{"failures":[],"tindex":"0cb21cc3-16e5-11e6-9733-bf5dd2f7873c","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")","position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:186","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":0},{"failures":[],"tindex":"0cb21cc4-16e5-11e6-9733-d77bca60fa21","series":0,"name":"replace","transplant":{"toString":"return encode(((java.lang.String)(pObject)))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:114","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(pObject)))"},"variableMap":{"pObject":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray())","position":"org.apache.commons.codec.binary.BinaryCodec:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray())"},"status":-2},{"failures":[],"tindex":"0cb21cc5-16e5-11e6-9733-851b7e908918","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"length","to":"length"},"type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String leftCharacter = parts[0];\n    final java.lang.String rightCharacter = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:286","type":"CtIfImpl","sourcecode":"if ((parts.int) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String java.lang.String = parts[0];\n    final java.lang.String java.lang.String = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}"},"status":-2},{"failures":[75,76,77,78,79,80,81,82],"tindex":"0cb243d6-16e5-11e6-9733-2b4bd3018290","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int cLine = currentLine;\n        final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(myLine);\n                sb.append(\", loc='\").append(loc).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String patternKey = r.pattern.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"0cb26ae7-16e5-11e6-9733-09fc448f1619","series":0,"name":"replace","transplant":{"toString":"final int[] schedule = new int[32]","position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int[] results = new int[2]","position":"org.apache.commons.codec.digest.UnixCrypt:298","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"status":-2},{"failures":[],"tindex":"0cb26ae8-16e5-11e6-9733-a32572f0c10f","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"y\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"k+\", \"K\")","position":"org.apache.commons.codec.language.Caverphone2:102","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"status":0},{"failures":[],"tindex":"0cb26ae9-16e5-11e6-9733-49933873eacf","series":0,"name":"add","transplant":{"toString":"c = (c >>> 2) | (c << 26)","position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 2) | (c << 26)"},"variableMap":{"c":"b"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:332","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer)"},"status":0},{"failures":[],"tindex":"0cb291fa-16e5-11e6-9733-5b6a5344bf49","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"mb$\", \"m2\")","position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"cq\", \"2q\")","position":"org.apache.commons.codec.language.Caverphone2:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"status":0},{"failures":[26,27,28],"tindex":"0cb291fb-16e5-11e6-9733-6fd5d66859c0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"status":-1},{"failures":[],"tindex":"0cb291fc-16e5-11e6-9733-b7e85fc0f3ab","series":0,"name":"replace","transplant":{"toString":"char lastChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char mappedChar = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index))","position":"org.apache.commons.codec.language.Soundex:185","type":"CtLocalVariableImpl","sourcecode":"final char char = org.apache.commons.codec.language.Soundex.this.map(str.charAt(index))"},"status":-2},{"failures":[],"tindex":"0cb291fd-16e5-11e6-9733-7f5b330cbab3","series":0,"name":"replace","transplant":{"toString":"if (input == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"variableMap":{"input":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_512"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX, org.apache.commons.codec.digest.Sha2Crypt.SHA512_BLOCKSIZE, org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_512)","position":"org.apache.commons.codec.digest.Sha2Crypt:543","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"0cb291fe-16e5-11e6-9733-356d4652fc5e","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"branch.finish()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:555","type":"CtInvocationImpl","sourcecode":"branch.finish()"},"status":-2},{"failures":[73,74],"tindex":"0cb2b90f-16e5-11e6-9733-7b8269ff89e2","series":0,"name":"add","transplant":{"toString":"c = (c >>> 1) | (c << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 1) | (c << 27)"},"variableMap":{"c":"c"},"type":"adrStmt","transplantationPoint":{"toString":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)","position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"status":-1},{"failures":[],"tindex":"0cb2b910-16e5-11e6-9733-11ce8a9fba43","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('$')","position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"status":-2},{"failures":[],"tindex":"0cb2b911-16e5-11e6-9733-bf9dd4f75d00","series":0,"name":"add","transplant":{"toString":"return soundex(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.RefinedSoundex:137","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"variableMap":{"obj":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))","position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"status":-2},{"failures":[],"tindex":"0cb2b912-16e5-11e6-9733-b72b70d2764f","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"variableMap":{"charset":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"status":-3},{"failures":[75,76,77,78],"tindex":"0cb2b913-16e5-11e6-9733-0976246079ba","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:577","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}"},"variableMap":{"input":"input","bContent":"input","this":"this","shouldMatch":"endsWith"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} "},"status":-1},{"failures":[],"tindex":"0cb2e024-16e5-11e6-9733-677ea31c52c7","series":0,"name":"replace","transplant":{"toString":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}","position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtIfImpl","sourcecode":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}"},"variableMap":{"input":"this","this":"this","content":"this"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:529","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n    }\n}"},"status":-2},{"failures":[],"tindex":"0cb30735-16e5-11e6-9733-7de4c7ecb043","series":0,"name":"replace","transplant":{"toString":"s = (s << 4) | (s >>> 28)","position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"variableMap":{"s":"r"},"type":"adrStmt","transplantationPoint":{"toString":"r = read(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:99","type":"CtAssignmentImpl","sourcecode":"r = read(byte[], 0, 1)"},"status":-2},{"failures":[],"tindex":"0cb30736-16e5-11e6-9733-bf04f4206eb8","series":0,"name":"add","transplant":{"toString":"name2 = removeDoubleConsonants(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:236","type":"CtAssignmentImpl","sourcecode":"name2 = removeDoubleConsonants(name2)"},"variableMap":{"name2":"line"},"type":"adrStmt","transplantationPoint":{"toString":"line = line.substring(0, cmtI)","position":"org.apache.commons.codec.language.bm.Lang:155","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-2},{"failures":[83,84],"tindex":"0cb30737-16e5-11e6-9733-373794e4bca3","series":0,"name":"replace","transplant":{"toString":"final boolean shouldMatch = !negate","position":"org.apache.commons.codec.language.bm.Rule:557","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = !negate"},"variableMap":{"negate":"forceAppend"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean append = (((lastReplacement) == null) || (!(lastReplacement.endsWith(replacement)))) || forceAppend","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:136","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend"},"status":-1},{"failures":[],"tindex":"0cb32e48-16e5-11e6-9733-59ca4c90bd8c","series":0,"name":"replace","transplant":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"phonemeText","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"phonemeText","text":"phonemeText"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (phonemeText.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication rulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , maxPhonemes).invoke();\n    final boolean found = rulesApplication.isFound();\n    subBuilder = rulesApplication.getPhonemeBuilder();\n    if (!found) {\n        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n    } \n    i = rulesApplication.getI();\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (phonemeText.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n    final boolean boolean = rulesApplication.isFound();\n    subBuilder = rulesApplication.getPhonemeBuilder();\n    if (!found) {\n        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n    } \n    i = rulesApplication.getI();\n}"},"status":-3},{"failures":[],"tindex":"0cb32e49-16e5-11e6-9733-3dd7cb7d2f86","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[76],"tindex":"0cb3555a-16e5-11e6-9733-ede24120a16b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"words2.add(lastPart)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:435","type":"CtInvocationImpl","sourcecode":"words2.add(lastPart)"},"status":-1},{"failures":[85,86,87],"tindex":"0cb3555b-16e5-11e6-9733-49f1295cb736","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_PH_PF.matcher(str).replaceFirst(\"FF\")","position":"org.apache.commons.codec.language.Nysiis:264","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\")"},"status":-1},{"failures":[],"tindex":"0cb3555c-16e5-11e6-9733-e7f3cb2600bf","series":0,"name":"replace","transplant":{"toString":"if (((pad) == element) || (isInAlphabet(element))) {\n    return true;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:500","type":"CtIfImpl","sourcecode":"if (((byte) == element) || (isInAlphabet(element))) {\n    return true;\n} "},"variableMap":{"pad":"pad","element":"pad"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (arrayOctet.length) ; i++) {\n    if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (pad)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.binary.BaseNCodec:464","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n    if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n        return false;\n    } \n}"},"status":-2},{"failures":[75,76,77,78,81],"tindex":"0cb3555d-16e5-11e6-9733-3b8eae4f4bfd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.clear()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:124","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.clear()"},"status":-1},{"failures":[88],"tindex":"0cb37c6e-16e5-11e6-9733-17add58a67e5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)","position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)"},"variableMap":{"binaryData":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()"},"status":-1},{"failures":[],"tindex":"0cb37c6f-16e5-11e6-9733-df8333ff2978","series":0,"name":"replace","transplant":{"toString":"t = (t >>> 4) | (t << 28)","position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"this.decodeSize = (org.apache.commons.codec.binary.Base32.this.encodeSize) - 1","position":"org.apache.commons.codec.binary.Base32:306","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base32.this.int) - 1"},"status":-2},{"failures":[],"tindex":"0cb37c70-16e5-11e6-9733-793bb8d974b5","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int numSaltChars = org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS.length","position":"org.apache.commons.codec.digest.UnixCrypt:201","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int"},"status":-2},{"failures":[],"tindex":"0cb37c71-16e5-11e6-9733-57be28cc79cd","series":0,"name":"replace","transplant":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"status":-2},{"failures":[],"tindex":"0cb3a382-16e5-11e6-9733-3744834f70ec","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:103","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"0cb3a383-16e5-11e6-9733-ab21968ce453","series":0,"name":"add","transplant":{"toString":"buffer[((context.pos)++)] = encodeTable[((context.ibitWorkArea) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))]","position":"org.apache.commons.codec.binary.Base64:390","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"encodeTable","ibitWorkArea":"org.apache.commons.codec.binary.Base32.MASK_5BITS","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 30))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:510","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"0cb3ca94-16e5-11e6-9733-61290fb63be8","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))","position":"org.apache.commons.codec.digest.Md5Crypt:72","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"variableMap":{"keyBytes":"bytes","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"charsetName"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return new java.lang.String(bytes , charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}","position":"org.apache.commons.codec.binary.StringUtils:283","type":"CtTryImpl","sourcecode":"try {\n    return new java.lang.String(bytes , charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}"},"status":-3},{"failures":[],"tindex":"0cb3ca95-16e5-11e6-9733-ebfd90f5e938","series":0,"name":"replace","transplant":{"toString":"int index = isSilentStart(value) ? 1 : 0","position":"org.apache.commons.codec.language.DoubleMetaphone:93","type":"CtLocalVariableImpl","sourcecode":"int int = isSilentStart(value) ? 1 : 0"},"variableMap":{"value":"ph"},"type":"adrStmt","transplantationPoint":{"toString":"final int open = ph.indexOf(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"status":-2},{"failures":[89,90,91,92,93],"tindex":"0cb3ca96-16e5-11e6-9733-8da0ef22999a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.readPos += len","position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += len"},"status":-2},{"failures":[],"tindex":"0cb3ca97-16e5-11e6-9733-d1531c64828c","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"languageRulesResourceName"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    boolean inExtendedComment = false;\n    while (scanner.hasNextLine()) {\n        final java.lang.String rawLine = scanner.nextLine();\n        java.lang.String line = rawLine;\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n                inExtendedComment = true;\n            } else {\n                final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n                if (cmtI >= 0) {\n                    line = line.substring(0, cmtI);\n                } \n                line = line.trim();\n                if ((line.length()) == 0) {\n                    continue;\n                } \n                final java.lang.String[] parts = line.split(\"\\\\s+\");\n                if ((parts.length) != 3) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                } \n                final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n                final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n                final boolean accept = parts[2].equals(\"true\");\n                rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n            }\n        }\n    }\n} finally {\n    scanner.close();\n}","position":"org.apache.commons.codec.language.bm.Lang:138","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (scanner.hasNextLine()) {\n        final java.lang.String java.lang.String = scanner.nextLine();\n        java.lang.String java.lang.String = rawLine;\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = true;\n            } else {\n                final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n                if (cmtI >= 0) {\n                    line = line.substring(0, cmtI);\n                } \n                line = line.trim();\n                if ((line.length()) == 0) {\n                    continue;\n                } \n                final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n                if ((parts.int) != 3) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n                } \n                final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n                final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n                final boolean boolean = parts[2].equals(\"true\");\n                rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n            }\n        }\n    }\n} finally {\n    scanner.close();\n}"},"status":-2},{"failures":[31,32,33,94],"tindex":"0cb3f1a8-16e5-11e6-9733-c1c6aebd1dc6","series":0,"name":"add","transplant":{"toString":"result.append('0', 'T')","position":"org.apache.commons.codec.language.DoubleMetaphone:690","type":"CtInvocationImpl","sourcecode":"result.append('0', 'T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:399","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"0cb3f1a9-16e5-11e6-9733-935f7b62c4e6","series":0,"name":"add","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"variableMap":{"input":"this","this":"this","content":"bContent"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} "},"status":-2},{"failures":[],"tindex":"0cb418ba-16e5-11e6-9733-3f0ca30dc8df","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:144","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[],"tindex":"0cb43fcb-16e5-11e6-9733-a5ef387073ac","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:600","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"status":-3},{"failures":[],"tindex":"0cb43fcc-16e5-11e6-9733-937ebb875176","series":0,"name":"replace","transplant":{"toString":"final int t = ((a >>> n) ^ b) & m","position":"org.apache.commons.codec.digest.UnixCrypt:406","type":"CtLocalVariableImpl","sourcecode":"final int int = ((a >>> n) ^ b) & m"},"variableMap":{"a":"pos","b":"pos","m":"pos","n":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"final int savedPos = context.pos","position":"org.apache.commons.codec.binary.Base32:446","type":"CtLocalVariableImpl","sourcecode":"final int int = context.int"},"status":-2},{"failures":[95],"tindex":"0cb43fcd-16e5-11e6-9733-69bdc35e22b0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"b\", \"p\")","position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"status":-1},{"failures":[],"tindex":"0cb43fce-16e5-11e6-9733-0bfa9df6cb7a","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, cnt)","position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-2},{"failures":[],"tindex":"0cb43fcf-16e5-11e6-9733-83f70c41de85","series":0,"name":"replace","transplant":{"toString":"final java.lang.String combined = l + remainder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:420","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = l + remainder"},"variableMap":{"l":"rawLine","remainder":"rawLine"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"status":-2},{"failures":[],"tindex":"0cb466e0-16e5-11e6-9733-0d335e575d88","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)","position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)"},"variableMap":{"tmp":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:260","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)"},"status":-2},{"failures":[],"tindex":"0cb466e1-16e5-11e6-9733-a1483c5190ed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.encodeTable = org.apache.commons.codec.binary.Base32.ENCODE_TABLE","position":"org.apache.commons.codec.binary.Base32:287","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[],"tindex":"0cb466e2-16e5-11e6-9733-cf8b97c685b4","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"status":-2},{"failures":[],"tindex":"0cb466e3-16e5-11e6-9733-edfb5a2246eb","series":0,"name":"add","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"adrStmt","transplantationPoint":{"toString":"return matches","position":"org.apache.commons.codec.language.Metaphone:357","type":"CtReturnImpl","sourcecode":"return matches"},"status":-2},{"failures":[],"tindex":"0cb48df4-16e5-11e6-9733-b3685ea64c4d","series":0,"name":"replace","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"r"},"type":"adrStmt","transplantationPoint":{"toString":"if (r > 0) {\n    final byte b = singleByte[0];\n    return b < 0 ? 256 + b : b;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtIfImpl","sourcecode":"if (r > 0) {\n    final byte byte = byte[][0];\n    return b < 0 ? 256 + b : b;\n} "},"status":-2},{"failures":[],"tindex":"0cb48df5-16e5-11e6-9733-fb9f295ed700","series":0,"name":"replace","transplant":{"toString":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.SIX_1;\n} ","position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE","org.apache.commons.codec.language.Caverphone1.SIX_1":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE"},"type":"adrStmt","transplantationPoint":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"status":-2},{"failures":[],"tindex":"0cb48df6-16e5-11e6-9733-77446b89585a","series":0,"name":"add","transplant":{"toString":"final char hex1 = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:184","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16))"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"toString":"final char hwChar = str.charAt((index - 1))","position":"org.apache.commons.codec.language.Soundex:188","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 1))"},"status":-2},{"failures":[],"tindex":"0cb4b507-16e5-11e6-9733-7fa7af12d226","series":0,"name":"add","transplant":{"toString":"this.encodedBlockSize = encodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"variableMap":{"encodedBlockSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:559","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"0cb4b508-16e5-11e6-9733-e9ce86ea8661","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder buffer = new java.lang.StringBuilder()","position":"org.apache.commons.codec.net.RFC1522Codec:72","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"0cb4b509-16e5-11e6-9733-43cd2bbd7fac","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.digest.UnixCrypt.SHIFT2[i]) {\n    c = (c >>> 2) | (c << 26);\n    d = (d >>> 2) | (d << 26);\n} else {\n    c = (c >>> 1) | (c << 27);\n    d = (d >>> 1) | (d << 27);\n}","position":"org.apache.commons.codec.digest.UnixCrypt:361","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n    c = (c >>> 2) | (c << 26);\n    d = (d >>> 2) | (d << 26);\n} else {\n    c = (c >>> 1) | (c << 27);\n    d = (d >>> 1) | (d << 27);\n}"},"status":-2},{"failures":[],"tindex":"0cb4b50a-16e5-11e6-9733-df7ab2d988c6","series":0,"name":"replace","transplant":{"toString":"value = cleanInput(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"variableMap":{"value":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"w3\", \"W3\")","position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w3\", \"W3\")"},"status":-2},{"failures":[],"tindex":"0cb4b50b-16e5-11e6-9733-c59de4263323","series":0,"name":"replace","transplant":{"toString":"final int patternLength = org.apache.commons.codec.language.bm.Rule.this.pattern.length()","position":"org.apache.commons.codec.language.bm.Rule:703","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length()"},"variableMap":{"pattern":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"final int name2Size = (name2.length()) - 1","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:299","type":"CtLocalVariableImpl","sourcecode":"final int int = (name2.length()) - 1"},"status":-3},{"failures":[96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,39,40,41],"tindex":"0cb4dc1c-16e5-11e6-9733-f18ff35f11db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"decode(pArray, 0, pArray.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:410","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, pArray.int, context)"},"status":-1},{"failures":[],"tindex":"0cb4dc1d-16e5-11e6-9733-19361ad922e8","series":0,"name":"replace","transplant":{"toString":"data = doDecoding(data)","position":"org.apache.commons.codec.net.RFC1522Codec:154","type":"CtAssignmentImpl","sourcecode":"data = doDecoding(data)"},"variableMap":{"data":"org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"toString":"this.decodeTable = org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE","position":"org.apache.commons.codec.binary.Base32:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[],"tindex":"0cb4dc1e-16e5-11e6-9733-550d99fac358","series":0,"name":"replace","transplant":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[124,125],"tindex":"0cb4dc1f-16e5-11e6-9733-a5886037a95f","series":0,"name":"replace","transplant":{"toString":"return resizedBytes","position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"variableMap":{"resizedBytes":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"status":-1},{"failures":[126,127],"tindex":"0cb4dc20-16e5-11e6-9733-b19dc6af414b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:413","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[],"tindex":"0cb50331-16e5-11e6-9733-c7d3f244f20d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (startsWithBox && endsWithBox) {\n    java.lang.String boxContent = content.substring(1, ((content.length()) - 1));\n    if (!(boxContent.contains(\"[\"))) {\n        final boolean negate = boxContent.startsWith(\"^\");\n        if (negate) {\n            boxContent = boxContent.substring(1);\n        } \n        final java.lang.String bContent = boxContent;\n        final boolean shouldMatch = !negate;\n        if (startsWith && endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (startsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                }\n            };\n        } \n    } \n} ","position":"org.apache.commons.codec.language.bm.Rule:548","type":"CtIfImpl","sourcecode":"if (startsWithBox && endsWithBox) {\n    java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n    if (!(boxContent.contains(\"[\"))) {\n        final boolean boolean = boxContent.startsWith(\"^\");\n        if (negate) {\n            boxContent = boxContent.substring(1);\n        } \n        final java.lang.String java.lang.String = boxContent;\n        final boolean boolean = !negate;\n        if (startsWith && endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (startsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                }\n            };\n        } else if (endsWith) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                }\n            };\n        } \n    } \n} "},"status":0},{"failures":[128],"tindex":"0cb52a42-16e5-11e6-9733-53e8a66be794","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"len += (((len + (lineLength)) - 1) / (lineLength)) * (chunkSeparatorLength)","position":"org.apache.commons.codec.binary.BaseNCodec:521","type":"CtOperatorAssignmentImpl","sourcecode":"len += (((len + (int)) - 1) / (int)) * (int)"},"status":-1},{"failures":[],"tindex":"0cb52a43-16e5-11e6-9733-89ddc884c910","series":0,"name":"replace","transplant":{"toString":"this.concat = concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"variableMap":{"concat":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = false","position":"org.apache.commons.codec.language.bm.Lang:146","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"status":-2},{"failures":[],"tindex":"0cb52a44-16e5-11e6-9733-5bdd65233e33","series":0,"name":"replace","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"r"},"type":"adrStmt","transplantationPoint":{"toString":"while (r == 0) {\n    r = read(singleByte, 0, 1);\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:98","type":"CtWhileImpl","sourcecode":"while (r == 0) {\n    r = read(byte[], 0, 1);\n}"},"status":-2},{"failures":[],"tindex":"0cb52a45-16e5-11e6-9733-d985b417fe3c","series":0,"name":"replace","transplant":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:947","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"status":-3},{"failures":[83,84,129,130,131,132,133,134,135],"tindex":"0cb52a46-16e5-11e6-9733-c342a649ed54","series":0,"name":"add","transplant":{"toString":"code = '7'","position":"org.apache.commons.codec.language.ColognePhonetic:385","type":"CtAssignmentImpl","sourcecode":"code = '7'"},"variableMap":{"code":"ch"},"type":"adrStmt","transplantationPoint":{"toString":"ch = java.lang.Character.toLowerCase(ch)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:384","type":"CtAssignmentImpl","sourcecode":"ch = java.lang.Character.toLowerCase(ch)"},"status":-1},{"failures":[],"tindex":"0cb52a47-16e5-11e6-9733-8d71e4cec055","series":0,"name":"replace","transplant":{"toString":"context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result","position":"org.apache.commons.codec.binary.Base64:447","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result"},"variableMap":{"result":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","ibitWorkArea":"modulus","context":"context","org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE":"modulus"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[],"tindex":"0cb55158-16e5-11e6-9733-bb5075d70487","series":0,"name":"add","transplant":{"toString":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding())","position":"org.apache.commons.codec.net.RFC1522Codec:76","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.this.getEncoding())"},"variableMap":{"buffer":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd, 1, ((inwd.length) - 1))","position":"org.apache.commons.codec.language.Metaphone:113","type":"CtInvocationImpl","sourcecode":"local.append(inwd, 1, ((inwd.int) - 1))"},"status":-2},{"failures":[83,84,129,130,131,132,133,134,135],"tindex":"0cb55159-16e5-11e6-9733-4f8c541a3c3e","series":0,"name":"replace","transplant":{"toString":"final boolean endsWithBox = content.endsWith(\"]\")","position":"org.apache.commons.codec.language.bm.Rule:546","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.endsWith(\"]\")"},"variableMap":{"content":"replacement"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean append = (((lastReplacement) == null) || (!(lastReplacement.endsWith(replacement)))) || forceAppend","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:136","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend"},"status":-1},{"failures":[],"tindex":"0cb5515a-16e5-11e6-9733-5747564d9a0b","series":0,"name":"replace","transplant":{"toString":"if (java.lang.Character.isLetter(str.charAt(i))) {\n    chars[(count++)] = str.charAt(i);\n} ","position":"org.apache.commons.codec.language.SoundexUtils:49","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isLetter(str.charAt(i))) {\n    chars[(count++)] = str.charAt(i);\n} "},"variableMap":{"str":"org.apache.commons.codec.digest.B64.B64T","count":"length","i":"length","chars":"org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"if (salt == null) {\n    final java.util.Random randomGenerator = new java.util.Random();\n    final int numSaltChars = org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS.length;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    final java.util.Random java.util.Random = new java.util.Random();\n    final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
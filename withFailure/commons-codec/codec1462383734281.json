{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":18,"org.apache.commons.codec.binary.HexTest.testCustomCharset":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":70,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":95,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":66,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":72,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":90,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":109,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":47,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":61,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":4,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":55,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":26,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":93,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":37,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":0,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":102,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":78,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":81,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":79,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":101,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":27,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":39,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":10,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":29,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":42,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":71,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":85,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":87,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":76,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":107,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":82,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":89,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":28,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":38,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":60,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":99,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":12,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":84,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":111,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":68,"org.apache.commons.codec.binary.Base64Test.testUUID":34,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":105,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":48,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":52,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":97,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":6,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":57,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":100,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":88,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":33,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":83,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":14,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":103,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":58,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":19,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":106,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":20,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":2,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":73,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":67,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":80,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":92},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"tindex":"899729a4-121f-11e6-8e3c-e39383c1b280","series":0,"name":"replace","transplant":{"toString":"return 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.length)) || ((offset + len) > (b.length))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len == 0) {\n    return 0;\n} else {\n    int readLen = 0;\n    while (readLen == 0) {\n        if (!(baseNCodec.hasData(context))) {\n            final byte[] buf = new byte[doEncode ? 4096 : 8192];\n            final int c = in.read(buf);\n            if (doEncode) {\n                baseNCodec.encode(buf, 0, c, context);\n            } else {\n                baseNCodec.decode(buf, 0, c, context);\n            }\n        } \n        readLen = baseNCodec.readResults(b, offset, len, context);\n    }\n    return readLen;\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtIfImpl","sourcecode":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (readLen == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(buf);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return readLen;\n}"},"status":-1},{"failures":[],"tindex":"899777c5-121f-11e6-8e3c-37ce1b6c4404","series":0,"name":"replace","transplant":{"toString":"return toString().hashCode()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:124","type":"CtReturnImpl","sourcecode":"return toString().hashCode()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return +1","position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"status":0},{"failures":[29],"tindex":"899777c6-121f-11e6-8e3c-875a615946c2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"x\", \"k\")","position":"org.apache.commons.codec.language.Caverphone2:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"x\", \"k\")"},"status":-1},{"failures":[],"tindex":"899777c7-121f-11e6-8e3c-7d3d6a7bc970","series":0,"name":"add","transplant":{"toString":"minRating = getMinRating(sumLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"minRating = getMinRating(sumLength)"},"variableMap":{"sumLength":"left","minRating":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:307","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-2},{"failures":[30,31,32,33,34,35],"tindex":"89979ed8-121f-11e6-8e3c-3570caf4be51","series":0,"name":"replace","transplant":{"toString":"final byte[] pBytes = new byte[keyLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"variableMap":{"keyLen":"len"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] out = new byte[len >> 1]","position":"org.apache.commons.codec.binary.Hex:85","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[len >> 1]"},"status":-1},{"failures":[],"tindex":"89979ed9-121f-11e6-8e3c-e5e46bb6ce11","series":0,"name":"replace","transplant":{"toString":"return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true)","position":"org.apache.commons.codec.binary.BaseNCodec:483","type":"CtReturnImpl","sourcecode":"return isInAlphabet(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(basen), true)"},"variableMap":{"basen":"text1"},"type":"adrStmt","transplantationPoint":{"toString":"return colognePhonetic(text1).equals(colognePhonetic(text2))","position":"org.apache.commons.codec.language.ColognePhonetic:422","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text1).equals(colognePhonetic(text2))"},"status":-2},{"failures":[],"tindex":"89979eda-121f-11e6-8e3c-0d06253918b8","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:487","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())"},"variableMap":{"str":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone1.SIX_1","position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"status":-2},{"failures":[36,37,38],"tindex":"8997c5eb-121f-11e6-8e3c-35bf25d780d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:183","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-1},{"failures":[39],"tindex":"8997c5ec-121f-11e6-8e3c-a5e29db6067d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"8997c5ed-121f-11e6-8e3c-6bc22d5f0897","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (rule.acceptOnMatch) {\n    langs.retainAll(rule.languages);\n} else {\n    langs.removeAll(rule.languages);\n}","position":"org.apache.commons.codec.language.bm.Lang:220","type":"CtIfImpl","sourcecode":"if (rule.boolean) {\n    langs.retainAll(rule.java.util.Set<java.lang.String>);\n} else {\n    langs.removeAll(rule.java.util.Set<java.lang.String>);\n}"},"status":-2},{"failures":[],"tindex":"8997c5ee-121f-11e6-8e3c-45da3f5cbe55","series":0,"name":"replace","transplant":{"toString":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"3$\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:121","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3$\", \"A\")"},"status":-3},{"failures":[],"tindex":"8997ecff-121f-11e6-8e3c-65119288dd0b","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")","position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))","position":"org.apache.commons.codec.digest.Md5Crypt:190","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"status":-2},{"failures":[40,41,42,43,44,45,46],"tindex":"8997ed00-121f-11e6-8e3c-79189e45de8e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:104","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[47,48,16,28,49,50],"tindex":"8997ed01-121f-11e6-8e3c-9bc71ca66a6a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n} ","position":"org.apache.commons.codec.binary.Base32:495","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"status":-1},{"failures":[51,29],"tindex":"8997ed02-121f-11e6-8e3c-b5cdd8e67a3a","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"e$\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"e$\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"x\", \"k\")","position":"org.apache.commons.codec.language.Caverphone2:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"x\", \"k\")"},"status":-1},{"failures":[52],"tindex":"89981413-121f-11e6-8e3c-1339149fcd99","series":0,"name":"replace","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.DoubleMetaphone:89","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"89981414-121f-11e6-8e3c-5f2c323b1b61","series":0,"name":"add","transplant":{"toString":"hard = true","position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"variableMap":{"hard":"accept"},"type":"adrStmt","transplantationPoint":{"toString":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))","position":"org.apache.commons.codec.language.bm.Lang:177","type":"CtInvocationImpl","sourcecode":"rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept))"},"status":-2},{"failures":[],"tindex":"89981415-121f-11e6-8e3c-ef7ec6345d7f","series":0,"name":"replace","transplant":{"toString":"this.baseNCodec = basedCodec","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = basedCodec"},"variableMap":{"basedCodec":"baseNCodec","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"toString":"this.baseNCodec = baseNCodec","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = baseNCodec"},"status":-3},{"failures":[],"tindex":"89981416-121f-11e6-8e3c-594dbbfbe3e5","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('>')","position":"org.apache.commons.codec.net.QCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('>')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('}')","position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"status":0},{"failures":[],"tindex":"89983b27-121f-11e6-8e3c-838fdb0d7262","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"chunkSeparatorLength","to":"lineLength"},"type":"adrStmt","transplantationPoint":{"toString":"if ((lineLength) > 0) {\n    len += (((len + (lineLength)) - 1) / (lineLength)) * (chunkSeparatorLength);\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    len += (((len + (int)) - 1) / (int)) * (int);\n} "},"status":-2},{"failures":[53],"tindex":"89983b28-121f-11e6-8e3c-394fe1e9ada5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('-')","position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"status":-1},{"failures":[],"tindex":"89983b29-121f-11e6-8e3c-dd9c829dd48c","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return (input.length()) == 0;\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:510","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return (input.length()) == 0;\n    }\n}"},"variableMap":{"input":"this","this":"this"},"type":"adrStmt","transplantationPoint":{"toString":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}","position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtIfImpl","sourcecode":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}"},"status":-2},{"failures":[],"tindex":"8998623a-121f-11e6-8e3c-1ddc41b49f21","series":0,"name":"replace","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"pBytes"},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"status":0},{"failures":[],"tindex":"8998623b-121f-11e6-8e3c-e32ab1b2b49d","series":0,"name":"replace","transplant":{"toString":"builder = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:83","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = new java.lang.StringBuilder()"},"variableMap":{"builder":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:287","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-3},{"failures":[],"tindex":"899973ac-121f-11e6-8e3c-1d4ebcd4ee77","series":0,"name":"replace","transplant":{"toString":"final byte[] result = new byte[context.pos]","position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[context.int]"},"variableMap":{"pos":"encodeSize","context":"context"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(encodeSize, context)","position":"org.apache.commons.codec.binary.Base32:445","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-2},{"failures":[],"tindex":"899973ad-121f-11e6-8e3c-3589592ca73f","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((key.length()) > 1) {\n    char lastChar = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char last2Char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} ","position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"status":-2},{"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"tindex":"899973ae-121f-11e6-8e3c-a33a4ac63b6f","series":0,"name":"replace","transplant":{"toString":"final int n = accentedWord.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:357","type":"CtLocalVariableImpl","sourcecode":"final int int = accentedWord.length()"},"variableMap":{"accentedWord":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"final int name2Size = (name2.length()) - 1","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:299","type":"CtLocalVariableImpl","sourcecode":"final int int = (name2.length()) - 1"},"status":-1},{"failures":[],"tindex":"89999abf-121f-11e6-8e3c-2bd72a81166c","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:103","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"89999ac0-121f-11e6-8e3c-2143683d97f4","series":0,"name":"add","transplant":{"toString":"result.appendAlternate('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"variableMap":{"result":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Nysiis:211","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[92,93],"tindex":"89999ac1-121f-11e6-8e3c-fb4967a542e0","series":0,"name":"replace","transplant":{"toString":"currentLine++","position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"el"},"type":"adrStmt","transplantationPoint":{"toString":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.SPTRANS[1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[6][((u >>> 24) & 63)])","position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-1},{"failures":[94,95,96],"tindex":"89999ac2-121f-11e6-8e3c-91c976286d7d","series":0,"name":"replace","transplant":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:981","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[],"tindex":"8999c1d3-121f-11e6-8e3c-2f02c00c68a5","series":0,"name":"add","transplant":{"toString":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"variableMap":{"ch":"code"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}","position":"org.apache.commons.codec.language.ColognePhonetic:376","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}"},"status":0},{"failures":[],"tindex":"8999c1d4-121f-11e6-8e3c-47956c9b6a9f","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END)) {\n        inMultilineComment = false;\n    } \n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:260","type":"CtIfImpl","sourcecode":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        inMultilineComment = false;\n    } \n    continue;\n} "},"status":-2},{"failures":[97],"tindex":"8999c1d5-121f-11e6-8e3c-5dfc26254017","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:564","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:274","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data)"},"status":-1},{"failures":[98,99,100,101,102,103,104],"tindex":"8999c1d6-121f-11e6-8e3c-e1dccdac0e4e","series":0,"name":"replace","transplant":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd)","position":"org.apache.commons.codec.language.Metaphone:115","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-1},{"failures":[],"tindex":"8999c1d7-121f-11e6-8e3c-118575c0c822","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inExtendedComment = true;\n} else {\n    final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 3) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n    } \n    final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n    final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n    final boolean accept = parts[2].equals(\"true\");\n    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n}","position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 3) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n    } \n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n    final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n    final boolean boolean = parts[2].equals(\"true\");\n    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n}"},"status":0},{"failures":[94,95,96,105],"tindex":"8999e8e8-121f-11e6-8e3c-77f92fd7920a","series":0,"name":"add","transplant":{"toString":"result.append(\"KN\", \"N\")","position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\", \"N\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:694","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"8999e8e9-121f-11e6-8e3c-010ad038a15b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.Soundex.this.maxLength = maxLength","position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"variableMap":{"maxLength":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:430","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"8999e8ea-121f-11e6-8e3c-7d47a7081f28","series":0,"name":"replace","transplant":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"savedPos","context":"context","modulus":"savedPos"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += (context.pos) - savedPos","position":"org.apache.commons.codec.binary.Base64:371","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-3},{"failures":[],"tindex":"8999e8eb-121f-11e6-8e3c-4f6d327586c4","series":0,"name":"add","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"b","to":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base64:382","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"status":-2},{"failures":[],"tindex":"899a0ffc-121f-11e6-8e3c-4b303897ca53","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(raw instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:98","type":"CtIfImpl","sourcecode":"if (!(raw instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n} "},"status":-2},{"failures":[94,95,96,105],"tindex":"899a0ffd-121f-11e6-8e3c-8572f172b908","series":0,"name":"replace","transplant":{"toString":"if ((charAt(value, (index + 2))) == 'H') {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n            result.append(\"X\", \"SK\");\n        } else {\n            result.append(\"SK\");\n        }\n    } else {\n        if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n            result.append('X', 'S');\n        } else {\n            result.append('X');\n        }\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n    result.append('S');\n} else {\n    result.append(\"SK\");\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:648","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 2))) == 'H') {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n            result.append(\"X\", \"SK\");\n        } else {\n            result.append(\"SK\");\n        }\n    } else {\n        if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n            result.append('X', 'S');\n        } else {\n            result.append('X');\n        }\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n    result.append('S');\n} else {\n    result.append(\"SK\");\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}"},"status":-1},{"failures":[],"tindex":"899a0ffe-121f-11e6-8e3c-9b7292aea45d","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)","position":"org.apache.commons.codec.digest.UnixCrypt:302","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)"},"variableMap":{"left":"length","right":"length","results":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (ascii.length) - 1 ; ii < (l_raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n        } \n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:208","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n        } \n    }\n}"},"status":-2},{"failures":[43,45],"tindex":"899a0fff-121f-11e6-8e3c-1bfa552a93b2","series":0,"name":"replace","transplant":{"toString":"compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"variableMap":{"compareCode":"b"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:293","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer)"},"status":-1},{"failures":[106,107,108,109,110,111],"tindex":"899a3710-121f-11e6-8e3c-eff307bbfe1f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(branch)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:467","type":"CtInvocationImpl","sourcecode":"sb.append(branch)"},"status":-1},{"failures":[],"tindex":"899a3711-121f-11e6-8e3c-af717ecdb727","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (phonemeText.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication rulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , maxPhonemes).invoke();\n    final boolean found = rulesApplication.isFound();\n    subBuilder = rulesApplication.getPhonemeBuilder();\n    if (!found) {\n        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n    } \n    i = rulesApplication.getI();\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (phonemeText.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n    final boolean boolean = rulesApplication.isFound();\n    subBuilder = rulesApplication.getPhonemeBuilder();\n    if (!found) {\n        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n    } \n    i = rulesApplication.getI();\n}"},"status":-2},{"failures":[96,105],"tindex":"899a3712-121f-11e6-8e3c-85d5232835bf","series":0,"name":"replace","transplant":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:750","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":47,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
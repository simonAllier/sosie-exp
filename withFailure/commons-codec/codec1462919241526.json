{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":15,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":40,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":38,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":39,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":41,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":59,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":28,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":97,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":14,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":52,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":89,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":24,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":56,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":23,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":49,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":19,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":51,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":50,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":72,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":68,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":73,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":76,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":47,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":74,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":48,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":75,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":25,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":63,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":78,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":60,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":7,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":16,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":94,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":13,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":32,"org.apache.commons.codec.language.SoundexTest.testB650":37,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":87,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":6,"org.apache.commons.codec.language.SoundexTest.testNewInstance":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":29,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":88,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":64,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":31,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":26,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":10,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":21,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":84,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":34,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":35,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":36,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":0,"org.apache.commons.codec.binary.Base64Test.testBase64":83,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":27,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":4,"org.apache.commons.codec.binary.Base64Test.testUUID":70,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":77,"org.apache.commons.codec.binary.Base64Test.testSingletons":81,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":95,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":91,"org.apache.commons.codec.binary.Base64Test.testPairs":69,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":90,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":85,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":55,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":46,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":67,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":65,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":57,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":79,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":86,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":53,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":30,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":93,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":33,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":17,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":92,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":58,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":71,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":82,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":11,"org.apache.commons.codec.language.SoundexTest.testDifference":44,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":54,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":3,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":61,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":96},"transformations":[{"failures":[],"tindex":"5cc97687-16fe-11e6-bc05-4f4c3f60d569","series":0,"name":"replace","transplant":{"toString":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.TEN_1;\n} ","position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"name","txt":"name"},"type":"adrStmt","transplantationPoint":{"toString":"if (nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX)) {\n    final java.lang.String firstThree = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE);\n    final java.lang.String lastThree = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)), nameLength);\n    return firstThree + lastThree;\n} else {\n    return name;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtIfImpl","sourcecode":"if (nameLength > (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int);\n    final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength);\n    return firstThree + lastThree;\n} else {\n    return name;\n}"},"status":-3},{"failures":[],"tindex":"5cc99d98-16fe-11e6-bc05-058cfda3b6aa","series":0,"name":"replace","transplant":{"toString":"return colognePhonetic(text)","position":"org.apache.commons.codec.language.ColognePhonetic:418","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text)"},"variableMap":{"text":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return input.toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.DoubleMetaphone:896","type":"CtReturnImpl","sourcecode":"return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[],"tindex":"5cc9c4a9-16fe-11e6-bc05-2f88eee36963","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (index == 0) {\n    result.append('S');\n    index++;\n} else {\n    if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n        result.append(\"KS\");\n    } \n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('S');\n    index++;\n} else {\n    if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n        result.append(\"KS\");\n    } \n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[],"tindex":"5cc9c4aa-16fe-11e6-bc05-895ed4e9b497","series":0,"name":"replace","transplant":{"toString":"return compareCode","position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"variableMap":{"compareCode":"i"},"type":"adrStmt","transplantationPoint":{"toString":"return i","position":"org.apache.commons.codec.net.Utils:47","type":"CtReturnImpl","sourcecode":"return i"},"status":-3},{"failures":[0,1,2,3,4],"tindex":"5cc9c4ab-16fe-11e6-bc05-8b72250f8a7a","series":0,"name":"replace","transplant":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n    if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n        result.append(\"KS\");\n    } else {\n        result.append('X');\n    }\n    index += 3;\n} else {\n    result.append('K');\n    index += 2;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:332","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n    if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n        result.append(\"KS\");\n    } else {\n        result.append('X');\n    }\n    index += 3;\n} else {\n    result.append('K');\n    index += 2;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-1},{"failures":[],"tindex":"5cca12cc-16fe-11e6-bc05-316c7b8ac4ec","series":0,"name":"add","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QCodec.this.encodeBlanks","position":"org.apache.commons.codec.net.QCodec:346","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.boolean"},"status":-2},{"failures":[],"tindex":"5cca12cd-16fe-11e6-bc05-23f11d21820e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"))","position":"org.apache.commons.codec.net.BCodec:203","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"))"},"status":-2},{"failures":[1,2,3,4],"tindex":"5cca39de-16fe-11e6-bc05-f5d63067e178","series":0,"name":"replace","transplant":{"toString":"result.append('J', ' ')","position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('A')","position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"status":-1},{"failures":[5,6,7,8,9],"tindex":"5cca39df-16fe-11e6-bc05-d1e61a256e9b","series":0,"name":"replace","transplant":{"toString":"nextBranches.clear()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"nextBranches.clear()"},"variableMap":{"nextBranches":"nextBranches"},"type":"adrStmt","transplantationPoint":{"toString":"if (branching) {\n    currentBranches.clear();\n    currentBranches.addAll(nextBranches);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:540","type":"CtIfImpl","sourcecode":"if (branching) {\n    currentBranches.clear();\n    currentBranches.addAll(nextBranches);\n} "},"status":-1},{"failures":[],"tindex":"5cca39e0-16fe-11e6-bc05-79c4f99cfffe","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"e$\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"e$\", \"\")"},"variableMap":{"txt":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[],"tindex":"5cca60f1-16fe-11e6-bc05-11e1b2480a7e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))","position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[],"tindex":"5cca60f2-16fe-11e6-bc05-15d61973dc6d","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = false","position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = false"},"variableMap":{"found":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"toString":"inExtendedComment = true","position":"org.apache.commons.codec.language.bm.Lang:150","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"status":-3},{"failures":[],"tindex":"5cca8803-16fe-11e6-bc05-5b2a468ac3cb","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)","position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)"},"variableMap":{"tmp":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.WWW_FORM_URL, bytes)","position":"org.apache.commons.codec.net.URLCodec:194","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes)"},"status":-2},{"failures":[10,11,12,13,14,15,16,17],"tindex":"5cca8804-16fe-11e6-bc05-d573b3e1cdc7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp))","position":"org.apache.commons.codec.digest.Sha2Crypt:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp))"},"status":-1},{"failures":[3,4],"tindex":"5cca8805-16fe-11e6-bc05-fd82563b9e21","series":0,"name":"replace","transplant":{"toString":"result.append(\"X\", \"SK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"result.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J', 'H')","position":"org.apache.commons.codec.language.DoubleMetaphone:530","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"status":-1},{"failures":[],"tindex":"5ccaaf16-16fe-11e6-bc05-37eb9fbe55b0","series":0,"name":"replace","transplant":{"toString":"final java.io.InputStream langIS = org.apache.commons.codec.language.bm.Languages.class.getClassLoader().getResourceAsStream(languagesResourceName)","position":"org.apache.commons.codec.language.bm.Languages:172","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName)"},"variableMap":{"languagesResourceName":"resName","org.apache.commons.codec.language.bm.Languages.class":"org.apache.commons.codec.language.bm.Languages.class"},"type":"adrStmt","transplantationPoint":{"toString":"final java.io.InputStream rulesIS = org.apache.commons.codec.language.bm.Languages.class.getClassLoader().getResourceAsStream(resName)","position":"org.apache.commons.codec.language.bm.Rule:266","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName)"},"status":-3},{"failures":[18,19,20,21],"tindex":"5ccaaf17-16fe-11e6-bc05-bd486332048d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[aeiou]\", \"3\")","position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[],"tindex":"5ccad628-16fe-11e6-bc05-d9fbac0251dd","series":0,"name":"replace","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] resizedBytes = new byte[bitlen / 8]","position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[bitlen / 8]"},"status":-2},{"failures":[],"tindex":"5ccad629-16fe-11e6-bc05-df9c5ad9e4b8","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:294","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))"},"status":-2},{"failures":[],"tindex":"5ccad62a-16fe-11e6-bc05-cdf0fa6a5846","series":0,"name":"replace","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineSeparator = new byte[lineSeparator.length]","position":"org.apache.commons.codec.binary.Base32:300","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[lineSeparator.int]"},"status":-3},{"failures":[],"tindex":"5ccafd3b-16fe-11e6-bc05-dd8e08efaa9e","series":0,"name":"replace","transplant":{"toString":"finalb = ctx.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:250","type":"CtAssignmentImpl","sourcecode":"finalb = ctx.digest()"},"variableMap":{"finalb":"tempResult","ctx":"altCtx"},"type":"adrStmt","transplantationPoint":{"toString":"tempResult = altCtx.digest()","position":"org.apache.commons.codec.digest.Sha2Crypt:324","type":"CtAssignmentImpl","sourcecode":"tempResult = altCtx.digest()"},"status":-3},{"failures":[22,23,24,25,26],"tindex":"5ccafd3c-16fe-11e6-bc05-c50e9ee80082","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[27,28,29,30,31],"tindex":"5ccafd3d-16fe-11e6-bc05-cd78d1b83e8f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:364","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[],"tindex":"5ccb244e-16fe-11e6-bc05-bffc0a94782a","series":0,"name":"replace","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int left = 0","position":"org.apache.commons.codec.digest.UnixCrypt:282","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"tindex":"5ccb244f-16fe-11e6-bc05-4167608c7c23","series":0,"name":"replace","transplant":{"toString":"code = '8'","position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"code = '8'"},"variableMap":{"code":"mapped"},"type":"adrStmt","transplantationPoint":{"toString":"out[(count++)] = mapped","position":"org.apache.commons.codec.language.Soundex:276","type":"CtAssignmentImpl","sourcecode":"out[(count++)] = mapped"},"status":-1},{"failures":[],"tindex":"5ccb2450-16fe-11e6-bc05-f3b66aea99a3","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))","position":"org.apache.commons.codec.language.bm.Lang:169","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))"},"status":-2},{"failures":[],"tindex":"5ccb4b61-16fe-11e6-bc05-279183ff8f9c","series":0,"name":"replace","transplant":{"toString":"final java.lang.String target = value.substring(start, (start + length))","position":"org.apache.commons.codec.language.DoubleMetaphone:919","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = value.substring(start, (start + length))"},"variableMap":{"start":"nameLength","length":"nameLength","value":"name"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String lastThree = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)), nameLength)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:164","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength)"},"status":-2},{"failures":[52],"tindex":"5ccb4b62-16fe-11e6-bc05-c1a9391a1575","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType) == (org.apache.commons.codec.language.bm.NameType.GENERIC)) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        final java.lang.String remainder = input.substring(2);\n        final java.lang.String combined = \"d\" + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n    for (final java.lang.String l : org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType)) {\n        if (input.startsWith((l + \" \"))) {\n            final java.lang.String remainder = input.substring(((l.length()) + 1));\n            final java.lang.String combined = l + remainder;\n            return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n        } \n    }\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        final java.lang.String java.lang.String = input.substring(2);\n        final java.lang.String java.lang.String = \"d\" + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n    for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n        if (input.startsWith((l + \" \"))) {\n            final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n            final java.lang.String java.lang.String = l + remainder;\n            return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n        } \n    }\n} "},"status":-1},{"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,22,71,72,73,74,75,76,23,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"tindex":"5ccb7273-16fe-11e6-bc05-717a74e6753e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (b == (pad)) {\n    context.eof = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n        final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n        if (result >= 0) {\n            context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n            context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n            if ((context.modulus) == 0) {\n                buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            } \n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base64:438","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[96,97],"tindex":"5ccb9984-16fe-11e6-bc05-4f1789c9094f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"right = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:312","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-1},{"failures":[],"tindex":"5ccbc095-16fe-11e6-bc05-7fabd155ec1e","series":0,"name":"add","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int t = 0","position":"org.apache.commons.codec.digest.UnixCrypt:284","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"5ccbc096-16fe-11e6-bc05-9b7df6629147","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[512]","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] saltBytes = saltString.getBytes(org.apache.commons.codec.Charsets.UTF_8)","position":"org.apache.commons.codec.digest.Sha2Crypt:155","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":32,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
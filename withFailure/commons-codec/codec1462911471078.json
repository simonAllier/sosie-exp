{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":40,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":35,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":14,"org.apache.commons.codec.language.NysiisTest.testDropBy":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":12,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":25,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":15,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":11,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":29,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":6,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":44,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":21,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":24,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":54,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":1,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":7,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":4,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":30,"org.apache.commons.codec.language.NysiisTest.testRule7":63,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":8,"org.apache.commons.codec.language.NysiisTest.testCap":61,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":60,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":42,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":64,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":39,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":16,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":3,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":20,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":0,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":26,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":17,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":53,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":58,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":33,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":31,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":46,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":41,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":51,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":10,"org.apache.commons.codec.digest.B64Test.testB64from24bit":43,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":47,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":50,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":32,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":57,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":49,"org.apache.commons.codec.language.NysiisTest.testDan":62,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":59,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":23,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":48,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":5,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":28},"transformations":[{"failures":[],"tindex":"453ce3ed-16ec-11e6-b1eb-2ff7dc4073b3","series":0,"name":"replace","transplant":{"toString":"if (lineLength > 0) {\n    this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:283","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"cnt","encodeSize":"cnt","length":"blocksize","lineSeparator":"altResult","lineLength":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"while (cnt > 0) {\n    if ((cnt & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(keyBytes);\n    }\n    cnt >>= 1;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:247","type":"CtWhileImpl","sourcecode":"while (cnt > 0) {\n    if ((cnt & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(keyBytes);\n    }\n    cnt >>= 1;\n}"},"status":-3},{"failures":[],"tindex":"453d320e-16ec-11e6-b1eb-11391133201b","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.encodeSize = (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n    this.lineSeparator = new byte[lineSeparator.length];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.lineSeparator, 0, lineSeparator.length);\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base32:290","type":"CtIfImpl","sourcecode":"if (lineLength > 0) {\n    if (lineSeparator == null) {\n        throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n    } \n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n    } \n    this.int = (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int) + (lineSeparator.int);\n    this.byte[] = new byte[lineSeparator.int];\n    java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int);\n} else {\n    this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n    this.byte[] = null;\n}"},"status":-2},{"failures":[],"tindex":"453d591f-16ec-11e6-b1eb-1fc213ab5427","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}","position":"org.apache.commons.codec.language.SoundexUtils:48","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}"},"variableMap":{"str":"salt","len":"length","count":"length","chars":"org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"if (salt == null) {\n    final java.util.Random randomGenerator = new java.util.Random();\n    final int numSaltChars = org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS.length;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS[randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.B64T)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    final java.util.Random java.util.Random = new java.util.Random();\n    final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"status":-2},{"failures":[],"tindex":"453d8030-16ec-11e6-b1eb-fbf44461d9b2","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4)","position":"org.apache.commons.codec.digest.UnixCrypt:229","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4)"},"variableMap":{"b":"raw","out":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"toString":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}","position":"org.apache.commons.codec.binary.BinaryCodec:280","type":"CtIfImpl","sourcecode":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}"},"status":-2},{"failures":[],"tindex":"453d8031-16ec-11e6-b1eb-0bfc60775147","series":0,"name":"replace","transplant":{"toString":"return java.security.MessageDigest.getInstance(algorithm)","position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"variableMap":{"algorithm":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_384"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_384)","position":"org.apache.commons.codec.digest.DigestUtils:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"453da742-16ec-11e6-b1eb-5b525a384db7","series":0,"name":"replace","transplant":{"toString":"rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MIN, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MAX, rounds))","position":"org.apache.commons.codec.digest.Sha2Crypt:151","type":"CtAssignmentImpl","sourcecode":"rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds))"},"variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MAX":"i","org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MIN":"i","rounds":"i"},"type":"adrStmt","transplantationPoint":{"toString":"i = rulesApplication.getI()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:356","type":"CtAssignmentImpl","sourcecode":"i = rulesApplication.getI()"},"status":-3},{"failures":[],"tindex":"453da743-16ec-11e6-b1eb-abba509b1039","series":0,"name":"replace","transplant":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\"Rule\")","position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"status":0},{"failures":[],"tindex":"453dce54-16ec-11e6-b1eb-efcfa7228280","series":0,"name":"replace","transplant":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"variableMap":{"a":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-3},{"failures":[0,1,2,3,4,5,6],"tindex":"453dce55-16ec-11e6-b1eb-c126e022d8c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"digest.update(buffer, 0, read)","position":"org.apache.commons.codec.digest.DigestUtils:797","type":"CtInvocationImpl","sourcecode":"digest.update(buffer, 0, read)"},"status":-1},{"failures":[],"tindex":"453dce56-16ec-11e6-b1eb-e117490c00ce","series":0,"name":"replace","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:277","type":"CtAssignmentImpl","sourcecode":"finalb = ctx1.digest()"},"status":-3},{"failures":[],"tindex":"453df567-16ec-11e6-b1eb-61f0a43c543e","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^cough\", \"cou2f\")","position":"org.apache.commons.codec.language.Caverphone1:59","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^cough\", \"cou2f\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[],"tindex":"453df568-16ec-11e6-b1eb-0bfccf36082d","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"variableMap":{"concat":"result"},"type":"adrStmt","transplantationPoint":{"toString":"return result","position":"org.apache.commons.codec.language.DoubleMetaphone:882","type":"CtReturnImpl","sourcecode":"return result"},"status":-3},{"failures":[],"tindex":"453df569-16ec-11e6-b1eb-77a3ac7ee6c8","series":0,"name":"replace","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(context.buffer, 0, b, 0, context.buffer.length)","position":"org.apache.commons.codec.binary.BaseNCodec:255","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], 0, b, 0, context.byte[].int)"},"status":-2},{"failures":[],"tindex":"453e1c7a-16ec-11e6-b1eb-b90820404ff8","series":0,"name":"replace","transplant":{"toString":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"status":-2},{"failures":[7,8,9,10,11,12,13],"tindex":"453e1c7b-16ec-11e6-b1eb-13ecbce68d08","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (o1.phonemeText.length()) ; i++) {\n    if (i >= (o2.phonemeText.length())) {\n        return +1;\n    } \n    final int c = (o1.phonemeText.charAt(i)) - (o2.phonemeText.charAt(i));\n    if (c != 0) {\n        return c;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:88","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (o1.java.lang.StringBuilder.length()) ; i++) {\n    if (i >= (o2.java.lang.StringBuilder.length())) {\n        return +1;\n    } \n    final int int = (o1.java.lang.StringBuilder.charAt(i)) - (o2.java.lang.StringBuilder.charAt(i));\n    if (c != 0) {\n        return c;\n    } \n}"},"variableMap":{"o1":"o2","o2":"o2","phonemeText":"phonemeText"},"type":"adrStmt","transplantationPoint":{"toString":"if ((o1.phonemeText.length()) < (o2.phonemeText.length())) {\n    return -1;\n} ","position":"org.apache.commons.codec.language.bm.Rule:98","type":"CtIfImpl","sourcecode":"if ((o1.java.lang.StringBuilder.length()) < (o2.java.lang.StringBuilder.length())) {\n    return -1;\n} "},"status":-1},{"failures":[],"tindex":"453e438c-16ec-11e6-b1eb-9906fea26e80","series":0,"name":"add","transplant":{"toString":"java.lang.String txt = source","position":"org.apache.commons.codec.language.Caverphone1:46","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = source"},"variableMap":{"source":"value"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String target = value.substring(start, (start + length))","position":"org.apache.commons.codec.language.DoubleMetaphone:919","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = value.substring(start, (start + length))"},"status":-2},{"failures":[14,10,13],"tindex":"453e438d-16ec-11e6-b1eb-479fcecc96ad","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Languages:269","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"453e438e-16ec-11e6-b1eb-fb9992f999b4","series":0,"name":"replace","transplant":{"toString":"if ((strA.length()) > (strB.length())) {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strA.length())));\n} else {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strB.length())));\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtIfImpl","sourcecode":"if ((strA.length()) > (strB.length())) {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n} else {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n}"},"variableMap":{"strA":"value","strB":"value","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if (conditionC0(value, index)) {\n    result.append('K');\n    index += 2;\n} else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n    result.append('S');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n    index = handleCH(value, result, index);\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n    result.append('S', 'X');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n    return handleCC(value, result, index);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n    result.append('K');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        result.append('S', 'X');\n    } else {\n        result.append('S');\n    }\n    index += 2;\n} else {\n    result.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        index += 3;\n    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n        index += 2;\n    } else {\n        index++;\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:280","type":"CtIfImpl","sourcecode":"if (conditionC0(value, index)) {\n    result.append('K');\n    index += 2;\n} else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n    result.append('S');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n    index = handleCH(value, result, index);\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n    result.append('S', 'X');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n    return handleCC(value, result, index);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n    result.append('K');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        result.append('S', 'X');\n    } else {\n        result.append('S');\n    }\n    index += 2;\n} else {\n    result.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        index += 3;\n    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-3},{"failures":[7],"tindex":"453e91af-16ec-11e6-b1eb-47b782079bdb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((o1.phonemeText.length()) < (o2.phonemeText.length())) {\n    return -1;\n} ","position":"org.apache.commons.codec.language.bm.Rule:98","type":"CtIfImpl","sourcecode":"if ((o1.java.lang.StringBuilder.length()) < (o2.java.lang.StringBuilder.length())) {\n    return -1;\n} "},"status":-1},{"failures":[15],"tindex":"453eb8c0-16ec-11e6-b1eb-f7f29f9527bc","series":0,"name":"replace","transplant":{"toString":"buffer.append(saltString)","position":"org.apache.commons.codec.digest.Sha2Crypt:429","type":"CtInvocationImpl","sourcecode":"buffer.append(saltString)"},"variableMap":{"saltString":"sep","buffer":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(sep).append(si.next())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:264","type":"CtInvocationImpl","sourcecode":"sb.append(sep).append(si.next())"},"status":-1},{"failures":[16,17,18,19,20,21,22],"tindex":"453eb8c1-16ec-11e6-b1eb-3df280a9abd2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(finalb[j])","position":"org.apache.commons.codec.digest.Md5Crypt:239","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb[j])"},"status":-1},{"failures":[],"tindex":"453eb8c2-16ec-11e6-b1eb-9f91dbd506f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.finalRules = finalRules","position":"org.apache.commons.codec.language.bm.PhoneticEngine:184","type":"CtAssignmentImpl","sourcecode":"this.java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = finalRules"},"status":-2},{"failures":[],"tindex":"453fca33-16ec-11e6-b1eb-4f4151aa75ef","series":0,"name":"add","transplant":{"toString":"return decode(str, getDefaultCharset())","position":"org.apache.commons.codec.net.URLCodec:293","type":"CtReturnImpl","sourcecode":"return decode(str, getDefaultCharset())"},"variableMap":{"str":"org.apache.commons.codec.language.bm.Languages.ANY"},"type":"adrStmt","transplantationPoint":{"toString":"return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.ANY","position":"org.apache.commons.codec.language.bm.Lang:204","type":"CtReturnImpl","sourcecode":"return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String"},"status":-2},{"failures":[],"tindex":"453fca34-16ec-11e6-b1eb-f374107c5faf","series":0,"name":"replace","transplant":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char last","position":"org.apache.commons.codec.language.Soundex:267","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[23,24,25,26,27],"tindex":"453ff145-16ec-11e6-b1eb-2f27708c1b4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:313","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[28,29],"tindex":"453ff146-16ec-11e6-b1eb-ebc15988d27b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[30],"tindex":"453ff147-16ec-11e6-b1eb-aff6e8c0b627","series":0,"name":"replace","transplant":{"toString":"code.append('0')","position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append(symb)","position":"org.apache.commons.codec.language.Metaphone:269","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-1},{"failures":[],"tindex":"453ff148-16ec-11e6-b1eb-3b1abf4bd7a6","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"tia\", \"sia\")","position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"input"},"type":"adrStmt","transplantationPoint":{"toString":"input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:452","type":"CtAssignmentImpl","sourcecode":"input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \")"},"status":-2},{"failures":[31,32,33,34,35,36],"tindex":"453ff149-16ec-11e6-b1eb-f15c63d7c62f","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] parts = line.split(\"=\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:285","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"=\")"},"variableMap":{"line":"source"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] branches = soundex(source, true)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"status":-1},{"failures":[37],"tindex":"4540185a-16ec-11e6-b1eb-09834d498985","series":0,"name":"replace","transplant":{"toString":"if (((curr == 'S') && (next == 'C')) && (aNext == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_SSS;\n} ","position":"org.apache.commons.codec.language.Nysiis:148","type":"CtIfImpl","sourcecode":"if (((curr == 'S') && (next == 'C')) && (aNext == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"next":"next","org.apache.commons.codec.language.Nysiis.CHARS_SSS":"org.apache.commons.codec.language.Nysiis.CHARS_NN","curr":"next","aNext":"next"},"type":"adrStmt","transplantationPoint":{"toString":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.CHARS_NN;\n    } else {\n        return org.apache.commons.codec.language.Nysiis.CHARS_C;\n    }\n} ","position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"status":-1},{"failures":[38],"tindex":"4540185b-16ec-11e6-b1eb-77d5723c5c1f","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)","position":"org.apache.commons.codec.binary.BinaryCodec:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)"},"variableMap":{"ascii":"tmp"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)","position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)"},"status":-1},{"failures":[],"tindex":"4540185c-16ec-11e6-b1eb-1302b1d4e9fd","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.Nysiis.PAT_PH_PF.matcher(str).replaceFirst(\"FF\")","position":"org.apache.commons.codec.language.Nysiis:264","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\")"},"status":-3},{"failures":[],"tindex":"4540185d-16ec-11e6-b1eb-ed8808c85038","series":0,"name":"replace","transplant":{"toString":"this.stringEncoder = stringEncoder","position":"org.apache.commons.codec.StringEncoderComparator:58","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = stringEncoder"},"variableMap":{"stringEncoder":"stringEncoder"},"type":"adrStmt","transplantationPoint":{"toString":"this.stringEncoder = null","position":"org.apache.commons.codec.StringEncoderComparator:48","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = null"},"status":-2},{"failures":[39,40],"tindex":"45403f6e-16ec-11e6-b1eb-6bcc60b39029","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)","position":"org.apache.commons.codec.net.BCodec:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)"},"variableMap":{"bytes":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest).doFinal()","position":"org.apache.commons.codec.digest.HmacUtils:338","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest).doFinal()"},"status":-1},{"failures":[],"tindex":"45403f6f-16ec-11e6-b1eb-151fefb50385","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:101","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"45403f70-16ec-11e6-b1eb-553841ca13ef","series":0,"name":"replace","transplant":{"toString":"this.soundexMapping = org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING","position":"org.apache.commons.codec.language.Soundex:82","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.Soundex.org.apache.commons.codec.language.Soundex.char[]"},"variableMap":{"org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING":"soundexMapping","soundexMapping":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = new char[mapping.length]","position":"org.apache.commons.codec.language.RefinedSoundex:77","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[mapping.int]"},"status":-2},{"failures":[],"tindex":"45403f71-16ec-11e6-b1eb-45b9ccf202d8","series":0,"name":"replace","transplant":{"toString":"name1 = removeDoubleConsonants(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"variableMap":{"name1":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"p+\", \"P\")","position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":-2},{"failures":[],"tindex":"45406682-16ec-11e6-b1eb-4f009722de09","series":0,"name":"add","transplant":{"toString":"for (int i = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i);\n}","position":"org.apache.commons.codec.net.URLCodec:78","type":"CtForImpl","sourcecode":"for (int int = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(org.apache.commons.codec.net.QuotedPrintableCodec.SPACE)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:107","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[23,24],"tindex":"45406683-16ec-11e6-b1eb-77681a0d35e8","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('F')","position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:446","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"45406684-16ec-11e6-b1eb-37eb5165e828","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone2:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0},{"failures":[],"tindex":"45406685-16ec-11e6-b1eb-1d1de670e60d","series":0,"name":"add","transplant":{"toString":"final int open = ph.indexOf(\"[\")","position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"variableMap":{"ph":"text"},"type":"adrStmt","transplantationPoint":{"toString":"int to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.SEP, from)","position":"org.apache.commons.codec.net.RFC1522Codec:134","type":"CtLocalVariableImpl","sourcecode":"int int = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-2},{"failures":[],"tindex":"45406686-16ec-11e6-b1eb-bdf6965d054a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(pObject instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:110","type":"CtIfImpl","sourcecode":"if (!(pObject instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n} "},"status":0},{"failures":[],"tindex":"45406687-16ec-11e6-b1eb-3dd9f3fe866d","series":0,"name":"add","transplant":{"toString":"char lastChar = '\u0000'","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char chr","position":"org.apache.commons.codec.language.ColognePhonetic:334","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[41,42],"tindex":"45408d98-16ec-11e6-b1eb-47aabadf9a01","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch))","position":"org.apache.commons.codec.language.Soundex:232","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch))"},"status":-1},{"failures":[43,16,17,18,19,44,45,46,47,20,21,22,48,49,50,51],"tindex":"45408d99-16ec-11e6-b1eb-bdec8cc191a1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"w >>= 6","position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"status":-1},{"failures":[],"tindex":"45408d9a-16ec-11e6-b1eb-4512a0294eb2","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[28,29],"tindex":"45408d9b-16ec-11e6-b1eb-398c41ffced1","series":0,"name":"replace","transplant":{"toString":"ii >>= 1","position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"c"},"type":"adrStmt","transplantationPoint":{"toString":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)","position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"status":-1},{"failures":[28,29],"tindex":"4540b4ac-16ec-11e6-b1eb-0df60a143e6f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.SPTRANS[1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[6][((u >>> 24) & 63)])","position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-1},{"failures":[],"tindex":"4540b4ad-16ec-11e6-b1eb-a1143940846d","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int digit = java.lang.Character.digit(ch, 16)","position":"org.apache.commons.codec.binary.Hex:176","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Character.digit(ch, 16)"},"status":-2},{"failures":[],"tindex":"4540b4ae-16ec-11e6-b1eb-95b33be9a7eb","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")","position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))","position":"org.apache.commons.codec.binary.Base32:292","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))"},"status":-2},{"failures":[],"tindex":"4540b4af-16ec-11e6-b1eb-e311d63e2664","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"status":0},{"failures":[],"tindex":"4540dbc0-16ec-11e6-b1eb-2bbc29fea8d3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 4","position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"status":0},{"failures":[],"tindex":"4540dbc1-16ec-11e6-b1eb-511b737f52b4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(']')","position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"status":0},{"failures":[52,53],"tindex":"4540dbc2-16ec-11e6-b1eb-119f17e0780a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"messageDigest.update(valueToDigest)","position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"status":-1},{"failures":[],"tindex":"4540dbc3-16ec-11e6-b1eb-b127751594b0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('-')","position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"status":0},{"failures":[],"tindex":"4540dbc4-16ec-11e6-b1eb-2b294f68729c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()","position":"org.apache.commons.codec.digest.Md5Crypt:257","type":"CtAssignmentImpl","sourcecode":"ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"status":0},{"failures":[],"tindex":"4540dbc5-16ec-11e6-b1eb-f36e1c052c29","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('>')","position":"org.apache.commons.codec.net.QCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('>')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('_')","position":"org.apache.commons.codec.net.URLCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('_')"},"status":-2},{"failures":[],"tindex":"4540dbc6-16ec-11e6-b1eb-8fd899774d1a","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:286","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:481","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer)"},"status":-2},{"failures":[],"tindex":"454102d7-16ec-11e6-b1eb-852d84cf3491","series":0,"name":"replace","transplant":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"source"},"type":"adrStmt","transplantationPoint":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"454102d8-16ec-11e6-b1eb-cd3857545e31","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:188","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":0},{"failures":[0],"tindex":"454102d9-16ec-11e6-b1eb-2d409c965dcb","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:564","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)","position":"org.apache.commons.codec.digest.DigestUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)"},"status":-1},{"failures":[54,38,55,56,57,58,59,60],"tindex":"454102da-16ec-11e6-b1eb-a37be9f0917c","series":0,"name":"replace","transplant":{"toString":"y++","position":"org.apache.commons.codec.digest.UnixCrypt:244","type":"CtUnaryOperatorImpl","sourcecode":"y++"},"variableMap":{"y":"to"},"type":"adrStmt","transplantationPoint":{"toString":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.SEP, from)","position":"org.apache.commons.codec.net.RFC1522Codec:143","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[],"tindex":"454102db-16ec-11e6-b1eb-9b0c2a03ec0b","series":0,"name":"replace","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"right","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"left","minRating":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"right","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"right","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"left"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:299","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results)"},"status":-3},{"failures":[],"tindex":"454129ec-16ec-11e6-b1eb-5b2f300be64a","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))","position":"org.apache.commons.codec.binary.BinaryCodec:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)))"},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Caverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)))"},"status":0},{"failures":[],"tindex":"454129ed-16ec-11e6-b1eb-352074bfdd42","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.soundexMapping, 0, mapping.length)","position":"org.apache.commons.codec.language.Soundex:97","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.char[], 0, mapping.int)"},"status":-2},{"failures":[],"tindex":"454129ee-16ec-11e6-b1eb-e77d35ae0291","series":0,"name":"replace","transplant":{"toString":"upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"str":"txt","upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-3},{"failures":[23,24,27],"tindex":"454150ff-16ec-11e6-b1eb-81487347355d","series":0,"name":"replace","transplant":{"toString":"result.append('J', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('H')","position":"org.apache.commons.codec.language.DoubleMetaphone:520","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"status":-1},{"failures":[],"tindex":"45415100-16ec-11e6-b1eb-b1667bb43724","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")","position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")","position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"status":-2},{"failures":[],"tindex":"45415101-16ec-11e6-b1eb-d1ccad887a81","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"status":-2},{"failures":[61,62,63,37,64],"tindex":"45415102-16ec-11e6-b1eb-4f0f73dff465","series":0,"name":"replace","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"key"},"type":"adrStmt","transplantationPoint":{"toString":"key.deleteCharAt(((key.length()) - 1))","position":"org.apache.commons.codec.language.Nysiis:311","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"status":-1},{"failures":[],"tindex":"45415103-16ec-11e6-b1eb-2d3ee0b023ce","series":0,"name":"add","transplant":{"toString":"return firstLetter + name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:421","type":"CtReturnImpl","sourcecode":"return firstLetter + name"},"variableMap":{"name":"key","firstLetter":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(key, null)","position":"org.apache.commons.codec.digest.Crypt:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key, null)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":71,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":47,"org.apache.commons.codec.binary.HexTest.testCustomCharset":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":45,"org.apache.commons.codec.language.NysiisTest.testSnat":67,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":38,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":145,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":144,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":84,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":82,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":83,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":188,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":187,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":58,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":85,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":161,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":100,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":32,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":56,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":114,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":130,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":177,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":128,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":131,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":106,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":149,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":40,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":95,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":97,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":96,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":118,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":98,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":117,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":135,"org.apache.commons.codec.language.NysiisTest.testCap":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":189,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":182,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":171,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":94,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":49,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":92,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":10,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":93,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":170,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":120,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":55,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":15,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":115,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":132,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":108,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":122,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":133,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":157,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":174,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":152,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":5,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":74,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":75,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":54,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":123,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":129,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":86,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":143,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":21,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":147,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":172,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":166,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":181,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":76,"org.apache.commons.codec.language.SoundexTest.testB650":81,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":162,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":31,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":22,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":71,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":164,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":27,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":151,"org.apache.commons.codec.language.SoundexTest.testNewInstance":89,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":165,"org.apache.commons.codec.language.NysiisTest.testTranan":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":163,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":103,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":109,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":173,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":39,"org.apache.commons.codec.language.NysiisTest.testFal":60,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":9,"org.apache.commons.codec.language.NysiisTest.testSnad":66,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":51,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":168,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":178,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":34,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":78,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":139,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":79,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":80,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":125,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":160,"org.apache.commons.codec.language.NysiisTest.testDropBy":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":140,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":121,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":146,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":186,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":175,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":8,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":16,"org.apache.commons.codec.binary.Base64Test.testUUID":159,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":23,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":136,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":185,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":184,"org.apache.commons.codec.language.NysiisTest.testRule2":62,"org.apache.commons.codec.language.NysiisTest.testRule1":61,"org.apache.commons.codec.language.NysiisTest.testRule7":2,"org.apache.commons.codec.language.NysiisTest.testRule6":64,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":150,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":24,"org.apache.commons.codec.language.NysiisTest.testRule5":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":43,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":134,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":176,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":124,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":101,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":90,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":68,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":158,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":155,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":4,"org.apache.commons.codec.language.NysiisTest.testBran":65,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":110,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":105,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":73,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":18,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":87,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":153,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":191,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":11,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":119,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":72,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":20,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":28,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":102,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":44,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":141,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":112,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":91,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":77,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":138,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":190,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":127,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":14,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":180,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":137,"org.apache.commons.codec.language.NysiisTest.testDad":59,"org.apache.commons.codec.language.NysiisTest.testOthers":69,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":179,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":167,"org.apache.commons.codec.language.SoundexTest.testDifference":88,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":148,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":57,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":169,"org.apache.commons.codec.language.NysiisTest.testDan":1,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":29,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":156,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":183,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":48,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":53},"transformations":[{"failures":[0,1,2,3,4],"tindex":"231b8c35-40cd-11e6-a7b4-970c76b14d99","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:310","type":"CtIfImpl","sourcecode":"if (lastChar == 'A') {\n    key.deleteCharAt(((key.length()) - 1));\n} "},"status":-1},{"failures":[5,6,7,8],"tindex":"231bb346-40cd-11e6-a7b4-51edb13a8d8b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"status":-1},{"failures":[],"tindex":"231bda57-40cd-11e6-a7b4-45387e248875","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:206","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-2},{"failures":[9,10,11],"tindex":"231bda58-40cd-11e6-a7b4-91c166346736","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"status":-1},{"failures":[12,13,14],"tindex":"231bda59-40cd-11e6-a7b4-6380b02fcebe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:478","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:474","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer)"},"status":-1},{"failures":[15,16,17,18,19,20,21,22],"tindex":"231bda5a-40cd-11e6-a7b4-bf5a8108291e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:287","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd)"},"status":-1},{"failures":[],"tindex":"231c016b-40cd-11e6-a7b4-476875222fcc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:145","type":"CtLocalVariableImpl","sourcecode":"final int int = local.length()"},"status":-2},{"failures":[],"tindex":"231c016c-40cd-11e6-a7b4-a3fe87878f86","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:249","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-2},{"failures":[23,24,25,26,27,28,29,30],"tindex":"231c016d-40cd-11e6-a7b4-d1dfc07e87c6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Crypt:46","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null)"},"variableMap":{"keyBytes":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:155","type":"CtReturnImpl","sourcecode":"return new java.lang.String(data , charset)"},"status":-1},{"failures":[],"tindex":"231c016e-40cd-11e6-a7b4-1db64786f500","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:230","type":"CtLocalVariableImpl","sourcecode":"final int int = ch - 'A'"},"status":-2},{"failures":[],"tindex":"231c287f-40cd-11e6-a7b4-5916c172b1eb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:283","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = altCtx.digest()"},"status":-2},{"failures":[31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"231c2880-40cd-11e6-a7b4-9fd3eae0966b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:232","type":"CtAssignmentImpl","sourcecode":"name2 = removeVowels(name2)"},"status":-1},{"failures":[],"tindex":"231c2881-40cd-11e6-a7b4-9b359bf1bb6e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:816","type":"CtInvocationImpl","sourcecode":"messageDigest.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"messageDigest":"ctx","valueToDigest":"prefix"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:206","type":"CtInvocationImpl","sourcecode":"ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":0},{"failures":[],"tindex":"231c2882-40cd-11e6-a7b4-073af8ac820f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"right","name2Size":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:311","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results)"},"status":-2},{"failures":[31,43,33,34,35,36,44,45,46,47,38,48,40,49,50,51,52],"tindex":"231c4f93-40cd-11e6-a7b4-6b78428aab4e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:153","type":"CtLocalVariableImpl","sourcecode":"final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"variableMap":{"line":"name1","org.apache.commons.codec.language.bm.ResourceConstants.CMT":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:250","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.abs(((name1.length()) + (name2.length())))"},"status":-1},{"failures":[],"tindex":"231c4f94-40cd-11e6-a7b4-c3548e8497d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:94","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"231c4f95-40cd-11e6-a7b4-ff81d013f817","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"231c76a6-40cd-11e6-a7b4-a587a3910650","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:423","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-2},{"failures":[],"tindex":"231c76a7-40cd-11e6-a7b4-e3fa5b700062","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:302","type":"CtLocalVariableImpl","sourcecode":"final char char = key.charAt(((key.length()) - 2))"},"status":-2},{"failures":[53,54,55,56],"tindex":"231c76a8-40cd-11e6-a7b4-87156fb78e51","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"y","tempResult":"b","pBytes":"b","cp":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:237","type":"CtForImpl","sourcecode":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n}"},"status":-1},{"failures":[57,58,0,59,1,60,61,62,63,64,2,65,66,67,68,3,69,70,4,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"tindex":"231c9db9-40cd-11e6-a7b4-af2887487e95","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"name1Char[(name1Size - i)] = ' '"},"variableMap":{"name1Char":"chars","name1Size":"count","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[],"tindex":"231c9dba-40cd-11e6-a7b4-61857b76e369","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"variableMap":{"patternLength":"encodedBlockSize","i":"encodedBlockSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"status":-2},{"failures":[99,100,101,102,103,104,105],"tindex":"231c9dbb-40cd-11e6-a7b4-65d84c07dc97","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:296","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = name2.toCharArray()"},"variableMap":{"name2":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:103","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray()"},"status":-1},{"failures":[],"tindex":"231cc4cc-40cd-11e6-a7b4-f764f7c54240","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"str","org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"231cc4cd-40cd-11e6-a7b4-5d8d21c64e11","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:207","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","key":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"failures":[],"tindex":"231cc4ce-40cd-11e6-a7b4-75b9229151f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"status":-2},{"failures":[],"tindex":"231cebdf-40cd-11e6-a7b4-637411b45f9c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"y","to":"y"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"status":-2},{"failures":[],"tindex":"231cebe0-40cd-11e6-a7b4-9bea59aa13a1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"str","org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[81,82,90,95,96,97],"tindex":"231cebe1-40cd-11e6-a7b4-bbbadcbe4ccf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:276","type":"CtReturnImpl","sourcecode":"return ch"},"variableMap":{"ch":"preHWChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"status":-1},{"failures":[106,107,108,109,110,111,112,113,114,115],"tindex":"231cebe2-40cd-11e6-a7b4-db36996481c4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:299","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int) + (lineSeparator.int)"},"variableMap":{"encodeSize":"len","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"len","length":"len","lineSeparator":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:202","type":"CtAssignmentImpl","sourcecode":"len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len)"},"status":-1},{"failures":[],"tindex":"231d12f3-40cd-11e6-a7b4-81ce37245ea8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n    return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"variableMap":{"e":"obj","this":"obj","object":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"status":-2},{"failures":[],"tindex":"231d12f4-40cd-11e6-a7b4-4fd4434dce26","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray())"},"variableMap":{"ascii":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:222","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return decode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n}"},"status":-2},{"failures":[116,117,118,119,120,121,122,123],"tindex":"231d12f5-40cd-11e6-a7b4-d37fc1afab05","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"variableMap":{"ch":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:395","type":"CtInvocationImpl","sourcecode":"output.addRight(code)"},"status":-1},{"failures":[53,56],"tindex":"231d12f6-40cd-11e6-a7b4-4511909cd9b2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:305","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results)"},"variableMap":{"left":"right","right":"left","results":"results"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:308","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 16, 65535, results)"},"status":-1},{"failures":[124,125,126,127,128,129,130,131],"tindex":"231d12f7-40cd-11e6-a7b4-31509a6aee67","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:412","type":"CtIfImpl","sourcecode":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inMultilineComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inMultilineComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n            if (incl.contains(\" \")) {\n                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n            } else {\n                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                    final int int = currentLine;\n                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                        private final int myLine = cLine;\n\n                        private final java.lang.String loc = location;\n\n                        @java.lang.Override\n                        public java.lang.String toString() {\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            sb.append(\"Rule\");\n                            sb.append(\"{line=\").append(int);\n                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                            sb.append(\", pat='\").append(pat).append('\\'');\n                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                            sb.append('}');\n                            return sb.toString();\n                        }\n                    };\n                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                        lines.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"231d3a08-40cd-11e6-a7b4-05b52770edcc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtIfImpl","sourcecode":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"input","name2":"input","name1":"input","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:601","type":"CtIfImpl","sourcecode":"if ((prefix.length()) > (input.length())) {\n    return false;\n} "},"status":-2},{"failures":[7,8],"tindex":"231d3a09-40cd-11e6-a7b4-cbe0c8009d12","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:666","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[12,13,14],"tindex":"231d3a0a-40cd-11e6-a7b4-1b7c6b148954","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:478","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:470","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer)"},"status":-1},{"failures":[124,125,126,127,128,129,130,131],"tindex":"231d3a0b-40cd-11e6-a7b4-7b48bb53fc60","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:106","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.isEmpty()"},"status":-1},{"failures":[],"tindex":"231d611c-40cd-11e6-a7b4-c90bf6759886","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(i))"},"variableMap":{"i":"i","singleByte":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:187","type":"CtAssignmentImpl","sourcecode":"tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":-2},{"failures":[6,7,8],"tindex":"231d611d-40cd-11e6-a7b4-d35d20cabc45","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:518","type":"CtIfImpl","sourcecode":"if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    result.append('H');\n} else {\n    result.append('J', 'H');\n}"},"status":-1},{"failures":[],"tindex":"231d611e-40cd-11e6-a7b4-eb18fe69b58b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:295","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)"},"status":0},{"failures":[53,54,55,56],"tindex":"231d611f-40cd-11e6-a7b4-a54e76699a9b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"u","tempResult":"b","pBytes":"b","cp":"y"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:237","type":"CtForImpl","sourcecode":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n}"},"status":-1},{"failures":[],"tindex":"231e4b80-40cd-11e6-a7b4-a5d4797d7ae7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"keyLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:221","type":"CtLocalVariableImpl","sourcecode":"int int = keyLen"},"status":-2},{"failures":[120],"tindex":"231e7291-40cd-11e6-a7b4-8726acc007dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"status":-1},{"failures":[132,133,134,135,136,137],"tindex":"231e7292-40cd-11e6-a7b4-cb1ceff9c7b4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[],"tindex":"231e7293-40cd-11e6-a7b4-c15e3c4c6b61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:495","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"variableMap":{"currentLinePos":"org.apache.commons.codec.binary.BaseNCodec.EOF","pos":"org.apache.commons.codec.binary.BaseNCodec.EOF","context":"context","length":"org.apache.commons.codec.binary.BaseNCodec.EOF","buffer":"pArray","lineSeparator":"pArray","lineLength":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:431","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"status":-2},{"failures":[138,139],"tindex":"231e7294-40cd-11e6-a7b4-ef0f2b43bb6f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:309","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"status":-1},{"failures":[140],"tindex":"231e7295-40cd-11e6-a7b4-c3bef617ed07","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:386","type":"CtAssignmentImpl","sourcecode":"ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch)"},"status":-1},{"failures":[106,108,109,110,111,113,114,115],"tindex":"231e7296-40cd-11e6-a7b4-1b4f655cb29d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"todo"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return n - todo"},"status":-1},{"failures":[],"tindex":"231e99a7-40cd-11e6-a7b4-d5cca37c1d3a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"value","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:442","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n    result.append('K');\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n    result.append('J');\n} else {\n    result.append('J', 'K');\n}"},"status":-2},{"failures":[141,142,143,144,145,146,147,148,140],"tindex":"231e99a8-40cd-11e6-a7b4-edde24fe412d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"status":-1},{"failures":[],"tindex":"231e99a9-40cd-11e6-a7b4-8d708d9736ec","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:87","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : charsToTrim) {\n    upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n}"},"status":-2},{"failures":[53,56],"tindex":"231e99aa-40cd-11e6-a7b4-bbbee17d61c8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:316","type":"CtAssignmentImpl","sourcecode":"out[1] = right"},"status":-1},{"failures":[15,16,17,18,20,21,22],"tindex":"231e99ab-40cd-11e6-a7b4-39f929eeb506","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:200","type":"CtInvocationImpl","sourcecode":"altCtx.update(saltBytes)"},"variableMap":{"altCtx":"ctx","saltBytes":"finalb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:237","type":"CtWhileImpl","sourcecode":"while (ii > 0) {\n    if ((ii & 1) == 1) {\n        ctx.update(finalb[j]);\n    } else {\n        ctx.update(keyBytes[j]);\n    }\n    ii >>= 1;\n}"},"status":-1},{"failures":[],"tindex":"231e99ac-40cd-11e6-a7b4-5de5f169f50a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:286","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:470","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer)"},"status":-2},{"failures":[23,24,25],"tindex":"231ec0bd-40cd-11e6-a7b4-fd7ca4ac8bf3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:97","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"231ec0be-40cd-11e6-a7b4-f7638ba8f573","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:137","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:225","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(value)))"},"status":-2},{"failures":[],"tindex":"231ec0bf-40cd-11e6-a7b4-31a7fd895900","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:346","type":"CtAssignmentImpl","sourcecode":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:524","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[149,150,151,152,153],"tindex":"231ec0c0-40cd-11e6-a7b4-3f234995dce5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"printable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:288","type":"CtIfImpl","sourcecode":"if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    pos = 1;\n}"},"status":-1},{"failures":[],"tindex":"231ec0c1-40cd-11e6-a7b4-3b13b7c693d6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:130","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet"},"variableMap":{"languages":"other"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:137","type":"CtReturnImpl","sourcecode":"return other"},"status":-2},{"failures":[],"tindex":"231ec0c2-40cd-11e6-a7b4-6b9208c4ceb1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":0},{"failures":[],"tindex":"231ec0c3-40cd-11e6-a7b4-b154a0bd000b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\"')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:97","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":0},{"failures":[],"tindex":"231ee7d4-40cd-11e6-a7b4-73d321247ca9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"name2Size"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"status":-2},{"failures":[116,123],"tindex":"231ee7d5-40cd-11e6-a7b4-991025c129f9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:389","type":"CtAssignmentImpl","sourcecode":"code = '6'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:357","type":"CtAssignmentImpl","sourcecode":"code = '2'"},"status":-1},{"failures":[],"tindex":"231ee7d6-40cd-11e6-a7b4-b3db27c9c5c5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:378","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[154,155,156,157,158,159,160],"tindex":"231ee7d7-40cd-11e6-a7b4-5f1420d8a6c3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"status":-1},{"failures":[116,120],"tindex":"231ee7d8-40cd-11e6-a7b4-ff8023f10f5c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtIfImpl","sourcecode":"if (lastCode == '/') {\n    continue;\n} "},"status":-1},{"failures":[31,32,33,34,161,35,37,162,38,163,164,165,41,166,42,167],"tindex":"231ee7d9-40cd-11e6-a7b4-df603507828b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:132","type":"CtLocalVariableImpl","sourcecode":"final int int = (text.length()) - 2"},"variableMap":{"text":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:256","type":"CtLocalVariableImpl","sourcecode":"final int int = leftToRightThenRightToLeftProcessing(name1, name2)"},"status":-1},{"failures":[168],"tindex":"231ee7da-40cd-11e6-a7b4-b120e74b9c79","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"v\", \"f\")"},"status":-1},{"failures":[],"tindex":"231f0eeb-40cd-11e6-a7b4-9f95e84167a8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:882","type":"CtReturnImpl","sourcecode":"return result"},"status":-2},{"failures":[],"tindex":"231f0eec-40cd-11e6-a7b4-d1e349c14d18","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"variableMap":{"b":"b","offset":"offset","iValue":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:402","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 24) & 255))"},"status":0},{"failures":[],"tindex":"231f0eed-40cd-11e6-a7b4-5b38e1577942","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"variableMap":{"u":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"cnt = keyBytes.int"},"status":-2},{"failures":[169,170,9,10,171,172],"tindex":"231f0eee-40cd-11e6-a7b4-337215082702","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:179","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[149,150,151,152,153],"tindex":"231f0eef-40cd-11e6-a7b4-81f00f7bb7fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"cnt = keyBytes.int"},"variableMap":{"keyBytes":"bytes","cnt":"i","length":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:318","type":"CtAssignmentImpl","sourcecode":"b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"status":-1},{"failures":[],"tindex":"231f0ef0-40cd-11e6-a7b4-7f87bb2f2a0d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:421","type":"CtReturnImpl","sourcecode":"return firstLetter + name"},"variableMap":{"name":"org.apache.commons.codec.language.Caverphone1.SIX_1","firstLetter":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:124","type":"CtReturnImpl","sourcecode":"return txt.substring(0, org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String.length())"},"status":-2},{"failures":[5,7,8],"tindex":"231f3601-40cd-11e6-a7b4-05a8e7d7f08d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:557","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"231f3602-40cd-11e6-a7b4-a7f1aa0aec6f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"variableMap":{"maxLength":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:353","type":"CtAssignmentImpl","sourcecode":"d = results[1]"},"status":-2},{"failures":[71,72,73,74,75],"tindex":"231f3603-40cd-11e6-a7b4-7be12b7a51b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:196","type":"CtInvocationImpl","sourcecode":"sBuf.append(current)"},"status":-1},{"failures":[23,24,25,26,27,28,29,30],"tindex":"231f3604-40cd-11e6-a7b4-59c871511861","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"from"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:152","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[],"tindex":"231f3605-40cd-11e6-a7b4-3dcc3f184622","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:559","type":"CtReturnImpl","sourcecode":"return result"},"variableMap":{"result":"replacementDefault"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:191","type":"CtReturnImpl","sourcecode":"return java.lang.String[]"},"status":0},{"failures":[124,125,126,127,128,129,130,131],"tindex":"231f3606-40cd-11e6-a7b4-dd0de18265a6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:121","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(phonemeRight.java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"231f3607-40cd-11e6-a7b4-ff0ac15a8e65","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"code = '1'"},"status":-2},{"failures":[],"tindex":"231f5d18-40cd-11e6-a7b4-d987fafe90c0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"status":-2},{"failures":[],"tindex":"231f5d19-40cd-11e6-a7b4-63cf6af31339","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\", \"N\")"},"variableMap":{"result":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-2},{"failures":[5,7,8],"tindex":"231f5d1a-40cd-11e6-a7b4-079276300c3f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:452","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[124,125,126,127,128,129,130,131],"tindex":"231f5d1b-40cd-11e6-a7b4-6f317d13e1e0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"variableMap":{"rules":"lines"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-1},{"failures":[5,6,7],"tindex":"231f5d1c-40cd-11e6-a7b4-07c68fae3418","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:980","type":"CtIfImpl","sourcecode":"if ((value.length()) <= addChars) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n}"},"status":-1},{"failures":[],"tindex":"231f5d1d-40cd-11e6-a7b4-993fe84e7f66","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:325","type":"CtLocalVariableImpl","sourcecode":"int int = c"},"status":-2},{"failures":[],"tindex":"231f5d1e-40cd-11e6-a7b4-1de45e17dd7c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:332","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n    if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n        result.append(\"KS\");\n    } else {\n        result.append('X');\n    }\n    index += 3;\n} else {\n    result.append('K');\n    index += 2;\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:551","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    index++;\n    result.append('L');\n}"},"status":-2},{"failures":[],"tindex":"231f842f-40cd-11e6-a7b4-dd53fbd9a494","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"to","name2Size":"terminator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"status":-2},{"failures":[173,174],"tindex":"231f8430-40cd-11e6-a7b4-cb1c273c41e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.Caverphone1.SIX_1":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:600","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"status":-1},{"failures":[],"tindex":"231fd251-40cd-11e6-a7b4-e9c433f39efc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"value","org.apache.commons.codec.language.Caverphone1.SIX_1":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":-2},{"failures":[132,175,133,176,134,135,136,137],"tindex":"231ff962-40cd-11e6-a7b4-1fa735f191c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:122","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"status":-1},{"failures":[149,150,151,152,153],"tindex":"231ff963-40cd-11e6-a7b4-2b2ffeacfd96","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"c &= 268435455"},"variableMap":{"c":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:290","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer)"},"status":-1},{"failures":[177,12,13,14,178,179,180,181],"tindex":"231ff964-40cd-11e6-a7b4-e3057da2a9db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:339","type":"CtWhileImpl","sourcecode":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"blocksize","sBytes":"altResult","tempResult":"altResult","saltLen":"blocksize","cp":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:371","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[53,56],"tindex":"231ff965-40cd-11e6-a7b4-375de9868a91","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"variableMap":{"b":"b","offset":"offset","iValue":"iValue"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[],"tindex":"231ff966-40cd-11e6-a7b4-8f27ca26b6ee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:157","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[boolean ? 4096 : 8192]"},"status":-2},{"failures":[182,124,183,125,126,184,185,127,186,187,188,189,190,191,128,129,130,131],"tindex":"23202077-40cd-11e6-a7b4-19e5dce87e97","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"body","leftCharacter":"body","rightCharacter":"body","location":"body"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:392","type":"CtIfImpl","sourcecode":"if ((body.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n    phs.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n} "},"status":-1},{"failures":[],"tindex":"23202078-40cd-11e6-a7b4-b3ce9fdf225e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:125","type":"CtIfImpl","sourcecode":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n} "},"variableMap":{"urlsafe":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
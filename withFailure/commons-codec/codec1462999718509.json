{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":43,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":128,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":111,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":10,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":19,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":133,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":113,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":67,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":63,"org.apache.commons.codec.binary.Base64Test.testTriplets":72,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":51,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":22,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":47,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":132,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":55,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":110,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":60,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":87,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":12,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":100,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":109,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":105,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":32,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":81,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":76,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":82,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":42,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":86,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":83,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":25,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":84,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":53,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":3,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":48,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":123,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":68,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":90,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":64,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":95,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":127,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":75,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":27,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":121,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":134,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":39,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":46,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":141,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":140,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":125,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":106,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":119,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":122,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":20,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":74,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":130,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":41,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":59,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":107,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":69,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":126,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":136,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":2,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":33,"org.apache.commons.codec.language.MetaphoneTest.testTCH":117,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":49,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":44,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":137,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":102,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":52,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":89,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":129,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":101,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":26,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":85,"org.apache.commons.codec.binary.Base64Test.testBase64":99,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":18,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":50,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":4,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":78,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":124,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":40,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":88,"org.apache.commons.codec.binary.Base64Test.testSingletons":94,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":17,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":115,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":57,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":98,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":7,"org.apache.commons.codec.binary.Base64Test.testPairs":77,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":13,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":56,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":103,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":114,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":14,"org.apache.commons.codec.binary.Base64Test.testCodec112":91,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":6,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":31,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":5,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":116,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":28,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":36,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":73,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":54,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":70,"org.apache.commons.codec.binary.Base64Test.testCodec68":96,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":118,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":71,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":61,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":92,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":104,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":120,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":34,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":29,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":37,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":93,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":16,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":112,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":45,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":38,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":108,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":135,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":58,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":139,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":8,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":62,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":80,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":131,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":97,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":138,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":15,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":35,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":65,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":79,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":21},"transformations":[{"failures":[],"tindex":"bccdc855-17b9-11e6-925a-335a7438f865","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)","position":"org.apache.commons.codec.language.Nysiis:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)"},"variableMap":{"str":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"status":-2},{"failures":[],"tindex":"bccdef66-17b9-11e6-925a-f9f72ea87230","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"status":-2},{"failures":[],"tindex":"bccdef67-17b9-11e6-925a-1d56907083a3","series":0,"name":"replace","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"maxResultSize","minRating":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"maxResultSize","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"maxResultSize"},"type":"adrStmt","transplantationPoint":{"toString":"if (len > maxResultSize) {\n    throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n} ","position":"org.apache.commons.codec.binary.Base64:670","type":"CtIfImpl","sourcecode":"if (len > maxResultSize) {\n    throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n} "},"status":-3},{"failures":[0,1],"tindex":"bcce1678-17b9-11e6-925a-39e74aea5928","series":0,"name":"replace","transplant":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K', 'J')","position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[],"tindex":"bcce1679-17b9-11e6-925a-1374eb4be693","series":0,"name":"replace","transplant":{"toString":"builder.append('0')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"variableMap":{"builder":"saltString"},"type":"adrStmt","transplantationPoint":{"toString":"saltString.append(org.apache.commons.codec.digest.B64.B64T.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.B64T.length())))","position":"org.apache.commons.codec.digest.B64:75","type":"CtInvocationImpl","sourcecode":"saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())))"},"status":-3},{"failures":[2],"tindex":"bcce3d8a-17b9-11e6-925a-994e6161f238","series":0,"name":"replace","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.RFC1522Codec:105","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[3,4,5,6,7,8],"tindex":"bcce3d8b-17b9-11e6-925a-a73bea362992","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"[^a-z]\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"d\", \"t\")","position":"org.apache.commons.codec.language.Caverphone2:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"status":-1},{"failures":[],"tindex":"bcce3d8c-17b9-11e6-925a-5b3130325397","series":0,"name":"replace","transplant":{"toString":"builder.append('0')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"variableMap":{"builder":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd)","position":"org.apache.commons.codec.language.Metaphone:134","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-3},{"failures":[],"tindex":"bcce3d8d-17b9-11e6-925a-2b8b9adc1049","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('\\'')","position":"org.apache.commons.codec.net.QCodec:72","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\'')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(' ')","position":"org.apache.commons.codec.net.URLCodec:91","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(' ')"},"status":-2},{"failures":[0,1],"tindex":"bcce649e-17b9-11e6-925a-65a303d67b59","series":0,"name":"replace","transplant":{"toString":"final boolean negate = boxContent.startsWith(\"^\")","position":"org.apache.commons.codec.language.bm.Rule:552","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = boxContent.startsWith(\"^\")"},"variableMap":{"boxContent":"value"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean slavoGermanic = isSlavoGermanic(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:92","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = isSlavoGermanic(value)"},"status":-1},{"failures":[],"tindex":"bcce649f-17b9-11e6-925a-7b650d05a5e4","series":0,"name":"add","transplant":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"rawLine"},"type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String leftCharacter = parts[0];\n    final java.lang.String rightCharacter = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:286","type":"CtIfImpl","sourcecode":"if ((parts.int) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String java.lang.String = parts[0];\n    final java.lang.String java.lang.String = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}"},"status":-2},{"failures":[0,1],"tindex":"bcce8bb0-17b9-11e6-925a-fdaa074b6a22","series":0,"name":"add","transplant":{"toString":"y++","position":"org.apache.commons.codec.digest.UnixCrypt:244","type":"CtUnaryOperatorImpl","sourcecode":"y++"},"variableMap":{"y":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:454","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"bcce8bb1-17b9-11e6-925a-47e3f5106f17","series":0,"name":"replace","transplant":{"toString":"this.data = data","position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"this.data = new char[buffSize]","position":"org.apache.commons.codec.language.ColognePhonetic:212","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[buffSize]"},"status":-2},{"failures":[],"tindex":"bcd03962-17b9-11e6-925a-a57b6f5faf41","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")","position":"org.apache.commons.codec.binary.Base32:309","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the any language set.\")","position":"org.apache.commons.codec.language.bm.Languages:259","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the any language set.\")"},"status":0},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"bcd03963-17b9-11e6-925a-1ffebee37b20","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.write(((char)((u << 4) + l)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:367","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"status":-1},{"failures":[],"tindex":"bcd03964-17b9-11e6-925a-7b8537124e62","series":0,"name":"add","transplant":{"toString":"return buf","position":"org.apache.commons.codec.binary.BaseNCodec:434","type":"CtReturnImpl","sourcecode":"return buf"},"variableMap":{"buf":"pArray"},"type":"adrStmt","transplantationPoint":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return pArray"},"status":-2},{"failures":[],"tindex":"bcd03965-17b9-11e6-925a-a9aa9e751f06","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_N","position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[21,22],"tindex":"bcd03966-17b9-11e6-925a-5383f9fedf77","series":0,"name":"add","transplant":{"toString":"n += 2","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"variableMap":{"n":"c"},"type":"adrStmt","transplantationPoint":{"toString":"c = (c >>> 1) | (c << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 1) | (c << 27)"},"status":-1},{"failures":[23,24,25,26,27,28,29,30,31],"tindex":"bcd06077-17b9-11e6-925a-83457459578b","series":0,"name":"replace","transplant":{"toString":"code.append('0')","position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('T')","position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"status":-1},{"failures":[32,33],"tindex":"bcd06078-17b9-11e6-925a-913f5490d9b4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l3\", \"L3\")","position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"status":-1},{"failures":[],"tindex":"bcd06079-17b9-11e6-925a-1dcd40c77814","series":0,"name":"add","transplant":{"toString":"while (ii > 0) {\n    if ((ii & 1) == 1) {\n        ctx.update(finalb[j]);\n    } else {\n        ctx.update(keyBytes[j]);\n    }\n    ii >>= 1;\n}","position":"org.apache.commons.codec.digest.Md5Crypt:237","type":"CtWhileImpl","sourcecode":"while (ii > 0) {\n    if ((ii & 1) == 1) {\n        ctx.update(finalb[j]);\n    } else {\n        ctx.update(keyBytes[j]);\n    }\n    ii >>= 1;\n}"},"variableMap":{"ii":"cnt","keyBytes":"altResult","finalb":"altResult","ctx":"ctx","j":"cnt"},"type":"adrStmt","transplantationPoint":{"toString":"while (cnt > blocksize) {\n    ctx.update(altResult, 0, blocksize);\n    cnt -= blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:223","type":"CtWhileImpl","sourcecode":"while (cnt > blocksize) {\n    ctx.update(altResult, 0, blocksize);\n    cnt -= blocksize;\n}"},"status":-2},{"failures":[],"tindex":"bcd0607a-17b9-11e6-925a-4b297445939e","series":0,"name":"add","transplant":{"toString":"this.languages = java.util.Collections.unmodifiableSet(languages)","position":"org.apache.commons.codec.language.bm.Languages:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = java.util.Collections.unmodifiableSet(languages)"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"toString":"this.languages = languages","position":"org.apache.commons.codec.language.bm.Lang:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = languages"},"status":-2},{"failures":[],"tindex":"bcd14adb-17b9-11e6-925a-7331ef511e85","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:481","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"bcd14adc-17b9-11e6-925a-5d119da9ba6b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i += patternLength","position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"variableMap":{"patternLength":"cnt","i":"cnt"},"type":"adrStmt","transplantationPoint":{"toString":"cnt = keyBytes.length","position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"cnt = keyBytes.int"},"status":-3},{"failures":[],"tindex":"bcd14add-17b9-11e6-925a-b79e34b6a35e","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.endsWith(input, content)","position":"org.apache.commons.codec.language.bm.Rule:540","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.endsWith(input, content)"},"variableMap":{"input":"cs1","content":"cs2"},"type":"adrStmt","transplantationPoint":{"toString":"return cs1.equals(cs2)","position":"org.apache.commons.codec.binary.StringUtils:78","type":"CtReturnImpl","sourcecode":"return cs1.equals(cs2)"},"status":-2},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115],"tindex":"bcd171ee-17b9-11e6-925a-ddfbc32916a2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((context.buffer) == null) {\n    context.buffer = new byte[getDefaultBufferSize()];\n    context.pos = 0;\n    context.readPos = 0;\n} else {\n    final byte[] b = new byte[(context.buffer.length) * (org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR)];\n    java.lang.System.arraycopy(context.buffer, 0, b, 0, context.buffer.length);\n    context.buffer = b;\n}","position":"org.apache.commons.codec.binary.BaseNCodec:249","type":"CtIfImpl","sourcecode":"if ((context.byte[]) == null) {\n    context.byte[] = new byte[getDefaultBufferSize()];\n    context.int = 0;\n    context.int = 0;\n} else {\n    final byte[] byte[] = new byte[(context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)];\n    java.lang.System.arraycopy(context.byte[], 0, b, 0, context.byte[].int);\n    context.byte[] = b;\n}"},"status":-1},{"failures":[],"tindex":"bcd171ef-17b9-11e6-925a-a10785bafa56","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('/')","position":"org.apache.commons.codec.net.QCodec:80","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('/')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(';')","position":"org.apache.commons.codec.net.QCodec:85","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(';')"},"status":0},{"failures":[],"tindex":"bcd171f0-17b9-11e6-925a-9d405aefb7d6","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"base64String","key":"base64String"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.binary.Base64().decode(base64String)","position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"status":-2},{"failures":[116],"tindex":"bcd171f1-17b9-11e6-925a-21c50c9b15e1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))","position":"org.apache.commons.codec.digest.Sha2Crypt:103","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"status":-1},{"failures":[],"tindex":"bcd171f2-17b9-11e6-925a-ab0f35e02516","series":0,"name":"replace","transplant":{"toString":"char lastChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char hwChar = str.charAt((index - 1))","position":"org.apache.commons.codec.language.Soundex:188","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 1))"},"status":-2},{"failures":[],"tindex":"bcd19903-17b9-11e6-925a-4d705087d499","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.languages = languages","position":"org.apache.commons.codec.language.bm.Lang:192","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.language.bm.Languages = languages"},"status":-2},{"failures":[],"tindex":"bcd19904-17b9-11e6-925a-3d7ec7c50244","series":0,"name":"replace","transplant":{"toString":"this.encodeTable = org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE","position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"buffer","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"context.buffer = null","position":"org.apache.commons.codec.binary.BaseNCodec:297","type":"CtAssignmentImpl","sourcecode":"context.byte[] = null"},"status":-2},{"failures":[23,117],"tindex":"bcd19905-17b9-11e6-925a-e7d258812bcb","series":0,"name":"add","transplant":{"toString":"code.append('0')","position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:199","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"bcd19906-17b9-11e6-925a-3d45d0239a5c","series":0,"name":"replace","transplant":{"toString":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"variableMap":{"b":"sBytes","c":"saltLen","u":"saltLen","y":"saltLen"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(sBytes, 0, saltLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:379","type":"CtInvocationImpl","sourcecode":"ctx.update(sBytes, 0, saltLen)"},"status":-2},{"failures":[118,119,120,121,122,123,124,125,126],"tindex":"bcd1c017-17b9-11e6-925a-4d0f339fa63c","series":0,"name":"add","transplant":{"toString":"java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len)","position":"org.apache.commons.codec.binary.Base64:768","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len)"},"variableMap":{"resizedBytes":"finalb","bigBytes":"finalb","len":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE","startSrc":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE","startDst":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE"},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE)","position":"org.apache.commons.codec.digest.Md5Crypt:273","type":"CtInvocationImpl","sourcecode":"ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int)"},"status":-1},{"failures":[127,128,0,1],"tindex":"bcd1c018-17b9-11e6-925a-a773039b0005","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:695","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"bcd1c019-17b9-11e6-925a-6bf68bf6bde7","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1, key)","position":"org.apache.commons.codec.digest.HmacUtils:81","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"bcd1c01a-17b9-11e6-925a-0d6eba5b53ca","series":0,"name":"replace","transplant":{"toString":"this.encodedBlockSize = encodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"variableMap":{"encodedBlockSize":"patternLength"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i += patternLength","position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"status":-2},{"failures":[129,127,128,0,1],"tindex":"bcd1c01b-17b9-11e6-925a-8b63d587ef3a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('P')","position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"status":-1},{"failures":[32],"tindex":"bcd1e72c-17b9-11e6-925a-df4d1b81c6bc","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"q\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:75","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"q\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"n+\", \"N\")","position":"org.apache.commons.codec.language.Caverphone1:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"n+\", \"N\")"},"status":-1},{"failures":[],"tindex":"bcd1e72d-17b9-11e6-925a-ff4f799ff21d","series":0,"name":"replace","transplant":{"toString":"return sBuf.toString()","position":"org.apache.commons.codec.language.RefinedSoundex:203","type":"CtReturnImpl","sourcecode":"return sBuf.toString()"},"variableMap":{"sBuf":"phonemeText"},"type":"adrStmt","transplantationPoint":{"toString":"return (((phonemeText.toString()) + \"[\") + (languages)) + \"]\"","position":"org.apache.commons.codec.language.bm.Rule:168","type":"CtReturnImpl","sourcecode":"return (((java.lang.StringBuilder.toString()) + \"[\") + (org.apache.commons.codec.language.bm.Languages.LanguageSet)) + \"]\""},"status":0},{"failures":[],"tindex":"bcd1e72e-17b9-11e6-925a-5b8bf1a4294d","series":0,"name":"replace","transplant":{"toString":"java.lang.String replacedName = name.toUpperCase()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"variableMap":{"name":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name1LtRStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:301","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":0},{"failures":[],"tindex":"bcd1e72f-17b9-11e6-925a-0fae38fc2e4c","series":0,"name":"add","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"arrayOctet"},"type":"adrStmt","transplantationPoint":{"toString":"for (final byte element : arrayOctet) {\n    if (((pad) == element) || (isInAlphabet(element))) {\n        return true;\n    } \n}","position":"org.apache.commons.codec.binary.BaseNCodec:499","type":"CtForEachImpl","sourcecode":"for (final byte byte : arrayOctet) {\n    if (((byte) == element) || (isInAlphabet(element))) {\n        return true;\n    } \n}"},"status":0},{"failures":[29],"tindex":"bcd20e40-17b9-11e6-925a-adb7e2da636d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.append('0')","position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"status":-1},{"failures":[],"tindex":"bcd20e41-17b9-11e6-925a-d3d734e27c88","series":0,"name":"add","transplant":{"toString":"return encode(((byte[])(obj)))","position":"org.apache.commons.codec.binary.BaseNCodec:338","type":"CtReturnImpl","sourcecode":"return encode(((byte[])(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:531","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[130,131],"tindex":"bcd20e42-17b9-11e6-925a-4d6ccdc636ad","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"finalRules can not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.RADIX)) + \"): \") + b))","position":"org.apache.commons.codec.net.Utils:45","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b))"},"status":-1},{"failures":[],"tindex":"bcd20e43-17b9-11e6-925a-0d5525cb1dd6","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (rule.acceptOnMatch) {\n    langs.retainAll(rule.languages);\n} else {\n    langs.removeAll(rule.languages);\n}","position":"org.apache.commons.codec.language.bm.Lang:220","type":"CtIfImpl","sourcecode":"if (rule.boolean) {\n    langs.retainAll(rule.java.util.Set<java.lang.String>);\n} else {\n    langs.removeAll(rule.java.util.Set<java.lang.String>);\n}"},"status":-2},{"failures":[132,133,134,135,136,137,138,139,116,140,141],"tindex":"bcd20e44-17b9-11e6-925a-2b8bb3c794b7","series":0,"name":"replace","transplant":{"toString":"sb.append(\", lcon='\").append(lCon).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:466","type":"CtInvocationImpl","sourcecode":"sb.append(\", lcon='\").append(lCon).append('\\'')"},"variableMap":{"lCon":"saltString","sb":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(saltString)","position":"org.apache.commons.codec.digest.Sha2Crypt:429","type":"CtInvocationImpl","sourcecode":"buffer.append(saltString)"},"status":-1},{"failures":[],"tindex":"bcd20e45-17b9-11e6-925a-a58aab631075","series":0,"name":"replace","transplant":{"toString":"if (len > maxResultSize) {\n    throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n} ","position":"org.apache.commons.codec.binary.Base64:670","type":"CtIfImpl","sourcecode":"if (len > maxResultSize) {\n    throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize));\n} "},"variableMap":{"len":"lbitWorkArea","maxResultSize":"decodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (pad)) {\n    context.eof = true;\n    break;\n} else {\n    final byte[] buffer = ensureBufferSize(decodeSize, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.decodeTable.length))) {\n        final int result = org.apache.commons.codec.binary.Base32.this.decodeTable[b];\n        if (result >= 0) {\n            context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK);\n            context.lbitWorkArea = ((context.lbitWorkArea) << (org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE)) + result;\n            if ((context.modulus) == 0) {\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            } \n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base32:347","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n            context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-2},{"failures":[1],"tindex":"bcd23556-17b9-11e6-925a-cf17384777c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.append(value.substring(0, addChars))","position":"org.apache.commons.codec.language.DoubleMetaphone:992","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars))"},"status":-1},{"failures":[],"tindex":"bcd23557-17b9-11e6-925a-ef65da4da052","series":0,"name":"replace","transplant":{"toString":"lastChar = ch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"variableMap":{"ch":"code","lastChar":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '1'","position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"code = '1'"},"status":-2},{"failures":[],"tindex":"bcd23558-17b9-11e6-925a-b307c47196ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName))","position":"org.apache.commons.codec.language.bm.Rule:258","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName))"},"status":0},{"failures":[34,35,36,38,39,40,55,56,57,58,60,61,62,63,64,65,67,68,69,70,71,73,76,77,78,79,80,81,82,83,84,86,87,88,90,92,93,94,97,99,102,103,104,106,107],"tindex":"bcd23559-17b9-11e6-925a-2fa182caf58e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte[] buffer = ensureBufferSize(decodeSize, context);\n    final byte b = in[(inPos++)];\n    if (b == (pad)) {\n        context.eof = true;\n        break;\n    } else {\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n            final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n            if (result >= 0) {\n                context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n                context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n                if ((context.modulus) == 0) {\n                    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.binary.Base64:435","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    final byte byte = in[(inPos++)];\n    if (b == (byte)) {\n        context.boolean = true;\n        break;\n    } else {\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n            final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n            if (result >= 0) {\n                context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                if ((context.int) == 0) {\n                    buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":53,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
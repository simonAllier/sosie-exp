{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":3,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":78,"org.apache.commons.codec.binary.HexTest.testCustomCharset":81,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":88,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":36,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":49,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":69,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":77,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":4,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":65,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":12,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":51,"org.apache.commons.codec.binary.Base64Test.testBase64":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":34,"org.apache.commons.codec.binary.Base64Test.testTriplets":54,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":45,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":44,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":86,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":16,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":22,"org.apache.commons.codec.binary.Base64Test.testUUID":58,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":85,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":41,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":68,"org.apache.commons.codec.binary.Base64Test.testSingletons":71,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":53,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":48,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":74,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":24,"org.apache.commons.codec.binary.Base64Test.testPairs":57,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":67,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":47,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":76,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":79,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":52,"org.apache.commons.codec.binary.Base64Test.testCodec112":70,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":9,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":8,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":61,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":62,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":66,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":84,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":7,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":38,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":82,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":63,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":28,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":64,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":6,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":11,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":37,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":1,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":17,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":21,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":5,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":35,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":10,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":29,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":83,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":30,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":72,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":87,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":18,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":14,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":31,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":33,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":56,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":19,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":50,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":40,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":46,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":80,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":25,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":0,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":20,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":55,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":60,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":73,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":42,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":89,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":39,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":26,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":27,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":32,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":23,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":15,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":43,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":59,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":2},"transformations":[{"failures":[],"tindex":"ee575a11-1229-11e6-aece-0f1f2e5589d4","series":0,"name":"replace","transplant":{"toString":"byte[] finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:220","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = ctx1.digest()"},"variableMap":{"ctx1":"altCtx"},"type":"adrStmt","transplantationPoint":{"toString":"byte[] tempResult = altCtx.digest()","position":"org.apache.commons.codec.digest.Sha2Crypt:283","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = altCtx.digest()"},"status":-3},{"failures":[0],"tindex":"ee578122-1229-11e6-aece-33e11cb0307c","series":0,"name":"replace","transplant":{"toString":"return 3","position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2)","position":"org.apache.commons.codec.language.RefinedSoundex:116","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2)"},"status":-1},{"failures":[],"tindex":"ee57a833-1229-11e6-aece-231e4a96f5ba","series":0,"name":"add","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"data"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.net.QCodec.this.encodeBlanks) {\n    for (int i = 0 ; i < (data.length) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n            data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n        } \n    }\n} ","position":"org.apache.commons.codec.net.QCodec:158","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.net.QCodec.this.boolean) {\n    for (int int = 0 ; i < (data.int) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n            data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n        } \n    }\n} "},"status":0},{"failures":[1,2,3],"tindex":"ee57a834-1229-11e6-aece-4d404e9c9d30","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.binary.Base64().decode(base64Data)","position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64Data)"},"variableMap":{"base64Data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}","position":"org.apache.commons.codec.digest.HmacUtils:313","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-1},{"failures":[4,5,6],"tindex":"ee57a835-1229-11e6-aece-9b27344a5150","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)","position":"org.apache.commons.codec.binary.Base64:554","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)"},"variableMap":{"binaryData":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)"},"status":-1},{"failures":[],"tindex":"ee57cf46-1229-11e6-aece-630be92363be","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.decodeSize = (org.apache.commons.codec.binary.Base64.this.encodeSize) - 1","position":"org.apache.commons.codec.binary.Base64:295","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.this.int) - 1"},"status":-2},{"failures":[],"tindex":"ee57cf47-1229-11e6-aece-29d4891b9bc0","series":0,"name":"add","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"toString":"this.decodeTable = org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE","position":"org.apache.commons.codec.binary.Base32:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[],"tindex":"ee57cf48-1229-11e6-aece-bf223873a481","series":0,"name":"replace","transplant":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}","position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtIfImpl","sourcecode":"if (ascii instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n} "},"status":-2},{"failures":[],"tindex":"ee57f659-1229-11e6-aece-8d15b94509b9","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < (name1Char.length) ; i++) {\n    if (i > name2Size) {\n        break;\n    } \n    name1LtRStart = name1.substring(i, (i + 1));\n    name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n    name2RtLStart = name2.substring(i, (i + 1));\n    name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n    if (name1LtRStart.equals(name2RtLStart)) {\n        name1Char[i] = ' ';\n        name2Char[i] = ' ';\n    } \n    if (name1LtREnd.equals(name2RtLEnd)) {\n        name1Char[(name1Size - i)] = ' ';\n        name2Char[(name2Size - i)] = ' ';\n    } \n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:307","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (name1Char.int) ; i++) {\n    if (i > name2Size) {\n        break;\n    } \n    name1LtRStart = name1.substring(i, (i + 1));\n    name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n    name2RtLStart = name2.substring(i, (i + 1));\n    name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n    if (name1LtRStart.equals(name2RtLStart)) {\n        name1Char[i] = ' ';\n        name2Char[i] = ' ';\n    } \n    if (name1LtREnd.equals(name2RtLEnd)) {\n        name1Char[(name1Size - i)] = ' ';\n        name2Char[(name2Size - i)] = ' ';\n    } \n}"},"variableMap":{"name1Char":"chars","name2RtLStart":"str","name1Size":"len","name2RtLEnd":"str","name2Char":"chars","length":"count","name1LtREnd":"str","name2Size":"len","name2":"str","name1":"str","name1LtRStart":"str"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}","position":"org.apache.commons.codec.language.SoundexUtils:48","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}"},"status":-3},{"failures":[],"tindex":"ee57f65a-1229-11e6-aece-b114c1197bd0","series":0,"name":"replace","transplant":{"toString":"return new char[]{ curr }","position":"org.apache.commons.codec.language.Nysiis:167","type":"CtReturnImpl","sourcecode":"return new char[]{ curr }"},"variableMap":{"curr":"prev"},"type":"adrStmt","transplantationPoint":{"toString":"return new char[]{ prev }","position":"org.apache.commons.codec.language.Nysiis:159","type":"CtReturnImpl","sourcecode":"return new char[]{ prev }"},"status":-3},{"failures":[],"tindex":"ee581d6b-1229-11e6-aece-f1395fcc68c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(sBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"status":0},{"failures":[],"tindex":"ee581d6c-1229-11e6-aece-6b279280b372","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:641","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)"},"variableMap":{"data":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"failures":[],"tindex":"ee581d6d-1229-11e6-aece-51d3feab84c1","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5, key)","position":"org.apache.commons.codec.digest.HmacUtils:63","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"ee581d6e-1229-11e6-aece-d99db7515eb6","series":0,"name":"replace","transplant":{"toString":"left = right","position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"variableMap":{"left":"pos","right":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"context.pos = 0","position":"org.apache.commons.codec.binary.BaseNCodec:251","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"status":-2},{"failures":[],"tindex":"ee58447f-1229-11e6-aece-9b4a6bd43574","series":0,"name":"replace","transplant":{"toString":"index = index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"index = index + 2"},"variableMap":{"index":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"toString":"this.chunkSeparatorLength = chunkSeparatorLength","position":"org.apache.commons.codec.binary.BaseNCodec:210","type":"CtAssignmentImpl","sourcecode":"this.int = chunkSeparatorLength"},"status":-2},{"failures":[7,8,9,10,11,12,13,14],"tindex":"ee584480-1229-11e6-aece-0f593ac17dc7","series":0,"name":"replace","transplant":{"toString":"final char[] out = new char[l << 1]","position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"variableMap":{"l":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] newData = new char[length]","position":"org.apache.commons.codec.language.ColognePhonetic:241","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"status":-1},{"failures":[],"tindex":"ee584481-1229-11e6-aece-19bbe1e33969","series":0,"name":"add","transplant":{"toString":"buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)))","position":"org.apache.commons.codec.binary.Base32:361","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 5))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:515","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[15,16],"tindex":"ee584482-1229-11e6-aece-830c3be0e344","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:711","type":"CtIfImpl","sourcecode":"if (isVowel(charAt(value, (index + 1)))) {\n    result.append('A', 'F');\n} else {\n    result.append('A');\n}"},"status":-1},{"failures":[17,18,19,20,21,22,23],"tindex":"ee586b93-1229-11e6-aece-a939c4d785dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((i & 1) != 0) {\n    ctx1.update(keyBytes);\n} else {\n    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:258","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx1.update(keyBytes);\n} else {\n    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n}"},"status":-1},{"failures":[24,25],"tindex":"ee586b94-1229-11e6-aece-ed06db1e3cd3","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"c\", \"k\")","position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^trough\", \"trou2f\")","position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^trough\", \"trou2f\")"},"status":-1},{"failures":[26,27,28,29,30],"tindex":"ee586b95-1229-11e6-aece-ef9da16b377b","series":0,"name":"replace","transplant":{"toString":"if (c1 == c2) {\n    continue;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"hex1","c2":"hex1"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(hex1)","position":"org.apache.commons.codec.net.URLCodec:144","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-1},{"failures":[],"tindex":"ee586b96-1229-11e6-aece-31e309432d9b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(sep).append(si.next())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:264","type":"CtInvocationImpl","sourcecode":"sb.append(sep).append(si.next())"},"status":-2},{"failures":[],"tindex":"ee5892a7-1229-11e6-aece-d3a67287e81d","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(' ')","position":"org.apache.commons.codec.net.URLCodec:91","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(' ')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:90","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-2},{"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"ee5892a8-1229-11e6-aece-ff81a5f28eb1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"encode(pArray, 0, pArray.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:430","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, pArray.int, context)"},"status":-1},{"failures":[],"tindex":"ee5892a9-1229-11e6-aece-fd189bbc8e36","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:539","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[],"tindex":"ee5892aa-1229-11e6-aece-7d58fff213a7","series":0,"name":"replace","transplant":{"toString":"return metaphone(str1).equals(metaphone(str2))","position":"org.apache.commons.codec.language.Metaphone:415","type":"CtReturnImpl","sourcecode":"return metaphone(str1).equals(metaphone(str2))"},"variableMap":{"str1":"value2","str2":"value2"},"type":"adrStmt","transplantationPoint":{"toString":"return isDoubleMetaphoneEqual(value1, value2, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:231","type":"CtReturnImpl","sourcecode":"return isDoubleMetaphoneEqual(value1, value2, false)"},"status":-2},{"failures":[15],"tindex":"ee5892ab-1229-11e6-aece-d5543d22305d","series":0,"name":"replace","transplant":{"toString":"result.append('K', 'J')","position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:762","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"status":-1},{"failures":[81,82,83,84,58,77],"tindex":"ee58b9bc-1229-11e6-aece-e158d7cf43e1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"j++","position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"status":-1},{"failures":[85,86],"tindex":"ee58b9bd-1229-11e6-aece-3582ac2a8450","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:617","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"variableMap":{"valueToDigest":"input","key":"l"},"type":"adrStmt","transplantationPoint":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"status":-1},{"failures":[],"tindex":"ee58b9be-1229-11e6-aece-e17d36fefd0b","series":0,"name":"replace","transplant":{"toString":"index += 4","position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"variableMap":{"index":"currentLine"},"type":"adrStmt","transplantationPoint":{"toString":"currentLine++","position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"status":0},{"failures":[],"tindex":"ee58b9bf-1229-11e6-aece-6b26129ce093","series":0,"name":"add","transplant":{"toString":"while (r == 0) {\n    r = read(singleByte, 0, 1);\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:98","type":"CtWhileImpl","sourcecode":"while (r == 0) {\n    r = read(byte[], 0, 1);\n}"},"variableMap":{"r":"bPos","singleByte":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(context.buffer, context.readPos, b, bPos, len)","position":"org.apache.commons.codec.binary.BaseNCodec:294","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len)"},"status":-2},{"failures":[],"tindex":"ee58b9c0-1229-11e6-aece-81f282088269","series":0,"name":"add","transplant":{"toString":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((sb.length()) > 0) {\n    sb.append(\"|\");\n} "},"variableMap":{"sb":"key"},"type":"adrStmt","transplantationPoint":{"toString":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} ","position":"org.apache.commons.codec.language.Nysiis:304","type":"CtIfImpl","sourcecode":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} "},"status":-2},{"failures":[],"tindex":"ee58b9c1-1229-11e6-aece-4bb2ffe8927a","series":0,"name":"replace","transplant":{"toString":"lastCode = code","position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"lastCode = code"},"variableMap":{"code":"nextChar","lastCode":"nextChar"},"type":"adrStmt","transplantationPoint":{"toString":"nextChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:344","type":"CtAssignmentImpl","sourcecode":"nextChar = '-'"},"status":-2},{"failures":[],"tindex":"ee58e0d2-1229-11e6-aece-879ec350df34","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((newPhonemes.size()) >= maxPhonemes) {\n    break EXPR;\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:116","type":"CtIfImpl","sourcecode":"if ((newPhonemes.size()) >= maxPhonemes) {\n    break EXPR;\n} "},"status":0},{"failures":[],"tindex":"ee58e0d3-1229-11e6-aece-a7fd234eb027","series":0,"name":"replace","transplant":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"variableMap":{"a":"d","t":"d","n":"d"},"type":"adrStmt","transplantationPoint":{"toString":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:347","type":"CtAssignmentImpl","sourcecode":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)"},"status":-2},{"failures":[],"tindex":"ee58e0d4-1229-11e6-aece-e5922e7d3904","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"status":-2},{"failures":[87,88,15,16],"tindex":"ee58e0d5-1229-11e6-aece-e7711738c011","series":0,"name":"replace","transplant":{"toString":"result.append('A', 'F')","position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:458","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[89,87,88,15,16],"tindex":"ee58e0d6-1229-11e6-aece-6389aa8bebb5","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('R')","position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('A')","position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"status":-1},{"failures":[],"tindex":"ee58e0d7-1229-11e6-aece-f39b6c4b09c5","series":0,"name":"add","transplant":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> rules = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType, org.apache.commons.codec.language.bm.RuleType.RULES, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:399","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet)"},"variableMap":{"nameType":"nameType","org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","languageSet":"languageSet"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules2 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:403","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet)"},"status":-2},{"failures":[],"tindex":"ee5907e8-1229-11e6-aece-3de657951d16","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:368","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"variableMap":{"valueToDigest":"binaryData","key":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false))","position":"org.apache.commons.codec.binary.Base64:569","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false))"},"status":-2},{"failures":[],"tindex":"ee5907e9-1229-11e6-aece-b5255e1a998d","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")","position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"ee5907ea-1229-11e6-aece-81b5cb2c6bba","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean accept = parts[2].equals(\"true\")","position":"org.apache.commons.codec.language.bm.Lang:175","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = parts[2].equals(\"true\")"},"status":-2},{"failures":[],"tindex":"ee5907eb-1229-11e6-aece-03db40730a65","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(baseNCodec.hasData(context))) {\n    final byte[] buf = new byte[doEncode ? 4096 : 8192];\n    final int c = in.read(buf);\n    if (doEncode) {\n        baseNCodec.encode(buf, 0, c, context);\n    } else {\n        baseNCodec.decode(buf, 0, c, context);\n    }\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:156","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n    final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n    final int int = java.io.InputStream.read(buf);\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n} "},"status":-2},{"failures":[],"tindex":"ee5907ec-1229-11e6-aece-f5e3a63a8bf7","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str)","position":"org.apache.commons.codec.language.Caverphone:89","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str)"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":44,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
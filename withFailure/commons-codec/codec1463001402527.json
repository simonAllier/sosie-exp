{"failureDictionary":{"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":0,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":21,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":4,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":10,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":20,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":1,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":11,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":2,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":15,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":18,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":17,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":7,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":5,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":24,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":13,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":9,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":19,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":3,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":8,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":12,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":14,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":23,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":16,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":22},"transformations":[{"failures":[0,1,2,3,4,5,6],"tindex":"a88e3a95-17bd-11e6-9fdb-59e972c2b197","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(finalb[j])","position":"org.apache.commons.codec.digest.Md5Crypt:239","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb[j])"},"status":-1},{"failures":[],"tindex":"a88e61a6-17bd-11e6-9fdb-09dd62a48737","series":0,"name":"replace","transplant":{"toString":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} ","position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:470","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer)"},"status":-2},{"failures":[],"tindex":"a88e61a7-17bd-11e6-9fdb-63559cd6d0dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.Soundex:109","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[],"tindex":"a88e61a8-17bd-11e6-9fdb-a5afbfec4635","series":0,"name":"replace","transplant":{"toString":"this.decodeSize = (org.apache.commons.codec.binary.Base64.this.encodeSize) - 1","position":"org.apache.commons.codec.binary.Base64:295","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.this.int) - 1"},"variableMap":{"encodeSize":"index","decodeSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:430","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-3},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"a88e88b9-17bd-11e6-9fdb-59fa08a23faa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:514","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"a88e88ba-17bd-11e6-9fdb-23c6f9f54e43","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while ((tmpLen--) > 0) {\n    char c1 = cs.charAt((index1++));\n    char c2 = substring.charAt((index2++));\n    if (c1 == c2) {\n        continue;\n    } \n    if (!ignoreCase) {\n        return false;\n    } \n    if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.binary.CharSequenceUtils:58","type":"CtWhileImpl","sourcecode":"while ((tmpLen--) > 0) {\n    char char = cs.charAt((index1++));\n    char char = substring.charAt((index2++));\n    if (c1 == c2) {\n        continue;\n    } \n    if (!ignoreCase) {\n        return false;\n    } \n    if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        return false;\n    } \n}"},"status":0},{"failures":[19,20,21,22,23,24],"tindex":"a88e88bb-17bd-11e6-9fdb-cf828252d717","series":0,"name":"replace","transplant":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"switch (value.charAt(index)) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n    case 'Y' :\n        index = handleAEIOUY(result, index);\n        break;\n    case 'B' :\n        result.append('P');\n        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n        break;\n    case '\\u00c7' :\n        result.append('S');\n        index++;\n        break;\n    case 'C' :\n        index = handleC(value, result, index);\n        break;\n    case 'D' :\n        index = handleD(value, result, index);\n        break;\n    case 'F' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n        break;\n    case 'G' :\n        index = handleG(value, result, index, slavoGermanic);\n        break;\n    case 'H' :\n        index = handleH(value, result, index);\n        break;\n    case 'J' :\n        index = handleJ(value, result, index, slavoGermanic);\n        break;\n    case 'K' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n        break;\n    case 'L' :\n        index = handleL(value, result, index);\n        break;\n    case 'M' :\n        result.append('M');\n        index = conditionM0(value, index) ? index + 2 : index + 1;\n        break;\n    case 'N' :\n        result.append('N');\n        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n        break;\n    case '\\u00d1' :\n        result.append('N');\n        index++;\n        break;\n    case 'P' :\n        index = handleP(value, result, index);\n        break;\n    case 'Q' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n        break;\n    case 'R' :\n        index = handleR(value, result, index, slavoGermanic);\n        break;\n    case 'S' :\n        index = handleS(value, result, index, slavoGermanic);\n        break;\n    case 'T' :\n        index = handleT(value, result, index);\n        break;\n    case 'V' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n        break;\n    case 'W' :\n        index = handleW(value, result, index);\n        break;\n    case 'X' :\n        index = handleX(value, result, index);\n        break;\n    case 'Z' :\n        index = handleZ(value, result, index, slavoGermanic);\n        break;\n    default :\n        index++;\n        break;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:98","type":"CtSwitchImpl","sourcecode":"switch (value.charAt(index)) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n    case 'Y' :\n        index = handleAEIOUY(result, index);\n        break;\n    case 'B' :\n        result.append('P');\n        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n        break;\n    case '\\u00c7' :\n        result.append('S');\n        index++;\n        break;\n    case 'C' :\n        index = handleC(value, result, index);\n        break;\n    case 'D' :\n        index = handleD(value, result, index);\n        break;\n    case 'F' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n        break;\n    case 'G' :\n        index = handleG(value, result, index, slavoGermanic);\n        break;\n    case 'H' :\n        index = handleH(value, result, index);\n        break;\n    case 'J' :\n        index = handleJ(value, result, index, slavoGermanic);\n        break;\n    case 'K' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n        break;\n    case 'L' :\n        index = handleL(value, result, index);\n        break;\n    case 'M' :\n        result.append('M');\n        index = conditionM0(value, index) ? index + 2 : index + 1;\n        break;\n    case 'N' :\n        result.append('N');\n        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n        break;\n    case '\\u00d1' :\n        result.append('N');\n        index++;\n        break;\n    case 'P' :\n        index = handleP(value, result, index);\n        break;\n    case 'Q' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n        break;\n    case 'R' :\n        index = handleR(value, result, index, slavoGermanic);\n        break;\n    case 'S' :\n        index = handleS(value, result, index, slavoGermanic);\n        break;\n    case 'T' :\n        index = handleT(value, result, index);\n        break;\n    case 'V' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n        break;\n    case 'W' :\n        index = handleW(value, result, index);\n        break;\n    case 'X' :\n        index = handleX(value, result, index);\n        break;\n    case 'Z' :\n        index = handleZ(value, result, index, slavoGermanic);\n        break;\n    default :\n        index++;\n        break;\n}"},"status":-1},{"failures":[],"tindex":"a88ed6dc-17bd-11e6-9fdb-d19b02629b8d","series":0,"name":"add","transplant":{"toString":"for (int i = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.B64T.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.B64T.length())));\n}","position":"org.apache.commons.codec.digest.B64:74","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n}"},"variableMap":{"saltString":"input","num":"maxPhonemes","org.apache.commons.codec.digest.B64.B64T":"input"},"type":"adrStmt","transplantationPoint":{"toString":"if (rules != null) {\n    for (final org.apache.commons.codec.language.bm.Rule rule : rules) {\n        final java.lang.String pattern = rule.getPattern();\n        patternLength = pattern.length();\n        if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.input, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i)) {\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true;\n            break;\n        } \n    }\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:210","type":"CtIfImpl","sourcecode":"if (rules != null) {\n    for (final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule : rules) {\n        final java.lang.String java.lang.String = rule.getPattern();\n        patternLength = pattern.length();\n        if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n            org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n            break;\n        } \n    }\n} "},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":8,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
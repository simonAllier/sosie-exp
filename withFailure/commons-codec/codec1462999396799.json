{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":73,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":33,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":105,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":104,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":87,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":94,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":91,"org.apache.commons.codec.binary.Base64Test.testTriplets":42,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":22,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":111,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":5,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":37,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":121,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":67,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":88,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":59,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":78,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":83,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":9,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":8,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":52,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":46,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":116,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":57,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":7,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":54,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":55,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":11,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":35,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":110,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":95,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":92,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":70,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":20,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":102,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":14,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":77,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":109,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":45,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":16,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":106,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":68,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":103,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":4,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":84,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":44,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":122,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":23,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":41,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":85,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":113,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":24,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":1,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":80,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":74,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":34,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":6,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":15,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":62,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":86,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":97,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":79,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":124,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":56,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":12,"org.apache.commons.codec.binary.Base64Test.testBase64":76,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":120,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":21,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":19,"org.apache.commons.codec.binary.Base64Test.testUUID":48,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":60,"org.apache.commons.codec.binary.Base64Test.testSingletons":69,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":107,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":25,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":118,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":39,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":96,"org.apache.commons.codec.binary.Base64Test.testPairs":47,"org.apache.commons.codec.binary.Base64Test.testConstructors":50,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":123,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":38,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":81,"org.apache.commons.codec.binary.Base64Test.testCodec112":64,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":119,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":28,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":17,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":43,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":99,"org.apache.commons.codec.binary.Base64Test.testCodec68":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":115,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":100,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":31,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":89,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":65,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":82,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":26,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":29,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":66,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":101,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":32,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":40,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":3,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":58,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":90,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":125,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":51,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":72,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully":114,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":30,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":27,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":117,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully":112,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":93,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":108},"transformations":[{"failures":[],"tindex":"fd0c1edb-17b8-11e6-935d-fbd32f1bb21c","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[512]","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] sBytes = new byte[saltLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:337","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[saltLen]"},"status":-2},{"failures":[],"tindex":"fd0c45ec-17b8-11e6-935d-dbe98feef54f","series":0,"name":"replace","transplant":{"toString":"if (input == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:265","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"fd0c45ed-17b8-11e6-935d-b1ebf129c29c","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (useHex) {\n    this.encodeTable = org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE;\n    this.decodeTable = org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE;\n} else {\n    this.encodeTable = org.apache.commons.codec.binary.Base32.ENCODE_TABLE;\n    this.decodeTable = org.apache.commons.codec.binary.Base32.DECODE_TABLE;\n}","position":"org.apache.commons.codec.binary.Base32:283","type":"CtIfImpl","sourcecode":"if (useHex) {\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n} else {\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n}"},"status":-2},{"failures":[],"tindex":"fd0c45ee-17b8-11e6-935d-0567fbd3263b","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"c"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:348","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)"},"status":-2},{"failures":[],"tindex":"fd0c6cff-17b8-11e6-935d-a5fd1796ccdc","series":0,"name":"replace","transplant":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:226","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"fd0c6d00-17b8-11e6-935d-31854ee38606","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.ROUNDS) ; i++) {\n    ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n    if ((i & 1) != 0) {\n        ctx1.update(keyBytes);\n    } else {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE);\n    }\n    if ((i % 3) != 0) {\n        ctx1.update(saltBytes);\n    } \n    if ((i % 7) != 0) {\n        ctx1.update(keyBytes);\n    } \n    if ((i & 1) != 0) {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE);\n    } else {\n        ctx1.update(keyBytes);\n    }\n    finalb = ctx1.digest();\n}","position":"org.apache.commons.codec.digest.Md5Crypt:256","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n    ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n    if ((i & 1) != 0) {\n        ctx1.update(keyBytes);\n    } else {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n    }\n    if ((i % 3) != 0) {\n        ctx1.update(saltBytes);\n    } \n    if ((i % 7) != 0) {\n        ctx1.update(keyBytes);\n    } \n    if ((i & 1) != 0) {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n    } else {\n        ctx1.update(keyBytes);\n    }\n    finalb = ctx1.digest();\n}"},"status":-2},{"failures":[],"tindex":"fd0c6d01-17b8-11e6-935d-9758b6335afb","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder code = new java.lang.StringBuilder(10)","position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder result = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:458","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[0,1,2,3,4],"tindex":"fd0c9412-17b8-11e6-935d-839aa4342896","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:461","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)"},"status":-1},{"failures":[],"tindex":"fd0c9413-17b8-11e6-935d-992d2f283dad","series":0,"name":"replace","transplant":{"toString":"len--","position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"len--"},"variableMap":{"len":"t"},"type":"adrStmt","transplantationPoint":{"toString":"s = (s >>> 16) | (t & -65536)","position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"s = (s >>> 16) | (t & -65536)"},"status":-2},{"failures":[],"tindex":"fd0c9414-17b8-11e6-935d-2f5ee0648b3e","series":0,"name":"replace","transplant":{"toString":"return ((octet >= 0) && (octet < (decodeTable.length))) && ((decodeTable[octet]) != (-1))","position":"org.apache.commons.codec.binary.Base32:537","type":"CtReturnImpl","sourcecode":"return ((octet >= 0) && (octet < (byte[].int))) && ((byte[][octet]) != (-1))"},"variableMap":{"octet":"octet","length":"length","decodeTable":"org.apache.commons.codec.binary.Base64.DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"toString":"return (octet == (org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) && ((org.apache.commons.codec.binary.Base64.DECODE_TABLE[octet]) != (-1)))","position":"org.apache.commons.codec.binary.Base64:510","type":"CtReturnImpl","sourcecode":"return (octet == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.byte)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][octet]) != (-1)))"},"status":-2},{"failures":[5],"tindex":"fd0cbb25-17b8-11e6-935d-11f87f80d521","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (incl.contains(\" \")) {\n    throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n} else {\n    lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n}","position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtIfImpl","sourcecode":"if (incl.contains(\" \")) {\n    throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n} else {\n    lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n}"},"status":-1},{"failures":[],"tindex":"fd0cbb26-17b8-11e6-935d-f3bd8175ed4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (readLen == 0) {\n    if (!(baseNCodec.hasData(context))) {\n        final byte[] buf = new byte[doEncode ? 4096 : 8192];\n        final int c = in.read(buf);\n        if (doEncode) {\n            baseNCodec.encode(buf, 0, c, context);\n        } else {\n            baseNCodec.decode(buf, 0, c, context);\n        }\n    } \n    readLen = baseNCodec.readResults(b, offset, len, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:155","type":"CtWhileImpl","sourcecode":"while (readLen == 0) {\n    if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n        final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n        final int int = java.io.InputStream.read(buf);\n        if (boolean) {\n            org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n        } else {\n            org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n        }\n    } \n    readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[],"tindex":"fd0cbb27-17b8-11e6-935d-796d4d20472b","series":0,"name":"replace","transplant":{"toString":"code = chr","position":"org.apache.commons.codec.language.ColognePhonetic:391","type":"CtAssignmentImpl","sourcecode":"code = chr"},"variableMap":{"code":"code","chr":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '1'","position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"code = '1'"},"status":-2},{"failures":[],"tindex":"fd0ce238-17b8-11e6-935d-917aeaf949c5","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true","position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true"},"variableMap":{"found":"eof"},"type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base32:441","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"fd0ce239-17b8-11e6-935d-45efbb2f4d33","series":0,"name":"replace","transplant":{"toString":"final java.lang.String resName = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)","position":"org.apache.commons.codec.language.bm.Rule:265","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)"},"variableMap":{"lang":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name1LtRStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:301","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[6],"tindex":"fd0ce23a-17b8-11e6-935d-c54d48a3ca3d","series":0,"name":"replace","transplant":{"toString":"code.append('S')","position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('F')","position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"status":-1},{"failures":[],"tindex":"fd0d094b-17b8-11e6-935d-1ba4e2050a14","series":0,"name":"replace","transplant":{"toString":"return doubleMetaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.DoubleMetaphone:206","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return soundex(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Soundex:153","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"fd0d094c-17b8-11e6-935d-fb7957cb3be2","series":0,"name":"add","transplant":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> lines = new java.util.HashMap<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>()","position":"org.apache.commons.codec.language.bm.Rule:403","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = new java.util.HashMap<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules1 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType, \"common\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:401","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, \"common\")"},"status":-2},{"failures":[7,8,9,10,11,12,13,14],"tindex":"fd0d094d-17b8-11e6-935d-bdb52360b419","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(chrs)","position":"org.apache.commons.codec.language.ColognePhonetic:443","type":"CtReturnImpl","sourcecode":"return new java.lang.String(chrs)"},"status":-1},{"failures":[15,16,17],"tindex":"fd0d305e-17b8-11e6-935d-af8796a0c071","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '1'","position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"status":-1},{"failures":[],"tindex":"fd0d305f-17b8-11e6-935d-55cb5326d91a","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"finalRules can not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"status":0},{"failures":[18,19,20],"tindex":"fd0d3060-17b8-11e6-935d-51d12c2c99b9","series":0,"name":"replace","transplant":{"toString":"result.append('T')","position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n    result.append('S', 'X');\n} else {\n    result.append('S');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:306","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n    result.append('S', 'X');\n} else {\n    result.append('S');\n}"},"status":-1},{"failures":[21,22,23,24,25],"tindex":"fd0d3061-17b8-11e6-935d-d3c36e4ab4b5","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(keyBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"status":-1},{"failures":[],"tindex":"fd0d3062-17b8-11e6-935d-b1c50de73094","series":0,"name":"replace","transplant":{"toString":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)","position":"org.apache.commons.codec.digest.UnixCrypt:347","type":"CtAssignmentImpl","sourcecode":"d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888)"},"variableMap":{"d":"u"},"type":"adrStmt","transplantationPoint":{"toString":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.SPTRANS[1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.SPTRANS[6][((u >>> 24) & 63)])","position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-2},{"failures":[26,27,28,29,30,31,21,22,23,32,33,24,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,25,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"fd0d5773-17b8-11e6-935d-193b00d721b0","series":0,"name":"replace","transplant":{"toString":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}","position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"variableMap":{"byteToCheck":"element"},"type":"adrStmt","transplantationPoint":{"toString":"if (((pad) == element) || (isInAlphabet(element))) {\n    return true;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:500","type":"CtIfImpl","sourcecode":"if (((byte) == element) || (isInAlphabet(element))) {\n    return true;\n} "},"status":-1},{"failures":[108,109,110,111],"tindex":"fd0d5774-17b8-11e6-935d-6bb58f9f686e","series":0,"name":"replace","transplant":{"toString":"ii = keyLen","position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"offset","keyLen":"value"},"type":"adrStmt","transplantationPoint":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8","position":"org.apache.commons.codec.digest.UnixCrypt:386","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8"},"status":-1},{"failures":[],"tindex":"fd0d7e85-17b8-11e6-935d-01c90b639ea9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"3gh3\", \"3kh3\")","position":"org.apache.commons.codec.language.Caverphone2:96","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3gh3\", \"3kh3\")"},"status":0},{"failures":[],"tindex":"fd0d7e86-17b8-11e6-935d-1798af6a09c0","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")","position":"org.apache.commons.codec.binary.Base32:309","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")"},"status":0},{"failures":[],"tindex":"fd0d7e87-17b8-11e6-935d-f75850aa6bc1","series":0,"name":"add","transplant":{"toString":"try {\n    final byte[] byteArray = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n    return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n    return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"variableMap":{"e":"raw","object":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))","position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"status":-2},{"failures":[],"tindex":"fd0d7e88-17b8-11e6-935d-89c4e53a6dba","series":0,"name":"replace","transplant":{"toString":"final java.lang.String replacement3 = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0])","position":"org.apache.commons.codec.language.bm.Rule:450","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0])"},"status":-2},{"failures":[],"tindex":"fd0d7e89-17b8-11e6-935d-afbd901fe8da","series":0,"name":"replace","transplant":{"toString":"return soundex(str)","position":"org.apache.commons.codec.language.RefinedSoundex:149","type":"CtReturnImpl","sourcecode":"return soundex(str)"},"variableMap":{"str":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(key, null)","position":"org.apache.commons.codec.digest.Crypt:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key, null)"},"status":-2},{"failures":[],"tindex":"fd0d7e8a-17b8-11e6-935d-79126489248d","series":0,"name":"replace","transplant":{"toString":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"variableMap":{"b":"key","offset":"i","iValue":"i"},"type":"adrStmt","transplantationPoint":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"status":0},{"failures":[],"tindex":"fd0da59b-17b8-11e6-935d-2903c2b447b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.lineSeparator = new byte[lineSeparator.length]","position":"org.apache.commons.codec.binary.Base32:300","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[lineSeparator.int]"},"status":-2},{"failures":[],"tindex":"fd0da59c-17b8-11e6-935d-b5296f9b1c5c","series":0,"name":"replace","transplant":{"toString":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"status":-3},{"failures":[],"tindex":"fd0da59d-17b8-11e6-935d-295f5b007894","series":0,"name":"add","transplant":{"toString":"return input.equals(content)","position":"org.apache.commons.codec.language.bm.Rule:520","type":"CtReturnImpl","sourcecode":"return input.equals(content)"},"variableMap":{"input":"input","content":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch)","position":"org.apache.commons.codec.language.bm.Rule:572","type":"CtReturnImpl","sourcecode":"return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch)"},"status":-2},{"failures":[],"tindex":"fd0da59e-17b8-11e6-935d-9d1598e01959","series":0,"name":"replace","transplant":{"toString":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"resName","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"resName"},"type":"adrStmt","transplantationPoint":{"toString":"if (rulesIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n} ","position":"org.apache.commons.codec.language.bm.Rule:257","type":"CtIfImpl","sourcecode":"if (rulesIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + resName));\n} "},"status":-3},{"failures":[112,113,114,115,116,117],"tindex":"fd0da59f-17b8-11e6-935d-93a5971ac8fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:190","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-1},{"failures":[26,27,29,118,119,120,121,122],"tindex":"fd0da5a0-17b8-11e6-935d-95e8e31f7a05","series":0,"name":"replace","transplant":{"toString":"return result.substring(1)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:463","type":"CtReturnImpl","sourcecode":"return result.substring(1)"},"variableMap":{"result":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"return buffer.toString()","position":"org.apache.commons.codec.net.RFC1522Codec:81","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[123],"tindex":"fd0dccb1-17b8-11e6-935d-436da1b3632c","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)","position":"org.apache.commons.codec.digest.DigestUtils:363","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:579","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-1},{"failures":[124,125],"tindex":"fd0dccb2-17b8-11e6-935d-dfb1ea85ac0a","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)","position":"org.apache.commons.codec.binary.Base64:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)"},"variableMap":{"binaryData":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":40,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
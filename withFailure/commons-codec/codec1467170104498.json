{"failureDictionary":{"org.apache.commons.codec.binary.HexTest.testCustomCharset":48,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":74,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":160,"org.apache.commons.codec.language.NysiisTest.testSnat":103,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":136,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":140,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":152,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":151,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":117,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":115,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":116,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":64,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":63,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":43,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":91,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":118,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":60,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":8,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":70,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":145,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":68,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":71,"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull":84,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":47,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":146,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":32,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":128,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":130,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":133,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":129,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":65,"org.apache.commons.codec.language.NysiisTest.testCap":92,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":56,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":41,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":127,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":125,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":77,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":39,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":54,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":126,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":23,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":31,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":50,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":27,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":88,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":89,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":69,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":119,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":150,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing":81,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":10,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":154,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":20,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":78,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":7,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":109,"org.apache.commons.codec.language.SoundexTest.testB650":114,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":72,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":16,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":19,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":85,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":149,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":34,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":141,"org.apache.commons.codec.language.SoundexTest.testNewInstance":122,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":25,"org.apache.commons.codec.language.NysiisTest.testTranan":107,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":29,"org.apache.commons.codec.language.NysiisTest.testFal":95,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":38,"org.apache.commons.codec.language.NysiisTest.testSnad":102,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":14,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":76,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":134,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":40,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":4,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":131,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":135,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing":82,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":111,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":112,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":113,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":73,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing":80,"org.apache.commons.codec.language.NysiisTest.testDropBy":105,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":156,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":153,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":62,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":13,"org.apache.commons.codec.binary.Base64Test.testUUID":52,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":21,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":138,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":83,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":33,"org.apache.commons.codec.language.NysiisTest.testRule2":97,"org.apache.commons.codec.language.NysiisTest.testRule1":96,"org.apache.commons.codec.language.NysiisTest.testRule7":100,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":142,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":26,"org.apache.commons.codec.language.NysiisTest.testRule6":99,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":132,"org.apache.commons.codec.language.NysiisTest.testRule5":98,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":57,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":157,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":147,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":55,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":123,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":51,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":104,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":159,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":24,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":49,"org.apache.commons.codec.language.NysiisTest.testBran":101,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":108,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":87,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":15,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":37,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":120,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":67,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":44,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":86,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":79,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":148,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":124,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":110,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":66,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":144,"org.apache.commons.codec.digest.B64Test.testB64from24bit":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":11,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":6,"org.apache.commons.codec.language.NysiisTest.testDad":93,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":143,"org.apache.commons.codec.language.NysiisTest.testOthers":106,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":5,"org.apache.commons.codec.language.SoundexTest.testDifference":121,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":155,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":90,"org.apache.commons.codec.language.NysiisTest.testDan":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":137,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":58,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":158,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":75},"transformations":[{"failures":[],"tindex":"ac8d903b-3da7-11e6-8f3c-efec33ceefd3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"startSrc = 1"},"variableMap":{"startSrc":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:520","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-2},{"failures":[],"tindex":"ac8db74c-3da7-11e6-8f3c-33d47ccbd67c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:153","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:201","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(value)))"},"status":-2},{"failures":[],"tindex":"ac8db74d-3da7-11e6-8f3c-f7eda0a9ebff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"variableMap":{"rightLength":"maxLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"status":-2},{"failures":[],"tindex":"ac8db74e-3da7-11e6-8f3c-39fc4a7ae1e0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"charset","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"status":-2},{"failures":[],"tindex":"ac8db74f-3da7-11e6-8f3c-ad57bb997832","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:361","type":"CtAssignmentImpl","sourcecode":"ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"variableMap":{"ctx":"altCtx","algorithm":"algorithm"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:266","type":"CtAssignmentImpl","sourcecode":"altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-2},{"failures":[],"tindex":"ac8db750-3da7-11e6-8f3c-2fdf7770f1fc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"len","to":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"status":-2},{"failures":[],"tindex":"ac8db751-3da7-11e6-8f3c-c3a749ce9e7c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:362","type":"CtIfImpl","sourcecode":"if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    continue;\n} "},"variableMap":{"bytes":"data","i":"length","org.apache.commons.codec.net.QuotedPrintableCodec.CR":"org.apache.commons.codec.net.QCodec.BLANK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"status":-2},{"failures":[],"tindex":"ac8dde62-3da7-11e6-8f3c-f9e5c51c62d6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"b","y":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"status":-2},{"failures":[],"tindex":"ac8dde63-3da7-11e6-8f3c-2dfe5ad9505d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"variableMap":{"t":"index","left":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:601","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"ac8dde64-3da7-11e6-8f3c-e3e9b75e2699","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((binaryData == null) || ((binaryData.int) == 0)) {\n    return binaryData;\n} "},"variableMap":{"binaryData":"pArray","length":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:406","type":"CtIfImpl","sourcecode":"if ((pArray == null) || ((pArray.int) == 0)) {\n    return pArray;\n} "},"status":-2},{"failures":[0,1],"tindex":"ac8dde65-3da7-11e6-8f3c-7b2cab602683","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:605","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[2,0,1],"tindex":"ac8dde66-3da7-11e6-8f3c-cdb7f0f81b2f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:311","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"ac8dde67-3da7-11e6-8f3c-c1de6c69149b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:61","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)))"},"status":-1},{"failures":[20,21,22,23,24,25],"tindex":"ac8dde68-3da7-11e6-8f3c-35387eb1a537","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:337","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n    if ((0 == (context.int)) && ((int) == 0)) {\n        return ;\n    } \n    final byte[] byte[] = ensureBufferSize(int, context);\n    final int int = context.int;\n    switch (context.int) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                buffer[((context.int)++)] = byte;\n                buffer[((context.int)++)] = byte;\n            } \n            break;\n        case 2 :\n            buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                buffer[((context.int)++)] = byte;\n            } \n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n    context.int += (context.int) - savedPos;\n    if (((int) > 0) && ((context.int) > 0)) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n    } \n} else {\n    for (int int = 0 ; i < inAvail ; i++) {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n        int int = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.int = ((context.int) << 8) + b;\n        if (0 == (context.int)) {\n            buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n            context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n            if (((int) > 0) && ((int) <= (context.int))) {\n                java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                context.int += byte[].int;\n                context.int = 0;\n            } \n        } \n    }\n}"},"status":-2},{"failures":[2,0,1],"tindex":"ac8e0579-3da7-11e6-8f3c-fba238754699","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:400","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[26,27],"tindex":"ac8e057a-3da7-11e6-8f3c-376ac2dc8696","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"status":-1},{"failures":[],"tindex":"ac8e057b-3da7-11e6-8f3c-afc15d8d6701","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(i))"},"variableMap":{"i":"pos","singleByte":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:365","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[],"tindex":"ac8e057c-3da7-11e6-8f3c-abb011d49671","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"status":-2},{"failures":[28],"tindex":"ac8e057d-3da7-11e6-8f3c-e381dbaec250","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"ac8e057e-3da7-11e6-8f3c-79cf0e6b327c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"variableMap":{"soundexMapping":"data","org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"status":-2},{"failures":[],"tindex":"ac8e057f-3da7-11e6-8f3c-7308775cbe7c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"variableMap":{"txt":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt"},"status":-2},{"failures":[],"tindex":"ac8e2b90-3da7-11e6-8f3c-e93195965fcf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:311","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results)"},"status":-2},{"failures":[],"tindex":"ac8e2b91-3da7-11e6-8f3c-1dc818d67790","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:220","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = ctx1.digest()"},"variableMap":{"ctx1":"altCtx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:212","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = altCtx.digest()"},"status":-2},{"failures":[],"tindex":"ac8e2b92-3da7-11e6-8f3c-c34cd3c25c47","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:275","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"variableMap":{"length":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:187","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int = i"},"status":-2},{"failures":[9,10,11],"tindex":"ac8e2b93-3da7-11e6-8f3c-572b833ff6a5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:479","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer)"},"status":-1},{"failures":[],"tindex":"ac8e2b94-3da7-11e6-8f3c-adb60f253a44","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:121","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3$\", \"A\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:85","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[29,30,31,32,33,26,34,27,35,36,37],"tindex":"ac8e2b95-3da7-11e6-8f3c-77559f788859","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:554","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)"},"variableMap":{"binaryData":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:392","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet, bytes, boolean)"},"status":-1},{"failures":[],"tindex":"ac8e2b96-3da7-11e6-8f3c-29299b120434","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"variableMap":{"current":"code","last":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:363","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-2},{"failures":[38,39,40,41,42,43,44,45],"tindex":"ac8e2b97-3da7-11e6-8f3c-83b979484e1f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:109","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.this.java.lang.String = charset"},"status":-1},{"failures":[],"tindex":"ac8e52a8-3da7-11e6-8f3c-9990620ebeb7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:248","type":"CtReturnImpl","sourcecode":"return encode(str, getDefaultCharset())"},"status":-2},{"failures":[35],"tindex":"ac8e52a9-3da7-11e6-8f3c-43579e95a1d2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:297","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"))"},"variableMap":{"sep":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:509","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"))"},"status":-1},{"failures":[46,47],"tindex":"ac8e52aa-3da7-11e6-8f3c-492a10f2cfc3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:249","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n        l_ascii[(jj - bits)] = '0';\n    } else {\n        l_ascii[(jj - bits)] = '1';\n    }\n}"},"status":-1},{"failures":[48,49,50,51,52,53],"tindex":"ac8e52ab-3da7-11e6-8f3c-b1eb5480f49f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"status":-1},{"failures":[],"tindex":"ac8e52ac-3da7-11e6-8f3c-0940b3006129","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:322","type":"CtReturnImpl","sourcecode":"return value < 0 ? value + 256 : value"},"variableMap":{"value":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:402","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[],"tindex":"ac8e52ad-3da7-11e6-8f3c-6b939444e67b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:150","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"status":-2},{"failures":[],"tindex":"ac8e52ae-3da7-11e6-8f3c-6d968012c140","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y3\", \"Y3\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"status":-2},{"failures":[1],"tindex":"ac8e52af-3da7-11e6-8f3c-4dcb662511dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"status":-1},{"failures":[],"tindex":"ac8e79c0-3da7-11e6-8f3c-b7720a8d492d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = replacement"},"variableMap":{"lastReplacement":"name","replacement":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"status":0},{"failures":[],"tindex":"ac8e79c1-3da7-11e6-8f3c-d300810514fd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"status":-2},{"failures":[],"tindex":"ac8e79c2-3da7-11e6-8f3c-5d93c22161fc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"status":0},{"failures":[51],"tindex":"ac8e79c3-3da7-11e6-8f3c-bd848155bb07","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtIfImpl","sourcecode":"if (string == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"ac8e79c4-3da7-11e6-8f3c-a10dcaac526a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:103","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('~')"},"status":0},{"failures":[],"tindex":"ac8e79c5-3da7-11e6-8f3c-814ad8e4a6a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"accentedWord"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"status":-2},{"failures":[54,55],"tindex":"ac8e79c6-3da7-11e6-8f3c-c5eda323ebc7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:113","type":"CtInvocationImpl","sourcecode":"local.append(inwd, 1, ((inwd.int) - 1))"},"status":-1},{"failures":[],"tindex":"ac8e79c7-3da7-11e6-8f3c-afb131f6d30a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:314","type":"CtLocalVariableImpl","sourcecode":"final char char = r.java.lang.String.charAt(0)"},"status":-2},{"failures":[4,5,6,7,8],"tindex":"ac8e79c8-3da7-11e6-8f3c-3fb429fd0da7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:467","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)"},"status":-1},{"failures":[],"tindex":"ac8e79c9-3da7-11e6-8f3c-213b6b5657e2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"variableMap":{"unencodedBlockSize":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:413","type":"CtInvocationImpl","sourcecode":"readResults(result, 0, result.int, context)"},"status":-2},{"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"tindex":"ac8e79ca-3da7-11e6-8f3c-4bb61d0fc3a6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = false;\n} "},"variableMap":{"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","line":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","inMultilineComment":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:181","type":"CtWhileImpl","sourcecode":"while (lsScanner.hasNextLine()) {\n    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = true;\n        } else if ((line.length()) > 0) {\n            ls.add(line);\n        } \n    }\n}"},"status":-1},{"failures":[2,0,1],"tindex":"ac8ea0db-3da7-11e6-8f3c-49cf5c8ce7af","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"status":-1},{"failures":[72,73,2,74,75,0],"tindex":"ac8ea0dc-3da7-11e6-8f3c-89bc1bf20182","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"variableMap":{"code":"primary"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:958","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[],"tindex":"ac8ea0dd-3da7-11e6-8f3c-f783b872ef64","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:305","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[76,77,78],"tindex":"ac8ea0de-3da7-11e6-8f3c-91021f7b766e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"status":-1},{"failures":[2,0,1],"tindex":"ac8ea0df-3da7-11e6-8f3c-a3ebcddea9ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:455","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"ac8ea0e0-3da7-11e6-8f3c-f3a49bd99b3b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"status":-2},{"failures":[79,80,81,82,83],"tindex":"ac8ea0e1-3da7-11e6-8f3c-c3be942e5a7f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"variableMap":{"value":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"status":-1},{"failures":[],"tindex":"ac8ea0e2-3da7-11e6-8f3c-19af88dfacdf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:413","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"I\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"status":-2},{"failures":[84],"tindex":"ac8ea0e3-3da7-11e6-8f3c-6d4473726503","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:271","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],"tindex":"ac8ea0e4-3da7-11e6-8f3c-e381577a7d6a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:269","type":"CtAssignmentImpl","sourcecode":"out[0] = str.charAt(0)"},"variableMap":{"str":"str","out":"chars"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[],"tindex":"ac8ea0e5-3da7-11e6-8f3c-9d3d859698bb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"status":0},{"failures":[131],"tindex":"ac8ea0e6-3da7-11e6-8f3c-39aacf1a377f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:350","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:658","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data)"},"status":-1},{"failures":[],"tindex":"ac8ec7f7-3da7-11e6-8f3c-25409f797a13","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:663","type":"CtReturnImpl","sourcecode":"return binaryData"},"variableMap":{"binaryData":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:231","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key), valueToDigest).doFinal()"},"status":-2},{"failures":[],"tindex":"ac8ec7f8-3da7-11e6-8f3c-bdc9c7d00143","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:504","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"status":-2},{"failures":[],"tindex":"ac8ec7f9-3da7-11e6-8f3c-3f7bb9baf6ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[2,0,1],"tindex":"ac8ec7fa-3da7-11e6-8f3c-c1c68c81fd04","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:727","type":"CtInvocationImpl","sourcecode":"result.append(\"TS\", \"FX\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"status":-1},{"failures":[],"tindex":"ac8ec7fb-3da7-11e6-8f3c-fd87d438bce5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:293","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.this.java.util.Set<java.lang.String>"},"status":0},{"failures":[9,10,11],"tindex":"ac8ec7fc-3da7-11e6-8f3c-f730c056279c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:469","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer)"},"status":-1},{"failures":[57,58,59,60,61,62,63,64,69,70],"tindex":"ac8ec7fd-3da7-11e6-8f3c-6b5b8c648289","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:601","type":"CtIfImpl","sourcecode":"if ((prefix.length()) > (input.length())) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"ac8ec7fe-3da7-11e6-8f3c-0d9abd741977","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"e1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"status":-2},{"failures":[],"tindex":"ac8ec7ff-3da7-11e6-8f3c-91b2bb5ee7b1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:339","type":"CtIfImpl","sourcecode":"if (context.boolean) {\n    return ;\n} "},"variableMap":{"context":"context","eof":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:440","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n    if ((0 == (context.int)) && ((int) == 0)) {\n        return ;\n    } \n    final byte[] byte[] = ensureBufferSize(int, context);\n    final int int = context.int;\n    switch (context.int) {\n        case 0 :\n            break;\n        case 1 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 2 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 3 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n            break;\n        case 4 :\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte;\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n    context.int += (context.int) - savedPos;\n    if (((int) > 0) && ((context.int) > 0)) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n    } \n} else {\n    for (int int = 0 ; i < inAvail ; i++) {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n        int int = in[(inPos++)];\n        if (b < 0) {\n            b += 256;\n        } \n        context.long = ((context.long) << 8) + b;\n        if (0 == (context.int)) {\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n            context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n            if (((int) > 0) && ((int) <= (context.int))) {\n                java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                context.int += byte[].int;\n                context.int = 0;\n            } \n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"ac8ec800-3da7-11e6-8f3c-2dab36900bdd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"variableMap":{"buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.LF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:315","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[132,133,134,135],"tindex":"ac8eef11-3da7-11e6-8f3c-4724afa400ba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"status":-1},{"failures":[],"tindex":"ac8eef12-3da7-11e6-8f3c-ebf6571b4451","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"status":0},{"failures":[57,59,60,61,68,69,70,71],"tindex":"ac8eef13-3da7-11e6-8f3c-97ad5240d1a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = dc.substring(0, 1)"},"variableMap":{"dc":"regex"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:502","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = regex.substring((startsWith ? 1 : 0), (endsWith ? (regex.length()) - 1 : regex.length()))"},"status":-1},{"failures":[],"tindex":"ac8eef14-3da7-11e6-8f3c-a5409b622a4b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:157","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes)"},"status":-2},{"failures":[],"tindex":"ac8eef15-3da7-11e6-8f3c-114cc9d822e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"variableMap":{"unencodedBlockSize":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:151","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"status":-2},{"failures":[],"tindex":"ac8eef16-3da7-11e6-8f3c-bd39ec5098ae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"variableMap":{"s":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:288","type":"CtAssignmentImpl","sourcecode":"right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule)"},"status":-2},{"failures":[],"tindex":"ac8eef17-3da7-11e6-8f3c-f15de313a83f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:298","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:225","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key)"},"status":-2},{"failures":[],"tindex":"ac8eef18-3da7-11e6-8f3c-abe1dcce1800","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:227","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"ac8eef19-3da7-11e6-8f3c-dd7c0a8a095f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"t = right"},"variableMap":{"t":"index","right":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:393","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[],"tindex":"ac8eef1a-3da7-11e6-8f3c-7b61ca9cc339","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"charset","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"status":-2},{"failures":[],"tindex":"ac8eef1b-3da7-11e6-8f3c-a313efdecad8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"variableMap":{"compareCode":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return b"},"status":-2},{"failures":[29,136,30,32,33,26,137,36,138,139,140,141],"tindex":"ac8eef1c-3da7-11e6-8f3c-9753dc1210f8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"u","to":"l"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:367","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"status":-1},{"failures":[],"tindex":"ac8eef1d-3da7-11e6-8f3c-65c389d5c246","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"c","preHWChar":"c","firstCode":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtIfImpl","sourcecode":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} "},"status":-2},{"failures":[],"tindex":"ac8f162e-3da7-11e6-8f3c-5fda126bb396","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.RuleType:38","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"status":-2},{"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"tindex":"ac8f162f-3da7-11e6-8f3c-117c4600ca26","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-1},{"failures":[15,142,16,18],"tindex":"ac8f1630-3da7-11e6-8f3c-13d695daaa20","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:72","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"status":-1},{"failures":[],"tindex":"ac8f1631-3da7-11e6-8f3c-63b807b50c96","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\"')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:92","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('[')"},"status":0},{"failures":[143],"tindex":"ac8f1632-3da7-11e6-8f3c-c9003e2c7087","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:709","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"status":-1},{"failures":[4,5,6,7,8],"tindex":"ac8f1633-3da7-11e6-8f3c-8ba1cd4126c1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:464","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer)"},"status":-1},{"failures":[144,145],"tindex":"ac8f1634-3da7-11e6-8f3c-67daf4fdf937","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:389","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data)"},"status":-1},{"failures":[],"tindex":"ac8f1635-3da7-11e6-8f3c-65fad7746958","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:56","type":"CtLocalVariableImpl","sourcecode":"int int = length"},"variableMap":{"length":"bAvail"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:293","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(available(context), bAvail)"},"status":-2},{"failures":[],"tindex":"ac8f1636-3da7-11e6-8f3c-6f180f1b76af","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:159","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"variableMap":{"line":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"status":-2},{"failures":[4,146,5,6,147,7,8],"tindex":"ac8f1637-3da7-11e6-8f3c-e7a55baf7545","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:688","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[],"tindex":"ac8f3d48-3da7-11e6-8f3c-0da6569f9a10","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:281","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"ac8f3d49-3da7-11e6-8f3c-ab2b903d0f65","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_FF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:154","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[134],"tindex":"ac8f3d4a-3da7-11e6-8f3c-77c535e2d69c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"v\", \"f\")"},"status":-1},{"failures":[],"tindex":"ac8f3d4b-3da7-11e6-8f3c-f14de8762553","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"variableMap":{"length":"length","i":"length","transcoded":"chars","chars":"chars"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:280","type":"CtForImpl","sourcecode":"for (int int = 1 ; i < len ; i++) {\n    final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n    final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n    final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n    java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n    if ((chars[i]) != (chars[(i - 1)])) {\n        key.append(chars[i]);\n    } \n}"},"status":-2},{"failures":[],"tindex":"ac8f3d4c-3da7-11e6-8f3c-47745a7f2f6c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:193","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n))"},"status":-2},{"failures":[148,149,150,151,152,153,154,155,156,157,158,159,160],"tindex":"ac8f3d4d-3da7-11e6-8f3c-a182363631d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"line","leftCharacter":"line","rightCharacter":"line","location":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:260","type":"CtIfImpl","sourcecode":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        inMultilineComment = false;\n    } \n    continue;\n} "},"status":-1},{"failures":[0,1],"tindex":"ac8f3d4e-3da7-11e6-8f3c-d5e3135e079f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:809","type":"CtReturnImpl","sourcecode":"return true"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
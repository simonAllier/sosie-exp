{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":57,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":66,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":70,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":77,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":65,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":89,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":81,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":67,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":76,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":87,"org.apache.commons.codec.binary.Base64Test.testBase64":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":26,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":8,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":85,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":18,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":88,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":5,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":16,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":19,"org.apache.commons.codec.binary.Base64Test.testUUID":41,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":22,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":50,"org.apache.commons.codec.binary.Base64Test.testSingletons":54,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":34,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":36,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":79,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":23,"org.apache.commons.codec.binary.Base64Test.testPairs":40,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":49,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":35,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":80,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":82,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":58,"org.apache.commons.codec.binary.Base64Test.testCodec112":78,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":9,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":10,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":44,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":39,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":45,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":48,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":64,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":38,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":32,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":46,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":47,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":69,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":71,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":0,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":4,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":7,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":30,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":33,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":68,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":24,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":13,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":1,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":52,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":59,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":62,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":17,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":53,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":83,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":75,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":2,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":20,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":90,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":21,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":95,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":91,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":37,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":60,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":94,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":12,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":3,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":74,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":25,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":43,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":55,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":93,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":73,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":61,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":31,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":63,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":14,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":86,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":28,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":42,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":92,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":84},"transformations":[{"failures":[],"tindex":"11139dad-17bb-11e6-85cc-4b1b39619f78","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH)","position":"org.apache.commons.codec.digest.DigestUtils:798","type":"CtAssignmentImpl","sourcecode":"read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int)"},"status":-2},{"failures":[],"tindex":"1113c4be-17bb-11e6-85cc-f1664c39e885","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int avail = baseNCodec.available(context)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:111","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[0,1,2,3,4,5,6],"tindex":"1113c4bf-17bb-11e6-85cc-6546465bb014","series":0,"name":"replace","transplant":{"toString":"altCtx.update(keyBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:194","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"variableMap":{"altCtx":"ctx1","keyBytes":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"if ((i & 1) != 0) {\n    ctx1.update(keyBytes);\n} else {\n    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:258","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx1.update(keyBytes);\n} else {\n    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n}"},"status":-1},{"failures":[7,8,9,10,11,12],"tindex":"1113ebd0-17bb-11e6-85cc-d7e9c14e883c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"t+\", \"T\")","position":"org.apache.commons.codec.language.Caverphone2:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"t+\", \"T\")"},"status":-1},{"failures":[],"tindex":"1113ebd1-17bb-11e6-85cc-411febc6e8fd","series":0,"name":"replace","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:554","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}"},"status":-2},{"failures":[],"tindex":"1113ebd2-17bb-11e6-85cc-ff71545c9f96","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.encodeSize = (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length)","position":"org.apache.commons.codec.binary.Base32:299","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int) + (lineSeparator.int)"},"status":-2},{"failures":[],"tindex":"111412e3-17bb-11e6-85cc-a5b26557c421","series":0,"name":"replace","transplant":{"toString":"j++","position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"variableMap":{"j":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:469","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[13,14,15],"tindex":"111412e4-17bb-11e6-85cc-99b0d169604e","series":0,"name":"replace","transplant":{"toString":"result.append('H')","position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"status":-1},{"failures":[16,17,18,19],"tindex":"111412e5-17bb-11e6-85cc-5d70f06c9005","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(\"|\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"status":-1},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"tindex":"111412e6-17bb-11e6-85cc-d165e43a46e2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (b == (pad)) {\n    context.eof = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n        final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n        if (result >= 0) {\n            context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n            context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n            if ((context.modulus) == 0) {\n                buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            } \n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base64:438","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[65,13,66,14,15],"tindex":"111439f7-17bb-11e6-85cc-7950b4238b0e","series":0,"name":"replace","transplant":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}"},"status":-1},{"failures":[67,68,69],"tindex":"11146108-17bb-11e6-85cc-abc4bcf09af3","series":0,"name":"replace","transplant":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"variableMap":{"l_ascii":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)"},"status":-1},{"failures":[],"tindex":"11146109-17bb-11e6-85cc-cfb710cac11a","series":0,"name":"replace","transplant":{"toString":"int patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int minRating = 0","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:251","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[14,15],"tindex":"1114610a-17bb-11e6-85cc-392bf5d4bc7c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:424","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[21,22,26,29,33,70,71,72,73,74,75,40,41,42,44,45,46,47,76,48,49,77,78,54,55,79,56,80,81,82,60,62,63,83],"tindex":"1114610b-17bb-11e6-85cc-871f6f0364e3","series":0,"name":"replace","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"switch (context.modulus) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 2) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) << 4) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        if ((encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)) {\n            buffer[((context.pos)++)] = pad;\n            buffer[((context.pos)++)] = pad;\n        } \n        break;\n    case 2 :\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 10) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) >> 4) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((context.ibitWorkArea) << 2) & (org.apache.commons.codec.binary.Base64.MASK_6BITS))];\n        if ((encodeTable) == (org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE)) {\n            buffer[((context.pos)++)] = pad;\n        } \n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base64:344","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n        } \n        break;\n    case 2 :\n        buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n            buffer[((context.int)++)] = byte;\n        } \n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-1},{"failures":[],"tindex":"1114881c-17bb-11e6-85cc-f5157d845d25","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.RADIX)) + \"): \") + b))","position":"org.apache.commons.codec.net.Utils:45","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b))"},"status":-2},{"failures":[84,85],"tindex":"1114af2d-17bb-11e6-85cc-fb88fcf293d5","series":0,"name":"replace","transplant":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:321","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"variableMap":{"index":"a"},"type":"adrStmt","transplantationPoint":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"status":-1},{"failures":[],"tindex":"1114af2e-17bb-11e6-85cc-cf52c010fecf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.BCodec:159","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"1114af2f-17bb-11e6-85cc-6d250bde7dfa","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"while ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n    builder.append('0');\n    cachedString = null;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:116","type":"CtWhileImpl","sourcecode":"while ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n    java.lang.StringBuilder.append('0');\n    java.lang.String = null;\n}"},"status":-2},{"failures":[],"tindex":"1114d540-17bb-11e6-85cc-55bdb83b31bd","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('|')","position":"org.apache.commons.codec.net.QCodec:101","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('|')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('(')","position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"status":0},{"failures":[86],"tindex":"1114d541-17bb-11e6-85cc-fb5b0a68604e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"v\", \"f\")","position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"v\", \"f\")"},"status":-1},{"failures":[],"tindex":"1114d542-17bb-11e6-85cc-0f1ca3ab291c","series":0,"name":"add","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"mac.update(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:743","type":"CtInvocationImpl","sourcecode":"mac.update(valueToDigest)"},"status":-2},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"tindex":"1114d543-17bb-11e6-85cc-b5205b1bc0b7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) {\n    final int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n    if (result >= 0) {\n        context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n        context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n        if ((context.modulus) == 0) {\n            buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        } \n    } \n} ","position":"org.apache.commons.codec.binary.Base64:443","type":"CtIfImpl","sourcecode":"if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n    final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n    if (result >= 0) {\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n        context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n        if ((context.int) == 0) {\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        } \n    } \n} "},"status":-1},{"failures":[87],"tindex":"1114fc54-17bb-11e6-85cc-f3eb9c1ba6f5","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))","position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"variableMap":{"raw":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"status":-1},{"failures":[],"tindex":"1114fc55-17bb-11e6-85cc-e15f0dc14c09","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ii >>= 1","position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"status":-2},{"failures":[],"tindex":"1114fc56-17bb-11e6-85cc-9168dab919b6","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")","position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"status":-2},{"failures":[],"tindex":"11152367-17bb-11e6-85cc-91c571d2e1df","series":0,"name":"add","transplant":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"variableMap":{"a":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:591","type":"CtReturnImpl","sourcecode":"return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1"},"status":-2},{"failures":[],"tindex":"11152368-17bb-11e6-85cc-dd819e6b2b39","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:490","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)"},"variableMap":{"altResult":"obj","buffer":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Soundex:150","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[88,89,90,91,92,93,94,95],"tindex":"11152369-17bb-11e6-85cc-fd0844eecd00","series":0,"name":"add","transplant":{"toString":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:395","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(pBytes, 0, keyLen);\n}"},"variableMap":{"blocksize":"cnt","pBytes":"altResult","altResult":"altResult","ctx":"ctx","i":"cnt","keyLen":"cnt"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, cnt)","position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-1},{"failures":[],"tindex":"1115236a-17bb-11e6-85cc-113efadd64d8","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"nextBranches.clear()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"nextBranches.clear()"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":30,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
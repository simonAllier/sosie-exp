{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":171,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":145,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":46,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":195,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":88,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":86,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":87,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":108,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":89,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":22,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":17,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":75,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":207,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":8,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":206,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":99,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":101,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":28,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":100,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":27,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":59,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":60,"org.apache.commons.codec.language.NysiisTest.testCap":109,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":63,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":61,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":62,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":30,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":183,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":212,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":155,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":169,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":105,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":106,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":33,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":161,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":188,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":40,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":168,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":16,"org.apache.commons.codec.language.SoundexTest.testB650":85,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":35,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":5,"org.apache.commons.codec.language.SoundexTest.testNewInstance":93,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":144,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":74,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":158,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":196,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":138,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":182,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":6,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":194,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":197,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":143,"org.apache.commons.codec.language.NysiisTest.testDropBy":122,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":39,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":25,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":180,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":213,"org.apache.commons.codec.binary.Base64Test.testUUID":57,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":199,"org.apache.commons.codec.binary.Base64Test.testSingletons":68,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":23,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":77,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":7,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":156,"org.apache.commons.codec.binary.Base64Test.testPairs":56,"org.apache.commons.codec.binary.Base64Test.testConstructors":162,"org.apache.commons.codec.language.NysiisTest.testRule2":114,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":76,"org.apache.commons.codec.language.NysiisTest.testRule1":113,"org.apache.commons.codec.language.NysiisTest.testRule7":117,"org.apache.commons.codec.language.NysiisTest.testRule6":116,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":215,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":24,"org.apache.commons.codec.language.NysiisTest.testRule5":115,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":152,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":43,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":15,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":94,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":45,"org.apache.commons.codec.language.NysiisTest.testBran":118,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":125,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":211,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":4,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":179,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":29,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":66,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":202,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":67,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":148,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":190,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":210,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":79,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":95,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":81,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":154,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":191,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":131,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":14,"org.apache.commons.codec.language.NysiisTest.testDad":110,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":164,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":50,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":136,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":13,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":193,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":107,"org.apache.commons.codec.language.NysiisTest.testDan":111,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":52,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":127,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":208,"org.apache.commons.codec.language.NysiisTest.testSnat":120,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":187,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":38,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":186,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":37,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":176,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":53,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":3,"org.apache.commons.codec.binary.Base64Test.testTriplets":160,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":181,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":128,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":134,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":132,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":135,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":126,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":147,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":167,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":149,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":64,"org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks":139,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":151,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":175,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":140,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":55,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":98,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":96,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":97,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":198,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":32,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":65,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":51,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":216,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":0,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":185,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":173,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":133,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":90,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":36,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":203,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":19,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":10,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":80,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":73,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":142,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":192,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":102,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":204,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":189,"org.apache.commons.codec.language.NysiisTest.testTranan":124,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":184,"org.apache.commons.codec.language.NysiisTest.testFal":112,"org.apache.commons.codec.language.NysiisTest.testSnad":119,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":200,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":21,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":12,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":172,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":82,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":83,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":84,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":157,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":130,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":174,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":42,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":163,"org.apache.commons.codec.binary.Base64Test.testBase64":70,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":11,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":137,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":177,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":214,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":71,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":209,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":153,"org.apache.commons.codec.binary.Base64Test.testCodec112":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":129,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":49,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":54,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":121,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":159,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":146,"org.apache.commons.codec.binary.Base64Test.testCodec68":170,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":104,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":91,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":201,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":103,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":150,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":72,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":34,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":205,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":20,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":78,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":141,"org.apache.commons.codec.language.NysiisTest.testOthers":123,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":69,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":41,"org.apache.commons.codec.language.SoundexTest.testDifference":92,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":178,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":48,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":165,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":44,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":58},"transformations":[{"failures":[0,1,2],"tindex":"17140f21-1728-11e6-9b7c-e5fd5c103963","series":0,"name":"replace","transplant":{"toString":"result.append(\"KS\")","position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append(\"N\", \"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11],"tindex":"17143632-1728-11e6-9b7c-ffb99ad4256a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n    context.currentLinePos = 0;\n} ","position":"org.apache.commons.codec.binary.Base64:392","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-1},{"failures":[],"tindex":"17145d43-1728-11e6-9b7c-5d1436bcff18","series":0,"name":"replace","transplant":{"toString":"return java.lang.Character.MIN_VALUE","position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"variableMap":{"java.lang.Character.MIN_VALUE":"ch"},"type":"adrStmt","transplantationPoint":{"toString":"return ch","position":"org.apache.commons.codec.language.ColognePhonetic:276","type":"CtReturnImpl","sourcecode":"return ch"},"status":-3},{"failures":[],"tindex":"17145d44-1728-11e6-9b7c-09e5115c4fd0","series":0,"name":"replace","transplant":{"toString":"return metaphone(str)","position":"org.apache.commons.codec.language.Metaphone:403","type":"CtReturnImpl","sourcecode":"return metaphone(str)"},"variableMap":{"str":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.TRUE_LENGTH, string.length())) : string","position":"org.apache.commons.codec.language.Nysiis:316","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string"},"status":-2},{"failures":[],"tindex":"17145d45-1728-11e6-9b7c-edfb7e5bca99","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (java.lang.String lang : sl.languages) {\n    ls.add(lang);\n}","position":"org.apache.commons.codec.language.bm.Languages:141","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n    ls.add(lang);\n}"},"status":-2},{"failures":[],"tindex":"17148456-1728-11e6-9b7c-fd6a5bbf663b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":0},{"failures":[12,13,14,15,16,17,18,19,20,21],"tindex":"17148457-1728-11e6-9b7c-699bef862100","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (blocksize == 32) {\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n} else {\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:456","type":"CtIfImpl","sourcecode":"if (blocksize == 32) {\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n} else {\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n    org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n}"},"status":-1},{"failures":[],"tindex":"1714f988-1728-11e6-9b7c-6347b5746be1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"subBuilder = rulesApplication.getPhonemeBuilder()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:349","type":"CtAssignmentImpl","sourcecode":"subBuilder = rulesApplication.getPhonemeBuilder()"},"status":0},{"failures":[],"tindex":"17152099-1728-11e6-9b7c-6d14032d59bd","series":0,"name":"replace","transplant":{"toString":"d = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:353","type":"CtAssignmentImpl","sourcecode":"d = results[1]"},"variableMap":{"d":"c","results":"results"},"type":"adrStmt","transplantationPoint":{"toString":"c = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:350","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-3},{"failures":[],"tindex":"1715209a-1728-11e6-9b7c-2b6d8021aa1f","series":0,"name":"replace","transplant":{"toString":"if (useHex) {\n    this.encodeTable = org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE;\n    this.decodeTable = org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE;\n} else {\n    this.encodeTable = org.apache.commons.codec.binary.Base32.ENCODE_TABLE;\n    this.decodeTable = org.apache.commons.codec.binary.Base32.DECODE_TABLE;\n}","position":"org.apache.commons.codec.binary.Base32:283","type":"CtIfImpl","sourcecode":"if (useHex) {\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n} else {\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n}"},"variableMap":{"encodeTable":"data","org.apache.commons.codec.binary.Base32.DECODE_TABLE":"data","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"data","org.apache.commons.codec.binary.Base32.ENCODE_TABLE":"data","org.apache.commons.codec.binary.Base32.HEX_DECODE_TABLE":"data","useHex":"encodeBlanks","decodeTable":"data"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.net.QCodec.this.encodeBlanks) {\n    for (int i = 0 ; i < (data.length) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.BLANK)) {\n            data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE;\n        } \n    }\n} ","position":"org.apache.commons.codec.net.QCodec:158","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.net.QCodec.this.boolean) {\n    for (int int = 0 ; i < (data.int) ; i++) {\n        if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n            data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n        } \n    }\n} "},"status":-3},{"failures":[],"tindex":"171547ab-1728-11e6-9b7c-8b4b090ac196","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('&')","position":"org.apache.commons.codec.net.QCodec:71","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('&')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(':')","position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"status":0},{"failures":[22],"tindex":"171547ac-1728-11e6-9b7c-83fcc80b20d8","series":0,"name":"replace","transplant":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(sep).append(si.next())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:264","type":"CtInvocationImpl","sourcecode":"sb.append(sep).append(si.next())"},"status":-1},{"failures":[],"tindex":"17156ebd-1728-11e6-9b7c-f5288f4c3a7c","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:215","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[1,2],"tindex":"17156ebe-1728-11e6-9b7c-918311b75c7e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append(\"TS\", \"FX\")","position":"org.apache.commons.codec.language.DoubleMetaphone:727","type":"CtInvocationImpl","sourcecode":"result.append(\"TS\", \"FX\")"},"status":-1},{"failures":[23,24,25],"tindex":"17156ebf-1728-11e6-9b7c-99909882e6b3","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('$')","position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:98","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[26,27,28,29,30,31,32,33],"tindex":"171595d0-1728-11e6-9b7c-09e1557a5b6e","series":0,"name":"replace","transplant":{"toString":"chrs[index] = element[1]","position":"org.apache.commons.codec.language.ColognePhonetic:437","type":"CtAssignmentImpl","sourcecode":"chrs[index] = element[1]"},"variableMap":{"chrs":"data","index":"length","element":"data"},"type":"adrStmt","transplantationPoint":{"toString":"data[length] = chr","position":"org.apache.commons.codec.language.ColognePhonetic:235","type":"CtAssignmentImpl","sourcecode":"char[][int] = chr"},"status":-1},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46],"tindex":"171595d1-1728-11e6-9b7c-89cbbedb3eca","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:403","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:340","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"failures":[47,48,49,50,3,51,52,53,4,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,10,11],"tindex":"171595d2-1728-11e6-9b7c-c96e15d69403","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"switch (context.modulus) {\n    case 1 :\n        break;\n    case 2 :\n        context.ibitWorkArea = (context.ibitWorkArea) >> 4;\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    case 3 :\n        context.ibitWorkArea = (context.ibitWorkArea) >> 2;\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base64:466","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 1 :\n        break;\n    case 2 :\n        context.int = (context.int) >> 4;\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        context.int = (context.int) >> 2;\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-1},{"failures":[],"tindex":"1715bce3-1728-11e6-9b7c-0d40ee7e5c1c","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('`')","position":"org.apache.commons.codec.net.QCodec:96","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('`')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('!')","position":"org.apache.commons.codec.net.QCodec:66","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('!')"},"status":0},{"failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"tindex":"1715e3f4-1728-11e6-9b7c-05c560e3532e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}","position":"org.apache.commons.codec.language.SoundexUtils:48","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}"},"status":-1},{"failures":[126],"tindex":"1715e3f5-1728-11e6-9b7c-bb1b882170ad","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('}')","position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QCodec:82","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"17160b06-1728-11e6-9b7c-f56453936a10","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN)))","position":"org.apache.commons.codec.language.bm.Lang:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)))"},"variableMap":{"org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN":"rawLine"},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.bm.Rule:446","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location))"},"status":-3},{"failures":[],"tindex":"17160b07-1728-11e6-9b7c-d3f1ab9c0d2b","series":0,"name":"replace","transplant":{"toString":"while (ii > 0) {\n    ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n    ii -= 16;\n}","position":"org.apache.commons.codec.digest.Md5Crypt:222","type":"CtWhileImpl","sourcecode":"while (ii > 0) {\n    ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n    ii -= 16;\n}"},"variableMap":{"ii":"cnt","finalb":"altResult","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, cnt)","position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-2},{"failures":[],"tindex":"17163218-1728-11e6-9b7c-55ce593af64d","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"hex1"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(hex1)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:186","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-2},{"failures":[],"tindex":"17163219-1728-11e6-9b7c-0773f27fad3a","series":0,"name":"replace","transplant":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inExtendedComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"variableMap":{"inExtendedComment":"inExtendedComment","org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","line":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inExtendedComment = true;\n} else if ((line.length()) > 0) {\n    ls.add(line);\n} ","position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = true;\n} else if ((line.length()) > 0) {\n    ls.add(line);\n} "},"status":-2},{"failures":[107,122,125],"tindex":"1716321a-1728-11e6-9b7c-af6e0abff60d","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"variableMap":{"next":"curr","prev":"next","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_AF;\n} ","position":"org.apache.commons.codec.language.Nysiis:120","type":"CtIfImpl","sourcecode":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[],"tindex":"1716592b-1728-11e6-9b7c-85e4553640e5","series":0,"name":"replace","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"finalb = ctx.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:250","type":"CtAssignmentImpl","sourcecode":"finalb = ctx.digest()"},"status":-3},{"failures":[127,128],"tindex":"1716592c-1728-11e6-9b7c-9159cf7acad9","series":0,"name":"add","transplant":{"toString":"cp += blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"variableMap":{"blocksize":"v","cp":"v"},"type":"adrStmt","transplantationPoint":{"toString":"v &= e1","position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"status":-1},{"failures":[],"tindex":"1716592d-1728-11e6-9b7c-03e21842b239","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"status":0},{"failures":[],"tindex":"1716592e-1728-11e6-9b7c-d74c5cca8426","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"rightLength","to":"rightLength"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AEIJOUY, chr)) {\n    code = '0';\n} else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n    if (lastCode == '/') {\n        continue;\n    } \n    code = '-';\n} else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n    code = '1';\n} else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SCZ, nextChar)))) {\n    code = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.WFPV, chr)) {\n    code = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.GKQ, chr)) {\n    code = '4';\n} else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.CKQ, lastChar)))) {\n    code = '4';\n    input.addLeft('S');\n    rightLength++;\n} else if ((chr == 'S') || (chr == 'Z')) {\n    code = '8';\n} else if (chr == 'C') {\n    if (lastCode == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n            code = '4';\n        } else {\n            code = '8';\n        }\n    } else {\n        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n            code = '8';\n        } else {\n            code = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.TDX, chr)) {\n    code = '8';\n} else if (chr == 'R') {\n    code = '7';\n} else if (chr == 'L') {\n    code = '5';\n} else if ((chr == 'M') || (chr == 'N')) {\n    code = '6';\n} else {\n    code = chr;\n}","position":"org.apache.commons.codec.language.ColognePhonetic:347","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '0';\n} else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n    if (lastCode == '/') {\n        continue;\n    } \n    code = '-';\n} else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n    code = '1';\n} else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '4';\n} else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n    code = '4';\n    input.addLeft('S');\n    rightLength++;\n} else if ((chr == 'S') || (chr == 'Z')) {\n    code = '8';\n} else if (chr == 'C') {\n    if (lastCode == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n            code = '4';\n        } else {\n            code = '8';\n        }\n    } else {\n        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n            code = '8';\n        } else {\n            code = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '8';\n} else if (chr == 'R') {\n    code = '7';\n} else if (chr == 'L') {\n    code = '5';\n} else if ((chr == 'M') || (chr == 'N')) {\n    code = '6';\n} else {\n    code = chr;\n}"},"status":-2},{"failures":[],"tindex":"1716803f-1728-11e6-9b7c-b3a81b6e8c28","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","tempResult":"in","pBytes":"decodeTable","cp":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < inAvail ; i++) {\n    final byte b = in[(inPos++)];\n    if (b == (pad)) {\n        context.eof = true;\n        break;\n    } else {\n        final byte[] buffer = ensureBufferSize(decodeSize, context);\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.decodeTable.length))) {\n            final int result = org.apache.commons.codec.binary.Base32.this.decodeTable[b];\n            if (result >= 0) {\n                context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK);\n                context.lbitWorkArea = ((context.lbitWorkArea) << (org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE)) + result;\n                if ((context.modulus) == 0) {\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                    buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.binary.Base32:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte byte = in[(inPos++)];\n    if (b == (byte)) {\n        context.boolean = true;\n        break;\n    } else {\n        final byte[] byte[] = ensureBufferSize(int, context);\n        if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n            final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n            if (result >= 0) {\n                context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n                if ((context.int) == 0) {\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                    buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-2},{"failures":[129,130,22,131,132,133,134,135],"tindex":"1716a750-1728-11e6-9b7c-392c5ab47308","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme ph : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes) {\n    if ((sb.length()) > 0) {\n        sb.append(\"|\");\n    } \n    sb.append(ph.getPhonemeText());\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:147","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    if ((sb.length()) > 0) {\n        sb.append(\"|\");\n    } \n    sb.append(ph.getPhonemeText());\n}"},"status":-1},{"failures":[],"tindex":"1716a751-1728-11e6-9b7c-35e6563fc3f6","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"z\", \"s\")","position":"org.apache.commons.codec.language.Caverphone1:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"z\", \"s\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone2:64","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"status":0},{"failures":[],"tindex":"1716a752-1728-11e6-9b7c-97317da63e04","series":0,"name":"replace","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"left"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results)","position":"org.apache.commons.codec.digest.UnixCrypt:299","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results)"},"status":-2},{"failures":[64],"tindex":"1716ce63-1728-11e6-9b7c-13fc64423a54","series":0,"name":"replace","transplant":{"toString":"final byte[] buf = new byte[avail]","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[avail]"},"variableMap":{"avail":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] b = new byte[(context.buffer.length) * (org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR)]","position":"org.apache.commons.codec.binary.BaseNCodec:254","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)]"},"status":-1},{"failures":[34,35,36,37,38,42],"tindex":"1716ce64-1728-11e6-9b7c-13c202237d5d","series":0,"name":"replace","transplant":{"toString":"final java.lang.String[] parts = aWord.split(\"'\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:433","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = aWord.split(\"'\")"},"variableMap":{"aWord":"source"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String[] branches = soundex(source, true)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:463","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = soundex(source, true)"},"status":-1},{"failures":[],"tindex":"1716ce65-1728-11e6-9b7c-1132386b641f","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:287","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:473","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)"},"status":-2},{"failures":[],"tindex":"1716ce66-1728-11e6-9b7c-e17d0ddf7f93","series":0,"name":"replace","transplant":{"toString":"while ((n--) > 0) {\n    buffer.append(org.apache.commons.codec.digest.B64.B64T.charAt((w & 63)));\n    w >>= 6;\n}","position":"org.apache.commons.codec.digest.B64:60","type":"CtWhileImpl","sourcecode":"while ((n--) > 0) {\n    buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n    w >>= 6;\n}"},"variableMap":{"w":"addChars","buffer":"alternate","n":"addChars","org.apache.commons.codec.digest.B64.B64T":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((value.length()) <= addChars) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.append(value);\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.append(value.substring(0, addChars));\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:989","type":"CtIfImpl","sourcecode":"if ((value.length()) <= addChars) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n}"},"status":-3},{"failures":[],"tindex":"1716f577-1728-11e6-9b7c-6fddf080e1a2","series":0,"name":"add","transplant":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd)","position":"org.apache.commons.codec.language.Metaphone:122","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":0},{"failures":[26,27,28,29,30,31,32,33],"tindex":"1716f578-1728-11e6-9b7c-31424de2df95","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.ColognePhonetic:302","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"1716f579-1728-11e6-9b7c-f79d3b7fa9cc","series":0,"name":"replace","transplant":{"toString":"if (target.equals(element)) {\n    result = true;\n    break;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtIfImpl","sourcecode":"if (target.equals(element)) {\n    result = true;\n    break;\n} "},"variableMap":{"result":"inExtendedComment","target":"line","element":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START"},"type":"adrStmt","transplantationPoint":{"toString":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}","position":"org.apache.commons.codec.language.bm.Languages:183","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}"},"status":-2},{"failures":[],"tindex":"1716f57a-1728-11e6-9b7c-f1d897ce9398","series":0,"name":"replace","transplant":{"toString":"mac.reset()","position":"org.apache.commons.codec.digest.HmacUtils:742","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"variableMap":{"mac":"mac"},"type":"adrStmt","transplantationPoint":{"toString":"mac.init(keySpec)","position":"org.apache.commons.codec.digest.HmacUtils:183","type":"CtInvocationImpl","sourcecode":"mac.init(keySpec)"},"status":-2},{"failures":[12,13,14,16,17],"tindex":"17171c8b-1728-11e6-9b7c-1b0fc5164da1","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:465","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer)"},"status":-1},{"failures":[129,130,22,131,132,133,134,135],"tindex":"17171c8c-1728-11e6-9b7c-6f3a3e900b3c","series":0,"name":"replace","transplant":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:181","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} "},"variableMap":{"finalRules":"finalRules"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {\n    org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder subBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n    final java.lang.String phonemeText = phoneme.getPhonemeText().toString();\n    for (int i = 0 ; i < (phonemeText.length()) ; ) {\n        final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication rulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , maxPhonemes).invoke();\n        final boolean found = rulesApplication.isFound();\n        subBuilder = rulesApplication.getPhonemeBuilder();\n        if (!found) {\n            subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n        } \n        i = rulesApplication.getI();\n    }\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n        if (phonemes.containsKey(newPhoneme)) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n            final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n            phonemes.put(mergedPhoneme, mergedPhoneme);\n        } else {\n            phonemes.put(newPhoneme, newPhoneme);\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:341","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n    org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n    final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n    for (int int = 0 ; i < (phonemeText.length()) ; ) {\n        final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n        final boolean boolean = rulesApplication.isFound();\n        subBuilder = rulesApplication.getPhonemeBuilder();\n        if (!found) {\n            subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n        } \n        i = rulesApplication.getI();\n    }\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n        if (phonemes.containsKey(newPhoneme)) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n            phonemes.put(mergedPhoneme, mergedPhoneme);\n        } else {\n            phonemes.put(newPhoneme, newPhoneme);\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"1717439d-1728-11e6-9b7c-ef922e76fe52","series":0,"name":"replace","transplant":{"toString":"char lastChar = '\u0000'","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char c1 = cs.charAt((index1++))","position":"org.apache.commons.codec.binary.CharSequenceUtils:59","type":"CtLocalVariableImpl","sourcecode":"char char = cs.charAt((index1++))"},"status":-2},{"failures":[],"tindex":"1717439e-1728-11e6-9b7c-8b7160e51652","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"continue","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:381","type":"CtContinueImpl","sourcecode":"continue"},"status":0},{"failures":[],"tindex":"1717439f-1728-11e6-9b7c-03c283c677e5","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int t = 0","position":"org.apache.commons.codec.digest.UnixCrypt:284","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"171743a0-1728-11e6-9b7c-3530ab4302d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.pattern = pattern","position":"org.apache.commons.codec.language.bm.Rule:645","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"status":-2},{"failures":[1,2],"tindex":"17176ab1-1728-11e6-9b7c-8d15983ec248","series":0,"name":"replace","transplant":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K', 'J')","position":"org.apache.commons.codec.language.DoubleMetaphone:437","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[],"tindex":"17176ab2-1728-11e6-9b7c-6bc6e1c9395c","series":0,"name":"replace","transplant":{"toString":"key[i] = ((byte)(iChar << 1))","position":"org.apache.commons.codec.digest.UnixCrypt:222","type":"CtAssignmentImpl","sourcecode":"key[i] = ((byte)(iChar << 1))"},"variableMap":{"iChar":"pos","i":"pos","key":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = pad","position":"org.apache.commons.codec.binary.Base64:355","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[34,35,36,37,38,39,40,41,42],"tindex":"17176ab3-1728-11e6-9b7c-453ec1f41613","series":0,"name":"replace","transplant":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"variableMap":{"rawLine":"input"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String inputContext = input.substring(index)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:504","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(index)"},"status":-1},{"failures":[38],"tindex":"17176ab4-1728-11e6-9b7c-bd32e93899cf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length())","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:142","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length())"},"status":-1},{"failures":[47,48,49,54,55,56,57,58,136,59,60,61,62,63,64,137,65,66,67,68,69,70,138,71,72,73,74,75,76,77,78],"tindex":"17176ab5-1728-11e6-9b7c-f320bdc97332","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"readResults(result, 0, result.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:413","type":"CtInvocationImpl","sourcecode":"readResults(result, 0, result.int, context)"},"status":-1},{"failures":[139],"tindex":"171791c6-1728-11e6-9b7c-f95a3fc04328","series":0,"name":"replace","transplant":{"toString":"sb.append(\"|\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"phonemeText"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.phonemeText.append(phonemeRight.phonemeText)","position":"org.apache.commons.codec.language.bm.Rule:116","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(phonemeRight.java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"171791c7-1728-11e6-9b7c-afbe4b787694","series":0,"name":"replace","transplant":{"toString":"this.stringEncoder = stringEncoder","position":"org.apache.commons.codec.StringEncoderComparator:58","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = stringEncoder"},"variableMap":{"stringEncoder":"stringEncoder"},"type":"adrStmt","transplantationPoint":{"toString":"this.stringEncoder = null","position":"org.apache.commons.codec.StringEncoderComparator:48","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = null"},"status":-2},{"failures":[],"tindex":"171791c8-1728-11e6-9b7c-a3522dc746ff","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(' ')","position":"org.apache.commons.codec.net.QCodec:65","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(' ')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i)","position":"org.apache.commons.codec.net.URLCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i)"},"status":-2},{"failures":[92],"tindex":"171791c9-1728-11e6-9b7c-dda545001915","series":0,"name":"replace","transplant":{"toString":"return \"NO_LANGUAGES\"","position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.Soundex:260","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[0,1,2],"tindex":"171791ca-1728-11e6-9b7c-2ba56011d37e","series":0,"name":"replace","transplant":{"toString":"result.append('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[],"tindex":"1717b8db-1728-11e6-9b7c-73a790789f7a","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"u"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(((char)((u << 4) + l)))","position":"org.apache.commons.codec.net.URLCodec:174","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"status":-2},{"failures":[140],"tindex":"1717b8dc-1728-11e6-9b7c-73fb142ec2d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"n+\", \"N\")","position":"org.apache.commons.codec.language.Caverphone1:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"n+\", \"N\")"},"status":-1},{"failures":[13,17],"tindex":"1717b8dd-1728-11e6-9b7c-512d5dd72f97","series":0,"name":"add","transplant":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.append(rounds)","position":"org.apache.commons.codec.digest.Sha2Crypt:426","type":"CtInvocationImpl","sourcecode":"buffer.append(rounds)"},"status":-1},{"failures":[],"tindex":"1717b8de-1728-11e6-9b7c-73a819ce956d","series":0,"name":"replace","transplant":{"toString":"d = (d >>> 1) | (d << 27)","position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"variableMap":{"d":"len"},"type":"adrStmt","transplantationPoint":{"toString":"context.readPos += len","position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += len"},"status":-2},{"failures":[],"tindex":"1717b8df-1728-11e6-9b7c-71a2e9e0e0a7","series":0,"name":"replace","transplant":{"toString":"newPhonemes.add(join)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:115","type":"CtInvocationImpl","sourcecode":"newPhonemes.add(join)"},"variableMap":{"newPhonemes":"phonemes","join":"phoneme"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes.add(phoneme)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(phoneme)"},"status":0},{"failures":[141],"tindex":"1717dff0-1728-11e6-9b7c-cf277645d169","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))","position":"org.apache.commons.codec.digest.DigestUtils:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:709","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"status":-1},{"failures":[],"tindex":"1717dff1-1728-11e6-9b7c-4be86aa73af8","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:253","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.this.int"},"variableMap":{"maxCodeLen":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (encode) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n} else {\n    buffer.write(b);\n    return 1;\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:222","type":"CtIfImpl","sourcecode":"if (encode) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n} else {\n    buffer.write(b);\n    return 1;\n}"},"status":-3},{"failures":[],"tindex":"1717dff2-1728-11e6-9b7c-295f1b892395","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(scanner, org.apache.commons.codec.language.DaitchMokotoffSoundex.RESOURCE_FILE, org.apache.commons.codec.language.DaitchMokotoffSoundex.RULES, org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:235","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(scanner, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>)"},"status":-2},{"failures":[],"tindex":"1717dff3-1728-11e6-9b7c-63c7997c5abc","series":0,"name":"replace","transplant":{"toString":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtIfImpl","sourcecode":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} "},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return decode(((byte[])(obj)))","position":"org.apache.commons.codec.net.URLCodec:338","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"1717dff4-1728-11e6-9b7c-69b7b4e45a10","series":0,"name":"replace","transplant":{"toString":"final java.lang.String input = cleanup(source)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:490","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = cleanup(source)"},"variableMap":{"source":"remainder"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String combined = \"d\" + remainder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:412","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = \"d\" + remainder"},"status":-2},{"failures":[],"tindex":"17180705-1728-11e6-9b7c-a9e0c1f1f785","series":0,"name":"replace","transplant":{"toString":"final char[] chrs = text.toCharArray()","position":"org.apache.commons.codec.language.ColognePhonetic:431","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = text.toCharArray()"},"variableMap":{"text":"str"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] chars = str.toCharArray()","position":"org.apache.commons.codec.language.Nysiis:277","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = str.toCharArray()"},"status":-3},{"failures":[142,143,144,145,1,2],"tindex":"17180706-1728-11e6-9b7c-bdaad233f8cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n    result.append('J', 'A');\n} else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n    result.append('J', 'H');\n} else if (index == ((value.length()) - 1)) {\n    result.append('J', ' ');\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:526","type":"CtIfImpl","sourcecode":"if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n    result.append('J', 'A');\n} else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n    result.append('J', 'H');\n} else if (index == ((value.length()) - 1)) {\n    result.append('J', ' ');\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n    result.append('J');\n} "},"status":-1},{"failures":[],"tindex":"17180707-1728-11e6-9b7c-25ba76cd5254","series":0,"name":"replace","transplant":{"toString":"name2 = getFirst3Last3(name2)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:240","type":"CtAssignmentImpl","sourcecode":"name2 = getFirst3Last3(name2)"},"variableMap":{"name2":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^cough\", \"cou2f\")","position":"org.apache.commons.codec.language.Caverphone2:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^cough\", \"cou2f\")"},"status":-2},{"failures":[],"tindex":"17180708-1728-11e6-9b7c-a9e6546938b1","series":0,"name":"add","transplant":{"toString":"d &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = handleSC(value, result, index)","position":"org.apache.commons.codec.language.DoubleMetaphone:631","type":"CtAssignmentImpl","sourcecode":"index = handleSC(value, result, index)"},"status":0},{"failures":[],"tindex":"17180709-1728-11e6-9b7c-f39d69d5b9a3","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('.')","position":"org.apache.commons.codec.net.QCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(i)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:101","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i)"},"status":-2},{"failures":[],"tindex":"17182e1a-1728-11e6-9b7c-730242f4d544","series":0,"name":"replace","transplant":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:247","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"17182e1b-1728-11e6-9b7c-7d0fbc240d33","series":0,"name":"add","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.languages.iterator().next()","position":"org.apache.commons.codec.language.bm.Languages:97","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.iterator().next()"},"status":-2},{"failures":[],"tindex":"17182e1c-1728-11e6-9b7c-31dc7f0aa990","series":0,"name":"add","transplant":{"toString":"int n = outLen","position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"variableMap":{"outLen":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final int keyLen = keyBytes.length","position":"org.apache.commons.codec.digest.Md5Crypt:180","type":"CtLocalVariableImpl","sourcecode":"final int int = keyBytes.int"},"status":-2},{"failures":[],"tindex":"17182e1d-1728-11e6-9b7c-4f23235fe4f2","series":0,"name":"replace","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"l","minRating":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"l","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"l"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0, j = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}","position":"org.apache.commons.codec.binary.Hex:144","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}"},"status":-3},{"failures":[],"tindex":"1718552e-1728-11e6-9b7c-29cebd6e5a54","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(')')","position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i)","position":"org.apache.commons.codec.net.URLCodec:83","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i)"},"status":-2},{"failures":[146],"tindex":"1718552f-1728-11e6-9b7c-15af474352a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.append('J')","position":"org.apache.commons.codec.language.Metaphone:238","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"status":-1},{"failures":[],"tindex":"17185530-1728-11e6-9b7c-e32173b23209","series":0,"name":"replace","transplant":{"toString":"sBuf.append(current)","position":"org.apache.commons.codec.language.RefinedSoundex:196","type":"CtInvocationImpl","sourcecode":"sBuf.append(current)"},"variableMap":{"current":"c","sBuf":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(c)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:365","type":"CtInvocationImpl","sourcecode":"sb.append(c)"},"status":-3},{"failures":[],"tindex":"17185531-1728-11e6-9b7c-97cb95f50e99","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"length","to":"length"},"type":"adrStmt","transplantationPoint":{"toString":"switch (inwd[0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((inwd[1]) == 'N') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'A' :\n        if ((inwd[1]) == 'E') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'W' :\n        if ((inwd[1]) == 'R') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n            break;\n        } \n        if ((inwd[1]) == 'H') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n            local.setCharAt(0, 'W');\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'X' :\n        inwd[0] = 'S';\n        local.append(inwd);\n        break;\n    default :\n        local.append(inwd);\n}","position":"org.apache.commons.codec.language.Metaphone:108","type":"CtSwitchImpl","sourcecode":"switch (inwd[0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((inwd[1]) == 'N') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'A' :\n        if ((inwd[1]) == 'E') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'W' :\n        if ((inwd[1]) == 'R') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            break;\n        } \n        if ((inwd[1]) == 'H') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            local.setCharAt(0, 'W');\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'X' :\n        inwd[0] = 'S';\n        local.append(inwd);\n        break;\n    default :\n        local.append(inwd);\n}"},"status":-2},{"failures":[],"tindex":"17187c42-1728-11e6-9b7c-116cfcba0716","series":0,"name":"add","transplant":{"toString":"ii >>= 1","position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"variableMap":{"ii":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:476","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[],"tindex":"17187c43-1728-11e6-9b7c-3fced93af005","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")","position":"org.apache.commons.codec.binary.BaseNCodec:382","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"status":-2},{"failures":[147],"tindex":"17187c44-1728-11e6-9b7c-831a815d779a","series":0,"name":"replace","transplant":{"toString":"if (ascii instanceof char[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:122","type":"CtIfImpl","sourcecode":"if (ascii instanceof char[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n} "},"variableMap":{"ascii":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[],"tindex":"17187c45-1728-11e6-9b7c-596630f4a019","series":0,"name":"replace","transplant":{"toString":"final char ch = getNextChar()","position":"org.apache.commons.codec.language.ColognePhonetic:274","type":"CtLocalVariableImpl","sourcecode":"final char char = getNextChar()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char symb = local.charAt(n)","position":"org.apache.commons.codec.language.Metaphone:150","type":"CtLocalVariableImpl","sourcecode":"final char char = local.charAt(n)"},"status":-2},{"failures":[],"tindex":"17187c46-1728-11e6-9b7c-a7f37dc13408","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:430","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())"},"variableMap":{"str":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.UTF_8), salt)","position":"org.apache.commons.codec.digest.Crypt:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt)"},"status":-2},{"failures":[],"tindex":"1718a357-1728-11e6-9b7c-037d4508aa88","series":0,"name":"replace","transplant":{"toString":"value = cleanInput(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"variableMap":{"value":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":-2},{"failures":[],"tindex":"1718a358-1728-11e6-9b7c-bbeee90cdc49","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('-')","position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('\\'')","position":"org.apache.commons.codec.net.QCodec:72","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\'')"},"status":0},{"failures":[],"tindex":"1718a359-1728-11e6-9b7c-2757a767fa6a","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"nextBranches.clear()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"nextBranches.clear()"},"status":-2},{"failures":[47,48,49,148,149,150,50,151,3,152,51,153,154,52,53,155,156,157,158,159,4,160,54,5,161,55,56,57,58,162,136,59,60,61,62,163,63,164,64,137,165,6,65,166,66,67,167,168,68,169,170,69,171,172,7,70,173,8,174,138,71,72,175,73,74,176,177,178,179,180,181,182,183,9,75,76,77,78,184,79,185,10,186,187,188,11,189,190,191,192,193,194,195,196,197],"tindex":"1718a35a-1728-11e6-9b7c-f56183e0856e","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (((pad) == element) || (isInAlphabet(element))) {\n    return true;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:500","type":"CtIfImpl","sourcecode":"if (((byte) == element) || (isInAlphabet(element))) {\n    return true;\n} "},"status":-1},{"failures":[198,199,200,201,202,203,204],"tindex":"1718ca6b-1728-11e6-9b7c-2b2ccfa093b3","series":0,"name":"add","transplant":{"toString":"altResult = ctx.digest()","position":"org.apache.commons.codec.digest.Sha2Crypt:260","type":"CtAssignmentImpl","sourcecode":"altResult = ctx.digest()"},"variableMap":{"altResult":"finalb","ctx":"ctx1"},"type":"adrStmt","transplantationPoint":{"toString":"finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:277","type":"CtAssignmentImpl","sourcecode":"finalb = ctx1.digest()"},"status":-1},{"failures":[],"tindex":"1718ca6c-1728-11e6-9b7c-9771d6ea0df1","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results)","position":"org.apache.commons.codec.digest.UnixCrypt:343","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results)"},"variableMap":{"c":"length","d":"length","results":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (ascii.length) - 1 ; ii < (l_raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n        } \n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:208","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n        } \n    }\n}"},"status":-2},{"failures":[205,206,207,208,176,209,177,180,181,189,210,196],"tindex":"1718ca6d-1728-11e6-9b7c-d749c70442cf","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"encodeTable"},"type":"adrStmt","transplantationPoint":{"toString":"if (0 == (context.modulus)) {\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 30))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 25))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 20))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 15))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 5))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(context.lbitWorkArea)) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    context.currentLinePos += org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n    if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n        java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n        context.pos += lineSeparator.length;\n        context.currentLinePos = 0;\n    } \n} ","position":"org.apache.commons.codec.binary.Base32:508","type":"CtIfImpl","sourcecode":"if (0 == (context.int)) {\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n    if (((int) > 0) && ((int) <= (context.int))) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n        context.int = 0;\n    } \n} "},"status":-1},{"failures":[0,1,2],"tindex":"1718f17e-1728-11e6-9b7c-35e22107cd77","series":0,"name":"replace","transplant":{"toString":"d &= 268435455","position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:285","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[211],"tindex":"1718f17f-1728-11e6-9b7c-3195f2925338","series":0,"name":"replace","transplant":{"toString":"ii -= 16","position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"ii -= 16"},"variableMap":{"ii":"compareCode"},"type":"adrStmt","transplantationPoint":{"toString":"compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"status":-1},{"failures":[212,213,214],"tindex":"1718f180-1728-11e6-9b7c-5b34e8435315","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^gn\", \"2n\")","position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"status":-1},{"failures":[215,216],"tindex":"1718f181-1728-11e6-9b7c-7f14e04248a7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"pos = 1","position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"status":-1},{"failures":[],"tindex":"1718f182-1728-11e6-9b7c-8f31bcc22af8","series":0,"name":"add","transplant":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:148","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"status":-2},{"failures":[],"tindex":"1718f183-1728-11e6-9b7c-3b34e0d4e505","series":0,"name":"replace","transplant":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX)","position":"org.apache.commons.codec.digest.Md5Crypt:161","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)"},"status":-2},{"failures":[],"tindex":"17191894-1728-11e6-9b7c-9de7dbe9f297","series":0,"name":"add","transplant":{"toString":"final int j = 0","position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int minRating = 0","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:251","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
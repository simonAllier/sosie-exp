{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":57,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":30,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":49,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":5,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":56,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":45,"org.apache.commons.codec.binary.Base64Test.testBase64":54,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":27,"org.apache.commons.codec.binary.Base64Test.testTriplets":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":3,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":16,"org.apache.commons.codec.binary.Base64Test.testUUID":38,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":48,"org.apache.commons.codec.binary.Base64Test.testSingletons":50,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":61,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":9,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":53,"org.apache.commons.codec.binary.Base64Test.testPairs":37,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":47,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":55,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":58,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":20,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":10,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":4,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":41,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":42,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":46,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":32,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":43,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":44,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":31,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":8,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":29,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":22,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":51,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":14,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":24,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":1,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":26,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":36,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":12,"org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter":19,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":7,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":13,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":59,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":18,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":21,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":35,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":40,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":52,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":33,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":25,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":15,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":39},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"70b56d71-17bb-11e6-86d7-85f352d37742","series":0,"name":"replace","transplant":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n    final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n    final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n    final int cLine = currentLine;\n    final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n        private final int myLine = cLine;\n\n        private final java.lang.String loc = location;\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n            sb.append(\"Rule\");\n            sb.append(\"{line=\").append(myLine);\n            sb.append(\", loc='\").append(loc).append('\\'');\n            sb.append(\", pat='\").append(pat).append('\\'');\n            sb.append(\", lcon='\").append(lCon).append('\\'');\n            sb.append(\", rcon='\").append(rCon).append('\\'');\n            sb.append('}');\n            return sb.toString();\n        }\n    };\n    final java.lang.String patternKey = r.pattern.substring(0, 1);\n    java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n        lines.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}","position":"org.apache.commons.codec.language.bm.Rule:449","type":"CtTryImpl","sourcecode":"try {\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n    final int int = currentLine;\n    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n        private final int myLine = cLine;\n\n        private final java.lang.String loc = location;\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sb.append(\"Rule\");\n            sb.append(\"{line=\").append(int);\n            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n            sb.append(\", pat='\").append(pat).append('\\'');\n            sb.append(\", lcon='\").append(lCon).append('\\'');\n            sb.append(\", rcon='\").append(rCon).append('\\'');\n            sb.append('}');\n            return sb.toString();\n        }\n    };\n    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n        lines.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}"},"status":-1},{"failures":[],"tindex":"70b5bb92-17bb-11e6-86d7-9b72bff7b292","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^y\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[^a-z]\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"status":0},{"failures":[],"tindex":"70b5bb93-17bb-11e6-86d7-5bfcd29e92b3","series":0,"name":"add","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.DoubleMetaphone:785","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"70b5bb94-17bb-11e6-86d7-73f50feb45dd","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"lastReplacement","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"lastReplacement"},"type":"adrStmt","transplantationPoint":{"toString":"branch.lastReplacement = org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this.lastReplacement","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:96","type":"CtAssignmentImpl","sourcecode":"branch.java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.this.java.lang.String"},"status":-2},{"failures":[8,9,10],"tindex":"70b5e2a5-17bb-11e6-86d7-e371dd305af4","series":0,"name":"replace","transplant":{"toString":"final byte[] tmp = new byte[bytes.length]","position":"org.apache.commons.codec.net.QCodec:181","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[bytes.int]"},"variableMap":{"bytes":"ascii","length":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] l_raw = new byte[(ascii.length) >> 3]","position":"org.apache.commons.codec.binary.BinaryCodec:203","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-1},{"failures":[],"tindex":"70b5e2a6-17bb-11e6-86d7-4be617b003b3","series":0,"name":"replace","transplant":{"toString":"return soundex(source, false)[0]","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:436","type":"CtReturnImpl","sourcecode":"return soundex(source, false)[0]"},"variableMap":{"source":"input"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String l : org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType)) {\n    if (input.startsWith((l + \" \"))) {\n        final java.lang.String remainder = input.substring(((l.length()) + 1));\n        final java.lang.String combined = l + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:415","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n    if (input.startsWith((l + \" \"))) {\n        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n        final java.lang.String java.lang.String = l + remainder;\n        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n    } \n}"},"status":-2},{"failures":[11,12,13],"tindex":"70b5e2a7-17bb-11e6-86d7-b797e1b2a54e","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(pBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:489","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer)"},"status":-1},{"failures":[14,15,16],"tindex":"70b609b8-17bb-11e6-86d7-9d39137a96e8","series":0,"name":"replace","transplant":{"toString":"result.appendAlternate('F')","position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n    result.append('K');\n} else {\n    result.append('X', 'K');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n    result.append('K');\n} else {\n    result.append('X', 'K');\n}"},"status":-1},{"failures":[],"tindex":"70b609b9-17bb-11e6-86d7-3361c3e0a4b3","series":0,"name":"replace","transplant":{"toString":"if (result >= 0) {\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK);\n    context.lbitWorkArea = ((context.lbitWorkArea) << (org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE)) + result;\n    if ((context.modulus) == 0) {\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    } \n} ","position":"org.apache.commons.codec.binary.Base32:355","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n    context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"variableMap":{"result":"modulus","org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE":"org.apache.commons.codec.binary.Base32.MASK_5BITS","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer","modulus":"modulus"},"type":"adrStmt","transplantationPoint":{"toString":"switch (context.modulus) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 3))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 2))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        break;\n    case 2 :\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 11))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 6))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 1))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 4))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        break;\n    case 3 :\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 19))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 14))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 9))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 4))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 1))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        buffer[((context.pos)++)] = pad;\n        break;\n    case 4 :\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 27))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 22))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 17))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 12))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 7))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 2))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) << 3))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n        buffer[((context.pos)++)] = pad;\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n}","position":"org.apache.commons.codec.binary.Base32:447","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 2 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 3 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        buffer[((context.int)++)] = byte;\n        break;\n    case 4 :\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte;\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-2},{"failures":[],"tindex":"70b67eea-17bb-11e6-86d7-851eab8ca074","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int index = 0","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:553","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"70b67eeb-17bb-11e6-86d7-dd0808943bc6","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('<')","position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(' ')","position":"org.apache.commons.codec.net.URLCodec:91","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(' ')"},"status":-2},{"failures":[17,18],"tindex":"70b67eec-17bb-11e6-86d7-2b14c781a371","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))","position":"org.apache.commons.codec.language.AbstractCaverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))"},"status":-1},{"failures":[],"tindex":"70b67eed-17bb-11e6-86d7-cfbb3fe96515","series":0,"name":"replace","transplant":{"toString":"hard = false","position":"org.apache.commons.codec.language.Metaphone:233","type":"CtAssignmentImpl","sourcecode":"hard = false"},"variableMap":{"hard":"eof"},"type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base32:343","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"70b6a5fe-17bb-11e6-86d7-41d63522b698","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")","position":"org.apache.commons.codec.binary.BaseNCodec:336","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:317","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"70b6a5ff-17bb-11e6-86d7-ed4bdf8cf708","series":0,"name":"add","transplant":{"toString":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:538","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'J') {\n    index += 2;\n} else {\n    index++;\n}"},"variableMap":{"index":"name2Size","value":"name1LtREnd"},"type":"adrStmt","transplantationPoint":{"toString":"if (name1LtREnd.equals(name2RtLEnd)) {\n    name1Char[(name1Size - i)] = ' ';\n    name2Char[(name2Size - i)] = ' ';\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:325","type":"CtIfImpl","sourcecode":"if (name1LtREnd.equals(name2RtLEnd)) {\n    name1Char[(name1Size - i)] = ' ';\n    name2Char[(name2Size - i)] = ' ';\n} "},"status":-2},{"failures":[15,16],"tindex":"70b6a600-17bb-11e6-86d7-cb7d922e8886","series":0,"name":"replace","transplant":{"toString":"result.append('R')","position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:341","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[19],"tindex":"70b6cc11-17bb-11e6-86d7-d1b060a193f2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtIfImpl","sourcecode":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} "},"status":-1},{"failures":[],"tindex":"70b6cc12-17bb-11e6-86d7-01f1add9529c","series":0,"name":"replace","transplant":{"toString":"return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:277","type":"CtReturnImpl","sourcecode":"return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"))"},"variableMap":{"letter":"str2"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2))","position":"org.apache.commons.codec.language.Caverphone:102","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str1).equals(org.apache.commons.codec.language.Caverphone.this.caverphone(str2))"},"status":-2},{"failures":[],"tindex":"70b6cc13-17bb-11e6-86d7-abbf94812e34","series":0,"name":"add","transplant":{"toString":"v &= e1","position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"maxLength","e1":"maxLength"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.Soundex.this.maxLength = maxLength","position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"status":-2},{"failures":[],"tindex":"70b6cc14-17bb-11e6-86d7-bb1a7b653fb2","series":0,"name":"replace","transplant":{"toString":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"variableMap":{"chrs":"chrs","index":"index","element":"chrs"},"type":"adrStmt","transplantationPoint":{"toString":"if ((chrs[index]) > 'Z') {\n    for (final char[] element : org.apache.commons.codec.language.ColognePhonetic.PREPROCESS_MAP) {\n        if ((chrs[index]) == (element[0])) {\n            chrs[index] = element[1];\n            break;\n        } \n    }\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:434","type":"CtIfImpl","sourcecode":"if ((chrs[index]) > 'Z') {\n    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n        if ((chrs[index]) == (element[0])) {\n            chrs[index] = element[1];\n            break;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"70b6f325-17bb-11e6-86d7-dbb77afed768","series":0,"name":"replace","transplant":{"toString":"this.data = data","position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.Soundex:109","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[],"tindex":"70b78f66-17bb-11e6-86d7-9d5b1888071c","series":0,"name":"replace","transplant":{"toString":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)","position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"variableMap":{"c":"left","d":"left"},"type":"adrStmt","transplantationPoint":{"toString":"out[0] = left","position":"org.apache.commons.codec.digest.UnixCrypt:315","type":"CtAssignmentImpl","sourcecode":"out[0] = left"},"status":-2},{"failures":[],"tindex":"70b7b677-17bb-11e6-86d7-97a7322f4a37","series":0,"name":"add","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"status":0},{"failures":[20,21,22,23],"tindex":"70b7b678-17bb-11e6-86d7-fb3f0d5305a6","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.SPACE)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.TAB))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:238","type":"CtReturnImpl","sourcecode":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))"},"status":-1},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"70b7b679-17bb-11e6-86d7-5143bd31c9da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.ibitWorkArea = ((context.ibitWorkArea) << 8) + b","position":"org.apache.commons.codec.binary.Base64:385","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << 8) + b"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":25,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
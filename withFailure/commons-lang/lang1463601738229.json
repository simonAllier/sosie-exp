{"failureDictionary":{"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringInt":0},"transformations":[{"failures":[],"tindex":"6c8a01cd-1d33-11e6-98a5-7577e64f5361","series":0,"name":"replace","transplant":{"toString":"if (isIgnoreEmptyTokens()) {\n    return ;\n} ","position":"org.apache.commons.lang3.text.StrTokenizer:664","type":"CtIfImpl","sourcecode":"if (isIgnoreEmptyTokens()) {\n    return ;\n} "},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (array == null) {\n    return ;\n} ","position":"org.apache.commons.lang3.ArrayUtils:1609","type":"CtIfImpl","sourcecode":"if (array == null) {\n    return ;\n} "},"status":-2},{"failures":[],"tindex":"6c8a4fee-1d33-11e6-98a5-5b6b3f5323f8","series":0,"name":"replace","transplant":{"toString":"in.close()","position":"org.apache.commons.lang3.SerializationUtils:106","type":"CtInvocationImpl","sourcecode":"in.close()"},"variableMap":{"in":"first"},"type":"adrStmt","transplantationPoint":{"toString":"if (first != null) {\n    buf.append(first);\n} ","position":"org.apache.commons.lang3.StringUtils:4096","type":"CtIfImpl","sourcecode":"if (first != null) {\n    buf.append(first);\n} "},"status":-2},{"failures":[],"tindex":"6c8a4fef-1d33-11e6-98a5-e5d1b94a789e","series":0,"name":"replace","transplant":{"toString":"if (obj == (org.apache.commons.lang3.CharSet.this)) {\n    return true;\n} ","position":"org.apache.commons.lang3.CharSet:247","type":"CtIfImpl","sourcecode":"if (obj == (org.apache.commons.lang3.CharSet.this)) {\n    return true;\n} "},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey.this) == obj) {\n    return true;\n} ","position":"org.apache.commons.lang3.time.FastDatePrinter:1259","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.lang3.time.FastDatePrinter.TimeZoneDisplayKey.this) == obj) {\n    return true;\n} "},"status":-2},{"failures":[0],"tindex":"6c8a4ff0-1d33-11e6-98a5-b3be3c38c016","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n    return str;\n} ","position":"org.apache.commons.lang3.text.WordUtils:536","type":"CtIfImpl","sourcecode":"if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n    return str;\n} "},"variableMap":{"str":"org.apache.commons.lang3.StringUtils.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"if (start > (str.length())) {\n    return org.apache.commons.lang3.StringUtils.EMPTY;\n} ","position":"org.apache.commons.lang3.StringUtils:2076","type":"CtIfImpl","sourcecode":"if (start > (str.length())) {\n    return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n} "},"status":-1},{"failures":[],"tindex":"6c8a7701-1d33-11e6-98a5-bdb75e2804f4","series":0,"name":"replace","transplant":{"toString":"if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n    return org.apache.commons.lang3.ArrayUtils.clone(array);\n} ","position":"org.apache.commons.lang3.ArrayUtils:5712","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n    return org.apache.commons.lang3.ArrayUtils.clone(array);\n} "},"variableMap":{"array":"array2","values":"array2"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.lang3.ArrayUtils.clone(array2)","position":"org.apache.commons.lang3.ArrayUtils:3909","type":"CtReturnImpl","sourcecode":"return org.apache.commons.lang3.ArrayUtils.clone(array2)"},"status":-2},{"failures":[],"tindex":"6c8a7702-1d33-11e6-98a5-6768f177b87b","series":0,"name":"add","transplant":{"toString":"if ((org.apache.commons.lang3.reflect.TypeUtils.isAssignable(midClass, superClass)) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(genericInterface, ((java.lang.reflect.Type)(midClass))))) {\n    genericInterface = midType;\n} ","position":"org.apache.commons.lang3.reflect.TypeUtils:1070","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.lang3.reflect.TypeUtils.isAssignable(midClass, superClass)) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(genericInterface, ((java.lang.reflect.Type)(midClass))))) {\n    genericInterface = midType;\n} "},"variableMap":{"genericInterface":"genericInterface","midClass":"superClass","superClass":"superClass","midType":"genericInterface"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.reflect.Type midType : interfaceTypes) {\n    java.lang.Class<?> midClass = null;\n    if (midType instanceof java.lang.reflect.ParameterizedType) {\n        midClass = org.apache.commons.lang3.reflect.TypeUtils.getRawType(((java.lang.reflect.ParameterizedType)(midType)));\n    } else if (midType instanceof java.lang.Class<?>) {\n        midClass = ((java.lang.Class<?>)(midType));\n    } else {\n        throw new java.lang.IllegalStateException(((\"Unexpected generic\" + \" interface type found: \") + midType));\n    }\n    if ((org.apache.commons.lang3.reflect.TypeUtils.isAssignable(midClass, superClass)) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(genericInterface, ((java.lang.reflect.Type)(midClass))))) {\n        genericInterface = midType;\n    } \n}","position":"org.apache.commons.lang3.reflect.TypeUtils:1056","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Type java.lang.reflect.Type : interfaceTypes) {\n    java.lang.Class<?> java.lang.Class<?> = null;\n    if (midType instanceof java.lang.reflect.ParameterizedType) {\n        midClass = org.apache.commons.lang3.reflect.TypeUtils.getRawType(((java.lang.reflect.ParameterizedType)(midType)));\n    } else if (midType instanceof java.lang.Class<?>) {\n        midClass = ((java.lang.Class<?>)(midType));\n    } else {\n        throw new java.lang.IllegalStateException(((\"Unexpected generic\" + \" interface type found: \") + midType));\n    }\n    if ((org.apache.commons.lang3.reflect.TypeUtils.isAssignable(midClass, superClass)) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(genericInterface, ((java.lang.reflect.Type)(midClass))))) {\n        genericInterface = midType;\n    } \n}"},"status":-2}],"header":{"groupId":"org.apache.commons","transformationCount":6,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
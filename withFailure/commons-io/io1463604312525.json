{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"6aea7345-1d39-11e6-905a-b1b44fd95308","series":0,"name":"add","transplant":{"toString":"if (offset != size) {\n    throw new java.io.IOException((((\"Unexpected readed size. current: \" + offset) + \", excepted: \") + size));\n} ","position":"org.apache.commons.io.IOUtils:520","type":"CtIfImpl","sourcecode":"if (offset != size) {\n    throw new java.io.IOException((((\"Unexpected readed size. current: \" + offset) + \", excepted: \") + size));\n} "},"variableMap":{"offset":"b","size":"len"},"type":"adrStmt","transplantationPoint":{"toString":"while ((len > 0) && (b >= 0)) {\n    b = readFirstBytes();\n    if (b >= 0) {\n        buf[(off++)] = ((byte)(b & 255));\n        len--;\n        firstCount++;\n    } \n}","position":"org.apache.commons.io.input.BOMInputStream:334","type":"CtWhileImpl","sourcecode":"while ((len > 0) && (b >= 0)) {\n    b = readFirstBytes();\n    if (b >= 0) {\n        buf[(off++)] = ((byte)(b & 255));\n        len--;\n        firstCount++;\n    } \n}"},"status":-2},{"failures":[],"tindex":"6aea9a56-1d39-11e6-905a-6303fa47df9f","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.io.FilenameUtils.separatorsToWindows(path)","position":"org.apache.commons.io.FilenameUtils:584","type":"CtReturnImpl","sourcecode":"return org.apache.commons.io.FilenameUtils.separatorsToWindows(path)"},"variableMap":{"path":"path"},"type":"adrStmt","transplantationPoint":{"toString":"return path.replace(org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR, org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR)","position":"org.apache.commons.io.FilenameUtils:570","type":"CtReturnImpl","sourcecode":"return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)"},"status":-2},{"failures":[],"tindex":"6aeac167-1d39-11e6-905a-eb03df9026e3","series":0,"name":"replace","transplant":{"toString":"return (mime != null) && (((mime.equals(\"text/xml\")) || (mime.equals(\"text/xml-external-parsed-entity\"))) || ((mime.startsWith(\"text/\")) && (mime.endsWith(\"+xml\"))))","position":"org.apache.commons.io.input.XmlStreamReader:775","type":"CtReturnImpl","sourcecode":"return (mime != null) && (((mime.equals(\"text/xml\")) || (mime.equals(\"text/xml-external-parsed-entity\"))) || ((mime.startsWith(\"text/\")) && (mime.endsWith(\"+xml\"))))"},"variableMap":{"mime":"cachedLine"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    while (true) {\n        java.lang.String line = bufferedReader.readLine();\n        if (line == null) {\n            finished = true;\n            return false;\n        } else if (isValidLine(line)) {\n            cachedLine = line;\n            return true;\n        } \n    }\n} catch (java.io.IOException ioe) {\n    close();\n    throw new java.lang.IllegalStateException(ioe);\n}","position":"org.apache.commons.io.LineIterator:93","type":"CtTryImpl","sourcecode":"try {\n    while (true) {\n        java.lang.String java.lang.String = java.io.BufferedReader.readLine();\n        if (line == null) {\n            boolean = true;\n            return false;\n        } else if (isValidLine(line)) {\n            java.lang.String = line;\n            return true;\n        } \n    }\n} catch (java.io.IOException ioe) {\n    close();\n    throw new java.lang.IllegalStateException(ioe);\n}"},"status":-2}],"header":{"groupId":"commons-io","transformationCount":3,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
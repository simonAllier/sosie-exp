{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"fd61a7c7-a524-11e6-a9e2-b55981497fcf","series":0,"name":"replace","transplant":{"position":"org.grobid.core.analyzers.GrobidFilterDeleteSpaceBetweenSameAlphabet:68","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.analyzers.GrobidFilterDeleteSpaceBetweenSameAlphabet:142","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"fd61ced8-a524-11e6-a9e2-159f9b8638c2","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.util.EmailSanitizer:174","type":"CtTryImpl","sourcecode":"try {\n    email = org.grobid.core.data.util.EmailSanitizer.cleanEmail(splitEmail);\n} catch (java.lang.Exception e) {\n    continue;\n}"},"variableMap":{"email":"text","splitEmail":"toto"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.HeaderParser:623","type":"CtIfImpl","sourcecode":"if (toto != null) {\n    if ((toto.equals(\"\\n\")) || (text.equals(\"\\r\"))) {\n        endline = true;\n        endloop = true;\n    } else {\n        if ((((((((((toto.trim().length()) != 0) && (!(text.equals(\"\\u00a0\")))) && (!(toto.contains(\"@IMAGE\")))) && (!(toto.contains(\"@PAGE\")))) && (!(text.contains(\".pbm\")))) && (!(text.contains(\".ppm\")))) && (!(text.contains(\".png\")))) && (!(text.contains(\".vec\")))) && (!(text.contains(\".jpg\")))) {\n            endloop = true;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"fd61ced9-a524-11e6-a9e2-d10ab1d820eb","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.BiblioItem:3260","type":"CtIfImpl","sourcecode":"if (contactAut == (-1))\n    contactAut = autRank;\nelse {\n    contactAut = -1;\n    break;\n}"},"variableMap":{"autRank":"nbTag","contactAut":"nbTag"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:3526","type":"CtIfImpl","sourcecode":"if ((aff.getAddrLine()) != null) {\n    org.grobid.core.utilities.TextUtilities.appendN(tei, '\\t', (nbTag + 3));\n    tei.append(((\"<addrLine>\" + (org.grobid.core.utilities.TextUtilities.HTMLEncode(aff.getAddrLine()))) + \"<\/addrLine>\\n\"));\n} "},"status":-2},{"failures":[],"tindex":"fd61ceda-a524-11e6-a9e2-85e90cdabe08","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.Affiliation:337","type":"CtIfImpl","sourcecode":"if ((java.lang.String) != null) {\n    java.lang.String = org.grobid.core.utilities.TextUtilities.cleanField(java.lang.String, true);\n    if ((java.lang.String.length()) < 2)\n        java.lang.String = null;\n    \n} "},"variableMap":{"postCode":"blockStatus"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.features.FeaturesVectorSegmentation:80","type":"CtIfImpl","sourcecode":"if ((java.lang.String) != null)\n    res.append((\" \" + (java.lang.String)));\n"},"status":-2},{"failures":[],"tindex":"fd61cedb-a524-11e6-a9e2-37229a04b973","series":0,"name":"replace","transplant":{"position":"org.grobid.core.document.DocumentSource:69","type":"CtReturnImpl","sourcecode":"return source"},"variableMap":{"source":"documentSource"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.document.Document:2066","type":"CtReturnImpl","sourcecode":"return org.grobid.core.document.DocumentSource"},"status":-2},{"failures":[],"tindex":"fd61cedc-a524-11e6-a9e2-5dc64a1d099d","series":0,"name":"replace","transplant":{"position":"org.grobid.core.utilities.GrobidProperties:354","type":"CtInvocationImpl","sourcecode":"org.grobid.core.utilities.GrobidProperties.load_GROBID_HOME_PATH()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.citations.RegexReferenceSegmenter:118","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : references) {\n    res.add(org.grobid.core.utilities.TextUtilities.dehyphenizeHard(org.grobid.core.engines.citations.RegexReferenceSegmenter.stripCitation(r)));\n}"},"status":-2},{"failures":[],"tindex":"fd61f5ed-a524-11e6-a9e2-6faab13ee505","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.AffiliationAddressParser:115","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = line.split(\"\\t\")"},"variableMap":{"line":"coords"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.visualization.AnnotationUtil:25","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = coords.split(\",\")"},"status":-2},{"failures":[],"tindex":"fd61f5ee-a524-11e6-a9e2-5f9de76783c7","series":0,"name":"replace","transplant":{"position":"org.grobid.core.document.OPSService:63","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.AffiliationAddressParser:794","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = st.nextToken().trim()"},"status":-2},{"failures":[],"tindex":"fd61f5ef-a524-11e6-a9e2-593f144e949b","series":0,"name":"replace","transplant":{"position":"org.grobid.core.document.Document:722","type":"CtLocalVariableImpl","sourcecode":"boolean boolean"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.visualization.CitationsVisualizer:262","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = true"},"status":-2},{"failures":[],"tindex":"fd61f5f0-a524-11e6-a9e2-bf7084045eea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.CitationParser:650","type":"CtContinueImpl","sourcecode":"continue"},"status":-2},{"failures":[],"tindex":"fd61f5f1-a524-11e6-a9e2-4507bec0e694","series":0,"name":"replace","transplant":{"position":"org.grobid.core.features.FeaturesVectorAffiliationAddress:249","type":"CtLocalVariableImpl","sourcecode":"java.util.regex.Matcher java.util.regex.Matcher = featureFactory.java.util.regex.Pattern.matcher(word)"},"variableMap":{"featureFactory":"featureFactory","isPunct":"YEAR","word":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.features.FeaturesVectorHeader:463","type":"CtLocalVariableImpl","sourcecode":"java.util.regex.Matcher java.util.regex.Matcher = featureFactory.java.util.regex.Pattern.matcher(text)"},"status":-2},{"failures":[],"tindex":"fd61f5f2-a524-11e6-a9e2-ffe9c4f52f0b","series":0,"name":"add","transplant":{"position":"org.grobid.core.engines.patent.ReferenceExtractor:465","type":"CtLocalVariableImpl","sourcecode":"java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(line , \"\\t \")"},"variableMap":{"line":"authors"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:2976","type":"CtLocalVariableImpl","sourcecode":"java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(java.lang.String , \";\")"},"status":-2},{"failures":[],"tindex":"fd61f5f3-a524-11e6-a9e2-15ae2b7383bf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.AffiliationAddressParser:327","type":"CtAssignmentImpl","sourcecode":"useMarker = true"},"status":-2},{"failures":[],"tindex":"fd621d04-a524-11e6-a9e2-51bbac9025e1","series":0,"name":"replace","transplant":{"position":"org.grobid.core.factory.AbstractEngineFactory:60","type":"CtInvocationImpl","sourcecode":"org.grobid.core.engines.ModelMap.initModels()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.features.FeaturesVectorReferenceSegmenter:129","type":"CtIfImpl","sourcecode":"if (boolean)\n    res.append(\" 1\");\nelse\n    res.append(\" 0\");\n"},"status":-2},{"failures":[],"tindex":"fd621d05-a524-11e6-a9e2-f1ee6e9dfacc","series":0,"name":"replace","transplant":{"position":"org.grobid.core.document.xml.NodeChildrenIterator:62","type":"CtThrowImpl","sourcecode":"throw new java.lang.UnsupportedOperationException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.lexicon.Lexicon:305","type":"CtThrowImpl","sourcecode":"throw new org.grobid.core.exceptions.GrobidResourceException(((\"Cannot add last names to dictionary, because cannot read file '\" + (file.getAbsolutePath())) + \"'.\"))"},"status":-2},{"failures":[],"tindex":"fd621d06-a524-11e6-a9e2-bd898791a486","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.Affiliation:392","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:1922","type":"CtLocalVariableImpl","sourcecode":"int int = org.grobid.core.data.Date.getMonth()"},"status":-2},{"failures":[],"tindex":"fd621d07-a524-11e6-a9e2-75d8dc09e88e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.document.DocumentSource:304","type":"CtInvocationImpl","sourcecode":"org.grobid.core.document.DocumentSource.org.grobid.core.document.DocumentSource.org.slf4j.Logger.error(\"Cannot cleanup resources (just printing exception):\", e)"},"status":-2},{"failures":[],"tindex":"fd621d08-a524-11e6-a9e2-45748feee9be","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.BiblioItem:1406","type":"CtIfImpl","sourcecode":"if (((res.startsWith(\".\")) || (res.startsWith(\":\"))) || (res.startsWith(\")\"))) {\n    res = res.substring(1, res.length());\n    res = res.trim();\n} "},"variableMap":{"res":"s2"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.AffiliationAddressParser:649","type":"CtInvocationImpl","sourcecode":"aff.setAffiliationString(s2)"},"status":-2},{"failures":[],"tindex":"fd621d09-a524-11e6-a9e2-590541ea0f3d","series":0,"name":"replace","transplant":{"position":"org.grobid.core.tokenization.TaggingTokenSynchronizer:80","type":"CtLocalVariableImpl","sourcecode":"int int = 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.utilities.LayoutTokensUtil:97","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"fd621d0a-a524-11e6-a9e2-efb60d3b7d82","series":0,"name":"replace","transplant":{"position":"org.grobid.core.lang.impl.CybozuLanguageDetectorFactory:50","type":"CtInvocationImpl","sourcecode":"org.grobid.core.lang.impl.CybozuLanguageDetectorFactory.init()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.document.Document:1231","type":"CtIfImpl","sourcecode":"if ((java.util.List<java.lang.Integer>) == null) {\n    java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer>();\n} "},"status":-2},{"failures":[],"tindex":"fd621d0b-a524-11e6-a9e2-170951082fbe","series":0,"name":"replace","transplant":{"position":"org.grobid.core.utilities.GrobidProperties:794","type":"CtThrowImpl","sourcecode":"throw new org.grobid.core.exceptions.GrobidPropertyException(\"Path to 3rd party program pdf2xml doesn't exists. Please set the path to pdf2xml in the file grobid.properties with the property grobid.3rdparty.pdf2xml\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.main.LibraryLoader:55","type":"CtThrowImpl","sourcecode":"throw new java.lang.RuntimeException((((\"Unable to find a native CRF++ library: No files starting with \" + (org.grobid.core.main.GrobidConstants.org.grobid.core.main.GrobidConstants.java.lang.String)) + \" are in folder \") + libraryFolder))"},"status":-2},{"failures":[],"tindex":"fd62441c-a524-11e6-a9e2-25641c255f2d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.features.FeaturesVectorCitation:438","type":"CtAssignmentImpl","sourcecode":"features.java.lang.String = \"QUOTE\""},"status":-2},{"failures":[],"tindex":"fd62441d-a524-11e6-a9e2-054b9617b0c6","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.BiblioItem:3684","type":"CtIfImpl","sourcecode":"if ((bibo.getEndPage()) != (-1))\n    bib.setEndPage(bibo.getEndPage());\n"},"variableMap":{"bibo":"bibo","bib":"bibo"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.HeaderParser:1616","type":"CtIfImpl","sourcecode":"if (bibo != null) {\n    org.grobid.core.data.BiblioItem.correct(resHeader, bibo);\n} "},"status":-2},{"failures":[],"tindex":"fd62441e-a524-11e6-a9e2-57e5760342fe","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.BiblioItem:2626","type":"CtOperatorAssignmentImpl","sourcecode":"tei += \"\\t\\t<contributor role=\\\"editor\\\">\\n\""},"variableMap":{"tei":"localText"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.document.Document:1244","type":"CtAssignmentImpl","sourcecode":"localText = localText.trim()"},"status":-2},{"failures":[],"tindex":"fd62441f-a524-11e6-a9e2-ad90d659228c","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.HeaderParser:960","type":"CtIfImpl","sourcecode":"if ((bufferDate.length()) > 0) {\n    java.io.Writer java.io.Writer = new java.io.OutputStreamWriter(new java.io.FileOutputStream(new java.io.File(((pathTEI + (java.io.File.java.io.File.java.lang.String)) + (pdfFileName.replace(\".pdf\", \".date.xml\")))) , false) , \"UTF-8\");\n    writerDate.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    writerDate.write(\"<dates>\\n\");\n    writerDate.write(bufferDate.toString());\n    writerDate.write(\"<\/dates>\\n\");\n    writerDate.close();\n} "},"variableMap":{"pathTEI":"filePath","bufferDate":"res","java.io.File.separator":"filePath","pdfFileName":"filePath"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.layout.GraphicObject:183","type":"CtIfImpl","sourcecode":"if ((java.lang.String) != null) {\n    res.append(((java.lang.String) + \"\\t\"));\n} else {\n    res.append(\"\\t\");\n}"},"status":-2},{"failures":[],"tindex":"fd624420-a524-11e6-a9e2-7fb2800505d5","series":0,"name":"replace","transplant":{"position":"org.grobid.core.document.TEIFormatter:110","type":"CtInvocationImpl","sourcecode":"tei.append((((\"<?xml-model href=\\\"file://\" + (org.grobid.core.utilities.GrobidProperties.get_GROBID_HOME_PATH())) + \"/schemas/rng/Grobid.rnc\") + \"\\\" type=\\\"application/relax-ng-compact-syntax\\\"?>\\n\"))"},"variableMap":{"tei":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.AffiliationAddressParser:1179","type":"CtInvocationImpl","sourcecode":"buffer.append(\"<\/addrLine>\\n\")"},"status":-2},{"failures":[],"tindex":"fd624421-a524-11e6-a9e2-d3762ec46894","series":0,"name":"add","transplant":{"position":"org.grobid.core.visualization.BlockVisualizer:90","type":"CtInvocationImpl","sourcecode":"java.lang.System.exit(1)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.EngineParsers:198","type":"CtInvocationImpl","sourcecode":"org.grobid.core.engines.FullTextParser.close()"},"status":-2},{"failures":[],"tindex":"fd624422-a524-11e6-a9e2-3d20415d5e7c","series":0,"name":"add","transplant":{"position":"org.grobid.core.utilities.Utilities:231","type":"CtAssignmentImpl","sourcecode":"submission = new_submission.trim()"},"variableMap":{"submission":"punctType","new_submission":"punctType"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.HeaderParser:593","type":"CtAssignmentImpl","sourcecode":"features.java.lang.String = \"COMMA\""},"status":-2},{"failures":[],"tindex":"fd626b33-a524-11e6-a9e2-5d4b0a9c3080","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.BiblioItem:2635","type":"CtIfImpl","sourcecode":"if ((java.lang.String) != null)\n    tei += (\"\\t\\t<editor>\" + (org.grobid.core.utilities.TextUtilities.HTMLEncode(java.lang.String))) + \"<\/editor>\\n\";\n"},"variableMap":{"tei":"s3","editors":"s2"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.AffiliationAddressParser:537","type":"CtIfImpl","sourcecode":"if ((!usePreLabel) || (usePreLabel && ((s3.equals(\"<affiliation>\")) || (s3.equals(\"I-<affiliation>\"))))) {\n    hasLaboratory = true;\n    if ((aff.getLaboratories()) != null) {\n        if ((s1.equals(\"I-<laboratory>\")) && (localFeatures.contains(\"LINESTART\"))) {\n            if (aff.notNull()) {\n                if (fullAffiliations == null)\n                    fullAffiliations = new java.util.ArrayList<org.grobid.core.data.Affiliation>();\n                \n                fullAffiliations.add(aff);\n            } \n            hasInstitution = false;\n            hasLaboratory = true;\n            hasDepartment = false;\n            hasAddress = false;\n            aff = new org.grobid.core.data.Affiliation();\n            aff.addLaboratory(s2);\n            if (currentMarker != null) {\n                aff.setMarker(currentMarker.trim());\n            } \n        } else if ((((s1.equals(\"I-<laboratory>\")) && hasLaboratory) && hasAddress) && (!(lastTag.equals(\"<laboratory>\")))) {\n            if (aff.notNull()) {\n                if (fullAffiliations == null)\n                    fullAffiliations = new java.util.ArrayList<org.grobid.core.data.Affiliation>();\n                \n                fullAffiliations.add(aff);\n            } \n            hasInstitution = false;\n            hasLaboratory = true;\n            hasDepartment = false;\n            hasAddress = false;\n            aff = new org.grobid.core.data.Affiliation();\n            aff.addLaboratory(s2);\n            if (currentMarker != null) {\n                aff.setMarker(currentMarker.trim());\n            } \n        } else if (s1.equals(\"I-<laboratory>\")) {\n            aff.addLaboratory(s2);\n        } else if (addSpace) {\n            aff.extendLastLaboratory((\" \" + s2));\n        } else {\n            aff.extendLastLaboratory(s2);\n        }\n    } else {\n        aff.addLaboratory(s2);\n    }\n} else if (usePreLabel && ((s3.equals(\"<address>\")) || (s3.equals(\"I-<address>\")))) {\n    if ((aff.getAddressString()) != null) {\n        if (addSpace) {\n            aff.setAddressString((((aff.getAddressString()) + \" \") + s2));\n        } else {\n            aff.setAddressString(((aff.getAddressString()) + s2));\n        }\n    } else {\n        aff.setAddressString(s2);\n    }\n} "},"status":-2},{"failures":[],"tindex":"fd626b34-a524-11e6-a9e2-45e19c84b780","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.sax.CrossrefUnixrefSaxParser:135","type":"CtIfImpl","sourcecode":"if (boolean)\n    org.grobid.core.data.BiblioItem.setE_Month(month);\nelse\n    org.grobid.core.data.BiblioItem.setMonth(month);\n"},"status":-2},{"failures":[],"tindex":"fd626b35-a524-11e6-a9e2-37e7d7fcc860","series":0,"name":"replace","transplant":{"position":"org.grobid.core.annotations.TeiStAXParser:192","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioSet:125","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"fd626b36-a524-11e6-a9e2-c1a2e1cbaf48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.CitationParser:218","type":"CtTryImpl","sourcecode":"try {\n    org.grobid.core.document.Document org.grobid.core.document.Document = org.grobid.core.engines.EngineParsers.getSegmentationParser().processing(documentSource, org.grobid.core.engines.config.GrobidAnalysisConfig.builder().consolidateCitations(consolidate).build());\n    results = processingReferenceSection(doc, referenceSegmenter, consolidate);\n} catch (org.grobid.core.exceptions.GrobidException e) {\n    throw e;\n} catch (java.lang.Exception e) {\n    throw new org.grobid.core.exceptions.GrobidException(\"An exception occurred while running Grobid.\" , e);\n}"},"status":-2},{"failures":[],"tindex":"fd626b37-a524-11e6-a9e2-09a9428dfbe4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.ebook.BookStructureParser:275","type":"CtAssignmentImpl","sourcecode":"previousNewline = true"},"status":-2},{"failures":[],"tindex":"fd626b38-a524-11e6-a9e2-4d0b682ce22b","series":0,"name":"add","transplant":{"position":"org.grobid.core.utilities.GrobidProperties:352","type":"CtInvocationImpl","sourcecode":"org.grobid.core.utilities.GrobidProperties.setProps(new java.util.Properties())"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.features.FeaturesVectorHeader:126","type":"CtIfImpl","sourcecode":"if (boolean)\n    res.append(\" 1\");\nelse\n    res.append(\" 0\");\n"},"status":-2},{"failures":[],"tindex":"fd626b39-a524-11e6-a9e2-8fdfe4b28b12","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.document.TEIFormatter:2061","type":"CtAssignmentImpl","sourcecode":"ind = text.indexOf(marker)"},"status":-2},{"failures":[],"tindex":"fd62924a-a524-11e6-a9e2-0d3562fa8c62","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.patent.PatentRefParser:1201","type":"CtIfImpl","sourcecode":"if ((numm.length()) == 7) {\n    java.lang.String java.lang.String = numm.substring(0, 2);\n    if ((((year.charAt(0)) == '7') || ((year.charAt(0)) == '8')) || ((year.charAt(0)) == '9')) {\n        year = \"19\" + year;\n    } else {\n        year = \"20\" + year;\n    }\n    number = (year + \"00\") + (numm.substring(2, numm.length()));\n} "},"variableMap":{"number":"text","numm":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.ReferenceSegmenterParser:640","type":"CtIfImpl","sourcecode":"if (tokens != null) {\n    int int = tokenIndex;\n    while (i < (tokens.size())) {\n        token = tokens.get(i);\n        if (text.equals(token.getText())) {\n            tokenIndex = i;\n            break;\n        } \n        i++;\n    }\n} "},"status":-2},{"failures":[],"tindex":"fd62924b-a524-11e6-a9e2-2ff10fd5db64","series":0,"name":"add","transplant":{"position":"org.grobid.core.visualization.FigureTableVisualizer:289","type":"CtLocalVariableImpl","sourcecode":"int int = 10"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.ReferenceSegmenterParser:544","type":"CtLocalVariableImpl","sourcecode":"int int = dp2.getTokenDocPos()"},"status":-2},{"failures":[],"tindex":"fd62924c-a524-11e6-a9e2-a1013aaf0586","series":0,"name":"add","transplant":{"position":"org.grobid.core.annotations.TeiStAXParser:193","type":"CtLocalVariableImpl","sourcecode":"javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.utilities.XMLWriter:95","type":"CtLocalVariableImpl","sourcecode":"final javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent = javax.xml.stream.XMLEventFactory.createStartElement(new javax.xml.namespace.QName(pTagName), pAttributes, null)"},"status":-2},{"failures":[],"tindex":"fd62924d-a524-11e6-a9e2-4f2b1801c90b","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.citations.AdditionalRegexTextSegmenter:77","type":"CtReturnImpl","sourcecode":"return java.util.Collections.emptyList()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.Engine:169","type":"CtReturnImpl","sourcecode":"return result"},"status":-2},{"failures":[],"tindex":"fd62924e-a524-11e6-a9e2-27e23800b1c8","series":0,"name":"add","transplant":{"position":"org.grobid.core.engines.HeaderParser:954","type":"CtInvocationImpl","sourcecode":"writerAffiliation.write(\"\\n\\t<\/teiHeader>\\n<\/tei>\\n\")"},"variableMap":{"writerAffiliation":"writerAffiliation"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.HeaderParser:955","type":"CtInvocationImpl","sourcecode":"writerAffiliation.close()"},"status":-2},{"failures":[],"tindex":"fd62924f-a524-11e6-a9e2-8bc8e7d95ad5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:2915","type":"CtIfImpl","sourcecode":"if (authors != null) {\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(authors , \";\");\n    if ((st.countTokens()) > 0) {\n        if (st.hasMoreTokens()) {\n            java.lang.String java.lang.String = st.nextToken();\n            if (author != null)\n                author = author.trim();\n            \n            int int = author.lastIndexOf(\" \");\n            if (ind != (-1)) {\n                openurl += ((\"&rft.aulast=\" + (java.net.URLEncoder.encode(author.substring((ind + 1)), \"UTF-8\"))) + \"&rft.auinit=\") + (java.net.URLEncoder.encode(author.substring(0, ind), \"UTF-8\"));\n            } else\n                openurl += \"&rft.au=\" + (java.net.URLEncoder.encode(author, \"UTF-8\"));\n            \n        } \n    } \n} "},"status":-2},{"failures":[],"tindex":"fd629250-a524-11e6-a9e2-79a384306ddd","series":0,"name":"add","transplant":{"position":"org.grobid.core.visualization.FigureTableVisualizer:351","type":"CtInvocationImpl","sourcecode":"org.grobid.core.engines.Engine.getCntManager().i(\"TABLES_TEST\", \"ANNOTATED_TABLES\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.document.BasicStructureBuilder:755","type":"CtIfImpl","sourcecode":"if (((tokens == null) || (localText == null)) || ((localText.trim().length()) == 0)) {\n    blockIndex++;\n    indexLine = 0;\n    if (blockIndex < (docBlocks.size())) {\n        block = docBlocks.get(blockIndex);\n        currentLineStartPos = block.getStartToken();\n    } \n    continue;\n} "},"status":-2},{"failures":[],"tindex":"fd629251-a524-11e6-a9e2-01f4671d0e28","series":0,"name":"replace","transplant":{"position":"org.grobid.core.layout.GraphicObject:170","type":"CtInvocationImpl","sourcecode":"res.append(\"Vector Box: [\")"},"variableMap":{"res":"jsonRef"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.visualization.CitationsVisualizer:385","type":"CtInvocationImpl","sourcecode":"jsonRef.append(\"\\\"pos\\\":[\")"},"status":-2},{"failures":[],"tindex":"fd629252-a524-11e6-a9e2-35d8541233c1","series":0,"name":"replace","transplant":{"position":"org.grobid.core.visualization.BlockVisualizer:64","type":"CtInvocationImpl","sourcecode":"org.grobid.core.utilities.GrobidProperties.setGrobidPropertiesPath(\"grobid-home/config/grobid.properties\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.Engine:788","type":"CtIfImpl","sourcecode":"if (!(pdfFile.exists())) {\n    throw new org.grobid.core.exceptions.GrobidResourceException(((\"A problem occurs in reading pdf file '\" + (pdfFile.getAbsolutePath())) + \"'. The file does not exists. \"));\n} "},"status":-2},{"failures":[],"tindex":"fd629253-a524-11e6-a9e2-2924361eccbb","series":0,"name":"replace","transplant":{"position":"org.grobid.core.features.FeaturesVectorReference:158","type":"CtIfImpl","sourcecode":"if ((java.lang.String) != null)\n    res.append(((\" \" + (java.lang.String)) + \"\\n\"));\n"},"variableMap":{"res":"accumulatedText","label":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.sax.MarecSaxParser:370","type":"CtIfImpl","sourcecode":"if (((value.equals(\"npl\")) || (value.equals(\"book\"))) || (value.equals(\"journal\"))) {\n    java.lang.String java.lang.String = getText();\n    java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n    try {\n        tokenizations = org.grobid.core.analyzers.GrobidAnalyzer.tokenize(content);\n    } catch (java.lang.Exception e) {\n        org.grobid.core.sax.MarecSaxParser.org.grobid.core.sax.MarecSaxParser.org.slf4j.Logger.debug(\"Tokenization for XML patent document has failed.\");\n    }\n    int int = tokenizations.size();\n    int int = 0;\n    for (java.lang.String java.lang.String : tokenizations) {\n        if ((((((token.trim().length()) == 0) || (token.equals(\" \"))) || (token.equals(\"\\t\"))) || (token.equals(\"\\n\"))) || (token.equals(\"\\r\"))) {\n            continue;\n        } \n        if (((j > (nbTokens - (int))) && ((int) != (-1))) || (((boolean) && (j < (int))) && ((int) != (-1)))) {\n            try {\n                java.lang.StringBuffer.append(((token + \"\\t\") + \"<other>\\n\"));\n                java.lang.StringBuffer.append((token + \" \"));\n            } catch (java.lang.Exception e) {\n                throw new org.grobid.core.exceptions.GrobidException(\"An exception occured while running Grobid.\" , e);\n            }\n        } else {\n            try {\n                java.lang.StringBuffer.append(((token + \"\\t\") + \"<ignore>\\n\"));\n                java.lang.StringBuffer.append((token + \" \"));\n            } catch (java.lang.Exception e) {\n                throw new org.grobid.core.exceptions.GrobidException(\"An exception occured while running Grobid.\" , e);\n            }\n        }\n        j++;\n    }\n    java.lang.StringBuffer.setLength(0);\n    boolean = true;\n    boolean = true;\n} else if ((value.equals(\"patent\")) || (value.equals(\"pl\"))) {\n    java.lang.String java.lang.String = getText();\n    java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n    try {\n        tokenizations = org.grobid.core.analyzers.GrobidAnalyzer.tokenize(content);\n    } catch (java.lang.Exception e) {\n        org.grobid.core.sax.MarecSaxParser.org.grobid.core.sax.MarecSaxParser.org.slf4j.Logger.debug(\"Tokenization for XML patent document has failed.\");\n    }\n    int int = tokenizations.size();\n    int int = 0;\n    for (java.lang.String java.lang.String : tokenizations) {\n        if ((((((token.trim().length()) == 0) || (token.equals(\" \"))) || (token.equals(\"\\t\"))) || (token.equals(\"\\n\"))) || (token.equals(\"\\r\"))) {\n            continue;\n        } \n        if ((j > (nbTokens - (int))) | ((boolean) & (j < (int)))) {\n            try {\n                java.lang.StringBuffer.append(((token + \"\\t\") + \"<other>\\n\"));\n                java.lang.StringBuffer.append((token + \" \"));\n            } catch (java.lang.Exception e) {\n                throw new org.grobid.core.exceptions.GrobidException(\"An exception occured while running Grobid.\" , e);\n            }\n        } else {\n            try {\n                java.lang.StringBuffer.append(((token + \"\\t\") + \"<ignore>\\n\"));\n                java.lang.StringBuffer.append((token + \" \"));\n            } catch (java.lang.Exception e) {\n                throw new org.grobid.core.exceptions.GrobidException(\"An exception occured while running Grobid.\" , e);\n            }\n        }\n        j++;\n    }\n    java.lang.StringBuffer.setLength(0);\n    boolean = false;\n    boolean = true;\n} else {\n    java.lang.System.java.lang.System.java.io.PrintStream.println((\"Warning: unknown attribute value for ref or bibl: \" + value));\n    boolean = false;\n    boolean = false;\n}"},"status":-2},{"failures":[],"tindex":"fd62b964-a524-11e6-a9e2-13cec4e4bfd8","series":0,"name":"add","transplant":{"position":"org.grobid.core.engines.Engine:196","type":"CtReturnImpl","sourcecode":"return org.grobid.core.engines.EngineParsers.getCitationParser().processing(reference, consolidate)"},"variableMap":{"reference":"input","consolidate":"consolidate","parsers":"parsers"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.CitationParser:54","type":"CtTryImpl","sourcecode":"try {\n    java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<>();\n    input = org.grobid.core.utilities.TextUtilities.dehyphenize(input);\n    input = input.replace(\"\\n\", \" \");\n    input = input.replaceAll(\"\\\\p{Cntrl}\", \" \").trim();\n    java.util.List<java.lang.String> java.util.List<java.lang.String> = org.grobid.core.analyzers.GrobidAnalyzer.tokenize(input);\n    if ((tokenizations.size()) == 0)\n        return null;\n    \n    for (java.lang.String java.lang.String : tokenizations) {\n        if (!(tok.equals(\" \"))) {\n            citationBlocks.add((tok + \" <citation>\"));\n        } \n    }\n    citationBlocks.add(\"\\n\");\n    java.util.List<java.util.List<org.grobid.core.utilities.OffsetPosition>> java.util.List<java.util.List<org.grobid.core.utilities.OffsetPosition>> = new java.util.ArrayList<java.util.List<org.grobid.core.utilities.OffsetPosition>>();\n    java.util.List<java.util.List<org.grobid.core.utilities.OffsetPosition>> java.util.List<java.util.List<org.grobid.core.utilities.OffsetPosition>> = new java.util.ArrayList<java.util.List<org.grobid.core.utilities.OffsetPosition>>();\n    java.util.List<java.util.List<org.grobid.core.utilities.OffsetPosition>> java.util.List<java.util.List<org.grobid.core.utilities.OffsetPosition>> = new java.util.ArrayList<java.util.List<org.grobid.core.utilities.OffsetPosition>>();\n    java.util.List<java.util.List<org.grobid.core.utilities.OffsetPosition>> java.util.List<java.util.List<org.grobid.core.utilities.OffsetPosition>> = new java.util.ArrayList<java.util.List<org.grobid.core.utilities.OffsetPosition>>();\n    journalsPositions.add(org.grobid.core.lexicon.Lexicon.inJournalNames(input));\n    abbrevJournalsPositions.add(org.grobid.core.lexicon.Lexicon.inAbbrevJournalNames(input));\n    conferencesPositions.add(org.grobid.core.lexicon.Lexicon.inConferenceNames(input));\n    publishersPositions.add(org.grobid.core.lexicon.Lexicon.inPublisherNames(input));\n    java.lang.String java.lang.String = org.grobid.core.features.FeaturesVectorCitation.addFeaturesCitation(citationBlocks, journalsPositions, abbrevJournalsPositions, conferencesPositions, publishersPositions);\n    java.lang.String java.lang.String = label(ress);\n    resCitation = resultExtraction(res, true, tokenizations);\n    if (resCitation != null) {\n        org.grobid.core.data.BiblioItem.cleanTitles(resCitation);\n        resCitation.setOriginalAuthors(resCitation.getAuthors());\n        java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n        if ((resCitation.getAuthors()) != null) {\n            auts.add(resCitation.getAuthors());\n        } \n        resCitation.setFullAuthors(org.grobid.core.engines.EngineParsers.getAuthorParser().processingCitation(auts));\n        if ((resCitation.getPublicationDate()) != null) {\n            java.util.List<org.grobid.core.data.Date> java.util.List<org.grobid.core.data.Date> = org.grobid.core.engines.EngineParsers.getDateParser().processing(resCitation.getPublicationDate());\n            if (dates != null) {\n                org.grobid.core.data.Date org.grobid.core.data.Date = null;\n                if ((dates.size()) > 0) {\n                    for (org.grobid.core.data.Date org.grobid.core.data.Date : dates) {\n                        if (bestDate == null) {\n                            bestDate = theDate;\n                        } else {\n                            if ((bestDate.compareTo(theDate)) == 1) {\n                                bestDate = theDate;\n                            } \n                        }\n                    }\n                    if (bestDate != null) {\n                        resCitation.setNormalizedPublicationDate(bestDate);\n                    } \n                } \n            } \n        } \n        resCitation.setPageRange(org.grobid.core.utilities.TextUtilities.cleanField(resCitation.getPageRange(), true));\n        resCitation.setPublisher(org.grobid.core.utilities.TextUtilities.cleanField(resCitation.getPublisher(), true));\n        resCitation.setJournal(org.grobid.core.utilities.TextUtilities.cleanField(resCitation.getJournal(), true));\n        resCitation.postProcessPages();\n    } \n    if (consolidate) {\n        resCitation = consolidateCitation(resCitation);\n    } \n    return resCitation;\n} catch (java.lang.Exception e) {\n    throw new org.grobid.core.exceptions.GrobidException(\"An exception occured while running Grobid.\" , e);\n}"},"status":-2},{"failures":[],"tindex":"fd62b965-a524-11e6-a9e2-015b87981453","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.FullTextParser:1270","type":"CtInvocationImpl","sourcecode":"buffer.append(\"<\/item>\\n\\n\")"},"variableMap":{"buffer":"tei"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:1898","type":"CtInvocationImpl","sourcecode":"tei.append(\"<\/meeting>\\n\")"},"status":-2},{"failures":[],"tindex":"fd62b966-a524-11e6-a9e2-937f8e35cd45","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.sax.PDF2XMLSaxHandler:479","type":"CtOperatorAssignmentImpl","sourcecode":"prevSubWidth += subTokWidth"},"status":-2},{"failures":[],"tindex":"fd62b967-a524-11e6-a9e2-8784e2405f3a","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.tagging.GrobidCRFEngine:24","type":"CtIfImpl","sourcecode":"if (name == null) {\n    throw new java.lang.IllegalArgumentException(\"Name of a Grobid CRF engine must not be null\");\n} "},"variableMap":{"name":"originalAuthors"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:3117","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isDigit(java.lang.String.charAt((ind + 1)))) {\n    bad = true;\n} "},"status":-2},{"failures":[],"tindex":"fd62b968-a524-11e6-a9e2-9b65acc6442f","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.BiblioItem:1227","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.patent.PatentRefParser:653","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = null"},"status":-2}],"header":{"groupId":"org.grobid","transformationCount":50,"projectType":"maven","artifactId":"grobid-parent","generatorVersion":"1.0","version":"0.4.2-SNAPSHOT"}}
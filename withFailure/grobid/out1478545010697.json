{"failureDictionary":{"org.grobid.service.tests.GrobidRestServiceTest.testFullyRestLessHeaderDocument":1,"org.grobid.service.tests.GrobidRestServiceTest.testRestDate":0},"transformations":[{"failures":[],"tindex":"f10a9008-a51b-11e6-9037-833b37a6464c","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.entities.ChemicalParser:51","type":"CtInvocationImpl","sourcecode":"textBlocks.add((tok + \"\\t<chemical>\"))"},"variableMap":{"tok":"theExtend","textBlocks":"laboratories"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.Affiliation:249","type":"CtInvocationImpl","sourcecode":"java.util.List<java.lang.String>.add(org.grobid.core.utilities.TextUtilities.cleanField(theExtend, true))"},"status":0},{"failures":[0],"tindex":"f10ab719-a51b-11e6-9037-7708a81d4bef","series":0,"name":"replace","transplant":{"position":"org.grobid.core.utilities.TextUtilities:646","type":"CtInvocationImpl","sourcecode":"sb.append(' ')"},"variableMap":{"sb":"tei"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:3338","type":"CtInvocationImpl","sourcecode":"tei.append(((\"<orgName type=\\\"department\\\">\" + (org.grobid.core.utilities.TextUtilities.HTMLEncode(aff.getDepartments().get(0)))) + \"<\/orgName>\\n\"))"},"status":-1},{"failures":[],"tindex":"f10ab71a-a51b-11e6-9037-f3674bc9468e","series":0,"name":"replace","transplant":{"position":"org.grobid.core.main.LibraryLoader:104","type":"CtInvocationImpl","sourcecode":"org.grobid.core.mock.MockContext.destroyInitialContext()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.features.FeaturesVectorAffiliationAddress:280","type":"CtIfImpl","sourcecode":"if (isPlace) {\n    featuresVector.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"f10ab71b-a51b-11e6-9037-15052f0d5d79","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.AuthorParser:416","type":"CtIfImpl","sourcecode":"if ((tokenizations.size()) == 0)\n    return null;\n"},"variableMap":{"tokenizations":"inputs"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.DateParser:297","type":"CtTryImpl","sourcecode":"try {\n    if (inputs == null)\n        return null;\n    \n    if ((inputs.size()) == 0)\n        return null;\n    \n    java.util.List<java.lang.String> java.util.List<java.lang.String> = null;\n    java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n    for (java.lang.String java.lang.String : inputs) {\n        if (input == null)\n            continue;\n        \n        tokenizations = org.grobid.core.analyzers.GrobidAnalyzer.tokenize(input);\n        if ((tokenizations.size()) == 0)\n            return null;\n        \n        for (java.lang.String java.lang.String : tokenizations) {\n            if (tok.equals(\"\\n\")) {\n                dateBlocks.add(\"@newline\");\n            } else if (!(tok.equals(\" \"))) {\n                dateBlocks.add((tok + \" <date>\"));\n            } \n        }\n        dateBlocks.add(\"\\n\");\n    }\n    java.lang.String java.lang.String = org.grobid.core.features.FeaturesVectorDate.addFeaturesDate(dateBlocks);\n    java.lang.String java.lang.String = label(headerDate);\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(res , \"\\n\");\n    java.lang.String java.lang.String = null;\n    boolean boolean = false;\n    int int = 0;\n    boolean boolean;\n    boolean boolean = false;\n    boolean boolean = false;\n    boolean boolean = false;\n    java.lang.String java.lang.String;\n    java.lang.String java.lang.String;\n    boolean boolean = true;\n    while (st2.hasMoreTokens()) {\n        java.lang.String java.lang.String = st2.nextToken();\n        addSpace = false;\n        if ((line.trim().length()) == 0) {\n            buffer.append(\"<\/date>\\n\");\n            hasYear = false;\n            hasMonth = false;\n            hasDay = false;\n            buffer.append(\"\\t<date>\");\n            continue;\n        } else {\n            java.lang.String java.lang.String = tokenizations.get(q);\n            while (theTok.equals(\" \")) {\n                addSpace = true;\n                q++;\n                theTok = tokenizations.get(q);\n            }\n            q++;\n        }\n        java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(line , \"\\t\");\n        int int = st3.countTokens();\n        int int = 0;\n        java.lang.String java.lang.String = null;\n        java.lang.String java.lang.String = null;\n        while (st3.hasMoreTokens()) {\n            java.lang.String java.lang.String = st3.nextToken().trim();\n            if (i == 0) {\n                s2 = org.grobid.core.utilities.TextUtilities.HTMLEncode(s);\n            } else if (i == (ll - 1)) {\n                s1 = s;\n            } \n            i++;\n        }\n        if (start && (s1 != null)) {\n            buffer.append(\"\\t<date>\");\n            start = false;\n        } \n        lastTag0 = null;\n        if (lastTag != null) {\n            if (lastTag.startsWith(\"I-\")) {\n                lastTag0 = lastTag.substring(2, lastTag.length());\n            } else {\n                lastTag0 = lastTag;\n            }\n        } \n        currentTag0 = null;\n        if (s1 != null) {\n            if (s1.startsWith(\"I-\")) {\n                currentTag0 = s1.substring(2, s1.length());\n            } else {\n                currentTag0 = s1;\n            }\n        } \n        tagClosed = (lastTag0 != null) && (testClosingTag(buffer, currentTag0, lastTag0));\n        java.lang.String java.lang.String = writeField(s1, lastTag0, s2, \"<day>\", \"<day>\", addSpace, 0);\n        if (output != null) {\n            if (lastTag0 != null) {\n                if (hasDay && (!(lastTag0.equals(\"<day>\")))) {\n                    buffer.append(\"<\/date>\\n\");\n                    hasYear = false;\n                    hasMonth = false;\n                    buffer.append(\"\\t<date>\");\n                } \n            } \n            hasDay = true;\n            buffer.append(output);\n            lastTag = s1;\n            continue;\n        } else {\n            output = writeField(s1, lastTag0, s2, \"<other>\", \"<other>\", addSpace, 0);\n        }\n        if (output == null) {\n            output = writeField(s1, lastTag0, s2, \"<month>\", \"<month>\", addSpace, 0);\n        } else {\n            buffer.append(output);\n            lastTag = s1;\n            continue;\n        }\n        if (output == null) {\n            output = writeField(s1, lastTag0, s2, \"<year>\", \"<year>\", addSpace, 0);\n        } else {\n            if (lastTag0 != null) {\n                if (hasMonth && (!(lastTag0.equals(\"<month>\")))) {\n                    buffer.append(\"<\/date>\\n\");\n                    hasYear = false;\n                    hasDay = false;\n                    buffer.append(\"\\t<date>\");\n                } \n            } \n            buffer.append(output);\n            hasMonth = true;\n            lastTag = s1;\n            continue;\n        }\n        if (output != null) {\n            if (lastTag0 != null) {\n                if (hasYear && (!(lastTag0.equals(\"<year>\")))) {\n                    buffer.append(\"<\/date>\\n\");\n                    hasDay = false;\n                    hasMonth = false;\n                    buffer.append(\"\\t<date>\");\n                } \n            } \n            buffer.append(output);\n            hasYear = true;\n            lastTag = s1;\n            continue;\n        } \n        lastTag = s1;\n    }\n    if (lastTag != null) {\n        if (lastTag.startsWith(\"I-\")) {\n            lastTag0 = lastTag.substring(2, lastTag.length());\n        } else {\n            lastTag0 = lastTag;\n        }\n        currentTag0 = \"\";\n        testClosingTag(buffer, currentTag0, lastTag0);\n        buffer.append(\"<\/date>\\n\");\n    } \n} catch (java.lang.Exception e) {\n    throw new org.grobid.core.exceptions.GrobidException(\"An exception occured while running Grobid.\" , e);\n}"},"status":0},{"failures":[],"tindex":"f10ade2c-a51b-11e6-9037-dd71e476d555","series":0,"name":"add","transplant":{"position":"org.grobid.core.engines.ebook.BookStructureParser:588","type":"CtAssignmentImpl","sourcecode":"result = true"},"variableMap":{"result":"singleChar"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.features.FeaturesVectorCitation:490","type":"CtAssignmentImpl","sourcecode":"features.boolean = true"},"status":-2},{"failures":[],"tindex":"f10ade2d-a51b-11e6-9037-eff41038f97c","series":0,"name":"add","transplant":{"position":"org.grobid.core.engines.patent.PatentRefParser:461","type":"CtIfImpl","sourcecode":"if ((numm.startsWith(\"0\")) && ((numm.length()) == 11)) {\n    number = number.substring(1, number.length());\n} else if (((numm.startsWith(\"09\")) && ((numm.length()) == 8)) || ((numm.startsWith(\"00\")) && ((numm.length()) == 8))) {\n    number = number.substring(1, number.length());\n} "},"variableMap":{"number":"openurl","numm":"openurl"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:2884","type":"CtIfImpl","sourcecode":"if ((java.lang.String) != null)\n    openurl += \"&rft.volume=\" + (java.net.URLEncoder.encode(java.lang.String, \"UTF-8\"));\n"},"status":-2},{"failures":[],"tindex":"f10ade2e-a51b-11e6-9037-07e3dd9cdcdc","series":0,"name":"replace","transplant":{"position":"org.grobid.core.document.Document:1568","type":"CtLocalVariableImpl","sourcecode":"int int = 200"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.utilities.TextUtilities:281","type":"CtLocalVariableImpl","sourcecode":"int int"},"status":-2},{"failures":[1],"tindex":"f10ade2f-a51b-11e6-9037-c77d27bfdfb9","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.FullTextParser:837","type":"CtInvocationImpl","sourcecode":"writerName.write((\"\\t<teiHeader>\\n\\t\\t<fileDesc>\\n\\t\\t\\t<sourceDesc>\\n\" + \"\\t\\t\\t\\t<biblStruct>\\n\\t\\t\\t\\t\\t<analytic>\\n\\n\"))"},"variableMap":{"writerName":"writerName"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.FullTextParser:859","type":"CtInvocationImpl","sourcecode":"writerName.write(\"\\n\\t<\/teiHeader>\\n<\/TEI>\\n\")"},"status":-1}],"header":{"groupId":"org.grobid","transformationCount":8,"projectType":"maven","artifactId":"grobid-parent","generatorVersion":"1.0","version":"0.4.2-SNAPSHOT"}}
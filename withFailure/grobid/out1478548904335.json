{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"01c63ae9-a525-11e6-8f03-e111fbce27db","series":0,"name":"replace","transplant":{"position":"org.grobid.core.utilities.GrobidProperties:352","type":"CtInvocationImpl","sourcecode":"org.grobid.core.utilities.GrobidProperties.setProps(new java.util.Properties())"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.features.FeaturesVectorAffiliationAddress:70","type":"CtIfImpl","sourcecode":"if (boolean)\n    res.append(\" 1\");\nelse\n    res.append(\" 0\");\n"},"status":-2},{"failures":[],"tindex":"01c661fa-a525-11e6-8f03-d76f70881326","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.BiblioItem:1081","type":"CtAssignmentImpl","sourcecode":"boolean = e"},"variableMap":{"crossrefError":"currentPatent","e":"currentPatent"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.patent.ReferenceExtractor:560","type":"CtAssignmentImpl","sourcecode":"currentPatent = false"},"status":0},{"failures":[],"tindex":"01c661fb-a525-11e6-8f03-35e841d5b630","series":0,"name":"replace","transplant":{"position":"org.grobid.core.document.BasicStructureBuilder:950","type":"CtAssignmentImpl","sourcecode":"s2 = s"},"variableMap":{"s":"s1","s2":"s1"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.AuthorParser:623","type":"CtAssignmentImpl","sourcecode":"lastTag = s1"},"status":0},{"failures":[],"tindex":"01c661fc-a525-11e6-8f03-dd82975ae4e0","series":0,"name":"replace","transplant":{"position":"org.grobid.core.data.BiblioItem:1875","type":"CtInvocationImpl","sourcecode":"tei.append(\"<\/meeting>\\n\")"},"variableMap":{"tei":"tei"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.document.TEIFormatter:585","type":"CtInvocationImpl","sourcecode":"tei.append(\"\\t\\t\\t\\t\\t\\t\\t<date type=\\\"published\\\" when=\\\"\")"},"status":0},{"failures":[],"tindex":"01c661fd-a525-11e6-8f03-53ab8b5aae0a","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.CitationParser:462","type":"CtReturnImpl","sourcecode":"return biblio"},"variableMap":{"biblio":"resHeader"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.document.Document:180","type":"CtReturnImpl","sourcecode":"return org.grobid.core.data.BiblioItem"},"status":0},{"failures":[],"tindex":"01c661fe-a525-11e6-8f03-ebd09a1ce333","series":0,"name":"replace","transplant":{"position":"org.grobid.core.visualization.CitationsVisualizer:448","type":"CtIfImpl","sourcecode":"if (refBibOutput) {\n    jsonRef.append(\"]\");\n} "},"variableMap":{"refBibOutput":"endPage","jsonRef":"fulltext"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.engines.ebook.BookStructureParser:189","type":"CtWhileImpl","sourcecode":"while (n < (tokens.size())) {\n    org.grobid.core.layout.LayoutToken org.grobid.core.layout.LayoutToken = tokens.get(n);\n    features = new org.grobid.core.features.FeaturesVectorFulltext();\n    features.org.grobid.core.layout.LayoutToken = token;\n    java.lang.String java.lang.String = token.getText();\n    if (text == null) {\n        n++;\n        mm++;\n        nn++;\n        continue;\n    } \n    text = text.trim();\n    if ((text.length()) == 0) {\n        n++;\n        mm++;\n        nn++;\n        continue;\n    } \n    if (text.equals(\"\\n\")) {\n        newline = true;\n        previousNewline = true;\n        n++;\n        mm++;\n        nn++;\n        continue;\n    } else\n        newline = false;\n    \n    if (previousNewline) {\n        newline = true;\n        previousNewline = false;\n    } \n    boolean boolean = false;\n    if (text.startsWith(\"@IMAGE\")) {\n        filter = true;\n    } else if (text.contains(\".pbm\")) {\n        filter = true;\n    } else if (text.contains(\".vec\")) {\n        filter = true;\n    } else if (text.contains(\".jpg\")) {\n        filter = true;\n    } \n    if (filter) {\n        n++;\n        mm++;\n        nn++;\n        continue;\n    } \n    features.java.lang.String = text;\n    if (newline)\n        features.java.lang.String = \"LINESTART\";\n    \n    java.util.regex.Matcher java.util.regex.Matcher = featureFactory.java.util.regex.Pattern.matcher(text);\n    if (m0.find()) {\n        features.java.lang.String = \"PUNCT\";\n    } \n    if ((text.equals(\"(\")) || (text.equals(\"[\"))) {\n        features.java.lang.String = \"OPENBRACKET\";\n    } else if ((text.equals(\")\")) || (text.equals(\"]\"))) {\n        features.java.lang.String = \"ENDBRACKET\";\n    } else if (text.equals(\".\")) {\n        features.java.lang.String = \"DOT\";\n    } else if (text.equals(\",\")) {\n        features.java.lang.String = \"COMMA\";\n    } else if (text.equals(\"-\")) {\n        features.java.lang.String = \"HYPHEN\";\n    } else if (((text.equals(\"\\\"\")) || (text.equals(\"\\'\"))) || (text.equals(\"`\"))) {\n        features.java.lang.String = \"QUOTE\";\n    } \n    if (n == 0) {\n        features.java.lang.String = \"LINESTART\";\n        features.java.lang.String = \"BLOCKSTART\";\n    } else if (n == ((tokens.size()) - 1)) {\n        features.java.lang.String = \"LINEEND\";\n        previousNewline = true;\n        features.java.lang.String = \"BLOCKEND\";\n        endblock = true;\n    } else {\n        boolean boolean = false;\n        int int = 1;\n        boolean boolean = false;\n        while (((n + ii) < (tokens.size())) && (!endloop)) {\n            org.grobid.core.layout.LayoutToken org.grobid.core.layout.LayoutToken = tokens.get((n + ii));\n            if (tok != null) {\n                java.lang.String java.lang.String = tok.getText();\n                if (toto != null) {\n                    if (toto.equals(\"\\n\")) {\n                        endline = true;\n                        endloop = true;\n                    } else {\n                        if ((((((toto.length()) != 0) && (!(toto.startsWith(\"@IMAGE\")))) && (!(text.contains(\".pbm\")))) && (!(text.contains(\".vec\")))) && (!(text.contains(\".jpg\")))) {\n                            endloop = true;\n                        } \n                    }\n                } \n            } \n            if ((n + ii) == ((tokens.size()) - 1)) {\n                endblock = true;\n                endline = true;\n            } \n            ii++;\n        }\n        if ((!endline) && (!newline)) {\n            features.java.lang.String = \"LINEIN\";\n        } else if (!newline) {\n            features.java.lang.String = \"LINEEND\";\n            previousNewline = true;\n        } \n        if ((!endblock) && ((features.java.lang.String) == null))\n            features.java.lang.String = \"BLOCKIN\";\n        else if ((features.java.lang.String) == null) {\n            features.java.lang.String = \"BLOCKEND\";\n            endblock = true;\n        } \n    }\n    if (newPage) {\n        newPage = false;\n        endPage = false;\n        if (previousFeatures != null) {\n        } \n    } else {\n        newPage = false;\n        endPage = false;\n    }\n    if ((text.length()) == 1) {\n        features.boolean = true;\n    } \n    if (java.lang.Character.isUpperCase(text.charAt(0))) {\n        features.java.lang.String = \"INITCAP\";\n    } \n    if (featureFactory.test_all_capital(text)) {\n        features.java.lang.String = \"ALLCAP\";\n    } \n    if (featureFactory.test_digit(text)) {\n        features.java.lang.String = \"CONTAINSDIGITS\";\n    } \n    java.util.regex.Matcher java.util.regex.Matcher = featureFactory.java.util.regex.Pattern.matcher(text);\n    if (m.find()) {\n        features.java.lang.String = \"ALLDIGIT\";\n    } \n    if (currentFont == null) {\n        currentFont = token.getFont();\n        features.java.lang.String = \"NEWFONT\";\n    } else if (!(currentFont.equals(token.getFont()))) {\n        currentFont = token.getFont();\n        features.java.lang.String = \"NEWFONT\";\n    } else\n        features.java.lang.String = \"SAMEFONT\";\n    \n    int int = ((int)(token.getFontSize()));\n    if (currentFontSize == (-1)) {\n        currentFontSize = newFontSize;\n        features.java.lang.String = \"HIGHERFONT\";\n    } else if (currentFontSize == newFontSize) {\n        features.java.lang.String = \"SAMEFONTSIZE\";\n    } else if (currentFontSize < newFontSize) {\n        features.java.lang.String = \"HIGHERFONT\";\n        currentFontSize = newFontSize;\n    } else if (currentFontSize > newFontSize) {\n        features.java.lang.String = \"LOWERFONT\";\n        currentFontSize = newFontSize;\n    } \n    if (token.getBold())\n        features.boolean = true;\n    \n    if (token.getItalic())\n        features.boolean = true;\n    \n    if ((features.java.lang.String) == null)\n        features.java.lang.String = \"NOCAPS\";\n    \n    if ((features.java.lang.String) == null)\n        features.java.lang.String = \"NODIGIT\";\n    \n    if ((features.java.lang.String) == null)\n        features.java.lang.String = \"NOPUNCT\";\n    \n    features.int = featureFactory.linearScaling(nn, documentLength, org.grobid.core.engines.ebook.BookStructureParser.org.grobid.core.engines.ebook.BookStructureParser.int);\n    features.int = featureFactory.linearScaling(mm, pageLength, org.grobid.core.engines.ebook.BookStructureParser.org.grobid.core.engines.ebook.BookStructureParser.int);\n    if (previousFeatures != null)\n        fulltext.append(previousFeatures.printVector());\n    \n    n++;\n    mm++;\n    nn++;\n    previousFeatures = features;\n}"},"status":0},{"failures":[],"tindex":"01c6890f-a525-11e6-8f03-a912291a70ff","series":0,"name":"replace","transplant":{"position":"org.grobid.core.lexicon.Lexicon:485","type":"CtAssignmentImpl","sourcecode":"org.grobid.core.lexicon.FastMatcher = new org.grobid.core.lexicon.FastMatcher(new java.io.File(((org.grobid.core.utilities.GrobidProperties.getGrobidHomePath()) + \"/lexicon/names/VincentNgPeopleTitles.txt\")))"},"variableMap":{"personTitlePattern":"locationPattern"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.lexicon.Lexicon:476","type":"CtAssignmentImpl","sourcecode":"org.grobid.core.lexicon.FastMatcher = new org.grobid.core.lexicon.FastMatcher(new java.io.File(((org.grobid.core.utilities.GrobidProperties.getGrobidHomePath()) + \"/lexicon/places/location.txt\")))"},"status":0},{"failures":[],"tindex":"01c6b020-a525-11e6-8f03-81e10b83edf9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:2511","type":"CtIfImpl","sourcecode":"if ((st.countTokens()) > 0) {\n    while (st.hasMoreTokens()) {\n        java.lang.String java.lang.String = st.nextToken();\n        if (editor != null)\n            editor = editor.trim();\n        \n        bs.addEditor(editor);\n    }\n} "},"status":0},{"failures":[],"tindex":"01c6b021-a525-11e6-8f03-7dd0d6cdc048","series":0,"name":"replace","transplant":{"position":"org.grobid.core.engines.patent.PatentRefParser:344","type":"CtAssignmentImpl","sourcecode":"notPieces = false"},"variableMap":{"notPieces":"stop"},"type":"adrStmt","transplantationPoint":{"position":"org.grobid.core.data.BiblioItem:1351","type":"CtAssignmentImpl","sourcecode":"stop = false"},"status":-2}],"header":{"groupId":"org.grobid","transformationCount":9,"projectType":"maven","artifactId":"grobid-parent","generatorVersion":"1.0","version":"0.4.2-SNAPSHOT"}}
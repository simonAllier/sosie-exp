{"testDiff":[],"transformation":{"failures":[],"tindex":31,"variableMapping":{"str":"saltString","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"prefix"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.java.util.regex.Pattern.compile(((\"^\" + (java.lang.String.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(java.lang.String);\n    if ((java.util.regex.Matcher == null) || (!(java.util.regex.Matcher.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n    } \n    java.lang.String = java.util.regex.Matcher.group(1);\n}"},"status":0}}
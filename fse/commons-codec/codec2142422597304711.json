{"testDiff":[],"transformation":{"failures":[],"tindex":39,"variableMapping":{"sumLength":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"rightLength","minRating":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"rightLength"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:338","type":"CtWhileImpl","sourcecode":"while (int > 0) {\n    char = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.removeNext();\n    if ((int = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.length()) > 0) {\n        char = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.getNextChar();\n    } else {\n        char = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '0';\n    } else if (((char == 'H') || (char < 'A')) || (char > 'Z')) {\n        if (char == '/') {\n            continue;\n        } \n        char = '-';\n    } else if ((char == 'B') || ((char == 'P') && (char != 'H'))) {\n        char = '1';\n    } else if (((char == 'D') || (char == 'T')) && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n        char = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '4';\n    } else if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n        char = '4';\n        org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n        int++;\n    } else if ((char == 'S') || (char == 'Z')) {\n        char = '8';\n    } else if (char == 'C') {\n        if (char == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n                char = '4';\n            } else {\n                char = '8';\n            }\n        } else {\n            if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n                char = '8';\n            } else {\n                char = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '8';\n    } else if (char == 'R') {\n        char = '7';\n    } else if (char == 'L') {\n        char = '5';\n    } else if ((char == 'M') || (char == 'N')) {\n        char = '6';\n    } else {\n        char = char;\n    }\n    if ((char != '-') && ((((char != char) && ((char != '0') || (char == '/'))) || (char < '0')) || (char > '8'))) {\n        org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer.addRight(char);\n    } \n    char = char;\n    char = char;\n}"},"status":0}}
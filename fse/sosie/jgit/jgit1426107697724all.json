[{"failures":[],"tindex":"cee515b3-c831-11e4-8f73-8defdea8eff3","variableMapping":{"org.eclipse.jgit.revwalk.RevWalk.UNINTERESTING":"pathLen"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.DepthGenerator:159","type":"CtUnaryOperatorImpl","sourcecode":"~(org.eclipse.jgit.revwalk.RevWalk.int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:365","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"cee515b4-c831-11e4-8f73-7fb80ca88292","variableMapping":{"currBuf":"raw"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:419","type":"CtAssignmentImpl","sourcecode":"byte[] = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PacketLineIn:150","type":"CtAssignmentImpl","sourcecode":"byte[] = new byte[int]"},"status":-1},{"failures":[0,1,2,4,5,6,3],"tindex":"cee515b5-c831-11e4-8f73-237e293be22f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.BaseDirCacheEditor:111","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry[] = org.eclipse.jgit.dircache.DirCacheEntry[]"},"status":-1},{"failures":[],"tindex":"cee515b6-c831-11e4-8f73-bd7fda6a018c","variableMapping":{"ref":"token","org.eclipse.jgit.lib.Constants.HEAD":"token"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ResetCommand:300","type":"CtIfImpl","sourcecode":"if ((java.lang.String) != null)\n    return java.lang.String;\nelse\n    return org.eclipse.jgit.lib.Constants.java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RebaseTodoLine:101","type":"CtReturnImpl","sourcecode":"return (\"Action[\" + (java.lang.String)) + \"]\""},"status":-2},{"failures":[],"tindex":"cee515b7-c831-11e4-8f73-71749639c9fb","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.HttpAuthMethod:113","type":"CtReturnImpl","sourcecode":"return \"Digest\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffFormatter:695","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.AbbreviatedObjectId.name()"},"status":-2},{"failures":[],"tindex":"cee515b8-c831-11e4-8f73-ebfff6b99ff8","variableMapping":{"idx":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ConfigSnapshot:112","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = -(int + 1);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.filter.OrRevFilter:187","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (org.eclipse.jgit.revwalk.filter.RevFilter[].int) ; int++)\n    org.eclipse.jgit.revwalk.filter.RevFilter[][int] = org.eclipse.jgit.revwalk.filter.RevFilter[][int].clone();"},"status":-2},{"failures":[],"tindex":"cee515b9-c831-11e4-8f73-0fb00947eeb9","variableMapping":{"contentIdFromPtr":"i","ptr":"context"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:253","type":"CtIfImpl","sourcecode":"if ((int) == (int))\n    return true;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffFormatter:1205","type":"CtReturnImpl","sourcecode":"return ((java.util.List<org.eclipse.jgit.diff.Edit>.get(int).getBeginA()) - (java.util.List<org.eclipse.jgit.diff.Edit>.get((int - 1)).getEndA())) <= (2 * (int))"},"status":-2},{"failures":[0,1,2,4,5,3,7],"tindex":"cee515ba-c831-11e4-8f73-898a897714a1","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:637","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:957","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"cee515bb-c831-11e4-8f73-237dcd05783b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CommitCommand:224","type":"CtTryImpl","sourcecode":"try {\n    if (!(java.util.List<java.lang.String>.isEmpty()))\n        org.eclipse.jgit.dircache.DirCache = org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.dircache.DirCache, org.eclipse.jgit.revwalk.RevWalk);\n    \n    org.eclipse.jgit.lib.ObjectInserter org.eclipse.jgit.lib.ObjectInserter = org.eclipse.jgit.lib.Repository.newObjectInserter();\n    try {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.dircache.DirCache.writeTree(org.eclipse.jgit.lib.ObjectInserter);\n        if (boolean)\n            org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId);\n        \n        org.eclipse.jgit.lib.CommitBuilder org.eclipse.jgit.lib.CommitBuilder = new org.eclipse.jgit.lib.CommitBuilder();\n        org.eclipse.jgit.lib.CommitBuilder.setCommitter(org.eclipse.jgit.lib.PersonIdent);\n        org.eclipse.jgit.lib.CommitBuilder.setAuthor(org.eclipse.jgit.lib.PersonIdent);\n        org.eclipse.jgit.lib.CommitBuilder.setMessage(java.lang.String);\n        org.eclipse.jgit.lib.CommitBuilder.setParentIds(java.util.List<org.eclipse.jgit.lib.ObjectId>);\n        org.eclipse.jgit.lib.CommitBuilder.setTreeId(org.eclipse.jgit.lib.ObjectId);\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectInserter.insert(org.eclipse.jgit.lib.CommitBuilder);\n        org.eclipse.jgit.lib.ObjectInserter.flush();\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n        org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.Repository.updateRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n        org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.lib.ObjectId);\n        if ((java.lang.String) != null) {\n            org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String, false);\n        } else {\n            java.lang.String java.lang.String = boolean ? \"commit (amend): \" : (java.util.List<org.eclipse.jgit.lib.ObjectId>.size()) == 0 ? \"commit (initial): \" : \"commit: \";\n            org.eclipse.jgit.lib.RefUpdate.setRefLogMessage((java.lang.String + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage())), false);\n        }\n        if (org.eclipse.jgit.lib.ObjectId != null)\n            org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId);\n        else\n            org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.zeroId());\n        \n        org.eclipse.jgit.lib.RefUpdate.Result org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.forceUpdate();\n        switch (org.eclipse.jgit.lib.RefUpdate.Result) {\n            case NEW :\n            case FORCED :\n            case FAST_FORWARD :\n                {\n                    org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.revwalk.RevCommit>.setCallable(false);\n                    if ((org.eclipse.jgit.lib.RepositoryState == (org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) || org.eclipse.jgit.api.CommitCommand.(isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState))) {\n                        org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(null);\n                        org.eclipse.jgit.lib.Repository.writeMergeHeads(null);\n                    } else if (org.eclipse.jgit.lib.RepositoryState == (org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) {\n                        org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(null);\n                        org.eclipse.jgit.lib.Repository.writeCherryPickHead(null);\n                    } else if (org.eclipse.jgit.lib.RepositoryState == (org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) {\n                        org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(null);\n                        org.eclipse.jgit.lib.Repository.writeRevertHead(null);\n                    } \n                    return org.eclipse.jgit.revwalk.RevCommit;\n                }\n            case REJECTED :\n            case LOCK_FAILURE :\n                throw new org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , org.eclipse.jgit.lib.RefUpdate.getRef() , org.eclipse.jgit.lib.RefUpdate.Result);\n            default :\n                throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.Constants.java.lang.String, org.eclipse.jgit.lib.ObjectId.toString(), org.eclipse.jgit.lib.RefUpdate.Result));\n        }\n    } finally {\n        org.eclipse.jgit.lib.ObjectInserter.release();\n    }\n} finally {\n    org.eclipse.jgit.dircache.DirCache.unlock();\n}"},"status":-2},{"failures":[],"tindex":"cee515bc-c831-11e4-8f73-e5c563426414","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:321","type":"CtLocalVariableImpl","sourcecode":"int int = 8192"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:305","type":"CtLocalVariableImpl","sourcecode":"final int int = int + int"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutAutoCrlfTrue":6,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingFilesWithTreeInIndex":7}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

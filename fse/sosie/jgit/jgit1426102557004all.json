[{"failures":[0,1,2,3,4,5],"tindex":"d80e7abf-c825-11e4-8390-ef8db7e37424","variableMapping":{"db":"db"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.resolver.FileResolver:100","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.Repository != null) {\n    org.eclipse.jgit.lib.Repository.incrementOpen();\n    return org.eclipse.jgit.lib.Repository;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.resolver.FileResolver:105","type":"CtForEachImpl","sourcecode":"for (java.io.File java.io.File : java.util.Collection<java.io.File>) {\n    java.io.File java.io.File = org.eclipse.jgit.lib.RepositoryCache.FileKey.org.eclipse.jgit.lib.RepositoryCache.FileKey.resolve(new java.io.File(java.io.File , java.lang.String), org.eclipse.jgit.util.FS.org.eclipse.jgit.util.FS);\n    if (java.io.File == null)\n        continue;\n    \n    try {\n        org.eclipse.jgit.lib.RepositoryCache.FileKey org.eclipse.jgit.lib.RepositoryCache.FileKey = org.eclipse.jgit.lib.RepositoryCache.FileKey.org.eclipse.jgit.lib.RepositoryCache.FileKey.exact(java.io.File, org.eclipse.jgit.util.FS.org.eclipse.jgit.util.FS);\n        org.eclipse.jgit.lib.Repository = org.eclipse.jgit.lib.RepositoryCache.org.eclipse.jgit.lib.RepositoryCache.open(org.eclipse.jgit.lib.RepositoryCache.FileKey, true);\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.eclipse.jgit.errors.RepositoryNotFoundException(java.lang.String , java.io.IOException);\n    }\n    try {\n        if (org.eclipse.jgit.transport.resolver.FileResolver<C>.isExportOk(C, java.lang.String, org.eclipse.jgit.lib.Repository)) {\n            return org.eclipse.jgit.lib.Repository;\n        } else\n            throw new org.eclipse.jgit.transport.resolver.ServiceNotEnabledException();\n        \n    } catch (java.lang.RuntimeException java.lang.RuntimeException) {\n        org.eclipse.jgit.lib.Repository.close();\n        throw new org.eclipse.jgit.errors.RepositoryNotFoundException(java.lang.String , java.lang.RuntimeException);\n    } catch (java.io.IOException java.io.IOException) {\n        org.eclipse.jgit.lib.Repository.close();\n        throw new org.eclipse.jgit.errors.RepositoryNotFoundException(java.lang.String , java.io.IOException);\n    } catch (org.eclipse.jgit.transport.resolver.ServiceNotEnabledException org.eclipse.jgit.transport.resolver.ServiceNotEnabledException) {\n        org.eclipse.jgit.lib.Repository.close();\n        throw org.eclipse.jgit.transport.resolver.ServiceNotEnabledException;\n    }\n}"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"d8109da0-c825-11e4-8390-557f7a01df76","variableMapping":{"n64":"lastModified"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexV1:116","type":"CtUnaryOperatorImpl","sourcecode":"long++"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.NetRC:204","type":"CtAssignmentImpl","sourcecode":"this.long = this.java.io.File.lastModified()"},"status":-1},{"failures":[],"tindex":"d81160f1-c825-11e4-8390-0f68721bca10","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.FS:754","type":"CtLocalVariableImpl","sourcecode":"final java.io.File java.io.File"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:765","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String, \".pack\")"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"d813aae2-c825-11e4-8390-898e181049d0","variableMapping":{"messages":"out","msgOut":"out"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:612","type":"CtIfImpl","sourcecode":"if (java.io.OutputStream != null)\n    java.io.OutputStream = java.io.OutputStream;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter:165","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.WriteConfig.getFSyncObjectFiles())\n    java.io.OutputStream = java.nio.channels.Channels.java.nio.channels.Channels.newOutputStream(java.io.FileOutputStream.getChannel());\n"},"status":-1},{"failures":[],"tindex":"d813aae3-c825-11e4-8390-316696852846","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.PullCommand:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.String java.lang.String = org.eclipse.jgit.lib.Repository.getFullBranch();\n    if (java.lang.String == null)\n        throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    if (!(java.lang.String.startsWith(org.eclipse.jgit.lib.Constants.java.lang.String))) {\n        throw new org.eclipse.jgit.api.errors.DetachedHeadException();\n    } \n    java.lang.String = java.lang.String.substring(org.eclipse.jgit.lib.Constants.java.lang.String.length());\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.io.IOException);\n}"},"status":-2},{"failures":[],"tindex":"d813aae4-c825-11e4-8390-b575d523654f","variableMapping":{"count":"c","pattern":"unexpectedEndOfConfigFile"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.internal.Strings:107","type":"CtIfImpl","sourcecode":"if (int < 1)\n    throw new java.lang.IllegalStateException((\"Pattern must have at least two segments: \" + java.lang.String));\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:1126","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new org.eclipse.jgit.errors.ConfigInvalidException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"status":-2},{"failures":[],"tindex":"d814e365-c825-11e4-8390-8f7fbc83a74c","variableMapping":{"copySize":"org.eclipse.jgit.treewalk.NameConflictTreeWalk.TREE_MODE"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.BinaryDelta:193","type":"CtIfImpl","sourcecode":"if (int == 0)\n    int = 65536;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.NameConflictTreeWalk:253","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    final int int = org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(org.eclipse.jgit.treewalk.AbstractTreeIterator, org.eclipse.jgit.treewalk.NameConflictTreeWalk.int);\n    if (int < 0) {\n        (org.eclipse.jgit.treewalk.AbstractTreeIterator.int)++;\n        org.eclipse.jgit.treewalk.AbstractTreeIterator.next(1);\n        if (org.eclipse.jgit.treewalk.AbstractTreeIterator.eof()) {\n            org.eclipse.jgit.treewalk.AbstractTreeIterator.back(org.eclipse.jgit.treewalk.AbstractTreeIterator.int);\n            org.eclipse.jgit.treewalk.AbstractTreeIterator.int = 0;\n            break;\n        } \n    } else if (int == 0) {\n        org.eclipse.jgit.treewalk.AbstractTreeIterator.org.eclipse.jgit.treewalk.AbstractTreeIterator = org.eclipse.jgit.treewalk.AbstractTreeIterator;\n        org.eclipse.jgit.treewalk.AbstractTreeIterator = org.eclipse.jgit.treewalk.AbstractTreeIterator;\n        break;\n    } else {\n        if ((org.eclipse.jgit.treewalk.AbstractTreeIterator.int) != 0) {\n            org.eclipse.jgit.treewalk.AbstractTreeIterator.back(org.eclipse.jgit.treewalk.AbstractTreeIterator.int);\n            org.eclipse.jgit.treewalk.AbstractTreeIterator.int = 0;\n        } \n        break;\n    }\n}"},"status":-2},{"failures":[],"tindex":"d8150a76-c825-11e4-8390-f909ddc73b8d","variableMapping":{"beginB":"beginA","endB":"beginA","org.eclipse.jgit.diff.Edit.Type.DELETE":"org.eclipse.jgit.diff.Edit.Type.EMPTY","org.eclipse.jgit.diff.Edit.Type.REPLACE":"org.eclipse.jgit.diff.Edit.Type.INSERT"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.Edit:124","type":"CtIfImpl","sourcecode":"if ((int) < (int))\n    return org.eclipse.jgit.diff.Edit.Type.org.eclipse.jgit.diff.Edit.Type;\nelse\n    return org.eclipse.jgit.diff.Edit.Type.org.eclipse.jgit.diff.Edit.Type;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.Edit:123","type":"CtIfImpl","sourcecode":"if ((int) < (int)) {\n    if ((int) < (int))\n        return org.eclipse.jgit.diff.Edit.Type.org.eclipse.jgit.diff.Edit.Type;\n    else\n        return org.eclipse.jgit.diff.Edit.Type.org.eclipse.jgit.diff.Edit.Type;\n    \n} else {\n    if ((int) < (int))\n        return org.eclipse.jgit.diff.Edit.Type.org.eclipse.jgit.diff.Edit.Type;\n    else\n        return org.eclipse.jgit.diff.Edit.Type.org.eclipse.jgit.diff.Edit.Type;\n    \n}"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"d81865d7-c825-11e4-8390-9d3baa069a3c","variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportSftp:179","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.TransportSftp.SftpObjectDB.close()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkRemoteObjectDatabase:426","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>, java.io.BufferedReader)"},"status":-1},{"failures":[],"tindex":"d818b3f8-c825-11e4-8390-b1959ac91f9e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:776","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.PackFile != null) {\n    java.util.List<org.eclipse.jgit.internal.storage.file.PackFile>.add(org.eclipse.jgit.internal.storage.file.PackFile);\n    continue;\n} "},"status":-2},{"failureDictionary":{"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

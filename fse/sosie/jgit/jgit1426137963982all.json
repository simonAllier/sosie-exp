[{"failures":[0,1,2,3,4,5],"tindex":"48602a80-c878-11e4-97d4-c74e2e4c1c26","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CheckoutCommand:308","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.api.CheckoutResult = new org.eclipse.jgit.api.CheckoutResult(org.eclipse.jgit.api.CheckoutResult.Status.org.eclipse.jgit.api.CheckoutResult.Status , org.eclipse.jgit.dircache.DirCacheCheckout.getToBeDeleted())"},"status":-1},{"failures":[0,1,2,5,4,3],"tindex":"486078a1-c878-11e4-97d4-198877a76273","variableMapping":{"adv":"adv"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:809","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.RefAdvertiser.setDerefTags(true)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:782","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.transport.AdvertiseRefsHook.advertiseRefs(this);\n} catch (org.eclipse.jgit.transport.ServiceMayNotContinueException org.eclipse.jgit.transport.ServiceMayNotContinueException) {\n    if ((org.eclipse.jgit.transport.ServiceMayNotContinueException.getMessage()) != null) {\n        org.eclipse.jgit.transport.RefAdvertiser.writeOne((\"ERR \" + (org.eclipse.jgit.transport.ServiceMayNotContinueException.getMessage())));\n        org.eclipse.jgit.transport.ServiceMayNotContinueException.setOutput();\n    } \n    throw org.eclipse.jgit.transport.ServiceMayNotContinueException;\n}"},"status":-1},{"failures":[],"tindex":"4861d832-c878-11e4-97d4-d7c40ddf1b81","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:224","type":"CtInvocationImpl","sourcecode":"java.io.FileOutputStream.write(byte[], 0, int)"},"status":-2},{"failures":[],"tindex":"4861d833-c878-11e4-97d4-8b3698b96b28","variableMapping":{"prefix":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:336","type":"CtIfImpl","sourcecode":"if (((java.lang.String.length()) > 0) && (!(java.lang.String.endsWith(\"/\"))))\n    java.lang.String += \"/\";\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.InterruptTimer:204","type":"CtInvocationImpl","sourcecode":"java.lang.Object.notifyAll()"},"status":-2},{"failures":[6,7],"tindex":"4861d834-c878-11e4-97d4-2d3000b30faa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheIterator:175","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.dircache.DirCacheTree) != null)\n    return 0;\n"},"status":-1},{"failures":[],"tindex":"4861d835-c878-11e4-97d4-1b357585d5dd","variableMapping":{"otp":"objectId"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1318","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.pack.ObjectToPack.isDeltaRepresentation())\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.LogCommand:264","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ObjectId == null)\n    org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getObjectId();\n"},"status":-2},{"failures":[4,3,8,0,1,2,9,10,11,12,13,5,14],"tindex":"486310b6-c878-11e4-97d4-cdf55b5125a2","variableMapping":{"idHashBits":"n"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.SimilarityIndex:345","type":"CtReturnImpl","sourcecode":"return ((1 << int) * (int - 3)) / int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackOutputStream:224","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[],"tindex":"486310b7-c878-11e4-97d4-cf40cce88987","variableMapping":{"squashMessage":"org.eclipse.jgit.lib.Constants.R_REFS","repo":"db"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.MergeCommand:304","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.writeSquashCommitMsg(java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.Transport:621","type":"CtForEachImpl","sourcecode":"for (final org.eclipse.jgit.transport.RefSpec org.eclipse.jgit.transport.RefSpec : java.util.Collection<org.eclipse.jgit.transport.RefSpec>) {\n    java.lang.String java.lang.String = org.eclipse.jgit.transport.RefSpec.getSource();\n    final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(java.lang.String);\n    if (org.eclipse.jgit.lib.Ref != null)\n        java.lang.String = org.eclipse.jgit.lib.Ref.getName();\n    \n    java.lang.String java.lang.String = org.eclipse.jgit.transport.RefSpec.getDestination();\n    if (java.lang.String == null) {\n        java.lang.String = java.lang.String;\n    } \n    if ((org.eclipse.jgit.lib.Ref != null) && (!(java.lang.String.startsWith(org.eclipse.jgit.lib.Constants.java.lang.String)))) {\n        final java.lang.String java.lang.String = org.eclipse.jgit.lib.Ref.getName();\n        final int int = java.lang.String.indexOf('/', org.eclipse.jgit.lib.Constants.java.lang.String.length());\n        java.lang.String = (java.lang.String.substring(0, (int + 1))) + java.lang.String;\n    } \n    final boolean boolean = org.eclipse.jgit.transport.RefSpec.isForceUpdate();\n    final java.lang.String java.lang.String = org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.Transport.findTrackingRefName(java.lang.String, java.util.Collection<org.eclipse.jgit.transport.RefSpec>);\n    final org.eclipse.jgit.transport.RemoteRefUpdate org.eclipse.jgit.transport.RemoteRefUpdate = new org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository , java.lang.String , java.lang.String , boolean , java.lang.String , null);\n    java.util.List<org.eclipse.jgit.transport.RemoteRefUpdate>.add(org.eclipse.jgit.transport.RemoteRefUpdate);\n}"},"status":-2},{"failures":[],"tindex":"48635ed8-c878-11e4-97d4-cb193b980c9a","variableMapping":{"raw":"org.eclipse.jgit.patch.FileHeader.RENAME_NEW","ptr":"length"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:172","type":"CtIfImpl","sourcecode":"if ((byte[][int]) != 'p')\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:416","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode;\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseIndexLine((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else {\n    break;\n}"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"48635ed9-c878-11e4-97d4-4be14df8425d","variableMapping":{"cannotBeRacilyClean":"enterSubtree"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.FileSnapshot:184","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:579","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":7,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":9,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":14,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":6,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":13,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":12,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":3,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":8,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":11,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":10,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

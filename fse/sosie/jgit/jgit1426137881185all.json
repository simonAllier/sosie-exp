[{"failures":[0,1,2,3,4,5],"tindex":"15a0fc64-c878-11e4-a32b-572edbe857c7","variableMapping":{"conn":"conn"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.TransportHttp:925","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.http.HttpConnection.setChunkedStreamingMode(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportHttp:546","type":"CtIfImpl","sourcecode":"if ((!(org.eclipse.jgit.transport.TransportHttp.HttpConfig.boolean)) && (\"https\".equals(java.net.URL.getProtocol()))) {\n    org.eclipse.jgit.transport.TransportHttp.disableSslVerify(org.eclipse.jgit.transport.http.HttpConnection);\n} "},"status":-1},{"failures":[0,5,2,3,4,1],"tindex":"15a0fc65-c878-11e4-a32b-755e73c712d3","variableMapping":{"this":"transport"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.Transport:890","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.Transport.setObjectChecker(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.FetchCommand:133","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.Transport.close()"},"status":-1},{"failures":[],"tindex":"15a0fc66-c878-11e4-a32b-e37464a086d4","variableMapping":{"pack":"p"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCursor:248","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.PackFile.setInvalid()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:811","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.PackFile.invalid()) {\n    org.eclipse.jgit.internal.storage.file.PackFile.close();\n    continue;\n} "},"status":-2},{"failures":[],"tindex":"15a0fc67-c878-11e4-a32b-0331d2cf05fb","variableMapping":{"hostname":"name"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.SystemReader:122","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"localhost\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:209","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - (\".pack\".length())))"},"status":-2},{"failures":[],"tindex":"15a0fc68-c878-11e4-a32b-598576a487b3","variableMapping":{"org.eclipse.jgit.diff.HistogramDiffIndex.MAX_CNT":"length","newCnt":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.HistogramDiffIndex:200","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.diff.HistogramDiffIndex.int) < int)\n    int = org.eclipse.jgit.diff.HistogramDiffIndex.int;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:535","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.dfs.DfsBlock = org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(this, long, long);\n    if (boolean && (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader).hasCRC32Support())) {\n        long = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader).findCRC32(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack);\n        if (org.eclipse.jgit.internal.storage.dfs.DfsBlock != null) {\n            org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32, long, ((int)(long)));\n        } else {\n            long long = long;\n            long long = long;\n            while (long > 0) {\n                final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n                org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                java.util.zip.CRC32.update(byte[], 0, int);\n                long += int;\n                long -= int;\n            }\n        }\n        if ((java.util.zip.CRC32.getValue()) != long) {\n            org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setCorrupt(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long);\n            throw new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long), org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getPackName()));\n        } \n    } else if (boolean) {\n        java.util.zip.Inflater java.util.zip.Inflater = org.eclipse.jgit.internal.storage.dfs.DfsReader.inflater();\n        byte[] byte[] = new byte[1024];\n        if (org.eclipse.jgit.internal.storage.dfs.DfsBlock != null) {\n            org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater, byte[], long, ((int)(long)));\n        } else {\n            long long = long;\n            long long = long;\n            while (long > 0) {\n                final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n                org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                java.util.zip.CRC32.update(byte[], 0, int);\n                java.util.zip.Inflater.setInput(byte[], 0, int);\n                while ((java.util.zip.Inflater.inflate(byte[], 0, byte[].int)) > 0)\n                    continue;\n                long += int;\n                long -= int;\n            }\n        }\n        if ((!(java.util.zip.Inflater.finished())) || ((java.util.zip.Inflater.getBytesRead()) != long)) {\n            org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setCorrupt(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long);\n            throw new java.io.EOFException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long)));\n        } \n        long = java.util.zip.CRC32.getValue();\n    } else {\n        long = -1;\n    }\n} catch (java.util.zip.DataFormatException java.util.zip.DataFormatException) {\n    org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setCorrupt(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long);\n    org.eclipse.jgit.errors.CorruptObjectException org.eclipse.jgit.errors.CorruptObjectException = new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long), org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getPackName()));\n    org.eclipse.jgit.errors.CorruptObjectException.initCause(java.util.zip.DataFormatException);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException = new org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException.initCause(org.eclipse.jgit.errors.CorruptObjectException);\n    throw org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n} catch (java.io.IOException java.io.IOException) {\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException = new org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException.initCause(java.io.IOException);\n    throw org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n}"},"status":-2},{"failures":[],"tindex":"15a0fc69-c878-11e4-a32b-7b4deea97d8d","variableMapping":{"nameUTF8":"result","n":"result"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.TreeEntry:152","type":"CtAssignmentImpl","sourcecode":"byte[] = byte[]"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:221","type":"CtAssignmentImpl","sourcecode":"byte[] = org.eclipse.jgit.lib.ObjectReader.open(org.eclipse.jgit.lib.ObjectId).getBytes(java.lang.Integer.int)"},"status":-2},{"failures":[],"tindex":"15a0fc6a-c878-11e4-a32b-01b2036be282","variableMapping":{"this":"diffFmt"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.DiffFormatter:388","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.diff.DiffFormatter.close()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.DiffCommand:162","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.diff.DiffFormatter.release()"},"status":-2},{"failures":[],"tindex":"15a0fc6b-c878-11e4-a32b-0fa3a483969c","variableMapping":{"org.eclipse.jgit.transport.PacketLineIn.AckNackResult.ACK_READY":"org.eclipse.jgit.transport.PacketLineIn.AckNackResult.ACK_READY","org.eclipse.jgit.transport.PacketLineIn.AckNackResult.ACK_COMMON":"org.eclipse.jgit.transport.PacketLineIn.AckNackResult.ACK_CONTINUE","arg":"arg"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.PacketLineIn:115","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\" common\"))\n    return org.eclipse.jgit.transport.PacketLineIn.AckNackResult.org.eclipse.jgit.transport.PacketLineIn.AckNackResult;\nelse if (java.lang.String.equals(\" ready\"))\n    return org.eclipse.jgit.transport.PacketLineIn.AckNackResult.org.eclipse.jgit.transport.PacketLineIn.AckNackResult;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PacketLineIn:113","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\" continue\"))\n    return org.eclipse.jgit.transport.PacketLineIn.AckNackResult.org.eclipse.jgit.transport.PacketLineIn.AckNackResult;\nelse if (java.lang.String.equals(\" common\"))\n    return org.eclipse.jgit.transport.PacketLineIn.AckNackResult.org.eclipse.jgit.transport.PacketLineIn.AckNackResult;\nelse if (java.lang.String.equals(\" ready\"))\n    return org.eclipse.jgit.transport.PacketLineIn.AckNackResult.org.eclipse.jgit.transport.PacketLineIn.AckNackResult;\n"},"status":-2},{"failures":[],"tindex":"15a0fc6c-c878-11e4-a32b-df94015f0b7f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:708","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.WalkFetchConnection.pushLocalCommit(((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject)))"},"status":-2},{"failures":[],"tindex":"15a0fc6d-c878-11e4-a32b-fdd92fc4b96e","variableMapping":{"s":"position","currPtr":"position"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:481","type":"CtLocalVariableImpl","sourcecode":"int int = (int) - int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.InflatingBitSet:97","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.internal.storage.file.InflatingBitSet.org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(int)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

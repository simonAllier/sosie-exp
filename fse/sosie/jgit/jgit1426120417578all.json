[{"failures":[0,1,2,3,4,5],"tindex":"6c9baa40-c84f-11e4-8ff7-dd5b58f8a0e8","variableMapping":{"removed":"conflicts","conflicts":"conflicts"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:299","type":"CtInvocationImpl","sourcecode":"java.util.ArrayList<java.lang.String>.removeAll(java.util.ArrayList<java.lang.String>)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:322","type":"CtInvocationImpl","sourcecode":"java.util.ArrayList<java.lang.String>.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString())"},"status":-1},{"failures":[6,7,8,9,10,11,0,12,13,14,15,16,17,18,19,19,20,20,21,21,22,23,1,2,3,5,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,4,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"6c9baa41-c84f-11e4-8ff7-59b498ab5fa8","variableMapping":{"clone":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.SubmoduleAddCommand:179","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Repository = org.eclipse.jgit.api.CloneCommand.call().getRepository()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CloneCommand:132","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Repository = org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)"},"status":-1},{"failures":[58,59,60,61,1,2,3,62,63,64,5,65,66,67,68,69,70,71,72,0,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,4],"tindex":"6c9bd152-c84f-11e4-8ff7-0de6119c2424","variableMapping":{"update":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.DeleteBranchCommand:141","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(\"branch deleted\", false)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefUpdate:375","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.disableRefLog()"},"status":-1},{"failures":[],"tindex":"6c9bd153-c84f-11e4-8ff7-c78a29721eae","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.TemporaryBuffer:265","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.util.TemporaryBuffer.BlockInputStream()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:394","type":"CtReturnImpl","sourcecode":"return java.io.InputStream"},"status":-2},{"failures":[1,2,3,0,5,4],"tindex":"6c9bd154-c84f-11e4-8ff7-a7d346b9c817","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportBundleFile:88","type":"CtInvocationImpl","sourcecode":".getSchemes()"},"status":-1},{"failures":[1,2,3,0,4,5],"tindex":"6c9bd155-c84f-11e4-8ff7-7d1e69bc5bff","variableMapping":{"next":"outRegion","r":"outRegion","outRegion":"outRegion"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:474","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.blame.Region = org.eclipse.jgit.blame.Region.org.eclipse.jgit.blame.Region"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.BlameGenerator:958","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.blame.Region = null"},"status":-1},{"failures":[],"tindex":"6c9bd156-c84f-11e4-8ff7-0d0d20d6d461","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:744","type":"CtLocalVariableImpl","sourcecode":"final java.nio.charset.CharsetEncoder java.nio.charset.CharsetEncoder = org.eclipse.jgit.treewalk.WorkingTreeIterator.IteratorState.java.nio.charset.CharsetEncoder"},"status":-2},{"failures":[],"tindex":"6c9bd157-c84f-11e4-8ff7-2fa079aeca77","variableMapping":{"prefix":"cannotReadCommit","name":"cannotReadCommit"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.RefMap:278","type":"CtIfImpl","sourcecode":"if (0 < (java.lang.String.length()))\n    java.lang.String = (java.lang.String) + java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:221","type":"CtTryImpl","sourcecode":"try {\n    final org.eclipse.jgit.revwalk.RevFlag org.eclipse.jgit.revwalk.RevFlag = org.eclipse.jgit.revwalk.RevWalk.newFlag(\"PREREQ\");\n    final org.eclipse.jgit.revwalk.RevFlag org.eclipse.jgit.revwalk.RevFlag = org.eclipse.jgit.revwalk.RevWalk.newFlag(\"SEEN\");\n    final java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String> java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String> = new java.util.HashMap<org.eclipse.jgit.lib.ObjectId, java.lang.String>();\n    final java.util.List<org.eclipse.jgit.revwalk.RevObject> java.util.List<org.eclipse.jgit.revwalk.RevObject> = new java.util.ArrayList<org.eclipse.jgit.revwalk.RevObject>();\n    for (final java.util.Map.Entry<org.eclipse.jgit.lib.ObjectId, java.lang.String> java.util.Map.Entry<org.eclipse.jgit.lib.ObjectId, java.lang.String> : java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.entrySet()) {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = java.util.Map.Entry<org.eclipse.jgit.lib.ObjectId, java.lang.String>.getKey();\n        try {\n            final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n            if (!(org.eclipse.jgit.revwalk.RevCommit.has(org.eclipse.jgit.revwalk.RevFlag))) {\n                org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag);\n                java.util.List<org.eclipse.jgit.revwalk.RevObject>.add(org.eclipse.jgit.revwalk.RevCommit);\n            } \n        } catch (org.eclipse.jgit.errors.MissingObjectException org.eclipse.jgit.errors.MissingObjectException) {\n            java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.put(org.eclipse.jgit.lib.ObjectId, java.util.Map.Entry<org.eclipse.jgit.lib.ObjectId, java.lang.String>.getValue());\n        } catch (java.io.IOException java.io.IOException) {\n            throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.ObjectId.name()) , java.io.IOException);\n        }\n    }\n    if (!(java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.isEmpty()))\n        throw new org.eclipse.jgit.errors.MissingBundlePrerequisiteException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>);\n    \n    java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>;\n    try {\n        java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.transport.Transport.org.eclipse.jgit.lib.Repository.getRefDatabase().getRefs(org.eclipse.jgit.lib.RefDatabase.java.lang.String);\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.io.IOException.getMessage() , java.io.IOException);\n    }\n    for (final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref : java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>.values()) {\n        try {\n            org.eclipse.jgit.revwalk.RevWalk.markStart(org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Ref.getObjectId()));\n        } catch (java.io.IOException java.io.IOException) {\n        }\n    }\n    int int = java.util.List<org.eclipse.jgit.revwalk.RevObject>.size();\n    try {\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit;\n        while ((org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.next()) != null) {\n            if (org.eclipse.jgit.revwalk.RevCommit.has(org.eclipse.jgit.revwalk.RevFlag)) {\n                org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag);\n                if ((--int) == 0)\n                    break;\n                \n            } \n        }\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.io.IOException);\n    }\n    if (int > 0) {\n        for (final org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject : java.util.List<org.eclipse.jgit.revwalk.RevObject>) {\n            if (!(org.eclipse.jgit.revwalk.RevObject.has(org.eclipse.jgit.revwalk.RevFlag)))\n                java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.put(org.eclipse.jgit.revwalk.RevObject, java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.get(org.eclipse.jgit.revwalk.RevObject));\n            \n        }\n        throw new org.eclipse.jgit.errors.MissingBundlePrerequisiteException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>);\n    } \n} finally {\n    org.eclipse.jgit.revwalk.RevWalk.release();\n}"},"status":-2},{"failures":[93,94,95,1,2,3,96,97,5,98,99,0,4],"tindex":"6c9bd158-c84f-11e4-8ff7-838b4ad67f29","variableMapping":{"ref":"ref"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:612","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.Ref.isSymbolic())\n    org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Ref.getLeaf();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.MergeCommand:339","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.merge.ResolveMerger.setCommitNames(new java.lang.String[]{ \"BASE\" , \"HEAD\" , org.eclipse.jgit.lib.Ref.getName() })"},"status":-1},{"failures":[1,2,3,100,0,5,4],"tindex":"6c9bd159-c84f-11e4-8ff7-69f987e41afb","variableMapping":{"dirIdx":"size","bits":"index"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectIdOwnerMap:243","type":"CtIfImpl","sourcecode":"if ((++(int)) >= (1 << (int)))\n    throw new java.util.NoSuchElementException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.BlockList:235","type":"CtForImpl","sourcecode":"for (int int = (int) - 2 ; int <= int ; int--)\n    org.eclipse.jgit.util.BlockList<T>.set((int + 1), org.eclipse.jgit.util.BlockList<T>.get(int));"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":47,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":44,"org.eclipse.jgit.api.MergeCommandTest.testFastForwardNoCommit":65,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":92,"org.eclipse.jgit.api.StashDropCommandTest.dropMiddleStashCommit":76,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":85,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":30,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":97,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchHasPreviousLog":79,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":28,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":95,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":38,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":40,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":26,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":15,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":37,"org.eclipse.jgit.api.CommitCommandTest.commitAfterSquashMerge":69,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":9,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":54,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":12,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":34,"org.eclipse.jgit.util.BlockListTest.testAddSlowPath":100,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":35,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":52,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":36,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":93,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":25,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameCurrentBranch":80,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":23,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":42,"org.eclipse.jgit.api.MergeCommandTest.testMergeInItself":66,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":22,"org.eclipse.jgit.api.ResetCommandTest.testSoftReset":70,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithNewFile":91,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":10,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":18,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":98,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchAlsoInPack":82,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":16,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":14,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategies":68,"org.eclipse.jgit.api.ResetCommandTest.testHardReset":72,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":33,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.api.ReflogCommandTest.testAmendReflog":58,"org.eclipse.jgit.api.StashCreateCommandTest.refLogIncludesCommitMessage":75,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":49,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":55,"org.eclipse.jgit.api.GitConstructionTest.testWrap":21,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":46,"org.eclipse.jgit.api.ReflogCommandTest.testHeadReflog":60,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":29,"org.eclipse.jgit.api.GitConstructionTest.testOpen":20,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":43,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":39,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":8,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":56,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.api.MergeCommandTest.testFastForwardWithFiles":67,"org.eclipse.jgit.api.ReflogCommandTest.testBranchReflog":59,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.api.CommitAndLogCommandTest.testSomeCommits":74,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":99,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":13,"org.eclipse.jgit.api.ResetCommandTest.testMixedReset":71,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":11,"org.eclipse.jgit.api.StashDropCommandTest.dropBoundaryStashedCommits":78,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission2avoided":81,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":50,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":51,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":41,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":48,"org.eclipse.jgit.api.GitConstructionTest.testClose":19,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":88,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":90,"org.eclipse.jgit.lib.ReflogResolveTest.resolvePreviousBranch":61,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":53,"org.eclipse.jgit.api.MergeCommandTest.testAlreadyUpToDate":64,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreationsSameContent":63,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":27,"org.eclipse.jgit.api.CommitAndLogCommandTest.testCommitAmend":73,"org.eclipse.jgit.api.StashDropCommandTest.dropFirstStashedCommit":77,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":31,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":96,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultiple":86,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":6,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":24,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":45,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission1avoided":84,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":17,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":32,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":94,"org.eclipse.jgit.api.MergeCommandTest.testFastForward":62,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchNoPreviousLog":83,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithMultipleCommits":89,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":57,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":7,"org.eclipse.jgit.api.RevertCommandTest.testRevert":87}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

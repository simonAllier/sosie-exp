[{"failures":[],"tindex":"9841fb9e-c84f-11e4-abd9-1d2243a3dec5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.PendingGenerator:129","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.DateRevQueue.next()"},"status":-2},{"failures":[],"tindex":"9841fb9f-c84f-11e4-abd9-5be08ff1ac1d","variableMapping":{"name":"org.eclipse.jgit.lib.Constants.MODULES"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:206","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"pack-\"))\n    java.lang.String = java.lang.String.substring(\"pack-\".length());\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.SubmoduleUpdateCommand:151","type":"CtWhileImpl","sourcecode":"while (org.eclipse.jgit.submodule.SubmoduleWalk.next()) {\n    if ((org.eclipse.jgit.submodule.SubmoduleWalk.getModulesPath()) == null)\n        continue;\n    \n    java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getConfigUrl();\n    if (java.lang.String == null)\n        continue;\n    \n    org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Repository = org.eclipse.jgit.submodule.SubmoduleWalk.getRepository();\n    if (org.eclipse.jgit.lib.Repository == null) {\n        org.eclipse.jgit.api.CloneCommand org.eclipse.jgit.api.CloneCommand = org.eclipse.jgit.api.Git.org.eclipse.jgit.api.Git.cloneRepository();\n        org.eclipse.jgit.api.TransportCommand<org.eclipse.jgit.api.SubmoduleUpdateCommand, java.util.Collection<java.lang.String>>.configure(org.eclipse.jgit.api.CloneCommand);\n        org.eclipse.jgit.api.CloneCommand.setURI(java.lang.String);\n        org.eclipse.jgit.api.CloneCommand.setDirectory(org.eclipse.jgit.submodule.SubmoduleWalk.getDirectory());\n        org.eclipse.jgit.api.CloneCommand.setGitDir(new java.io.File(new java.io.File(org.eclipse.jgit.lib.Repository.getDirectory() , org.eclipse.jgit.lib.Constants.java.lang.String) , org.eclipse.jgit.submodule.SubmoduleWalk.getPath()));\n        if ((org.eclipse.jgit.lib.ProgressMonitor) != null)\n            org.eclipse.jgit.api.CloneCommand.setProgressMonitor(org.eclipse.jgit.lib.ProgressMonitor);\n        \n        org.eclipse.jgit.lib.Repository = org.eclipse.jgit.api.CloneCommand.call().getRepository();\n    } \n    try {\n        org.eclipse.jgit.revwalk.RevWalk org.eclipse.jgit.revwalk.RevWalk = new org.eclipse.jgit.revwalk.RevWalk(org.eclipse.jgit.lib.Repository);\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId());\n        java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getConfigUpdate();\n        if (org.eclipse.jgit.lib.ConfigConstants.java.lang.String.equals(java.lang.String)) {\n            org.eclipse.jgit.api.MergeCommand org.eclipse.jgit.api.MergeCommand = new org.eclipse.jgit.api.MergeCommand(org.eclipse.jgit.lib.Repository);\n            org.eclipse.jgit.api.MergeCommand.include(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.api.MergeCommand.setStrategy(org.eclipse.jgit.merge.MergeStrategy);\n            org.eclipse.jgit.api.MergeCommand.call();\n        } else if (org.eclipse.jgit.lib.ConfigConstants.java.lang.String.equals(java.lang.String)) {\n            org.eclipse.jgit.api.RebaseCommand org.eclipse.jgit.api.RebaseCommand = new org.eclipse.jgit.api.RebaseCommand(org.eclipse.jgit.lib.Repository);\n            org.eclipse.jgit.api.RebaseCommand.setUpstream(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.api.RebaseCommand.setStrategy(org.eclipse.jgit.merge.MergeStrategy);\n            org.eclipse.jgit.api.RebaseCommand.call();\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.revwalk.RevCommit.getTree());\n            org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n            org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n            org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.Repository.updateRef(org.eclipse.jgit.lib.Constants.java.lang.String, true);\n            org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.lib.RefUpdate.forceUpdate();\n        }\n    } finally {\n        org.eclipse.jgit.lib.Repository.close();\n    }\n    java.util.List<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n}"},"status":-2},{"failures":[],"tindex":"9841fba0-c84f-11e4-abd9-db7667f9344c","variableMapping":{"prefix":"qName","name":"branch"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RefMap:285","type":"CtIfImpl","sourcecode":"if (0 < (java.lang.String.length()))\n    java.lang.String = java.lang.String.substring(java.lang.String.length());\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:418","type":"CtIfImpl","sourcecode":"if (\"default\".equals(java.lang.String)) {\n    java.lang.String = org.xml.sax.Attributes.getValue(\"remote\");\n    java.lang.String = org.xml.sax.Attributes.getValue(\"revision\");\n    if ((java.lang.String) == null)\n        java.lang.String = org.eclipse.jgit.gitrepo.RepoCommand.java.lang.String;\n    \n} else if (\"copyfile\".equals(java.lang.String)) {\n    if ((org.eclipse.jgit.gitrepo.RepoCommand.Project) == null)\n        throw new org.xml.sax.SAXException(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String);\n    \n    org.eclipse.jgit.gitrepo.RepoCommand.Project.addCopyFile(new org.eclipse.jgit.gitrepo.RepoCommand.CopyFile(org.eclipse.jgit.gitrepo.RepoCommand.org.eclipse.jgit.lib.Repository , org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String , org.xml.sax.Attributes.getValue(\"src\") , org.xml.sax.Attributes.getValue(\"dest\")));\n} else if (\"include\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = org.xml.sax.Attributes.getValue(\"name\");\n    java.io.InputStream java.io.InputStream = null;\n    if ((org.eclipse.jgit.gitrepo.RepoCommand.IncludedFileReader) != null) {\n        try {\n            java.io.InputStream = org.eclipse.jgit.gitrepo.RepoCommand.IncludedFileReader.readIncludeFile(java.lang.String);\n        } catch (java.lang.Exception java.lang.Exception) {\n            throw new org.xml.sax.SAXException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String, java.lang.String) , java.lang.Exception);\n        }\n    } else if ((java.lang.String) != null) {\n        int int = java.lang.String.lastIndexOf('/');\n        java.lang.String java.lang.String = (java.lang.String.substring(0, (int + 1))) + java.lang.String;\n        try {\n            java.io.InputStream = new java.io.FileInputStream(java.lang.String);\n        } catch (java.io.IOException java.io.IOException) {\n            throw new org.xml.sax.SAXException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String, java.lang.String) , java.io.IOException);\n        }\n    } \n    if (java.io.InputStream == null) {\n        throw new org.xml.sax.SAXException(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String);\n    } \n    try {\n        org.eclipse.jgit.gitrepo.RepoCommand.XmlManifest.read(java.io.InputStream);\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.xml.sax.SAXException(java.io.IOException);\n    }\n} "},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"984222b1-c84f-11e4-abd9-8b825592a2cf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.ThrowingPrintWriter:171","type":"CtInvocationImpl","sourcecode":"java.io.Writer.write(java.lang.String.java.lang.String.valueOf(java.lang.Object))"},"status":-1},{"failures":[0,2,3,4,1,5],"tindex":"984222b2-c84f-11e4-abd9-43699f408031","variableMapping":{"sz":"ptr"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner:127","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 1"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.Patch:256","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.patch.FileHeader.int = int"},"status":-1},{"failures":[],"tindex":"984222b3-c84f-11e4-abd9-35c56d2fa2a1","variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:473","type":"CtIfImpl","sourcecode":"if (!org.eclipse.jgit.treewalk.WorkingTreeIterator.(eof()))\n    org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteParser:194","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[], 0)"},"status":-2},{"failures":[],"tindex":"984222b4-c84f-11e4-abd9-19d2c7a6e89b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.Status:192","type":"CtLocalVariableImpl","sourcecode":"java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CleanCommand:162","type":"CtLocalVariableImpl","sourcecode":"java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String>(java.util.Set<java.lang.String>)"},"status":-2},{"failures":[],"tindex":"984222b5-c84f-11e4-abd9-158cc6777c16","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ConfigSnapshot:137","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = new java.lang.String[int - int]"},"status":-2},{"failures":[],"tindex":"984222b6-c84f-11e4-abd9-ef87cfc2036b","variableMapping":{"this":"gen"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:405","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.blame.BlameGenerator.initRevPool(true)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.BlameCommand:235","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.blame.BlameGenerator.release()"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,0,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,1,50,51,52,5,2,3,4],"tindex":"984222b7-c84f-11e4-abd9-ad6f248058ab","variableMapping":{"r":"r","lineStart":"c"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Config:160","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.insert(int, '\\\"')"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.QuotedString:268","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(((char)(int)))"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertHeadMiddle":51,"org.eclipse.jgit.api.DiffCommandTest.testDiffModified":20,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":38,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":45,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":42,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":41,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2,"org.eclipse.jgit.api.DiffCommandTest.testDiffTwoCommits":22,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":48,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":47,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseEndsIfLastStepIsEdit":32,"org.eclipse.jgit.diff.DiffFormatterTest.testDiff":9,"org.eclipse.jgit.api.DiffCommandTest.testDiffCached":23,"org.eclipse.jgit.diff.DiffFormatterTest.testDiffRootNullToTree":7,"org.eclipse.jgit.util.QuotedStringGitPathStyleTest.testQuote_BareA":18,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":35,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":43,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":46,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertWholeObject_Length12":52,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithNegativeLineCount":21,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Binary":15,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeaderForRenameModeChange":8,"org.eclipse.jgit.api.DiffCommandTest.testNoOutputStreamSet":25,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":36,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertTail":50,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_GitLink":10,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testDiff":27,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":34,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testSameDiff":26,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeaderForRenameWithoutContentChange":13,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithPrefixes":24,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":44,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Delete":16,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":33,"org.eclipse.jgit.util.QuotedStringGitPathStyleTest.testQuoteAtAndNumber":19,"org.eclipse.jgit.diff.DiffFormatterTest.testDiffRootTreeToNull":14,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Modify":6,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":29,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Add":11,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":31,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":28,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":30,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":39,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":37,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeaderWithoutIndexLine":12,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":49,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":40,"org.eclipse.jgit.util.QuotedStringGitPathStyleTest.testQuote_Ang":17}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"20f22cc3-c848-11e4-9044-21e133eb254c","variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:184","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.BundleFetchConnection.verifyPrerequisites()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:107","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.BundleFetchConnection.readBundleV2()"},"status":-1},{"failures":[],"tindex":"20f253d4-c848-11e4-9044-9f46ec5393ae","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.DiffFormatter:562","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:931","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[8,4,5,6,0,7],"tindex":"20f253d5-c848-11e4-9044-c1aff860c739","variableMapping":{"cnt":"bytesPerUnit"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.UnionInputStream:186","type":"CtOperatorAssignmentImpl","sourcecode":"long -= 1"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1361","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 10"},"status":-1},{"failures":[],"tindex":"20f253d6-c848-11e4-9044-f9bdd20a1da8","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:167","type":"CtLocalVariableImpl","sourcecode":"int int = 46"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation:97","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.getFormat()"},"status":-2},{"failures":[0,7,8,4,5,6],"tindex":"20f253d7-c848-11e4-9044-1fec3ec3dd26","variableMapping":{"newHead":"parent"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:262","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.BlameGenerator:620","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.blame.Candidate.org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit"},"status":-1},{"failures":[0,8,7,4,5,6],"tindex":"20f253d8-c848-11e4-9044-03684907626f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector:189","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.ProgressMonitor = org.eclipse.jgit.lib.NullProgressMonitor.org.eclipse.jgit.lib.NullProgressMonitor"},"status":-1},{"failures":[],"tindex":"20f253d9-c848-11e4-9044-39d900687dea","variableMapping":{"r":"buf","inPtr":"ptr","in":"buf","rPtr":"ptr","inEnd":"ptr"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.QuotedString:301","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    final byte byte = byte[][int++];\n    if (byte != '\\\\') {\n        byte[][int++] = byte;\n        continue;\n    } \n    if (int == int) {\n        byte[][int++] = '\\\\';\n        break;\n    } \n    switch (byte[][int++]) {\n        case 'a' :\n            byte[][int++] = 7;\n            continue;\n        case 'b' :\n            byte[][int++] = '\\b';\n            continue;\n        case 'f' :\n            byte[][int++] = '\\f';\n            continue;\n        case 'n' :\n            byte[][int++] = '\\n';\n            continue;\n        case 'r' :\n            byte[][int++] = '\\r';\n            continue;\n        case 't' :\n            byte[][int++] = '\\t';\n            continue;\n        case 'v' :\n            byte[][int++] = 11;\n            continue;\n        case '\\\\' :\n        case '\\\"' :\n            byte[][int++] = byte[][(int - 1)];\n            continue;\n        case '0' :\n        case '1' :\n        case '2' :\n        case '3' :\n            {\n                int int = (byte[][(int - 1)]) - '0';\n                for (int int = 1 ; (int < 3) && (int < int) ; int++) {\n                    final byte byte = byte[][int];\n                    if (('0' <= byte) && (byte <= '7')) {\n                        int <<= 3;\n                        int |= byte - '0';\n                        int++;\n                    } else {\n                        break;\n                    }\n                }\n                byte[][int++] = ((byte)(int));\n                continue;\n            }\n        default :\n            byte[][int++] = '\\\\';\n            byte[][int++] = byte[][(int - 1)];\n            continue;\n    }\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.Patch:364","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.patch.Patch.addError(new org.eclipse.jgit.patch.FormatError(byte[] , int , org.eclipse.jgit.patch.FormatError.Severity.org.eclipse.jgit.patch.FormatError.Severity , java.lang.String))"},"status":-2},{"failures":[9,7,4,5,6,0,8],"tindex":"20f253da-c848-11e4-9044-832e1798d886","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.DiffFormatter:562","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RefMap:412","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[0,7,4,5,6,8],"tindex":"20f253db-c848-11e4-9044-43157af4aace","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.PersonIdent:183","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Name of PersonIdent must not be null.\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:1202","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.api.errors.RefNotFoundException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.Constants.java.lang.String))"},"status":-1},{"failures":[10,11,12,0,7,4,5,6,8],"tindex":"20f253dc-c848-11e4-9044-2959a831e626","variableMapping":{"delayFreeFlags":"in_brackets","carryFlags":"i","freeFlags":"i"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1190","type":"CtIfImpl","sourcecode":"if ((int) != 0) {\n    int |= int;\n    int &= ~(int);\n    int = 0;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.internal.Strings:230","type":"CtSwitchImpl","sourcecode":"switch (char) {\n    case '*' :\n        if (boolean || (int > 0))\n            java.lang.StringBuilder.append(char);\n        else\n            java.lang.StringBuilder.append('.').append(char);\n        \n        break;\n    case '.' :\n        if (boolean)\n            java.lang.StringBuilder.append(char);\n        else\n            java.lang.StringBuilder.append('\\\\').append('.');\n        \n        break;\n    case '?' :\n        if (boolean || (int > 0))\n            java.lang.StringBuilder.append(char);\n        else\n            java.lang.StringBuilder.append('.');\n        \n        break;\n    case ':' :\n        if (int > 0)\n            if ((org.eclipse.jgit.ignore.internal.Strings.(org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)) == '[') && java.lang.Character.(java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String, int))))\n                boolean = true;\n            \n        \n        java.lang.StringBuilder.append(':');\n        break;\n    case '-' :\n        if (int > 0) {\n            if (org.eclipse.jgit.ignore.internal.Strings.(org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String, int)) == ']')\n                java.lang.StringBuilder.append('\\\\').append(char);\n            else\n                java.lang.StringBuilder.append(char);\n            \n        } else\n            java.lang.StringBuilder.append('-');\n        \n        break;\n    case '\\\\' :\n        if (int > 0) {\n            char char = org.eclipse.jgit.ignore.internal.Strings.org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String, int);\n            if ((char == ']') || (char == '['))\n                boolean = true;\n            \n        } \n        java.lang.StringBuilder.append(char);\n        break;\n    case '[' :\n        if (int > 0) {\n            java.lang.StringBuilder.append('\\\\').append('[');\n            boolean = true;\n        } else {\n            if (!boolean) {\n                int++;\n                boolean = false;\n            } \n            java.lang.StringBuilder.append('[');\n        }\n        break;\n    case ']' :\n        if (boolean) {\n            java.lang.StringBuilder.append(']');\n            boolean = true;\n            break;\n        } \n        if (int <= 0) {\n            java.lang.StringBuilder.append('\\\\').append(']');\n            boolean = true;\n            break;\n        } \n        char char = org.eclipse.jgit.ignore.internal.Strings.org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder);\n        if (((char == '[') && (!boolean)) || (char == '^')) {\n            java.lang.StringBuilder.append('\\\\');\n            java.lang.StringBuilder.append(']');\n            boolean = true;\n        } else {\n            boolean = false;\n            if (!boolean) {\n                int--;\n                java.lang.StringBuilder.append(']');\n            } else {\n                boolean = false;\n                java.lang.String java.lang.String = org.eclipse.jgit.ignore.internal.Strings.org.eclipse.jgit.ignore.internal.Strings.checkPosixCharClass(char[]);\n                if (java.lang.String != null) {\n                    java.lang.StringBuilder.setLength(((java.lang.StringBuilder.length()) - 4));\n                    java.lang.StringBuilder.append(java.lang.String);\n                } \n                org.eclipse.jgit.ignore.internal.Strings.org.eclipse.jgit.ignore.internal.Strings.reset(char[]);\n            }\n        }\n        break;\n    case '!' :\n        if (int > 0) {\n            if (org.eclipse.jgit.ignore.internal.Strings.(org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)) == '[')\n                java.lang.StringBuilder.append('^');\n            else\n                java.lang.StringBuilder.append(char);\n            \n        } else\n            java.lang.StringBuilder.append(char);\n        \n        break;\n    default :\n        if (boolean)\n            org.eclipse.jgit.ignore.internal.Strings.org.eclipse.jgit.ignore.internal.Strings.setNext(char[], char);\n        else\n            java.lang.StringBuilder.append(char);\n        \n        break;\n}"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":6,"org.eclipse.jgit.util.RefMapTest.testEntryType":9,"org.eclipse.jgit.attributes.AttributesMatcherTest.testNameOnlyMatches":12,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":4,"org.eclipse.jgit.transport.BundleWriterTest.testWriteHEAD":1,"org.eclipse.jgit.attributes.AttributesMatcherTest.testFileNameWildcards":10,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":8,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":3,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":2,"org.eclipse.jgit.attributes.AttributesMatcherTest.testTargetWithoutLeadingSlash":11,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":7}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5],"tindex":"4a0e69dd-c868-11e4-8096-ed4b3022f891","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:378","type":"CtForImpl","sourcecode":"for (java.util.Iterator<java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref>> java.util.Iterator<java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref>> = org.eclipse.jgit.internal.storage.file.GC.getAllRefs().entrySet().iterator() ; java.util.Iterator<java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref>>.hasNext() ; ) {\n    java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> = java.util.Iterator<java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref>>.next();\n    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>.get(java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref>.getKey());\n    if (!org.eclipse.jgit.internal.storage.file.GC.(org.eclipse.jgit.internal.storage.file.GC.equals(java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref>.getValue(), org.eclipse.jgit.lib.Ref)))\n        java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>.put(java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref>.getKey(), java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref>.getValue());\n    \n}"},"status":-1},{"failures":[6,7,8,0,1,2,9,10,11,12,13,14,3,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,4,31,32,33,34,35,36,37,38],"tindex":"4a0e90ee-c868-11e4-8096-e509b765d8b4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEditor:138","type":"CtIfImpl","sourcecode":"if (int > 0)\n    org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int, int);\n"},"status":-1},{"failures":[],"tindex":"4a0e90ef-c868-11e4-8096-fd89bfad605c","variableMapping":{"line":"filename"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.PacketLineIn:120","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"ERR \"))\n    throw new org.eclipse.jgit.errors.PackProtocolException(java.lang.String.substring(4));\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:412","type":"CtIfImpl","sourcecode":"if (\"remote\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = org.xml.sax.Attributes.getValue(\"alias\");\n    java.lang.String java.lang.String = org.xml.sax.Attributes.getValue(\"fetch\");\n    java.util.Map<java.lang.String, java.lang.String>.put(org.xml.sax.Attributes.getValue(\"name\"), java.lang.String);\n    if (java.lang.String != null)\n        java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String, java.lang.String);\n    \n} else if (\"default\".equals(java.lang.String)) {\n    java.lang.String = org.xml.sax.Attributes.getValue(\"remote\");\n    java.lang.String = org.xml.sax.Attributes.getValue(\"revision\");\n    if ((java.lang.String) == null)\n        java.lang.String = org.eclipse.jgit.gitrepo.RepoCommand.java.lang.String;\n    \n} else if (\"copyfile\".equals(java.lang.String)) {\n    if ((org.eclipse.jgit.gitrepo.RepoCommand.Project) == null)\n        throw new org.xml.sax.SAXException(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String);\n    \n    org.eclipse.jgit.gitrepo.RepoCommand.Project.addCopyFile(new org.eclipse.jgit.gitrepo.RepoCommand.CopyFile(org.eclipse.jgit.gitrepo.RepoCommand.org.eclipse.jgit.lib.Repository , org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String , org.xml.sax.Attributes.getValue(\"src\") , org.xml.sax.Attributes.getValue(\"dest\")));\n} else if (\"include\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = org.xml.sax.Attributes.getValue(\"name\");\n    java.io.InputStream java.io.InputStream = null;\n    if ((org.eclipse.jgit.gitrepo.RepoCommand.IncludedFileReader) != null) {\n        try {\n            java.io.InputStream = org.eclipse.jgit.gitrepo.RepoCommand.IncludedFileReader.readIncludeFile(java.lang.String);\n        } catch (java.lang.Exception java.lang.Exception) {\n            throw new org.xml.sax.SAXException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String, java.lang.String) , java.lang.Exception);\n        }\n    } else if ((java.lang.String) != null) {\n        int int = java.lang.String.lastIndexOf('/');\n        java.lang.String java.lang.String = (java.lang.String.substring(0, (int + 1))) + java.lang.String;\n        try {\n            java.io.InputStream = new java.io.FileInputStream(java.lang.String);\n        } catch (java.io.IOException java.io.IOException) {\n            throw new org.xml.sax.SAXException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String, java.lang.String) , java.io.IOException);\n        }\n    } \n    if (java.io.InputStream == null) {\n        throw new org.xml.sax.SAXException(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String);\n    } \n    try {\n        org.eclipse.jgit.gitrepo.RepoCommand.XmlManifest.read(java.io.InputStream);\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.xml.sax.SAXException(java.io.IOException);\n    }\n} "},"status":-2},{"failures":[0,1,2,3,5,4],"tindex":"4a0e90f0-c868-11e4-8096-bbed98dfeed1","variableMapping":{"ui":"n"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.URIish:382","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.String.indexOf(':')"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.TreeFilter:228","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.String.lastIndexOf('.')"},"status":-1},{"failures":[],"tindex":"4a0e90f1-c868-11e4-8096-856c900f4444","variableMapping":{"this":"db","curs":"wc","objectId":"id"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:381","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.internal.storage.file.ObjectDirectory.openLooseFromSelfOrAlternate(org.eclipse.jgit.internal.storage.file.WindowCursor, org.eclipse.jgit.lib.AnyObjectId)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:143","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.internal.storage.file.UnpackedObject.LargeObject(int , long , java.io.File , org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase)"},"status":-2},{"failures":[0,1,2,3,5,4],"tindex":"4a0e90f2-c868-11e4-8096-1345475c5372","variableMapping":{"pattern":"line"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter:112","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String + \".*\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:182","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String.substring(0, 45)"},"status":-1},{"failures":[],"tindex":"4a0e90f3-c868-11e4-8096-a1e936d9202a","variableMapping":{"remoteBranchName":"org.eclipse.jgit.lib.ConfigConstants.CONFIG_KEY_URL","branchName":"org.eclipse.jgit.lib.ConfigConstants.CONFIG_SUBMODULE_SECTION"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.PullCommand:234","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null)\n    java.lang.String = java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.SubmoduleInitCommand:103","type":"CtWhileImpl","sourcecode":"while (org.eclipse.jgit.submodule.SubmoduleWalk.next()) {\n    if ((org.eclipse.jgit.submodule.SubmoduleWalk.getConfigUrl()) != null)\n        continue;\n    \n    java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getPath();\n    java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getRemoteUrl();\n    java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getModulesUpdate();\n    if (java.lang.String != null)\n        org.eclipse.jgit.lib.StoredConfig.setString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String, org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String);\n    \n    if (java.lang.String != null)\n        org.eclipse.jgit.lib.StoredConfig.setString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String, org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String);\n    \n    if ((java.lang.String != null) || (java.lang.String != null))\n        java.util.List<java.lang.String>.add(java.lang.String);\n    \n}"},"status":-2},{"failures":[],"tindex":"4a0eb804-c868-11e4-8096-ebc6ec977543","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.AutoCRLFOutputStream:111","type":"CtIfImpl","sourcecode":"if (byte == '\\n') {\n    if ((int) != '\\r') {\n        if (int < int) {\n            java.io.OutputStream.write(byte[], int, (int - int));\n        } \n        java.io.OutputStream.write('\\r');\n        int = int;\n    } \n    int = -1;\n} else {\n    int = -1;\n}"},"status":-2},{"failures":[],"tindex":"4a0eb805-c868-11e4-8096-03aa9ef9fb02","variableMapping":{"this":"dst","org.eclipse.jgit.lib.RefUpdate.Result.LOCK_FAILURE":"org.eclipse.jgit.lib.RefUpdate.Result.NEW"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.RefUpdate:572","type":"CtIfImpl","sourcecode":"if (!org.eclipse.jgit.lib.RefUpdate.(tryLock(false)))\n    return org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectoryRename:160","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk)) != (org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result)) {\n    if (org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate, org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate))\n        org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate, org.eclipse.jgit.lib.RefUpdate);\n    \n    org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.zeroId());\n    org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.lib.ObjectId);\n    org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk);\n    if (boolean)\n        org.eclipse.jgit.internal.storage.file.RefDirectoryRename.linkHEAD(org.eclipse.jgit.lib.RefUpdate);\n    \n    return org.eclipse.jgit.lib.RefUpdate.getResult();\n} "},"status":-2},{"failures":[],"tindex":"4a0eb806-c868-11e4-8096-49013d512d6d","variableMapping":{"r":"toApply","want":"org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED","commands":"toApply"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.ReceiveCommand:143","type":"CtForEachImpl","sourcecode":"for (final org.eclipse.jgit.transport.ReceiveCommand org.eclipse.jgit.transport.ReceiveCommand : java.util.List<org.eclipse.jgit.transport.ReceiveCommand>) {\n    if ((org.eclipse.jgit.transport.ReceiveCommand.getResult()) == org.eclipse.jgit.transport.ReceiveCommand.Result)\n        java.util.List<org.eclipse.jgit.transport.ReceiveCommand>.add(org.eclipse.jgit.transport.ReceiveCommand);\n    \n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1367","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.transport.ReceiveCommand org.eclipse.jgit.transport.ReceiveCommand : java.util.List<org.eclipse.jgit.transport.ReceiveCommand>) {\n    if ((org.eclipse.jgit.transport.ReceiveCommand.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result))\n        org.eclipse.jgit.transport.ReceiveCommand.reject(java.io.IOException);\n    \n}"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.notes.NoteMapTest.testReadFanout2_38":33,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":16,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":12,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithoutNonNoteConflict":25,"org.eclipse.jgit.notes.NoteMapMergerTest.testAddSameNoteDifferentContent":24,"org.eclipse.jgit.dircache.DirCachePathEditTest.testAddDeleteTrickyNames":6,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPruneNone":19,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":29,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.notes.NoteMapMergerTest.testAddDifferentNotes":28,"org.eclipse.jgit.submodule.SubmoduleWalkTest.treeIdWithGitmodules":37,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":15,"org.eclipse.jgit.revwalk.RevWalkFollowFilterTest.testMultiRename":18,"org.eclipse.jgit.notes.NoteMapMergerTest.testBaseEqualsTheirs":22,"org.eclipse.jgit.notes.NoteMapTest.testWriteUnchangedFlat":36,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":13,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":17,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":10,"org.eclipse.jgit.notes.NoteMapTest.testReadFlatTwoNotes":31,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":21,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":20,"org.eclipse.jgit.submodule.SubmoduleWalkTest.testTreeIteratorWithGitmodules":38,"org.eclipse.jgit.notes.NoteMapTest.testWriteUnchangedFanout2_38":32,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":11,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":30,"org.eclipse.jgit.notes.NoteMapTest.testReadFullyFannedOut":35,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":8,"org.eclipse.jgit.notes.NoteMapMergerTest.testOursEqualsTheirs":26,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":3,"org.eclipse.jgit.notes.NoteMapMergerTest.testDeleteDifferentNotes":23,"org.eclipse.jgit.notes.NoteMapTest.testReadFanout2_2_36":34,"org.eclipse.jgit.dircache.DirCachePathEditTest.testAddDeletePathAndTreeNormalNames":7,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":9,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":14,"org.eclipse.jgit.notes.NoteMapMergerTest.testBaseEqualsOurs":27}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"4209f21e-c87e-11e4-9a2c-e9d60d46b530","variableMapping":{"bs":"length","wantSize":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:325","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    int = int;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.HttpAuthMethod:160","type":"CtIfImpl","sourcecode":"if ((java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>>.getValue()) != null) {\n    for (final java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>>.getValue()) {\n        if ((java.lang.String != null) && ((java.lang.String.length()) != 0)) {\n            final java.lang.String[] java.lang.String[] = java.lang.String.split(org.eclipse.jgit.transport.HttpAuthMethod.java.lang.String, 2);\n            try {\n                org.eclipse.jgit.transport.HttpAuthMethod.Type org.eclipse.jgit.transport.HttpAuthMethod.Type = org.eclipse.jgit.transport.HttpAuthMethod.Type.org.eclipse.jgit.transport.HttpAuthMethod.Type.valueOf(java.lang.String[][0].toUpperCase());\n                if ((org.eclipse.jgit.transport.HttpAuthMethod.getType().compareTo(org.eclipse.jgit.transport.HttpAuthMethod.Type)) >= 0) {\n                    continue;\n                } \n                final java.lang.String java.lang.String;\n                if ((java.lang.String[].int) == 1)\n                    java.lang.String = org.eclipse.jgit.transport.HttpAuthMethod.java.lang.String;\n                else\n                    java.lang.String = java.lang.String[][1];\n                \n                org.eclipse.jgit.transport.HttpAuthMethod = org.eclipse.jgit.transport.HttpAuthMethod.Type.method(java.lang.String);\n            } catch (java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n            }\n        } \n    }\n} "},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"420a192f-c87e-11e4-9a2c-a3f8c9ea30ee","variableMapping":{"conflictingPaths":"refs"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.errors.CheckoutConflictException:97","type":"CtIfImpl","sourcecode":"if ((java.util.List<java.lang.String>) == null)\n    java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String>();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:623","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.List<java.lang.String>) {\n    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.internal.storage.file.RefDirectory.readRef(java.lang.String, org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>);\n    if (org.eclipse.jgit.lib.Ref.isSymbolic())\n        continue;\n    \n    int int = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.find(java.lang.String);\n    if (int >= 0)\n        org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.set(int, org.eclipse.jgit.internal.storage.file.RefDirectory.peeledPackedRef(org.eclipse.jgit.lib.Ref));\n    else\n        org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.add(int, org.eclipse.jgit.internal.storage.file.RefDirectory.peeledPackedRef(org.eclipse.jgit.lib.Ref));\n    \n}"},"status":-1},{"failures":[0,1,2,5,3,4],"tindex":"420bedf0-c87e-11e4-9a2c-852da5adf295","variableMapping":{"commitMessage":"path"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.hooks.CommitMsgHook:142","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.URIish:476","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.URIish.java.lang.String = java.lang.String"},"status":-1},{"failures":[],"tindex":"420bedf1-c87e-11e4-9a2c-1726bf1d4d81","variableMapping":{"dStr":"suffix"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.InitCommand:97","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    java.lang.String = \".\";\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:1008","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.lib.ConfigLine.java.lang.String) != null)\n    java.lang.StringBuilder.append(' ');\n"},"status":-2},{"failures":[0,1,2,5,6,7,8,9,10,3,11,12,13,14,15,4,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"420c1502-c87e-11e4-9a2c-0d860b98255f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:295","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.transport.ReceiveCommand org.eclipse.jgit.transport.ReceiveCommand : java.util.List<org.eclipse.jgit.transport.ReceiveCommand>) {\n    try {\n        if ((org.eclipse.jgit.transport.ReceiveCommand.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result)) {\n            org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk);\n            org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.BatchRefUpdate.newUpdate(org.eclipse.jgit.transport.ReceiveCommand);\n            SWITCH : switch (org.eclipse.jgit.transport.ReceiveCommand.getType()) {\n                case DELETE :\n                    break;\n                case UPDATE :\n                case UPDATE_NONFASTFORWARD :\n                    org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.BatchRefUpdate.newUpdate(org.eclipse.jgit.transport.ReceiveCommand);\n                    org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk));\n                    break;\n                case CREATE :\n                    for (java.lang.String java.lang.String : org.eclipse.jgit.lib.BatchRefUpdate.org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(org.eclipse.jgit.transport.ReceiveCommand.getRefName())) {\n                        if (java.util.Collection<java.lang.String>.contains(java.lang.String)) {\n                            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result);\n                            break SWITCH;\n                        } \n                    }\n                    if (java.util.Collection<java.lang.String>.contains(org.eclipse.jgit.transport.ReceiveCommand.getRefName())) {\n                        org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result);\n                        break SWITCH;\n                    } \n                    org.eclipse.jgit.lib.RefUpdate.setCheckConflicting(false);\n                    org.eclipse.jgit.lib.BatchRefUpdate.org.eclipse.jgit.lib.BatchRefUpdate.addRefToPrefixes(java.util.Collection<java.lang.String>, org.eclipse.jgit.transport.ReceiveCommand.getRefName());\n                    java.util.Collection<java.lang.String>.add(org.eclipse.jgit.transport.ReceiveCommand.getRefName());\n                    org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk));\n            }\n        } \n    } catch (java.io.IOException java.io.IOException) {\n        org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.IOException.getMessage()));\n    } finally {\n        org.eclipse.jgit.lib.ProgressMonitor.update(1);\n    }\n}"},"status":-1},{"failures":[3,4,0,1,2,5],"tindex":"420cff63-c87e-11e4-9a2c-41d316e2074b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:350","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.eclipse.jgit.util.TemporaryBuffer.Heap = new org.eclipse.jgit.util.TemporaryBuffer.Heap(java.lang.Integer.int);\n    org.eclipse.jgit.transport.PacketLineOut = new org.eclipse.jgit.transport.PacketLineOut(org.eclipse.jgit.util.TemporaryBuffer.Heap);\n} "},"status":-1},{"failures":[],"tindex":"420d2674-c87e-11e4-9a2c-7fe2975fd6b0","variableMapping":{"res":"src","bestBase":"src"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:251","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry.makeNext(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:209","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry.empty())\n    break;\n"},"status":-3},{"failures":[],"tindex":"420d2675-c87e-11e4-9a2c-e1125b0796dc","variableMapping":{"org.eclipse.jgit.revwalk.RewriteGenerator.DUPLICATE":"c"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RewriteGenerator:173","type":"CtUnaryOperatorImpl","sourcecode":"~(org.eclipse.jgit.revwalk.RewriteGenerator.int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Tree:540","type":"CtOperatorAssignmentImpl","sourcecode":"int += int - '0'"},"status":-2},{"failures":[5,4,0,1,2,3],"tindex":"420d2676-c87e-11e4-9a2c-7994f9bd854a","variableMapping":{"p":"id"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.RewriteGenerator:161","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevCommit == null)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:352","type":"CtIfImpl","sourcecode":"if (java.util.Set<org.eclipse.jgit.lib.ObjectId>.contains(org.eclipse.jgit.lib.ObjectId))\n    continue;\n"},"status":-1},{"failures":[0,1,2,5],"tindex":"420d2677-c87e-11e4-9a2c-7bf914dbba3b","variableMapping":{"eb":"p"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCache:250","type":"CtAssignmentImpl","sourcecode":"int = 4"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:1664","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser.Source, 1)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":30,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":44,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":9,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":26,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":10,"org.eclipse.jgit.transport.TestProtocolTest.testUploadPackFactory":18,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":46,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":7,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":40,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":6,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":21,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateConflictThanksToDelete":34,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":32,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateNonFastForwardDoesNotDoExpensiveMergeCheck":37,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":47,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":31,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":8,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":25,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":13,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":20,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.transport.TestProtocolTest.testReceivePackFactory":19,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":49,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testCreateBranchAtHiddenCommitFails":23,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateSimpleForce":33,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":11,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateConflict":36,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":15,"org.eclipse.jgit.transport.TestProtocolTest.testPush":17,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":27,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":12,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":43,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":45,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateSimpleNoForce":35,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":14,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTag":41,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":22,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":39,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":29,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":42,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":28,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":38,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testFilterHidesPrivate":24,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":48,"org.eclipse.jgit.transport.TestProtocolTest.testFetch":16}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

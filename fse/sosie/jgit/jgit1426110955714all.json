[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"tindex":"64cc027d-c839-11e4-b2c5-53e4634507e2","variableMapping":{"d":"h","org.eclipse.jgit.internal.storage.pack.ObjectToPack.DELTA_SHIFT":"h","flags":"h","org.eclipse.jgit.internal.storage.pack.ObjectToPack.NON_DELTA_MASK":"h"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:194","type":"CtAssignmentImpl","sourcecode":"int = (int << (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int)) | ((int) & (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:189","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.int[][int]"},"status":-1},{"failures":[],"tindex":"64cc027e-c839-11e4-b2c5-3742f42b425c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CommitCommand:728","type":"CtInvocationImpl","sourcecode":"this.java.util.List<java.lang.String>.add(java.lang.String)"},"status":-2},{"failures":[],"tindex":"64cc027f-c839-11e4-b2c5-ad4e5b663c3e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FS:346","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.util.FS.Holder<java.io.File> = new org.eclipse.jgit.util.FS.Holder<java.io.File>(org.eclipse.jgit.util.FS.userHomeImpl())"},"status":-2},{"failures":[],"tindex":"64cc0280-c839-11e4-b2c5-1d82ae2a7981","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:254","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.PersonIdent:243","type":"CtReturnImpl","sourcecode":"return ((org.eclipse.jgit.lib.PersonIdent.getName().equals(org.eclipse.jgit.lib.PersonIdent.getName())) && (org.eclipse.jgit.lib.PersonIdent.getEmailAddress().equals(org.eclipse.jgit.lib.PersonIdent.getEmailAddress()))) && (((long) / 1000L) == ((org.eclipse.jgit.lib.PersonIdent.long) / 1000L))"},"status":-2},{"failures":[],"tindex":"64cc0281-c839-11e4-b2c5-eb03cfc7cfd4","variableMapping":{"refLogMessage":"objectAtHasBadZlibStream","startPointFullName":"objectAtHasBadZlibStream","exists":"validate"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.CreateBranchCommand:173","type":"CtIfImpl","sourcecode":"if (boolean)\n    java.lang.String = \"branch: Reset start-point to tag \" + java.lang.String;\nelse\n    java.lang.String = \"branch: Created from tag \" + java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:419","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.file.ByteArrayWindow = org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(this, long, long);\n    if (boolean && (org.eclipse.jgit.internal.storage.file.PackFile.idx().hasCRC32Support())) {\n        long = org.eclipse.jgit.internal.storage.file.PackFile.idx().findCRC32(org.eclipse.jgit.internal.storage.file.LocalObjectToPack);\n        if (org.eclipse.jgit.internal.storage.file.ByteArrayWindow != null) {\n            org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32, long, ((int)(long)));\n        } else {\n            long long = long;\n            long long = long;\n            while (long > 0) {\n                final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n                org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.file.WindowCursor);\n                java.util.zip.CRC32.update(byte[], 0, int);\n                long += int;\n                long -= int;\n            }\n        }\n        if ((java.util.zip.CRC32.getValue()) != long) {\n            org.eclipse.jgit.internal.storage.file.PackFile.setCorrupt(org.eclipse.jgit.internal.storage.file.LocalObjectToPack.long);\n            throw new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.file.LocalObjectToPack.long), org.eclipse.jgit.internal.storage.file.PackFile.getPackFile()));\n        } \n    } else if (boolean) {\n        java.util.zip.Inflater java.util.zip.Inflater = org.eclipse.jgit.internal.storage.file.WindowCursor.inflater();\n        byte[] byte[] = new byte[1024];\n        if (org.eclipse.jgit.internal.storage.file.ByteArrayWindow != null) {\n            org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater, byte[], long, ((int)(long)));\n        } else {\n            long long = long;\n            long long = long;\n            while (long > 0) {\n                final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n                org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.file.WindowCursor);\n                java.util.zip.CRC32.update(byte[], 0, int);\n                java.util.zip.Inflater.setInput(byte[], 0, int);\n                while ((java.util.zip.Inflater.inflate(byte[], 0, byte[].int)) > 0)\n                    continue;\n                long += int;\n                long -= int;\n            }\n        }\n        if ((!(java.util.zip.Inflater.finished())) || ((java.util.zip.Inflater.getBytesRead()) != long)) {\n            org.eclipse.jgit.internal.storage.file.PackFile.setCorrupt(org.eclipse.jgit.internal.storage.file.LocalObjectToPack.long);\n            throw new java.io.EOFException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.file.LocalObjectToPack.long)));\n        } \n        long = java.util.zip.CRC32.getValue();\n    } else {\n        long = -1;\n    }\n} catch (java.util.zip.DataFormatException java.util.zip.DataFormatException) {\n    org.eclipse.jgit.internal.storage.file.PackFile.setCorrupt(org.eclipse.jgit.internal.storage.file.LocalObjectToPack.long);\n    org.eclipse.jgit.errors.CorruptObjectException org.eclipse.jgit.errors.CorruptObjectException = new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.file.LocalObjectToPack.long), org.eclipse.jgit.internal.storage.file.PackFile.getPackFile()));\n    org.eclipse.jgit.errors.CorruptObjectException.initCause(java.util.zip.DataFormatException);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException = new org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException(org.eclipse.jgit.internal.storage.file.LocalObjectToPack);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException.initCause(org.eclipse.jgit.errors.CorruptObjectException);\n    throw org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n} catch (java.io.IOException java.io.IOException) {\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException = new org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException(org.eclipse.jgit.internal.storage.file.LocalObjectToPack);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException.initCause(java.io.IOException);\n    throw org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n}"},"status":-2},{"failures":[],"tindex":"64cc0282-c839-11e4-b2c5-8bd28c408afa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:344","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    byte = byte[][int++];\n    if (' ' == byte)\n        break;\n    \n    int <<= 3;\n    int += byte - '0';\n}"},"status":-2},{"failures":[],"tindex":"64cc0283-c839-11e4-b2c5-cbce388d2c1d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AnyObjectId:238","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.util.NB.org.eclipse.jgit.util.NB.compareUInt32(int, int[][(int + 1)])"},"status":-2},{"failures":[],"tindex":"64cc0284-c839-11e4-b2c5-87ce545b0d5d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:969","type":"CtInvocationImpl","sourcecode":"java.util.List<java.lang.String>.add(org.eclipse.jgit.dircache.DirCacheEntry[][int].getPathString())"},"status":-2},{"failures":[],"tindex":"64cc0285-c839-11e4-b2c5-9d24442c7f2e","variableMapping":{"org.eclipse.jgit.util.RawParseUtils.footerLineKeyChars":"packChecksum"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:103","type":"CtForImpl","sourcecode":"for (char char = '0' ; char <= '9' ; char++)\n    org.eclipse.jgit.util.RawParseUtils.byte[][char] = 1;"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:174","type":"CtIfImpl","sourcecode":"if (!java.util.Arrays.(java.util.Arrays.equals(byte[], org.eclipse.jgit.internal.storage.file.PackIndex.byte[]))) {\n    throw new org.eclipse.jgit.errors.PackMismatchException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File.getPath()));\n} "},"status":-2},{"failures":[],"tindex":"64cc0286-c839-11e4-b2c5-eb7ab19b589f","variableMapping":{"org.eclipse.jgit.lib.Constants.DEFAULT_REMOTE_NAME":"id","remote":"id"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.PullCommand:218","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null)\n    java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AbbreviatedObjectId:81","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.lang.String.length()) ; int++)\n    org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseHexInt4(((byte)(java.lang.String.charAt(int))));"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":16,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertHeadMiddle":8,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":26,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":51,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":68,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":49,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":66,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":62,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":70,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":24,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":47,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":69,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":54,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130CopyFails":9,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":13,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":67,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyZeros_Length128":1,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":32,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":61,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":63,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyWholeObject_Length123":4,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyWholeObject_Length128":5,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":22,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":35,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":58,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":11,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":59,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":18,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130InsertFails":3,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":19,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":20,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":17,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":64,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":44,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130CopyOk":0,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":53,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":60,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":46,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":50,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_InsertFrontFails":2,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":31,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":30,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertTail":7,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":65,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":14,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":21,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testShuffleSegments":10,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":33,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":41,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":42,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":45,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":40,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":39,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":28,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":29,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":55,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":38,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":43,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":37,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testIndexSize":6,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":52,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":57,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":15,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":48,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":56,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":36,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":25,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":12,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":23,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":34,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":27}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

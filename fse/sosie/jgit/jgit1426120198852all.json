[{"failures":[],"tindex":"ea7cf7a5-c84e-11e4-85ec-5143c079a43e","variableMapping":{"next":"d","head":"d","d":"d"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.PackParser:1523","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.PackParser.UnresolvedDelta.org.eclipse.jgit.transport.PackParser.UnresolvedDelta = org.eclipse.jgit.transport.PackParser.UnresolvedDelta"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:1524","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.PackParser.UnresolvedDelta = org.eclipse.jgit.transport.PackParser.UnresolvedDelta"},"status":-2},{"failures":[],"tindex":"ea7d1eb6-c84e-11e4-85ec-39160c480e2f","variableMapping":{"org.eclipse.jgit.lib.Constants.DEFAULT_REMOTE_NAME":"s","remote":"s"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.BranchConfig:178","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return org.eclipse.jgit.lib.Constants.java.lang.String;\nelse\n    return java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.URIish:261","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return null;\n"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"ea7d1eb7-c84e-11e4-85ec-83e91d21ee46","variableMapping":{"sz":"ptr","ptr":"ptr"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:402","type":"CtIfImpl","sourcecode":"if (int > int)\n    throw new org.eclipse.jgit.errors.CorruptObjectException(\"truncated in object id\");\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.HunkHeader:339","type":"CtSwitchImpl","sourcecode":"switch (byte[][int]) {\n    case ' ' :\n    case '\\n' :\n    case '\\\\' :\n        java.io.OutputStream[][0].write(byte[], int, (int - int));\n        java.io.OutputStream[][1].write(byte[], int, (int - int));\n        break;\n    case '-' :\n        java.io.OutputStream[][0].write(byte[], int, (int - int));\n        break;\n    case '+' :\n        java.io.OutputStream[][1].write(byte[], int, (int - int));\n        break;\n    default :\n        break SCAN;\n}"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,0,1,2,3,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,4,69,70,71,72,73,74,5,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"tindex":"ea7d1eb8-c84e-11e4-85ec-63254e3b5412","variableMapping":{"org.eclipse.jgit.util.Base64.ENC":"org.eclipse.jgit.patch.FileHeader.RENAME_TO","org.eclipse.jgit.util.Base64.DEC":"org.eclipse.jgit.patch.FileHeader.RENAME_NEW"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.Base64:69","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < 64 ; int++)\n    org.eclipse.jgit.util.Base64.byte[][org.eclipse.jgit.util.Base64.byte[][int]] = ((byte)(int));"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:413","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseNewName(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode;\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseIndexLine((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else {\n    break;\n}"},"status":-1},{"failures":[],"tindex":"ea7d1eb9-c84e-11e4-85ec-dd79e75d623c","variableMapping":{"obj":"o"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1036","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevObject.parseBody(this)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.NameRevCommand:176","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.api.NameRevCommand.NameRevCommit) {\n    org.eclipse.jgit.api.NameRevCommand.NameRevCommit org.eclipse.jgit.api.NameRevCommand.NameRevCommit = ((org.eclipse.jgit.api.NameRevCommand.NameRevCommit)(org.eclipse.jgit.revwalk.RevObject));\n    if ((org.eclipse.jgit.api.NameRevCommand.NameRevCommit.java.lang.String) != null)\n        java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.put(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.api.NameRevCommand.org.eclipse.jgit.api.NameRevCommand.simplify(org.eclipse.jgit.api.NameRevCommand.NameRevCommit.format().toString()));\n    \n} else {\n    java.lang.String java.lang.String = java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.get(org.eclipse.jgit.lib.ObjectId);\n    if (java.lang.String != null)\n        java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.put(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.api.NameRevCommand.org.eclipse.jgit.api.NameRevCommand.simplify(java.lang.String));\n    \n}"},"status":-2},{"failures":[3,4,0,1,2,5],"tindex":"ea7d1eba-c84e-11e4-85ec-7b09d3e80509","variableMapping":{"objectId":"id"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder:203","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ObjectId == null)\n    throw new java.lang.IllegalArgumentException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Tree:584","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ObjectId == null)\n    throw new org.eclipse.jgit.errors.ObjectWritingException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.TreeEntry.getFullName()));\n"},"status":-1},{"failures":[],"tindex":"ea7d1ebb-c84e-11e4-85ec-e5ab62d3b975","variableMapping":{"s":"blockSize","cr":"blockSize"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.SideBandInputStream:196","type":"CtIfImpl","sourcecode":"if (0 <= int)\n    int = int;\nelse\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:340","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.dfs.DfsBlock = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n    boolean = false;\n} finally {\n    if (boolean)\n        org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.creditSpace(int);\n    \n}"},"status":-2},{"failures":[],"tindex":"ea7d1ebc-c84e-11e4-85ec-2174f5c4c089","variableMapping":{"this":"pool"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1205","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.reset(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector:318","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.internal.storage.file.PackIndex.MutableEntry org.eclipse.jgit.internal.storage.file.PackIndex.MutableEntry : org.eclipse.jgit.internal.storage.file.PackIndex) {\n    org.eclipse.jgit.lib.ProgressMonitor.update(1);\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.internal.storage.file.PackIndex.MutableEntry.toObjectId();\n    if (((org.eclipse.jgit.revwalk.RevWalk.lookupOrNull(org.eclipse.jgit.lib.ObjectId)) != null) || org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.(anyPackHas(org.eclipse.jgit.lib.ObjectId)))\n        continue;\n    \n    int int = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader, org.eclipse.jgit.internal.storage.file.PackIndex.MutableEntry.getOffset());\n    org.eclipse.jgit.internal.storage.pack.PackWriter.addObject(org.eclipse.jgit.revwalk.RevWalk.lookupAny(org.eclipse.jgit.lib.ObjectId, int));\n}"},"status":-2},{"failures":[],"tindex":"ea7d1ebd-c84e-11e4-85ec-717f1ceb4aa1","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.GitDateParser:79","type":"CtReturnImpl","sourcecode":"return new java.util.HashMap<java.util.Locale, java.util.Map<org.eclipse.jgit.util.GitDateParser.ParseableSimpleDateFormat, java.text.SimpleDateFormat>>()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:887","type":"CtReturnImpl","sourcecode":"return java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>"},"status":-2},{"failures":[3,0,1,2,5,4],"tindex":"ea7d1ebe-c84e-11e4-85ec-8be03c807922","variableMapping":{"rru":"u"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.PushProcess:213","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.RemoteRefUpdate.setFastForward(true)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkPushConnection:196","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.RemoteRefUpdate.setStatus(org.eclipse.jgit.transport.RemoteRefUpdate.Status.org.eclipse.jgit.transport.RemoteRefUpdate.Status)"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.patch.FileHeaderTest.testParseAbbrIndexLine_WithMode":50,"org.eclipse.jgit.api.DiffCommandTest.testDiffModified":41,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":85,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":92,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":89,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":88,"org.eclipse.jgit.patch.FileHeaderTest.testParseUnicodeName_DeleteFile":56,"org.eclipse.jgit.patch.PatchTest.testParse_ConfigCaseInsensitive":40,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.patch.GetTextTest.testGetText_BothISO88591":30,"org.eclipse.jgit.patch.PatchTest.testParse_FixNoNewline":39,"org.eclipse.jgit.patch.EditListTest.testTypes":32,"org.eclipse.jgit.api.DiffCommandTest.testDiffTwoCommits":43,"org.eclipse.jgit.patch.FileHeaderTest.testParseFullIndexLine_WithMode":48,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":67,"org.eclipse.jgit.api.ApplyCommandTest.testModifyNL1":57,"org.eclipse.jgit.patch.FileHeaderTest.testParseUnicodeName_NewFile":54,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1Sub":60,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":94,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseEndsIfLastStepIsEdit":79,"org.eclipse.jgit.patch.PatchTest.testParse_GitBinaryDelta":36,"org.eclipse.jgit.diff.DiffFormatterTest.testDiff":11,"org.eclipse.jgit.patch.PatchTest.testParse_GitBinaryLiteral":37,"org.eclipse.jgit.patch.GetTextTest.testGetText_Convert":31,"org.eclipse.jgit.api.DiffCommandTest.testDiffCached":44,"org.eclipse.jgit.patch.FileHeaderTest.testParseFullIndexLine_NoMode":52,"org.eclipse.jgit.diff.DiffFormatterTest.testDiffRootNullToTree":9,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext3":23,"org.eclipse.jgit.patch.FileHeaderTest.testParseRename100_OldStyle":47,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":82,"org.eclipse.jgit.patch.FileHeaderTest.testParseModeChange":51,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext5":24,"org.eclipse.jgit.patch.PatchTest.testParse_NoBinary":35,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":90,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":93,"org.eclipse.jgit.patch.PatchErrorTest.testError_TruncatedNew":70,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1":58,"org.eclipse.jgit.api.ApplyCommandTest.testAddA2":59,"org.eclipse.jgit.patch.PatchErrorTest.testError_TruncatedOld":71,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testNegativeContextFails":19,"org.eclipse.jgit.patch.PatchErrorTest.testError_BodyTooLong":74,"org.eclipse.jgit.patch.PatchErrorTest.testError_GitBinaryNoForwardHunk":73,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithNegativeLineCount":42,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext100":20,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Binary":17,"org.eclipse.jgit.patch.FileHeaderTest.testParseRename100_NewStyle":49,"org.eclipse.jgit.patch.PatchErrorTest.testError_DisconnectedHunk":69,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeaderForRenameModeChange":10,"org.eclipse.jgit.api.DiffCommandTest.testNoOutputStreamSet":46,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":83,"org.eclipse.jgit.api.ApplyCommandTest.testModifyX":63,"org.eclipse.jgit.api.ApplyCommandTest.testModifyY":64,"org.eclipse.jgit.patch.EditListTest.testFileHeader":34,"org.eclipse.jgit.api.ApplyCommandTest.testFailureF2":61,"org.eclipse.jgit.api.ApplyCommandTest.testModifyZ":65,"org.eclipse.jgit.patch.GetTextTest.testGetText_NoBinary":29,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_GitLink":12,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testDiff":7,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":81,"org.eclipse.jgit.api.ApplyCommandTest.testModifyE":62,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testSameDiff":6,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeaderForRenameWithoutContentChange":15,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext0":21,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithPrefixes":45,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":91,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Delete":18,"org.eclipse.jgit.patch.FileHeaderTest.testParseAbbrIndexLine_NoMode":55,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":80,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext1":22,"org.eclipse.jgit.diff.DiffFormatterTest.testDiffRootTreeToNull":16,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Modify":8,"org.eclipse.jgit.patch.EditListTest.testHunkHeader":33,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext10":25,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":76,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Add":13,"org.eclipse.jgit.patch.PatchTest.testParse_AddNoNewline":38,"org.eclipse.jgit.api.ApplyCommandTest.testDeleteD":66,"org.eclipse.jgit.patch.PatchErrorTest.testError_GarbageBetweenFiles":72,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testEmpty1":26,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":78,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":75,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":77,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":86,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testNoNewLine1":27,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testNoNewLine2":28,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":84,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeaderWithoutIndexLine":14,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":68,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":87,"org.eclipse.jgit.patch.FileHeaderTest.testParseCopy100":53}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

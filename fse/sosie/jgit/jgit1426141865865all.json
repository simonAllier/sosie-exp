[{"failures":[],"tindex":"5cb1f415-c881-11e4-ad79-1f31c7d1d9be","variableMapping":{"cnt":"type","org.eclipse.jgit.notes.LeafBucket.MAX_SIZE":"type"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.FanoutBucket:183","type":"CtIfImpl","sourcecode":"if ((((org.eclipse.jgit.notes.LeafBucket.int) * 3) / 4) <= (int))\n    return 1 + (org.eclipse.jgit.notes.LeafBucket.int);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:907","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"5cb1f416-c881-11e4-ad79-71a12c4bbfdd","variableMapping":{"ow":"revWalk"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.FetchProcess:347","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.ObjectWalk.checkConnectivity()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CreateBranchCommand:274","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.release()"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"5cb1f417-c881-11e4-ad79-3d911920669f","variableMapping":{"this":"repo"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.Repository:1574","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.Repository.(isBare()) || (org.eclipse.jgit.lib.Repository.(getDirectory()) == null))\n    throw new org.eclipse.jgit.errors.NoWorkTreeException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CommitCommand:275","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(null)"},"status":-1},{"failures":[],"tindex":"5cb1f418-c881-11e4-ad79-49850e3b1be7","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:167","type":"CtLocalVariableImpl","sourcecode":"int int = 46"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityIndex:147","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"5cb1f419-c881-11e4-ad79-23751d2f7489","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:881","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.api.errors.JGitInternalException(\"Updating HEAD failed\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.HMACSHA1NonceGenerator:81","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(java.io.UnsupportedEncodingException)"},"status":-2},{"failures":[3,5,4,0,6,1,2],"tindex":"5cb1f41a-c881-11e4-ad79-115a817da460","variableMapping":{"org.eclipse.jgit.lib.FileMode.GITLINK":"mMode","mMode":"iMode","f":"f","name":"name","h":"h","this":"this","mId":"headCommitTree","m":"m"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:690","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (!(org.eclipse.jgit.treewalk.WorkingTreeIterator.isEntryIgnored()))) {\n    if (!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode))) {\n        if ((org.eclipse.jgit.lib.ObjectId == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryObjectId(), org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode())))) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, null, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            return ;\n        } \n    } \n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:686","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.dircache.DirCacheBuildIterator == null) {\n    if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (!(org.eclipse.jgit.treewalk.WorkingTreeIterator.isEntryIgnored()))) {\n        if (!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode))) {\n            if ((org.eclipse.jgit.lib.ObjectId == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryObjectId(), org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode())))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, null, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                return ;\n            } \n        } \n    } \n    if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null)\n        org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n    else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null)\n        org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n    else {\n        if (org.eclipse.jgit.dircache.DirCacheCheckout.equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode)) {\n            if (boolean)\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            else\n                org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    }\n} else {\n    if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n        if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))) {\n            if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) && (org.eclipse.jgit.treewalk.NameConflictTreeWalk.isDirectoryFileConflict())) {\n                if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator == null) || (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))))\n                    org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    } else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n        if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n        } else {\n            if (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n                if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))) {\n                    if ((!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode()))) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode)))\n                        return ;\n                    else\n                        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                    \n                } else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            \n        }\n    } else {\n        if (((!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        else if ((!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n            if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.dircache.DirCacheEntry.getFileMode()))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            } else if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader())))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            } else {\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            }\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n        }\n    }\n}"},"status":-1},{"failures":[7,4,3,0,1,2,5],"tindex":"5cb1f41b-c881-11e4-ad79-d59ff6b99554","variableMapping":{"db":"repository"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.DaemonService:141","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.Repository = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.events.RepositoryEvent:69","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.Repository = org.eclipse.jgit.lib.Repository"},"status":-1},{"failures":[3,4,5,0,1,2],"tindex":"5cb1f41c-c881-11e4-ad79-29f6f25db2d6","variableMapping":{"digest":"md"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectInserter:201","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.reset()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:163","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(((byte)(0)))"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,5,0,1,2,25,4,26,3,27,28,29,30],"tindex":"5cb1f41d-c881-11e4-ad79-57c778f793a8","variableMapping":{"pathLen":"high","pathOffset":"high","nameLen":"mid"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:509","type":"CtAssignmentImpl","sourcecode":"int = (int) + int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackReverseIndex:206","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[4,5,3,0,1,2],"tindex":"5cb21b2e-c881-11e4-ad79-3bb90c58dbe3","variableMapping":{"oldModes":"oldModes","eol":"ptr","this":"this","n":"n","ptr":"ptr"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.patch.CombinedFileHeader:243","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.FileMode[][int] = org.eclipse.jgit.patch.FileHeader.parseFileMode(int, int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.CombinedFileHeader:240","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.FileMode[][int++] = org.eclipse.jgit.patch.FileHeader.parseFileMode(int, int)"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.PackReverseIndexTest.testFindObjectWrongOffset":8,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.transport.TestProtocolTest.testUploadPackFactory":29,"org.eclipse.jgit.transport.TestProtocolTest.testPush":28,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":23,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":21,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":3,"org.eclipse.jgit.events.ConfigChangeEventTest.testFileRepository_ChangeEventsOnlyOnSave":7,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":22,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":15,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":20,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testUntrackedConflicts":6,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":19,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":18,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":17,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":16,"org.eclipse.jgit.internal.storage.file.PackReverseIndexTest.testFindNextOffset":11,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":14,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":24,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":12,"org.eclipse.jgit.internal.storage.file.PackReverseIndexTest.testFindObject":10,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.internal.storage.file.PackReverseIndexTest.testFindNextOffsetWrongOffset":9,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":25,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":13,"org.eclipse.jgit.transport.TestProtocolTest.testFetch":27,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":26,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.transport.TestProtocolTest.testReceivePackFactory":30}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

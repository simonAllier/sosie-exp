[{"failures":[0,1,2,3,4,5],"tindex":"7ad5137a-c879-11e4-882d-cb5c3b9dbff7","variableMapping":{"ptr":"idx"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:1049","type":"CtIfImpl","sourcecode":"if (int == 0)\n    int += 48;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ConfigSnapshot:116","type":"CtWhileImpl","sourcecode":"while (int < (java.util.List<org.eclipse.jgit.lib.ConfigLine>.size())) {\n    org.eclipse.jgit.lib.ConfigLine org.eclipse.jgit.lib.ConfigLine = java.util.List<org.eclipse.jgit.lib.ConfigLine>.get(int++);\n    if (!(org.eclipse.jgit.lib.ConfigLine.match(java.lang.String, java.lang.String)))\n        break;\n    \n    if ((org.eclipse.jgit.lib.ConfigLine.java.lang.String) == null)\n        continue;\n    \n    java.lang.String java.lang.String = org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.toLowerCase(org.eclipse.jgit.lib.ConfigLine.java.lang.String);\n    if (!(java.util.Map<java.lang.String, java.lang.String>.containsKey(java.lang.String)))\n        java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String, org.eclipse.jgit.lib.ConfigLine.java.lang.String);\n    \n}"},"status":-1},{"failures":[5,1,2,3,4,0],"tindex":"7ad5137b-c879-11e4-882d-d71373ec9a86","variableMapping":{"update":"rup"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.DeleteBranchCommand:141","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(\"branch deleted\", false)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:1226","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId(org.eclipse.jgit.revwalk.RevCommit)"},"status":-1},{"failures":[],"tindex":"7ad5137c-c879-11e4-882d-e11ee4dd0845","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.UnionInputStream:195","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation:105","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException"},"status":-2},{"failures":[2,3,4,5,1,0],"tindex":"7ad5137d-c879-11e4-882d-5bbfb382814a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleWriter:205","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.PackWriter.setDeltaBaseAsOffset(true)"},"status":-1},{"failures":[],"tindex":"7ad5137e-c879-11e4-882d-075af0a18d2c","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:678","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[20]"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.HMACSHA1NonceGenerator:96","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[]"},"status":-2},{"failures":[],"tindex":"7ad5137f-c879-11e4-882d-5324f5e6f8fb","variableMapping":{"in":"in","limit":"max","length":"length","this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.IO:101","type":"CtTryImpl","sourcecode":"try {\n    byte[] byte[] = new byte[int];\n    int int = 0;\n    for ( ;  ; ) {\n        int int = java.io.FileInputStream.read(byte[], int, ((byte[].int) - int));\n        if (int <= 0)\n            break;\n        \n        int += int;\n    }\n    if (int == (byte[].int))\n        return byte[];\n    \n    byte[] byte[] = new byte[int];\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], 0, int);\n    return byte[];\n} finally {\n    try {\n        java.io.FileInputStream.close();\n    } catch (java.io.IOException java.io.IOException) {\n    }\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.IO:141","type":"CtTryImpl","sourcecode":"try {\n    long long = java.lang.Math.java.lang.Math.max(java.io.File.length(), 1);\n    if (long > int)\n        throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File));\n    \n    byte[] byte[] = new byte[((int)(long))];\n    int int = 0;\n    for ( ;  ; ) {\n        if ((byte[].int) == int) {\n            if ((byte[].int) == int) {\n                int int = java.io.FileInputStream.read();\n                if (int < 0)\n                    break;\n                \n                throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File));\n            } \n            byte[] byte[] = new byte[java.lang.Math.java.lang.Math.min(((byte[].int) * 2), int)];\n            java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], 0, int);\n            byte[] = byte[];\n        } \n        int int = java.io.FileInputStream.read(byte[], int, ((byte[].int) - int));\n        if (int < 0)\n            break;\n        \n        int += int;\n    }\n    if (int < (byte[].int)) {\n        byte[] byte[] = new byte[int];\n        java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], 0, int);\n        byte[] = byte[];\n    } \n    return byte[];\n} finally {\n    try {\n        java.io.FileInputStream.close();\n    } catch (java.io.IOException java.io.IOException) {\n    }\n}"},"status":-2},{"failures":[],"tindex":"7ad51380-c879-11e4-882d-07e0ba2abe96","variableMapping":{"org.eclipse.jgit.dircache.DirCacheIterator.class":"org.eclipse.jgit.dircache.DirCacheIterator.class","walk":"tw"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ResetCommand:369","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheIterator org.eclipse.jgit.dircache.DirCacheIterator = org.eclipse.jgit.treewalk.TreeWalk.getTree(1, org.eclipse.jgit.dircache.DirCacheIterator.org.eclipse.jgit.dircache.DirCacheIterator)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.IndexDiffFilter:139","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheIterator org.eclipse.jgit.dircache.DirCacheIterator = org.eclipse.jgit.treewalk.TreeWalk.getTree(int, org.eclipse.jgit.dircache.DirCacheIterator.org.eclipse.jgit.dircache.DirCacheIterator)"},"status":-2},{"failures":[],"tindex":"7ad51381-c879-11e4-882d-7f45564973d5","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.WalkPushConnection:286","type":"CtLocalVariableImpl","sourcecode":"final java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String>()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevCommit:589","type":"CtLocalVariableImpl","sourcecode":"final java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String>(java.util.List<org.eclipse.jgit.revwalk.FooterLine>.size())"},"status":-2},{"failures":[],"tindex":"7ad51382-c879-11e4-882d-d5c856eed82b","variableMapping":{"cur":"offset","end":"offset"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:151","type":"CtIfImpl","sourcecode":"if ((int) <= (int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.PersonIdent:273","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    char = '-';\n    int = -int;\n} else {\n    char = '+';\n}"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"7ad51383-c879-11e4-882d-b30d7d918dc6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:429","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (char[].int) ; ++int) {\n    switch (char[][int]) {\n        case '^' :\n            if (org.eclipse.jgit.revwalk.RevObject == null) {\n                if (java.lang.String == null)\n                    if (int == 0)\n                        java.lang.String = new java.lang.String(char[] , int , int);\n                    else {\n                        int = int + 1;\n                        break;\n                    }\n                \n                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.parseSimple(org.eclipse.jgit.revwalk.RevWalk, java.lang.String);\n                java.lang.String = null;\n                if (org.eclipse.jgit.revwalk.RevObject == null)\n                    return null;\n                \n            } \n            if ((int + 1) < (char[].int)) {\n                switch (char[][(int + 1)]) {\n                    case '0' :\n                    case '1' :\n                    case '2' :\n                    case '3' :\n                    case '4' :\n                    case '5' :\n                    case '6' :\n                    case '7' :\n                    case '8' :\n                    case '9' :\n                        int int;\n                        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n                        for (int = int + 1 ; int < (char[].int) ; ++int) {\n                            if (!java.lang.Character.(java.lang.Character.isDigit(char[][int])))\n                                break;\n                            \n                        }\n                        java.lang.String java.lang.String = new java.lang.String(char[] , (int + 1) , ((int - int) - 1));\n                        int int;\n                        try {\n                            int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n                        } catch (java.lang.NumberFormatException java.lang.NumberFormatException) {\n                            throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n                        }\n                        if (int != 0) {\n                            org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                            if (int > (org.eclipse.jgit.revwalk.RevCommit.getParentCount()))\n                                org.eclipse.jgit.revwalk.RevObject = null;\n                            else\n                                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent((int - 1));\n                            \n                        } \n                        int = int - 1;\n                        int = int;\n                        break;\n                    case '{' :\n                        int int;\n                        java.lang.String java.lang.String = null;\n                        for (int = int + 2 ; int < (char[].int) ; ++int) {\n                            if ((char[][int]) == '}') {\n                                java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n                                break;\n                            } \n                        }\n                        int = int;\n                        if (java.lang.String != null)\n                            if (java.lang.String.equals(\"tree\")) {\n                                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n                            } else if (java.lang.String.equals(\"commit\")) {\n                                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n                            } else if (java.lang.String.equals(\"blob\")) {\n                                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                                if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevBlob))\n                                    throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                                \n                            } else if (java.lang.String.equals(\"\")) {\n                                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                            } else\n                                throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                            \n                        else\n                            throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                        \n                        int = int;\n                        break;\n                    default :\n                        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                        if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n                            org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                            if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n                                org.eclipse.jgit.revwalk.RevObject = null;\n                            else\n                                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                            \n                        } else\n                            throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                        \n                }\n            } else {\n                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n                    org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                    if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n                        org.eclipse.jgit.revwalk.RevObject = null;\n                    else\n                        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                    \n                } else\n                    throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                \n            }\n            int = int + 1;\n            break;\n        case '~' :\n            if (org.eclipse.jgit.revwalk.RevObject == null) {\n                if (java.lang.String == null)\n                    if (int == 0)\n                        java.lang.String = new java.lang.String(char[] , int , int);\n                    else {\n                        int = int + 1;\n                        break;\n                    }\n                \n                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.parseSimple(org.eclipse.jgit.revwalk.RevWalk, java.lang.String);\n                java.lang.String = null;\n                if (org.eclipse.jgit.revwalk.RevObject == null)\n                    return null;\n                \n            } \n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n            if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit))\n                throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n            \n            int int;\n            for (int = int + 1 ; int < (char[].int) ; ++int) {\n                if (!java.lang.Character.(java.lang.Character.isDigit(char[][int])))\n                    break;\n                \n            }\n            int int;\n            if ((int - int) > 1) {\n                java.lang.String java.lang.String = new java.lang.String(char[] , (int + 1) , ((int - int) - 1));\n                try {\n                    int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n                } catch (java.lang.NumberFormatException java.lang.NumberFormatException) {\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n                }\n            } else\n                int = 1;\n            \n            while (int > 0) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0) {\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                    break;\n                } \n                org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                org.eclipse.jgit.revwalk.RevWalk.parseHeaders(org.eclipse.jgit.revwalk.RevCommit);\n                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit;\n                --int;\n            }\n            int = int - 1;\n            int = int;\n            break;\n        case '@' :\n            if (org.eclipse.jgit.revwalk.RevObject != null)\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n            \n            if (((int + 1) < (char[].int)) && ((char[][(int + 1)]) != '{'))\n                continue;\n            \n            int int;\n            java.lang.String java.lang.String = null;\n            for (int = int + 2 ; int < (char[].int) ; ++int) {\n                if ((char[][int]) == '}') {\n                    java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n                    break;\n                } \n            }\n            if (java.lang.String != null) {\n                if (java.lang.String.equals(\"upstream\")) {\n                    if (java.lang.String == null)\n                        java.lang.String = new java.lang.String(char[] , int , int);\n                    \n                    if (java.lang.String.equals(\"\"))\n                        java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n                    \n                    if (!org.eclipse.jgit.lib.Repository.(org.eclipse.jgit.lib.Repository.isValidRefName((\"x/\" + java.lang.String))))\n                        throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                    \n                    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(java.lang.String);\n                    java.lang.String = null;\n                    if (org.eclipse.jgit.lib.Ref == null)\n                        return null;\n                    \n                    if (org.eclipse.jgit.lib.Ref.isSymbolic())\n                        org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Ref.getLeaf();\n                    \n                    java.lang.String = org.eclipse.jgit.lib.Ref.getName();\n                    org.eclipse.jgit.transport.RemoteConfig org.eclipse.jgit.transport.RemoteConfig;\n                    try {\n                        org.eclipse.jgit.transport.RemoteConfig = new org.eclipse.jgit.transport.RemoteConfig(org.eclipse.jgit.lib.Repository.getConfig() , \"origin\");\n                    } catch (java.net.URISyntaxException java.net.URISyntaxException) {\n                        throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                    }\n                    java.lang.String java.lang.String = org.eclipse.jgit.lib.Repository.getConfig().getString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, org.eclipse.jgit.lib.Repository.org.eclipse.jgit.lib.Repository.shortenRefName(org.eclipse.jgit.lib.Ref.getName()), org.eclipse.jgit.lib.ConfigConstants.java.lang.String);\n                    java.util.List<org.eclipse.jgit.transport.RefSpec> java.util.List<org.eclipse.jgit.transport.RefSpec> = org.eclipse.jgit.transport.RemoteConfig.getFetchRefSpecs();\n                    for (org.eclipse.jgit.transport.RefSpec org.eclipse.jgit.transport.RefSpec : java.util.List<org.eclipse.jgit.transport.RefSpec>) {\n                        if (org.eclipse.jgit.transport.RefSpec.matchSource(java.lang.String)) {\n                            org.eclipse.jgit.transport.RefSpec org.eclipse.jgit.transport.RefSpec = org.eclipse.jgit.transport.RefSpec.expandFromSource(java.lang.String);\n                            java.lang.String = org.eclipse.jgit.transport.RefSpec.getDestination();\n                            break;\n                        } \n                    }\n                    if (java.lang.String == null)\n                        throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                    \n                } else if (java.lang.String.matches(\"^-\\\\d+$\")) {\n                    if (java.lang.String != null)\n                        throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                    else {\n                        java.lang.String java.lang.String = org.eclipse.jgit.lib.Repository.resolveReflogCheckout(-java.lang.Integer.(java.lang.Integer.parseInt(java.lang.String)));\n                        if (org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.isId(java.lang.String))\n                            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.parseSimple(org.eclipse.jgit.revwalk.RevWalk, java.lang.String);\n                        else\n                            java.lang.String = java.lang.String;\n                        \n                    }\n                } else {\n                    if (java.lang.String == null)\n                        java.lang.String = new java.lang.String(char[] , int , int);\n                    \n                    if (java.lang.String.equals(\"\"))\n                        java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n                    \n                    if (!org.eclipse.jgit.lib.Repository.(org.eclipse.jgit.lib.Repository.isValidRefName((\"x/\" + java.lang.String))))\n                        throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                    \n                    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(java.lang.String);\n                    java.lang.String = null;\n                    if (org.eclipse.jgit.lib.Ref == null)\n                        return null;\n                    \n                    if (org.eclipse.jgit.lib.Ref.isSymbolic())\n                        org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Ref.getLeaf();\n                    \n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.resolveReflog(org.eclipse.jgit.revwalk.RevWalk, org.eclipse.jgit.lib.Ref, java.lang.String);\n                }\n                int = int;\n            } else\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n            \n            break;\n        case ':' :\n            {\n                org.eclipse.jgit.revwalk.RevTree org.eclipse.jgit.revwalk.RevTree;\n                if (org.eclipse.jgit.revwalk.RevObject == null) {\n                    if (java.lang.String == null)\n                        java.lang.String = new java.lang.String(char[] , int , int);\n                    \n                    if (java.lang.String.equals(\"\"))\n                        java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n                    \n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.parseSimple(org.eclipse.jgit.revwalk.RevWalk, java.lang.String);\n                    java.lang.String = null;\n                } \n                if (org.eclipse.jgit.revwalk.RevObject == null)\n                    return null;\n                \n                org.eclipse.jgit.revwalk.RevTree = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n                if (int == ((char[].int) - 1))\n                    return org.eclipse.jgit.revwalk.RevTree.copy();\n                \n                org.eclipse.jgit.treewalk.TreeWalk org.eclipse.jgit.treewalk.TreeWalk = org.eclipse.jgit.treewalk.TreeWalk.org.eclipse.jgit.treewalk.TreeWalk.forPath(org.eclipse.jgit.revwalk.RevWalk.getObjectReader(), new java.lang.String(char[] , (int + 1) , (((char[].int) - int) - 1)), org.eclipse.jgit.revwalk.RevTree);\n                return org.eclipse.jgit.treewalk.TreeWalk != null ? org.eclipse.jgit.treewalk.TreeWalk.getObjectId(0) : null;\n            }\n        default :\n            if (org.eclipse.jgit.revwalk.RevObject != null)\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n            \n    }\n}"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":18,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":17,"org.eclipse.jgit.util.HookTest.testCommitMsgHookReceivesCorrectParameter":6,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":20,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":13,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":10,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":12,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenMissing":16,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":11,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":15,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":0,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":1,"org.eclipse.jgit.util.HookTest.testCommitMsgHookCanModifyCommitMessage":8,"org.eclipse.jgit.util.HookTest.testFailedCommitMsgHookBlocksCommit":7,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":5,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":14,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":19,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestMissingThenSymlink":9}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

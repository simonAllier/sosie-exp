[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"df262ec3-c85e-11e4-bd2d-1959382c0c36","variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.ReceivePack:161","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.ReceivePack.service()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.ReceivePack:204","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.BaseReceivePack.validateCommands()"},"status":-1},{"failures":[0,1,2,10,14,9],"tindex":"df2655d4-c85e-11e4-bd2d-1d0d9221be6a","variableMapping":{"writer":"w"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.FS:1145","type":"CtInvocationImpl","sourcecode":"java.io.BufferedWriter.flush()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.FetchProcess:326","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.FetchHeadRecord.write(java.io.Writer)"},"status":-1},{"failures":[9,10,0,1,2,14],"tindex":"df2655d5-c85e-11e4-bd2d-2b823bcb621d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:541","type":"CtForImpl","sourcecode":"SEND_HAVES : for ( ;  ; ) {\n    final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.next();\n    if (org.eclipse.jgit.revwalk.RevCommit == null)\n        break SEND_HAVES;\n    \n    org.eclipse.jgit.transport.PacketLineOut.writeString(((\"have \" + (org.eclipse.jgit.revwalk.RevCommit.getId().name())) + \"\\n\"));\n    int++;\n    int++;\n    if ((31 & int) != 0) {\n        continue;\n    } \n    if (org.eclipse.jgit.lib.ProgressMonitor.isCancelled())\n        throw new org.eclipse.jgit.transport.BasePackFetchConnection.CancelledException();\n    \n    org.eclipse.jgit.transport.PacketLineOut.end();\n    int++;\n    if ((int == 32) && (!(boolean))) {\n        continue;\n    } \n    READ_RESULT : for ( ;  ; ) {\n        final org.eclipse.jgit.transport.PacketLineIn.AckNackResult org.eclipse.jgit.transport.PacketLineIn.AckNackResult = org.eclipse.jgit.transport.PacketLineIn.readACK(org.eclipse.jgit.lib.MutableObjectId);\n        switch (org.eclipse.jgit.transport.PacketLineIn.AckNackResult) {\n            case NAK :\n                int--;\n                break READ_RESULT;\n            case ACK :\n                org.eclipse.jgit.transport.GitProtocolConstants.MultiAck = org.eclipse.jgit.transport.GitProtocolConstants.MultiAck.org.eclipse.jgit.transport.GitProtocolConstants.MultiAck;\n                int = 0;\n                boolean = true;\n                if (boolean)\n                    org.eclipse.jgit.util.TemporaryBuffer.Heap.writeTo(java.io.OutputStream, null);\n                \n                break SEND_HAVES;\n            case ACK_CONTINUE :\n            case ACK_COMMON :\n            case ACK_READY :\n                org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevWalk.parseAny(org.eclipse.jgit.lib.MutableObjectId), org.eclipse.jgit.transport.PacketLineIn.AckNackResult);\n                boolean = true;\n                boolean = true;\n                int = 0;\n                if (org.eclipse.jgit.transport.PacketLineIn.AckNackResult == (org.eclipse.jgit.transport.PacketLineIn.AckNackResult.org.eclipse.jgit.transport.PacketLineIn.AckNackResult))\n                    boolean = true;\n                \n                break;\n        }\n        if (org.eclipse.jgit.lib.ProgressMonitor.isCancelled())\n            throw new org.eclipse.jgit.transport.BasePackFetchConnection.CancelledException();\n        \n    }\n    if ((boolean) & boolean)\n        break SEND_HAVES;\n    \n    if (boolean)\n        org.eclipse.jgit.util.TemporaryBuffer.Heap.writeTo(java.io.OutputStream, null);\n    \n    if (boolean && (int > (org.eclipse.jgit.transport.BasePackFetchConnection.int))) {\n        break SEND_HAVES;\n    } \n}"},"status":-1},{"failures":[9,15,0,1,2,14,10,16],"tindex":"df2655d6-c85e-11e4-bd2d-a3c052a33277","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.filter.IndexDiffFilter:271","type":"CtReturnImpl","sourcecode":"return \"INDEX_DIFF_FILTER\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RelativeDateFormatter:107","type":"CtReturnImpl","sourcecode":"return java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.util.RelativeDateFormatter.org.eclipse.jgit.util.RelativeDateFormatter.round(long, org.eclipse.jgit.util.RelativeDateFormatter.long))"},"status":-1},{"failures":[0,1,2,9,10,14],"tindex":"df2655d7-c85e-11e4-bd2d-cd7655f39080","variableMapping":{"this":"this","id":"packName"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.GC:765","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String, \".pack\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:230","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String, (\".\" + (org.eclipse.jgit.internal.storage.pack.PackExt.getExtension())))"},"status":-1},{"failures":[0,1,2,9,10,14],"tindex":"df2655d8-c85e-11e4-bd2d-25d6e762f6db","variableMapping":{"revWalk":"walk"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.GC:635","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.dispose()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:264","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.carry(org.eclipse.jgit.revwalk.RevFlag)"},"status":-1},{"failures":[],"tindex":"df2655d9-c85e-11e4-bd2d-45f0e9a1408c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Config:404","type":"CtLocalVariableImpl","sourcecode":"T T = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:479","type":"CtLocalVariableImpl","sourcecode":"T T = org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.((T)(scan(java.util.concurrent.atomic.AtomicReferenceArray<org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.HashEntry>.get(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long)), org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long)))"},"status":-2},{"failures":[0,1,2,9,10,14],"tindex":"df2655da-c85e-11e4-bd2d-0f3ac10cb2b8","variableMapping":{"this":"this","pack":"pack"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCursor:122","type":"CtReturnImpl","sourcecode":"return java.util.Collections.java.util.Collections.<org.eclipse.jgit.internal.storage.pack.CachedPack>singletonList(new org.eclipse.jgit.internal.storage.file.LocalCachedPack(java.util.Collections.java.util.Collections.singletonList(org.eclipse.jgit.internal.storage.file.PackFile)))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.WindowCursor:121","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder.removeAllOrNone(org.eclipse.jgit.internal.storage.file.PackBitmapIndex))\n    return java.util.Collections.java.util.Collections.<org.eclipse.jgit.internal.storage.pack.CachedPack>singletonList(new org.eclipse.jgit.internal.storage.file.LocalCachedPack(java.util.Collections.java.util.Collections.singletonList(org.eclipse.jgit.internal.storage.file.PackFile)));\n"},"status":-1},{"failures":[0,1,2,10,17,18,19,9,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,14,47,48,49,50,51,52,53],"tindex":"df2655db-c85e-11e4-bd2d-a774033ed668","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:1014","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.NameConflictTreeWalk.addTree(org.eclipse.jgit.treewalk.WorkingTreeIterator)"},"status":-1},{"failures":[0,1,2,9,10,14],"tindex":"df2655dc-c85e-11e4-bd2d-21d040bea4a2","variableMapping":{"cnt":"emailE"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.AutoCRLFInputStream:105","type":"CtIfImpl","sourcecode":"if ((int) == (-1))\n    return -1;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:213","type":"CtIfImpl","sourcecode":"if ((int + 1) == int)\n    return -1;\n"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":35,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":41,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.api.MergeCommandTest.testMergeFailingWithDirtyWorkingTree":19,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":45,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":50,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.StashApplyCommandTest.multipleEdits":25,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingFilesWithTreeInIndex":40,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithWorkingDirectory":32,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":10,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentConflict":22,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":47,"org.eclipse.jgit.api.StashApplyCommandTest.testApplyStashWithDeletedFile":38,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickDirtyWorktree":20,"org.eclipse.jgit.api.StashApplyCommandTest.indexAdd":28,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":48,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":51,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":11,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":14,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexAdd":30,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":6,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":27,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":52,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":9,"org.eclipse.jgit.transport.TestProtocolTest.testReceivePackFactory":13,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryCleanIndexModify":24,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":33,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":37,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":44,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":26,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":49,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithoutNonNoteConflict":43,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":3,"org.eclipse.jgit.api.PushCommandTest.testPush":5,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":8,"org.eclipse.jgit.transport.TestProtocolTest.testPush":12,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":29,"org.eclipse.jgit.util.RelativeDateFormatterTest.testFormatWeeks":16,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":4,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyWorktree":17,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexEdit":31,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDelete":34,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":53,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":23,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":7,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithNonNoteConflict":42,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithCommit":39,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":46,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyWorktree":18,"org.eclipse.jgit.api.RevertCommandTest.testRevertDirtyWorktree":21,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileNotIncluded":36,"org.eclipse.jgit.util.GitDateFormatterTest.RELATIVE":15}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

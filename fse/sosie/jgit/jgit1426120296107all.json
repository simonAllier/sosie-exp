[{"failures":[],"tindex":"25e71469-c84f-11e4-a66f-9159d24f6e90","variableMapping":{"org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.ALL":"ignoreSubmoduleMode","localIgnoreSubmoduleMode":"org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.DIRTY","smw":"smw"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.IndexDiff:521","type":"CtTryImpl","sourcecode":"try {\n    if (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode == null)\n        org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode = org.eclipse.jgit.submodule.SubmoduleWalk.getModulesIgnore();\n    \n    if (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.equals(org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode))\n        continue;\n    \n} catch (org.eclipse.jgit.errors.ConfigInvalidException org.eclipse.jgit.errors.ConfigInvalidException) {\n    java.io.IOException java.io.IOException = new java.io.IOException((\"Found invalid ignore param for submodule \" + (org.eclipse.jgit.submodule.SubmoduleWalk.getPath())));\n    java.io.IOException.initCause(org.eclipse.jgit.errors.ConfigInvalidException);\n    throw java.io.IOException;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.IndexDiff:536","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(\"HEAD\");\n    if ((org.eclipse.jgit.lib.ObjectId != null) && (!(org.eclipse.jgit.lib.ObjectId.equals(org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId()))))\n        java.util.Set<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n    else if ((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) != (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) {\n        org.eclipse.jgit.lib.IndexDiff org.eclipse.jgit.lib.IndexDiff = java.util.Map<java.lang.String, org.eclipse.jgit.lib.IndexDiff>.get(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n        if (org.eclipse.jgit.lib.IndexDiff == null) {\n            org.eclipse.jgit.lib.IndexDiff = new org.eclipse.jgit.lib.IndexDiff(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId() , org.eclipse.jgit.lib.IndexDiff.WorkingTreeIteratorFactory.getWorkingTreeIterator(org.eclipse.jgit.lib.Repository));\n            java.util.Map<java.lang.String, org.eclipse.jgit.lib.IndexDiff>.put(org.eclipse.jgit.submodule.SubmoduleWalk.getPath(), org.eclipse.jgit.lib.IndexDiff);\n        } \n        if (org.eclipse.jgit.lib.IndexDiff.diff()) {\n            if ((((((((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) == (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) && (org.eclipse.jgit.lib.IndexDiff.getAdded().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getChanged().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getConflicting().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getMissing().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getModified().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getRemoved().isEmpty())) {\n                continue;\n            } \n            java.util.Set<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n        } \n    } \n} finally {\n    org.eclipse.jgit.lib.Repository.close();\n}"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"25fa273a-c84f-11e4-a66f-c333d0f0d8ce","variableMapping":{"pattern":"line"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter:109","type":"CtIfImpl","sourcecode":"if ((!(java.lang.String.startsWith(\"^\"))) && (!(java.lang.String.startsWith(\".*\"))))\n    java.lang.String = \".*\" + java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkRemoteObjectDatabase:443","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    break;\n"},"status":-1},{"failures":[],"tindex":"25fa273b-c84f-11e4-a66f-3b96b3028cea","variableMapping":{"bBuf":"buf","aPos":"cnt","aBuf":"buf","bPos":"cnt"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.NonNoteEntry:85","type":"CtLocalVariableImpl","sourcecode":"int int = ((byte[][int++]) & 255) - ((byte[][int++]) & 255)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.IO:105","type":"CtLocalVariableImpl","sourcecode":"int int = java.io.FileInputStream.read(byte[], int, ((byte[].int) - int))"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"25fa273c-c84f-11e4-a66f-dd2b7c8b8772","variableMapping":{"peerHas":"notAdvertisedWants"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:1037","type":"CtInvocationImpl","sourcecode":"java.util.List<org.eclipse.jgit.lib.ObjectId>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:1045","type":"CtIfImpl","sourcecode":"if (java.util.List<org.eclipse.jgit.lib.ObjectId> == null)\n    java.util.List<org.eclipse.jgit.lib.ObjectId> = new java.util.ArrayList<org.eclipse.jgit.lib.ObjectId>();\n"},"status":-1},{"failures":[1,0,2,3,4,5],"tindex":"25fa273d-c84f-11e4-a66f-0345b658a982","variableMapping":{"childOnLane":"p","child":"p"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revplot.PlotCommitList:223","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revplot.PlotCommit == org.eclipse.jgit.revplot.PlotCommit)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.DescribeCommand:294","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag.org.eclipse.jgit.revwalk.RevFlag)"},"status":-1},{"failures":[],"tindex":"25fa273e-c84f-11e4-a66f-516d99bcff70","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:353","type":"CtLocalVariableImpl","sourcecode":"java.util.Collection<java.lang.String> java.util.Collection<java.lang.String> = new java.util.HashSet<java.lang.String>()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:292","type":"CtLocalVariableImpl","sourcecode":"java.util.Collection<java.lang.String> java.util.Collection<java.lang.String> = org.eclipse.jgit.lib.BatchRefUpdate.org.eclipse.jgit.lib.BatchRefUpdate.getTakenPrefixes(java.util.Collection<java.lang.String>)"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"25fa273f-c84f-11e4-a66f-fdf949f0a5dd","variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:543","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.assertNotStarted()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevWalk:415","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.reset(((~(int)) & (org.eclipse.jgit.revwalk.RevWalk.int)))"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"25fa4e50-c84f-11e4-a66f-6fee53fc50c1","variableMapping":{"this":"repo"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.Repository:995","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.Repository.isBare())\n    throw new org.eclipse.jgit.errors.NoWorkTreeException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:1045","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.eclipse.jgit.lib.RebaseTodoLine>.size()) > 0) {\n    org.eclipse.jgit.lib.Repository.writeRebaseTodoFile(org.eclipse.jgit.api.RebaseCommand.RebaseState.getPath(org.eclipse.jgit.api.RebaseCommand.java.lang.String), java.util.List<org.eclipse.jgit.lib.RebaseTodoLine>, true);\n} "},"status":-1},{"failures":[],"tindex":"25fa4e51-c84f-11e4-a66f-b95bccc1f07b","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:736","type":"CtReturnImpl","sourcecode":"return ((B)(this))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:199","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.self()"},"status":-2},{"failures":[],"tindex":"25fa4e52-c84f-11e4-a66f-bf36f918d959","variableMapping":{"refs":"refs"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1513","type":"CtAssignmentImpl","sourcecode":"java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:676","type":"CtAssignmentImpl","sourcecode":"java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.lib.Repository.getRefDatabase().getRefs(org.eclipse.jgit.lib.RefDatabase.java.lang.String)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":0,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":1,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

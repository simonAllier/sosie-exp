[{"failures":[0,1,2,3,4,5,6,7],"tindex":"0f1a6362-c84a-11e4-a7ac-75ab50e0edd4","variableMapping":{"c":"srcCommit"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.DepthGenerator:173","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.revwalk.DepthWalk.Commit"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:176","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit)) {\n    if (org.eclipse.jgit.lib.AnyObjectId.org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.revwalk.RevCommit.getTree().getId(), org.eclipse.jgit.merge.ResolveMerger.getResultTreeId()))\n        continue;\n    \n    org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.revwalk.RevCommit.getTree() , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.merge.ResolveMerger.getResultTreeId());\n    org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n    org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n    org.eclipse.jgit.revwalk.RevCommit = new org.eclipse.jgit.api.Git(org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.revwalk.RevCommit>.getRepository()).commit().setMessage(java.lang.String).setReflogComment((\"revert: \" + java.lang.String)).call();\n    java.util.List<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.Ref);\n    org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n} else {\n    java.util.List<java.lang.String> = org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths();\n    java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> = org.eclipse.jgit.merge.ResolveMerger.getFailingPaths();\n    if (java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> != null)\n        org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n    else\n        org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n    \n    if ((!(org.eclipse.jgit.merge.ResolveMerger.failed())) && (!(java.util.List<java.lang.String>.isEmpty()))) {\n        java.lang.String java.lang.String = new org.eclipse.jgit.merge.MergeMessageFormatter().formatWithConflicts(java.lang.String, org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths());\n        org.eclipse.jgit.lib.Repository.writeRevertHead(org.eclipse.jgit.revwalk.RevCommit.getId());\n        org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(java.lang.String);\n    } \n    return null;\n}"},"status":-1},{"failures":[5,6,7,8,3,2,4,9,10],"tindex":"0f1a8a73-c84a-11e4-a7ac-6f1b75ac214c","variableMapping":{"bitmaps":"bitmaps","this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1:125","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1.writeBitmaps(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1:123","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1.writeBitmap(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder.getBlobs())"},"status":-1},{"failures":[2,3,4,5,6,7],"tindex":"0f1a8a74-c84a-11e4-a7ac-0fc375f8c8cc","variableMapping":{"len":"skipped"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:480","type":"CtIfImpl","sourcecode":"if (0 <= long)\n    return long;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.UnionInputStream:164","type":"CtWhileImpl","sourcecode":"while (0 < long) {\n    final java.io.InputStream java.io.InputStream = org.eclipse.jgit.util.io.UnionInputStream.head();\n    final long long = java.io.InputStream.skip(long);\n    if (0 < long) {\n        long += long;\n        long -= long;\n    } else if (java.io.InputStream == (org.eclipse.jgit.util.io.UnionInputStream.java.io.InputStream)) {\n        return long;\n    } else {\n        final int int = java.io.InputStream.read();\n        if (int < 0) {\n            org.eclipse.jgit.util.io.UnionInputStream.pop();\n            if (0 < long)\n                break;\n            \n        } else {\n            long += 1;\n            long -= 1;\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"0f1a8a75-c84a-11e4-a7ac-c555679f680a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:439","type":"CtContinueImpl","sourcecode":"continue"},"status":-2},{"failures":[],"tindex":"0f1a8a76-c84a-11e4-a7ac-a7d3ec433384","variableMapping":{"errorThread":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportGitSsh:296","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.util.io.StreamCopyThread) != null) {\n    try {\n        org.eclipse.jgit.util.io.StreamCopyThread.halt();\n    } catch (java.lang.InterruptedException java.lang.InterruptedException) {\n    } finally {\n        org.eclipse.jgit.util.io.StreamCopyThread = null;\n    }\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.StreamCopyThread:145","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.interrupt()"},"status":-2},{"failures":[],"tindex":"0f1a8a77-c84a-11e4-a7ac-e554fba2de8f","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:696","type":"CtLocalVariableImpl","sourcecode":"final int int = 3 << 12"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:1053","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[5,6,7,2,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,4,27,28,29,30,31,3],"tindex":"0f1a8a78-c84a-11e4-a7ac-e1ba5a4d4166","variableMapping":{"fullNewName":"remote","newName":"remote","org.eclipse.jgit.lib.Constants.R_REMOTES":"branchName"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RenameBranchCommand:129","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (org.eclipse.jgit.lib.Constants.java.lang.String) + (java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.PullCommand:214","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.eclipse.jgit.lib.Config.getString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String, org.eclipse.jgit.lib.ConfigConstants.java.lang.String)"},"status":-1},{"failures":[32,33,34,35,36,2,4,3,37,38,39,5,6,7,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"0f1a8a79-c84a-11e4-a7ac-df131b0d5837","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.ignore.FastIgnoreRule:87","type":"CtReturnImpl","sourcecode":"return "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.HistogramDiff:159","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.diff.HistogramDiff.State<S>.diff(java.util.List<org.eclipse.jgit.diff.Edit>.remove(((java.util.List<org.eclipse.jgit.diff.Edit>.size()) - 1)))"},"status":-1},{"failures":[],"tindex":"0f1a8a7a-c84a-11e4-a7ac-2f0938ff85bf","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCursor:242","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:754","type":"CtLocalVariableImpl","sourcecode":"final java.security.MessageDigest java.security.MessageDigest = org.eclipse.jgit.lib.Constants.org.eclipse.jgit.lib.Constants.newMessageDigest()"},"status":-2},{"failures":[],"tindex":"0f1a8a7b-c84a-11e4-a7ac-65de5d2556f7","variableMapping":{"this":"rw"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1205","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.reset(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:445","type":"CtIfImpl","sourcecode":"if ((int + 1) < (char[].int)) {\n    switch (char[][(int + 1)]) {\n        case '0' :\n        case '1' :\n        case '2' :\n        case '3' :\n        case '4' :\n        case '5' :\n        case '6' :\n        case '7' :\n        case '8' :\n        case '9' :\n            int int;\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n            for (int = int + 1 ; int < (char[].int) ; ++int) {\n                if (!java.lang.Character.(java.lang.Character.isDigit(char[][int])))\n                    break;\n                \n            }\n            java.lang.String java.lang.String = new java.lang.String(char[] , (int + 1) , ((int - int) - 1));\n            int int;\n            try {\n                int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n            } catch (java.lang.NumberFormatException java.lang.NumberFormatException) {\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n            }\n            if (int != 0) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if (int > (org.eclipse.jgit.revwalk.RevCommit.getParentCount()))\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent((int - 1));\n                \n            } \n            int = int - 1;\n            int = int;\n            break;\n        case '{' :\n            int int;\n            java.lang.String java.lang.String = null;\n            for (int = int + 2 ; int < (char[].int) ; ++int) {\n                if ((char[][int]) == '}') {\n                    java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n                    break;\n                } \n            }\n            int = int;\n            if (java.lang.String != null)\n                if (java.lang.String.equals(\"tree\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n                } else if (java.lang.String.equals(\"commit\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n                } else if (java.lang.String.equals(\"blob\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                    if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevBlob))\n                        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                    \n                } else if (java.lang.String.equals(\"\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                } else\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                \n            else\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n            \n            int = int;\n            break;\n        default :\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n            if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                \n            } else\n                throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n            \n    }\n} else {\n    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n    if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n            org.eclipse.jgit.revwalk.RevObject = null;\n        else\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n        \n    } else\n        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n    \n}"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":11,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":7,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_DuplicateAButCommonUniqueInB":49,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_MoveBlock":48,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":0,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":5,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_UniqueCommonLargerThanMatchPoint":51,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":31,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":2,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":28,"org.eclipse.jgit.merge.MergeAlgorithmTest.testNoAgainstOneModification":36,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_NoUniqueMiddleSide_FlipBlocks":43,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":39,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":20,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge1":41,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":42,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_CommonGrowsPrefixAndSuffix":53,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":23,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_NoUniqueMiddleSide_FlipAndExpand":44,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":27,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":32,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_InvertBlocks":52,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_InsertNearCommonTail":50,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":33,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoSimilarModsAndOneInsert":35,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":30,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":18,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":17,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":37,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":8,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":19,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":21,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoComplicatedModifications":34,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_ReplaceCommonDelete":46,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":40,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":12,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_LinuxBug":47,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":14,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":15,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":26,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":25,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultiple":1,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":6,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":16,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":24,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_LcsContainsUnique":45,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_CommonReplaceCommonDeleteCommon":54,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":29,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":10,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":9,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":22,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":38,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":13}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

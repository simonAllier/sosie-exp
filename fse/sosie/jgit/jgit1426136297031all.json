[{"failures":[0,1,2,3,4,5],"tindex":"65658132-c874-11e4-98d3-dbeebe623930","variableMapping":{"path":"ib","pathLen":"c","length":"c"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:187","type":"CtAssignmentImpl","sourcecode":"int = byte[].int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:803","type":"CtAssignmentImpl","sourcecode":"int = (byte[][int++]) & 255"},"status":-1},{"failures":[6,0,3,4,5,1,2],"tindex":"65658133-c874-11e4-98d3-f565ff46c4e3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:221","type":"CtTryImpl","sourcecode":"try {\n    final org.eclipse.jgit.revwalk.RevFlag org.eclipse.jgit.revwalk.RevFlag = org.eclipse.jgit.revwalk.RevWalk.newFlag(\"PREREQ\");\n    final org.eclipse.jgit.revwalk.RevFlag org.eclipse.jgit.revwalk.RevFlag = org.eclipse.jgit.revwalk.RevWalk.newFlag(\"SEEN\");\n    final java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String> java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String> = new java.util.HashMap<org.eclipse.jgit.lib.ObjectId, java.lang.String>();\n    final java.util.List<org.eclipse.jgit.revwalk.RevObject> java.util.List<org.eclipse.jgit.revwalk.RevObject> = new java.util.ArrayList<org.eclipse.jgit.revwalk.RevObject>();\n    for (final java.util.Map.Entry<org.eclipse.jgit.lib.ObjectId, java.lang.String> java.util.Map.Entry<org.eclipse.jgit.lib.ObjectId, java.lang.String> : java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.entrySet()) {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = java.util.Map.Entry<org.eclipse.jgit.lib.ObjectId, java.lang.String>.getKey();\n        try {\n            final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n            if (!(org.eclipse.jgit.revwalk.RevCommit.has(org.eclipse.jgit.revwalk.RevFlag))) {\n                org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag);\n                java.util.List<org.eclipse.jgit.revwalk.RevObject>.add(org.eclipse.jgit.revwalk.RevCommit);\n            } \n        } catch (org.eclipse.jgit.errors.MissingObjectException org.eclipse.jgit.errors.MissingObjectException) {\n            java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.put(org.eclipse.jgit.lib.ObjectId, java.util.Map.Entry<org.eclipse.jgit.lib.ObjectId, java.lang.String>.getValue());\n        } catch (java.io.IOException java.io.IOException) {\n            throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.ObjectId.name()) , java.io.IOException);\n        }\n    }\n    if (!(java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.isEmpty()))\n        throw new org.eclipse.jgit.errors.MissingBundlePrerequisiteException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>);\n    \n    java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>;\n    try {\n        java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.transport.Transport.org.eclipse.jgit.lib.Repository.getRefDatabase().getRefs(org.eclipse.jgit.lib.RefDatabase.java.lang.String);\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.io.IOException.getMessage() , java.io.IOException);\n    }\n    for (final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref : java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>.values()) {\n        try {\n            org.eclipse.jgit.revwalk.RevWalk.markStart(org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Ref.getObjectId()));\n        } catch (java.io.IOException java.io.IOException) {\n        }\n    }\n    int int = java.util.List<org.eclipse.jgit.revwalk.RevObject>.size();\n    try {\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit;\n        while ((org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.next()) != null) {\n            if (org.eclipse.jgit.revwalk.RevCommit.has(org.eclipse.jgit.revwalk.RevFlag)) {\n                org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag);\n                if ((--int) == 0)\n                    break;\n                \n            } \n        }\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.io.IOException);\n    }\n    if (int > 0) {\n        for (final org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject : java.util.List<org.eclipse.jgit.revwalk.RevObject>) {\n            if (!(org.eclipse.jgit.revwalk.RevObject.has(org.eclipse.jgit.revwalk.RevFlag)))\n                java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.put(org.eclipse.jgit.revwalk.RevObject, java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.get(org.eclipse.jgit.revwalk.RevObject));\n            \n        }\n        throw new org.eclipse.jgit.errors.MissingBundlePrerequisiteException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>);\n    } \n} finally {\n    org.eclipse.jgit.revwalk.RevWalk.release();\n}"},"status":-1},{"failures":[],"tindex":"65658134-c874-11e4-98d3-03980a6ebce2","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ResetCommand:345","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.treewalk.TreeWalk org.eclipse.jgit.treewalk.TreeWalk = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:628","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.treewalk.TreeWalk org.eclipse.jgit.treewalk.TreeWalk = new org.eclipse.jgit.treewalk.TreeWalk(org.eclipse.jgit.internal.storage.file.FileRepository)"},"status":-2},{"failures":[],"tindex":"65658135-c874-11e4-98d3-27a75498a0c1","variableMapping":{"obj":"id"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObjectCache:112","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ObjectId == null)\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TreeFormatter:203","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.AnyObjectId.copyRawTo(org.eclipse.jgit.util.TemporaryBuffer.Heap)"},"status":-2},{"failures":[0,3,4,5,1,2],"tindex":"65658136-c874-11e4-98d3-0f36966954ba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.events.ListenerList:139","type":"CtIfImpl","sourcecode":"if (java.util.List<org.eclipse.jgit.events.ListenerHandle> != null)\n    java.util.List<org.eclipse.jgit.events.ListenerHandle>.remove(org.eclipse.jgit.events.ListenerHandle);\n"},"status":-1},{"failures":[],"tindex":"65658137-c874-11e4-98d3-c33f6962f3fd","variableMapping":{"data":"r"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:746","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:176","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char)"},"status":-2},{"failures":[],"tindex":"65658138-c874-11e4-98d3-01c28962aee6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RmCommand:160","type":"CtLocalVariableImpl","sourcecode":"final java.io.File java.io.File = new java.io.File(org.eclipse.jgit.lib.Repository.getWorkTree() , org.eclipse.jgit.treewalk.TreeWalk.getPathString())"},"status":-2},{"failures":[],"tindex":"65658139-c874-11e4-98d3-2fb60934fc14","variableMapping":{"e":"commitTree"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.FanoutBucket:307","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.notes.NonNoteEntry.treeEntrySize()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ResetCommand:351","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.lib.ObjectId)"},"status":-2},{"failures":[],"tindex":"6565813a-c874-11e4-98d3-19e65eb69686","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1075","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"jgit receive-pack\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:462","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.eclipse.jgit.api.RebaseCommand.InteractiveHandler.modifyCommitMessage(java.lang.String)"},"status":-2},{"failures":[],"tindex":"6565813b-c874-11e4-98d3-c79eec1e8eb0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:1353","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.internal.storage.pack.PackWriter org.eclipse.jgit.internal.storage.pack.PackWriter = new org.eclipse.jgit.internal.storage.pack.PackWriter(org.eclipse.jgit.storage.pack.PackConfig , org.eclipse.jgit.revwalk.RevWalk.getObjectReader())"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":6,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

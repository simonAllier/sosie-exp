[{"failures":[0,1,2,3,4,5],"tindex":"4619c6da-c85f-11e4-bd9f-194e3729e454","variableMapping":{"sb":"v"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:246","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.HttpAuthMethod:381","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey())"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,0,1,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,115,116,116,117,117,118,119,120,121,122,123,124,125,126,127,128,129,2,3,4,5,130],"tindex":"4619edeb-c85f-11e4-bd9f-99f8acd1cce0","variableMapping":{"this":"this","bAvail":"hdrPtr"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.PackParser:1662","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PackParser.use(int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:915","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PackParser.onObjectHeader(org.eclipse.jgit.transport.PackParser.Source.org.eclipse.jgit.transport.PackParser.Source, byte[], 0, int)"},"status":-1},{"failures":[],"tindex":"4619edec-c85f-11e4-bd9f-cdce5f3248d3","variableMapping":{"newHeadId":"resultTree","headCommit":"resultTree"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.MergeCommand:379","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.revwalk.RevCommit.getId()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:1045","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId = null"},"status":-2},{"failures":[],"tindex":"4619eded-c85f-11e4-bd9f-8f7bd6a88c1b","variableMapping":{"p":"org.eclipse.jgit.lib.Constants.OBJ_TAG","pos":"deltaPos","sz":"deltaPos","curs":"curs","db":"db","typeCode":"org.eclipse.jgit.lib.Constants.OBJ_COMMIT"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:744","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:708","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = org.eclipse.jgit.internal.storage.file.WindowCursor.byte[];\n    org.eclipse.jgit.internal.storage.file.PackFile.Delta org.eclipse.jgit.internal.storage.file.PackFile.Delta = null;\n    byte[] byte[] = null;\n    int int = org.eclipse.jgit.lib.Constants.int;\n    boolean boolean = false;\n    SEARCH : for ( ;  ; ) {\n        org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n        int int = (byte[][0]) & 255;\n        final int int = (int >> 4) & 7;\n        long long = int & 15;\n        int int = 4;\n        int int = 1;\n        while ((int & 128) != 0) {\n            int = (byte[][int++]) & 255;\n            long += ((long)((int & 127))) << int;\n            int += 7;\n        }\n        switch (int) {\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    if ((org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) || (long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())))\n                        byte[] = org.eclipse.jgit.internal.storage.file.PackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.file.WindowCursor);\n                    \n                    if (org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) {\n                        int = int;\n                        break SEARCH;\n                    } \n                    if (byte[] != null)\n                        return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n                    else\n                        return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n                    \n                }\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    int = (byte[][int++]) & 255;\n                    long long = int & 127;\n                    while ((int & 128) != 0) {\n                        long += 1;\n                        int = (byte[][int++]) & 255;\n                        long <<= 7;\n                        long += int & 127;\n                    }\n                    long = long - long;\n                    org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , int , long);\n                    if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                        break SEARCH;\n                    \n                    org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n                    if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                        int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                        byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                        boolean = true;\n                        break SEARCH;\n                    } \n                    long = long;\n                    continue SEARCH;\n                }\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    org.eclipse.jgit.internal.storage.file.PackFile.readFully((long + int), byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n                    long long = org.eclipse.jgit.internal.storage.file.PackFile.findDeltaBase(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromRaw(byte[]));\n                    org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , (int + 20) , long);\n                    if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                        break SEARCH;\n                    \n                    org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n                    if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                        int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                        byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                        boolean = true;\n                        break SEARCH;\n                    } \n                    long = long;\n                    continue SEARCH;\n                }\n            default :\n                throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.java.lang.Integer.valueOf(int)));\n        }\n    }\n    if (byte[] == null)\n        throw new java.io.IOException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    do {\n        if (boolean)\n            boolean = false;\n        else if ((org.eclipse.jgit.internal.storage.file.PackFile.Delta.org.eclipse.jgit.internal.storage.file.PackFile.Delta) == null)\n            org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().store(this, org.eclipse.jgit.internal.storage.file.PackFile.Delta.long, byte[], int);\n        \n        long = org.eclipse.jgit.internal.storage.file.PackFile.Delta.long;\n        final byte[] byte[] = org.eclipse.jgit.internal.storage.file.PackFile.decompress((long + (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int)), org.eclipse.jgit.internal.storage.file.PackFile.Delta.int, org.eclipse.jgit.internal.storage.file.WindowCursor);\n        if (byte[] == null) {\n            byte[] = null;\n            throw new org.eclipse.jgit.errors.LargeObjectException.OutOfMemory(new java.lang.OutOfMemoryError());\n        } \n        final long long = org.eclipse.jgit.internal.storage.pack.BinaryDelta.org.eclipse.jgit.internal.storage.pack.BinaryDelta.getResultSize(byte[]);\n        if ((java.lang.Integer.int) <= long)\n            throw new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit();\n        \n        final byte[] byte[];\n        try {\n            byte[] = new byte[((int)(long))];\n        } catch (java.lang.OutOfMemoryError java.lang.OutOfMemoryError) {\n            byte[] = null;\n            throw new org.eclipse.jgit.errors.LargeObjectException.OutOfMemory(java.lang.OutOfMemoryError);\n        }\n        org.eclipse.jgit.internal.storage.pack.BinaryDelta.org.eclipse.jgit.internal.storage.pack.BinaryDelta.apply(byte[], byte[], byte[]);\n        byte[] = byte[];\n        org.eclipse.jgit.internal.storage.file.PackFile.Delta = org.eclipse.jgit.internal.storage.file.PackFile.Delta.org.eclipse.jgit.internal.storage.file.PackFile.Delta;\n    } while (org.eclipse.jgit.internal.storage.file.PackFile.Delta != null );\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n} catch (java.util.zip.DataFormatException java.util.zip.DataFormatException) {\n    org.eclipse.jgit.errors.CorruptObjectException org.eclipse.jgit.errors.CorruptObjectException = new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(long), org.eclipse.jgit.internal.storage.file.PackFile.getPackFile()));\n    org.eclipse.jgit.errors.CorruptObjectException.initCause(java.util.zip.DataFormatException);\n    throw org.eclipse.jgit.errors.CorruptObjectException;\n}"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"4619edee-c85f-11e4-bd9f-1b520b1b75d5","variableMapping":{"receiving":"monitor","resolving":"monitor"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.PackParser:473","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ProgressMonitor == org.eclipse.jgit.lib.ProgressMonitor)\n    org.eclipse.jgit.lib.ProgressMonitor.start(2);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.FetchProcess:121","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor, org.eclipse.jgit.transport.FetchResult);\n} finally {\n    try {\n        for (final org.eclipse.jgit.internal.storage.file.PackLock org.eclipse.jgit.internal.storage.file.PackLock : java.util.ArrayList<org.eclipse.jgit.internal.storage.file.PackLock>)\n            org.eclipse.jgit.internal.storage.file.PackLock.unlock();\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.eclipse.jgit.errors.TransportException(java.io.IOException.getMessage() , java.io.IOException);\n    }\n}"},"status":-1},{"failures":[],"tindex":"4619edef-c85f-11e4-bd9f-9119ef8f5f78","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:616","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"invalid name \\'AUX\\'\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:572","type":"CtThrowImpl","sourcecode":"throw org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException"},"status":-2},{"failures":[],"tindex":"4619edf0-c85f-11e4-bd9f-ede6c9525eaa","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:414","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"name contains \\'/\\'\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportHttp:522","type":"CtThrowImpl","sourcecode":"throw org.eclipse.jgit.errors.TransportException"},"status":-2},{"failures":[0,2,3,4,1,5],"tindex":"4619edf1-c85f-11e4-bd9f-0118353dbcdf","variableMapping":{"refUpdate":"updateRef"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.SubmoduleUpdateCommand:201","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.forceUpdate()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CreateBranchCommand:188","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.update()"},"status":-1},{"failures":[2,3,4,0,1,5],"tindex":"4619edf2-c85f-11e4-bd9f-8d83699dcc38","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.MergeResult:189","type":"CtReturnImpl","sourcecode":"return \"Merged-not-committed\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:149","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"4619edf3-c85f-11e4-bd9f-a329b76bca37","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.IndexDiff:593","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.IndexDiff.StageState.getStageMask()"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":28,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":25,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":88,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":23,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":70,"org.eclipse.jgit.api.FetchCommandTest.testFetch":6,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":60,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":96,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":98,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":109,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":81,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":95,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":45,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":41,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":35,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":78,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":63,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":92,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":93,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":33,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":49,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigLocalBranch":113,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":94,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":1,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":108,"org.eclipse.jgit.transport.TestProtocolTest.testReceivePackFactory":121,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":68,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":100,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":59,"org.eclipse.jgit.api.PushCommandTest.testPush":74,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":67,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":21,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":42,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":22,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":84,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":14,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":20,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":73,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":19,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":82,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":80,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":13,"org.eclipse.jgit.transport.PackParserTest.testPackWithDuplicateBlob":128,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":66,"org.eclipse.jgit.transport.PackParserTest.testMaxObjectSizeFullBlob":127,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":12,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":65,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":46,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":9,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":91,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":8,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":30,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testFilterHidesPrivate":48,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":104,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":36,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":62,"org.eclipse.jgit.api.GitConstructionTest.testWrap":117,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":27,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":51,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":39,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":71,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":101,"org.eclipse.jgit.api.GitConstructionTest.testOpen":116,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":97,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":50,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":86,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":37,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":40,"org.eclipse.jgit.transport.TestProtocolTest.testUploadPackFactory":120,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":106,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":0,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":103,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldNotFetchTagsFromOtherBranches":7,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":10,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":79,"org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_SmallObjectChain":130,"org.eclipse.jgit.transport.PackParserTest.testDataAfterPackFooterSplitHeaderRead":124,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":43,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":102,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":31,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":32,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":29,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":99,"org.eclipse.jgit.transport.PackParserTest.test1":125,"org.eclipse.jgit.api.GitConstructionTest.testClose":115,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.transport.PackParserTest.test2":126,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":75,"org.eclipse.jgit.transport.PackParserTest.testDataAfterPackFooterSplitObjectRead":129,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":44,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":105,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":58,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":57,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testCreateBranchAtHiddenCommitFails":47,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":72,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":34,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":77,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":61,"org.eclipse.jgit.transport.TestProtocolTest.testPush":119,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":69,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":122,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":112,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":18,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":17,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":16,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":52,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":15,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":54,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":55,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":89,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":24,"org.eclipse.jgit.api.BranchCommandTest.testListAllBranchesShouldNotDie":111,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTag":11,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":76,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":87,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":107,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":26,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":83,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":90,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":56,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":64,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":114,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":110,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":123,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":38,"org.eclipse.jgit.transport.TestProtocolTest.testFetch":118,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":85,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":53}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

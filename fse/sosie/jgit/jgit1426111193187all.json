[{"failures":[],"tindex":"f2c3b313-c839-11e4-8d1f-b176e792fb4f","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.attributes.Attribute:164","type":"CtLocalVariableImpl","sourcecode":"final int int = 31"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:1654","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"f2c42844-c839-11e4-8d1f-e9758715935b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:208","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.commitPack(java.util.Collections.java.util.Collections.singletonList(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription), null)"},"status":-1},{"failures":[3,0,1,2,4,5],"tindex":"f2c42845-c839-11e4-8d1f-c589f62228b8","variableMapping":{"data":"ib","type":"type"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:576","type":"CtIfImpl","sourcecode":"if (byte[] != null)\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:766","type":"CtForImpl","sourcecode":"SEARCH : for ( ;  ; ) {\n    org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully(long, byte[], 0, 20, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n    int int = (byte[][0]) & 255;\n    final int int = (int >> 4) & 7;\n    long long = int & 15;\n    int int = 4;\n    int int = 1;\n    while ((int & 128) != 0) {\n        int = (byte[][int++]) & 255;\n        long += ((long)((int & 127))) << int;\n        int += 7;\n    }\n    switch (int) {\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                if (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta != null) {\n                    byte[] = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                    int = int;\n                    break SEARCH;\n                } \n                if (long < (org.eclipse.jgit.internal.storage.dfs.DfsReader.getStreamFileThreshold())) {\n                    byte[] = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                    if (byte[] != null)\n                        return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n                    \n                } \n                return new org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.dfs.DfsReader.org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase);\n            }\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                int = (byte[][int++]) & 255;\n                long long = int & 127;\n                while ((int & 128) != 0) {\n                    long += 1;\n                    int = (byte[][int++]) & 255;\n                    long <<= 7;\n                    long += int & 127;\n                }\n                long = long - long;\n                org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta = new org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta(org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta , long , ((int)(long)) , int , long);\n                if (long != (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.int))\n                    break SEARCH;\n                \n                org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.dfs.DfsReader.getDeltaBaseCache().get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long);\n                if (org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry != null) {\n                    int = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.int;\n                    byte[] = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.byte[];\n                    boolean = true;\n                    break SEARCH;\n                } \n                long = long;\n                continue SEARCH;\n            }\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully((long + int), byte[], 0, 20, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                long long = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.findDeltaBase(org.eclipse.jgit.internal.storage.dfs.DfsReader, org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromRaw(byte[]));\n                org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta = new org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta(org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta , long , ((int)(long)) , (int + 20) , long);\n                if (long != (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.int))\n                    break SEARCH;\n                \n                org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.dfs.DfsReader.getDeltaBaseCache().get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long);\n                if (org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry != null) {\n                    int = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.int;\n                    byte[] = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.byte[];\n                    boolean = true;\n                    break SEARCH;\n                } \n                long = long;\n                continue SEARCH;\n            }\n        default :\n            throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.java.lang.Integer.valueOf(int)));\n    }\n}"},"status":-1},{"failures":[9,10,11,0,1,2,3,12,4,5],"tindex":"f2c42846-c839-11e4-8d1f-2160c80fa0c6","variableMapping":{"maxK":"r","k":"r"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:342","type":"CtReturnImpl","sourcecode":"return (int) - ((int ^ (int)) & 1)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.UnionInputStream:130","type":"CtIfImpl","sourcecode":"if (0 <= int)\n    return int;\nelse if (java.io.InputStream == (org.eclipse.jgit.util.io.UnionInputStream.java.io.InputStream))\n    return -1;\nelse\n    org.eclipse.jgit.util.io.UnionInputStream.pop();\n"},"status":-1},{"failures":[0,1,2,3,4,5,13],"tindex":"f2c42847-c839-11e4-8d1f-91115b95ecc1","variableMapping":{"s":"name"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:354","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.String.indexOf('/')"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefDatabase:138","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.String.lastIndexOf('/')"},"status":-1},{"failures":[0,1,2,14,15,4,5,3],"tindex":"f2c42848-c839-11e4-8d1f-7d215a514fc8","variableMapping":{"org.eclipse.jgit.transport.AmazonS3.SIGNED_HEADERS":"filtered"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:126","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.AmazonS3.java.util.Set<java.lang.String>.add(\"date\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CleanCommand:166","type":"CtInvocationImpl","sourcecode":"java.util.Set<java.lang.String>.remove(java.lang.String)"},"status":-1},{"failures":[0,1,2,3,5,4],"tindex":"f2c42849-c839-11e4-8d1f-73eea1e009d8","variableMapping":{"be":"pos","bNext":"pos"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.HistogramDiffIndex:273","type":"CtIfImpl","sourcecode":"if (int < int)\n    int = int;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser:264","type":"CtInvocationImpl","sourcecode":"java.util.zip.CRC32.update(byte[], int, int)"},"status":-1},{"failures":[0,1,2,5,3,4],"tindex":"f2c4284a-c839-11e4-8d1f-73bfab387941","variableMapping":{"w":"stIdx","index":"stIdx","w1":"stIdx","w2":"stIdx","w3":"stIdx","w4":"stIdx","w5":"stIdx"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.AnyObjectId:131","type":"CtSwitchImpl","sourcecode":"switch (int >> 2) {\n    case 0 :\n        int = int;\n        break;\n    case 1 :\n        int = int;\n        break;\n    case 2 :\n        int = int;\n        break;\n    case 3 :\n        int = int;\n        break;\n    case 4 :\n        int = int;\n        break;\n    default :\n        throw new java.lang.ArrayIndexOutOfBoundsException(int);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheTree:458","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)"},"status":-1},{"failures":[0,1,2,5,3,4],"tindex":"f2c44f5b-c839-11e4-8d1f-1dfc6c27e9e7","variableMapping":{"conn":"conn"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportHttp:925","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.http.HttpConnection.setChunkedStreamingMode(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportHttp:572","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.transport.http.HttpConnection.configure(null, javax.net.ssl.TrustManager[], null);\n    org.eclipse.jgit.transport.http.HttpConnection.setHostnameVerifier(new org.eclipse.jgit.transport.TransportHttp.DummyHostnameVerifier());\n} catch (java.security.KeyManagementException java.security.KeyManagementException) {\n    throw new java.io.IOException(java.security.KeyManagementException.getMessage());\n} catch (java.security.NoSuchAlgorithmException java.security.NoSuchAlgorithmException) {\n    throw new java.io.IOException(java.security.NoSuchAlgorithmException.getMessage());\n}"},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"f2c44f5c-c839-11e4-8d1f-09c33fa6618d","variableMapping":{"org.eclipse.jgit.util.QuotedString.GitPathStyle.quote":"buf"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.QuotedString:218","type":"CtForImpl","sourcecode":"for (int int = '0' ; int <= '9' ; int++)\n    org.eclipse.jgit.util.QuotedString.GitPathStyle.byte[][int] = 0;"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:262","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.LockFile.write(byte[])"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":16,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromFallback":7,"org.eclipse.jgit.util.HookTest.testCommitMsgHookReceivesCorrectParameter":19,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":18,"org.eclipse.jgit.util.io.UnionInputStreamTest.testSkip":10,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenMissing":28,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirs":15,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":23,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.util.io.UnionInputStreamTest.testAutoCloseDuringRead":9,"org.eclipse.jgit.util.HookTest.testCommitMsgHookCanModifyCommitMessage":20,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":26,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":29,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromInserterSmallObjects":6,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":25,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":22,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":24,"org.eclipse.jgit.util.io.UnionInputStreamTest.testReadSingleBytes":11,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.transport.PackParserTest.testPackWithTrailingGarbage":12,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":27,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":3,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromInserterLargerObjects":8,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":5,"org.eclipse.jgit.api.CleanCommandTest.testClean":14,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":17,"org.eclipse.jgit.lib.RefDatabaseConflictingNamesTest.testGetConflictingNames":13,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestMissingThenSymlink":21}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

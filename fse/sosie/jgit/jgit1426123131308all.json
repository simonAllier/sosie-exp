[{"failures":[0,1,2,3,4,5],"tindex":"be03c20b-c855-11e4-9ab7-af88bb2d37f4","variableMapping":{"fullNewName":"groups","newName":"groups","org.eclipse.jgit.lib.Constants.R_HEADS":"groups","org.eclipse.jgit.lib.Constants.R_REMOTES":"groups","fullOldName":"groups"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RenameBranchCommand:128","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.eclipse.jgit.lib.Constants.java.lang.String))\n    java.lang.String = (org.eclipse.jgit.lib.Constants.java.lang.String) + (java.lang.String);\nelse {\n    java.lang.String = (org.eclipse.jgit.lib.Constants.java.lang.String) + (java.lang.String);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:371","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.lang.String.split(\",\")) {\n    if (java.lang.String.startsWith(\"-\"))\n        java.util.Set<java.lang.String>.add(java.lang.String.substring(1));\n    else\n        java.util.Set<java.lang.String>.add(java.lang.String);\n    \n}"},"status":-1},{"failures":[],"tindex":"be03c20c-c855-11e4-9ab7-056bbad99009","variableMapping":{"fastForwardMode":"org.eclipse.jgit.api.MergeCommand.FastForwardMode.NO_FF"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.MergeConfig:110","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.api.MergeCommand.FastForwardMode"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.MergeCommand:192","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.api.MergeCommand.FastForwardMode.org.eclipse.jgit.api.MergeCommand.FastForwardMode"},"status":-2},{"failures":[1,6,7,8,9,10,11,12,13,0,14,3,4,5,2],"tindex":"be03c20d-c855-11e4-9ab7-6bb9bf2756c9","variableMapping":{"emptyCommit":"inCore"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CommitCommand:422","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.RecursiveMerger:183","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[],"tindex":"be03c20e-c855-11e4-9ab7-5da83f89d1b0","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:426","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"bytes\" , \"KiB\" , \"MiB\" , \"GiB\" }"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportLocal:219","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = new java.lang.String[]{ \".\" }"},"status":-2},{"failures":[2,0,1,3,4,5],"tindex":"be03c20f-c855-11e4-9ab7-bd643a3a125d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1189","type":"CtForEachImpl","sourcecode":"for (final org.eclipse.jgit.transport.ReceiveCommand org.eclipse.jgit.transport.ReceiveCommand : java.util.List<org.eclipse.jgit.transport.ReceiveCommand>) {\n    final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.transport.ReceiveCommand.getRef();\n    if ((org.eclipse.jgit.transport.ReceiveCommand.getResult()) != (org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result))\n        continue;\n    \n    if ((org.eclipse.jgit.transport.ReceiveCommand.getType()) == (org.eclipse.jgit.transport.ReceiveCommand.Type.org.eclipse.jgit.transport.ReceiveCommand.Type)) {\n        if (!org.eclipse.jgit.transport.BaseReceivePack.(isAllowDeletes())) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result);\n            continue;\n        } \n        if ((!org.eclipse.jgit.transport.BaseReceivePack.(isAllowBranchDeletes())) && (org.eclipse.jgit.lib.Ref.getName().startsWith(org.eclipse.jgit.lib.Constants.java.lang.String))) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result);\n            continue;\n        } \n    } \n    if ((org.eclipse.jgit.transport.ReceiveCommand.getType()) == (org.eclipse.jgit.transport.ReceiveCommand.Type.org.eclipse.jgit.transport.ReceiveCommand.Type)) {\n        if (!org.eclipse.jgit.transport.BaseReceivePack.(isAllowCreates())) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result);\n            continue;\n        } \n        if ((org.eclipse.jgit.lib.Ref != null) && (!org.eclipse.jgit.transport.BaseReceivePack.(isAllowNonFastForwards()))) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result);\n            continue;\n        } \n        if (org.eclipse.jgit.lib.Ref != null) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n            continue;\n        } \n    } \n    if (((((org.eclipse.jgit.transport.ReceiveCommand.getType()) == (org.eclipse.jgit.transport.ReceiveCommand.Type.org.eclipse.jgit.transport.ReceiveCommand.Type)) && (org.eclipse.jgit.lib.Ref != null)) && (!(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.zeroId().equals(org.eclipse.jgit.transport.ReceiveCommand.getOldId())))) && (!(org.eclipse.jgit.lib.Ref.getObjectId().equals(org.eclipse.jgit.transport.ReceiveCommand.getOldId())))) {\n        org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        continue;\n    } \n    if ((org.eclipse.jgit.transport.ReceiveCommand.getType()) == (org.eclipse.jgit.transport.ReceiveCommand.Type.org.eclipse.jgit.transport.ReceiveCommand.Type)) {\n        if (org.eclipse.jgit.lib.Ref == null) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n            continue;\n        } \n        if (!(org.eclipse.jgit.lib.Ref.getObjectId().equals(org.eclipse.jgit.transport.ReceiveCommand.getOldId()))) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n            continue;\n        } \n        org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject;\n        org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject;\n        try {\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseAny(org.eclipse.jgit.transport.ReceiveCommand.getOldId());\n        } catch (java.io.IOException java.io.IOException) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, org.eclipse.jgit.transport.ReceiveCommand.getOldId().name());\n            continue;\n        }\n        try {\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseAny(org.eclipse.jgit.transport.ReceiveCommand.getNewId());\n        } catch (java.io.IOException java.io.IOException) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, org.eclipse.jgit.transport.ReceiveCommand.getNewId().name());\n            continue;\n        }\n        if ((org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) && (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit)) {\n            try {\n                if (org.eclipse.jgit.revwalk.RevWalk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject)), ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject))))\n                    org.eclipse.jgit.transport.ReceiveCommand.setTypeFastForwardUpdate();\n                else\n                    org.eclipse.jgit.transport.ReceiveCommand.setType(org.eclipse.jgit.transport.ReceiveCommand.Type.org.eclipse.jgit.transport.ReceiveCommand.Type);\n                \n            } catch (org.eclipse.jgit.errors.MissingObjectException org.eclipse.jgit.errors.MissingObjectException) {\n                org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, org.eclipse.jgit.errors.MissingObjectException.getMessage());\n            } catch (java.io.IOException java.io.IOException) {\n                org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result);\n            }\n        } else {\n            org.eclipse.jgit.transport.ReceiveCommand.setType(org.eclipse.jgit.transport.ReceiveCommand.Type.org.eclipse.jgit.transport.ReceiveCommand.Type);\n        }\n        if (((org.eclipse.jgit.transport.ReceiveCommand.getType()) == (org.eclipse.jgit.transport.ReceiveCommand.Type.org.eclipse.jgit.transport.ReceiveCommand.Type)) && (!org.eclipse.jgit.transport.BaseReceivePack.(isAllowNonFastForwards()))) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result);\n            continue;\n        } \n    } \n    if ((!(org.eclipse.jgit.transport.ReceiveCommand.getRefName().startsWith(org.eclipse.jgit.lib.Constants.java.lang.String))) || (!org.eclipse.jgit.lib.Repository.(org.eclipse.jgit.lib.Repository.isValidRefName(org.eclipse.jgit.transport.ReceiveCommand.getRefName())))) {\n        org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    } \n}"},"status":-1},{"failures":[2,3,4,5,1,0],"tindex":"be03c210-c855-11e4-9ab7-63b69242e027","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:292","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[],"tindex":"be03c211-c855-11e4-9ab7-1f529d219cd0","variableMapping":{"java.lang.Integer.MAX_VALUE":"c"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.NameRevCommand:351","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.Integer.int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:492","type":"CtLocalVariableImpl","sourcecode":"final int int = (int >> 4) & 7"},"status":-2},{"failures":[1,3,4,5,0,15,2],"tindex":"be03c212-c855-11e4-9ab7-637a8ab5fadb","variableMapping":{"carryFlags":"rPtr","delayFreeFlags":"rPtr"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1192","type":"CtOperatorAssignmentImpl","sourcecode":"int &= ~(int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.QuotedString:366","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[1,3,4,5,2,16,17,18,0],"tindex":"be03c213-c855-11e4-9ab7-8dca11bbdfba","variableMapping":{"org.eclipse.jgit.lib.Constants.OBJECT_ID_LENGTH":"nContext","ptr":"nContext"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:401","type":"CtOperatorAssignmentImpl","sourcecode":"int += 1 + (org.eclipse.jgit.lib.Constants.int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.CombinedHunkHeader:133","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[19,20,21,22,2,3,4,5,1,0],"tindex":"be03c214-c855-11e4-9ab7-3f84d07b9d7c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:258","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:252","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":14,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertHeadMiddle":21,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":12,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.patch.PatchCcErrorTest.testError_CcTruncatedOld":18,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertTail":20,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":8,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":9,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":13,"org.eclipse.jgit.patch.PatchCcTest.testParse_CcNewFile":17,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":7,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":10,"org.eclipse.jgit.patch.PatchCcTest.testParse_OneFileCc":16,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testShuffleSegments":22,"org.eclipse.jgit.util.QuotedStringGitPathStyleTest.testDequote_UnknownEscapeQ":15,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130CopyOk":19,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":0,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":1,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":11,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":6,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":2}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

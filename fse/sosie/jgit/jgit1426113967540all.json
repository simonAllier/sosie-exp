[{"failures":[0,1,2,3,4,5],"tindex":"67fc2f6b-c840-11e4-9054-d1f74e8406d9","variableMapping":{"ref":"r"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:441","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.Ref<T> != null)\n    return org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.Ref<T>;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:497","type":"CtReturnImpl","sourcecode":"return (org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.Ref<T>.get()) != null ? org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.Ref<T> : null"},"status":-1},{"failures":[],"tindex":"67fc2f6c-c840-11e4-9054-ad628b2efd78","variableMapping":{"s":"subfilters"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.filter.OrTreeFilter:180","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.treewalk.filter.OrTreeFilter.List(org.eclipse.jgit.treewalk.filter.TreeFilter[])"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.AndTreeFilter:114","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.treewalk.filter.AndTreeFilter.List(org.eclipse.jgit.treewalk.filter.TreeFilter[])"},"status":-2},{"failures":[],"tindex":"67fc2f6d-c840-11e4-9054-8d022f95a545","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AbbreviatedObjectId:181","type":"CtLocalVariableImpl","sourcecode":"final int int = 32 - ((int - int) * 4)"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"67fc2f6e-c840-11e4-9054-3317787afbd8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:347","type":"CtOperatorAssignmentImpl","sourcecode":"int |= org.eclipse.jgit.util.RawParseUtils.byte[][byte[][(int + 3)]]"},"status":-1},{"failures":[],"tindex":"67fc2f6f-c840-11e4-9054-b13c3fb857a3","variableMapping":{"p":"o","pathLen":"matchShift","this":"matches"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.AbstractTreeIterator:227","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.AbstractTreeIterator.growPath(org.eclipse.jgit.treewalk.AbstractTreeIterator.int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.TreeWalk:401","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.treewalk.AbstractTreeIterator instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) {\n    org.eclipse.jgit.treewalk.AbstractTreeIterator.org.eclipse.jgit.treewalk.AbstractTreeIterator = null;\n    org.eclipse.jgit.treewalk.AbstractTreeIterator.int = 0;\n    ((org.eclipse.jgit.treewalk.CanonicalTreeParser)(org.eclipse.jgit.treewalk.AbstractTreeIterator)).reset(org.eclipse.jgit.lib.ObjectReader, org.eclipse.jgit.lib.AnyObjectId);\n    org.eclipse.jgit.treewalk.AbstractTreeIterator[][0] = org.eclipse.jgit.treewalk.AbstractTreeIterator;\n} else {\n    org.eclipse.jgit.treewalk.AbstractTreeIterator[][0] = org.eclipse.jgit.treewalk.TreeWalk.parserFor(org.eclipse.jgit.lib.AnyObjectId);\n}"},"status":-2},{"failures":[3,4,5,0,1,2],"tindex":"67fc2f70-c840-11e4-9054-15c219fc1a83","variableMapping":{"line":"path"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:182","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String.substring(0, 45)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportSftp:353","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int)"},"status":-1},{"failures":[],"tindex":"67fc2f71-c840-11e4-9054-af97d31a5dc5","variableMapping":{"levelTwo":"e","org.eclipse.jgit.lib.Constants.OBJECT_ID_LENGTH":"e"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexV2:324","type":"CtLocalVariableImpl","sourcecode":"int int = ((int) / ((org.eclipse.jgit.lib.Constants.int) / 4)) * 4"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:119","type":"CtLocalVariableImpl","sourcecode":"int int = int - int"},"status":-2},{"failures":[],"tindex":"67fc2f72-c840-11e4-9054-17875fc2c217","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1075","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"jgit receive-pack\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CreateBranchCommand:147","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"\""},"status":-2},{"failures":[0,1,18,2,3,4,5],"tindex":"67fc2f73-c840-11e4-9054-fd63fc1bfa87","variableMapping":{"toBeDeleted":"r"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:405","type":"CtInvocationImpl","sourcecode":"java.util.ArrayList<java.lang.String>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevCommit:590","type":"CtForEachImpl","sourcecode":"for (final org.eclipse.jgit.revwalk.FooterLine org.eclipse.jgit.revwalk.FooterLine : java.util.List<org.eclipse.jgit.revwalk.FooterLine>) {\n    if (org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey))\n        java.util.ArrayList<java.lang.String>.add(org.eclipse.jgit.revwalk.FooterLine.getValue());\n    \n}"},"status":-1},{"failures":[1,19,20,21,22,23,24,25,26,27,28,0,2,3,4,5],"tindex":"67fc2f74-c840-11e4-9054-a9bef944c6e7","variableMapping":{"base":"newHead"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.Merger:274","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevCommit == null)\n    return null;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:130","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n    if (org.eclipse.jgit.lib.Ref == null)\n        throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Ref.getObjectId());\n    org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n    for (org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref : java.util.List<org.eclipse.jgit.lib.Ref>) {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getPeeledObjectId();\n        if (org.eclipse.jgit.lib.ObjectId == null)\n            org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getObjectId();\n        \n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) != 1)\n            throw new org.eclipse.jgit.api.errors.MultipleParentsNotAllowedException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.revwalk.RevCommit.name(), java.lang.Integer.java.lang.Integer.valueOf(org.eclipse.jgit.revwalk.RevCommit.getParentCount())));\n        \n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n        org.eclipse.jgit.revwalk.RevWalk.parseHeaders(org.eclipse.jgit.revwalk.RevCommit);\n        java.lang.String java.lang.String = org.eclipse.jgit.api.RevertCommand.calculateOurName(org.eclipse.jgit.lib.Ref);\n        java.lang.String java.lang.String = ((org.eclipse.jgit.revwalk.RevCommit.getId().abbreviate(7).name()) + \" \") + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage());\n        org.eclipse.jgit.merge.ResolveMerger org.eclipse.jgit.merge.ResolveMerger = ((org.eclipse.jgit.merge.ResolveMerger)(org.eclipse.jgit.merge.MergeStrategy.newMerger(org.eclipse.jgit.lib.Repository)));\n        org.eclipse.jgit.merge.ResolveMerger.setWorkingTreeIterator(new org.eclipse.jgit.treewalk.FileTreeIterator(org.eclipse.jgit.lib.Repository));\n        org.eclipse.jgit.merge.ResolveMerger.setBase(org.eclipse.jgit.revwalk.RevCommit.getTree());\n        org.eclipse.jgit.merge.ResolveMerger.setCommitNames(new java.lang.String[]{ \"BASE\" , java.lang.String , java.lang.String });\n        java.lang.String java.lang.String = (\"Revert \\\"\" + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage())) + \"\\\"\";\n        java.lang.String java.lang.String = (((java.lang.String + \"\\n\\n\") + \"This reverts commit \") + (org.eclipse.jgit.revwalk.RevCommit.getId().getName())) + \".\\n\";\n        if (org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit)) {\n            if (org.eclipse.jgit.lib.AnyObjectId.org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.revwalk.RevCommit.getTree().getId(), org.eclipse.jgit.merge.ResolveMerger.getResultTreeId()))\n                continue;\n            \n            org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.revwalk.RevCommit.getTree() , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.merge.ResolveMerger.getResultTreeId());\n            org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n            org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n            org.eclipse.jgit.revwalk.RevCommit = new org.eclipse.jgit.api.Git(org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.revwalk.RevCommit>.getRepository()).commit().setMessage(java.lang.String).setReflogComment((\"revert: \" + java.lang.String)).call();\n            java.util.List<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.Ref);\n            org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n        } else {\n            java.util.List<java.lang.String> = org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths();\n            java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> = org.eclipse.jgit.merge.ResolveMerger.getFailingPaths();\n            if (java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> != null)\n                org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n            else\n                org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n            \n            if ((!(org.eclipse.jgit.merge.ResolveMerger.failed())) && (!(java.util.List<java.lang.String>.isEmpty()))) {\n                java.lang.String java.lang.String = new org.eclipse.jgit.merge.MergeMessageFormatter().formatWithConflicts(java.lang.String, org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths());\n                org.eclipse.jgit.lib.Repository.writeRevertHead(org.eclipse.jgit.revwalk.RevCommit.getId());\n                org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(java.lang.String);\n            } \n            return null;\n        }\n    }\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.IOException) , java.io.IOException);\n} finally {\n    org.eclipse.jgit.revwalk.RevWalk.release();\n}"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":6,"org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem":22,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.revwalk.FooterLineTest.testFilterFootersIgnoreCase":18,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":8,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":20,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenMissing":16,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":23,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":11,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":14,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":17,"org.eclipse.jgit.api.RevertCommandTest.testRevertDirtyIndex":19,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultiple":24,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":13,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":10,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":12,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":28,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":21,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":27,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":15,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":2,"org.eclipse.jgit.api.RevertCommandTest.testRevertDirtyWorktree":25,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.api.RevertCommandTest.testRevert":26,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":7,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestMissingThenSymlink":9}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

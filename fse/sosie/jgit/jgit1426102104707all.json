[{"failures":[],"tindex":"c92fac59-c824-11e4-bff5-ffecd4bcbf75","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.MergeResult:189","type":"CtReturnImpl","sourcecode":"return \"Merged-not-committed\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:1271","type":"CtReturnImpl","sourcecode":"return (java.lang.StringBuilder.length()) > 0 ? java.lang.StringBuilder.toString() : null"},"status":-2},{"failures":[0,1,2,2,3,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"c92fac5a-c824-11e4-bff5-ef927dcf5921","variableMapping":{"parent":"tv","tv":"tv"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:391","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.ObjectWalk.TreeVisit.org.eclipse.jgit.revwalk.ObjectWalk.TreeVisit = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:730","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.ObjectWalk.TreeVisit = org.eclipse.jgit.revwalk.ObjectWalk.TreeVisit.org.eclipse.jgit.revwalk.ObjectWalk.TreeVisit"},"status":-1},{"failures":[],"tindex":"c92fac5b-c824-11e4-bff5-3dcdfe80de73","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:205","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.BlockList<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.addAll(java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>)"},"status":-2},{"failures":[],"tindex":"c92fd36c-c824-11e4-bff5-413622cbbeab","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:314","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.WindowCache:327","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.storage.file.WindowCacheConfig.getPackedGitWindowSize()"},"status":-2},{"failures":[59,24,25,26,43,23],"tindex":"c92fd36d-c824-11e4-bff5-870d5300b152","variableMapping":{"fos":"msgOut"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1679","type":"CtInvocationImpl","sourcecode":"java.io.FileOutputStream.write('\\n')"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:372","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.flush()"},"status":-1},{"failures":[],"tindex":"c92fd36e-c824-11e4-bff5-732b600692e3","variableMapping":{"this":"f"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:608","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.PackFile.openFail()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:541","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept())\n    java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriter.ObjectIdSet>.add(org.eclipse.jgit.internal.storage.file.GC.org.eclipse.jgit.internal.storage.file.GC.objectIdSet(org.eclipse.jgit.internal.storage.file.PackFile.getIndex()));\n"},"status":-2},{"failures":[],"tindex":"c92fd36f-c824-11e4-bff5-3b10134bd2d5","variableMapping":{"b":"org.eclipse.jgit.patch.FileHeader.NEW_NAME","r":"length","length":"end","sign":"endOffset","org.eclipse.jgit.util.RawParseUtils.digits10":"org.eclipse.jgit.patch.Patch.GIT_BINARY","ptr":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:207","type":"CtTryImpl","sourcecode":"try {\n    final int int = byte[].int;\n    while ((int < int) && ((byte[][int]) == ' '))\n        int++;\n    if (int >= int)\n        return 0;\n    \n    switch (byte[][int]) {\n        case '-' :\n            int = -1;\n            int++;\n            break;\n        case '+' :\n            int++;\n            break;\n    }\n    while (int < int) {\n        final byte byte = org.eclipse.jgit.util.RawParseUtils.byte[][byte[][int]];\n        if (byte < 0)\n            break;\n        \n        int = (int * 10) + byte;\n        int++;\n    }\n} catch (java.lang.ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException) {\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.Patch:270","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.Patch.byte[])) >= 0)\n        break;\n    \n    if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.Patch.byte[])) >= 0)\n        break;\n    \n    if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.Patch.byte[])) >= 0)\n        break;\n    \n    if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0)\n        break;\n    \n    if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0)\n        break;\n    \n    if (org.eclipse.jgit.patch.FileHeader.(org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[], int, int)) == (org.eclipse.jgit.patch.FileHeader.getParentCount())) {\n        final org.eclipse.jgit.patch.HunkHeader org.eclipse.jgit.patch.HunkHeader = org.eclipse.jgit.patch.FileHeader.newHunkHeader(int);\n        org.eclipse.jgit.patch.HunkHeader.parseHeader();\n        int = org.eclipse.jgit.patch.HunkHeader.parseBody(this, int);\n        org.eclipse.jgit.patch.HunkHeader.int = int;\n        org.eclipse.jgit.patch.FileHeader.addHunk(org.eclipse.jgit.patch.HunkHeader);\n        if (int < int) {\n            switch (byte[][int]) {\n                case '@' :\n                case 'd' :\n                case '\\n' :\n                    break;\n                default :\n                    if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.Patch.byte[])) < 0)\n                        org.eclipse.jgit.patch.Patch.warn(byte[], int, org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n                    \n            }\n        } \n        continue;\n    } \n    final int int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.nextLF(byte[], int);\n    if ((org.eclipse.jgit.patch.FileHeader.getHunks().isEmpty()) && (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.Patch.byte[])) >= 0)) {\n        org.eclipse.jgit.patch.FileHeader.org.eclipse.jgit.patch.FileHeader.PatchType = org.eclipse.jgit.patch.FileHeader.PatchType.org.eclipse.jgit.patch.FileHeader.PatchType;\n        return org.eclipse.jgit.patch.Patch.parseGitBinary(org.eclipse.jgit.patch.FileHeader, int, int);\n    } \n    if ((((org.eclipse.jgit.patch.FileHeader.getHunks().isEmpty()) && ((org.eclipse.jgit.patch.Patch.byte[].int) < (int - int))) && (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], (int - (org.eclipse.jgit.patch.Patch.byte[].int)), org.eclipse.jgit.patch.Patch.byte[])) >= 0)) && org.eclipse.jgit.patch.Patch.(org.eclipse.jgit.patch.Patch.matchAny(byte[], int, org.eclipse.jgit.patch.Patch.byte[][]))) {\n        org.eclipse.jgit.patch.FileHeader.org.eclipse.jgit.patch.FileHeader.PatchType = org.eclipse.jgit.patch.FileHeader.PatchType.org.eclipse.jgit.patch.FileHeader.PatchType;\n        return int;\n    } \n    int = int;\n}"},"status":-2},{"failures":[],"tindex":"c92fd370-c824-11e4-bff5-172b0e41b14e","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.FanoutBucket:161","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FS_Win32:90","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"c92fd371-c824-11e4-bff5-953d98952d18","variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:214","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PackedObjectInfo.setOffset(1)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AnyObjectId:471","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.AnyObjectId.org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[], 24, int)"},"status":-2},{"failures":[43,23,59,24,25,26],"tindex":"c92fd372-c824-11e4-bff5-8fbfbfb26454","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.InterruptTimer:219","type":"CtInvocationImpl","sourcecode":"java.lang.Object.notifyAll()"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.GitConstructionTest.testWrap":4,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":32,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":21,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":57,"org.eclipse.jgit.api.GitConstructionTest.testOpen":3,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":20,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":26,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":16,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPruneNone":7,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":0,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":40,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":22,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":24,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":8,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":52,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":23,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testExclude":46,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":15,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":17,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitTwoTreeTwoBlob":29,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":38,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":12,"org.eclipse.jgit.internal.storage.file.GcBranchPrunedTest.deleteMergedBranch_historyNotPruned":5,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":13,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":34,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":35,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":36,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":18,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":33,"org.eclipse.jgit.api.GitConstructionTest.testClose":2,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree1":27,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":43,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree2":28,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":14,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":42,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":55,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":59,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":19,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":1,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":37,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":51,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":50,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":54,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":49,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":48,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":9,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":47,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":53,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":44,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":58,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":11,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":25,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":31,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":56,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":10,"org.eclipse.jgit.internal.storage.file.GcBranchPrunedTest.branch_historyNotPruned":6,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":30,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":41,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":45,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":39}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"8a23d45f-c845-11e4-aab5-b7f25308d4a8","variableMapping":{"cnt":"i","org.eclipse.jgit.internal.storage.pack.DeltaEncoder.MAX_INSERT_DATA_SIZE":"done","hdrs":"length"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:194","type":"CtIfImpl","sourcecode":"if ((int % (org.eclipse.jgit.internal.storage.pack.DeltaEncoder.int)) != 0)\n    int++;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:445","type":"CtIfImpl","sourcecode":"if ((int + 1) < (char[].int)) {\n    switch (char[][(int + 1)]) {\n        case '0' :\n        case '1' :\n        case '2' :\n        case '3' :\n        case '4' :\n        case '5' :\n        case '6' :\n        case '7' :\n        case '8' :\n        case '9' :\n            int int;\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n            for (int = int + 1 ; int < (char[].int) ; ++int) {\n                if (!java.lang.Character.(java.lang.Character.isDigit(char[][int])))\n                    break;\n                \n            }\n            java.lang.String java.lang.String = new java.lang.String(char[] , (int + 1) , ((int - int) - 1));\n            int int;\n            try {\n                int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n            } catch (java.lang.NumberFormatException java.lang.NumberFormatException) {\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n            }\n            if (int != 0) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if (int > (org.eclipse.jgit.revwalk.RevCommit.getParentCount()))\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent((int - 1));\n                \n            } \n            int = int - 1;\n            int = int;\n            break;\n        case '{' :\n            int int;\n            java.lang.String java.lang.String = null;\n            for (int = int + 2 ; int < (char[].int) ; ++int) {\n                if ((char[][int]) == '}') {\n                    java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n                    break;\n                } \n            }\n            int = int;\n            if (java.lang.String != null)\n                if (java.lang.String.equals(\"tree\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n                } else if (java.lang.String.equals(\"commit\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n                } else if (java.lang.String.equals(\"blob\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                    if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevBlob))\n                        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                    \n                } else if (java.lang.String.equals(\"\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                } else\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                \n            else\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n            \n            int = int;\n            break;\n        default :\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n            if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                \n            } else\n                throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n            \n    }\n} else {\n    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n    if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n            org.eclipse.jgit.revwalk.RevObject = null;\n        else\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n        \n    } else\n        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n    \n}"},"status":-2},{"failures":[],"tindex":"8a23d460-c845-11e4-aab5-753bb8ee9e1c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CleanCommand:94","type":"CtLocalVariableImpl","sourcecode":"java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String>()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:356","type":"CtLocalVariableImpl","sourcecode":"java.util.Set<java.lang.String> java.util.Set<java.lang.String> = (boolean) || (boolean) ? new java.util.HashSet<java.lang.String>() : null"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"8a23d461-c845-11e4-aab5-1d4a7e15d46f","variableMapping":{"fileMode":"ok","off":"ok","on":"ok"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:300","type":"CtAssignmentImpl","sourcecode":"boolean = boolean && (!boolean)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.DeleteTagCommand:106","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":-1},{"failures":[],"tindex":"8a23d462-c845-11e4-aab5-11e013f7f685","variableMapping":{"data":"urlstr"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:722","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = new java.lang.StringBuilder()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.AmazonS3:574","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('?')"},"status":-2},{"failures":[5,1,2,3,0,6,7,8,9,10,11,4],"tindex":"8a23d463-c845-11e4-aab5-dfd4b55c8372","variableMapping":{"r":"next"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:318","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.ArrayIndexOutOfBoundsException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:181","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (int[].int) ; int++) {\n    int int = int[][int];\n    if (int == 0)\n        continue;\n    \n    int[][int] = int;\n    do {\n        long[][int++] = org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.long[][int];\n        int = org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.int[][int];\n    } while (int != 0 );\n}"},"status":-1},{"failures":[4,1,2,3,5,0],"tindex":"8a23d464-c845-11e4-aab5-df84f211bdd6","variableMapping":{"bs":"length","wantSize":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:325","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    int = int;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:499","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.ByteArrayWindow != null) {\n    org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.file.LocalObjectToPack, long);\n    org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream, long, ((int)(long)), null);\n} else if (long <= (byte[].int)) {\n    if (!boolean) {\n        long long = long;\n        long long = long;\n        while (long > 0) {\n            final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n            org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.file.WindowCursor);\n            long += int;\n            long -= int;\n        }\n    } \n    org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.file.LocalObjectToPack, long);\n    org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[], 0, ((int)(long)));\n} else {\n    org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.file.LocalObjectToPack, long);\n    long long = long;\n    long long = long;\n    while (long > 0) {\n        final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n        org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.file.WindowCursor);\n        if (boolean)\n            java.util.zip.CRC32.update(byte[], 0, int);\n        \n        org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[], 0, int);\n        long += int;\n        long -= int;\n    }\n    if (boolean && ((java.util.zip.CRC32.getValue()) != long)) {\n        throw new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.file.LocalObjectToPack.long), org.eclipse.jgit.internal.storage.file.PackFile.getPackFile()));\n    } \n}"},"status":-1},{"failures":[],"tindex":"8a23d465-c845-11e4-aab5-cd183e195112","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:256","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.NameRevCommand:147","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.api.NameRevCommand.(minCommitTime()) - (org.eclipse.jgit.api.NameRevCommand.int)"},"status":-2},{"failures":[1,2,3,0,5,4],"tindex":"8a23d466-c845-11e4-aab5-878fc6170ede","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TagBuilder:222","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(((java.lang.String) != null ? java.lang.String : \"NOT_SET\"))"},"status":-1},{"failures":[],"tindex":"8a23d467-c845-11e4-aab5-8f947ed44864","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.HttpAuthMethod:547","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException = new java.io.IOException()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:910","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException"},"status":-2},{"failures":[],"tindex":"8a23d468-c845-11e4-aab5-9dbc6dd7dbd9","variableMapping":{"middleK":"treeFilterMarks","beginK":"treeFilterMarks","k":"treeFilterMarks","endK":"treeFilterMarks"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:349","type":"CtAssignmentImpl","sourcecode":"int = int = int = int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffEntry:311","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.diff.DiffEntry.int = (org.eclipse.jgit.diff.DiffEntry.int) | (org.eclipse.jgit.diff.DiffEntry.int)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testShuffleSegments":11,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130CopyOk":6,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertHeadMiddle":10,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyWholeObject_Length123":7,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertTail":9,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyWholeObject_Length128":8,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

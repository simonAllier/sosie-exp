[{"failures":[0,1,2,3,4,5],"tindex":"f4da4091-c845-11e4-b557-4dedaddaab48","variableMapping":{"in":"in"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:421","type":"CtWhileImpl","sourcecode":"while (0 < (java.io.InputStream.read()))\n    continue;"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:408","type":"CtInvocationImpl","sourcecode":"java.io.InputStream.close()"},"status":-1},{"failures":[],"tindex":"f4da67a2-c845-11e4-b557-8b119d0cad4c","variableMapping":{"gen":"o"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.blame.BlameResult:335","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.PersonIdent org.eclipse.jgit.lib.PersonIdent = org.eclipse.jgit.blame.BlameGenerator.getSourceAuthor()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.PersonIdent:242","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.lib.PersonIdent org.eclipse.jgit.lib.PersonIdent = ((org.eclipse.jgit.lib.PersonIdent)(java.lang.Object))"},"status":-2},{"failures":[],"tindex":"f4da67a3-c845-11e4-b557-1b1c3cdc1f6f","variableMapping":{"nthPosition":"infoOffset"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndex:243","type":"CtLocalVariableImpl","sourcecode":"final int int = int & 1"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:721","type":"CtLocalVariableImpl","sourcecode":"final int int = (int) + int"},"status":-2},{"failures":[6,7,8,3,0,1,2,4,9,10,11,12,13,14,15,16,17,18,19,20,5],"tindex":"f4da67a4-c845-11e4-b557-252cbc9d2ad5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:286","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.disableRefLog()"},"status":-1},{"failures":[21,22,5,3,0,1,2,23,24,25,26,27,28,29,30,31,32,4,33,34,35,36,37,38,39,40],"tindex":"f4da67a5-c845-11e4-b557-01db549687de","variableMapping":{"parent":"visit"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.PackParser:1580","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.PackParser.DeltaVisit = org.eclipse.jgit.transport.PackParser.DeltaVisit.org.eclipse.jgit.transport.PackParser.DeltaVisit"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:635","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.PackParser.DeltaVisit = org.eclipse.jgit.transport.PackParser.DeltaVisit.next()"},"status":-1},{"failures":[],"tindex":"f4da67a6-c845-11e4-b557-597495e4f46f","variableMapping":{"c":"id","flags":"org.eclipse.jgit.lib.ProgressMonitor.UNKNOWN","org.eclipse.jgit.revwalk.RevWalk.SEEN":"lastRemoteIdx"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:302","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.revwalk.RevCommit.int) & (org.eclipse.jgit.revwalk.RevWalk.int)) != 0)\n    return ;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:398","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    if (org.eclipse.jgit.transport.WalkFetchConnection.downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor, org.eclipse.jgit.lib.AnyObjectId))\n        return ;\n    \n    final java.lang.String java.lang.String = org.eclipse.jgit.lib.AnyObjectId.name();\n    final java.lang.String java.lang.String = java.lang.String.substring(0, 2);\n    final java.lang.String java.lang.String = java.lang.String.substring(2);\n    final java.lang.String java.lang.String = (java.lang.String + \"/\") + java.lang.String;\n    for (int int = int ; int < (java.util.List<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.size()) ; int++) {\n        if (org.eclipse.jgit.transport.WalkFetchConnection.downloadLooseObject(org.eclipse.jgit.lib.AnyObjectId, java.lang.String, java.util.List<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.get(int))) {\n            int = int;\n            return ;\n        } \n    }\n    for (int int = 0 ; int < (int) ; int++) {\n        if (org.eclipse.jgit.transport.WalkFetchConnection.downloadLooseObject(org.eclipse.jgit.lib.AnyObjectId, java.lang.String, java.util.List<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.get(int))) {\n            int = int;\n            return ;\n        } \n    }\n    while (!(java.util.LinkedList<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.isEmpty())) {\n        final org.eclipse.jgit.transport.WalkRemoteObjectDatabase org.eclipse.jgit.transport.WalkRemoteObjectDatabase = java.util.LinkedList<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.removeFirst();\n        final java.util.Collection<java.lang.String> java.util.Collection<java.lang.String>;\n        try {\n            org.eclipse.jgit.lib.ProgressMonitor.beginTask(\"Listing packs\", org.eclipse.jgit.lib.ProgressMonitor.int);\n            java.util.Collection<java.lang.String> = org.eclipse.jgit.transport.WalkRemoteObjectDatabase.getPackNames();\n        } catch (java.io.IOException java.io.IOException) {\n            org.eclipse.jgit.transport.WalkFetchConnection.recordError(org.eclipse.jgit.lib.AnyObjectId, java.io.IOException);\n            continue;\n        } finally {\n            org.eclipse.jgit.lib.ProgressMonitor.endTask();\n        }\n        if ((java.util.Collection<java.lang.String> == null) || (java.util.Collection<java.lang.String>.isEmpty()))\n            continue;\n        \n        for (final java.lang.String java.lang.String : java.util.Collection<java.lang.String>) {\n            if (java.util.Set<java.lang.String>.add(java.lang.String))\n                java.util.LinkedList<org.eclipse.jgit.transport.WalkFetchConnection.RemotePack>.add(new org.eclipse.jgit.transport.WalkFetchConnection.RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase , java.lang.String));\n            \n        }\n        if (org.eclipse.jgit.transport.WalkFetchConnection.downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor, org.eclipse.jgit.lib.AnyObjectId))\n            return ;\n        \n    }\n    java.util.Collection<org.eclipse.jgit.transport.WalkRemoteObjectDatabase> java.util.Collection<org.eclipse.jgit.transport.WalkRemoteObjectDatabase> = org.eclipse.jgit.transport.WalkFetchConnection.expandOneAlternate(org.eclipse.jgit.lib.AnyObjectId, org.eclipse.jgit.lib.ProgressMonitor);\n    if ((java.util.Collection<org.eclipse.jgit.transport.WalkRemoteObjectDatabase> != null) && (!(java.util.Collection<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.isEmpty()))) {\n        for (final org.eclipse.jgit.transport.WalkRemoteObjectDatabase org.eclipse.jgit.transport.WalkRemoteObjectDatabase : java.util.Collection<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>) {\n            java.util.List<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.add(org.eclipse.jgit.transport.WalkRemoteObjectDatabase);\n            java.util.LinkedList<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.add(org.eclipse.jgit.transport.WalkRemoteObjectDatabase);\n            java.util.LinkedList<org.eclipse.jgit.transport.WalkRemoteObjectDatabase>.add(org.eclipse.jgit.transport.WalkRemoteObjectDatabase);\n        }\n        continue;\n    } \n    java.util.List<java.lang.Throwable> java.util.List<java.lang.Throwable> = java.util.HashMap<org.eclipse.jgit.lib.ObjectId, java.util.List<java.lang.Throwable>>.get(org.eclipse.jgit.lib.AnyObjectId);\n    final org.eclipse.jgit.errors.TransportException org.eclipse.jgit.errors.TransportException;\n    org.eclipse.jgit.errors.TransportException = new org.eclipse.jgit.errors.TransportException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.AnyObjectId.name()));\n    if ((java.util.List<java.lang.Throwable> != null) && (!(java.util.List<java.lang.Throwable>.isEmpty()))) {\n        if ((java.util.List<java.lang.Throwable>.size()) == 1)\n            org.eclipse.jgit.errors.TransportException.initCause(java.util.List<java.lang.Throwable>.get(0));\n        else\n            org.eclipse.jgit.errors.TransportException.initCause(new org.eclipse.jgit.errors.CompoundException(java.util.List<java.lang.Throwable>));\n        \n    } \n    throw org.eclipse.jgit.errors.TransportException;\n}"},"status":-2},{"failures":[5,0,1,2,3,4],"tindex":"f4da67a7-c845-11e4-b557-7944fd62fa7f","variableMapping":{"ignoreMissingStart":"first"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker:100","type":"CtIfImpl","sourcecode":"if (boolean)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:475","type":"CtIfImpl","sourcecode":"if (boolean) {\n    java.lang.StringBuilder.append(org.eclipse.jgit.transport.BasePackFetchConnection.enableCapabilities());\n    boolean = false;\n} "},"status":-1},{"failures":[0,1,2,3,5,4,41,42,43,44,45,46,47,48],"tindex":"f4da67a8-c845-11e4-b557-5bd58665c1d6","variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.LogCommand:159","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.GitCommand<java.lang.Iterable<org.eclipse.jgit.revwalk.RevCommit>>.setCallable(false)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.PushCommand:197","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.GitCommand<java.lang.Iterable<org.eclipse.jgit.transport.PushResult>>.checkCallable()"},"status":-1},{"failures":[3,5,0,1,2,4],"tindex":"f4da8eb9-c845-11e4-b557-1595abb2d96d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:445","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.LockFile.renameLock()) {\n    boolean = false;\n    return true;\n} "},"status":-1},{"failures":[3,0,1,2,5,4],"tindex":"f4da8eba-c845-11e4-b557-fdf635b37368","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportHttp:451","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('/')"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.ReflogCommandTest.testHeadReflog":7,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.transport.PackParserTest.testDataAfterPackFooterSingleRead":39,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithLoosePrefixNameExists":20,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithPackedPrefixNameExists":13,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":30,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithPackedPrefixOfExisting":19,"org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_SmallObjectChain":32,"org.eclipse.jgit.transport.PackParserTest.testMaxObjectSizeDeltaBlock":38,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNoCacheObjectIdSubclass":14,"org.eclipse.jgit.transport.PackParserTest.testDataAfterPackFooterSplitHeaderRead":34,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseParentOntoHeadShouldBeUptoDate":12,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":24,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":22,"org.eclipse.jgit.transport.PackParserTest.test1":35,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":3,"org.eclipse.jgit.transport.PackParserTest.test2":36,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":44,"org.eclipse.jgit.api.RebaseCommandTest.testUpToDate":11,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":21,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":5,"org.eclipse.jgit.transport.TestProtocolTest.testReceivePackFactory":48,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithLoosePrefixOfExisting":16,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":10,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":41,"org.eclipse.jgit.api.PushCommandTest.testPush":43,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testCreate":9,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":46,"org.eclipse.jgit.transport.TestProtocolTest.testPush":47,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":28,"org.eclipse.jgit.transport.PackParserTest.testMaxObjectSizeDeltaResultSize":40,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":29,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":27,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":42,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchAlsoInPack":17,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":26,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":31,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":25,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteHead":18,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":45,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.ReflogCommandTest.testAmendReflog":6,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":23,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteHEADreferencedRef":15,"org.eclipse.jgit.transport.PackParserTest.testTinyThinPack":37,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":33,"org.eclipse.jgit.lib.ReflogConfigTest.testlogAllRefUpdates":8}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"d693c371-c834-11e4-b85e-7b162b631dcc","variableMapping":{"this":"refUpdate"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsRefUpdate:86","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.setOldObjectId(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:423","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.setRefLogIdent(org.eclipse.jgit.lib.PersonIdent)"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"d695bf42-c834-11e4-b85e-6d5459079d05","variableMapping":{"baseByPos":"baseByPos"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.PackParser:480","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.LongMap<org.eclipse.jgit.transport.PackParser.UnresolvedDelta> = new org.eclipse.jgit.transport.LongMap<org.eclipse.jgit.transport.PackParser.UnresolvedDelta>()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:528","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.LongMap<org.eclipse.jgit.transport.PackParser.UnresolvedDelta> = null"},"status":-1},{"failures":[5,0,1,2,3,4],"tindex":"d695bf43-c834-11e4-b85e-a391d1a86b51","variableMapping":{"tw":"walk"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:1128","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.NameConflictTreeWalk.release()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ArchiveCommand:374","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.TreeWalk.getObjectId(org.eclipse.jgit.lib.MutableObjectId, 0)"},"status":-1},{"failures":[],"tindex":"d695e654-c834-11e4-b85e-0581692b1fae","variableMapping":{"this":"gen"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:448","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.blame.BlameResult org.eclipse.jgit.blame.BlameResult = org.eclipse.jgit.blame.BlameResult.org.eclipse.jgit.blame.BlameResult.create(this);\n    if (org.eclipse.jgit.blame.BlameResult != null)\n        org.eclipse.jgit.blame.BlameResult.computeAll();\n    \n    return org.eclipse.jgit.blame.BlameResult;\n} finally {\n    org.eclipse.jgit.blame.BlameGenerator.release();\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.BlameCommand:204","type":"CtTryImpl","sourcecode":"try {\n    if ((org.eclipse.jgit.diff.DiffAlgorithm) != null)\n        org.eclipse.jgit.blame.BlameGenerator.setDiffAlgorithm(org.eclipse.jgit.diff.DiffAlgorithm);\n    \n    if ((org.eclipse.jgit.diff.RawTextComparator) != null)\n        org.eclipse.jgit.blame.BlameGenerator.setTextComparator(org.eclipse.jgit.diff.RawTextComparator);\n    \n    if ((java.lang.Boolean) != null)\n        org.eclipse.jgit.blame.BlameGenerator.setFollowFileRenames(java.lang.Boolean.booleanValue());\n    \n    if ((java.util.Collection<org.eclipse.jgit.lib.ObjectId>) != null)\n        org.eclipse.jgit.blame.BlameGenerator.reverse(org.eclipse.jgit.lib.ObjectId, java.util.Collection<org.eclipse.jgit.lib.ObjectId>);\n    else if ((org.eclipse.jgit.lib.ObjectId) != null)\n        org.eclipse.jgit.blame.BlameGenerator.push(null, org.eclipse.jgit.lib.ObjectId);\n    else {\n        org.eclipse.jgit.blame.BlameGenerator.push(null, org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.lib.Constants.java.lang.String));\n        if (!(org.eclipse.jgit.lib.Repository.isBare())) {\n            org.eclipse.jgit.dircache.DirCache org.eclipse.jgit.dircache.DirCache = org.eclipse.jgit.lib.Repository.readDirCache();\n            int int = org.eclipse.jgit.dircache.DirCache.findEntry(java.lang.String);\n            if (0 <= int)\n                org.eclipse.jgit.blame.BlameGenerator.push(null, org.eclipse.jgit.dircache.DirCache.getEntry(int).getObjectId());\n            \n            java.io.File java.io.File = new java.io.File(org.eclipse.jgit.lib.Repository.getWorkTree() , java.lang.String);\n            if (org.eclipse.jgit.lib.Repository.getFS().isFile(java.io.File)) {\n                org.eclipse.jgit.diff.RawText org.eclipse.jgit.diff.RawText = org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File);\n                org.eclipse.jgit.blame.BlameGenerator.push(null, org.eclipse.jgit.diff.RawText);\n            } \n        } \n    }\n    return org.eclipse.jgit.blame.BlameGenerator.computeBlameResult();\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(java.io.IOException.getMessage() , java.io.IOException);\n} finally {\n    org.eclipse.jgit.blame.BlameGenerator.release();\n}"},"status":-2},{"failures":[],"tindex":"d695e655-c834-11e4-b85e-11cdc7166d21","variableMapping":{"size":"length","this":"objectIds","index":"lastIdx"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.BlockList:265","type":"CtForImpl","sourcecode":"for ( ; int < ((int) - 1) ; int++)\n    org.eclipse.jgit.util.BlockList<T>.set(int, org.eclipse.jgit.util.BlockList<T>.get((int + 1)));"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:272","type":"CtForEachImpl","sourcecode":"OBJECT_SCAN : for (T T : java.lang.Iterable<T>) {\n    try {\n        long long = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.findOffset(this, T);\n        if (0 < long) {\n            java.util.ArrayList<org.eclipse.jgit.internal.storage.dfs.DfsReader.FoundObject<T>>.add(new org.eclipse.jgit.internal.storage.dfs.DfsReader.FoundObject<T>(T , int , org.eclipse.jgit.internal.storage.dfs.DfsPackFile , long));\n            continue;\n        } \n    } catch (java.io.IOException java.io.IOException) {\n    }\n    for (int int = 0 ; int < (org.eclipse.jgit.internal.storage.dfs.DfsPackFile[].int) ; int++) {\n        if (int == int)\n            continue;\n        \n        org.eclipse.jgit.internal.storage.dfs.DfsPackFile org.eclipse.jgit.internal.storage.dfs.DfsPackFile = org.eclipse.jgit.internal.storage.dfs.DfsPackFile[][int];\n        if (boolean && (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.isGarbage()))\n            continue;\n        \n        try {\n            long long = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.findOffset(this, T);\n            if (0 < long) {\n                java.util.ArrayList<org.eclipse.jgit.internal.storage.dfs.DfsReader.FoundObject<T>>.add(new org.eclipse.jgit.internal.storage.dfs.DfsReader.FoundObject<T>(T , int , org.eclipse.jgit.internal.storage.dfs.DfsPackFile , long));\n                int = int;\n                org.eclipse.jgit.internal.storage.dfs.DfsPackFile = org.eclipse.jgit.internal.storage.dfs.DfsPackFile;\n                continue OBJECT_SCAN;\n            } \n        } catch (java.io.IOException java.io.IOException) {\n        }\n    }\n    java.util.ArrayList<org.eclipse.jgit.internal.storage.dfs.DfsReader.FoundObject<T>>.add(new org.eclipse.jgit.internal.storage.dfs.DfsReader.FoundObject<T>(T));\n}"},"status":-2},{"failures":[],"tindex":"d695e656-c834-11e4-b85e-df2713275ccf","variableMapping":{"org.eclipse.jgit.lib.RepositoryState.MERGING_RESOLVED":"org.eclipse.jgit.lib.RepositoryState.REVERTING_RESOLVED","this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:1094","type":"CtIfImpl","sourcecode":"if (!(org.eclipse.jgit.lib.Repository.readDirCache().hasUnmergedPaths())) {\n    return org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:1122","type":"CtIfImpl","sourcecode":"if (new java.io.File(org.eclipse.jgit.lib.Repository.getDirectory() , org.eclipse.jgit.lib.Constants.java.lang.String).exists()) {\n    try {\n        if (!(org.eclipse.jgit.lib.Repository.readDirCache().hasUnmergedPaths())) {\n            return org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState;\n        } \n    } catch (java.io.IOException java.io.IOException) {\n    }\n    return org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState;\n} "},"status":-2},{"failures":[0,1,2,3,5,4],"tindex":"d695e657-c834-11e4-b85e-d1e3f915e67e","variableMapping":{"refdb":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector:195","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.clearCache()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase:126","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.RefCache.org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.size()) ; int++) {\n    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.RefCache.org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.get(int);\n    java.lang.String java.lang.String = org.eclipse.jgit.lib.Ref.getName();\n    org.eclipse.jgit.lib.Ref = org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref, 0, org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>);\n    if ((org.eclipse.jgit.lib.Ref != null) && ((org.eclipse.jgit.lib.Ref.getObjectId()) != null)) {\n        org.eclipse.jgit.util.RefList.Builder<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.Ref);\n    } else {\n        int int = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.find(java.lang.String);\n        if (0 <= int)\n            org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.remove(int);\n        \n    }\n}"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"d695e658-c834-11e4-b85e-ad8690b8b402","variableMapping":{"maxK":"cmp","k":"cmp"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:341","type":"CtIfImpl","sourcecode":"if (int > (int))\n    return (int) - ((int ^ (int)) & 1);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AnyObjectId:181","type":"CtIfImpl","sourcecode":"if (int != 0)\n    return int;\n"},"status":-1},{"failures":[3,0,1,2,5,4],"tindex":"d695e659-c834-11e4-b85e-896a370a381c","variableMapping":{"sb":"r"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:246","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.OrTreeFilter:192","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\")\")"},"status":-1},{"failures":[],"tindex":"d695e65a-c834-11e4-b85e-3b5292a39773","variableMapping":{"prefixLen":"cnt"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.NoteParser:133","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.notes.LeafBucket(int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.LeafBucket:157","type":"CtReturnImpl","sourcecode":"return 0 < (int) ? this : null"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":3,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5],"tindex":"d35caf34-c846-11e4-a725-83c11eeb1bc8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:281","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.MissingBundlePrerequisiteException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>)"},"status":-1},{"failures":[6,7,8,9,10,11,12,0,1,2,3,4,5],"tindex":"d360cde5-c846-11e4-a725-b1376898e12d","variableMapping":{"org.eclipse.jgit.transport.AmazonS3.SIGNED_HEADERS":"uncommittedChanges"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:124","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.AmazonS3.java.util.Set<java.lang.String>.add(\"content-type\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.Status:197","type":"CtInvocationImpl","sourcecode":"java.util.Set<java.lang.String>.addAll(org.eclipse.jgit.lib.IndexDiff.getModified())"},"status":-1},{"failures":[],"tindex":"d360cde6-c846-11e4-a725-551cae6a3e1a","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:423","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.InitCommand:99","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(java.lang.String)"},"status":-2},{"failures":[],"tindex":"d360cde7-c846-11e4-a725-9f57b4c14475","variableMapping":{"ref":"ref","dst":"ref","loose":"loose","idx":"org.eclipse.jgit.lib.RefDatabase.MAX_SYMBOLIC_REF_DEPTH","packed":"packed"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:719","type":"CtIfImpl","sourcecode":"if (0 <= (int = org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>.find(org.eclipse.jgit.lib.Ref.getName())))\n    org.eclipse.jgit.lib.Ref = org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>.get(int);\nelse if (0 <= (int = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.find(org.eclipse.jgit.lib.Ref.getName())))\n    org.eclipse.jgit.lib.Ref = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.get(int);\nelse\n    return org.eclipse.jgit.lib.Ref;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:709","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.Ref.isSymbolic()) {\n    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Ref.getTarget();\n    if ((org.eclipse.jgit.lib.RefDatabase.int) <= int)\n        return null;\n    \n    if ((org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef> != null) && (org.eclipse.jgit.lib.Ref.getName().startsWith(java.lang.String))) {\n        int int;\n        if (0 <= (int = org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>.find(org.eclipse.jgit.lib.Ref.getName())))\n            org.eclipse.jgit.lib.Ref = org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>.get(int);\n        else if (0 <= (int = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.find(org.eclipse.jgit.lib.Ref.getName())))\n            org.eclipse.jgit.lib.Ref = org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>.get(int);\n        else\n            return org.eclipse.jgit.lib.Ref;\n        \n    } else {\n        org.eclipse.jgit.lib.Ref = org.eclipse.jgit.internal.storage.file.RefDirectory.readRef(org.eclipse.jgit.lib.Ref.getName(), org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>);\n        if (org.eclipse.jgit.lib.Ref == null)\n            return org.eclipse.jgit.lib.Ref;\n        \n    }\n    org.eclipse.jgit.lib.Ref = org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref, (int + 1), java.lang.String, org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>, org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref>);\n    if (org.eclipse.jgit.lib.Ref == null)\n        return null;\n    \n    return new org.eclipse.jgit.lib.SymbolicRef(org.eclipse.jgit.lib.Ref.getName() , org.eclipse.jgit.lib.Ref);\n} "},"status":-2},{"failures":[],"tindex":"d360cde8-c846-11e4-a725-5ff3a399a3f5","variableMapping":{"r":"commands"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.ReceiveCommand:147","type":"CtReturnImpl","sourcecode":"return java.util.List<org.eclipse.jgit.transport.ReceiveCommand>"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:200","type":"CtReturnImpl","sourcecode":"return java.util.Collections.java.util.Collections.unmodifiableList(java.util.List<org.eclipse.jgit.transport.ReceiveCommand>)"},"status":-2},{"failures":[0,1,2,3,4,5,13,14],"tindex":"d360cde9-c846-11e4-a725-03111d3c9682","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:769","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.lib.ObjectId)"},"status":-1},{"failures":[0,1,2,3,4,5,15,16],"tindex":"d360cdea-c846-11e4-a725-4576a89640e7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.RenameDetector:663","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.diff.RenameDetector.org.eclipse.jgit.diff.RenameDetector.sameType(org.eclipse.jgit.diff.RenameDetector.org.eclipse.jgit.diff.RenameDetector.mode(org.eclipse.jgit.diff.DiffEntry), org.eclipse.jgit.diff.RenameDetector.org.eclipse.jgit.diff.RenameDetector.mode(org.eclipse.jgit.diff.DiffEntry))) {\n    int int = org.eclipse.jgit.diff.SimilarityRenameDetector.org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(org.eclipse.jgit.diff.RenameDetector.org.eclipse.jgit.diff.RenameDetector.path(org.eclipse.jgit.diff.DiffEntry), org.eclipse.jgit.diff.RenameDetector.org.eclipse.jgit.diff.RenameDetector.path(org.eclipse.jgit.diff.DiffEntry));\n    if (int > int) {\n        org.eclipse.jgit.diff.DiffEntry = org.eclipse.jgit.diff.DiffEntry;\n        int = int;\n    } \n} "},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"d360cdeb-c846-11e4-a725-a910d8fd03f2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.TimeoutOutputStream:100","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.io.TimeoutOutputStream.endWrite()"},"status":-1},{"failures":[0,2,1,3,4,5],"tindex":"d360f4fc-c846-11e4-a725-c9343aab87fe","variableMapping":{"name":"name","ent":"ent","id":"id"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Tree:563","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.TreeEntry = new org.eclipse.jgit.lib.GitlinkTreeEntry(this , org.eclipse.jgit.lib.ObjectId , byte[])"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Tree:559","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.TreeEntry = new org.eclipse.jgit.lib.Tree(this , org.eclipse.jgit.lib.ObjectId , byte[])"},"status":-1},{"failures":[],"tindex":"d360f4fd-c846-11e4-a725-a7186a01635d","variableMapping":{"line":"path"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.TransportHttp:711","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:1291","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.util.SystemReader.org.eclipse.jgit.util.SystemReader.getInstance().checkPath(java.lang.String);\n} catch (org.eclipse.jgit.errors.CorruptObjectException org.eclipse.jgit.errors.CorruptObjectException) {\n    org.eclipse.jgit.dircache.InvalidPathException org.eclipse.jgit.dircache.InvalidPathException = new org.eclipse.jgit.dircache.InvalidPathException(java.lang.String);\n    org.eclipse.jgit.dircache.InvalidPathException.initCause(org.eclipse.jgit.errors.CorruptObjectException);\n    throw org.eclipse.jgit.dircache.InvalidPathException;\n}"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":13,"org.eclipse.jgit.diff.RenameDetectorTest.testExactRename_MultipleIdenticalDeletes":16,"org.eclipse.jgit.diff.RenameDetectorTest.testExactRename_OneDeleteManyAdds":15,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChange":9,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChangeOtherCommit":12,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChangeBaseCommit":8,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":2,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedTopicChange":7,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedTopicChange":10,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldLeaveWorkspaceUntouchedWithUnstagedChangesConflict":6,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":14,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedMasterChange":11}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5],"tindex":"627fe47b-c868-11e4-82e6-f9fd2fcac5de","variableMapping":{"out":"out"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ArchiveCommand:458","type":"CtAssignmentImpl","sourcecode":"this.java.io.OutputStream = java.io.OutputStream"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1027","type":"CtAssignmentImpl","sourcecode":"java.io.OutputStream = new org.eclipse.jgit.transport.SideBandOutputStream(org.eclipse.jgit.transport.SideBandOutputStream.int , org.eclipse.jgit.transport.SideBandOutputStream.int , java.io.OutputStream)"},"status":-1},{"failures":[],"tindex":"62895a5c-c868-11e4-82e6-9bcf6f631569","variableMapping":{"match":"reuse","list":"reuse"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:196","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.size()) > (java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.size()))\n    java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> = java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:123","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit : org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.WalkResult.java.lang.Iterable<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>)\n    org.eclipse.jgit.util.BlockList<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.add(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit);"},"status":-2},{"failures":[0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,21,22,23,3,4,5],"tindex":"62895a5d-c868-11e4-82e6-b7afed0b1983","variableMapping":{"total":"sz"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:239","type":"CtIfImpl","sourcecode":"if (long == 0)\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:969","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[],"tindex":"62895a5e-c868-11e4-82e6-e1b4b24bf8d9","variableMapping":{"i":"depth","cLen":"depth"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.TreeWalk:864","type":"CtIfImpl","sourcecode":"if (int > int)\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:892","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    java.lang.String java.lang.String;\n    try {\n        java.lang.String = org.eclipse.jgit.transport.PacketLineIn.readString();\n    } catch (java.io.EOFException java.io.EOFException) {\n        if ((!(boolean)) && ((int) > 0))\n            return false;\n        \n        throw java.io.EOFException;\n    }\n    if (java.lang.String == (org.eclipse.jgit.transport.PacketLineIn.java.lang.String)) {\n        org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List<org.eclipse.jgit.lib.ObjectId>, org.eclipse.jgit.lib.ObjectId);\n        if ((java.util.Set<org.eclipse.jgit.revwalk.RevObject>.isEmpty()) || ((org.eclipse.jgit.transport.GitProtocolConstants.MultiAck) != (org.eclipse.jgit.transport.GitProtocolConstants.MultiAck.org.eclipse.jgit.transport.GitProtocolConstants.MultiAck)))\n            org.eclipse.jgit.transport.PacketLineOut.writeString(\"NAK\\n\");\n        \n        if ((boolean) && (boolean)) {\n            org.eclipse.jgit.transport.PacketLineOut.writeString(((\"ACK \" + (org.eclipse.jgit.lib.ObjectId.name())) + \"\\n\"));\n            return true;\n        } \n        if (!(boolean))\n            return false;\n        \n        org.eclipse.jgit.transport.PacketLineOut.flush();\n    } else if ((java.lang.String.startsWith(\"have \")) && ((java.lang.String.length()) == 45)) {\n        java.util.List<org.eclipse.jgit.lib.ObjectId>.add(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromString(java.lang.String.substring(5)));\n    } else if (java.lang.String.equals(\"done\")) {\n        org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List<org.eclipse.jgit.lib.ObjectId>, org.eclipse.jgit.lib.ObjectId);\n        if (java.util.Set<org.eclipse.jgit.revwalk.RevObject>.isEmpty())\n            org.eclipse.jgit.transport.PacketLineOut.writeString(\"NAK\\n\");\n        else if ((org.eclipse.jgit.transport.GitProtocolConstants.MultiAck) != (org.eclipse.jgit.transport.GitProtocolConstants.MultiAck.org.eclipse.jgit.transport.GitProtocolConstants.MultiAck))\n            org.eclipse.jgit.transport.PacketLineOut.writeString(((\"ACK \" + (org.eclipse.jgit.lib.ObjectId.name())) + \"\\n\"));\n        \n        return true;\n    } else {\n        throw new org.eclipse.jgit.errors.PackProtocolException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, \"have\", java.lang.String));\n    }\n}"},"status":-2},{"failures":[2,0,1,3,4,5],"tindex":"6296c7df-c868-11e4-82e6-4596840261a6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:407","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"  \")"},"status":-1},{"failures":[],"tindex":"6296c7e0-c868-11e4-82e6-cbeea52ec7f5","variableMapping":{"tn":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.Transport:440","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.transport.Transport"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.Transport:407","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.Transport.open(org.eclipse.jgit.lib.Repository, org.eclipse.jgit.transport.RemoteConfig, org.eclipse.jgit.transport.Transport.Operation.org.eclipse.jgit.transport.Transport.Operation)"},"status":-2},{"failures":[24,0,25,26,27,28,1,2,3,4,5],"tindex":"6296c7e1-c868-11e4-82e6-155a4571bf31","variableMapping":{"dirOnly":"dirOnly","pathSeparator":"pathSeparator","segment":"segment"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.internal.PathMatcher:143","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String , java.lang.Character , boolean)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.internal.PathMatcher:145","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.ignore.internal.WildCardMatcher(java.lang.String , java.lang.Character , boolean)"},"status":-1},{"failures":[],"tindex":"6296c7e2-c868-11e4-82e6-eb890cc99d7b","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectIdOwnerMap:244","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FS_POSIX_Java6:136","type":"CtThrowImpl","sourcecode":"throw new java.lang.Error(java.lang.reflect.InvocationTargetException)"},"status":-2},{"failures":[],"tindex":"62976423-c868-11e4-82e6-fb7dd81288dc","variableMapping":{"b":"uri","this":"uri"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.URIish:577","type":"CtIfImpl","sourcecode":"if (!org.eclipse.jgit.transport.URIish.(org.eclipse.jgit.transport.URIish.eq(org.eclipse.jgit.transport.URIish.getScheme(), org.eclipse.jgit.transport.URIish.getScheme())))\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportProtocol:182","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.transport.URIish.getUser()) == null) || ((org.eclipse.jgit.transport.URIish.getUser().length()) == 0))\n    return false;\n"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"62976424-c868-11e4-82e6-4f4e792e7af5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:183","type":"CtWhileImpl","sourcecode":"while (java.util.Iterator<java.lang.ref.WeakReference<org.eclipse.jgit.internal.storage.pack.PackWriter>>.hasNext()) {\n    java.lang.ref.WeakReference<org.eclipse.jgit.internal.storage.pack.PackWriter> java.lang.ref.WeakReference<org.eclipse.jgit.internal.storage.pack.PackWriter> = java.util.Iterator<java.lang.ref.WeakReference<org.eclipse.jgit.internal.storage.pack.PackWriter>>.next();\n    org.eclipse.jgit.internal.storage.pack.PackWriter = java.lang.ref.WeakReference<org.eclipse.jgit.internal.storage.pack.PackWriter>.get();\n    if ((org.eclipse.jgit.internal.storage.pack.PackWriter) != null)\n        return true;\n    \n    java.util.Iterator<java.lang.ref.WeakReference<org.eclipse.jgit.internal.storage.pack.PackWriter>>.remove();\n}"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3,"org.eclipse.jgit.attributes.AttributesMatcherTest.testGetters":28,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":18,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":16,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":17,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":9,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":15,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":22,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":13,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":12,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":14,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":11,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":10,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":8,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":19,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":6,"org.eclipse.jgit.ignore.BasicRuleTest.test":24,"org.eclipse.jgit.attributes.AttributesMatcherTest.testNameOnlyMatches":27,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.transport.BundleWriterTest.testWriteHEAD":21,"org.eclipse.jgit.attributes.AttributesMatcherTest.testFileNameWildcards":25,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":23,"org.eclipse.jgit.attributes.AttributesMatcherTest.testTargetWithoutLeadingSlash":26,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":7,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":20,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":2}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

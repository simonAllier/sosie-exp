[{"failures":[0,1,2,3,4,5],"tindex":"86477d59-c823-11e4-b1f9-4775804b2ba6","variableMapping":{"data":"buf"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:850","type":"CtIfImpl","sourcecode":"if (byte[] == null)\n    throw new org.eclipse.jgit.errors.LargeObjectException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser:335","type":"CtWhileImpl","sourcecode":"while (int > 0) {\n    byte[][(int - 1)] |= 128;\n    byte[][int++] = ((byte)(int & 127));\n    int >>>= 7;\n}"},"status":-1},{"failures":[],"tindex":"86477d5a-c823-11e4-b1f9-7d061159fd95","variableMapping":{"h":"pathLen","dotSize":"pathLen"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revplot.AbstractPlotRenderer:110","type":"CtLocalVariableImpl","sourcecode":"final int int = (int - int) / 2"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.TreeWalk:776","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.treewalk.AbstractTreeIterator.int"},"status":-2},{"failures":[],"tindex":"86477d5b-c823-11e4-b1f9-4b6919afc0b9","variableMapping":{"dirIdx":"eol","bits":"comma"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectIdOwnerMap:243","type":"CtIfImpl","sourcecode":"if ((++(int)) >= (1 << (int)))\n    throw new java.util.NoSuchElementException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.CombinedFileHeader:238","type":"CtIfImpl","sourcecode":"if (int <= int)\n    break;\n"},"status":-2},{"failures":[3,4,5,0,1,2],"tindex":"86477d5c-c823-11e4-b1f9-434daf18946e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackConnection:142","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    final java.lang.Thread java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n    org.eclipse.jgit.util.io.InterruptTimer = new org.eclipse.jgit.util.io.InterruptTimer(((java.lang.Thread.getName()) + \"-Timer\"));\n    org.eclipse.jgit.util.io.TimeoutInputStream = new org.eclipse.jgit.util.io.TimeoutInputStream(java.io.InputStream , org.eclipse.jgit.util.io.InterruptTimer);\n    org.eclipse.jgit.util.io.TimeoutOutputStream = new org.eclipse.jgit.util.io.TimeoutOutputStream(java.io.OutputStream , org.eclipse.jgit.util.io.InterruptTimer);\n    org.eclipse.jgit.util.io.TimeoutInputStream.setTimeout((int * 1000));\n    org.eclipse.jgit.util.io.TimeoutOutputStream.setTimeout((int * 1000));\n    java.io.InputStream = org.eclipse.jgit.util.io.TimeoutInputStream;\n    java.io.OutputStream = org.eclipse.jgit.util.io.TimeoutOutputStream;\n} "},"status":-1},{"failures":[],"tindex":"86477d5d-c823-11e4-b1f9-a12ccb1f06f5","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.PullCommand:239","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.transport.FetchResult org.eclipse.jgit.transport.FetchResult"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.FetchCommand:130","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.transport.FetchResult org.eclipse.jgit.transport.FetchResult = org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor, java.util.List<org.eclipse.jgit.transport.RefSpec>)"},"status":-2},{"failures":[],"tindex":"86477d5e-c823-11e4-b1f9-bd46c16a5c7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:128","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String)"},"status":-2},{"failures":[],"tindex":"86477d5f-c823-11e4-b1f9-b5810a8ebbbe","variableMapping":{"s":"buf","offset":"length","length":"length","slash":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.Tree:281","type":"CtForImpl","sourcecode":"for (int = int ; (int < (byte[].int)) && ((byte[][int]) != '/') ; int++) {\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:535","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.dfs.DfsBlock = org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(this, long, long);\n    if (boolean && (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader).hasCRC32Support())) {\n        long = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader).findCRC32(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack);\n        if (org.eclipse.jgit.internal.storage.dfs.DfsBlock != null) {\n            org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32, long, ((int)(long)));\n        } else {\n            long long = long;\n            long long = long;\n            while (long > 0) {\n                final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n                org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                java.util.zip.CRC32.update(byte[], 0, int);\n                long += int;\n                long -= int;\n            }\n        }\n        if ((java.util.zip.CRC32.getValue()) != long) {\n            org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setCorrupt(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long);\n            throw new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long), org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getPackName()));\n        } \n    } else if (boolean) {\n        java.util.zip.Inflater java.util.zip.Inflater = org.eclipse.jgit.internal.storage.dfs.DfsReader.inflater();\n        byte[] byte[] = new byte[1024];\n        if (org.eclipse.jgit.internal.storage.dfs.DfsBlock != null) {\n            org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater, byte[], long, ((int)(long)));\n        } else {\n            long long = long;\n            long long = long;\n            while (long > 0) {\n                final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n                org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                java.util.zip.CRC32.update(byte[], 0, int);\n                java.util.zip.Inflater.setInput(byte[], 0, int);\n                while ((java.util.zip.Inflater.inflate(byte[], 0, byte[].int)) > 0)\n                    continue;\n                long += int;\n                long -= int;\n            }\n        }\n        if ((!(java.util.zip.Inflater.finished())) || ((java.util.zip.Inflater.getBytesRead()) != long)) {\n            org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setCorrupt(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long);\n            throw new java.io.EOFException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long)));\n        } \n        long = java.util.zip.CRC32.getValue();\n    } else {\n        long = -1;\n    }\n} catch (java.util.zip.DataFormatException java.util.zip.DataFormatException) {\n    org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setCorrupt(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long);\n    org.eclipse.jgit.errors.CorruptObjectException org.eclipse.jgit.errors.CorruptObjectException = new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack.long), org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getPackName()));\n    org.eclipse.jgit.errors.CorruptObjectException.initCause(java.util.zip.DataFormatException);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException = new org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException.initCause(org.eclipse.jgit.errors.CorruptObjectException);\n    throw org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n} catch (java.io.IOException java.io.IOException) {\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException = new org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack);\n    org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException.initCause(java.io.IOException);\n    throw org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException;\n}"},"status":-2},{"failures":[],"tindex":"86477d60-c823-11e4-b1f9-b19954d2a689","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.LimitedInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"Mark not set\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:243","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"invalid parent\")"},"status":-2},{"failures":[],"tindex":"86477d61-c823-11e4-b1f9-553852b8a2f6","variableMapping":{"refLogIncludeResult":"off"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:189","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:300","type":"CtAssignmentImpl","sourcecode":"boolean = boolean && (!boolean)"},"status":-2},{"failures":[6,7,2,8,3,4,5,0,9,1],"tindex":"8647a472-c823-11e4-b1f9-f90b3f33cdef","variableMapping":{"cnt":"v"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.UnionInputStream:186","type":"CtOperatorAssignmentImpl","sourcecode":"long -= 1"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.NB:248","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 8"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.util.NBTest.testEncodeInt64":6,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":1,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":7,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":9,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":8,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

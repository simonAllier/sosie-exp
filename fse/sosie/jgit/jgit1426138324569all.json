[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"tindex":"1f03acb9-c879-11e4-ae60-adc6a4595fe8","variableMapping":{"fOut":"fos"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter:212","type":"CtInvocationImpl","sourcecode":"java.io.FileOutputStream.getChannel().force(true)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:760","type":"CtInvocationImpl","sourcecode":"java.io.FileOutputStream.close()"},"status":-1},{"failures":[1,2,3,23,24,25,26,4,5,27,9],"tindex":"1f077d4a-c879-11e4-ae60-1bbcffd21efd","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexWriter:129","type":"CtReturnImpl","sourcecode":"return 2"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ConfigSnapshot:305","type":"CtReturnImpl","sourcecode":"return java.util.Map<java.lang.String, java.lang.String>.size()"},"status":-1},{"failures":[],"tindex":"1f0867ab-c879-11e4-ae60-2f380ef48fa0","variableMapping":{"b":"info","ptr":"org.eclipse.jgit.dircache.DirCacheEntry.P_SIZE"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:643","type":"CtIfImpl","sourcecode":"if ((byte[][int]) == '\\n')\n    return -1;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:569","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.util.NB.org.eclipse.jgit.util.NB.decodeInt32(byte[], ((int) + (org.eclipse.jgit.dircache.DirCacheEntry.int)))"},"status":-2},{"failures":[],"tindex":"1f08dcdc-c879-11e4-ae60-4bec55c51732","variableMapping":{"c":"org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH","quote":"forClient"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Config:1264","type":"CtIfImpl","sourcecode":"if ('\\\"' == int) {\n    boolean = !boolean;\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1402","type":"CtForEachImpl","sourcecode":"for (final org.eclipse.jgit.transport.ReceiveCommand org.eclipse.jgit.transport.ReceiveCommand : java.util.List<org.eclipse.jgit.transport.ReceiveCommand>) {\n    if ((org.eclipse.jgit.transport.ReceiveCommand.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result)) {\n        if (boolean)\n            org.eclipse.jgit.transport.BaseReceivePack.Reporter.sendString((\"ok \" + (org.eclipse.jgit.transport.ReceiveCommand.getRefName())));\n        \n        continue;\n    } \n    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n    if (boolean)\n        java.lang.StringBuilder.append(\"ng \").append(org.eclipse.jgit.transport.ReceiveCommand.getRefName()).append(\" \");\n    else\n        java.lang.StringBuilder.append(\" ! [rejected] \").append(org.eclipse.jgit.transport.ReceiveCommand.getRefName()).append(\" (\");\n    \n    switch (org.eclipse.jgit.transport.ReceiveCommand.getResult()) {\n        case NOT_ATTEMPTED :\n            java.lang.StringBuilder.append(\"server bug; ref not processed\");\n            break;\n        case REJECTED_NOCREATE :\n            java.lang.StringBuilder.append(\"creation prohibited\");\n            break;\n        case REJECTED_NODELETE :\n            java.lang.StringBuilder.append(\"deletion prohibited\");\n            break;\n        case REJECTED_NONFASTFORWARD :\n            java.lang.StringBuilder.append(\"non-fast forward\");\n            break;\n        case REJECTED_CURRENT_BRANCH :\n            java.lang.StringBuilder.append(\"branch is currently checked out\");\n            break;\n        case REJECTED_MISSING_OBJECT :\n            if ((org.eclipse.jgit.transport.ReceiveCommand.getMessage()) == null)\n                java.lang.StringBuilder.append(\"missing object(s)\");\n            else if ((org.eclipse.jgit.transport.ReceiveCommand.getMessage().length()) == (org.eclipse.jgit.lib.Constants.int))\n                java.lang.StringBuilder.append(((\"object \" + (org.eclipse.jgit.transport.ReceiveCommand.getMessage())) + \" missing\"));\n            else\n                java.lang.StringBuilder.append(org.eclipse.jgit.transport.ReceiveCommand.getMessage());\n            \n            break;\n        case REJECTED_OTHER_REASON :\n            if ((org.eclipse.jgit.transport.ReceiveCommand.getMessage()) == null)\n                java.lang.StringBuilder.append(\"unspecified reason\");\n            else\n                java.lang.StringBuilder.append(org.eclipse.jgit.transport.ReceiveCommand.getMessage());\n            \n            break;\n        case LOCK_FAILURE :\n            java.lang.StringBuilder.append(\"failed to lock\");\n            break;\n        case OK :\n            continue;\n    }\n    if (!boolean)\n        java.lang.StringBuilder.append(\")\");\n    \n    org.eclipse.jgit.transport.BaseReceivePack.Reporter.sendString(java.lang.StringBuilder.toString());\n}"},"status":-2},{"failures":[],"tindex":"1f0affbd-c879-11e4-ae60-b5fd55dd96dd","variableMapping":{"this":"revWalk"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:510","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.ObjectWalk.next()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:137","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Ref.getObjectId())"},"status":-2},{"failures":[],"tindex":"1f0bc30e-c879-11e4-ae60-0f6c28477b16","variableMapping":{"nextPosition":"ptr","end":"ptr"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.InflatingBitSet:109","type":"CtIfImpl","sourcecode":"if (int < (int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:568","type":"CtIfImpl","sourcecode":"if (int == 0)\n    int += 46;\n"},"status":-2},{"failures":[],"tindex":"1f0c865f-c879-11e4-ae60-cff174638c91","variableMapping":{"wantIds":"set"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:1067","type":"CtInvocationImpl","sourcecode":"java.util.Set<org.eclipse.jgit.lib.ObjectId>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:724","type":"CtIfImpl","sourcecode":"if (java.util.Collection<? extends org.eclipse.jgit.lib.ObjectId> == null)\n    java.util.Set<org.eclipse.jgit.lib.ObjectId> = java.util.Collections.java.util.Collections.emptySet();\nelse\n    java.util.Set<org.eclipse.jgit.lib.ObjectId> = new java.util.HashSet<org.eclipse.jgit.lib.ObjectId>(java.util.Collection<? extends org.eclipse.jgit.lib.ObjectId>);\n"},"status":-2},{"failures":[1,2,3,4,5,9],"tindex":"1f0d97d0-c879-11e4-ae60-31667a5c616b","variableMapping":{"lastPackedRefs":"localRefs","refsBefore":"localRefs"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.GC:565","type":"CtAssignmentImpl","sourcecode":"java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> = java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.FetchProcess:455","type":"CtAssignmentImpl","sourcecode":"java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.transport.Transport.org.eclipse.jgit.lib.Repository.getRefDatabase().getRefs(org.eclipse.jgit.lib.RefDatabase.java.lang.String)"},"status":-1},{"failures":[28,1,2,3,4,5,29,9],"tindex":"1f0e0d01-c879-11e4-ae60-27b0d9cc8f46","variableMapping":{"treeIt":"this","dcIt":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:1123","type":"CtIfImpl","sourcecode":"if (!(org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryObjectId().equals(org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryObjectId())))\n    return true;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:1026","type":"CtSwitchImpl","sourcecode":"switch (org.eclipse.jgit.treewalk.WorkingTreeIterator.getOptions().getAutoCRLF()) {\n    case INPUT :\n    case TRUE :\n        java.io.InputStream java.io.InputStream = null;\n        try {\n            org.eclipse.jgit.lib.ObjectLoader org.eclipse.jgit.lib.ObjectLoader = org.eclipse.jgit.lib.ObjectReader.open(org.eclipse.jgit.dircache.DirCacheEntry.getObjectId());\n            if (org.eclipse.jgit.lib.ObjectLoader == null)\n                return true;\n            \n            java.io.InputStream = new org.eclipse.jgit.util.io.EolCanonicalizingInputStream(org.eclipse.jgit.lib.ObjectLoader.openStream() , true , true);\n            long long;\n            try {\n                long = org.eclipse.jgit.treewalk.WorkingTreeIterator.org.eclipse.jgit.treewalk.WorkingTreeIterator.computeLength(java.io.InputStream);\n            } catch (org.eclipse.jgit.util.io.EolCanonicalizingInputStream.IsBinaryException org.eclipse.jgit.util.io.EolCanonicalizingInputStream.IsBinaryException) {\n                return true;\n            } finally {\n                java.io.InputStream.close();\n            }\n            java.io.InputStream = new org.eclipse.jgit.util.io.EolCanonicalizingInputStream(org.eclipse.jgit.lib.ObjectLoader.openStream() , true);\n            byte[] byte[] = org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream, long);\n            boolean boolean = (org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryObjectId().compareTo(byte[], 0)) != 0;\n            return boolean;\n        } catch (java.io.IOException java.io.IOException) {\n            return true;\n        } finally {\n            if (java.io.InputStream != null)\n                try {\n                    java.io.InputStream.close();\n                } catch (java.io.IOException java.io.IOException) {\n                }\n            \n        }\n    case FALSE :\n        break;\n}"},"status":-1},{"failures":[1,2,3,4,5,30,31,9],"tindex":"1f0e0d02-c879-11e4-ae60-117c6545aa5c","variableMapping":{"only":"targetRefName"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CommitCommand:724","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String.endsWith(\"/\") ? java.lang.String.substring(0, ((java.lang.String.length()) - 1)) : java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:278","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.eclipse.jgit.lib.Repository.org.eclipse.jgit.lib.Repository.shortenRefName(java.lang.String)"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":19,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":6,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":14,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":0,"org.eclipse.jgit.lib.ConfigTest.readNamesInSubSectionRecursive":24,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":30,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":7,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.lib.IndexDiffTest.testAutoCRLFInput":28,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":31,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.lib.ConfigTest.test_ReadNamesInSectionRecursive":23,"org.eclipse.jgit.merge.ResolveMergerTest.mergeWithCrlfInWT":29,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":10,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":11,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":21,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":16,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":15,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":22,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":13,"org.eclipse.jgit.lib.ConfigTest.test010_readNamesInSubSection":26,"org.eclipse.jgit.api.GitConstructionTest.testClose":8,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":9,"org.eclipse.jgit.lib.ConfigTest.test009_readNamesInSection":25,"org.eclipse.jgit.api.RenameBranchCommandTest.renameBranchNoConfigValues":27,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":18,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":20,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":12,"org.eclipse.jgit.internal.storage.file.GcConcurrentTest.concurrentRepack":17}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

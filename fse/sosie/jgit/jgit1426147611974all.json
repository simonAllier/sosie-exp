[{"failures":[],"tindex":"bda0ca2f-c88e-11e4-a1ed-b57679fb910e","variableMapping":{"receivedReady":"finalRequest","noDone":"finalRequest"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:616","type":"CtIfImpl","sourcecode":"if ((boolean) & boolean)\n    break SEND_HAVES;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportHttp:984","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    org.eclipse.jgit.util.io.UnionInputStream.add(org.eclipse.jgit.transport.TransportHttp.Service.HttpExecuteStream);\n"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"bda0ca30-c88e-11e4-a1ed-31c1eb15231d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackPushConnection:323","type":"CtWhileImpl","sourcecode":"while ((java.lang.String = org.eclipse.jgit.transport.PacketLineIn.readString()) != (org.eclipse.jgit.transport.PacketLineIn.java.lang.String)) {\n    boolean boolean = false;\n    int int = -1;\n    if (java.lang.String.startsWith(\"ok \")) {\n        boolean = true;\n        int = java.lang.String.length();\n    } else if (java.lang.String.startsWith(\"ng \")) {\n        boolean = false;\n        int = java.lang.String.indexOf(\" \", 3);\n    } \n    if (int == (-1))\n        throw new org.eclipse.jgit.errors.PackProtocolException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.transport.URIish, java.lang.String));\n    \n    final java.lang.String java.lang.String = java.lang.String.substring(3, int);\n    final java.lang.String java.lang.String = boolean ? null : java.lang.String.substring((int + 1));\n    final org.eclipse.jgit.transport.RemoteRefUpdate org.eclipse.jgit.transport.RemoteRefUpdate = java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>.get(java.lang.String);\n    if (org.eclipse.jgit.transport.RemoteRefUpdate == null)\n        throw new org.eclipse.jgit.errors.PackProtocolException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.transport.URIish, java.lang.String));\n    \n    if (boolean) {\n        org.eclipse.jgit.transport.RemoteRefUpdate.setStatus(org.eclipse.jgit.transport.RemoteRefUpdate.Status.org.eclipse.jgit.transport.RemoteRefUpdate.Status);\n    } else {\n        org.eclipse.jgit.transport.RemoteRefUpdate.setStatus(org.eclipse.jgit.transport.RemoteRefUpdate.Status.org.eclipse.jgit.transport.RemoteRefUpdate.Status);\n        org.eclipse.jgit.transport.RemoteRefUpdate.setMessage(java.lang.String);\n    }\n}"},"status":-1},{"failures":[],"tindex":"bda0ca31-c88e-11e4-a1ed-61da8867884f","variableMapping":{"fs":"org.eclipse.jgit.util.FS.DETECTED"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.SystemReader:111","type":"CtLocalVariableImpl","sourcecode":"final java.io.File java.io.File = org.eclipse.jgit.util.FS.userHome()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportBundleFile:112","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = org.eclipse.jgit.util.FS.org.eclipse.jgit.util.FS.resolve(new java.io.File(\".\"), org.eclipse.jgit.transport.URIish.getPath())"},"status":-2},{"failures":[15,7,8,9,10,6,13,16,11,17,12],"tindex":"bda0ca32-c88e-11e4-a1ed-7584800074ce","variableMapping":{"last":"last","objectId":"objectId"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:201","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.internal.storage.dfs.DfsPackFile) != null) {\n    org.eclipse.jgit.lib.ObjectLoader org.eclipse.jgit.lib.ObjectLoader = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.get(this, org.eclipse.jgit.lib.AnyObjectId);\n    if (org.eclipse.jgit.lib.ObjectLoader != null)\n        return org.eclipse.jgit.lib.ObjectLoader;\n    \n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:208","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.internal.storage.dfs.DfsPackFile org.eclipse.jgit.internal.storage.dfs.DfsPackFile : org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.getPacks()) {\n    if ((org.eclipse.jgit.internal.storage.dfs.DfsPackFile == (org.eclipse.jgit.internal.storage.dfs.DfsPackFile)) || (boolean && (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.isGarbage())))\n        continue;\n    \n    org.eclipse.jgit.lib.ObjectLoader org.eclipse.jgit.lib.ObjectLoader = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.get(this, org.eclipse.jgit.lib.AnyObjectId);\n    if (org.eclipse.jgit.lib.ObjectLoader != null) {\n        org.eclipse.jgit.internal.storage.dfs.DfsPackFile = org.eclipse.jgit.internal.storage.dfs.DfsPackFile;\n        return org.eclipse.jgit.lib.ObjectLoader;\n    } \n}"},"status":-1},{"failures":[],"tindex":"bda0ca33-c88e-11e4-a1ed-cf39ee86a564","variableMapping":{"idx2":"modeB","idx1":"org.eclipse.jgit.dircache.DirCacheEntry.STAGE_1"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.internal.Strings:142","type":"CtIfImpl","sourcecode":"if (int > int)\n    return true;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:561","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.treewalk.NameConflictTreeWalk.isSubtree()) {\n    if (org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.nonTree(int)) && (!org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.nonTree(int)))) {\n        if (org.eclipse.jgit.merge.ResolveMerger.org.eclipse.jgit.merge.ResolveMerger.nonTree(int))\n            org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        \n        org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        java.util.List<java.lang.String>.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString());\n        boolean = false;\n        return true;\n    } \n    if (org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.nonTree(int)) && (!org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.nonTree(int)))) {\n        if (org.eclipse.jgit.merge.ResolveMerger.org.eclipse.jgit.merge.ResolveMerger.nonTree(int))\n            org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        \n        org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        java.util.List<java.lang.String>.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString());\n        boolean = false;\n        return true;\n    } \n    if (!org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.nonTree(int)))\n        return true;\n    \n} "},"status":-2},{"failures":[],"tindex":"bda0ca34-c88e-11e4-a1ed-b98ab847a3af","variableMapping":{"name":"pathToBeSaved"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:750","type":"CtIfImpl","sourcecode":"if ((\".\".equals(java.lang.String)) || (\"..\".equals(java.lang.String)))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.IndexDiffFilter:246","type":"CtWhileImpl","sourcecode":"while ((!(java.util.LinkedList<java.lang.String>.isEmpty())) && (java.util.LinkedList<java.lang.String>.getLast().startsWith(java.lang.String)))\n    java.util.LinkedList<java.lang.String>.removeLast();"},"status":-2},{"failures":[18,19,20,7,8,9,10,13,6],"tindex":"bda0ca35-c88e-11e4-a1ed-6b17f3b3e387","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:493","type":"CtInvocationImpl","sourcecode":"java.util.List<java.lang.String>.add(org.eclipse.jgit.lib.Ref.getName())"},"status":-1},{"failures":[7,8,9,10,13,6],"tindex":"bda0ca36-c88e-11e4-a1ed-89e11bdef17c","variableMapping":{"inputStream":"in"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:739","type":"CtTryImpl","sourcecode":"try {\n    if ((java.io.InputStream) != null)\n        java.io.InputStream.close();\n    \n} catch (java.io.IOException java.io.IOException) {\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheIterator:323","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)"},"status":-1},{"failures":[],"tindex":"bda0ca37-c88e-11e4-a1ed-ad4531631248","variableMapping":{"first":"startCommit"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1329","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.this.next()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CheckoutCommand:626","type":"CtAssignmentImpl","sourcecode":"this.org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit"},"status":-2},{"failures":[],"tindex":"bda0ca38-c88e-11e4-a1ed-7ba7224d151a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.errors.MissingObjectException:85","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.errors.MissingObjectException.this(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.Constants.org.eclipse.jgit.lib.Constants.typeString(int))"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromFallback":15,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.concurrentOnlyOneWritesPackedRefs":19,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":10,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":0,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":4,"org.eclipse.jgit.api.PushCommandTest.testPush":2,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.looseRefPacked":20,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":9,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":8,"org.eclipse.jgit.transport.TestProtocolTest.testUploadPackFactory":17,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":5,"org.eclipse.jgit.transport.TestProtocolTest.testPush":11,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":14,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":6,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":7,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":3,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":1,"org.eclipse.jgit.transport.TestProtocolTest.testFetch":16,"org.eclipse.jgit.transport.TestProtocolTest.testReceivePackFactory":12,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":13,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.whileRefLockedRefNotPackedNoError":18}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

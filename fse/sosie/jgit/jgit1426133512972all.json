[{"failures":[],"tindex":"eb608883-c86d-11e4-90d8-3f2063be38cd","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:936","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.api.errors.UnmergedPathsException()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportGitSsh:346","type":"CtThrowImpl","sourcecode":"throw org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException, java.lang.String)"},"status":-2},{"failures":[],"tindex":"eb608884-c86d-11e4-90d8-cbf8f945b6ed","variableMapping":{"c":"commit","clearFlags":"commitTime","flags":"commitTime"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1262","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.revwalk.RevCommit.int) & int) == 0)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.DateRevQueue:120","type":"CtWhileImpl","sourcecode":"while ((org.eclipse.jgit.revwalk.DateRevQueue.Entry != null) && ((org.eclipse.jgit.revwalk.DateRevQueue.Entry.org.eclipse.jgit.revwalk.RevCommit.int) > long)) {\n    org.eclipse.jgit.revwalk.DateRevQueue.Entry = org.eclipse.jgit.revwalk.DateRevQueue.Entry;\n    org.eclipse.jgit.revwalk.DateRevQueue.Entry = org.eclipse.jgit.revwalk.DateRevQueue.Entry.org.eclipse.jgit.revwalk.DateRevQueue.Entry;\n}"},"status":-2},{"failures":[],"tindex":"eb608885-c86d-11e4-90d8-b309eece17e7","variableMapping":{"headCommit":"newHead","walk":"revWalk","newCommit":"newHead"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1205","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevWalk.isMergedInto(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit))\n    return org.eclipse.jgit.revwalk.RevCommit;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:130","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n    if (org.eclipse.jgit.lib.Ref == null)\n        throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Ref.getObjectId());\n    org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n    for (org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref : java.util.List<org.eclipse.jgit.lib.Ref>) {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getPeeledObjectId();\n        if (org.eclipse.jgit.lib.ObjectId == null)\n            org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getObjectId();\n        \n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) != 1)\n            throw new org.eclipse.jgit.api.errors.MultipleParentsNotAllowedException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.revwalk.RevCommit.name(), java.lang.Integer.java.lang.Integer.valueOf(org.eclipse.jgit.revwalk.RevCommit.getParentCount())));\n        \n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n        org.eclipse.jgit.revwalk.RevWalk.parseHeaders(org.eclipse.jgit.revwalk.RevCommit);\n        java.lang.String java.lang.String = org.eclipse.jgit.api.RevertCommand.calculateOurName(org.eclipse.jgit.lib.Ref);\n        java.lang.String java.lang.String = ((org.eclipse.jgit.revwalk.RevCommit.getId().abbreviate(7).name()) + \" \") + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage());\n        org.eclipse.jgit.merge.ResolveMerger org.eclipse.jgit.merge.ResolveMerger = ((org.eclipse.jgit.merge.ResolveMerger)(org.eclipse.jgit.merge.MergeStrategy.newMerger(org.eclipse.jgit.lib.Repository)));\n        org.eclipse.jgit.merge.ResolveMerger.setWorkingTreeIterator(new org.eclipse.jgit.treewalk.FileTreeIterator(org.eclipse.jgit.lib.Repository));\n        org.eclipse.jgit.merge.ResolveMerger.setBase(org.eclipse.jgit.revwalk.RevCommit.getTree());\n        org.eclipse.jgit.merge.ResolveMerger.setCommitNames(new java.lang.String[]{ \"BASE\" , java.lang.String , java.lang.String });\n        java.lang.String java.lang.String = (\"Revert \\\"\" + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage())) + \"\\\"\";\n        java.lang.String java.lang.String = (((java.lang.String + \"\\n\\n\") + \"This reverts commit \") + (org.eclipse.jgit.revwalk.RevCommit.getId().getName())) + \".\\n\";\n        if (org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit)) {\n            if (org.eclipse.jgit.lib.AnyObjectId.org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.revwalk.RevCommit.getTree().getId(), org.eclipse.jgit.merge.ResolveMerger.getResultTreeId()))\n                continue;\n            \n            org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.revwalk.RevCommit.getTree() , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.merge.ResolveMerger.getResultTreeId());\n            org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n            org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n            org.eclipse.jgit.revwalk.RevCommit = new org.eclipse.jgit.api.Git(org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.revwalk.RevCommit>.getRepository()).commit().setMessage(java.lang.String).setReflogComment((\"revert: \" + java.lang.String)).call();\n            java.util.List<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.Ref);\n            org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n        } else {\n            java.util.List<java.lang.String> = org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths();\n            java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> = org.eclipse.jgit.merge.ResolveMerger.getFailingPaths();\n            if (java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> != null)\n                org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n            else\n                org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n            \n            if ((!(org.eclipse.jgit.merge.ResolveMerger.failed())) && (!(java.util.List<java.lang.String>.isEmpty()))) {\n                java.lang.String java.lang.String = new org.eclipse.jgit.merge.MergeMessageFormatter().formatWithConflicts(java.lang.String, org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths());\n                org.eclipse.jgit.lib.Repository.writeRevertHead(org.eclipse.jgit.revwalk.RevCommit.getId());\n                org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(java.lang.String);\n            } \n            return null;\n        }\n    }\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.IOException) , java.io.IOException);\n} finally {\n    org.eclipse.jgit.revwalk.RevWalk.release();\n}"},"status":-2},{"failures":[],"tindex":"eb608886-c86d-11e4-90d8-dbe244320cb8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaTask:93","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((long) / (long)))"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"eb608887-c86d-11e4-90d8-e576e41a76eb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:400","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.pack.ObjectToPack.isWritten())\n    java.lang.StringBuilder.append((\" offset=\" + org.eclipse.jgit.transport.PackedObjectInfo.(getOffset())));\n"},"status":-1},{"failures":[6,7,8,9,10,1,5,11,12,13,14,15,16,17,18,19,20,21,22,23,2,3,4,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,0,58,59,60,61,62,63,64,65,66,67,68,69,70],"tindex":"eb608888-c86d-11e4-90d8-839a0a1a9e33","variableMapping":{"i":"hash","chgs":"org.eclipse.jgit.internal.storage.pack.DeltaIndex.T"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.TreeRevFilter:203","type":"CtUnaryOperatorImpl","sourcecode":"(int[][int])++"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:454","type":"CtAssignmentImpl","sourcecode":"int = ((int << 8) | ((byte[][(int + 7)]) & 255)) ^ (org.eclipse.jgit.internal.storage.pack.DeltaIndex.int[][(int >>> 23)])"},"status":-1},{"failures":[],"tindex":"eb608889-c86d-11e4-90d8-8932a525bd8d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevWalk:508","type":"CtInvocationImpl","sourcecode":"java.util.EnumSet<org.eclipse.jgit.revwalk.RevSort>.remove(org.eclipse.jgit.revwalk.RevSort.org.eclipse.jgit.revwalk.RevSort)"},"status":-2},{"failures":[2,3,4,26,71,27,28,29,72,30,31,73,32,33,34,35,36,37,38,1,5,43,74,44,75,45,0],"tindex":"eb60888a-c86d-11e4-90d8-f3e416427c37","variableMapping":{"nameUri":"branchName","cfg":"repoConfig","name":"branchName"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:758","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Config.setString(\"submodule\", java.lang.String, \"url\", java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.PullCommand:230","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.api.PullCommand.PullRebaseMode) == null) {\n    org.eclipse.jgit.api.PullCommand.PullRebaseMode = org.eclipse.jgit.api.PullCommand.org.eclipse.jgit.api.PullCommand.getRebaseMode(java.lang.String, org.eclipse.jgit.lib.Config);\n} "},"status":-1},{"failures":[],"tindex":"eb60888b-c86d-11e4-90d8-95721cf55023","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.merge.ResolveMerger:696","type":"CtLocalVariableImpl","sourcecode":"boolean boolean"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FS:1080","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"status":-2},{"failures":[],"tindex":"eb60888c-c86d-11e4-90d8-29583826da53","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:324","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RepositoryState:280","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":61,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":26,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertHeadMiddle":54,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":39,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":58,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":23,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":19,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":25,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":69,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":40,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":11,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":45,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130CopyFails":55,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":74,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyZeros_Length128":47,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":32,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":18,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":20,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyWholeObject_Length123":50,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyWholeObject_Length128":51,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":67,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":15,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":35,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":16,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":43,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":63,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130InsertFails":49,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":64,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":65,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":21,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":62,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":57,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130CopyOk":46,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":17,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":5,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":42,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":75,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":31,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_InsertFrontFails":48,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":30,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertTail":53,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":22,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":73,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":24,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":66,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":33,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testShuffleSegments":56,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":8,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":9,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":41,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":7,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":71,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":6,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":28,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":12,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":29,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":10,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":38,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":37,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testIndexSize":52,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":59,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":14,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":60,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":13,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":72,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":36,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":70,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":44,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":68,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":34,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":27}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"0da3d0a3-c861-11e4-8d68-952d3cadb73f","variableMapping":{"this":"generator"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:590","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.submodule.SubmoduleWalk.lazyLoadModulesConfig()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.SubmoduleStatusCommand:102","type":"CtWhileImpl","sourcecode":"while (org.eclipse.jgit.submodule.SubmoduleWalk.next()) {\n    org.eclipse.jgit.submodule.SubmoduleStatus org.eclipse.jgit.submodule.SubmoduleStatus = org.eclipse.jgit.api.SubmoduleStatusCommand.getStatus(org.eclipse.jgit.submodule.SubmoduleWalk);\n    java.util.Map<java.lang.String, org.eclipse.jgit.submodule.SubmoduleStatus>.put(org.eclipse.jgit.submodule.SubmoduleStatus.getPath(), org.eclipse.jgit.submodule.SubmoduleStatus);\n}"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"0da3d0a4-c861-11e4-8d68-7fef77507dc2","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackBitmapIndex:101","type":"CtLocalVariableImpl","sourcecode":"final java.io.IOException java.io.IOException"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RepositoryCache:377","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException"},"status":-1},{"failures":[1,0,2,6,7,3,4,8,9,10,11,12,13,5,14],"tindex":"0da3d0a5-c861-11e4-8d68-fdfe09d3231d","variableMapping":{"name":"name","org.eclipse.jgit.lib.Constants.HEAD":"name"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.Repository:602","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"\"))\n    java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:723","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode)"},"status":-1},{"failures":[1,0,2,3,4,5],"tindex":"0da3d0a6-c861-11e4-8d68-6fa7caa4dcf1","variableMapping":{"filter":"filter","walk":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.DiffFormatter:515","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.TreeWalk.setFilter(org.eclipse.jgit.treewalk.filter.TreeFilter)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.TreeWalk:583","type":"CtIfImpl","sourcecode":"if (!(org.eclipse.jgit.treewalk.filter.TreeFilter.include(this))) {\n    org.eclipse.jgit.treewalk.TreeWalk.skipEntriesEqual();\n    continue;\n} "},"status":-1},{"failures":[15,16,17,18,19,20,21,22,23,24,25,1,0,5,2,3,4],"tindex":"0da3d0a7-c861-11e4-8d68-31ec2552cc1d","variableMapping":{"cx":"timeStart","org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH":"timeStart","ix":"timeStart"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revplot.AbstractPlotRenderer:125","type":"CtAssignmentImpl","sourcecode":"int = int - ((org.eclipse.jgit.revplot.AbstractPlotRenderer.int) / 2)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:1588","type":"CtAssignmentImpl","sourcecode":"int = 1"},"status":-1},{"failures":[26,27,28],"tindex":"0da3d0a8-c861-11e4-8d68-ff65b10331d9","variableMapping":{"c":"entrySpan"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.SimilarityIndex:157","type":"CtIfImpl","sourcecode":"if (int == '\\n')\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheTree:326","type":"CtIfImpl","sourcecode":"if (int < (int)) {\n    final org.eclipse.jgit.dircache.DirCacheTree org.eclipse.jgit.dircache.DirCacheTree = org.eclipse.jgit.dircache.DirCacheTree[][int];\n    if (org.eclipse.jgit.dircache.DirCacheTree.contains(byte[], int, byte[].int)) {\n        org.eclipse.jgit.lib.TreeFormatter.append(org.eclipse.jgit.dircache.DirCacheTree.byte[], org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.dircache.DirCacheTree.org.eclipse.jgit.lib.ObjectId);\n        int += org.eclipse.jgit.dircache.DirCacheTree.int;\n        int++;\n        continue;\n    } \n} "},"status":-1},{"failures":[5,2,3,4,1,0],"tindex":"0da3d0a9-c861-11e4-8d68-09003fd15c7e","variableMapping":{"pattern":"line"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.filter.SubStringRevFilter:66","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.lang.String.length()) ; int++) {\n    final char char = java.lang.String.charAt(int);\n    switch (char) {\n        case '.' :\n        case '?' :\n        case '*' :\n        case '+' :\n        case '{' :\n        case '}' :\n        case '(' :\n        case ')' :\n        case '[' :\n        case ']' :\n        case '\\\\' :\n            return false;\n    }\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:919","type":"CtIfImpl","sourcecode":"if ((java.lang.String.startsWith(\"have \")) && ((java.lang.String.length()) == 45)) {\n    java.util.List<org.eclipse.jgit.lib.ObjectId>.add(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromString(java.lang.String.substring(5)));\n} else if (java.lang.String.equals(\"done\")) {\n    org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List<org.eclipse.jgit.lib.ObjectId>, org.eclipse.jgit.lib.ObjectId);\n    if (java.util.Set<org.eclipse.jgit.revwalk.RevObject>.isEmpty())\n        org.eclipse.jgit.transport.PacketLineOut.writeString(\"NAK\\n\");\n    else if ((org.eclipse.jgit.transport.GitProtocolConstants.MultiAck) != (org.eclipse.jgit.transport.GitProtocolConstants.MultiAck.org.eclipse.jgit.transport.GitProtocolConstants.MultiAck))\n        org.eclipse.jgit.transport.PacketLineOut.writeString(((\"ACK \" + (org.eclipse.jgit.lib.ObjectId.name())) + \"\\n\"));\n    \n    return true;\n} else {\n    throw new org.eclipse.jgit.errors.PackProtocolException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, \"have\", java.lang.String));\n}"},"status":-1},{"failures":[2,3,4,0,1,5],"tindex":"0da3f7ba-c861-11e4-8d68-a73898359391","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.AmazonS3:682","type":"CtSwitchImpl","sourcecode":"switch (org.eclipse.jgit.util.HttpSupport.org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)) {\n    case java.net.HttpURLConnection.int :\n        boolean = false;\n        java.lang.StringBuilder = null;\n        final org.xml.sax.XMLReader org.xml.sax.XMLReader;\n        try {\n            org.xml.sax.XMLReader = org.xml.sax.helpers.XMLReaderFactory.org.xml.sax.helpers.XMLReaderFactory.createXMLReader();\n        } catch (org.xml.sax.SAXException org.xml.sax.SAXException) {\n            throw new java.io.IOException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        }\n        org.xml.sax.XMLReader.setContentHandler(this);\n        final java.io.InputStream java.io.InputStream = java.net.HttpURLConnection.getInputStream();\n        try {\n            org.xml.sax.XMLReader.parse(new org.xml.sax.InputSource(java.io.InputStream));\n        } catch (org.xml.sax.SAXException org.xml.sax.SAXException) {\n            final java.io.IOException java.io.IOException;\n            java.io.IOException = new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.String));\n            java.io.IOException.initCause(org.xml.sax.SAXException);\n            throw java.io.IOException;\n        } finally {\n            java.io.InputStream.close();\n        }\n        return ;\n    case java.net.HttpURLConnection.int :\n        continue;\n    default :\n        throw org.eclipse.jgit.transport.AmazonS3.this.error(\"Listing\", java.lang.String, java.net.HttpURLConnection);\n}"},"status":-1},{"failures":[1,0,2,3,4,5],"tindex":"0da3f7bb-c861-11e4-8d68-0f848f65a2fe","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:637","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:558","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"0da3f7bc-c861-11e4-8d68-8d3bb096debc","variableMapping":{"sz":"i","ptr":"cntOffered"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:363","type":"CtIfImpl","sourcecode":"if (int == int)\n    throw new org.eclipse.jgit.errors.CorruptObjectException(\"truncated in mode\");\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PreUploadHookChain:86","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PreUploadHook[][int].onBeginNegotiateRound(org.eclipse.jgit.transport.UploadPack, java.util.Collection<? extends org.eclipse.jgit.lib.ObjectId>, int)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_6":10,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_6b":13,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":19,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":22,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_5":9,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_19":11,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_4":8,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":24,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":18,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":17,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":28,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_5b":12,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":14,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testRules1thru3_NoIndexEntry":6,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":26,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":27,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":25,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":16,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":15,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":23,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testInitialCheckout":7,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":20,"org.eclipse.jgit.api.RebaseCommandTest.testAuthorScriptConverter":21,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"423df83b-c825-11e4-94a9-bd3e4c21ccc7","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:131","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.internal.storage.dfs.DfsInserter.Reader()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase:148","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.internal.storage.dfs.DfsReader(this)"},"status":-2},{"failures":[],"tindex":"423df83c-c825-11e4-94a9-c14f076b5708","variableMapping":{"w":"path"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.FS_POSIX:79","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(java.lang.String).getParentFile()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.BlameCommand:224","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(org.eclipse.jgit.lib.Repository.getWorkTree() , java.lang.String)"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"423df83d-c825-11e4-94a9-a351ac6fdefb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackParser:359","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.internal.storage.dfs.DfsBlock) == null) {\n    int int = java.lang.Math.((int)(java.lang.Math.min(int, ((long) - long))));\n    byte[] byte[] = new byte[int];\n    if (org.eclipse.jgit.internal.storage.dfs.DfsPackParser.(read(long, byte[], 0, int)) != int)\n        throw new java.io.EOFException();\n    \n    org.eclipse.jgit.internal.storage.dfs.DfsBlock = new org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey , long , byte[]);\n    org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.put(org.eclipse.jgit.internal.storage.dfs.DfsBlock);\n} "},"status":-1},{"failures":[],"tindex":"423e1f4e-c825-11e4-94a9-3b6942bc2e54","variableMapping":{"s":"subfilters"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.filter.AndRevFilter:191","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.revwalk.filter.AndRevFilter.List(org.eclipse.jgit.revwalk.filter.RevFilter[])"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.filter.OrRevFilter:113","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.revwalk.filter.OrRevFilter.List(org.eclipse.jgit.revwalk.filter.RevFilter[])"},"status":-2},{"failures":[],"tindex":"423e1f4f-c825-11e4-94a9-21dc736df069","variableMapping":{"j":"shift"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:709","type":"CtIfImpl","sourcecode":"if (int < 0)\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BinaryDelta:143","type":"CtDoImpl","sourcecode":"do {\n    int = (byte[][int++]) & 255;\n    int |= ((long)((int & 127))) << int;\n    int += 7;\n} while ((int & 128) != 0 )"},"status":-2},{"failures":[],"tindex":"423e1f50-c825-11e4-94a9-677fe8a1e64c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Tree:287","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.lib.Tree.org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[], byte[], byte, int, int)"},"status":-2},{"failures":[0,1,5,2,3,4],"tindex":"423e1f51-c825-11e4-94a9-83dbe89221ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:182","type":"CtTryImpl","sourcecode":"try {\n    return new byte[((int)(long))];\n} catch (java.lang.OutOfMemoryError java.lang.OutOfMemoryError) {\n    return byte[];\n}"},"status":-1},{"failures":[6,7,8],"tindex":"423e1f52-c825-11e4-94a9-a936ba81b0b1","variableMapping":{"overflow":"prevPtr"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.AutoCRLFOutputStream:96","type":"CtIfImpl","sourcecode":"if (int < 0)\n    return ;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:277","type":"CtIfImpl","sourcecode":"if (int == 1) {\n    int = int;\n    int = int;\n    if (!org.eclipse.jgit.treewalk.CanonicalTreeParser.(eof()))\n        org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry();\n    \n    return ;\n} "},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"423e1f53-c825-11e4-94a9-77f8a5e245c7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:445","type":"CtIfImpl","sourcecode":"if ((int + 1) < (char[].int)) {\n    switch (char[][(int + 1)]) {\n        case '0' :\n        case '1' :\n        case '2' :\n        case '3' :\n        case '4' :\n        case '5' :\n        case '6' :\n        case '7' :\n        case '8' :\n        case '9' :\n            int int;\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n            for (int = int + 1 ; int < (char[].int) ; ++int) {\n                if (!java.lang.Character.(java.lang.Character.isDigit(char[][int])))\n                    break;\n                \n            }\n            java.lang.String java.lang.String = new java.lang.String(char[] , (int + 1) , ((int - int) - 1));\n            int int;\n            try {\n                int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n            } catch (java.lang.NumberFormatException java.lang.NumberFormatException) {\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n            }\n            if (int != 0) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if (int > (org.eclipse.jgit.revwalk.RevCommit.getParentCount()))\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent((int - 1));\n                \n            } \n            int = int - 1;\n            int = int;\n            break;\n        case '{' :\n            int int;\n            java.lang.String java.lang.String = null;\n            for (int = int + 2 ; int < (char[].int) ; ++int) {\n                if ((char[][int]) == '}') {\n                    java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n                    break;\n                } \n            }\n            int = int;\n            if (java.lang.String != null)\n                if (java.lang.String.equals(\"tree\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n                } else if (java.lang.String.equals(\"commit\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n                } else if (java.lang.String.equals(\"blob\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                    if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevBlob))\n                        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                    \n                } else if (java.lang.String.equals(\"\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                } else\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                \n            else\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n            \n            int = int;\n            break;\n        default :\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n            if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                \n            } else\n                throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n            \n    }\n} else {\n    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n    if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n            org.eclipse.jgit.revwalk.RevObject = null;\n        else\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n        \n    } else\n        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n    \n}"},"status":-1},{"failures":[],"tindex":"423e1f54-c825-11e4-94a9-a149e5612798","variableMapping":{"resObj":"mergeCommitTree"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:244","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.ObjectToPack.clearReuseAsIs()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:288","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheCheckout.addTree(org.eclipse.jgit.treewalk.NameConflictTreeWalk, org.eclipse.jgit.lib.ObjectId)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":6,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":17,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":8,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":13,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":10,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":12,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenMissing":16,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":11,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":15,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":1,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":14,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":7,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestMissingThenSymlink":9}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

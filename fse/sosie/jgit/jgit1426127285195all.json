[{"failures":[0,1,2,3,4,5],"tindex":"69ed11bc-c85f-11e4-b0ff-d32c26b4b486","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.DateRevQueue:152","type":"CtAssignmentImpl","sourcecode":"int = int - 1"},"status":-1},{"failures":[],"tindex":"69ed11bd-c85f-11e4-b0ff-6733d35e37a8","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:339","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:289","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean"},"status":-2},{"failures":[4,0,1,2,3,5],"tindex":"69ed11be-c85f-11e4-b0ff-031c5effbfbe","variableMapping":{"buf":"r","org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH":"rPtr"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:261","type":"CtAssignmentImpl","sourcecode":"byte[][org.eclipse.jgit.lib.Constants.int] = '\\n'"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.QuotedString:332","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = '\\t'"},"status":-1},{"failures":[6,7,8,9,3,4,10,0,1,2,5],"tindex":"69ed11bf-c85f-11e4-b0ff-f7ebfd919372","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.BlameGenerator:985","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.blame.BlameGenerator.(org.eclipse.jgit.blame.BlameGenerator.isRename(org.eclipse.jgit.diff.DiffEntry)) && (org.eclipse.jgit.diff.DiffEntry.getNewPath().equals(org.eclipse.jgit.treewalk.filter.PathFilter.getPath())))\n    return org.eclipse.jgit.diff.DiffEntry;\n"},"status":-1},{"failures":[11,12,13],"tindex":"69ed11c0-c85f-11e4-b0ff-83fea4f2fac3","variableMapping":{"startIncl":"length","subLength":"length","endExcl":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher:71","type":"CtIfImpl","sourcecode":"if (int > (int - int))\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.ByteArraySet:97","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; ++int) {\n    if ((byte[][int]) != (byte[][int]))\n        return false;\n    \n}"},"status":-1},{"failures":[4,0,1,2,14,3,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,5,32,33,34,35,36,37],"tindex":"69ed11c1-c85f-11e4-b0ff-6973354474c2","variableMapping":{"line":"lastAddedFile"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.PacketLineIn:120","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"ERR \"))\n    throw new org.eclipse.jgit.errors.PackProtocolException(java.lang.String.substring(4));\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.AddCommand:157","type":"CtWhileImpl","sourcecode":"while (org.eclipse.jgit.treewalk.TreeWalk.next()) {\n    java.lang.String java.lang.String = org.eclipse.jgit.treewalk.TreeWalk.getPathString();\n    org.eclipse.jgit.treewalk.WorkingTreeIterator org.eclipse.jgit.treewalk.WorkingTreeIterator = org.eclipse.jgit.treewalk.TreeWalk.getTree(1, org.eclipse.jgit.treewalk.WorkingTreeIterator.org.eclipse.jgit.treewalk.WorkingTreeIterator);\n    if ((((org.eclipse.jgit.treewalk.TreeWalk.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.org.eclipse.jgit.dircache.DirCacheIterator)) == null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator != null)) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isEntryIgnored())) {\n    } else if (!(java.lang.String.equals(java.lang.String))) {\n        if (!((boolean) && ((org.eclipse.jgit.treewalk.TreeWalk.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.org.eclipse.jgit.dircache.DirCacheIterator)) == null))) {\n            org.eclipse.jgit.dircache.DirCacheIterator = org.eclipse.jgit.treewalk.TreeWalk.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.org.eclipse.jgit.dircache.DirCacheIterator);\n            if (org.eclipse.jgit.treewalk.WorkingTreeIterator != null) {\n                long long = org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryLength();\n                org.eclipse.jgit.dircache.DirCacheEntry org.eclipse.jgit.dircache.DirCacheEntry = new org.eclipse.jgit.dircache.DirCacheEntry(java.lang.String);\n                if (((org.eclipse.jgit.dircache.DirCacheIterator == null) || ((org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry()) == null)) || (!(org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry().isAssumeValid()))) {\n                    org.eclipse.jgit.lib.FileMode org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator);\n                    org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode);\n                    if ((org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode) != org.eclipse.jgit.lib.FileMode) {\n                        org.eclipse.jgit.dircache.DirCacheEntry.setLength(long);\n                        org.eclipse.jgit.dircache.DirCacheEntry.setLastModified(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryLastModified());\n                        long long = org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryContentLength();\n                        java.io.InputStream java.io.InputStream = org.eclipse.jgit.treewalk.WorkingTreeIterator.openEntryStream();\n                        try {\n                            org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.lib.ObjectInserter.insert(org.eclipse.jgit.lib.Constants.int, long, java.io.InputStream));\n                        } finally {\n                            java.io.InputStream.close();\n                        }\n                    } else\n                        org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryObjectId());\n                    \n                    org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheEntry);\n                    java.lang.String = java.lang.String;\n                } else {\n                    org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry());\n                }\n            } else if ((org.eclipse.jgit.dircache.DirCacheIterator != null) && ((!(boolean)) || ((org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode) == (org.eclipse.jgit.dircache.DirCacheIterator.getEntryFileMode()))))\n                org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry());\n            \n        } \n    } \n}"},"status":-1},{"failures":[4,38,3,5,0,1,2],"tindex":"69ed11c2-c85f-11e4-b0ff-0bcfea508506","variableMapping":{"org.eclipse.jgit.util.RawParseUtils.digits16":"bs"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:96","type":"CtForImpl","sourcecode":"for (char char = 'a' ; char <= 'f' ; char++)\n    org.eclipse.jgit.util.RawParseUtils.byte[][char] = ((byte)((char - 'a') + 10));"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.MutableObjectId:162","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[], 0)"},"status":-1},{"failures":[4,3,0,1,2,5],"tindex":"69ed11c3-c85f-11e4-b0ff-f3cb95fe7758","variableMapping":{"retainOnReset":"depth","org.eclipse.jgit.revwalk.RevWalk.PARSED":"depth","retainFlags":"depth"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1257","type":"CtOperatorAssignmentImpl","sourcecode":"int |= (org.eclipse.jgit.revwalk.RevWalk.int) | (int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.TreeWalk:414","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[5,3,4,0,1,2,39,40,41,42,43,44],"tindex":"69ed11c4-c85f-11e4-b0ff-1f2e4c03e055","variableMapping":{"d":"next","org.eclipse.jgit.internal.storage.pack.ObjectToPack.DELTA_SHIFT":"next","flags":"i","org.eclipse.jgit.internal.storage.pack.ObjectToPack.NON_DELTA_MASK":"i"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:194","type":"CtAssignmentImpl","sourcecode":"int = (int << (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int)) | ((int) & (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:186","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"69ed11c5-c85f-11e4-b0ff-eb6f435e5b7f","variableMapping":{"aPtr":"pathPadding","bPtr":"pathPadding","buf":"path","aEnd":"pathLen"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.patch.FileHeader:571","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    if ((byte[][int++]) != (byte[][int++]))\n        return false;\n    \n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteParser:151","type":"CtIfImpl","sourcecode":"if ((int) == ((int) + (org.eclipse.jgit.lib.Constants.int))) {\n    try {\n        org.eclipse.jgit.lib.MutableObjectId.fromString(byte[], int);\n        return true;\n    } catch (java.lang.ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException) {\n        return false;\n    }\n} "},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertHeadMiddle":43,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testEmptyFolderCommittedDeletedCommittedIgnoredComparedWithInitialCommit":34,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertTail":42,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":14,"org.eclipse.jgit.api.TagCommandTest.testListAllTagsInRepositoryInOrder":26,"org.eclipse.jgit.api.MergeCommandTest.testMultipleDeletions":15,"org.eclipse.jgit.api.BlameCommandTest.testRename":9,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testShuffleSegments":44,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":12,"org.eclipse.jgit.api.StatusCommandTest.testDifferentStates":19,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":3,"org.eclipse.jgit.api.AddCommandTest.testAddRemovedFile":21,"org.eclipse.jgit.api.blame.BlameGeneratorTest.testRenamedBoundLineDelete":10,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":17,"org.eclipse.jgit.diff.DiffEntryTest.shouldListDeletionBetweenTwoCommits":24,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":29,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testEmptyFolderCommittedDeletedCommittedComparedWithInitialCommit":33,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyWholeObject_Length123":40,"org.eclipse.jgit.api.AddCommandTest.testAddRemovedCommittedFile":22,"org.eclipse.jgit.api.BranchCommandTest.testListAllBranchesShouldNotDie":28,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testCopyWholeObject_Length128":41,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":13,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":11,"org.eclipse.jgit.api.MergeCommandTest.testSingleDeletion":16,"org.eclipse.jgit.api.TagCommandTest.testShouldNotBlowUpIfThereAreNoTagsInRepository":25,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.MergeCommandTest.testFastForwardOnlyNotPossible":18,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigLocalBranch":30,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":20,"org.eclipse.jgit.api.BlameCommandTest.testMoveToOtherDir":7,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testLimitObjectSize_Length130CopyOk":39,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":31,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":27,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testEmptyFolderIgnored":35,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testEmptyFolderCommittedDeleted":37,"org.eclipse.jgit.api.BlameCommandTest.testRenameInSubDir":6,"org.eclipse.jgit.lib.ObjectIdTest.testSetByte":38,"org.eclipse.jgit.api.AddCommandTest.testAddNonExistingSingleFile":23,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testEmptyFolderUntracked":36,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testEmptyFolderCommitted":32,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.api.BlameCommandTest.testTwoRenames":8}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

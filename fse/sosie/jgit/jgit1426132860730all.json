[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"653e4386-c86c-11e4-8ce0-c3e0044cb672","variableMapping":{"c":"c"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:675","type":"CtReturnImpl","sourcecode":"return (1 <= byte) && (byte <= 31)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawCharUtil:69","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.util.RawCharUtil.boolean[][(byte & 255)]"},"status":-1},{"failures":[3,4,5,6,0,8],"tindex":"653e4387-c86c-11e4-8ce0-9dfcc3d3d74f","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:966","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LocalCachedPack:90","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation = ((org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation)(org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation));\n    for (org.eclipse.jgit.internal.storage.file.PackFile org.eclipse.jgit.internal.storage.file.PackFile : org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPacks()) {\n        if ((org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation.org.eclipse.jgit.internal.storage.file.PackFile) == org.eclipse.jgit.internal.storage.file.PackFile)\n            return true;\n        \n    }\n    return false;\n} catch (java.io.FileNotFoundException java.io.FileNotFoundException) {\n    return false;\n}"},"status":-1},{"failures":[6,3,4,5,0,8],"tindex":"653e4388-c86c-11e4-8ce0-0b8151b0bf07","variableMapping":{"w1":"nameEnd"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.AbbreviatedObjectId:330","type":"CtReturnImpl","sourcecode":"return (int) >>> 24"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Tree:120","type":"CtIfImpl","sourcecode":"if (int == (int - 1))\n    return 0;\nelse\n    return 1;\n"},"status":-1},{"failures":[],"tindex":"653e4389-c86c-11e4-8ce0-159fd02427f1","variableMapping":{"repo":"repo"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CommitCommand:279","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.writeCherryPickHead(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.SubmoduleUpdateCommand:151","type":"CtWhileImpl","sourcecode":"while (org.eclipse.jgit.submodule.SubmoduleWalk.next()) {\n    if ((org.eclipse.jgit.submodule.SubmoduleWalk.getModulesPath()) == null)\n        continue;\n    \n    java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getConfigUrl();\n    if (java.lang.String == null)\n        continue;\n    \n    org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Repository = org.eclipse.jgit.submodule.SubmoduleWalk.getRepository();\n    if (org.eclipse.jgit.lib.Repository == null) {\n        org.eclipse.jgit.api.CloneCommand org.eclipse.jgit.api.CloneCommand = org.eclipse.jgit.api.Git.org.eclipse.jgit.api.Git.cloneRepository();\n        org.eclipse.jgit.api.TransportCommand<org.eclipse.jgit.api.SubmoduleUpdateCommand, java.util.Collection<java.lang.String>>.configure(org.eclipse.jgit.api.CloneCommand);\n        org.eclipse.jgit.api.CloneCommand.setURI(java.lang.String);\n        org.eclipse.jgit.api.CloneCommand.setDirectory(org.eclipse.jgit.submodule.SubmoduleWalk.getDirectory());\n        org.eclipse.jgit.api.CloneCommand.setGitDir(new java.io.File(new java.io.File(org.eclipse.jgit.lib.Repository.getDirectory() , org.eclipse.jgit.lib.Constants.java.lang.String) , org.eclipse.jgit.submodule.SubmoduleWalk.getPath()));\n        if ((org.eclipse.jgit.lib.ProgressMonitor) != null)\n            org.eclipse.jgit.api.CloneCommand.setProgressMonitor(org.eclipse.jgit.lib.ProgressMonitor);\n        \n        org.eclipse.jgit.lib.Repository = org.eclipse.jgit.api.CloneCommand.call().getRepository();\n    } \n    try {\n        org.eclipse.jgit.revwalk.RevWalk org.eclipse.jgit.revwalk.RevWalk = new org.eclipse.jgit.revwalk.RevWalk(org.eclipse.jgit.lib.Repository);\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId());\n        java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getConfigUpdate();\n        if (org.eclipse.jgit.lib.ConfigConstants.java.lang.String.equals(java.lang.String)) {\n            org.eclipse.jgit.api.MergeCommand org.eclipse.jgit.api.MergeCommand = new org.eclipse.jgit.api.MergeCommand(org.eclipse.jgit.lib.Repository);\n            org.eclipse.jgit.api.MergeCommand.include(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.api.MergeCommand.setStrategy(org.eclipse.jgit.merge.MergeStrategy);\n            org.eclipse.jgit.api.MergeCommand.call();\n        } else if (org.eclipse.jgit.lib.ConfigConstants.java.lang.String.equals(java.lang.String)) {\n            org.eclipse.jgit.api.RebaseCommand org.eclipse.jgit.api.RebaseCommand = new org.eclipse.jgit.api.RebaseCommand(org.eclipse.jgit.lib.Repository);\n            org.eclipse.jgit.api.RebaseCommand.setUpstream(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.api.RebaseCommand.setStrategy(org.eclipse.jgit.merge.MergeStrategy);\n            org.eclipse.jgit.api.RebaseCommand.call();\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.revwalk.RevCommit.getTree());\n            org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n            org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n            org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.Repository.updateRef(org.eclipse.jgit.lib.Constants.java.lang.String, true);\n            org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.lib.RefUpdate.forceUpdate();\n        }\n    } finally {\n        org.eclipse.jgit.lib.Repository.close();\n    }\n    java.util.List<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n}"},"status":-2},{"failures":[3,4,5,6,15,16,17,18,19,0,8,20,21],"tindex":"653e6a9a-c86c-11e4-8ce0-89787935c673","variableMapping":{"srcObj":"base","resObj":"base"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:229","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.pack.ObjectToPack.isEdge()) {\n    org.eclipse.jgit.internal.storage.pack.ObjectToPack.setDeltaBase(org.eclipse.jgit.internal.storage.pack.ObjectToPack.copy());\n} else {\n    org.eclipse.jgit.internal.storage.pack.ObjectToPack.setDeltaBase(org.eclipse.jgit.internal.storage.pack.ObjectToPack);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1570","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream, org.eclipse.jgit.internal.storage.pack.ObjectToPack)"},"status":-1},{"failures":[],"tindex":"653e6a9b-c86c-11e4-8ce0-b76adacf41c9","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.SimilarityIndex:127","type":"CtLocalVariableImpl","sourcecode":"boolean boolean"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:399","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"status":-2},{"failures":[],"tindex":"653e6a9c-c86c-11e4-8ce0-e509003afa00","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteParser:166","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.notes.NoteParser.parseFanoutCell()"},"status":-2},{"failures":[3,4,5,8,6,0],"tindex":"653e6a9d-c86c-11e4-8ce0-7f44f07dc945","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.RawTextComparator:290","type":"CtThrowImpl","sourcecode":"throw new java.lang.ArrayIndexOutOfBoundsException()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:295","type":"CtThrowImpl","sourcecode":"throw java.io.IOException"},"status":-1},{"failures":[],"tindex":"653e6a9e-c86c-11e4-8ce0-7bbab82b6283","variableMapping":{"cmp":"length","packedIdx":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RefMap:332","type":"CtIfImpl","sourcecode":"if (int == 0)\n    (int)++;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.PathFilterGroup:117","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++)\n    org.eclipse.jgit.treewalk.filter.PathFilter[][int] = org.eclipse.jgit.treewalk.filter.PathFilter.org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String[][int]);"},"status":-2},{"failures":[3,4,5,6,8,0],"tindex":"653e6a9f-c86c-11e4-8ce0-a31561a9e98c","variableMapping":{"out":"bitmap"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex:106","type":"CtReturnImpl","sourcecode":"return com.googlecode.javaewah.EWAHCompressedBitmap"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder:181","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder.getBlobs().and(com.googlecode.javaewah.EWAHCompressedBitmap)"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":16,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":19,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":15,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.diff.RawTextIgnoreWhitespaceChangeTest.testEqualsWithWhitespace":11,"org.eclipse.jgit.util.RawCharUtilTest.testIsWhitespace":14,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":21,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":18,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":20,"org.eclipse.jgit.diff.RawTextIgnoreLeadingWhitespaceTest.testEqualsWithWhitespace":1,"org.eclipse.jgit.diff.RawTextIgnoreAllWhitespaceTest.testEqualsWithWhitespace":10,"org.eclipse.jgit.diff.RawTextTest.testComparatorReduceCommonStartEnd":2,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":6,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":8,"org.eclipse.jgit.api.BlameCommandTest.testWhitespaceMerge":9,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":17,"org.eclipse.jgit.util.RawCharUtilTest.testTrimTrailingWhitespace":13,"org.eclipse.jgit.util.RawCharUtilTest.testTrimLeadingWhitespace":12,"org.eclipse.jgit.diff.RawTextIgnoreTrailingWhitespaceTest.testEqualsWithWhitespace":7,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

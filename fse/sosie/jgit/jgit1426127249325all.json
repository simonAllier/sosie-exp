[{"failures":[0,1,2,3,4,5],"tindex":"557dbf49-c85f-11e4-a194-af3f7802feb3","variableMapping":{"pw":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor:252","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.pack.PackWriter != null)\n    org.eclipse.jgit.internal.storage.pack.PackWriter.release();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:647","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.PackWriter.addObject(java.util.Iterator<org.eclipse.jgit.revwalk.RevObject>.next())"},"status":-2},{"failures":[],"tindex":"557fbb1a-c85f-11e4-a194-b3e1c9016d28","variableMapping":{"org.eclipse.jgit.lib.Constants.DOT_GIT":"machine","name":"login"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:752","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.Constants.java.lang.String.equals(java.lang.String))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.NetRC:255","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.transport.NetRC.NetRCEntry.java.lang.String) != null) && (org.eclipse.jgit.transport.NetRC.NetRCEntry.complete())) {\n    java.util.Map<java.lang.String, org.eclipse.jgit.transport.NetRC.NetRCEntry>.put(org.eclipse.jgit.transport.NetRC.NetRCEntry.java.lang.String, org.eclipse.jgit.transport.NetRC.NetRCEntry);\n    org.eclipse.jgit.transport.NetRC.NetRCEntry = new org.eclipse.jgit.transport.NetRC.NetRCEntry();\n} "},"status":-2},{"failures":[1,2,3,0,4,6,7,8,9,5],"tindex":"557fbb1b-c85f-11e4-a194-9f5013a683a4","variableMapping":{"dst":"currentRef","this":"refUpdate"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.RefUpdate:587","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.lib.Ref.getObjectId())"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashCreateCommand:215","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId(org.eclipse.jgit.lib.Ref.getObjectId())"},"status":-1},{"failures":[],"tindex":"5582050c-c85f-11e4-a194-7db9455cad26","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.AbstractPlotRenderer:98","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.revplot.AbstractPlotRenderer<TLane, TColor>.org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(TLane)"},"status":-2},{"failures":[4,1,2,3,0,5],"tindex":"5582050d-c85f-11e4-a194-8362f0171f7b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.BitmapIndexImpl:248","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ListTagCommand:88","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.api.errors.JGitInternalException(java.io.IOException.getMessage() , java.io.IOException)"},"status":-1},{"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,1,2,3,32,4,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,5],"tindex":"5582a14e-c85f-11e4-a194-afdadd850ac0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackConnection:250","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.BaseConnection.available(java.util.LinkedHashMap<java.lang.String, org.eclipse.jgit.lib.Ref>)"},"status":-1},{"failures":[1,2,3,5,0,4],"tindex":"5582a14f-c85f-11e4-a194-f9a9755c0931","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FS_POSIX_Java6:82","type":"CtLocalVariableImpl","sourcecode":"java.lang.NoSuchMethodException java.lang.NoSuchMethodException"},"status":-1},{"failures":[0,1,2,3,4,96,97,98,99,100,101,102,103,104,5],"tindex":"5582a150-c85f-11e4-a194-c798c77f34d9","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate:133","type":"CtReturnImpl","sourcecode":"return \"fast forward\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.GitDateFormatter:166","type":"CtSwitchImpl","sourcecode":"switch (org.eclipse.jgit.util.GitDateFormatter.Format) {\n    case RAW :\n        int int = org.eclipse.jgit.lib.PersonIdent.getTimeZoneOffset();\n        java.lang.String java.lang.String = int < 0 ? \"-\" : \"+\";\n        int int;\n        if (int < 0)\n            int = -int;\n        else\n            int = int;\n        \n        int int = int / 60;\n        int int = int % 60;\n        return java.lang.String.java.lang.String.format(\"%d %s%02d%02d\", ((org.eclipse.jgit.lib.PersonIdent.getWhen().getTime()) / 1000), java.lang.String, int, int);\n    case RELATIVE :\n        return org.eclipse.jgit.util.RelativeDateFormatter.org.eclipse.jgit.util.RelativeDateFormatter.format(org.eclipse.jgit.lib.PersonIdent.getWhen());\n    case LOCALELOCAL :\n    case LOCAL :\n        java.text.DateFormat.setTimeZone(org.eclipse.jgit.util.SystemReader.org.eclipse.jgit.util.SystemReader.getInstance().getTimeZone());\n        return java.text.DateFormat.format(org.eclipse.jgit.lib.PersonIdent.getWhen());\n    case LOCALE :\n        java.util.TimeZone java.util.TimeZone = org.eclipse.jgit.lib.PersonIdent.getTimeZone();\n        if (java.util.TimeZone == null)\n            java.util.TimeZone = org.eclipse.jgit.util.SystemReader.org.eclipse.jgit.util.SystemReader.getInstance().getTimeZone();\n        \n        java.text.DateFormat.setTimeZone(java.util.TimeZone);\n        java.text.DateFormat.setTimeZone(java.util.TimeZone);\n        return ((java.text.DateFormat.format(org.eclipse.jgit.lib.PersonIdent.getWhen())) + \" \") + (java.text.DateFormat.format(org.eclipse.jgit.lib.PersonIdent.getWhen()));\n    default :\n        java.util.TimeZone = org.eclipse.jgit.lib.PersonIdent.getTimeZone();\n        if (java.util.TimeZone == null)\n            java.util.TimeZone = org.eclipse.jgit.util.SystemReader.org.eclipse.jgit.util.SystemReader.getInstance().getTimeZone();\n        \n        java.text.DateFormat.setTimeZone(org.eclipse.jgit.lib.PersonIdent.getTimeZone());\n        return java.text.DateFormat.format(org.eclipse.jgit.lib.PersonIdent.getWhen());\n}"},"status":-1},{"failures":[1,2,3,0,4,5],"tindex":"558364a1-c85f-11e4-a194-ebe7970f5cce","variableMapping":{"hostname":"method"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.SystemReader:124","type":"CtAssertImpl","sourcecode":"assert (java.lang.String) != null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportHttp:550","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.http.HttpConnection.setRequestMethod(java.lang.String)"},"status":-1},{"failures":[],"tindex":"5584c432-c85f-11e4-a194-c3cdf10508ba","variableMapping":{"this":"this","pullOnRepoWithoutHEADCurrentlyNotSupported":"wholePattern","fullBranch":"characterClass"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.PullCommand:190","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.fnmatch.GroupHead:79","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"[:alnum:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:alpha:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n} else if (java.lang.String.equals(\"[:blank:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern(' '));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern('\\t'));\n} else if (java.lang.String.equals(\"[:cntrl:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('\u0000' , '\u001f'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern(''));\n} else if (java.lang.String.equals(\"[:digit:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:graph:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('!' , '~'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:lower:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LowerPattern.org.eclipse.jgit.fnmatch.GroupHead.LowerPattern);\n} else if (java.lang.String.equals(\"[:print:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange(' ' , '~'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:punct:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.PunctPattern.org.eclipse.jgit.fnmatch.GroupHead.PunctPattern);\n} else if (java.lang.String.equals(\"[:space:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.WhitespacePattern.org.eclipse.jgit.fnmatch.GroupHead.WhitespacePattern);\n} else if (java.lang.String.equals(\"[:upper:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.UpperPattern.org.eclipse.jgit.fnmatch.GroupHead.UpperPattern);\n} else if (java.lang.String.equals(\"[:xdigit:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('0' , '9'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('a' , 'f'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('A' , 'F'));\n} else if (java.lang.String.equals(\"[:word:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern('_'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else {\n    final java.lang.String java.lang.String = java.lang.String.java.lang.String.format(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.String));\n    throw new org.eclipse.jgit.errors.InvalidPatternException(java.lang.String , java.lang.String);\n}"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":21,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithoutLocalRepository":60,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":18,"org.eclipse.jgit.api.StashDropCommandTest.dropMiddleStashCommit":6,"org.eclipse.jgit.util.GitDateFormatterTest.SHORT":103,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":59,"org.eclipse.jgit.util.GitDateFormatterTest.DEFAULT":97,"org.eclipse.jgit.api.FetchCommandTest.testFetch":78,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":71,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":50,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":51,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":95,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":15,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":49,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":88,"org.eclipse.jgit.util.GitDateFormatterTest.RAW":100,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":28,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":12,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":74,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":47,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":26,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigLocalBranch":56,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":92,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":48,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":94,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":34,"org.eclipse.jgit.util.GitDateFormatterTest.LOCAL":102,"org.eclipse.jgit.util.GitDateFormatterTest.LOCALELOCAL":98,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":70,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":33,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":10,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":17,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":40,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":14,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":77,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":76,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":89,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":81,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":46,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":23,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":80,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testFilterHidesPrivate":91,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":37,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":29,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":73,"org.eclipse.jgit.util.GitDateFormatterTest.RELATIVE":104,"org.eclipse.jgit.api.GitConstructionTest.testWrap":42,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":20,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":62,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":43,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":61,"org.eclipse.jgit.api.GitConstructionTest.testOpen":41,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":93,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":30,"org.eclipse.jgit.util.GitDateFormatterTest.ISO":99,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":44,"org.eclipse.jgit.transport.TestProtocolTest.testUploadPackFactory":86,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":39,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":36,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldNotFetchTagsFromOtherBranches":79,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":82,"org.eclipse.jgit.api.StashDropCommandTest.dropAll":9,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":13,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":11,"org.eclipse.jgit.api.StashDropCommandTest.dropBoundaryStashedCommits":8,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":35,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":24,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":25,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":22,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":52,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":87,"org.eclipse.jgit.util.GitDateFormatterTest.RFC":101,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":38,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":69,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":68,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testCreateBranchAtHiddenCommitFails":90,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":27,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":72,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":58,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":55,"org.eclipse.jgit.transport.TransportTest.testLocalTransportFetchWithoutLocalRepository":84,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":63,"org.eclipse.jgit.api.StashDropCommandTest.dropFirstStashedCommit":7,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":65,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":66,"org.eclipse.jgit.api.BranchCommandTest.testListAllBranchesShouldNotDie":54,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTag":83,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":32,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":19,"org.eclipse.jgit.util.GitDateFormatterTest.LOCALE":96,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":16,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":45,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":67,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":57,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":75,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":53,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":31,"org.eclipse.jgit.transport.TestProtocolTest.testFetch":85,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":64}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"1e7ae504-c88a-11e4-b13d-2fb8bd1df429","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.IndexDiff:494","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry(), true, org.eclipse.jgit.treewalk.TreeWalk.getObjectReader())) {\n    if (((!org.eclipse.jgit.lib.IndexDiff.(isEntryGitLink(org.eclipse.jgit.dircache.DirCacheIterator))) || (!org.eclipse.jgit.lib.IndexDiff.(isEntryGitLink(org.eclipse.jgit.treewalk.WorkingTreeIterator)))) || (((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) != (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) && ((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) != (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode))))\n        java.util.Set<java.lang.String>.add(org.eclipse.jgit.treewalk.TreeWalk.getPathString());\n    \n} "},"status":-1},{"failures":[],"tindex":"1e7b0c15-c88a-11e4-b13d-7b763532188f","variableMapping":{"data":"s"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:722","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = new java.lang.StringBuilder()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.AmazonS3:621","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(':')"},"status":-2},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"1e7b0c16-c88a-11e4-b13d-f3a596ffe5c6","variableMapping":{"w":"refName"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.FS_POSIX:79","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(java.lang.String).getParentFile()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ReflogWriter:247","type":"CtLocalVariableImpl","sourcecode":"final java.io.File java.io.File = org.eclipse.jgit.internal.storage.file.ReflogWriter.logFor(java.lang.String)"},"status":-1},{"failures":[13,12,18,19,20,21],"tindex":"1e7b0c17-c88a-11e4-b13d-298419b5486c","variableMapping":{"sOut":"out"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportGitAnon:185","type":"CtAssignmentImpl","sourcecode":"java.io.OutputStream = new org.eclipse.jgit.util.io.SafeBufferedOutputStream(java.io.OutputStream)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter:166","type":"CtAssignmentImpl","sourcecode":"java.io.OutputStream = java.nio.channels.Channels.java.nio.channels.Channels.newOutputStream(java.io.FileOutputStream.getChannel())"},"status":-1},{"failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,12,53,54,55,56,57,58,59,60,21,61,62,63,64,65,13,66,18,19,20],"tindex":"1e7b0c18-c88a-11e4-b13d-8bf59f46365e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeFormatter:92","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.merge.MergeChunk.getConflictState()) == (org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState)) {\n    java.io.OutputStream.write(((\"<<<<<<< \" + (java.util.List<java.lang.String>.get(org.eclipse.jgit.merge.MergeChunk.getSequenceIndex()))) + \"\\n\").getBytes(java.lang.String));\n    java.lang.String = java.util.List<java.lang.String>.get(org.eclipse.jgit.merge.MergeChunk.getSequenceIndex());\n} else if ((org.eclipse.jgit.merge.MergeChunk.getConflictState()) == (org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState)) {\n    java.lang.String = java.util.List<java.lang.String>.get(org.eclipse.jgit.merge.MergeChunk.getSequenceIndex());\n    java.io.OutputStream.write((boolean ? \"=======\\n\" : (\"======= \" + java.lang.String) + \"\\n\").getBytes(java.lang.String));\n} "},"status":-1},{"failures":[],"tindex":"1e7b0c19-c88a-11e4-b13d-db29199f0e51","variableMapping":{"ptr":"length"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:1049","type":"CtIfImpl","sourcecode":"if (int == 0)\n    int += 48;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:405","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry, org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry.size());\n    byte[] = org.eclipse.jgit.internal.storage.pack.PackWriter.org.eclipse.jgit.internal.storage.pack.PackWriter.buffer(org.eclipse.jgit.storage.pack.PackConfig, org.eclipse.jgit.lib.ObjectReader, org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry.org.eclipse.jgit.internal.storage.pack.ObjectToPack);\n    if ((long) != 0)\n        long += byte[].int;\n    \n    org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry.byte[] = byte[];\n} "},"status":-2},{"failures":[],"tindex":"1e7b0c1a-c88a-11e4-b13d-ed35bb9807bd","variableMapping":{"this":"out"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.TimeoutOutputStream:136","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.io.TimeoutOutputStream.beginWrite()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectLoader:247","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ObjectLoader.isLarge()) {\n    org.eclipse.jgit.lib.ObjectStream org.eclipse.jgit.lib.ObjectStream = org.eclipse.jgit.lib.ObjectLoader.openStream();\n    try {\n        final long long = org.eclipse.jgit.lib.ObjectStream.getSize();\n        byte[] byte[] = new byte[8192];\n        long long = 0;\n        while (long < long) {\n            int int = org.eclipse.jgit.lib.ObjectStream.read(byte[]);\n            if (int < 0)\n                throw new java.io.EOFException();\n            \n            java.io.OutputStream.write(byte[], 0, int);\n            long += int;\n        }\n        if (0 <= (org.eclipse.jgit.lib.ObjectStream.read()))\n            throw new java.io.EOFException();\n        \n    } finally {\n        org.eclipse.jgit.lib.ObjectStream.close();\n    }\n} else {\n    java.io.OutputStream.write(org.eclipse.jgit.lib.ObjectLoader.getCachedBytes());\n}"},"status":-2},{"failures":[],"tindex":"1e7b0c1b-c88a-11e4-b13d-29141043427a","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.HttpAuthMethod:547","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException = new java.io.IOException()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackConnection:330","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException"},"status":-2},{"failures":[],"tindex":"1e7b0c1c-c88a-11e4-b13d-33b5824c82c3","variableMapping":{"base":"oldCommit"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.merge.Merger:274","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevCommit == null)\n    return null;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:1222","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.api.CheckoutCommand.setName(org.eclipse.jgit.revwalk.RevCommit.name()).call();\n    if (java.lang.String.startsWith(org.eclipse.jgit.lib.Constants.java.lang.String)) {\n        org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.Repository.updateRef(java.lang.String);\n        org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId(org.eclipse.jgit.revwalk.RevCommit);\n        org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.revwalk.RevCommit);\n        org.eclipse.jgit.lib.RefUpdate.setRefLogMessage((((\"Fast-foward from \" + (org.eclipse.jgit.revwalk.RevCommit.name())) + \" to \") + (org.eclipse.jgit.revwalk.RevCommit.name())), false);\n        org.eclipse.jgit.lib.RefUpdate.Result org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk);\n        switch (org.eclipse.jgit.lib.RefUpdate.Result) {\n            case FAST_FORWARD :\n            case NO_CHANGE :\n            case FORCED :\n                break;\n            default :\n                throw new java.io.IOException(\"Could not fast-forward\");\n        }\n    } \n    return org.eclipse.jgit.revwalk.RevCommit;\n} catch (org.eclipse.jgit.api.errors.RefAlreadyExistsException org.eclipse.jgit.api.errors.RefAlreadyExistsException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(org.eclipse.jgit.api.errors.RefAlreadyExistsException.getMessage() , org.eclipse.jgit.api.errors.RefAlreadyExistsException);\n} catch (org.eclipse.jgit.api.errors.RefNotFoundException org.eclipse.jgit.api.errors.RefNotFoundException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(org.eclipse.jgit.api.errors.RefNotFoundException.getMessage() , org.eclipse.jgit.api.errors.RefNotFoundException);\n} catch (org.eclipse.jgit.api.errors.InvalidRefNameException org.eclipse.jgit.api.errors.InvalidRefNameException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(org.eclipse.jgit.api.errors.InvalidRefNameException.getMessage() , org.eclipse.jgit.api.errors.InvalidRefNameException);\n} catch (org.eclipse.jgit.api.errors.CheckoutConflictException org.eclipse.jgit.api.errors.CheckoutConflictException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(org.eclipse.jgit.api.errors.CheckoutConflictException.getMessage() , org.eclipse.jgit.api.errors.CheckoutConflictException);\n}"},"status":-2},{"failures":[],"tindex":"1e7b0c1d-c88a-11e4-b13d-9dcc2074d3c6","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.FanoutBucket:161","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.OrTreeFilter:172","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":11,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedMasterChangeOtherCommit":2,"org.eclipse.jgit.merge.MergeAlgorithmTest.testEmptyTexts":43,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":20,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":24,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":55,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtStart":45,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":18,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":59,"org.eclipse.jgit.lib.IndexDiffTest.testModified":17,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":52,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":29,"org.eclipse.jgit.api.StatusCommandTest.testDifferentStates":6,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":56,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":12,"org.eclipse.jgit.merge.MergeAlgorithmTest.testOneAgainstTwoConflictingModifications":47,"org.eclipse.jgit.merge.MergeAlgorithmTest.testDeleteVsModify":51,"org.eclipse.jgit.util.HookTest.testCommitMsgHookCanModifyCommitMessage":26,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":61,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":54,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":41,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":64,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":42,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":15,"org.eclipse.jgit.lib.IndexDiffTest.testAssumeUnchanged":16,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":35,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":14,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":31,"org.eclipse.jgit.merge.MergeAlgorithmTest.testAdjacentModifications":50,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":28,"org.eclipse.jgit.api.StatusCommandTest.testDifferentStatesWithPaths":7,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":40,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtEnd":44,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithModificationShouldNotDeleteData":4,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedMasterChangeBaseCommit":3,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":33,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":21,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":36,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":13,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":10,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":23,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":22,"org.eclipse.jgit.util.HookTest.testCommitMsgHookReceivesCorrectParameter":25,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":9,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":39,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":58,"org.eclipse.jgit.merge.MergeAlgorithmTest.testInsertVsModify":48,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenMissing":34,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoConflictingModifications":49,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedTopicChange":1,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldLeaveWorkspaceUntouchedWithUnstagedChangesConflict":0,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoComplicatedModifications":46,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":53,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":66,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":32,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":65,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":38,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":8,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":30,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":19,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":37,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":60,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":57,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":63,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":62,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedMasterChange":5,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestMissingThenSymlink":27}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

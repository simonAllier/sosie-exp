[{"failures":[0,1,2,3,4,5],"tindex":"371cc96e-c880-11e4-87e9-9f1e5f1d1b80","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.TeeInputStream:126","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.close()"},"status":-1},{"failures":[6,0,5,1,2,3,4],"tindex":"371cc96f-c880-11e4-87e9-c91e8e8a9754","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:1295","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.InvalidPathException.initCause(org.eclipse.jgit.errors.CorruptObjectException)"},"status":-1},{"failures":[4,0,5,1,2,3],"tindex":"371cc970-c880-11e4-87e9-350e3f256972","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.BitmapIndexImpl:477","type":"CtInvocationImpl","sourcecode":"com.googlecode.javaewah.EWAHCompressedBitmap.addStreamOfEmptyWords(true, (int / (com.googlecode.javaewah.EWAHCompressedBitmap.int)))"},"status":-1},{"failures":[0,5,4,1,2,3],"tindex":"371cc971-c880-11e4-87e9-c5d14b2328b8","variableMapping":{"startCommit":"lastCommit"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.CheckoutCommand:626","type":"CtAssignmentImpl","sourcecode":"this.org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:664","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit = null"},"status":-1},{"failures":[],"tindex":"371cf082-c880-11e4-87e9-9dfdc84e508c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.AnyObjectId:543","type":"CtReturnImpl","sourcecode":"return ((org.eclipse.jgit.lib.ObjectId)(this))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation:89","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"371cf083-c880-11e4-87e9-d9740a52ea0b","variableMapping":{"s":"sock"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.Daemon:353","type":"CtInvocationImpl","sourcecode":"java.net.Socket.getOutputStream().close()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportGitAnon:241","type":"CtTryImpl","sourcecode":"try {\n    java.net.Socket.close();\n} catch (java.io.IOException java.io.IOException) {\n} finally {\n    java.net.Socket = null;\n}"},"status":-2},{"failures":[0,5,4,1,2,3],"tindex":"371cf084-c880-11e4-87e9-33a0736f91f1","variableMapping":{"number":"ptr"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ReflogReaderImpl:92","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalArgumentException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:595","type":"CtIfImpl","sourcecode":"if ((int + 2) >= int)\n    throw new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(\"invalid name contains byte sequence \\'\\'{0}\\'\\' which is not a valid UTF-8 character\", org.eclipse.jgit.lib.ObjectChecker.org.eclipse.jgit.lib.ObjectChecker.toHexString(byte[], int, int)));\n"},"status":-1},{"failures":[],"tindex":"371cf085-c880-11e4-87e9-e7f3dde0b560","variableMapping":{"org.eclipse.jgit.util.RawParseUtils.footerLineKeyChars":"org.eclipse.jgit.util.RawParseUtils.digits10"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:103","type":"CtForImpl","sourcecode":"for (char char = '0' ; char <= '9' ; char++)\n    org.eclipse.jgit.util.RawParseUtils.byte[][char] = 1;"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:88","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.java.util.Arrays.fill(org.eclipse.jgit.util.RawParseUtils.byte[], ((byte)(-1)))"},"status":-2},{"failures":[],"tindex":"371cf086-c880-11e4-87e9-ab0aaa2d8917","variableMapping":{"val":"org.eclipse.jgit.lib.Constants.DOT_GIT","this":"this","java.io.File.pathSeparator":"org.eclipse.jgit.lib.Constants.DOT_GIT"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:389","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    for (java.lang.String java.lang.String : java.lang.String.split(java.io.File.java.lang.String))\n        org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.addAlternateObjectDirectory(new java.io.File(java.lang.String));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:510","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.(getGitDir()) == null) {\n    org.eclipse.jgit.util.FS org.eclipse.jgit.util.FS = org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.safeFS();\n    while (java.io.File != null) {\n        java.io.File java.io.File = new java.io.File(java.io.File , org.eclipse.jgit.lib.Constants.java.lang.String);\n        if (org.eclipse.jgit.lib.RepositoryCache.FileKey.org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(java.io.File, org.eclipse.jgit.util.FS)) {\n            org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.setGitDir(java.io.File);\n            break;\n        } else if (java.io.File.isFile()) {\n            try {\n                org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.setGitDir(org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File, java.io.File, org.eclipse.jgit.util.FS));\n                break;\n            } catch (java.io.IOException java.io.IOException) {\n            }\n        } else if (org.eclipse.jgit.lib.RepositoryCache.FileKey.org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(java.io.File, org.eclipse.jgit.util.FS)) {\n            org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.setGitDir(java.io.File);\n            break;\n        } \n        java.io.File = java.io.File.getParentFile();\n        if (((java.io.File != null) && ((java.util.List<java.io.File>) != null)) && (java.util.List<java.io.File>.contains(java.io.File)))\n            break;\n        \n    }\n} "},"status":-2},{"failures":[7,1,2,3,4,0,5],"tindex":"371cf087-c880-11e4-87e9-c772b659399a","variableMapping":{"newHead":"newHead"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:262","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:139","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem":7,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.dircache.DirCacheBasicTest.testRejectInvalidWindowsPaths":6,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

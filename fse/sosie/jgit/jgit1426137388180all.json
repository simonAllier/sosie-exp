[{"failures":[],"tindex":"efd0ec2c-c876-11e4-9815-cb9a84151c90","variableMapping":{"cmp":"endB"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.BaseSearch:135","type":"CtIfImpl","sourcecode":"if (int > 0)\n    continue CHECK_BASE;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.MyersDiff:204","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.diff.MyersDiff<S>.calculateEdits(int, int, (int + int), int)"},"status":-2},{"failures":[],"tindex":"efd0ec2d-c876-11e4-9815-459285a40103","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.UnionInputStream:195","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkPushConnection:366","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"efd0ec2e-c876-11e4-9815-e5c3ea18ce85","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffFormatter:569","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.treewalk.filter.TreeFilter = org.eclipse.jgit.revwalk.FollowFilter.org.eclipse.jgit.revwalk.FollowFilter.create(org.eclipse.jgit.diff.DiffEntry.getOldPath(), org.eclipse.jgit.diff.DiffConfig)"},"status":-1},{"failures":[5,0,1,2,4,3],"tindex":"efd0ec2f-c876-11e4-9815-b5602798bfba","variableMapping":{"rawPtr":"pathHash","rawSize":"pathHash","raw":"pathBuf"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.Tree:518","type":"CtWhileImpl","sourcecode":"while ((int < int) && ((byte[][int]) != 0))\n    int++;"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1836","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(org.eclipse.jgit.revwalk.RevObject.getType(), byte[], int, int)"},"status":-1},{"failures":[],"tindex":"efd0ec30-c876-11e4-9815-373d22b3fc97","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.ThreadSafeDeltaCache:61","type":"CtTryImpl","sourcecode":"try {\n    return org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int, org.eclipse.jgit.internal.storage.pack.ObjectToPack, org.eclipse.jgit.internal.storage.pack.ObjectToPack);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}"},"status":-2},{"failures":[],"tindex":"efd11341-c876-11e4-9815-9d2bf36e848d","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:529","type":"CtLocalVariableImpl","sourcecode":"final long long"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.MyersDiff:364","type":"CtLocalVariableImpl","sourcecode":"long long = int + int"},"status":-2},{"failures":[],"tindex":"efd11342-c876-11e4-9815-35dccd27faad","variableMapping":{"fs":"old","tmpFile":"old"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:1258","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.FS.setExecute(java.io.File, false)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.RenameDetector:684","type":"CtInvocationImpl","sourcecode":"java.util.ArrayList<org.eclipse.jgit.diff.DiffEntry>.add(((org.eclipse.jgit.diff.DiffEntry)(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"efd11343-c876-11e4-9815-7baf5fcfdd80","variableMapping":{"d":"flags","org.eclipse.jgit.internal.storage.pack.ObjectToPack.DELTA_SHIFT":"flags","flags":"org.eclipse.jgit.revwalk.RevWalk.SEEN","org.eclipse.jgit.internal.storage.pack.ObjectToPack.NON_DELTA_MASK":"org.eclipse.jgit.revwalk.RevWalk.SEEN"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:194","type":"CtAssignmentImpl","sourcecode":"int = (int << (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int)) | ((int) & (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:386","type":"CtOperatorAssignmentImpl","sourcecode":"int |= org.eclipse.jgit.revwalk.RevWalk.int"},"status":-2},{"failures":[5,0,1,2,4,3],"tindex":"efd11344-c876-11e4-9815-01b7750cf774","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportAmazonS3:322","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException"},"status":-1},{"failures":[6],"tindex":"efd11345-c876-11e4-9815-df15c4a39dfd","variableMapping":{"h":"h","name":"name","this":"this","i":"i","m":"h","walk":"walk"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:522","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.dircache.DirCacheBuildIterator == null) && (org.eclipse.jgit.treewalk.CanonicalTreeParser == null)) && (org.eclipse.jgit.treewalk.CanonicalTreeParser == null)) {\n    if (org.eclipse.jgit.treewalk.NameConflictTreeWalk.isDirectoryFileConflict())\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, null, null, null);\n    \n    return ;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:686","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.dircache.DirCacheBuildIterator == null) {\n    if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (!(org.eclipse.jgit.treewalk.WorkingTreeIterator.isEntryIgnored()))) {\n        if (!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode))) {\n            if ((org.eclipse.jgit.lib.ObjectId == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryObjectId(), org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode())))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, null, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                return ;\n            } \n        } \n    } \n    if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null)\n        org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n    else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null)\n        org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n    else {\n        if (org.eclipse.jgit.dircache.DirCacheCheckout.equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode)) {\n            if (boolean)\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            else\n                org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    }\n} else {\n    if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n        if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))) {\n            if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) && (org.eclipse.jgit.treewalk.NameConflictTreeWalk.isDirectoryFileConflict())) {\n                if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator == null) || (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))))\n                    org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    } else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n        if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n        } else {\n            if (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n                if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))) {\n                    if ((!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode()))) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode)))\n                        return ;\n                    else\n                        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                    \n                } else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            \n        }\n    } else {\n        if (((!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        else if ((!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n            if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.dircache.DirCacheEntry.getFileMode()))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            } else if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader())))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            } else {\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            }\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n        }\n    }\n}"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":6,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"e7687982-c850-11e4-b941-2b74ea47c600","variableMapping":{"this":"db"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:393","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.file.FileRepository.loadRepoConfig();\n} catch (java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(java.io.IOException);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RepositoryCache:124","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.lib.Repository.getDirectory()) != null) {\n    org.eclipse.jgit.lib.RepositoryCache.FileKey org.eclipse.jgit.lib.RepositoryCache.FileKey = org.eclipse.jgit.lib.RepositoryCache.FileKey.org.eclipse.jgit.lib.RepositoryCache.FileKey.exact(org.eclipse.jgit.lib.Repository.getDirectory(), org.eclipse.jgit.lib.Repository.getFS());\n    org.eclipse.jgit.lib.RepositoryCache.org.eclipse.jgit.lib.RepositoryCache.registerRepository(org.eclipse.jgit.lib.RepositoryCache.FileKey, org.eclipse.jgit.lib.Repository);\n} "},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"e768a093-c850-11e4-b941-b7cec6e87739","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:966","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.filter.SubStringRevFilter:80","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"e768a094-c850-11e4-b941-03e1238562f8","variableMapping":{"emailB":"length","raw":"dstbuf","ptr":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:202","type":"CtIfImpl","sourcecode":"if ((int == int) || ((byte[][(int - 1)]) != '<'))\n    return -1;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:625","type":"CtIfImpl","sourcecode":"if ((java.util.zip.Inflater.finished()) || (boolean && (int == (byte[].int))))\n    return int;\n"},"status":-2},{"failures":[0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38],"tindex":"e768a095-c850-11e4-b941-ab4ace2a0949","variableMapping":{"preserveMerges":"shouldPick","this":"this","commitToPick":"commitToPick"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:498","type":"CtIfImpl","sourcecode":"if (boolean)\n    return org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit);\nelse\n    return org.eclipse.jgit.api.RebaseCommand.cherryPickCommitFlattening(org.eclipse.jgit.revwalk.RevCommit);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:449","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if (org.eclipse.jgit.lib.ProgressMonitor.isCancelled())\n        return org.eclipse.jgit.api.RebaseResult.org.eclipse.jgit.api.RebaseResult.result(org.eclipse.jgit.api.RebaseResult.Status.org.eclipse.jgit.api.RebaseResult.Status, org.eclipse.jgit.revwalk.RevCommit);\n    \n    org.eclipse.jgit.api.RebaseResult org.eclipse.jgit.api.RebaseResult = org.eclipse.jgit.api.RebaseCommand.cherryPickCommit(org.eclipse.jgit.revwalk.RevCommit);\n    if (org.eclipse.jgit.api.RebaseResult != null)\n        return org.eclipse.jgit.api.RebaseResult;\n    \n} "},"status":-1},{"failures":[3,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,4,0,1,2,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,6,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,36,37,38,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,5,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,254,255,255,256,256,7,8,9,257,258,10,11,12,13,14,15,259,260,16,17,18,19,20,261,262,21,263,22,23,24,264,25,26,27,28,29,30,31,32,33,34,35,265,266,267,268,269,270,271],"tindex":"e768a096-c850-11e4-b941-e791074cd643","variableMapping":{"havesSent":"org.eclipse.jgit.revwalk.PendingGenerator.SEEN"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:550","type":"CtIfImpl","sourcecode":"if ((31 & int) != 0) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.PendingGenerator:144","type":"CtForEachImpl","sourcecode":"for (final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit : org.eclipse.jgit.revwalk.RevCommit.org.eclipse.jgit.revwalk.RevCommit[]) {\n    if (((org.eclipse.jgit.revwalk.RevCommit.int) & (org.eclipse.jgit.revwalk.PendingGenerator.int)) != 0)\n        continue;\n    \n    if (((org.eclipse.jgit.revwalk.RevCommit.int) & (org.eclipse.jgit.revwalk.PendingGenerator.int)) == 0)\n        org.eclipse.jgit.revwalk.RevCommit.parseHeaders(org.eclipse.jgit.revwalk.RevWalk);\n    \n    org.eclipse.jgit.revwalk.RevCommit.int |= org.eclipse.jgit.revwalk.PendingGenerator.int;\n    org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit);\n}"},"status":-1},{"failures":[],"tindex":"e768a097-c850-11e4-b941-b73fdc20abd5","variableMapping":{"org.eclipse.jgit.lib.Constants.ENCODED_TYPE_COMMIT":"r"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.Constants:448","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.Constants.byte[]"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Constants:568","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":-2},{"failures":[],"tindex":"e768a098-c850-11e4-b941-9b8df6dad8d7","variableMapping":{"preserveMerges":"lastStepWasForward","this":"this","commitToPick":"newHead"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:498","type":"CtIfImpl","sourcecode":"if (boolean)\n    return org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit);\nelse\n    return org.eclipse.jgit.api.RebaseCommand.cherryPickCommitFlattening(org.eclipse.jgit.revwalk.RevCommit);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:558","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.api.RebaseCommand.getHead().getObjectId();\n    if (!org.eclipse.jgit.lib.AnyObjectId.(org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.ObjectId, java.util.List<org.eclipse.jgit.revwalk.RevCommit>.get(0))))\n        org.eclipse.jgit.api.RebaseCommand.checkoutCommit(org.eclipse.jgit.lib.ObjectId.getName(), java.util.List<org.eclipse.jgit.revwalk.RevCommit>.get(0));\n    \n    if (boolean) {\n        boolean boolean = (org.eclipse.jgit.revwalk.RevCommit.getParentCount()) > 1;\n        java.lang.String java.lang.String = org.eclipse.jgit.api.RebaseCommand.getOurCommitName();\n        org.eclipse.jgit.api.CherryPickCommand org.eclipse.jgit.api.CherryPickCommand = new org.eclipse.jgit.api.Git(org.eclipse.jgit.lib.Repository).cherryPick().include(org.eclipse.jgit.revwalk.RevCommit).setOurCommitName(java.lang.String).setReflogPrefix(org.eclipse.jgit.api.RebaseCommand.java.lang.String).setStrategy(org.eclipse.jgit.merge.MergeStrategy);\n        if (boolean) {\n            org.eclipse.jgit.api.CherryPickCommand.setMainlineParentNumber(1);\n            org.eclipse.jgit.api.CherryPickCommand.setNoCommit(true);\n            org.eclipse.jgit.api.RebaseCommand.writeMergeInfo(org.eclipse.jgit.revwalk.RevCommit, java.util.List<org.eclipse.jgit.revwalk.RevCommit>);\n        } \n        org.eclipse.jgit.api.CherryPickResult org.eclipse.jgit.api.CherryPickResult = org.eclipse.jgit.api.CherryPickCommand.call();\n        switch (org.eclipse.jgit.api.CherryPickResult.getStatus()) {\n            case FAILED :\n                if ((org.eclipse.jgit.api.RebaseCommand.Operation) == (org.eclipse.jgit.api.RebaseCommand.Operation.org.eclipse.jgit.api.RebaseCommand.Operation))\n                    return org.eclipse.jgit.api.RebaseCommand.abort(org.eclipse.jgit.api.RebaseResult.org.eclipse.jgit.api.RebaseResult.failed(org.eclipse.jgit.api.CherryPickResult.getFailingPaths()));\n                else\n                    return org.eclipse.jgit.api.RebaseCommand.stop(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.api.RebaseResult.Status.org.eclipse.jgit.api.RebaseResult.Status);\n                \n            case CONFLICTING :\n                return org.eclipse.jgit.api.RebaseCommand.stop(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.api.RebaseResult.Status.org.eclipse.jgit.api.RebaseResult.Status);\n            case OK :\n                if (boolean) {\n                    org.eclipse.jgit.api.CommitCommand org.eclipse.jgit.api.CommitCommand = new org.eclipse.jgit.api.Git(org.eclipse.jgit.lib.Repository).commit();\n                    org.eclipse.jgit.api.CommitCommand.setAuthor(org.eclipse.jgit.revwalk.RevCommit.getAuthorIdent());\n                    org.eclipse.jgit.api.CommitCommand.setReflogComment((((org.eclipse.jgit.api.RebaseCommand.java.lang.String) + \" \") + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage())));\n                    org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.api.CommitCommand.call();\n                } else\n                    org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.api.CherryPickResult.getNewHead();\n                \n                break;\n        }\n    } else {\n        org.eclipse.jgit.api.MergeCommand org.eclipse.jgit.api.MergeCommand = new org.eclipse.jgit.api.Git(org.eclipse.jgit.lib.Repository).merge().setFastForward(org.eclipse.jgit.api.MergeCommand.FastForwardMode.org.eclipse.jgit.api.MergeCommand.FastForwardMode).setCommit(false);\n        for (int int = 1 ; int < (org.eclipse.jgit.revwalk.RevCommit.getParentCount()) ; int++)\n            org.eclipse.jgit.api.MergeCommand.include(java.util.List<org.eclipse.jgit.revwalk.RevCommit>.get(int));\n        org.eclipse.jgit.api.MergeResult org.eclipse.jgit.api.MergeResult = org.eclipse.jgit.api.MergeCommand.call();\n        if (org.eclipse.jgit.api.MergeResult.getMergeStatus().isSuccessful()) {\n            org.eclipse.jgit.api.CommitCommand org.eclipse.jgit.api.CommitCommand = new org.eclipse.jgit.api.Git(org.eclipse.jgit.lib.Repository).commit();\n            org.eclipse.jgit.api.CommitCommand.setAuthor(org.eclipse.jgit.revwalk.RevCommit.getAuthorIdent());\n            org.eclipse.jgit.api.CommitCommand.setMessage(org.eclipse.jgit.revwalk.RevCommit.getFullMessage());\n            org.eclipse.jgit.api.CommitCommand.setReflogComment((((org.eclipse.jgit.api.RebaseCommand.java.lang.String) + \" \") + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage())));\n            org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.api.CommitCommand.call();\n        } else {\n            if (((org.eclipse.jgit.api.RebaseCommand.Operation) == (org.eclipse.jgit.api.RebaseCommand.Operation.org.eclipse.jgit.api.RebaseCommand.Operation)) && ((org.eclipse.jgit.api.MergeResult.getMergeStatus()) == (org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus)))\n                return org.eclipse.jgit.api.RebaseCommand.abort(org.eclipse.jgit.api.RebaseResult.org.eclipse.jgit.api.RebaseResult.failed(org.eclipse.jgit.api.MergeResult.getFailingPaths()));\n            \n            return org.eclipse.jgit.api.RebaseCommand.stop(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.api.RebaseResult.Status.org.eclipse.jgit.api.RebaseResult.Status);\n        }\n    }\n} "},"status":-2},{"failures":[0,1,2,4,3,5],"tindex":"e768a099-c850-11e4-b941-a3aca6d5ec4f","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.LimitedInputStream:127","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"Mark not supported\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:132","type":"CtThrowImpl","sourcecode":"throw org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit"},"status":-1},{"failures":[4,0,1,2,3,5],"tindex":"e768a09a-c850-11e4-b941-bf5fe17a6b14","variableMapping":{"inserter":"inserter"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.NoteMapMerger:323","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ObjectInserter.flush()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RemoveNoteCommand:126","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.CommitBuilder.setTreeId(org.eclipse.jgit.notes.NoteMap.writeTree(org.eclipse.jgit.lib.ObjectInserter))"},"status":-1},{"failures":[],"tindex":"e768c7ab-c850-11e4-b941-256c5b10cf2f","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:998","type":"CtLocalVariableImpl","sourcecode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(100)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.FileTreeEntry:107","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.revwalk.RevWalkFilterTest.testFilter_ALL":139,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.revplot.PlotCommitListTest.testMergeBlockedBySelf":231,"org.eclipse.jgit.revwalk.RevWalkFilterTest.testFilter_NOT_NONE":133,"org.eclipse.jgit.revplot.PlotCommitListTest.testSideBranch":240,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPruneNone":156,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":97,"org.eclipse.jgit.api.LogCommandTest.logAllCommitsWithTag":201,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":217,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":127,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":104,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":35,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":225,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":227,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":171,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitTwoTreeTwoBlob":207,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":224,"org.eclipse.jgit.revwalk.RevWalkCullTest.testProperlyCullAllAncestors2":247,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":267,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":20,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":113,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":28,"org.eclipse.jgit.internal.storage.file.GcBranchPrunedTest.deleteMergedBranch_historyNotPruned":65,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":222,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":30,"org.eclipse.jgit.revplot.AbstractPlotRendererTest.testDrawTextAlignment":155,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":16,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":262,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":229,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":177,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":211,"org.eclipse.jgit.revwalk.TreeRevFilterTest.testStringOfPearls_FilePath3":251,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":260,"org.eclipse.jgit.revwalk.RevWalkUtilsCountTest.shouldWorkWithZeroAsEnd":132,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":259,"org.eclipse.jgit.revwalk.TreeRevFilterTest.testStringOfPearls_FilePath1":249,"org.eclipse.jgit.revwalk.TreeRevFilterTest.testStringOfPearls_FilePath2":250,"org.eclipse.jgit.api.LogCommandTest.logAllCommitsWithSkip":199,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":51,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":119,"org.eclipse.jgit.revwalk.ObjectWalkTest.testMarkUninterestingPropagation":204,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_DirPath2_NoParentRewriting":92,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":13,"org.eclipse.jgit.api.LogCommandTest.logAllCommits":196,"org.eclipse.jgit.internal.storage.file.GcBranchPrunedTest.branch_historyNotPruned":66,"org.eclipse.jgit.revplot.PlotCommitListTest.testTwoRoots2":238,"org.eclipse.jgit.revplot.PlotCommitListTest.testTwoRoots1":237,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":146,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":192,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":214,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":152,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":180,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":264,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":105,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":111,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":230,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":226,"org.eclipse.jgit.revwalk.RevWalkFilterTest.testCommitTimeRevFilter":140,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":26,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":271,"org.eclipse.jgit.revwalk.ObjectWalkTest.testCull":203,"org.eclipse.jgit.api.CherryPickCommandTest.testSequentialCherryPick":102,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":6,"org.eclipse.jgit.revwalk.RevWalkFollowFilterTest.testMultiRename":58,"org.eclipse.jgit.revplot.PlotCommitListTest.testMergeBlockedByOther":239,"org.eclipse.jgit.revwalk.RevWalkFollowFilterTest.testSingleRename":57,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath3_NoParentRewriting":88,"org.eclipse.jgit.lib.BranchTrackingStatusTest.shouldWorkInNormalCase":67,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":7,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":115,"org.eclipse.jgit.revwalk.RevCommitListTest.testFillToHighMark2":71,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":147,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":148,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_COMMIT_TIME_DESC_OutOfOrder2":165,"org.eclipse.jgit.revwalk.RevCommitListTest.testFillToHighMark4":72,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_COMMIT_TIME_DESC_OutOfOrder1":164,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":228,"org.eclipse.jgit.api.GitConstructionTest.testClose":254,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree1":205,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree2":206,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_REVERSE":168,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":84,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testCreateBranchAtHiddenCommitFails":269,"org.eclipse.jgit.revwalk.RevWalkUtilsCountTest.shouldWorkWithoutCommonAncestor":131,"org.eclipse.jgit.revwalk.RevWalkPathFilter6012Test.test1":159,"org.eclipse.jgit.revwalk.RevWalkPathFilter6012Test.test7":161,"org.eclipse.jgit.revwalk.RevWalkPathFilter6012Test.test6":160,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":100,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_TOPO_REVERSE":166,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":25,"org.eclipse.jgit.revwalk.RevCommitListTest.testFillToUnknownCommit":70,"org.eclipse.jgit.api.LogCommandTest.logPathWithSkip":200,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":103,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":53,"org.eclipse.jgit.api.CommitAndLogCommandTest.testCommitAmend":40,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":63,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":10,"org.eclipse.jgit.revwalk.RevWalkShallowTest.testDepth1":78,"org.eclipse.jgit.revwalk.RevWalkShallowTest.testDepth2":79,"org.eclipse.jgit.revwalk.RevWalkShallowTest.testDepth3":80,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":191,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":18,"org.eclipse.jgit.revwalk.RevWalkShallowTest.testMergeCommitOneParentShallow":76,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":56,"org.eclipse.jgit.revwalk.RevWalkFilterTest.testFilter_NONE_Or_MY_ALL":138,"org.eclipse.jgit.revplot.PlotCommitListTest.testDanglingCommitShouldContinueLane":245,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":169,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":210,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":219,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":174,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":55,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":101,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":21,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":154,"org.eclipse.jgit.revplot.PlotCommitListTest.testBug368927":233,"org.eclipse.jgit.transport.TestProtocolTest.testFetch":185,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":43,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":144,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":23,"org.eclipse.jgit.revwalk.MaxCountRevFilterTest.testMaxCountRevFilter":265,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":141,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":34,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitsEmptyTree":209,"org.eclipse.jgit.api.FetchCommandTest.testFetch":213,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseEndsIfLastStepIsEdit":14,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":178,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":190,"org.eclipse.jgit.revwalk.SkipRevFilterTest.testSkipRevFilter":96,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":48,"org.eclipse.jgit.revplot.PlotCommitListTest.testBug300282_1":236,"org.eclipse.jgit.revplot.PlotCommitListTest.testLinear":242,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":151,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveFixupWithBlankLines":12,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":45,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":181,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":221,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":33,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_TOPO":167,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":149,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigLocalBranch":54,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":270,"org.eclipse.jgit.revwalk.RevWalkShallowTest.testMergeCommitEntirelyShallow":75,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":223,"org.eclipse.jgit.revwalk.RevWalkFilterTest.testFilter_MY_ALL_Or_NONE":136,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.api.CommitAndLogCommandTest.testLogWithFilter":39,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":64,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":170,"org.eclipse.jgit.transport.TestProtocolTest.testReceivePackFactory":188,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":212,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":17,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":19,"org.eclipse.jgit.api.PushCommandTest.testPush":62,"org.eclipse.jgit.revwalk.TreeRevFilterTest.testPathFilterOrOtherFilter":253,"org.eclipse.jgit.api.LogCommandTest.logAllCommitsWithMaxCount":195,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":125,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":114,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":126,"org.eclipse.jgit.revwalk.RevWalkShallowTest.testObjectDirectorySnapshot":77,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":124,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":31,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_DirPath2":89,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":15,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":61,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":123,"org.eclipse.jgit.revwalk.RevWalkFilterTest.testFilter_NONE_Or_ALL":135,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":49,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":47,"org.eclipse.jgit.revwalk.RevCommitListTest.testFillToHighMarkMulitpleBlocks":69,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":118,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":184,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":116,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":183,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_Default":162,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":158,"org.eclipse.jgit.api.LogCommandTest.logPathWithMaxCount":198,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveFixupFirstCommitShouldFail":263,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":268,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":215,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":220,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":258,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":29,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":257,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":11,"org.eclipse.jgit.revwalk.RevWalkUtilsCountTest.shouldWorkForNormalCase":129,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_COMMIT_TIME_DESC":163,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":83,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testSimple1":93,"org.eclipse.jgit.revplot.PlotCommitListTest.testEgitHistory":244,"org.eclipse.jgit.api.GitConstructionTest.testWrap":256,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":143,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":172,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":107,"org.eclipse.jgit.api.GitConstructionTest.testOpen":255,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":32,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":27,"org.eclipse.jgit.api.MergeCommandTest.testMergeWithMessageOption":189,"org.eclipse.jgit.revwalk.ObjectWalkTest.testEmptyTreeCorruption":208,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":44,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":153,"org.eclipse.jgit.revwalk.RevCommitListTest.testFillToHighMarkAll":73,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":112,"org.eclipse.jgit.transport.TestProtocolTest.testUploadPackFactory":187,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.api.CommitAndLogCommandTest.testSomeCommits":42,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":82,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":248,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testExclude":117,"org.eclipse.jgit.revwalk.TreeRevFilterTest.testStringOfPearls_DirPath2":252,"org.eclipse.jgit.revplot.PlotCommitListTest.testMerged":243,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":216,"org.eclipse.jgit.revwalk.RevWalkUtilsCountTest.shouldWorkWithMerges":130,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":194,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":46,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath1_NoParentRewriting":91,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":193,"org.eclipse.jgit.api.CommitAndLogCommandTest.testCommitRange":41,"org.eclipse.jgit.revwalk.SkipRevFilterTest.testSkipRevFilter0":95,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":157,"org.eclipse.jgit.revwalk.RevWalkFilterTest.testFilter_ALL_Or_NONE":134,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":81,"org.eclipse.jgit.lib.BranchTrackingStatusTest.shouldWorkWithoutMergeBase":68,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":145,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":8,"org.eclipse.jgit.revplot.PlotCommitListTest.testDuplicateParents":235,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath2_NoParentRewriting":90,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":266,"org.eclipse.jgit.revplot.PlotCommitListTest.testBug419359":234,"org.eclipse.jgit.revwalk.RevCommitListTest.testFillToCommit":74,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":9,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":22,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":176,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":175,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":60,"org.eclipse.jgit.revplot.PlotCommitListTest.test2SideBranches":241,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":150,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":179,"org.eclipse.jgit.transport.TestProtocolTest.testPush":186,"org.eclipse.jgit.revwalk.ObjectWalkTest.testOneCommitOneTreeTwoBlob":202,"org.eclipse.jgit.revwalk.RevWalkFollowFilterTest.testNoRename":59,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":122,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":121,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":173,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSquashFirstCommitShouldFail":261,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":120,"org.eclipse.jgit.revwalk.RevWalkCullTest.testProperlyCullAllAncestors_LongHistory":246,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":37,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testEdits_MatchAll":94,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":38,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":218,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":128,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultiple":98,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":109,"org.eclipse.jgit.revwalk.RevWalkFilterTest.testFilter_NO_MERGES":137,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":110,"org.eclipse.jgit.revplot.PlotCommitListTest.testMultipleMerges":232,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":142,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":50,"org.eclipse.jgit.api.LogCommandTest.logAllCommitsWithSkipAndMaxCount":197,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":182,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":24,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":52,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":106,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath1":85,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath3":87,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath2":86,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":108,"org.eclipse.jgit.api.RevertCommandTest.testRevert":99,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":36}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

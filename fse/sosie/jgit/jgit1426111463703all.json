[{"failures":[0,1,2,3,4,5,6,7],"tindex":"98cd5842-c83a-11e4-b7b9-eddf0438387b","variableMapping":{"min":"baseId","o":"baseId"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.NoteMapMerger:283","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.notes.Note == null) || ((org.eclipse.jgit.notes.Note != null) && ((org.eclipse.jgit.notes.Note.compareTo(org.eclipse.jgit.notes.Note)) < 0)))\n    org.eclipse.jgit.notes.Note = org.eclipse.jgit.notes.Note;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1990","type":"CtIfImpl","sourcecode":"if ((boolean) && org.eclipse.jgit.internal.storage.pack.PackWriter.(have(org.eclipse.jgit.internal.storage.pack.ObjectToPack, org.eclipse.jgit.lib.ObjectId))) {\n    org.eclipse.jgit.internal.storage.pack.ObjectToPack.setDeltaBase(org.eclipse.jgit.lib.ObjectId);\n    org.eclipse.jgit.internal.storage.pack.ObjectToPack.setReuseAsIs();\n} else {\n    org.eclipse.jgit.internal.storage.pack.ObjectToPack.clearDeltaBase();\n    org.eclipse.jgit.internal.storage.pack.ObjectToPack.clearReuseAsIs();\n}"},"status":-1},{"failures":[],"tindex":"98d2d683-c83a-11e4-b7b9-3fc54785e25a","variableMapping":{"n":"expectedOldObjectId"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.NoteMap:223","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.notes.Note == null ? null : org.eclipse.jgit.notes.Note.getData()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.RemoteRefUpdate:353","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.ObjectId"},"status":-2},{"failures":[],"tindex":"98d2d684-c83a-11e4-b7b9-c14f76ee8009","variableMapping":{"data":"data","type":"org.eclipse.jgit.lib.Constants.OBJ_TREE"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:576","type":"CtIfImpl","sourcecode":"if (byte[] != null)\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:779","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case org.eclipse.jgit.lib.Constants.int :\n    case org.eclipse.jgit.lib.Constants.int :\n    case org.eclipse.jgit.lib.Constants.int :\n    case org.eclipse.jgit.lib.Constants.int :\n        {\n            if (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta != null) {\n                byte[] = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                int = int;\n                break SEARCH;\n            } \n            if (long < (org.eclipse.jgit.internal.storage.dfs.DfsReader.getStreamFileThreshold())) {\n                byte[] = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                if (byte[] != null)\n                    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n                \n            } \n            return new org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.dfs.DfsReader.org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase);\n        }\n    case org.eclipse.jgit.lib.Constants.int :\n        {\n            int = (byte[][int++]) & 255;\n            long long = int & 127;\n            while ((int & 128) != 0) {\n                long += 1;\n                int = (byte[][int++]) & 255;\n                long <<= 7;\n                long += int & 127;\n            }\n            long = long - long;\n            org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta = new org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta(org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta , long , ((int)(long)) , int , long);\n            if (long != (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.int))\n                break SEARCH;\n            \n            org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.dfs.DfsReader.getDeltaBaseCache().get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long);\n            if (org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry != null) {\n                int = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.int;\n                byte[] = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.byte[];\n                boolean = true;\n                break SEARCH;\n            } \n            long = long;\n            continue SEARCH;\n        }\n    case org.eclipse.jgit.lib.Constants.int :\n        {\n            org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully((long + int), byte[], 0, 20, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n            long long = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.findDeltaBase(org.eclipse.jgit.internal.storage.dfs.DfsReader, org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromRaw(byte[]));\n            org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta = new org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta(org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta , long , ((int)(long)) , (int + 20) , long);\n            if (long != (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.int))\n                break SEARCH;\n            \n            org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.dfs.DfsReader.getDeltaBaseCache().get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long);\n            if (org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry != null) {\n                int = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.int;\n                byte[] = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.byte[];\n                boolean = true;\n                break SEARCH;\n            } \n            long = long;\n            continue SEARCH;\n        }\n    default :\n        throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.java.lang.Integer.valueOf(int)));\n}"},"status":-2},{"failures":[],"tindex":"98d2d685-c83a-11e4-b7b9-dda51e23dc0d","variableMapping":{"dstbuf":"newValue","sz":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:327","type":"CtTryImpl","sourcecode":"try {\n    byte[] = new byte[int];\n} catch (java.lang.OutOfMemoryError java.lang.OutOfMemoryError) {\n    return null;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.ByteArraySet:148","type":"CtWhileImpl","sourcecode":"while ((byte[] = byte[][][int]) != null) {\n    if (org.eclipse.jgit.treewalk.filter.ByteArraySet.org.eclipse.jgit.treewalk.filter.ByteArraySet.equals(byte[], byte[], int))\n        return byte[];\n    \n    int = (int + 1) & int;\n}"},"status":-2},{"failures":[],"tindex":"98d5bcb6-c83a-11e4-b7b9-fb11563c201f","variableMapping":{"p":"this","parent":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:157","type":"CtWhileImpl","sourcecode":"while ((org.eclipse.jgit.treewalk.CanonicalTreeParser.org.eclipse.jgit.treewalk.AbstractTreeIterator) != null)\n    org.eclipse.jgit.treewalk.CanonicalTreeParser = ((org.eclipse.jgit.treewalk.CanonicalTreeParser)(org.eclipse.jgit.treewalk.CanonicalTreeParser.org.eclipse.jgit.treewalk.AbstractTreeIterator));"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.AbstractTreeIterator:410","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.MutableObjectId.fromRaw(org.eclipse.jgit.treewalk.AbstractTreeIterator.idBuffer(), org.eclipse.jgit.treewalk.AbstractTreeIterator.idOffset())"},"status":-2},{"failures":[],"tindex":"98d5bcb7-c83a-11e4-b7b9-7ba39b58c7f4","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.CommitCommand:313","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:1030","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = java.util.List<org.eclipse.jgit.lib.ObjectId>.get(((java.util.List<org.eclipse.jgit.lib.ObjectId>.size()) - 1))"},"status":-2},{"failures":[2,4,3,5,6,7],"tindex":"98d5bcb8-c83a-11e4-b7b9-397569797718","variableMapping":{"walker":"rw"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1670","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.ObjectWalk.setRetainBody(false)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:922","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.release()"},"status":-1},{"failures":[2,4,3,5,6,7,8],"tindex":"98d5bcb9-c83a-11e4-b7b9-3d9370b551b4","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.blame.BlameResult:261","type":"CtReturnImpl","sourcecode":"return -1"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.PlotCommitList:385","type":"CtIfImpl","sourcecode":"if (!(java.util.BitSet.get(java.lang.Integer.intValue()))) {\n    java.util.TreeSet<java.lang.Integer>.remove(java.lang.Integer);\n    return java.lang.Integer.intValue();\n} "},"status":-1},{"failures":[],"tindex":"98d5bcba-c83a-11e4-b7b9-79fa2c02d9d8","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCursor:256","type":"CtLocalVariableImpl","sourcecode":"long long = 12"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.WindowCache:415","type":"CtLocalVariableImpl","sourcecode":"final long long = java.util.concurrent.atomic.AtomicLong.get()"},"status":-2},{"failures":[2,3,4,5,6,7],"tindex":"98d5bcbb-c83a-11e4-b7b9-99339f38e2c1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:383","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.setObjectDirectory(new java.io.File(java.lang.String));\n"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.revplot.PlotCommitListTest.testEgitHistory":8,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":1,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":2,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":7,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":0,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":6,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":5}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

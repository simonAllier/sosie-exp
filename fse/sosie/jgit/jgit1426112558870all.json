[{"failures":[0,1,2,3,4,5],"tindex":"21e5b58c-c83d-11e4-81a0-cb3a19744b09","variableMapping":{"cmd":"index"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:273","type":"CtOperatorAssignmentImpl","sourcecode":"int |= 8"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevCommitList:406","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[6,7,8,9,10,11],"tindex":"21e8c2cd-c83d-11e4-81a0-ddc7dbc053e6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:749","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n    if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))) {\n        if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) && (org.eclipse.jgit.treewalk.NameConflictTreeWalk.isDirectoryFileConflict())) {\n            if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator == null) || (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))))\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            else\n                org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n        \n    } else\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    \n} else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n    if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) {\n        org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n    } else {\n        if (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n            if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))) {\n                if ((!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode()))) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode)))\n                    return ;\n                else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    }\n} else {\n    if (((!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    else if ((!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n        if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.dircache.DirCacheEntry.getFileMode()))) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n        } else if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader())))) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n        }\n    } else {\n        org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n    }\n}"},"status":-1},{"failures":[1,2,3,4,0,5],"tindex":"21e8c2ce-c83d-11e4-81a0-35d44758d4ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:881","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.BinaryDelta.org.eclipse.jgit.internal.storage.pack.BinaryDelta.apply(byte[], byte[], byte[])"},"status":-1},{"failures":[1,2,3,4,5,0,12],"tindex":"21e8e9df-c83d-11e4-81a0-a7c25a8e6098","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:595","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.api.CommitCommand.call()"},"status":-1},{"failures":[1,2,3,5,4,0],"tindex":"21e8e9e0-c83d-11e4-81a0-139c1ed0cded","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.BlockRevQueue:97","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block.org.eclipse.jgit.revwalk.BlockRevQueue.Block"},"status":-1},{"failures":[1,2,3,13,14,15,16,17,18,4,0,19,5],"tindex":"21e93801-c83d-11e4-81a0-054c01e15afa","variableMapping":{"in":"txt"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.QuotedString:201","type":"CtLocalVariableImpl","sourcecode":"final int int = (java.lang.String.indexOf('/')) + 1"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.attributes.AttributesNode:99","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.String.indexOf(' ')"},"status":-1},{"failures":[],"tindex":"21e98622-c83d-11e4-81a0-dd76df1d2948","variableMapping":{"org.eclipse.jgit.util.FileUtils.SKIP_MISSING":"msgB","org.eclipse.jgit.util.FileUtils.RETRY":"msgB"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.GC:218","type":"CtLocalVariableImpl","sourcecode":"int int = (org.eclipse.jgit.util.FileUtils.int) | (org.eclipse.jgit.util.FileUtils.int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevTag:235","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[], int)"},"status":-2},{"failures":[4,0,5,1,2,3],"tindex":"21e98623-c83d-11e4-81a0-7d25765035be","variableMapping":{"entry":"entry","this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:346","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:353","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.dircache.DirCacheEntry != null)\n    org.eclipse.jgit.dircache.DirCacheCheckout.org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.lib.ObjectReader);\n"},"status":-1},{"failures":[1,2,3,5,4,0],"tindex":"21e98624-c83d-11e4-81a0-f369e19fa2b0","variableMapping":{"r":"r","foundBranch":"r"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CloneCommand:297","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Ref"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportAmazonS3:354","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.Ref = new org.eclipse.jgit.lib.ObjectIdRef.Unpeeled(org.eclipse.jgit.lib.Ref.Storage.org.eclipse.jgit.lib.Ref.Storage , java.lang.String , null)"},"status":-1},{"failures":[],"tindex":"21e98625-c83d-11e4-81a0-efb14d7456ae","variableMapping":{"r":"org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH","last":"org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:359","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int < 0))\n    throw new java.lang.ArrayIndexOutOfBoundsException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1415","type":"CtSwitchImpl","sourcecode":"switch (org.eclipse.jgit.transport.ReceiveCommand.getResult()) {\n    case NOT_ATTEMPTED :\n        java.lang.StringBuilder.append(\"server bug; ref not processed\");\n        break;\n    case REJECTED_NOCREATE :\n        java.lang.StringBuilder.append(\"creation prohibited\");\n        break;\n    case REJECTED_NODELETE :\n        java.lang.StringBuilder.append(\"deletion prohibited\");\n        break;\n    case REJECTED_NONFASTFORWARD :\n        java.lang.StringBuilder.append(\"non-fast forward\");\n        break;\n    case REJECTED_CURRENT_BRANCH :\n        java.lang.StringBuilder.append(\"branch is currently checked out\");\n        break;\n    case REJECTED_MISSING_OBJECT :\n        if ((org.eclipse.jgit.transport.ReceiveCommand.getMessage()) == null)\n            java.lang.StringBuilder.append(\"missing object(s)\");\n        else if ((org.eclipse.jgit.transport.ReceiveCommand.getMessage().length()) == (org.eclipse.jgit.lib.Constants.int))\n            java.lang.StringBuilder.append(((\"object \" + (org.eclipse.jgit.transport.ReceiveCommand.getMessage())) + \" missing\"));\n        else\n            java.lang.StringBuilder.append(org.eclipse.jgit.transport.ReceiveCommand.getMessage());\n        \n        break;\n    case REJECTED_OTHER_REASON :\n        if ((org.eclipse.jgit.transport.ReceiveCommand.getMessage()) == null)\n            java.lang.StringBuilder.append(\"unspecified reason\");\n        else\n            java.lang.StringBuilder.append(org.eclipse.jgit.transport.ReceiveCommand.getMessage());\n        \n        break;\n    case LOCK_FAILURE :\n        java.lang.StringBuilder.append(\"failed to lock\");\n        break;\n    case OK :\n        continue;\n}"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":11,"org.eclipse.jgit.attributes.AttributeNodeTest.testTabSeparator":13,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.attributes.AttributeNodeTest.testEmptyValueKey":17,"org.eclipse.jgit.attributes.AttributeNodeTest.testEmptyLine":15,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":8,"org.eclipse.jgit.attributes.AttributesNodeDirCacheIteratorTest.testRules":19,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":6,"org.eclipse.jgit.attributes.AttributeNodeTest.testBasic":14,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":12,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":7,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":10,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.attributes.AttributeNodeTest.testEmptyNegativeAttributeKey":16,"org.eclipse.jgit.attributes.AttributesNodeWorkingTreeIteratorTest.testRules":18,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":9}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

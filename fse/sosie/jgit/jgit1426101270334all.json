[{"failures":[],"tindex":"d7db8a85-c822-11e4-af86-8d013e9434ba","variableMapping":{"statEvict":"reusedDeltas"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:403","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1049","type":"CtOperatorAssignmentImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.PackWriter.Statistics.long += long"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"d7dbb196-c822-11e4-af86-29ab3e1bf78c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffEntry:202","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.diff.DiffEntry.org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType"},"status":-1},{"failures":[7,0,1,2,26,27,28,25,29,30,13,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"d7dbb197-c822-11e4-af86-c1d163b61630","variableMapping":{"writeBitmaps":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:207","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder.clearBitmaps()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder:241","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex.getBitmaps().clear()"},"status":-1},{"failures":[25,0,1,2,13,7],"tindex":"d7dbb198-c822-11e4-af86-616e505864ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TreeFormatter:348","type":"CtTryImpl","sourcecode":"try {\n    new org.eclipse.jgit.lib.ObjectChecker().checkTree(byte[]);\n} catch (org.eclipse.jgit.errors.CorruptObjectException org.eclipse.jgit.errors.CorruptObjectException) {\n    java.lang.StringBuilder.append(\"*** ERROR: \").append(org.eclipse.jgit.errors.CorruptObjectException.getMessage()).append(\"\\n\");\n    java.lang.StringBuilder.append('\\n');\n}"},"status":-1},{"failures":[],"tindex":"d7dbb199-c822-11e4-af86-c94eedc19ab9","variableMapping":{"endStr":"path","curStr":"pathNotConfigured"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.TextProgressMonitor:122","type":"CtWhileImpl","sourcecode":"while ((java.lang.String.length()) < (java.lang.String.length()))\n    java.lang.String = \" \" + java.lang.String;"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:710","type":"CtIfImpl","sourcecode":"if ((java.io.InputStream) == null) {\n    if (((java.lang.String) == null) || ((java.lang.String.length()) == 0))\n        throw new java.lang.IllegalArgumentException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    try {\n        java.io.InputStream = new java.io.FileInputStream(java.lang.String);\n    } catch (java.io.IOException java.io.IOException) {\n        throw new java.lang.IllegalArgumentException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    }\n} "},"status":-2},{"failures":[],"tindex":"d7dbb19a-c822-11e4-af86-af665693c0ba","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportHttp:198","type":"CtReturnImpl","sourcecode":"return 21"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.UnionInputStream:66","type":"CtReturnImpl","sourcecode":"return -1"},"status":-2},{"failures":[],"tindex":"d7dbb19b-c822-11e4-af86-afe52103d2bb","variableMapping":{"p":"org.eclipse.jgit.lib.Constants.OBJ_REF_DELTA","pos":"sz","sz":"sz","curs":"curs","db":"db","typeCode":"org.eclipse.jgit.lib.Constants.OBJ_TAG"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:744","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:728","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case org.eclipse.jgit.lib.Constants.int :\n    case org.eclipse.jgit.lib.Constants.int :\n    case org.eclipse.jgit.lib.Constants.int :\n    case org.eclipse.jgit.lib.Constants.int :\n        {\n            if ((org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) || (long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())))\n                byte[] = org.eclipse.jgit.internal.storage.file.PackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.file.WindowCursor);\n            \n            if (org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) {\n                int = int;\n                break SEARCH;\n            } \n            if (byte[] != null)\n                return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n            else\n                return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n            \n        }\n    case org.eclipse.jgit.lib.Constants.int :\n        {\n            int = (byte[][int++]) & 255;\n            long long = int & 127;\n            while ((int & 128) != 0) {\n                long += 1;\n                int = (byte[][int++]) & 255;\n                long <<= 7;\n                long += int & 127;\n            }\n            long = long - long;\n            org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , int , long);\n            if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                break SEARCH;\n            \n            org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n            if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                boolean = true;\n                break SEARCH;\n            } \n            long = long;\n            continue SEARCH;\n        }\n    case org.eclipse.jgit.lib.Constants.int :\n        {\n            org.eclipse.jgit.internal.storage.file.PackFile.readFully((long + int), byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n            long long = org.eclipse.jgit.internal.storage.file.PackFile.findDeltaBase(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromRaw(byte[]));\n            org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , (int + 20) , long);\n            if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                break SEARCH;\n            \n            org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n            if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                boolean = true;\n                break SEARCH;\n            } \n            long = long;\n            continue SEARCH;\n        }\n    default :\n        throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.java.lang.Integer.valueOf(int)));\n}"},"status":-2},{"failures":[],"tindex":"d7dbb19c-c822-11e4-af86-c57def5e5830","variableMapping":{"hc":"c","user":"argValue"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.JschConfigSessionFactory:106","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.Host.getUser();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.OpenSshConfig:219","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String) == null)\n    org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String);\n"},"status":-2},{"failures":[25,43,44,45,13,0,1,2,7],"tindex":"d7dbb19d-c822-11e4-af86-0f3a34d05957","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:370","type":"CtIfImpl","sourcecode":"if (((int == 0) && (byte == '0')) && (!(boolean)))\n    throw new org.eclipse.jgit.errors.CorruptObjectException(\"mode starts with \\'0\\'\");\n"},"status":-1},{"failures":[],"tindex":"d7dbb19e-c822-11e4-af86-cb64495a20a8","variableMapping":{"org.eclipse.jgit.diff.DiffEntry.DEV_NULL":"prefix","oldp":"prefix"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.DiffFormatter:1177","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.eclipse.jgit.diff.DiffEntry.java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.AmazonS3:677","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.String>.put(\"marker\", ((java.lang.String) + (java.util.List<java.lang.String>.get(((java.util.List<java.lang.String>.size()) - 1)))))"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":34,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":38,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":41,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":28,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":42,"org.eclipse.jgit.api.BlameCommandTest.testRename":17,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.diff.DiffEntryTest.shouldListAddedFileBetweenTwoCommits":5,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":23,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidTreeModeStartsWithZero1":43,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidTreeModeStartsWithZero2":44,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidTreeModeStartsWithZero3":45,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":13,"org.eclipse.jgit.revwalk.RevWalkFollowFilterTest.testMultiRename":12,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":33,"org.eclipse.jgit.api.blame.BlameGeneratorTest.testRenamedBoundLineDelete":6,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseEndsIfLastStepIsEdit":22,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryDeleteIndexAdd":10,"org.eclipse.jgit.revwalk.RevWalkFollowFilterTest.testSingleRename":11,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":29,"org.eclipse.jgit.api.DiffCommandTest.testDiffCached":19,"org.eclipse.jgit.diff.DiffFormatterTest.testDiffRootNullToTree":18,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":36,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":40,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":39,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":37,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":32,"org.eclipse.jgit.diff.DiffEntryTest.shouldListAddedFileInInitialCommit":3,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":20,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":21,"org.eclipse.jgit.api.BlameCommandTest.testMoveToOtherDir":15,"org.eclipse.jgit.api.GitConstructionTest.testClose":27,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":25,"org.eclipse.jgit.api.BlameCommandTest.testRenameInSubDir":14,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":24,"org.eclipse.jgit.diff.DiffEntryTest.shouldListChangesInWorkingTree":4,"org.eclipse.jgit.api.StashCreateCommandTest.multipleEdits":8,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":31,"org.eclipse.jgit.api.StashCreateCommandTest.indexAdd":9,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":35,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":7,"org.eclipse.jgit.api.BlameCommandTest.testTwoRenames":16,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":30,"org.eclipse.jgit.internal.storage.file.GcConcurrentTest.concurrentRepack":26}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

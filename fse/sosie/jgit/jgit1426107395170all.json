[{"failures":[],"tindex":"1aed765c-c831-11e4-8949-9b2706978353","variableMapping":{"this":"ptr"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:552","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.treewalk.WorkingTreeIterator.current().getLastModified()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.ContentSource:162","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryLength()"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"1aed765d-c831-11e4-8949-533a38d858fd","variableMapping":{"readBlock":"v"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackParser:150","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsBlock = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:330","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsBlock = org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.scan(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.HashEntry, org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long)"},"status":-1},{"failures":[],"tindex":"1aed765e-c831-11e4-8949-2940c4862d4e","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.SubmoduleAddCommand:165","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.AmazonS3:601","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>>.getKey()"},"status":-2},{"failures":[1,0,3,4,5,2],"tindex":"1aed765f-c831-11e4-8949-8f9d3076e715","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:146","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit : org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.WalkResult) {\n    if (!(org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder.contains(org.eclipse.jgit.revwalk.RevCommit)))\n        continue;\n    \n    int++;\n    int--;\n    org.eclipse.jgit.lib.ProgressMonitor.update(1);\n    if (org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.WalkResult.java.util.Set<? extends org.eclipse.jgit.lib.ObjectId>.remove(org.eclipse.jgit.revwalk.RevCommit)) {\n        if (int > 0)\n            int = 0;\n        \n    } else if ((!boolean) && ((int > 0) || (((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) <= 1) && (int > (-(int)))))) {\n        continue;\n    } \n    int int = int;\n    int = org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int, int);\n    int = int == (int) ? org.eclipse.jgit.internal.storage.file.PackBitmapIndex.int : 0;\n    boolean = int == 0;\n    org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder = org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.newBitmapBuilder();\n    org.eclipse.jgit.revwalk.RevWalk.reset();\n    org.eclipse.jgit.revwalk.RevWalk.markStart(org.eclipse.jgit.revwalk.RevCommit);\n    for (org.eclipse.jgit.lib.AnyObjectId org.eclipse.jgit.lib.AnyObjectId : org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.WalkResult.java.lang.Iterable<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>)\n        org.eclipse.jgit.revwalk.RevWalk.markUninteresting(org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.AnyObjectId));\n    org.eclipse.jgit.revwalk.RevWalk.setRevFilter(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker.org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker.newRevFilter(null, org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder));\n    while ((org.eclipse.jgit.revwalk.RevWalk.next()) != null) {\n    }\n    java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>> java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>> = new java.util.ArrayList<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>();\n    for (java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> : java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>) {\n        org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit = java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.get(((java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.size()) - 1));\n        if (org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder.contains(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit))\n            java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>.add(java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>);\n        \n    }\n    java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>;\n    if (java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>.isEmpty()) {\n        java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> = new java.util.ArrayList<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>();\n        java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>.add(java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>);\n    } else {\n        java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> = java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>.get(0);\n        for (java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> : java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>) {\n            if ((java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.size()) > (java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.size()))\n                java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> = java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>;\n            \n        }\n    }\n    java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.add(new org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit(org.eclipse.jgit.revwalk.RevCommit , !(java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.isEmpty()) , int));\n    org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder.addBitmap(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder, 0);\n}"},"status":-1},{"failures":[],"tindex":"1aed7660-c831-11e4-8949-45652a7881f9","variableMapping":{"n":"characterClassIsNotSupported"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportSftp:394","type":"CtIfImpl","sourcecode":"if ((\".\".equals(java.lang.String)) || (\"..\".equals(java.lang.String)))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.fnmatch.GroupHead:90","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"[:digit:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:graph:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('!' , '~'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:lower:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LowerPattern.org.eclipse.jgit.fnmatch.GroupHead.LowerPattern);\n} else if (java.lang.String.equals(\"[:print:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange(' ' , '~'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:punct:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.PunctPattern.org.eclipse.jgit.fnmatch.GroupHead.PunctPattern);\n} else if (java.lang.String.equals(\"[:space:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.WhitespacePattern.org.eclipse.jgit.fnmatch.GroupHead.WhitespacePattern);\n} else if (java.lang.String.equals(\"[:upper:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.UpperPattern.org.eclipse.jgit.fnmatch.GroupHead.UpperPattern);\n} else if (java.lang.String.equals(\"[:xdigit:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('0' , '9'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('a' , 'f'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('A' , 'F'));\n} else if (java.lang.String.equals(\"[:word:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern('_'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else {\n    final java.lang.String java.lang.String = java.lang.String.java.lang.String.format(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.String));\n    throw new org.eclipse.jgit.errors.InvalidPatternException(java.lang.String , java.lang.String);\n}"},"status":-2},{"failures":[],"tindex":"1aed7661-c831-11e4-8949-e7441aa40122","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.NameRevCommand:241","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.NameRevCommand.add(org.eclipse.jgit.lib.ObjectId)"},"status":-2},{"failures":[3,4,5,2,1,0],"tindex":"1aed7662-c831-11e4-8949-6188fceaf0a5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.CombinedHunkHeader:310","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"1aed7663-c831-11e4-8949-e3468f1c1e80","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:304","type":"CtLocalVariableImpl","sourcecode":"int int = 20000"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FileUtils:431","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"1aed7664-c831-11e4-8949-87e70330b6df","variableMapping":{"org.eclipse.jgit.lib.Constants.DEFAULT_REMOTE_NAME":"org.eclipse.jgit.lib.ConfigConstants.CONFIG_SUBMODULE_SECTION","remote":"org.eclipse.jgit.lib.ConfigConstants.CONFIG_SUBMODULE_SECTION"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.BranchConfig:178","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return org.eclipse.jgit.lib.Constants.java.lang.String;\nelse\n    return java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:633","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.StoredConfig.getString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String, org.eclipse.jgit.lib.ConfigConstants.java.lang.String)"},"status":-2},{"failures":[1,3,4,5,2,0],"tindex":"1aed7665-c831-11e4-8949-1d931f029d63","variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.LogCommand:159","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.GitCommand<java.lang.Iterable<org.eclipse.jgit.revwalk.RevCommit>>.setCallable(false)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.PushCommand:366","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.GitCommand<java.lang.Iterable<org.eclipse.jgit.transport.PushResult>>.checkCallable()"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":1,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5],"tindex":"46b807de-c84d-11e4-81d1-0f0a8eb4dd29","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.AndTreeFilter:193","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.eclipse.jgit.treewalk.filter.TreeFilter[][int].toString())"},"status":-1},{"failures":[4,5,0,1,2,3],"tindex":"46b82eef-c84d-11e4-81d1-014e5a12fc42","variableMapping":{"c":"c","this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.AbstractRevQueue:80","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.AbstractRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.AbstractRevQueue:78","type":"CtIfImpl","sourcecode":"if (!(org.eclipse.jgit.revwalk.RevCommit.has(org.eclipse.jgit.revwalk.RevFlag))) {\n    org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag);\n    org.eclipse.jgit.revwalk.AbstractRevQueue.add(org.eclipse.jgit.revwalk.RevCommit);\n} "},"status":-1},{"failures":[4,5,0,1,2,3],"tindex":"46b82ef0-c84d-11e4-81d1-273db2667085","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.TreeEntry:233","type":"CtReturnImpl","sourcecode":"return '\u0000'"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.MergeBaseGenerator:131","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[],"tindex":"46b82ef1-c84d-11e4-81d1-dfe7ffd0bfde","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.AndTreeFilter:109","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String)"},"status":-2},{"failures":[0,6,7,8,9,10,11,12,13,14,15,5,16,17,1,2,3,4,18,19,20,21],"tindex":"46b82ef2-c84d-11e4-81d1-51d76c9cafbe","variableMapping":{"size":"entryCnt","limit":"entryCnt","cnt":"entryCnt","hdrs":"entryCnt"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:196","type":"CtIfImpl","sourcecode":"if ((int) < (((int) + int) + int))\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:946","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (int) ; int++) {\n    if ((org.eclipse.jgit.dircache.DirCacheEntry[][int].getStage()) > 0) {\n        return true;\n    } \n}"},"status":-1},{"failures":[22,5,4,0,1,2,3,23,24,25,26,27,28],"tindex":"46b82ef3-c84d-11e4-81d1-23f3c386cd94","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.attributes.AttributesNode:148","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.attributes.AttributesRule.isMatch(java.lang.String, boolean)) {\n    java.util.ListIterator<org.eclipse.jgit.attributes.Attribute> java.util.ListIterator<org.eclipse.jgit.attributes.Attribute> = org.eclipse.jgit.attributes.AttributesRule.getAttributes().listIterator(org.eclipse.jgit.attributes.AttributesRule.getAttributes().size());\n    while (java.util.ListIterator<org.eclipse.jgit.attributes.Attribute>.hasPrevious()) {\n        org.eclipse.jgit.attributes.Attribute org.eclipse.jgit.attributes.Attribute = java.util.ListIterator<org.eclipse.jgit.attributes.Attribute>.previous();\n        if (!(java.util.Map<java.lang.String, org.eclipse.jgit.attributes.Attribute>.containsKey(org.eclipse.jgit.attributes.Attribute.getKey())))\n            java.util.Map<java.lang.String, org.eclipse.jgit.attributes.Attribute>.put(org.eclipse.jgit.attributes.Attribute.getKey(), org.eclipse.jgit.attributes.Attribute);\n        \n    }\n} "},"status":-1},{"failures":[4,5,0,1,2,3],"tindex":"46b82ef4-c84d-11e4-81d1-4b5ca5dfef7f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.PushCommand:122","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.GitCommand<java.lang.Iterable<org.eclipse.jgit.transport.PushResult>>.checkCallable()"},"status":-1},{"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,4,5,0,1,2,3],"tindex":"46b82ef5-c84d-11e4-81d1-71de6ff119e6","variableMapping":{"packcsum":"org.eclipse.jgit.diff.DiffFormatter.noNewLine","out":"out"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1653","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[])"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffFormatter:760","type":"CtWhileImpl","sourcecode":"while ((int < int) || (int < int)) {\n    if ((int < (org.eclipse.jgit.diff.Edit.getBeginA())) || ((int + 1) < int)) {\n        org.eclipse.jgit.diff.DiffFormatter.writeContextLine(org.eclipse.jgit.diff.RawText, int);\n        if (org.eclipse.jgit.diff.DiffFormatter.org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText, int))\n            java.io.OutputStream.write(org.eclipse.jgit.diff.DiffFormatter.byte[]);\n        \n        int++;\n        int++;\n    } else if (int < (org.eclipse.jgit.diff.Edit.getEndA())) {\n        org.eclipse.jgit.diff.DiffFormatter.writeRemovedLine(org.eclipse.jgit.diff.RawText, int);\n        if (org.eclipse.jgit.diff.DiffFormatter.org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText, int))\n            java.io.OutputStream.write(org.eclipse.jgit.diff.DiffFormatter.byte[]);\n        \n        int++;\n    } else if (int < (org.eclipse.jgit.diff.Edit.getEndB())) {\n        org.eclipse.jgit.diff.DiffFormatter.writeAddedLine(org.eclipse.jgit.diff.RawText, int);\n        if (org.eclipse.jgit.diff.DiffFormatter.org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText, int))\n            java.io.OutputStream.write(org.eclipse.jgit.diff.DiffFormatter.byte[]);\n        \n        int++;\n    } \n    if (org.eclipse.jgit.diff.DiffFormatter.(org.eclipse.jgit.diff.DiffFormatter.end(org.eclipse.jgit.diff.Edit, int, int)) && ((++int) < (org.eclipse.jgit.diff.EditList.size())))\n        org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.EditList.get(int);\n    \n}"},"status":-1},{"failures":[4,5,48,49,50,51,52,53,54,55,56,57,58,0,1,2,3],"tindex":"46b82ef6-c84d-11e4-81d1-b5cd37b29a48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:1086","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.writeOrigHead(org.eclipse.jgit.lib.ObjectId)"},"status":-1},{"failures":[],"tindex":"46b82ef7-c84d-11e4-81d1-0dfeebc827f8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.BlockList:243","type":"CtIfImpl","sourcecode":"if (int == ((int) - 1)) {\n    T[] T[] = T[][][org.eclipse.jgit.util.BlockList<T>.org.eclipse.jgit.util.BlockList.toDirectoryIndex(int)];\n    int int = org.eclipse.jgit.util.BlockList<T>.org.eclipse.jgit.util.BlockList.toBlockIndex(int);\n    T T = T[][int];\n    T[][int] = null;\n    (int)--;\n    if (0 < (int))\n        (int)--;\n    else\n        org.eclipse.jgit.util.BlockList<T>.resetTailBlock();\n    \n    return T;\n} else if ((int < 0) || ((int) <= int)) {\n    throw new java.lang.IndexOutOfBoundsException(java.lang.String.java.lang.String.valueOf(int));\n} else {\n    T T = org.eclipse.jgit.util.BlockList<T>.get(int);\n    for ( ; int < ((int) - 1) ; int++)\n        org.eclipse.jgit.util.BlockList<T>.set(int, org.eclipse.jgit.util.BlockList<T>.get((int + 1)));\n    org.eclipse.jgit.util.BlockList<T>.set(((int) - 1), null);\n    (int)--;\n    org.eclipse.jgit.util.BlockList<T>.resetTailBlock();\n    return T;\n}"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.api.DiffCommandTest.testDiffModified":40,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":19,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":58,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictFileFolder":16,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":8,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":15,"org.eclipse.jgit.api.DiffCommandTest.testDiffTwoCommits":42,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":17,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":14,"org.eclipse.jgit.diff.DiffFormatterTest.testDiff":46,"org.eclipse.jgit.api.DiffCommandTest.testDiffCached":43,"org.eclipse.jgit.diff.DiffFormatterTest.testDiffRootNullToTree":45,"org.eclipse.jgit.attributes.AttributeNodeTest.testEmptyValueKey":28,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext3":32,"org.eclipse.jgit.attributes.AttributeNodeTest.testEmptyLine":26,"org.eclipse.jgit.attributes.AttributesNodeDirCacheIteratorTest.testRules":22,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext5":33,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveFixupWithBlankLines":52,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":48,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":55,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":57,"org.eclipse.jgit.attributes.AttributeNodeTest.testBasic":25,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":20,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":11,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":21,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithNegativeLineCount":41,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":56,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext100":29,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":49,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":53,"org.eclipse.jgit.attributes.AttributeNodeTest.testTabSeparator":24,"org.eclipse.jgit.dircache.DirCacheBasicTest.testDetectUnmergedPaths":6,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":10,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testDiff":39,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testSameDiff":38,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext0":30,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithPrefixes":44,"org.eclipse.jgit.attributes.AttributeNodeTest.testEmptyNegativeAttributeKey":27,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext1":31,"org.eclipse.jgit.diff.DiffFormatterTest.testDiffRootTreeToNull":47,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":18,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext10":34,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":50,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testEmpty1":35,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":9,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":7,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":51,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":12,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":13,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testNoNewLine1":36,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testNoNewLine2":37,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":54,"org.eclipse.jgit.attributes.AttributesNodeWorkingTreeIteratorTest.testRules":23}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

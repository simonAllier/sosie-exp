[{"failures":[0,1,2,3,4,5],"tindex":"f30298e4-c82b-11e4-8fa7-a90acbe3f5a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportGitSsh:286","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.TransportGitSsh.checkExecFailure(java.lang.Process.exitValue(), org.eclipse.jgit.transport.Transport.getOptionUploadPack(), java.lang.String)"},"status":-1},{"failures":[0,2,3,4,5,1],"tindex":"f30298e5-c82b-11e4-8fa7-85aa0fb4c206","variableMapping":{"pathLen":"newCnt","pathOffset":"newCnt"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:770","type":"CtIfImpl","sourcecode":"if ((int) == 0)\n    int = int;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RewriteGenerator:179","type":"CtForEachImpl","sourcecode":"for (final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit : org.eclipse.jgit.revwalk.RevCommit[]) {\n    if (org.eclipse.jgit.revwalk.RevCommit != null) {\n        org.eclipse.jgit.revwalk.RevCommit[][int++] = org.eclipse.jgit.revwalk.RevCommit;\n        org.eclipse.jgit.revwalk.RevCommit.int &= ~(org.eclipse.jgit.revwalk.RewriteGenerator.int);\n    } \n}"},"status":-1},{"failures":[],"tindex":"f30298e6-c82b-11e4-8fa7-91fa1449588a","variableMapping":{"nWeight":"org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.PACK_DELTA","otp":"otp"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1999","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.internal.storage.pack.ObjectToPack.isReuseAsIs()) && (!(org.eclipse.jgit.internal.storage.pack.ObjectToPack.isDeltaRepresentation()))) {\n    if ((org.eclipse.jgit.internal.storage.pack.ObjectToPack.getWeight()) <= int)\n        return ;\n    \n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1971","type":"CtIfImpl","sourcecode":"if ((int == (org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.int)) | (int == (org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.int))) {\n    for (org.eclipse.jgit.internal.storage.pack.CachedPack org.eclipse.jgit.internal.storage.pack.CachedPack : java.util.List<org.eclipse.jgit.internal.storage.pack.CachedPack>) {\n        if (org.eclipse.jgit.internal.storage.pack.CachedPack.hasObject(org.eclipse.jgit.internal.storage.pack.ObjectToPack, org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)) {\n            org.eclipse.jgit.internal.storage.pack.ObjectToPack.setEdge();\n            org.eclipse.jgit.internal.storage.pack.ObjectToPack.clearDeltaBase();\n            org.eclipse.jgit.internal.storage.pack.ObjectToPack.clearReuseAsIs();\n            boolean = true;\n            return ;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"f30298e7-c82b-11e4-8fa7-0dd1e07164f9","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:167","type":"CtLocalVariableImpl","sourcecode":"int int = 46"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityRenameDetector:336","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[0,2,3,4,5,1],"tindex":"f30298e8-c82b-11e4-8fa7-63b818181d1b","variableMapping":{"walker":"rw"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker:126","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.ObjectWalk.reset()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CommitCommand:181","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState, org.eclipse.jgit.revwalk.RevWalk)"},"status":-1},{"failures":[],"tindex":"f30298e9-c82b-11e4-8fa7-f3649765d331","variableMapping":{"this":"in"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.UnionInputStream:128","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.eclipse.jgit.util.io.UnionInputStream.head()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:751","type":"CtLocalVariableImpl","sourcecode":"java.io.InputStream java.io.InputStream = java.io.InputStream"},"status":-2},{"failures":[6,1,2,0,3,4,5],"tindex":"f30298ea-c82b-11e4-8fa7-d9490c404bd3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.AddCommand:132","type":"CtIfImpl","sourcecode":"if (java.util.Collection<java.lang.String>.isEmpty())\n    throw new org.eclipse.jgit.api.errors.NoFilepatternException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"status":-1},{"failures":[],"tindex":"f30298eb-c82b-11e4-8fa7-0d1d43175cb7","variableMapping":{"cur":"org.eclipse.jgit.util.FileUtils.RECURSIVE","end":"org.eclipse.jgit.util.FileUtils.RECURSIVE"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:151","type":"CtIfImpl","sourcecode":"if ((int) <= (int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CleanCommand:95","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.api.StatusCommand org.eclipse.jgit.api.StatusCommand = new org.eclipse.jgit.api.StatusCommand(org.eclipse.jgit.lib.Repository);\n    org.eclipse.jgit.api.Status org.eclipse.jgit.api.Status = org.eclipse.jgit.api.StatusCommand.call();\n    java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String>(org.eclipse.jgit.api.Status.getUntracked());\n    java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String>(org.eclipse.jgit.api.Status.getUntrackedFolders());\n    org.eclipse.jgit.util.FS org.eclipse.jgit.util.FS = org.eclipse.jgit.api.GitCommand<java.util.Set<java.lang.String>>.getRepository().getFS();\n    for (java.lang.String java.lang.String : org.eclipse.jgit.api.Status.getIgnoredNotInIndex()) {\n        java.io.File java.io.File = new java.io.File(org.eclipse.jgit.lib.Repository.getWorkTree() , java.lang.String);\n        if ((org.eclipse.jgit.util.FS.isFile(java.io.File)) || (org.eclipse.jgit.util.FS.isSymLink(java.io.File)))\n            java.util.Set<java.lang.String>.add(java.lang.String);\n        else if (org.eclipse.jgit.util.FS.isDirectory(java.io.File))\n            java.util.Set<java.lang.String>.add(java.lang.String);\n        \n    }\n    java.util.Set<java.lang.String> java.util.Set<java.lang.String> = org.eclipse.jgit.api.CleanCommand.filterFolders(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>);\n    java.util.Set<java.lang.String> java.util.Set<java.lang.String> = org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set<java.lang.String>, org.eclipse.jgit.api.Status.getIgnoredNotInIndex(), true);\n    java.util.Set<java.lang.String> java.util.Set<java.lang.String> = org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set<java.lang.String>, org.eclipse.jgit.api.Status.getIgnoredNotInIndex(), false);\n    for (java.lang.String java.lang.String : java.util.Set<java.lang.String>)\n        if ((java.util.Set<java.lang.String>.isEmpty()) || (java.util.Set<java.lang.String>.contains(java.lang.String))) {\n            if (!(boolean))\n                org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(new java.io.File(org.eclipse.jgit.lib.Repository.getWorkTree() , java.lang.String));\n            \n            java.util.Set<java.lang.String>.add(java.lang.String);\n        } \n    if (boolean)\n        for (java.lang.String java.lang.String : java.util.Set<java.lang.String>)\n            if ((java.util.Set<java.lang.String>.isEmpty()) || (java.util.Set<java.lang.String>.contains(java.lang.String))) {\n                if (!(boolean))\n                    org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(new java.io.File(org.eclipse.jgit.lib.Repository.getWorkTree() , java.lang.String), org.eclipse.jgit.util.FileUtils.int);\n                \n                java.util.Set<java.lang.String>.add((java.lang.String + \"/\"));\n            } \n    \n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(java.io.IOException.getMessage() , java.io.IOException);\n}"},"status":-2},{"failures":[],"tindex":"f30298ec-c82b-11e4-8fa7-559c7f786544","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.TransportGitSsh:184","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashListCommand:105","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException"},"status":-2},{"failures":[1,2,0,3,4,5],"tindex":"f30298ed-c82b-11e4-8fa7-61d44fe0f439","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CheckoutCommand:677","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Checking out ours/theirs is only possible when checking out index, \" + \"not when switching branches.\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:815","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.MissingObjectException(org.eclipse.jgit.transport.PackParser.DeltaChain , \"delta base\")"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.AddCommandTest.testAddNothing":6,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":0,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":1,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5,6,7],"tindex":"eca85106-c850-11e4-8f30-dba8ed7ab7c7","variableMapping":{"b":"b"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:717","type":"CtReturnImpl","sourcecode":"return ('1' <= byte) && (byte <= '9')"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.PathFilter:106","type":"CtIfImpl","sourcecode":"if (byte == '/')\n    return true;\n"},"status":-1},{"failures":[],"tindex":"eca87817-c850-11e4-8f30-4f63e6a3a9db","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.MergeResult:98","type":"CtReturnImpl","sourcecode":"return \"Already-up-to-date\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.GitDateFormatter:192","type":"CtReturnImpl","sourcecode":"return ((java.text.DateFormat.format(org.eclipse.jgit.lib.PersonIdent.getWhen())) + \" \") + (java.text.DateFormat.format(org.eclipse.jgit.lib.PersonIdent.getWhen()))"},"status":-2},{"failures":[4,6,3,0,1,2],"tindex":"eca87818-c850-11e4-8f30-73b0693711ac","variableMapping":{"cfg":"config"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:682","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.storage.file.FileBasedConfig.load()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.SubmoduleSyncCommand:157","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.StoredConfig.save()"},"status":-1},{"failures":[4,3,6,0,1,2],"tindex":"eca87819-c850-11e4-8f30-61e281cc0ec8","variableMapping":{"min":"target","o":"target"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.NoteMapMerger:283","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.notes.Note == null) || ((org.eclipse.jgit.notes.Note != null) && ((org.eclipse.jgit.notes.Note.compareTo(org.eclipse.jgit.notes.Note)) < 0)))\n    org.eclipse.jgit.notes.Note = org.eclipse.jgit.notes.Note;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:971","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.AnyObjectId == null)\n    org.eclipse.jgit.lib.AnyObjectId = org.eclipse.jgit.lib.Ref.getObjectId();\n"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,6,32,33,34,35,36,37,38,39,40,41,3,42,43,44,45,46,47,0,48,1,2,49,50,51,4,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"tindex":"eca8781a-c850-11e4-8f30-d59633d4c8c8","variableMapping":{"blkEnd":"commonSuffix","end":"commonPrefix"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:375","type":"CtIfImpl","sourcecode":"if (int <= int)\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeAlgorithm:281","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.merge.MergeResult<S>.add(1, (int + int), (int - int), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState)"},"status":-1},{"failures":[6,3,4,74,0,1,2],"tindex":"eca8781b-c850-11e4-8f30-5bbc81d27f07","variableMapping":{"count":"lineStart","sb":"r"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:800","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"# This is a combination of \").append(int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:160","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.insert(int, '\\\"')"},"status":-1},{"failures":[],"tindex":"eca8781c-c850-11e4-8f30-6be7cddefec0","variableMapping":{"nextPosition":"fb","position":"fb","sizeInBits":"fb"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.InflatingBitSet:79","type":"CtReturnImpl","sourcecode":"return ((int) <= int) && (int < (int))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:301","type":"CtReturnImpl","sourcecode":"return ((int & 143) == 8) && ((((int << 8) | ((byte[][1]) & 255)) % 31) == 0)"},"status":-2},{"failures":[],"tindex":"eca8781d-c850-11e4-8f30-dd84d05d4698","variableMapping":{"this":"out"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.TemporaryBuffer:300","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ArchiveCommand:349","type":"CtTryImpl","sourcecode":"try {\n    final org.eclipse.jgit.lib.MutableObjectId org.eclipse.jgit.lib.MutableObjectId = new org.eclipse.jgit.lib.MutableObjectId();\n    final org.eclipse.jgit.lib.ObjectReader org.eclipse.jgit.lib.ObjectReader = org.eclipse.jgit.treewalk.TreeWalk.getObjectReader();\n    final org.eclipse.jgit.revwalk.RevWalk org.eclipse.jgit.revwalk.RevWalk = new org.eclipse.jgit.revwalk.RevWalk(org.eclipse.jgit.treewalk.TreeWalk.getObjectReader());\n    org.eclipse.jgit.treewalk.TreeWalk.reset(org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.lib.ObjectId));\n    if (!(java.util.List<java.lang.String>.isEmpty()))\n        org.eclipse.jgit.treewalk.TreeWalk.setFilter(org.eclipse.jgit.treewalk.filter.PathFilterGroup.org.eclipse.jgit.treewalk.filter.PathFilterGroup.createFromStrings(java.util.List<java.lang.String>));\n    \n    while (org.eclipse.jgit.treewalk.TreeWalk.next()) {\n        final java.lang.String java.lang.String = java.lang.String + (org.eclipse.jgit.treewalk.TreeWalk.getPathString());\n        org.eclipse.jgit.lib.FileMode org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.treewalk.TreeWalk.getFileMode(0);\n        if (org.eclipse.jgit.treewalk.TreeWalk.isSubtree())\n            org.eclipse.jgit.treewalk.TreeWalk.enterSubtree();\n        \n        if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode))\n            org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode;\n        \n        if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) {\n            org.eclipse.jgit.api.ArchiveCommand.Format<T>.putEntry(T, (java.lang.String + \"/\"), org.eclipse.jgit.lib.FileMode, null);\n            continue;\n        } \n        org.eclipse.jgit.treewalk.TreeWalk.getObjectId(org.eclipse.jgit.lib.MutableObjectId, 0);\n        org.eclipse.jgit.api.ArchiveCommand.Format<T>.putEntry(T, java.lang.String, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectReader.open(org.eclipse.jgit.lib.MutableObjectId));\n    }\n    T.close();\n} finally {\n    java.io.OutputStream.close();\n}"},"status":-2},{"failures":[3,4,6,0,1,2],"tindex":"eca8781e-c850-11e4-8f30-13d4be2f5606","variableMapping":{"r":"head","rn":"branch"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportAmazonS3:355","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.Ref = new org.eclipse.jgit.lib.SymbolicRef(java.lang.String , org.eclipse.jgit.lib.Ref)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CloneCommand:227","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.Ref = org.eclipse.jgit.transport.FetchResult.getAdvertisedRef(((org.eclipse.jgit.lib.Constants.java.lang.String) + (java.lang.String)))"},"status":-1},{"failures":[],"tindex":"eca8781f-c850-11e4-8f30-f399dd23071c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:394","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"incorrectly sorted\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.PathFilter:80","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":22,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":29,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":26,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":53,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":25,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":9,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":40,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtStart":65,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":46,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":35,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":41,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":10,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":3,"org.eclipse.jgit.merge.MergeAlgorithmTest.testOneAgainstTwoConflictingModifications":67,"org.eclipse.jgit.merge.MergeAlgorithmTest.testDeleteVsModify":71,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":60,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":47,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":31,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":63,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":42,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":72,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":56,"org.eclipse.jgit.merge.MergeAlgorithmTest.testAdjacentModifications":70,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":27,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":30,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":54,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtEnd":64,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.dircache.DirCacheIteratorTest.testTwoLevelSubtree_FilterPath":5,"org.eclipse.jgit.treewalk.filter.NotTreeFilterTest.testShouldBeRecursive_PathFilter":7,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":49,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":73,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":11,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":32,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":55,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":6,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":50,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":20,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":19,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":33,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":44,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":58,"org.eclipse.jgit.merge.MergeAlgorithmTest.testInsertVsModify":68,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":8,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoConflictingModifications":69,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":18,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":43,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":17,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":48,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoComplicatedModifications":66,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":28,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":16,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":45,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":59,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":52,"org.eclipse.jgit.api.StashCreateCommandTest.unmergedPathsShouldCauseException":38,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":14,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":51,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithNonNoteConflict":39,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":15,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":57,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":13,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":37,"org.eclipse.jgit.lib.ConfigTest.testQuotingForSubSectionNames":74,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":34,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":36,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":12,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":62,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":23,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":21,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":61,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":24}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5],"tindex":"b2701aa0-c869-11e4-bc4e-13e914b2b77e","variableMapping":{"ident":"committer"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ReflogWriter:219","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.PersonIdent = new org.eclipse.jgit.lib.PersonIdent(org.eclipse.jgit.lib.PersonIdent)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CommitCommand:513","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.PersonIdent = org.eclipse.jgit.lib.PersonIdent"},"status":-1},{"failures":[],"tindex":"b2701aa1-c869-11e4-bc4e-116726b5b8a9","variableMapping":{"mode":"org.eclipse.jgit.api.ResetCommand.ResetType.MIXED"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.ResetCommand:280","type":"CtAssignmentImpl","sourcecode":"this.org.eclipse.jgit.api.ResetCommand.ResetType = org.eclipse.jgit.api.ResetCommand.ResetType"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ResetCommand:199","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.api.ResetCommand.ResetType = org.eclipse.jgit.api.ResetCommand.ResetType.org.eclipse.jgit.api.ResetCommand.ResetType"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"b2701aa2-c869-11e4-bc4e-41ba37abfa25","variableMapping":{"c":"this","depth":"w4"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.DepthWalk:202","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.DepthWalk.Commit)\n    ((org.eclipse.jgit.revwalk.DepthWalk.Commit)(org.eclipse.jgit.revwalk.RevObject)).int = 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AnyObjectId:380","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.AnyObjectId.org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[], (int + 24), int)"},"status":-1},{"failures":[4,1,2,3,5,0],"tindex":"b2701aa3-c869-11e4-bc4e-4b41a399f78e","variableMapping":{"revstr":"name"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:506","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.resolver.RepositoryResolver:61","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.RepositoryNotFoundException(java.lang.String)"},"status":-1},{"failures":[4,1,2,3,0,18,5,19,20,21,22,23,24],"tindex":"b2701aa4-c869-11e4-bc4e-a1f872c4b240","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffFormatter:762","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.diff.DiffFormatter.writeContextLine(org.eclipse.jgit.diff.RawText, int)"},"status":-1},{"failures":[],"tindex":"b2701aa5-c869-11e4-bc4e-412b97d2862c","variableMapping":{"other":"other","bitmap":"bitmap","this":"this","bitset":"bitset"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.BitmapIndexImpl:242","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.isSameCompressedBitmap(org.eclipse.jgit.lib.BitmapIndex.Bitmap)) {\n    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ComboBitset.andNot(((org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmap)(org.eclipse.jgit.lib.BitmapIndex.Bitmap)).com.googlecode.javaewah.EWAHCompressedBitmap);\n} else if (org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.isSameCompressedBitmapBuilder(org.eclipse.jgit.lib.BitmapIndex.Bitmap)) {\n    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmapBuilder org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmapBuilder = ((org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmapBuilder)(org.eclipse.jgit.lib.BitmapIndex.Bitmap));\n    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ComboBitset.andNot(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmapBuilder.org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ComboBitset.combine());\n} else {\n    throw new java.lang.IllegalArgumentException();\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.BitmapIndexImpl:254","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.isSameCompressedBitmap(org.eclipse.jgit.lib.BitmapIndex.Bitmap)) {\n    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ComboBitset.xor(((org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmap)(org.eclipse.jgit.lib.BitmapIndex.Bitmap)).com.googlecode.javaewah.EWAHCompressedBitmap);\n} else if (org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.isSameCompressedBitmapBuilder(org.eclipse.jgit.lib.BitmapIndex.Bitmap)) {\n    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmapBuilder org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmapBuilder = ((org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmapBuilder)(org.eclipse.jgit.lib.BitmapIndex.Bitmap));\n    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ComboBitset.xor(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.CompressedBitmapBuilder.org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ComboBitset.combine());\n} else {\n    throw new java.lang.IllegalArgumentException();\n}"},"status":-2},{"failures":[],"tindex":"b2701aa6-c869-11e4-bc4e-674a2af68120","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.merge.MergeFormatter:81","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:413","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.xml.sax.Attributes.getValue(\"alias\")"},"status":-2},{"failures":[25,26,27,28,4,1,2,3,0,5],"tindex":"b2701aa7-c869-11e4-bc4e-43b58b4033e7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PacketLineIn:108","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.MutableObjectId.fromString(java.lang.String.substring(4, 44))"},"status":-1},{"failures":[4,1,2,3,0,5],"tindex":"b2701aa8-c869-11e4-bc4e-8bf85bf4b6c4","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:403","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"truncated in object id\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackParser:363","type":"CtThrowImpl","sourcecode":"throw new java.io.EOFException()"},"status":-1},{"failures":[],"tindex":"b2701aa9-c869-11e4-bc4e-4df7cafd809b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:423","type":"CtIfImpl","sourcecode":"if (\"copyfile\".equals(java.lang.String)) {\n    if ((org.eclipse.jgit.gitrepo.RepoCommand.Project) == null)\n        throw new org.xml.sax.SAXException(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String);\n    \n    org.eclipse.jgit.gitrepo.RepoCommand.Project.addCopyFile(new org.eclipse.jgit.gitrepo.RepoCommand.CopyFile(org.eclipse.jgit.gitrepo.RepoCommand.org.eclipse.jgit.lib.Repository , org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String , org.xml.sax.Attributes.getValue(\"src\") , org.xml.sax.Attributes.getValue(\"dest\")));\n} else if (\"include\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = org.xml.sax.Attributes.getValue(\"name\");\n    java.io.InputStream java.io.InputStream = null;\n    if ((org.eclipse.jgit.gitrepo.RepoCommand.IncludedFileReader) != null) {\n        try {\n            java.io.InputStream = org.eclipse.jgit.gitrepo.RepoCommand.IncludedFileReader.readIncludeFile(java.lang.String);\n        } catch (java.lang.Exception java.lang.Exception) {\n            throw new org.xml.sax.SAXException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String, java.lang.String) , java.lang.Exception);\n        }\n    } else if ((java.lang.String) != null) {\n        int int = java.lang.String.lastIndexOf('/');\n        java.lang.String java.lang.String = (java.lang.String.substring(0, (int + 1))) + java.lang.String;\n        try {\n            java.io.InputStream = new java.io.FileInputStream(java.lang.String);\n        } catch (java.io.IOException java.io.IOException) {\n            throw new org.xml.sax.SAXException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String, java.lang.String) , java.io.IOException);\n        }\n    } \n    if (java.io.InputStream == null) {\n        throw new org.xml.sax.SAXException(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String);\n    } \n    try {\n        org.eclipse.jgit.gitrepo.RepoCommand.XmlManifest.read(java.io.InputStream);\n    } catch (java.io.IOException java.io.IOException) {\n        throw new org.xml.sax.SAXException(java.io.IOException);\n    }\n} "},"status":-2},{"failureDictionary":{"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":6,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.transport.PacketLineInTest.testReadACK_ACKcontinue1":27,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":8,"org.eclipse.jgit.transport.PacketLineInTest.testReadACK_ACKready1":25,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenMissing":16,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":11,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":0,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testSameDiff":24,"org.eclipse.jgit.transport.PacketLineInTest.testReadACK_ACK1":26,"org.eclipse.jgit.transport.PacketLineInTest.testReadACK_ACKcommon1":28,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext1":20,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":14,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":17,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext10":23,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext3":21,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":13,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext5":22,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":10,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":12,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":15,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithNegativeLineCount":18,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":7,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext100":19,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestMissingThenSymlink":9}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"e7af8e5c-c823-11e4-bf56-59d0349ccdd1","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:736","type":"CtReturnImpl","sourcecode":"return ((B)(this))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsRepositoryBuilder:132","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.self()"},"status":-2},{"failures":[],"tindex":"e7afb56d-c823-11e4-bf56-8d4988c0579a","variableMapping":{"hasUnmergedPaths":"bare"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:935","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new org.eclipse.jgit.api.errors.UnmergedPathsException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.InitCommand:188","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.InitCommand.org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File, java.io.File, boolean)"},"status":-2},{"failures":[],"tindex":"e7afb56e-c823-11e4-bf56-09f2604f4b82","variableMapping":{"dirOnly":"dirOnly","pathSeparator":"pathSeparator","segment":"segment"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.ignore.internal.PathMatcher:145","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.ignore.internal.WildCardMatcher(java.lang.String , java.lang.Character , boolean)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.internal.PathMatcher:141","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String , java.lang.Character , boolean)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"e7afb56f-c823-11e4-bf56-29c55e12b31a","variableMapping":{"finalPack":"objects","this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser:500","type":"CtIfImpl","sourcecode":"if (java.io.File.exists())\n    org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(java.io.File);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:254","type":"CtTryImpl","sourcecode":"try {\n    for (java.lang.String java.lang.String : java.lang.String[]) {\n        org.eclipse.jgit.lib.ProgressMonitor.update(1);\n        if ((java.lang.String.length()) != 2)\n            continue;\n        \n        java.lang.String[] java.lang.String[] = new java.io.File(java.io.File , java.lang.String).list();\n        if (java.lang.String[] == null)\n            continue;\n        \n        for (java.lang.String java.lang.String : java.lang.String[]) {\n            if ((java.lang.String.length()) != ((org.eclipse.jgit.lib.Constants.int) - 2))\n                continue;\n            \n            org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId;\n            try {\n                org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromString((java.lang.String + java.lang.String));\n            } catch (java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n                continue;\n            }\n            boolean boolean = false;\n            for (org.eclipse.jgit.internal.storage.file.PackFile org.eclipse.jgit.internal.storage.file.PackFile : java.util.Collection<org.eclipse.jgit.internal.storage.file.PackFile>)\n                if (org.eclipse.jgit.internal.storage.file.PackFile.hasObject(org.eclipse.jgit.lib.ObjectId)) {\n                    boolean = true;\n                    break;\n                } \n            if (boolean)\n                org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(org.eclipse.jgit.internal.storage.file.ObjectDirectory.fileFor(org.eclipse.jgit.lib.ObjectId), (((org.eclipse.jgit.util.FileUtils.int) | (org.eclipse.jgit.util.FileUtils.int)) | (org.eclipse.jgit.util.FileUtils.int)));\n            \n        }\n    }\n} finally {\n    org.eclipse.jgit.lib.ProgressMonitor.endTask();\n}"},"status":-1},{"failures":[20,0,1,2,3,15],"tindex":"e7afb570-c823-11e4-bf56-89f69cc351e2","variableMapping":{"r":"hc"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.AbbreviatedObjectId:160","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 4"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.PersonIdent:235","type":"CtOperatorAssignmentImpl","sourcecode":"int *= 31"},"status":-1},{"failures":[20,1,2,3,0,15],"tindex":"e7afb571-c823-11e4-bf56-f55b5d05200d","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:637","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:402","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"e7afb572-c823-11e4-bf56-a90e27596c51","variableMapping":{"ignoreMissingStart":"sideband"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker:100","type":"CtIfImpl","sourcecode":"if (boolean)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.UploadPack:1269","type":"CtIfImpl","sourcecode":"if (boolean) {\n    try {\n        org.eclipse.jgit.transport.UploadPack.sendPack(true);\n    } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException org.eclipse.jgit.transport.ServiceMayNotContinueException) {\n        throw org.eclipse.jgit.transport.ServiceMayNotContinueException;\n    } catch (java.io.IOException java.io.IOException) {\n        if (org.eclipse.jgit.transport.UploadPack.reportInternalServerErrorOverSideband())\n            throw new org.eclipse.jgit.transport.UploadPackInternalServerErrorException(java.io.IOException);\n        else\n            throw java.io.IOException;\n        \n    } catch (java.lang.RuntimeException java.lang.RuntimeException) {\n        if (org.eclipse.jgit.transport.UploadPack.reportInternalServerErrorOverSideband())\n            throw new org.eclipse.jgit.transport.UploadPackInternalServerErrorException(java.lang.RuntimeException);\n        else\n            throw java.lang.RuntimeException;\n        \n    } catch (java.lang.Error java.lang.Error) {\n        if (org.eclipse.jgit.transport.UploadPack.reportInternalServerErrorOverSideband())\n            throw new org.eclipse.jgit.transport.UploadPackInternalServerErrorException(java.lang.Error);\n        else\n            throw java.lang.Error;\n        \n    }\n} else {\n    org.eclipse.jgit.transport.UploadPack.sendPack(false);\n}"},"status":-2},{"failures":[25,26,20,0,1,2,3,15],"tindex":"e7afb573-c823-11e4-bf56-4790fa3e1cf5","variableMapping":{"v":"v"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCache:357","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.ByteWindow != null)\n    return org.eclipse.jgit.internal.storage.file.ByteWindow;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.WindowCache:360","type":"CtSynchronizedImpl","sourcecode":"synchronized(org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile, long)) {\n    org.eclipse.jgit.internal.storage.file.WindowCache.Entry org.eclipse.jgit.internal.storage.file.WindowCache.Entry = java.util.concurrent.atomic.AtomicReferenceArray<org.eclipse.jgit.internal.storage.file.WindowCache.Entry>.get(int);\n    if (org.eclipse.jgit.internal.storage.file.WindowCache.Entry != org.eclipse.jgit.internal.storage.file.WindowCache.Entry) {\n        org.eclipse.jgit.internal.storage.file.ByteWindow = org.eclipse.jgit.internal.storage.file.WindowCache.scan(org.eclipse.jgit.internal.storage.file.WindowCache.Entry, org.eclipse.jgit.internal.storage.file.PackFile, long);\n        if (org.eclipse.jgit.internal.storage.file.ByteWindow != null)\n            return org.eclipse.jgit.internal.storage.file.ByteWindow;\n        \n    } \n    org.eclipse.jgit.internal.storage.file.ByteWindow = org.eclipse.jgit.internal.storage.file.WindowCache.load(org.eclipse.jgit.internal.storage.file.PackFile, long);\n    final org.eclipse.jgit.internal.storage.file.WindowCache.Ref org.eclipse.jgit.internal.storage.file.WindowCache.Ref = org.eclipse.jgit.internal.storage.file.WindowCache.createRef(org.eclipse.jgit.internal.storage.file.PackFile, long, org.eclipse.jgit.internal.storage.file.ByteWindow);\n    org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache.Ref);\n    for ( ;  ; ) {\n        final org.eclipse.jgit.internal.storage.file.WindowCache.Entry org.eclipse.jgit.internal.storage.file.WindowCache.Entry = new org.eclipse.jgit.internal.storage.file.WindowCache.Entry(org.eclipse.jgit.internal.storage.file.WindowCache.org.eclipse.jgit.internal.storage.file.WindowCache.clean(org.eclipse.jgit.internal.storage.file.WindowCache.Entry) , org.eclipse.jgit.internal.storage.file.WindowCache.Ref);\n        if (java.util.concurrent.atomic.AtomicReferenceArray<org.eclipse.jgit.internal.storage.file.WindowCache.Entry>.compareAndSet(int, org.eclipse.jgit.internal.storage.file.WindowCache.Entry, org.eclipse.jgit.internal.storage.file.WindowCache.Entry))\n            break;\n        \n        org.eclipse.jgit.internal.storage.file.WindowCache.Entry = java.util.concurrent.atomic.AtomicReferenceArray<org.eclipse.jgit.internal.storage.file.WindowCache.Entry>.get(int);\n    }\n}"},"status":-1},{"failures":[27,28,29,30,31,32,33,1,2,3,15,20,34,0],"tindex":"e7afb574-c823-11e4-bf56-75519b2c151b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1015","type":"CtIfImpl","sourcecode":"if (boolean)\n    org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor);\n"},"status":-1},{"failures":[],"tindex":"e7afb575-c823-11e4-bf56-c5b96f6e64ed","variableMapping":{"carryFlags":"c","delayFreeFlags":"endOffset"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1192","type":"CtOperatorAssignmentImpl","sourcecode":"int &= ~(int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.Patch:356","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.patch.BinaryHunk.int = int"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":7,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.repackEmptyRepo_noPackCreated":9,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":17,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":22,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":13,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":23,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":32,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_TooFewFiles":26,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":30,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":15,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":31,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":6,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":29,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":4,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":28,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":33,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":27,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":11,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":19,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":18,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":12,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":21,"org.eclipse.jgit.api.GitConstructionTest.testClose":16,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_TooSmallLimit":25,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":14,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":8,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":5,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":20,"org.eclipse.jgit.internal.storage.file.GcConcurrentTest.concurrentRepack":24,"org.eclipse.jgit.api.CommitCommandTest.commitIgnoresSmudgedEntryWithDifferentId":34,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackRepoWithNoRefs":10}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

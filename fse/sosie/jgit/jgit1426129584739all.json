[{"failures":[],"tindex":"c4d55e92-c864-11e4-8b2d-77f3561038b2","variableMapping":{"msgOut":"out","org.eclipse.jgit.util.io.NullOutputStream.INSTANCE":"out"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:630","type":"CtAssignmentImpl","sourcecode":"java.io.OutputStream = org.eclipse.jgit.util.io.NullOutputStream.org.eclipse.jgit.util.io.NullOutputStream"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:321","type":"CtAssignmentImpl","sourcecode":"java.io.OutputStream = java.io.FileOutputStream"},"status":-2},{"failures":[],"tindex":"c4d55e93-c864-11e4-8b2d-5d385922f34b","variableMapping":{"headCommit":"newHead","walk":"revWalk","newCommit":"newHead"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1205","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevWalk.isMergedInto(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit))\n    return org.eclipse.jgit.revwalk.RevCommit;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:130","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n    if (org.eclipse.jgit.lib.Ref == null)\n        throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Ref.getObjectId());\n    org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n    for (org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref : java.util.List<org.eclipse.jgit.lib.Ref>) {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getPeeledObjectId();\n        if (org.eclipse.jgit.lib.ObjectId == null)\n            org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getObjectId();\n        \n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) != 1)\n            throw new org.eclipse.jgit.api.errors.MultipleParentsNotAllowedException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.revwalk.RevCommit.name(), java.lang.Integer.java.lang.Integer.valueOf(org.eclipse.jgit.revwalk.RevCommit.getParentCount())));\n        \n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n        org.eclipse.jgit.revwalk.RevWalk.parseHeaders(org.eclipse.jgit.revwalk.RevCommit);\n        java.lang.String java.lang.String = org.eclipse.jgit.api.RevertCommand.calculateOurName(org.eclipse.jgit.lib.Ref);\n        java.lang.String java.lang.String = ((org.eclipse.jgit.revwalk.RevCommit.getId().abbreviate(7).name()) + \" \") + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage());\n        org.eclipse.jgit.merge.ResolveMerger org.eclipse.jgit.merge.ResolveMerger = ((org.eclipse.jgit.merge.ResolveMerger)(org.eclipse.jgit.merge.MergeStrategy.newMerger(org.eclipse.jgit.lib.Repository)));\n        org.eclipse.jgit.merge.ResolveMerger.setWorkingTreeIterator(new org.eclipse.jgit.treewalk.FileTreeIterator(org.eclipse.jgit.lib.Repository));\n        org.eclipse.jgit.merge.ResolveMerger.setBase(org.eclipse.jgit.revwalk.RevCommit.getTree());\n        org.eclipse.jgit.merge.ResolveMerger.setCommitNames(new java.lang.String[]{ \"BASE\" , java.lang.String , java.lang.String });\n        java.lang.String java.lang.String = (\"Revert \\\"\" + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage())) + \"\\\"\";\n        java.lang.String java.lang.String = (((java.lang.String + \"\\n\\n\") + \"This reverts commit \") + (org.eclipse.jgit.revwalk.RevCommit.getId().getName())) + \".\\n\";\n        if (org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit)) {\n            if (org.eclipse.jgit.lib.AnyObjectId.org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.revwalk.RevCommit.getTree().getId(), org.eclipse.jgit.merge.ResolveMerger.getResultTreeId()))\n                continue;\n            \n            org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.revwalk.RevCommit.getTree() , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.merge.ResolveMerger.getResultTreeId());\n            org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n            org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n            org.eclipse.jgit.revwalk.RevCommit = new org.eclipse.jgit.api.Git(org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.revwalk.RevCommit>.getRepository()).commit().setMessage(java.lang.String).setReflogComment((\"revert: \" + java.lang.String)).call();\n            java.util.List<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.Ref);\n            org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n        } else {\n            java.util.List<java.lang.String> = org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths();\n            java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> = org.eclipse.jgit.merge.ResolveMerger.getFailingPaths();\n            if (java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> != null)\n                org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n            else\n                org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n            \n            if ((!(org.eclipse.jgit.merge.ResolveMerger.failed())) && (!(java.util.List<java.lang.String>.isEmpty()))) {\n                java.lang.String java.lang.String = new org.eclipse.jgit.merge.MergeMessageFormatter().formatWithConflicts(java.lang.String, org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths());\n                org.eclipse.jgit.lib.Repository.writeRevertHead(org.eclipse.jgit.revwalk.RevCommit.getId());\n                org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(java.lang.String);\n            } \n            return null;\n        }\n    }\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.IOException) , java.io.IOException);\n} finally {\n    org.eclipse.jgit.revwalk.RevWalk.release();\n}"},"status":-2},{"failures":[],"tindex":"c4d55e94-c864-11e4-8b2d-99cf08bab8d1","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:262","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CommitCommand:195","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String)"},"status":-2},{"failures":[],"tindex":"c4d55e95-c864-11e4-8b2d-8168babce16e","variableMapping":{"ru":"update"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.CommitCommand:265","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.Result org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.forceUpdate()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashDropCommand:149","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.Result org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.update()"},"status":-2},{"failures":[],"tindex":"c4d55e96-c864-11e4-8b2d-f99abe948ace","variableMapping":{"this":"config"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Config:103","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Config.this(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:180","type":"CtAssignmentImpl","sourcecode":"this.org.eclipse.jgit.lib.Config = null"},"status":-2},{"failures":[],"tindex":"c4d55e97-c864-11e4-8b2d-374888a61a1b","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.MergeResult:189","type":"CtReturnImpl","sourcecode":"return \"Merged-not-committed\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.ChangeIdUtil:213","type":"CtReturnImpl","sourcecode":"return java.lang.StringBuilder.toString()"},"status":-2},{"failures":[],"tindex":"c4d55e98-c864-11e4-8b2d-63e51935ef47","variableMapping":{"lenbuffer":"buf","o":"length"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.PacketLineOut:168","type":"CtWhileImpl","sourcecode":"while (int >= 0)\n    byte[][int--] = '0';"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityIndex:179","type":"CtIfImpl","sourcecode":"if (int == int) {\n    int = 0;\n    int = java.io.InputStream.read(byte[], 0, byte[].int);\n    if (int <= 0)\n        throw new java.io.EOFException();\n    \n} "},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"c4d55e99-c864-11e4-8b2d-f1ef0bdbb416","variableMapping":{"monitor":"pm"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:277","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ProgressMonitor.update(1)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker:106","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.eclipse.jgit.revwalk.ObjectWalk.setRevFilter(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker.org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker.newRevFilter(org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder, org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder));\n    while ((org.eclipse.jgit.revwalk.ObjectWalk.next()) != null) {\n        org.eclipse.jgit.lib.ProgressMonitor.update(1);\n    }\n    org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject;\n    while ((org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.ObjectWalk.nextObject()) != null) {\n        org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder.add(org.eclipse.jgit.revwalk.RevObject, org.eclipse.jgit.revwalk.RevObject.getType());\n        org.eclipse.jgit.lib.ProgressMonitor.update(1);\n    }\n} "},"status":-1},{"failures":[],"tindex":"c4d55e9a-c864-11e4-8b2d-173ce4ee0db4","variableMapping":{"cnt":"length"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:190","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    return true;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:272","type":"CtReturnImpl","sourcecode":"return (int) == (byte[].int)"},"status":-2},{"failures":[],"tindex":"c4d55e9b-c864-11e4-8b2d-11daccc24a90","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.AbbreviatedObjectId:83","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.BitmapIndexImpl:280","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":9,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":0,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":13,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":6,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":8,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":7,"org.eclipse.jgit.api.GitConstructionTest.testClose":12,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":2,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":1,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":10,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":11}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

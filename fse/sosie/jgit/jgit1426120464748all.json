[{"failures":[0,1,2,3,4,5],"tindex":"88a0ab57-c84f-11e4-b72e-edb55363864b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportSftp:294","type":"CtAssignmentImpl","sourcecode":"int = java.lang.String.lastIndexOf('/')"},"status":-1},{"failures":[],"tindex":"88a0ab58-c84f-11e4-b72e-4b3d6cc30a36","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:531","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[]{ '.' , 'g' , 'i' , 't' }"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:1027","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.eclipse.jgit.lib.ObjectLoader.getCachedBytes(byte[].int)"},"status":-2},{"failures":[],"tindex":"88a0ab59-c84f-11e4-b72e-afb574ca20da","variableMapping":{"set":"a"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.filter.RevFlagFilter:106","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.revwalk.filter.RevFlagFilter.HasAny(org.eclipse.jgit.revwalk.RevFlagSet)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.filter.RevFlagFilter:92","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.revwalk.filter.RevFlagFilter.HasAll(new org.eclipse.jgit.revwalk.RevFlagSet(org.eclipse.jgit.revwalk.RevFlagSet))"},"status":-2},{"failures":[0,1,2,4,5,3,6,7],"tindex":"88a0ab5a-c84f-11e4-b72e-8714ae2e8052","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.QuotedString:149","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(java.lang.String.charAt(int))"},"status":-1},{"failures":[3,4,0,1,2,5],"tindex":"88a0ab5b-c84f-11e4-b72e-4343a7e74734","variableMapping":{"e":"e"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCache:669","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.RecursiveMerger:275","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheEntry)"},"status":-1},{"failures":[4,3,5,0,1,2],"tindex":"88a0ab5c-c84f-11e4-b72e-2f29b392359e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:1098","type":"CtLocalVariableImpl","sourcecode":"java.io.IOException java.io.IOException"},"status":-1},{"failures":[],"tindex":"88a0ab5d-c84f-11e4-b72e-e54eebd93234","variableMapping":{"stashConflicts":"preserveMerges","org.eclipse.jgit.api.RebaseResult.STASH_APPLY_CONFLICTS_RESULT":"org.eclipse.jgit.api.RebaseResult.ABORTED_RESULT"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1348","type":"CtIfImpl","sourcecode":"if (boolean)\n    return org.eclipse.jgit.api.RebaseResult.org.eclipse.jgit.api.RebaseResult;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:267","type":"CtSwitchImpl","sourcecode":"switch (org.eclipse.jgit.api.RebaseCommand.Operation) {\n    case ABORT :\n        try {\n            return org.eclipse.jgit.api.RebaseCommand.abort(org.eclipse.jgit.api.RebaseResult.org.eclipse.jgit.api.RebaseResult);\n        } catch (java.io.IOException java.io.IOException) {\n            throw new org.eclipse.jgit.api.errors.JGitInternalException(java.io.IOException.getMessage() , java.io.IOException);\n        }\n    case PROCESS_STEPS :\n    case SKIP :\n    case CONTINUE :\n        java.lang.String java.lang.String = org.eclipse.jgit.api.RebaseCommand.RebaseState.readFile(org.eclipse.jgit.api.RebaseCommand.java.lang.String);\n        try {\n            java.lang.String = org.eclipse.jgit.api.RebaseCommand.RebaseState.readFile(org.eclipse.jgit.api.RebaseCommand.java.lang.String);\n        } catch (java.io.FileNotFoundException java.io.FileNotFoundException) {\n            java.lang.String = java.lang.String;\n        }\n        this.org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Repository.resolve(java.lang.String));\n        boolean = org.eclipse.jgit.api.RebaseCommand.RebaseState.getRewrittenDir().exists();\n        break;\n    case BEGIN :\n        org.eclipse.jgit.api.RebaseCommand.autoStash();\n        if ((boolean) || (!(org.eclipse.jgit.revwalk.RevWalk.isMergedInto(org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.lib.Constants.java.lang.String)), org.eclipse.jgit.revwalk.RevCommit)))) {\n            org.eclipse.jgit.api.Status org.eclipse.jgit.api.Status = org.eclipse.jgit.api.Git.org.eclipse.jgit.api.Git.wrap(org.eclipse.jgit.lib.Repository).status().setIgnoreSubmodules(org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode).call();\n            if (org.eclipse.jgit.api.Status.hasUncommittedChanges()) {\n                java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                java.util.List<java.lang.String>.addAll(org.eclipse.jgit.api.Status.getUncommittedChanges());\n                return org.eclipse.jgit.api.RebaseResult.org.eclipse.jgit.api.RebaseResult.uncommittedChanges(java.util.List<java.lang.String>);\n            } \n        } \n        org.eclipse.jgit.api.RebaseResult org.eclipse.jgit.api.RebaseResult = org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind();\n        if (boolean)\n            return org.eclipse.jgit.api.RebaseResult.org.eclipse.jgit.api.RebaseResult;\n        \n        if (org.eclipse.jgit.api.RebaseResult != null) {\n            org.eclipse.jgit.api.RebaseCommand.autoStashApply();\n            if (org.eclipse.jgit.api.RebaseCommand.RebaseState.getDir().exists())\n                org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(org.eclipse.jgit.api.RebaseCommand.RebaseState.getDir(), org.eclipse.jgit.util.FileUtils.int);\n            \n            return org.eclipse.jgit.api.RebaseResult;\n        } \n}"},"status":-2},{"failures":[],"tindex":"88a0ab5e-c84f-11e4-b72e-6f023550548d","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.AddNoteCommand:89","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:370","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject))"},"status":-2},{"failures":[3,5,0,1,2,4],"tindex":"88a0d26f-c84f-11e4-b72e-19b3d5f4f1b2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:546","type":"CtAssignmentImpl","sourcecode":"this.java.util.Collection<? extends org.eclipse.jgit.lib.ObjectId> = java.util.Collection<? extends org.eclipse.jgit.lib.ObjectId>"},"status":-1},{"failures":[],"tindex":"88a0d270-c84f-11e4-b72e-ad3123d60cd9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:1202","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.api.errors.RefNotFoundException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.Constants.java.lang.String))"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":3,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.util.QuotedStringBourneUserPathStyleTest.testQuote_NamedEscapes":6,"org.eclipse.jgit.util.QuotedStringBourneStyleTest.testQuote_NamedEscapes":7,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

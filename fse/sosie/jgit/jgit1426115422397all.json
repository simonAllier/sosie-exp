[{"failures":[0,1,2,3,4,5],"tindex":"cb301f5e-c843-11e4-884e-d5119dd22c40","variableMapping":{"pathLen":"len","pathOffset":"len"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:770","type":"CtIfImpl","sourcecode":"if ((int) == 0)\n    int = int;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.Candidate:237","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.blame.Region.slideAndShrink(int)"},"status":-1},{"failures":[1,2,3,4,0,5],"tindex":"cb30466f-c843-11e4-884e-d370a4bdf6b3","variableMapping":{"n":"n"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectLoader:255","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.io.EOFException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:139","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.IO.org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], int, ((byte[].int) - int))"},"status":-1},{"failures":[],"tindex":"cb304670-c843-11e4-884e-f36f12e8eeeb","variableMapping":{"segmentName":"org.eclipse.jgit.transport.BasePackFetchConnection.OPTION_SIDE_BAND"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.IgnoreRule:200","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:509","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.transport.BasePackConnection.wantCapability(java.lang.StringBuilder, org.eclipse.jgit.transport.BasePackFetchConnection.java.lang.String))\n    boolean = true;\nelse if (org.eclipse.jgit.transport.BasePackConnection.wantCapability(java.lang.StringBuilder, org.eclipse.jgit.transport.BasePackFetchConnection.java.lang.String))\n    boolean = true;\n"},"status":-2},{"failures":[1,2,3,0,5,4],"tindex":"cb304671-c843-11e4-884e-9faeef0d09a0","variableMapping":{"cmd":"ptr"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:261","type":"CtOperatorAssignmentImpl","sourcecode":"int |= 1"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:828","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[],"tindex":"cb304672-c843-11e4-884e-f54bdb5a0f6b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:478","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"name contains byte 0x00\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandOutputStream:107","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.java.lang.Integer.valueOf(int)))"},"status":-2},{"failures":[],"tindex":"cb304673-c843-11e4-884e-6b198041a8e4","variableMapping":{"y1":"org.eclipse.jgit.util.TemporaryBuffer.Block.SZ","x1":"org.eclipse.jgit.util.TemporaryBuffer.Block.SZ","y2":"org.eclipse.jgit.util.TemporaryBuffer.Block.SZ","x2":"org.eclipse.jgit.util.TemporaryBuffer.Block.SZ"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:391","type":"CtIfImpl","sourcecode":"if ((int > int) || (int > int)) {\n    int = int;\n    int = int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.TemporaryBuffer:456","type":"CtTryImpl","sourcecode":"try {\n    int int;\n    final byte[] byte[] = new byte[org.eclipse.jgit.util.TemporaryBuffer.Block.int];\n    while ((int = java.io.FileInputStream.read(byte[])) >= 0) {\n        java.io.OutputStream.write(byte[], 0, int);\n        org.eclipse.jgit.lib.ProgressMonitor.update((int / 1024));\n    }\n} finally {\n    java.io.FileInputStream.close();\n}"},"status":-2},{"failures":[],"tindex":"cb304674-c843-11e4-884e-c5a8f2c2bbbd","variableMapping":{"headCommit":"headId","walk":"rw","newCommit":"headId"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1205","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevWalk.isMergedInto(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit))\n    return org.eclipse.jgit.revwalk.RevCommit;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CommitCommand:224","type":"CtTryImpl","sourcecode":"try {\n    if (!(java.util.List<java.lang.String>.isEmpty()))\n        org.eclipse.jgit.dircache.DirCache = org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.dircache.DirCache, org.eclipse.jgit.revwalk.RevWalk);\n    \n    org.eclipse.jgit.lib.ObjectInserter org.eclipse.jgit.lib.ObjectInserter = org.eclipse.jgit.lib.Repository.newObjectInserter();\n    try {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.dircache.DirCache.writeTree(org.eclipse.jgit.lib.ObjectInserter);\n        if (boolean)\n            org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId);\n        \n        org.eclipse.jgit.lib.CommitBuilder org.eclipse.jgit.lib.CommitBuilder = new org.eclipse.jgit.lib.CommitBuilder();\n        org.eclipse.jgit.lib.CommitBuilder.setCommitter(org.eclipse.jgit.lib.PersonIdent);\n        org.eclipse.jgit.lib.CommitBuilder.setAuthor(org.eclipse.jgit.lib.PersonIdent);\n        org.eclipse.jgit.lib.CommitBuilder.setMessage(java.lang.String);\n        org.eclipse.jgit.lib.CommitBuilder.setParentIds(java.util.List<org.eclipse.jgit.lib.ObjectId>);\n        org.eclipse.jgit.lib.CommitBuilder.setTreeId(org.eclipse.jgit.lib.ObjectId);\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectInserter.insert(org.eclipse.jgit.lib.CommitBuilder);\n        org.eclipse.jgit.lib.ObjectInserter.flush();\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n        org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.Repository.updateRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n        org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.lib.ObjectId);\n        if ((java.lang.String) != null) {\n            org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String, false);\n        } else {\n            java.lang.String java.lang.String = boolean ? \"commit (amend): \" : (java.util.List<org.eclipse.jgit.lib.ObjectId>.size()) == 0 ? \"commit (initial): \" : \"commit: \";\n            org.eclipse.jgit.lib.RefUpdate.setRefLogMessage((java.lang.String + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage())), false);\n        }\n        if (org.eclipse.jgit.lib.ObjectId != null)\n            org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId);\n        else\n            org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.zeroId());\n        \n        org.eclipse.jgit.lib.RefUpdate.Result org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.forceUpdate();\n        switch (org.eclipse.jgit.lib.RefUpdate.Result) {\n            case NEW :\n            case FORCED :\n            case FAST_FORWARD :\n                {\n                    org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.revwalk.RevCommit>.setCallable(false);\n                    if ((org.eclipse.jgit.lib.RepositoryState == (org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) || org.eclipse.jgit.api.CommitCommand.(isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState))) {\n                        org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(null);\n                        org.eclipse.jgit.lib.Repository.writeMergeHeads(null);\n                    } else if (org.eclipse.jgit.lib.RepositoryState == (org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) {\n                        org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(null);\n                        org.eclipse.jgit.lib.Repository.writeCherryPickHead(null);\n                    } else if (org.eclipse.jgit.lib.RepositoryState == (org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) {\n                        org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(null);\n                        org.eclipse.jgit.lib.Repository.writeRevertHead(null);\n                    } \n                    return org.eclipse.jgit.revwalk.RevCommit;\n                }\n            case REJECTED :\n            case LOCK_FAILURE :\n                throw new org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , org.eclipse.jgit.lib.RefUpdate.getRef() , org.eclipse.jgit.lib.RefUpdate.Result);\n            default :\n                throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.Constants.java.lang.String, org.eclipse.jgit.lib.ObjectId.toString(), org.eclipse.jgit.lib.RefUpdate.Result));\n        }\n    } finally {\n        org.eclipse.jgit.lib.ObjectInserter.release();\n    }\n} finally {\n    org.eclipse.jgit.dircache.DirCache.unlock();\n}"},"status":-2},{"failures":[0,1,2,3,5,4],"tindex":"cb304675-c843-11e4-884e-19e153d20507","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:378","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String, boolean)"},"status":-1},{"failures":[],"tindex":"cb306d86-c843-11e4-884e-ff5d7e6b7b98","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ResetCommand:147","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (org.eclipse.jgit.lib.RepositoryState.equals(org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) || (org.eclipse.jgit.lib.RepositoryState.equals(org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState))"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,4,103,104,105,0,106,107,5,108,109,110,111,112],"tindex":"cb306d87-c843-11e4-884e-effdf62df032","variableMapping":{"this":"repository"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:826","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.getObjectDatabase().close()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:121","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.dircache.DirCache org.eclipse.jgit.dircache.DirCache = org.eclipse.jgit.lib.Repository.readDirCache();\n    org.eclipse.jgit.submodule.SubmoduleWalk.setTree(new org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCache));\n} catch (java.io.IOException java.io.IOException) {\n    org.eclipse.jgit.submodule.SubmoduleWalk.release();\n    throw java.io.IOException;\n}"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":75,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":80,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveTwoLevelHigherRelativeUrl":18,"org.eclipse.jgit.submodule.SubmoduleWalkTest.repositoryWithRootLevelSubmodule":15,"org.eclipse.jgit.lib.IndexDiffTest.testModified":42,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithNoHeadInSubmodule":97,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentConflict":60,"org.eclipse.jgit.lib.IndexDiffTest.testUnchangedSimple":34,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":108,"org.eclipse.jgit.submodule.SubmoduleWalkTest.indexWithGitmodules":12,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveSameLevelRelativeUrl":22,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":51,"org.eclipse.jgit.lib.IndexDiffTest.testAssumeUnchanged":40,"org.eclipse.jgit.lib.IndexDiffTest.testUntrackedNotIgnoredFolders":46,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":27,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":62,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":48,"org.eclipse.jgit.api.StatusCommandTest.testDifferentStatesWithPaths":105,"org.eclipse.jgit.submodule.SubmoduleInitTest.repositoryWithUninitializedModule":20,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":112,"org.eclipse.jgit.lib.IndexDiffTest.testStageState":43,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":84,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithPaths":90,"org.eclipse.jgit.submodule.SubmoduleWalkTest.repositoryWithNestedSubmodule":10,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":67,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":36,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.api.CleanCommandTest.testClean":89,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":56,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":65,"org.eclipse.jgit.api.CheckoutCommandTest.testCreateOrphanBranchWithStartPoint":58,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":55,"org.eclipse.jgit.lib.IndexDiffTest.testAutoCRLFInput":41,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveInvalidParentUrl":17,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingDeletedAndModified":39,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":107,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":69,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirs":91,"org.eclipse.jgit.submodule.SubmoduleAddTest.addExistentSubmodule":28,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":29,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithInitializedSubmodule":8,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":54,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":77,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testOverwriteUntrackedIgnoredFile":31,"org.eclipse.jgit.lib.IndexDiffTest.testUntrackedFolders":37,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexEdit":71,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":52,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":50,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":61,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_simulated_bug":38,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":47,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveWorkingDirectoryRelativeUrl":19,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":76,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirsWithDryRunAndNoIgnore":94,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithDryRunAndNoIgnore":95,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":106,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutOrphanBranch":59,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileNotIncluded":78,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":86,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithInitializedSubmodule":99,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithNoSubmodules":26,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithNoSubmodules":9,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithMissingSubmodule":100,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":25,"org.eclipse.jgit.lib.IndexDiffTest.testRemoved":44,"org.eclipse.jgit.api.StashApplyCommandTest.indexContentConflict":66,"org.eclipse.jgit.lib.IndexDiffTest.testAdded":35,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":87,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.api.StashApplyCommandTest.multipleEdits":64,"org.eclipse.jgit.api.StatusCommandTest.testDifferentStates":103,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.api.StashApplyCommandTest.indexDelete":74,"org.eclipse.jgit.submodule.SubmoduleWalkTest.repositoryWithRootLevelSubmoduleRelativeRef":11,"org.eclipse.jgit.submodule.SubmoduleWalkTest.generatorFilteredToOneOfTwoSubmodules":13,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":110,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":49,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithDryRun":92,"org.eclipse.jgit.submodule.SubmoduleWalkTest.repositoryWithRootLevelSubmoduleAbsoluteRef":14,"org.eclipse.jgit.api.StashApplyCommandTest.indexAdd":68,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":30,"org.eclipse.jgit.lib.IndexDiffTest.testRemovedUntracked":33,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":82,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":83,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":81,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveOneLevelHigherRelativeUrl":21,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexAdd":70,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryCleanIndexModify":63,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":72,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":79,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":45,"org.eclipse.jgit.submodule.SubmoduleInitTest.repositoryWithNoSubmodules":23,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithUnconfiguredSubmodule":7,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithDifferentRevCheckedOutSubmodule":101,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":85,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithNoSubmoduleRepository":96,"org.eclipse.jgit.api.CheckoutCommandTest.testCreateOrphanBranchWithStartCommit":57,"org.eclipse.jgit.api.StatusCommandTest.testEmptyStatus":104,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithNoSubmodules":102,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDelete":73,"org.eclipse.jgit.lib.IndexDiffTest.testUnchangedComplex":32,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithUninitializedSubmodule":98,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":109,"org.eclipse.jgit.submodule.SubmoduleWalkTest.repositoryWithNoSubmodules":16,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":6,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":53,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":111,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirsWithDryRun":93,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":88,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":24}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

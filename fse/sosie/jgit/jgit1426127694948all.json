[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"5eacdc8f-c860-11e4-9518-eb1a90dbe95d","variableMapping":{"in":"org.eclipse.jgit.util.io.UnionInputStream.EOF"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectStream:204","type":"CtReturnImpl","sourcecode":"return java.io.InputStream.read()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.UnionInputStream:148","type":"CtIfImpl","sourcecode":"if (java.io.InputStream == (org.eclipse.jgit.util.io.UnionInputStream.java.io.InputStream))\n    return -1;\nelse\n    org.eclipse.jgit.util.io.UnionInputStream.pop();\n"},"status":-1},{"failures":[],"tindex":"5ead03a0-c860-11e4-9518-ab3744a1c21e","variableMapping":{"stringValue":"initFailedNonBareRepoSameDirs","this":"this","expectedBooleanStringValue":"initFailedNonBareRepoSameDirs"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.StringUtils:181","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new java.lang.NullPointerException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.InitCommand:169","type":"CtIfImpl","sourcecode":"if ((java.io.File != null) && (java.io.File.equals(java.io.File)))\n    throw new java.lang.IllegalStateException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File, java.io.File));\n"},"status":-2},{"failures":[],"tindex":"5ead03a1-c860-11e4-9518-ed28255096a4","variableMapping":{"otp":"hId"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1231","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.internal.storage.pack.ObjectToPack != null) && (org.eclipse.jgit.internal.storage.pack.ObjectToPack.isEdge())) {\n    org.eclipse.jgit.internal.storage.pack.ObjectToPack.setDoNotDelta();\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:903","type":"CtIfImpl","sourcecode":"if ((!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n    if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.dircache.DirCacheEntry.getFileMode()))) {\n        org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n    } else if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader())))) {\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    } else {\n        org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n    }\n} else {\n    org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n}"},"status":-2},{"failures":[15,16,17,18,19,20,21,22,23,24,6,25,26,27,28,29,30,31,32,3,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,7,73,74,0,75,1,2,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],"tindex":"5ead51c2-c860-11e4-9518-3d5801da77a2","variableMapping":{"org.eclipse.jgit.util.BlockList.BLOCK_BITS":"beginA","index":"beginA"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.BlockList:286","type":"CtReturnImpl","sourcecode":"return int >>> (org.eclipse.jgit.util.BlockList.int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.Edit:164","type":"CtReturnImpl","sourcecode":"return (int) - (int)"},"status":-1},{"failures":[],"tindex":"5ead51c3-c860-11e4-9518-b538341ef7a7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffFormatter:948","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.diff.DiffEntry.getOldMode()) == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) || ((org.eclipse.jgit.diff.DiffEntry.getNewMode()) == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode))) {\n    org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream, org.eclipse.jgit.diff.DiffEntry);\n    org.eclipse.jgit.diff.DiffFormatter.org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.ByteArrayOutputStream, org.eclipse.jgit.diff.DiffEntry);\n    org.eclipse.jgit.diff.EditList = new org.eclipse.jgit.diff.EditList();\n    org.eclipse.jgit.patch.FileHeader.PatchType = org.eclipse.jgit.patch.FileHeader.PatchType.org.eclipse.jgit.patch.FileHeader.PatchType;\n} else if (((org.eclipse.jgit.diff.DiffEntry.getOldId()) == null) || ((org.eclipse.jgit.diff.DiffEntry.getNewId()) == null)) {\n    org.eclipse.jgit.diff.EditList = new org.eclipse.jgit.diff.EditList();\n    org.eclipse.jgit.patch.FileHeader.PatchType = org.eclipse.jgit.patch.FileHeader.PatchType.org.eclipse.jgit.patch.FileHeader.PatchType;\n} else {\n    org.eclipse.jgit.diff.DiffFormatter.assertHaveRepository();\n    byte[] byte[] = org.eclipse.jgit.diff.DiffFormatter.open(org.eclipse.jgit.diff.DiffEntry.Side.org.eclipse.jgit.diff.DiffEntry.Side, org.eclipse.jgit.diff.DiffEntry);\n    byte[] byte[] = org.eclipse.jgit.diff.DiffFormatter.open(org.eclipse.jgit.diff.DiffEntry.Side.org.eclipse.jgit.diff.DiffEntry.Side, org.eclipse.jgit.diff.DiffEntry);\n    if ((((byte[] == (org.eclipse.jgit.diff.DiffFormatter.byte[])) || (byte[] == (org.eclipse.jgit.diff.DiffFormatter.byte[]))) || org.eclipse.jgit.diff.RawText.(org.eclipse.jgit.diff.RawText.isBinary(byte[]))) || org.eclipse.jgit.diff.RawText.(org.eclipse.jgit.diff.RawText.isBinary(byte[]))) {\n        org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream, org.eclipse.jgit.diff.DiffEntry);\n        java.io.ByteArrayOutputStream.write(org.eclipse.jgit.lib.Constants.org.eclipse.jgit.lib.Constants.encodeASCII(\"Binary files differ\\n\"));\n        org.eclipse.jgit.diff.EditList = new org.eclipse.jgit.diff.EditList();\n        org.eclipse.jgit.patch.FileHeader.PatchType = org.eclipse.jgit.patch.FileHeader.PatchType.org.eclipse.jgit.patch.FileHeader.PatchType;\n    } else {\n        org.eclipse.jgit.diff.DiffFormatter.FormatResult.org.eclipse.jgit.diff.RawText = new org.eclipse.jgit.diff.RawText(byte[]);\n        org.eclipse.jgit.diff.DiffFormatter.FormatResult.org.eclipse.jgit.diff.RawText = new org.eclipse.jgit.diff.RawText(byte[]);\n        org.eclipse.jgit.diff.EditList = org.eclipse.jgit.diff.DiffFormatter.diff(org.eclipse.jgit.diff.DiffFormatter.FormatResult.org.eclipse.jgit.diff.RawText, org.eclipse.jgit.diff.DiffFormatter.FormatResult.org.eclipse.jgit.diff.RawText);\n        org.eclipse.jgit.patch.FileHeader.PatchType = org.eclipse.jgit.patch.FileHeader.PatchType.org.eclipse.jgit.patch.FileHeader.PatchType;\n        switch (org.eclipse.jgit.diff.DiffEntry.getChangeType()) {\n            case RENAME :\n            case COPY :\n                if (!(org.eclipse.jgit.diff.EditList.isEmpty()))\n                    org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream, org.eclipse.jgit.diff.DiffEntry);\n                \n                break;\n            default :\n                org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream, org.eclipse.jgit.diff.DiffEntry);\n                break;\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"5ead51c4-c860-11e4-9518-b72cc9368e67","variableMapping":{"attributes":"attributes"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:413","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.xml.sax.Attributes.getValue(\"alias\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:432","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.xml.sax.Attributes.getValue(\"name\")"},"status":-2},{"failures":[],"tindex":"5ead51c5-c860-11e4-9518-17ad5368c2c6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.SubmoduleSyncCommand:114","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.submodule.SubmoduleWalk org.eclipse.jgit.submodule.SubmoduleWalk = org.eclipse.jgit.submodule.SubmoduleWalk.org.eclipse.jgit.submodule.SubmoduleWalk.forIndex(org.eclipse.jgit.lib.Repository);\n    if (!(java.util.Collection<java.lang.String>.isEmpty()))\n        org.eclipse.jgit.submodule.SubmoduleWalk.setFilter(org.eclipse.jgit.treewalk.filter.PathFilterGroup.org.eclipse.jgit.treewalk.filter.PathFilterGroup.createFromStrings(java.util.Collection<java.lang.String>));\n    \n    java.util.Map<java.lang.String, java.lang.String> java.util.Map<java.lang.String, java.lang.String> = new java.util.HashMap<java.lang.String, java.lang.String>();\n    org.eclipse.jgit.lib.StoredConfig org.eclipse.jgit.lib.StoredConfig = org.eclipse.jgit.lib.Repository.getConfig();\n    while (org.eclipse.jgit.submodule.SubmoduleWalk.next()) {\n        java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getRemoteUrl();\n        if (java.lang.String == null)\n            continue;\n        \n        java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getPath();\n        org.eclipse.jgit.lib.StoredConfig.setString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String, org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String);\n        java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String, java.lang.String);\n        org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Repository = org.eclipse.jgit.submodule.SubmoduleWalk.getRepository();\n        if (org.eclipse.jgit.lib.Repository == null)\n            continue;\n        \n        org.eclipse.jgit.lib.StoredConfig org.eclipse.jgit.lib.StoredConfig;\n        java.lang.String java.lang.String;\n        try {\n            org.eclipse.jgit.lib.StoredConfig = org.eclipse.jgit.lib.Repository.getConfig();\n            java.lang.String = org.eclipse.jgit.api.SubmoduleSyncCommand.getHeadBranch(org.eclipse.jgit.lib.Repository);\n            java.lang.String java.lang.String = null;\n            if (java.lang.String != null)\n                java.lang.String = org.eclipse.jgit.lib.StoredConfig.getString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String, org.eclipse.jgit.lib.ConfigConstants.java.lang.String);\n            \n            if (java.lang.String == null)\n                java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n            \n            org.eclipse.jgit.lib.StoredConfig.setString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String, org.eclipse.jgit.lib.ConfigConstants.java.lang.String, java.lang.String);\n            org.eclipse.jgit.lib.StoredConfig.save();\n        } finally {\n            org.eclipse.jgit.lib.Repository.close();\n        }\n    }\n    if (!(java.util.Map<java.lang.String, java.lang.String>.isEmpty()))\n        org.eclipse.jgit.lib.StoredConfig.save();\n    \n    return java.util.Map<java.lang.String, java.lang.String>;\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(java.io.IOException.getMessage() , java.io.IOException);\n} catch (org.eclipse.jgit.errors.ConfigInvalidException org.eclipse.jgit.errors.ConfigInvalidException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(org.eclipse.jgit.errors.ConfigInvalidException.getMessage() , org.eclipse.jgit.errors.ConfigInvalidException);\n}"},"status":-2},{"failures":[3,6,7,0,1,2],"tindex":"5ead51c6-c860-11e4-9518-4f869f77b6a4","variableMapping":{"loose":"loose","oldLoose":"loose"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:296","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef> = org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:292","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef> = org.eclipse.jgit.internal.storage.file.RefDirectory.LooseScanner.org.eclipse.jgit.util.RefList.Builder<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>.toRefList()"},"status":-1},{"failures":[0,1,2,6,7,3],"tindex":"5ead51c7-c860-11e4-9518-7df96258b13b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:554","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.CredentialsProviderUserInfo:114","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"5ead51c8-c860-11e4-9518-49cffd4815f8","variableMapping":{"offset":"b","intbuf":"buffer","v":"count"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.NB:207","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 3)] = ((byte)(int))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.TemporaryBuffer:113","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.util.TemporaryBuffer.Block.byte[][(org.eclipse.jgit.util.TemporaryBuffer.Block.int)++] = ((byte)(int))"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":52,"org.eclipse.jgit.api.DiffCommandTest.testDiffModified":44,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":105,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":118,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":114,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":22,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":40,"org.eclipse.jgit.api.BlameCommandTest.testRename":131,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtStart":62,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_UniqueCommonLargerThanMatchPoint":89,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":23,"org.eclipse.jgit.api.DiffCommandTest.testDiffTwoCommits":46,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":41,"org.eclipse.jgit.merge.MergeAlgorithmTest.testDeleteVsModify":71,"org.eclipse.jgit.merge.MergeAlgorithmTest.testNoAgainstOneModification":72,"org.eclipse.jgit.diff.HistogramDiffTest.testDegenerate_ReplaceMiddle":91,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":115,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":125,"org.eclipse.jgit.notes.NoteMapMergerTest.testEditSameNoteDifferentContent":11,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":54,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":101,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_NoUniqueMiddleSide_FlipAndExpand":82,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":110,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":113,"org.eclipse.jgit.diff.EditTest.testType_Delete":117,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_InvertBlocks":90,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtEnd":60,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":119,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_InsertNearCommonTail":88,"org.eclipse.jgit.api.BlameCommandTest.testEditAllLines":130,"org.eclipse.jgit.api.BlameCommandTest.testRenameInSubDir":126,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":58,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":42,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":120,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.api.DiffCommandTest.testNoOutputStreamSet":48,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":102,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":100,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":15,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":53,"org.eclipse.jgit.notes.NoteMapMergerTest.testFanoutAndLeafWitConflict":12,"org.eclipse.jgit.merge.MergeAlgorithmTest.testInsertVsModify":67,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":24,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":37,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":25,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":99,"org.eclipse.jgit.merge.MergeAlgorithmTest.testSameModification":69,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingDeletedAndModified":73,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":98,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoComplicatedModifications":64,"org.eclipse.jgit.util.io.UnionInputStreamTest.testArrayConstructor":8,"org.eclipse.jgit.api.blame.BlameGeneratorTest.testLinesAllDeletedShortenedWalk":20,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithPrefixes":47,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_ReplaceCommonDelete":84,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":111,"org.eclipse.jgit.notes.DefaultNoteMergerTest.testEditEdit":4,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":26,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":97,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":19,"org.eclipse.jgit.util.io.UnionInputStreamTest.testReadByteBlocks":9,"org.eclipse.jgit.diff.HistogramDiffTest.testExceedsChainLength_DuringScanOfB":79,"org.eclipse.jgit.diff.HistogramDiffTest.testExceedsChainLength_DuringScanOfA":78,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":74,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithNonNoteConflict":34,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":96,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":39,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":50,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":94,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":16,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":43,"org.eclipse.jgit.diff.EditTest.testType_Replace":116,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_LcsContainsUnique":83,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":28,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_CommonReplaceCommonDeleteCommon":93,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":122,"org.eclipse.jgit.api.BlameCommandTest.testDeleteMiddleLines":127,"org.eclipse.jgit.util.io.UnionInputStreamTest.testNonBlockingPartialRead":10,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":107,"org.eclipse.jgit.diff.HistogramDiffTest.testFallbackToMyersDiff":80,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_DuplicateAButCommonUniqueInB":87,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":112,"org.eclipse.jgit.notes.NoteMapMergerTest.testAddSameNoteDifferentContent":13,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":109,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":56,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_MoveBlock":86,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":108,"org.eclipse.jgit.api.MergeCommandTest.testModifiedAndRenamed":27,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":29,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":6,"org.eclipse.jgit.merge.MergeAlgorithmTest.testOneAgainstTwoConflictingModifications":66,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":121,"org.eclipse.jgit.api.BlameCommandTest.testWhitespaceMerge":128,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":32,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_NoUniqueMiddleSide_FlipBlocks":81,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge1":132,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":133,"org.eclipse.jgit.diff.DiffFormatterTest.testDiff":134,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_CommonGrowsPrefixAndSuffix":92,"org.eclipse.jgit.notes.DefaultNoteMergerTest.testAddAdd":5,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":30,"org.eclipse.jgit.merge.MergeAlgorithmTest.testAdjacentModifications":70,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOverExecutableChangeOnNonExectuableFileSystem":35,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":55,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnSideConflict":21,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":57,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":7,"org.eclipse.jgit.api.DiffCommandTest.testDiffWithNegativeLineCount":45,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":31,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoSimilarModsAndOneInsert":65,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":123,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":104,"org.eclipse.jgit.notes.NoteMapMergerTest.testLargeTreesWithConflict":14,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoConflictingModifications":68,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testDiff":77,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":36,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":75,"org.eclipse.jgit.diff.PatchIdDiffFormatterTest.testSameDiff":76,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoNonConflictingModifications":61,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_LinuxBug":85,"org.eclipse.jgit.api.StashCreateCommandTest.unmergedPathsShouldCauseException":33,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":59,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":95,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":49,"org.eclipse.jgit.merge.MergeAlgorithmTest.testSeperateModifications":63,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":18,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":17,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":51,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":124,"org.eclipse.jgit.api.BlameCommandTest.testMoveToOtherDir":129,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":38,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":106,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":103}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

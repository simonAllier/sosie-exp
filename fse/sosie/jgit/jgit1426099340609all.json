[{"failures":[],"tindex":"59b2ee1b-c81e-11e4-9157-1141654ae6e4","variableMapping":{"r":"tmp","inPtr":"length","in":"tmp","rPtr":"length","inEnd":"length"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.QuotedString:315","type":"CtSwitchImpl","sourcecode":"switch (byte[][int++]) {\n    case 'a' :\n        byte[][int++] = 7;\n        continue;\n    case 'b' :\n        byte[][int++] = '\\b';\n        continue;\n    case 'f' :\n        byte[][int++] = '\\f';\n        continue;\n    case 'n' :\n        byte[][int++] = '\\n';\n        continue;\n    case 'r' :\n        byte[][int++] = '\\r';\n        continue;\n    case 't' :\n        byte[][int++] = '\\t';\n        continue;\n    case 'v' :\n        byte[][int++] = 11;\n        continue;\n    case '\\\\' :\n    case '\\\"' :\n        byte[][int++] = byte[][(int - 1)];\n        continue;\n    case '0' :\n    case '1' :\n    case '2' :\n    case '3' :\n        {\n            int int = (byte[][(int - 1)]) - '0';\n            for (int int = 1 ; (int < 3) && (int < int) ; int++) {\n                final byte byte = byte[][int];\n                if (('0' <= byte) && (byte <= '7')) {\n                    int <<= 3;\n                    int |= byte - '0';\n                    int++;\n                } else {\n                    break;\n                }\n            }\n            byte[][int++] = ((byte)(int));\n            continue;\n        }\n    default :\n        byte[][int++] = '\\\\';\n        byte[][int++] = byte[][(int - 1)];\n        continue;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:462","type":"CtWhileImpl","sourcecode":"while ((java.util.zip.Inflater.inflate(byte[], 0, byte[].int)) > 0)\n    continue;"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"59b3152c-c81e-11e4-9157-cf186cba2b84","variableMapping":{"e":"e","h":"split","toSearch":"toSearch","n":"e"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:124","type":"CtIfImpl","sourcecode":"if (int != (org.eclipse.jgit.internal.storage.pack.ObjectToPack[][int].getPathHash()))\n    return new org.eclipse.jgit.internal.storage.pack.DeltaTask.Slice(int , int);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:123","type":"CtForImpl","sourcecode":"for (int int = int + 1 ; int < int ; int++) {\n    if (int != (org.eclipse.jgit.internal.storage.pack.ObjectToPack[][int].getPathHash()))\n        return new org.eclipse.jgit.internal.storage.pack.DeltaTask.Slice(int , int);\n    \n}"},"status":-2},{"failures":[0,1,2,5,3,4],"tindex":"59b3152d-c81e-11e4-9157-4de92e511213","variableMapping":{"objdb":"objdb"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector:196","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.clearCache()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackParser:163","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)"},"status":-1},{"failures":[],"tindex":"59b3152e-c81e-11e4-9157-23c7b72e591c","variableMapping":{"n":"flags"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter:66","type":"CtIfImpl","sourcecode":"if (int == 1)\n    return true;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.FIFORevQueue:134","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.revwalk.BlockRevQueue.Block.org.eclipse.jgit.revwalk.RevCommit[][int].int) & int) == 0)\n    return false;\n"},"status":-2},{"failures":[0,1,2,3,4],"tindex":"59b3152f-c81e-11e4-9157-2d46657bd10b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaTask:277","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.pack.DeltaWindow org.eclipse.jgit.internal.storage.pack.DeltaWindow;\n    for ( ;  ; ) {\n        synchronized(this) {\n            if (java.util.LinkedList<org.eclipse.jgit.internal.storage.pack.DeltaTask.Slice>.isEmpty())\n                break;\n            \n            org.eclipse.jgit.internal.storage.pack.DeltaWindow = org.eclipse.jgit.internal.storage.pack.DeltaTask.initWindow(java.util.LinkedList<org.eclipse.jgit.internal.storage.pack.DeltaTask.Slice>.removeFirst());\n        }\n        org.eclipse.jgit.internal.storage.pack.DeltaTask.runWindow(org.eclipse.jgit.internal.storage.pack.DeltaWindow);\n    }\n    while ((org.eclipse.jgit.internal.storage.pack.DeltaWindow = org.eclipse.jgit.internal.storage.pack.DeltaTask.Block.stealWork(this)) != null)\n        org.eclipse.jgit.internal.storage.pack.DeltaTask.runWindow(org.eclipse.jgit.internal.storage.pack.DeltaWindow);\n} finally {\n    org.eclipse.jgit.internal.storage.pack.DeltaTask.Block.org.eclipse.jgit.lib.ThreadSafeProgressMonitor.endWorker();\n    org.eclipse.jgit.lib.ObjectReader.release();\n    org.eclipse.jgit.lib.ObjectReader = null;\n}"},"status":-2},{"failures":[6,7,8],"tindex":"59b31530-c81e-11e4-9157-ab20149e0fe9","variableMapping":{"newEntry":"ent","e":"ent"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.ResolveMerger:397","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.setLastModified(org.eclipse.jgit.dircache.DirCacheEntry.getLastModified())"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEditor:155","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"59b33c41-c81e-11e4-9157-4f59158715b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:497","type":"CtWhileImpl","sourcecode":"while ((java.util.Iterator<org.eclipse.jgit.transport.WalkFetchConnection.RemotePack>.hasNext()) && (!(org.eclipse.jgit.lib.ProgressMonitor.isCancelled()))) {\n    final org.eclipse.jgit.transport.WalkFetchConnection.RemotePack org.eclipse.jgit.transport.WalkFetchConnection.RemotePack = java.util.Iterator<org.eclipse.jgit.transport.WalkFetchConnection.RemotePack>.next();\n    try {\n        org.eclipse.jgit.transport.WalkFetchConnection.RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor);\n    } catch (java.io.IOException java.io.IOException) {\n        org.eclipse.jgit.transport.WalkFetchConnection.recordError(org.eclipse.jgit.lib.AnyObjectId, java.io.IOException);\n        java.util.Iterator<org.eclipse.jgit.transport.WalkFetchConnection.RemotePack>.remove();\n        continue;\n    }\n    if (org.eclipse.jgit.lib.ProgressMonitor.isCancelled()) {\n        return false;\n    } \n    if (!(org.eclipse.jgit.transport.WalkFetchConnection.RemotePack.org.eclipse.jgit.internal.storage.file.PackIndex.hasObject(org.eclipse.jgit.lib.AnyObjectId))) {\n        continue;\n    } \n    try {\n        org.eclipse.jgit.transport.WalkFetchConnection.RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor);\n    } catch (java.io.IOException java.io.IOException) {\n        org.eclipse.jgit.transport.WalkFetchConnection.recordError(org.eclipse.jgit.lib.AnyObjectId, java.io.IOException);\n        continue;\n    } finally {\n        try {\n            if ((org.eclipse.jgit.transport.WalkFetchConnection.RemotePack.java.io.File) != null)\n                org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(org.eclipse.jgit.transport.WalkFetchConnection.RemotePack.java.io.File);\n            \n        } catch (java.io.IOException java.io.IOException) {\n            throw new org.eclipse.jgit.errors.TransportException(java.io.IOException.getMessage() , java.io.IOException);\n        }\n        java.util.Iterator<org.eclipse.jgit.transport.WalkFetchConnection.RemotePack>.remove();\n    }\n    if (!org.eclipse.jgit.transport.WalkFetchConnection.(alreadyHave(org.eclipse.jgit.lib.AnyObjectId))) {\n        org.eclipse.jgit.transport.WalkFetchConnection.recordError(org.eclipse.jgit.lib.AnyObjectId, new java.io.FileNotFoundException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.AnyObjectId.name(), org.eclipse.jgit.transport.WalkFetchConnection.RemotePack.java.lang.String)));\n        continue;\n    } \n    final java.util.Iterator<org.eclipse.jgit.lib.ObjectId> java.util.Iterator<org.eclipse.jgit.lib.ObjectId> = org.eclipse.jgit.transport.WalkFetchConnection.swapFetchQueue();\n    while (java.util.Iterator<org.eclipse.jgit.lib.ObjectId>.hasNext()) {\n        final org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = java.util.Iterator<org.eclipse.jgit.lib.ObjectId>.next();\n        if (org.eclipse.jgit.transport.WalkFetchConnection.RemotePack.org.eclipse.jgit.internal.storage.file.PackIndex.hasObject(org.eclipse.jgit.lib.ObjectId)) {\n            java.util.Iterator<org.eclipse.jgit.lib.ObjectId>.remove();\n            org.eclipse.jgit.transport.WalkFetchConnection.process(org.eclipse.jgit.lib.ObjectId);\n        } else {\n            java.util.LinkedList<org.eclipse.jgit.lib.ObjectId>.add(org.eclipse.jgit.lib.ObjectId);\n        }\n    }\n    return true;\n}"},"status":-1},{"failures":[],"tindex":"59b33c42-c81e-11e4-9157-5fdfcc59b71f","variableMapping":{"entries":"ne","objectCount":"objectCount"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.PackParser:478","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.PackedObjectInfo[] = new org.eclipse.jgit.transport.PackedObjectInfo[((int)(long))]"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PackParser:824","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.PackedObjectInfo[] = new org.eclipse.jgit.transport.PackedObjectInfo[((int)(long)) + int]"},"status":-2},{"failures":[],"tindex":"59b33c43-c81e-11e4-9157-7f9ca517846a","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:150","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = \"GMT\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:880","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.eclipse.jgit.lib.Repository.getFullBranch()"},"status":-2},{"failures":[],"tindex":"59b33c44-c81e-11e4-9157-af43265e02ef","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:657","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"invalid name \\'PRN\\'\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportAmazonS3:341","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.TransportAmazonS3.DatabaseS3.getURI() , java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.String) , java.io.IOException)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":6,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":3,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":8,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":7}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

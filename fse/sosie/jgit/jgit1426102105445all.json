[{"failures":[],"tindex":"ca698c23-c824-11e4-8d43-398d42baa1b4","variableMapping":{"revstr":"org.eclipse.jgit.lib.Constants.TYPE_BLOB","rev":"rev"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:586","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevObject != null)\n    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:493","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    if (java.lang.String.equals(\"tree\")) {\n        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n    } else if (java.lang.String.equals(\"commit\")) {\n        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n    } else if (java.lang.String.equals(\"blob\")) {\n        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n        if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevBlob))\n            throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n        \n    } else if (java.lang.String.equals(\"\")) {\n        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n    } else\n        throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n    \nelse\n    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n"},"status":-2},{"failures":[],"tindex":"ca6c2434-c824-11e4-8d43-27ea2d448204","variableMapping":{"d":"lockError"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.CachedObjectDirectory:99","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) != 2)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:288","type":"CtIfImpl","sourcecode":"if (!(java.util.List<org.eclipse.jgit.transport.ReceiveCommand>.isEmpty())) {\n    java.util.Collection<java.lang.String> java.util.Collection<java.lang.String> = new java.util.HashSet<java.lang.String>(org.eclipse.jgit.lib.RefDatabase.getRefs(org.eclipse.jgit.lib.RefDatabase.java.lang.String).keySet());\n    java.util.Collection<java.lang.String> java.util.Collection<java.lang.String> = org.eclipse.jgit.lib.BatchRefUpdate.org.eclipse.jgit.lib.BatchRefUpdate.getTakenPrefixes(java.util.Collection<java.lang.String>);\n    for (org.eclipse.jgit.transport.ReceiveCommand org.eclipse.jgit.transport.ReceiveCommand : java.util.List<org.eclipse.jgit.transport.ReceiveCommand>) {\n        try {\n            if ((org.eclipse.jgit.transport.ReceiveCommand.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result)) {\n                org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk);\n                org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.BatchRefUpdate.newUpdate(org.eclipse.jgit.transport.ReceiveCommand);\n                SWITCH : switch (org.eclipse.jgit.transport.ReceiveCommand.getType()) {\n                    case DELETE :\n                        break;\n                    case UPDATE :\n                    case UPDATE_NONFASTFORWARD :\n                        org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.BatchRefUpdate.newUpdate(org.eclipse.jgit.transport.ReceiveCommand);\n                        org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk));\n                        break;\n                    case CREATE :\n                        for (java.lang.String java.lang.String : org.eclipse.jgit.lib.BatchRefUpdate.org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(org.eclipse.jgit.transport.ReceiveCommand.getRefName())) {\n                            if (java.util.Collection<java.lang.String>.contains(java.lang.String)) {\n                                org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result);\n                                break SWITCH;\n                            } \n                        }\n                        if (java.util.Collection<java.lang.String>.contains(org.eclipse.jgit.transport.ReceiveCommand.getRefName())) {\n                            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result);\n                            break SWITCH;\n                        } \n                        org.eclipse.jgit.lib.RefUpdate.setCheckConflicting(false);\n                        org.eclipse.jgit.lib.BatchRefUpdate.org.eclipse.jgit.lib.BatchRefUpdate.addRefToPrefixes(java.util.Collection<java.lang.String>, org.eclipse.jgit.transport.ReceiveCommand.getRefName());\n                        java.util.Collection<java.lang.String>.add(org.eclipse.jgit.transport.ReceiveCommand.getRefName());\n                        org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk));\n                }\n            } \n        } catch (java.io.IOException java.io.IOException) {\n            org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.IOException.getMessage()));\n        } finally {\n            org.eclipse.jgit.lib.ProgressMonitor.update(1);\n        }\n    }\n} "},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"ca6c2435-c824-11e4-8d43-ed4fa9d1b9fd","variableMapping":{"stats":"stats"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackDescription:246","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.PackWriter.Statistics = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackDescription:233","type":"CtAssignmentImpl","sourcecode":"this.org.eclipse.jgit.internal.storage.pack.PackWriter.Statistics = org.eclipse.jgit.internal.storage.pack.PackWriter.Statistics"},"status":-1},{"failures":[],"tindex":"ca6c2436-c824-11e4-8d43-f13378472a5f","variableMapping":{"monitor":"pm"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:512","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ProgressMonitor.isCancelled()) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ThreadSafeProgressMonitor:167","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.ProgressMonitor.isCancelled()"},"status":-2},{"failures":[],"tindex":"ca6c2437-c824-11e4-8d43-93d4bf241cbb","variableMapping":{"update":"update"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:554","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.getRef().getLeaf()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ReflogWriter:213","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.RefUpdate.getRef()"},"status":-2},{"failures":[],"tindex":"ca6c2438-c824-11e4-8d43-79d65fcf258b","variableMapping":{"this":"parser"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.PackParser:714","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PackParser.use(20)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1086","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PackParser.setObjectChecker(org.eclipse.jgit.lib.ObjectChecker)"},"status":-2},{"failures":[],"tindex":"ca6c4b49-c824-11e4-8d43-afb1762c1b3d","variableMapping":{"data":"b"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:746","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = null"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:876","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\", numberOfPackedRefs=\")"},"status":-2},{"failures":[6,1,0,5,2,3,4],"tindex":"ca6c4b4a-c824-11e4-8d43-07373f62182a","variableMapping":{"newExt":"parent","tmpExt":"parent"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.GC:793","type":"CtIfImpl","sourcecode":"if (!(java.io.File.renameTo(java.io.File)))\n    java.io.File = java.io.File;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ApplyCommand:176","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.mkdirs(java.io.File, true)"},"status":-1},{"failures":[],"tindex":"ca6c4b4b-c824-11e4-8d43-d9926ceddf4e","variableMapping":{"xmlInRead":"com.jcraft.jsch.ChannelSftp.SSH_FX_NO_SUCH_FILE"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:477","type":"CtIfImpl","sourcecode":"if ((int) != 0)\n    return ;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportSftp:277","type":"CtTryImpl","sourcecode":"try {\n    com.jcraft.jsch.ChannelSftp.rm(java.lang.String);\n} catch (com.jcraft.jsch.SftpException com.jcraft.jsch.SftpException) {\n    if ((com.jcraft.jsch.SftpException.int) == (com.jcraft.jsch.ChannelSftp.int))\n        return ;\n    \n    throw new org.eclipse.jgit.errors.TransportException((((((\"Can\\'t delete \" + (java.lang.String)) + \"/\") + java.lang.String) + \": \") + (com.jcraft.jsch.SftpException.getMessage())) , com.jcraft.jsch.SftpException);\n}"},"status":-2},{"failures":[2,3,4,1,0,5],"tindex":"ca6c4b4c-c824-11e4-8d43-6da055e6e8e7","variableMapping":{"tmp":"tmpIdx","this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:298","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(java.io.File)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:862","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.file.PackIndex = org.eclipse.jgit.internal.storage.file.PackIndex.org.eclipse.jgit.internal.storage.file.PackIndex.open(java.io.File);\n} catch (java.io.IOException java.io.IOException) {\n    org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(java.io.File);\n    throw java.io.IOException;\n}"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":0,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1Sub":6,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":1,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"8ba15610-c851-11e4-b71e-2314c400202e","variableMapping":{"repo":"repo","org.eclipse.jgit.lib.Constants.HEAD":"cannotLock"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.CheckoutCommand:236","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ResetCommand:145","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.RepositoryState org.eclipse.jgit.lib.RepositoryState = org.eclipse.jgit.lib.Repository.getRepositoryState();\n    final boolean boolean = (org.eclipse.jgit.lib.RepositoryState.equals(org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) || (org.eclipse.jgit.lib.RepositoryState.equals(org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState));\n    final boolean boolean = (org.eclipse.jgit.lib.RepositoryState.equals(org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) || (org.eclipse.jgit.lib.RepositoryState.equals(org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState));\n    final boolean boolean = (org.eclipse.jgit.lib.RepositoryState.equals(org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState)) || (org.eclipse.jgit.lib.RepositoryState.equals(org.eclipse.jgit.lib.RepositoryState.org.eclipse.jgit.lib.RepositoryState));\n    final org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId();\n    if (((java.lang.String) != null) && (org.eclipse.jgit.lib.ObjectId == null)) {\n        throw new org.eclipse.jgit.api.errors.JGitInternalException(((\"Invalid ref \" + (java.lang.String)) + \" specified\"));\n    } \n    final org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId;\n    if (org.eclipse.jgit.lib.ObjectId != null)\n        org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.api.ResetCommand.parseCommit(org.eclipse.jgit.lib.ObjectId).getTree();\n    else\n        org.eclipse.jgit.lib.ObjectId = null;\n    \n    if (!(java.util.Collection<java.lang.String>.isEmpty())) {\n        org.eclipse.jgit.api.ResetCommand.resetIndexForPaths(org.eclipse.jgit.lib.ObjectId);\n        org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.lib.Ref>.setCallable(false);\n        return org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n    } \n    final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref;\n    if (org.eclipse.jgit.lib.ObjectId != null) {\n        final org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.Repository.updateRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n        org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.lib.ObjectId);\n        java.lang.String java.lang.String = org.eclipse.jgit.lib.Repository.org.eclipse.jgit.lib.Repository.shortenRefName(org.eclipse.jgit.api.ResetCommand.getRefOrHEAD());\n        java.lang.String java.lang.String = (java.lang.String + \": updating \") + (org.eclipse.jgit.lib.Constants.java.lang.String);\n        org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String, false);\n        if ((org.eclipse.jgit.lib.RefUpdate.forceUpdate()) == (org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result))\n            throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.RefUpdate.getName()));\n        \n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.RefUpdate.getOldObjectId();\n        if (org.eclipse.jgit.lib.ObjectId != null)\n            org.eclipse.jgit.lib.Repository.writeOrigHead(org.eclipse.jgit.lib.ObjectId);\n        \n        org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.RefUpdate.getRef();\n    } else {\n        org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n    }\n    if ((org.eclipse.jgit.api.ResetCommand.ResetType) == null)\n        org.eclipse.jgit.api.ResetCommand.ResetType = org.eclipse.jgit.api.ResetCommand.ResetType.org.eclipse.jgit.api.ResetCommand.ResetType;\n    \n    switch (org.eclipse.jgit.api.ResetCommand.ResetType) {\n        case HARD :\n            org.eclipse.jgit.api.ResetCommand.checkoutIndex(org.eclipse.jgit.lib.ObjectId);\n            break;\n        case MIXED :\n            org.eclipse.jgit.api.ResetCommand.resetIndex(org.eclipse.jgit.lib.ObjectId);\n            break;\n        case SOFT :\n            break;\n        case KEEP :\n        case MERGE :\n            throw new java.lang.UnsupportedOperationException();\n    }\n    if ((org.eclipse.jgit.api.ResetCommand.ResetType) != (org.eclipse.jgit.api.ResetCommand.ResetType.org.eclipse.jgit.api.ResetCommand.ResetType)) {\n        if (boolean)\n            org.eclipse.jgit.api.ResetCommand.resetMerge();\n        else if (boolean)\n            org.eclipse.jgit.api.ResetCommand.resetCherryPick();\n        else if (boolean)\n            org.eclipse.jgit.api.ResetCommand.resetRevert();\n        else if ((org.eclipse.jgit.lib.Repository.readSquashCommitMsg()) != null)\n            org.eclipse.jgit.lib.Repository.writeSquashCommitMsg(null);\n        \n    } \n    org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.lib.Ref>.setCallable(false);\n    return org.eclipse.jgit.lib.Ref;\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.io.IOException);\n}"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"8ba15611-c851-11e4-b71e-833eeeb972c8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BinaryDelta:179","type":"CtIfImpl","sourcecode":"if ((int & 2) != 0)\n    int |= ((byte[][int++]) & 255) << 8;\n"},"status":-1},{"failures":[],"tindex":"8ba15612-c851-11e4-b71e-37aae13c86cc","variableMapping":{"p":"emailB","bs":"raw","this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectId:241","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[], (int + 24))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:776","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.nextLF(byte[], int, '>')"},"status":-2},{"failures":[],"tindex":"8ba17d23-c851-11e4-b71e-57610f71dd96","variableMapping":{"path":"org.eclipse.jgit.transport.SideBandInputStream.PFX_REMOTE"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.filter.PathFilter:77","type":"CtWhileImpl","sourcecode":"while (java.lang.String.endsWith(\"/\"))\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandInputStream:244","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ProgressMonitor.beginTask(((org.eclipse.jgit.transport.SideBandInputStream.java.lang.String) + (java.lang.String)), int)"},"status":-2},{"failures":[],"tindex":"8ba17d24-c851-11e4-b71e-7b8f19d137b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.MyersDiff:449","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.diff.MyersDiff<S>.MiddleEdit.EditPaths.getIndex(int, int)"},"status":-2},{"failures":[21,0,1,2,23,20],"tindex":"8ba17d25-c851-11e4-b71e-2709f4ce7c7d","variableMapping":{"s":"r"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:137","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0)\n    java.lang.StringBuilder.append(',');\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.PathFilterGroup:274","type":"CtForEachImpl","sourcecode":"for (byte[] byte[] : org.eclipse.jgit.treewalk.filter.ByteArraySet.toArray()) {\n    if (!boolean) {\n        java.lang.StringBuilder.append(\" OR \");\n    } \n    java.lang.StringBuilder.append(org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.decode(byte[]));\n    boolean = false;\n}"},"status":-1},{"failures":[23,21],"tindex":"8ba17d26-c851-11e4-b71e-d70028021533","variableMapping":{"adv":"adv"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:809","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.RefAdvertiser.setDerefTags(true)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:959","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.RefAdvertiser.end()"},"status":-2},{"failures":[],"tindex":"8ba17d27-c851-11e4-b71e-956762ce75fd","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:410","type":"CtLocalVariableImpl","sourcecode":"long long = -1L"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:954","type":"CtLocalVariableImpl","sourcecode":"long long = int & 15"},"status":-2},{"failures":[23,24,25,26,27,28,29,30,31,21,20,0,1,2],"tindex":"8ba17d28-c851-11e4-b71e-f9751a7ca830","variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CheckoutCommand:206","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.lib.Ref>.setCallable(false)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CreateBranchCommand:321","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.lib.Ref>.checkCallable()"},"status":-1},{"failures":[],"tindex":"8ba17d29-c851-11e4-b71e-6b5c6cc6ac0a","variableMapping":{"this":"countingMonitor"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ThreadSafeProgressMonitor:97","type":"CtIfImpl","sourcecode":"if (!org.eclipse.jgit.lib.ThreadSafeProgressMonitor.(isMainThread()))\n    throw new java.lang.IllegalStateException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1823","type":"CtIfImpl","sourcecode":"if ((boolean) && (!(java.util.Set<org.eclipse.jgit.revwalk.RevTree>.isEmpty()))) {\n    org.eclipse.jgit.internal.storage.pack.BaseSearch org.eclipse.jgit.internal.storage.pack.BaseSearch = new org.eclipse.jgit.internal.storage.pack.BaseSearch(org.eclipse.jgit.lib.ProgressMonitor , java.util.Set<org.eclipse.jgit.revwalk.RevTree> , org.eclipse.jgit.lib.ObjectIdOwnerMap<org.eclipse.jgit.internal.storage.pack.ObjectToPack> , java.util.List<org.eclipse.jgit.internal.storage.pack.ObjectToPack> , org.eclipse.jgit.lib.ObjectReader);\n    org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject;\n    while ((org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.ObjectWalk.nextObject()) != null) {\n        if (org.eclipse.jgit.revwalk.RevObject.has(org.eclipse.jgit.revwalk.RevFlag.org.eclipse.jgit.revwalk.RevFlag))\n            continue;\n        \n        if (org.eclipse.jgit.internal.storage.pack.PackWriter.exclude(org.eclipse.jgit.revwalk.RevObject))\n            continue;\n        \n        int int = org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode();\n        byte[] byte[] = org.eclipse.jgit.revwalk.ObjectWalk.getPathBuffer();\n        int int = org.eclipse.jgit.revwalk.ObjectWalk.getPathLength();\n        org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(org.eclipse.jgit.revwalk.RevObject.getType(), byte[], int, int);\n        org.eclipse.jgit.internal.storage.pack.PackWriter.addObject(org.eclipse.jgit.revwalk.RevObject, int);\n        org.eclipse.jgit.lib.ProgressMonitor.update(1);\n    }\n} else {\n    org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject;\n    while ((org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.ObjectWalk.nextObject()) != null) {\n        if (org.eclipse.jgit.revwalk.RevObject.has(org.eclipse.jgit.revwalk.RevFlag.org.eclipse.jgit.revwalk.RevFlag))\n            continue;\n        \n        if (org.eclipse.jgit.internal.storage.pack.PackWriter.exclude(org.eclipse.jgit.revwalk.RevObject))\n            continue;\n        \n        org.eclipse.jgit.internal.storage.pack.PackWriter.addObject(org.eclipse.jgit.revwalk.RevObject, org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode());\n        org.eclipse.jgit.lib.ProgressMonitor.update(1);\n    }\n}"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.internal.storage.file.T0004_PackReaderTest.test004_lookupDeltifiedObject":22,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_Defaults":19,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":15,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":13,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_TooFewFiles":18,"org.eclipse.jgit.api.BranchCommandTest.testRenameLocalBranch":28,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":21,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":14,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":6,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":12,"org.eclipse.jgit.api.BranchCommandTest.testDelete":30,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":10,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":9,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":11,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":8,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":7,"org.eclipse.jgit.api.BranchCommandTest.testCreateFromCommit":24,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":5,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":16,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":4,"org.eclipse.jgit.api.BranchCommandTest.testCreateForce":25,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.transport.PackParserTest.test1":3,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigLocalBranch":29,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":23,"org.eclipse.jgit.api.BranchCommandTest.testCreateAndList":27,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":31,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":26,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_TooSmallLimit":17,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":20}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

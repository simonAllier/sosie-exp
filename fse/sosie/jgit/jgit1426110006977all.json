[{"failures":[],"tindex":"2f503788-c837-11e4-b838-6d6136c44385","variableMapping":{"d":"unexpectedEofInPack"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.CachedObjectDirectory:99","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) != 2)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:497","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.io.EOFException(org.eclipse.jgit.internal.storage.dfs.DfsText.org.eclipse.jgit.internal.storage.dfs.DfsText.get().java.lang.String);\n"},"status":-2},{"failures":[],"tindex":"2f503789-c837-11e4-b838-55bde9c57cf7","variableMapping":{"this":"pm"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ThreadSafeProgressMonitor:97","type":"CtIfImpl","sourcecode":"if (!org.eclipse.jgit.lib.ThreadSafeProgressMonitor.(isMainThread()))\n    throw new java.lang.IllegalStateException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:118","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ProgressMonitor.endTask()"},"status":-2},{"failures":[],"tindex":"2f50378a-c837-11e4-b838-cd18e9e94da8","variableMapping":{"gitDir":"remoteGitDir"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.storage.file.FileRepositoryBuilder:110","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.storage.file.FileRepositoryBuilder().setGitDir(java.io.File).readEnvironment().build()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportLocal:172","type":"CtTryImpl","sourcecode":"try {\n    return new org.eclipse.jgit.lib.RepositoryBuilder().setGitDir(java.io.File).build();\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish , org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n}"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"2f50378b-c837-11e4-b838-79e43634cbbc","variableMapping":{"pos":"min","n":"renameScore"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:690","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    long += int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityRenameDetector:268","type":"CtIfImpl","sourcecode":"if (((long * 100) / long) < (int)) {\n    org.eclipse.jgit.lib.ProgressMonitor.update(1);\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"2f50378c-c837-11e4-b838-4b8f7e9f8d43","variableMapping":{"in":"in","limit":"length","length":"length","this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.IO:101","type":"CtTryImpl","sourcecode":"try {\n    byte[] byte[] = new byte[int];\n    int int = 0;\n    for ( ;  ; ) {\n        int int = java.io.FileInputStream.read(byte[], int, ((byte[].int) - int));\n        if (int <= 0)\n            break;\n        \n        int += int;\n    }\n    if (int == (byte[].int))\n        return byte[];\n    \n    byte[] byte[] = new byte[int];\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], 0, int);\n    return byte[];\n} finally {\n    try {\n        java.io.FileInputStream.close();\n    } catch (java.io.IOException java.io.IOException) {\n    }\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.IO:141","type":"CtTryImpl","sourcecode":"try {\n    long long = java.lang.Math.java.lang.Math.max(java.io.File.length(), 1);\n    if (long > int)\n        throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File));\n    \n    byte[] byte[] = new byte[((int)(long))];\n    int int = 0;\n    for ( ;  ; ) {\n        if ((byte[].int) == int) {\n            if ((byte[].int) == int) {\n                int int = java.io.FileInputStream.read();\n                if (int < 0)\n                    break;\n                \n                throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File));\n            } \n            byte[] byte[] = new byte[java.lang.Math.java.lang.Math.min(((byte[].int) * 2), int)];\n            java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], 0, int);\n            byte[] = byte[];\n        } \n        int int = java.io.FileInputStream.read(byte[], int, ((byte[].int) - int));\n        if (int < 0)\n            break;\n        \n        int += int;\n    }\n    if (int < (byte[].int)) {\n        byte[] byte[] = new byte[int];\n        java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], 0, int);\n        byte[] = byte[];\n    } \n    return byte[];\n} finally {\n    try {\n        java.io.FileInputStream.close();\n    } catch (java.io.IOException java.io.IOException) {\n    }\n}"},"status":-2},{"failures":[4,5,0,1,2,3],"tindex":"2f50378d-c837-11e4-b838-49378f11ff28","variableMapping":{"sb":"b"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:246","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawCharSequence:94","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.eclipse.jgit.util.RawCharSequence.charAt(int))"},"status":-1},{"failures":[],"tindex":"2f50378e-c837-11e4-b838-a79e743e52ff","variableMapping":{"path":"newPath"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.filter.PathFilter:77","type":"CtWhileImpl","sourcecode":"while (java.lang.String.endsWith(\"/\"))\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffFormatter:1069","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.eclipse.jgit.lib.Constants.org.eclipse.jgit.lib.Constants.encode(org.eclipse.jgit.diff.DiffFormatter.org.eclipse.jgit.diff.DiffFormatter.quotePath(((java.lang.String) + (org.eclipse.jgit.diff.DiffEntry.ChangeType == (org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType) ? java.lang.String : java.lang.String)))))"},"status":-2},{"failures":[6,6,7,7,8,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,4,26,27,28,0,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,5,58,59,60,61,62,63,64,1,2,3,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"tindex":"2f505e9f-c837-11e4-b838-23436121d4cf","variableMapping":{"emailB":"ptr","raw":"buf","ptr":"ptr"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:202","type":"CtIfImpl","sourcecode":"if ((int == int) || ((byte[][(int - 1)]) != '<'))\n    return -1;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:423","type":"CtIfImpl","sourcecode":"if ((byte[][++int]) == 0)\n    return ++int;\n"},"status":-1},{"failures":[100,101,5,0,1,2,3,4],"tindex":"2f505ea0-c837-11e4-b838-5b5d8ef66553","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:634","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":-1},{"failures":[4,5,0,1,2,3],"tindex":"2f505ea1-c837-11e4-b838-4d95cdc80dd2","variableMapping":{"cAlg":"remoteUrl"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:248","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    java.lang.String = \"PBEWithMD5AndDES\";\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:294","type":"CtIfImpl","sourcecode":"if ((java.lang.String.charAt(((java.lang.String.length()) - 1))) == '/')\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":89,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":86,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":30,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":44,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":84,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":39,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":18,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":52,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":54,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":43,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":61,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":51,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":26,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":96,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":58,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":21,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":48,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":49,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":94,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":50,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":42,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":70,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":56,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":17,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":69,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":82,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":27,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":83,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":64,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":76,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":81,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":80,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":62,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":60,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":75,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":24,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":23,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":73,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":47,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":91,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":35,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":97,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":20,"org.eclipse.jgit.api.GitConstructionTest.testWrap":8,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":88,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":9,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":31,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":40,"org.eclipse.jgit.api.GitConstructionTest.testOpen":7,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":57,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":29,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":53,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":72,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":98,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":32,"org.eclipse.jgit.ignore.IgnoreNodeTest.testRepeatedNegationInDifferentFiles4":101,"org.eclipse.jgit.ignore.IgnoreNodeTest.testRepeatedNegationInDifferentFiles3":100,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":37,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":34,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":59,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":28,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":33,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":92,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":93,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":55,"org.eclipse.jgit.transport.BundleWriterTest.testWriteHEAD":66,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":90,"org.eclipse.jgit.api.GitConstructionTest.testClose":6,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.internal.storage.file.AbbreviationTest.testAbbreviatePackedBlob":65,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":36,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":16,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":15,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":95,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":19,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":38,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":67,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":79,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":10,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":78,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":77,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":12,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":13,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":45,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":85,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":25,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":41,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":87,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":46,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":63,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":14,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":22,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":68,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":99,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":74,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":71,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":11}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

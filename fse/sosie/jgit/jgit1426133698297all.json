[{"failures":[0,1,2,3,4,5],"tindex":"594996e6-c86e-11e4-b185-7b08b260dbed","variableMapping":{"org.eclipse.jgit.lib.Constants.OBJ_BAD":"ffMask","thisMode":"ffMask","this":"mMode"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:376","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.fromBits(int).getObjectType()) == (org.eclipse.jgit.lib.Constants.int))\n    throw new org.eclipse.jgit.errors.CorruptObjectException((\"invalid mode \" + int));\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:591","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.treewalk.CanonicalTreeParser != null)\n    int |= org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode) ? 13 : 15;\n"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,3,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,4,116,5],"tindex":"59515f17-c86e-11e4-b185-6f9da094b1e8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:779","type":"CtWhileImpl","sourcecode":"while ((java.lang.String = java.io.BufferedReader.readLine()) != null) {\n    if ((java.lang.String.charAt(0)) == '#') {\n        if (java.lang.String.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.java.lang.String)) {\n            java.lang.String = java.lang.String.substring(org.eclipse.jgit.internal.storage.file.RefDirectory.java.lang.String.length());\n            boolean = java.lang.String.contains(org.eclipse.jgit.internal.storage.file.RefDirectory.java.lang.String);\n        } \n        continue;\n    } \n    if ((java.lang.String.charAt(0)) == '^') {\n        if (org.eclipse.jgit.lib.Ref == null)\n            throw new java.io.IOException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        \n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromString(java.lang.String.substring(1));\n        org.eclipse.jgit.lib.Ref = new org.eclipse.jgit.lib.ObjectIdRef.PeeledTag(org.eclipse.jgit.lib.Ref.Storage.org.eclipse.jgit.lib.Ref.Storage , org.eclipse.jgit.lib.Ref.getName() , org.eclipse.jgit.lib.Ref.getObjectId() , org.eclipse.jgit.lib.ObjectId);\n        org.eclipse.jgit.util.RefList.Builder<org.eclipse.jgit.lib.Ref>.set(((org.eclipse.jgit.util.RefList.Builder<org.eclipse.jgit.lib.Ref>.size()) - 1), org.eclipse.jgit.lib.Ref);\n        continue;\n    } \n    int int = java.lang.String.indexOf(' ');\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromString(java.lang.String.substring(0, int));\n    java.lang.String java.lang.String = org.eclipse.jgit.internal.storage.file.RefDirectory.org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String, (int + 1), java.lang.String.length());\n    org.eclipse.jgit.lib.ObjectIdRef org.eclipse.jgit.lib.ObjectIdRef;\n    if (boolean)\n        org.eclipse.jgit.lib.ObjectIdRef = new org.eclipse.jgit.lib.ObjectIdRef.PeeledNonTag(org.eclipse.jgit.lib.Ref.Storage.org.eclipse.jgit.lib.Ref.Storage , java.lang.String , org.eclipse.jgit.lib.ObjectId);\n    else\n        org.eclipse.jgit.lib.ObjectIdRef = new org.eclipse.jgit.lib.ObjectIdRef.Unpeeled(org.eclipse.jgit.lib.Ref.Storage.org.eclipse.jgit.lib.Ref.Storage , java.lang.String , org.eclipse.jgit.lib.ObjectId);\n    \n    if ((org.eclipse.jgit.lib.Ref != null) && (org.eclipse.jgit.lib.RefComparator.(org.eclipse.jgit.lib.RefComparator.compareTo(org.eclipse.jgit.lib.Ref, org.eclipse.jgit.lib.ObjectIdRef)) > 0))\n        boolean = true;\n    \n    org.eclipse.jgit.util.RefList.Builder<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.ObjectIdRef);\n    org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.ObjectIdRef;\n}"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"59515f18-c86e-11e4-b185-4f2e6e5573f1","variableMapping":{"java.lang.Integer.MAX_VALUE":"p"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.NameRevCommand:351","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.Integer.int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexV1:147","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.internal.storage.file.PackIndexV1.org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"59515f19-c86e-11e4-b185-93dcd5213766","variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:632","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.(getGitDir()) == null)\n    org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.setGitDir(org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.getWorkTree().getParentFile());\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:449","type":"CtIfImpl","sourcecode":"if (java.util.Collection<java.io.File> != null) {\n    for (java.io.File java.io.File : java.util.Collection<java.io.File>)\n        org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.addCeilingDirectory(java.io.File);\n} "},"status":-1},{"failures":[0,1,2,5,3,117,118,119,4],"tindex":"59515f1a-c86e-11e4-b185-6b476289405d","variableMapping":{"bos":"o"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.storage.file.FileBasedConfig:196","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(191)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.DiffFormatter:1092","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.eclipse.jgit.lib.Constants.org.eclipse.jgit.lib.Constants.encodeASCII(\"new mode \"))"},"status":-1},{"failures":[],"tindex":"59515f1b-c86e-11e4-b185-5529387e9797","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.RefSpec:473","type":"CtAssignmentImpl","sourcecode":"int = (int * 31) + (org.eclipse.jgit.transport.RefSpec.getDestination().hashCode())"},"status":-2},{"failures":[],"tindex":"5952979c-c86e-11e4-b185-71846582db0b","variableMapping":{"s":"org.eclipse.jgit.lib.Constants.OBJ_TREE"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportSftp:350","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    return ;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BaseSearch:113","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    for (org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId : org.eclipse.jgit.lib.ObjectId[])\n        org.eclipse.jgit.internal.storage.pack.BaseSearch.add(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.Constants.int, int);\n    return ;\n} "},"status":-2},{"failures":[],"tindex":"5952e5bd-c86e-11e4-b185-f52b0d8642b8","variableMapping":{"delta":"length"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:315","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.lang.ArrayIndexOutOfBoundsException(int);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:499","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.ByteArrayWindow != null) {\n    org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.file.LocalObjectToPack, long);\n    org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream, long, ((int)(long)), null);\n} else if (long <= (byte[].int)) {\n    if (!boolean) {\n        long long = long;\n        long long = long;\n        while (long > 0) {\n            final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n            org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.file.WindowCursor);\n            long += int;\n            long -= int;\n        }\n    } \n    org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.file.LocalObjectToPack, long);\n    org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[], 0, ((int)(long)));\n} else {\n    org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.file.LocalObjectToPack, long);\n    long long = long;\n    long long = long;\n    while (long > 0) {\n        final int int = java.lang.Math.((int)(java.lang.Math.min(long, byte[].int)));\n        org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, int, org.eclipse.jgit.internal.storage.file.WindowCursor);\n        if (boolean)\n            java.util.zip.CRC32.update(byte[], 0, int);\n        \n        org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[], 0, int);\n        long += int;\n        long -= int;\n    }\n    if (boolean && ((java.util.zip.CRC32.getValue()) != long)) {\n        throw new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(org.eclipse.jgit.internal.storage.file.LocalObjectToPack.long), org.eclipse.jgit.internal.storage.file.PackFile.getPackFile()));\n    } \n}"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"5952e5be-c86e-11e4-b185-079388570ed0","variableMapping":{"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.IS_SUPPORTED":"eof"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:104","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandInputStream:176","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[0,1,2,5,3,120,4],"tindex":"5952e5bf-c86e-11e4-b185-a317ebd4f499","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CheckoutCommand:670","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.api.CheckoutResult) == null)\n    return org.eclipse.jgit.api.CheckoutResult.org.eclipse.jgit.api.CheckoutResult;\n"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefDetachedUnbornHead":73,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadRightLog":6,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_PackedWithPeeled":11,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test028_LockPackedRef":86,"org.eclipse.jgit.lib.T0002_TreeTest.test009_SymlinkAndGitlink":33,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockFrom":44,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testTwoBranches":105,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithPackedPrefixNameExists":36,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchHasPreviousLog":42,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefTag":31,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteFastForward":66,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithPackedPrefixOfExisting":67,"org.eclipse.jgit.lib.RepositoryResolveTest.testParseLookupPath":26,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testTag":97,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_SymrefToPacked":9,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefLockFailureWrongOldValue":56,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNoCacheObjectIdSubclass":40,"org.eclipse.jgit.lib.RepositoryResolveTest.testParseGitDescribeOutput":28,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testIntoOtherThanMaster":103,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesNoWildcardNoTracking":90,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_ok":110,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteForce":37,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testIsNameConflicting":16,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testLooseDelete":47,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.dontPackHEAD_nonBare":77,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLooseAndItsDirectory":49,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRefsCacheAfterUpdateLooseOnly":61,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":76,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameCurrentBranch":43,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.whileRefLockedRefNotPackedNoError":79,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsWithFooters":106,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeaderForRenameModeChange":117,"org.eclipse.jgit.merge.SimpleMergeTest.testTheirs":115,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockTo":65,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testIntoHeadOtherThanMaster":101,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay":111,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForward":69,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.dontPackHEAD_bare":78,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForwardWithCheck2":53,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchAlsoInPack":63,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutWithConflict":120,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":35,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_AllPacked1":13,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefBlob":29,"org.eclipse.jgit.lib.RefTest.testResolvedNamesBranch":20,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_PackedNotPeeled_Sorted":14,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefTree":30,"org.eclipse.jgit.lib.RefTest.testReadAllIncludingSymrefs":17,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteHEADreferencedRef":57,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testThreeBranches":102,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockHEAD":59,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteNotFound":38,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":81,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_disjointhistories":114,"org.eclipse.jgit.lib.RepositoryResolveTest.testHEAD":24,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsWithFooterlikeLineInBody":95,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.lib.RefTest.testReadSimplePackedRefSameRepo":18,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithLoosePrefixNameExists":71,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesTwoRefSpecs":88,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_TagsOnly_AllPacked":10,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesTrackingRef":89,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":85,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockFrom":58,"org.eclipse.jgit.merge.SimpleMergeTest.testOurs":112,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_PackedNotPeeled_WrongSort":15,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_conflict":113,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testCommit":108,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForwardWithCheck1":52,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesWildcardNoTracking":93,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":34,"org.eclipse.jgit.lib.RepositoryResolveTest.testDistance_past_root":25,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsNoFooter":99,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission2avoided":46,"org.eclipse.jgit.lib.RepositoryResolveTest.testRef_refname":32,"org.eclipse.jgit.api.GitConstructionTest.testClose":116,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":3,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testIntoSymbolicRefHeadPointingToMaster":107,"org.eclipse.jgit.lib.RefTest.testReadLooseRef":21,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testOneBranch":109,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsNoFooterNoLineBreak":96,"org.eclipse.jgit.lib.RefTest.testReadSymRefToPacked":23,"org.eclipse.jgit.lib.RepositoryResolveTest.invalidNames":27,"org.eclipse.jgit.lib.RefTest.testReadLoosePackedRef":22,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithLoosePrefixOfExisting":62,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesNoWildcardNoDestination":91,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":87,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_GitLink":118,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisToLockFrom":54,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testMixed":100,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadLineWithMissingComment":8,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisToLockTo":45,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":75,"org.eclipse.jgit.transport.TransportTest.testLocalTransportFetchWithoutLocalRepository":92,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefLockFailureLocked":48,"org.eclipse.jgit.lib.RefTest.testReadSymRefToLoosePacked":19,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testPullWithUri":98,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testNoLog":7,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefNoChange":50,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.test_repack":12,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLoosePackedRejected":41,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRefsCacheAfterUpdate":68,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":83,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteHead":64,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testRemoteBranch":104,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.looseRefPacked":80,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":84,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":74,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission1avoided":72,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockTo":55,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefDetached":60,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchNoPreviousLog":70,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":94,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLoosePacked":39,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeaderWithoutIndexLine":119,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteWithoutHead":51,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":82}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

[{"failures":[0,1,2,3,4,5],"tindex":"3795753b-c853-11e4-8322-b77b0c74d013","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.Candidate:138","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag)"},"status":-1},{"failures":[6,7,5,0,1,2,3,4],"tindex":"37959c4c-c853-11e4-8322-9f4d9c94699b","variableMapping":{"flags":"ai","org.eclipse.jgit.revwalk.RevObject.PARSED":"ai"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevBlob:76","type":"CtOperatorAssignmentImpl","sourcecode":"int |= org.eclipse.jgit.revwalk.RevObject.int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.RawTextComparator:176","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"37959c4d-c853-11e4-8322-174a949f18da","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.notes.FanoutBucket:161","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectId:91","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"37959c4e-c853-11e4-8322-7d84cc7fbbc0","variableMapping":{"n":"name"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportAmazonS3:272","type":"CtIfImpl","sourcecode":"if ((!(java.lang.String.startsWith(\"pack-\"))) || (!(java.lang.String.endsWith(\".pack\"))))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:435","type":"CtTryImpl","sourcecode":"try {\n    java.io.InputStream = org.eclipse.jgit.gitrepo.RepoCommand.IncludedFileReader.readIncludeFile(java.lang.String);\n} catch (java.lang.Exception java.lang.Exception) {\n    throw new org.xml.sax.SAXException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String, java.lang.String) , java.lang.Exception);\n}"},"status":-2},{"failures":[],"tindex":"37959c4f-c853-11e4-8322-2f3dc6c8807f","variableMapping":{"org.eclipse.jgit.treewalk.AbstractTreeIterator.zeroid":"buf"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheIterator:170","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.treewalk.AbstractTreeIterator.byte[]"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:413","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":-2},{"failures":[8,9,10,11,12,0,1,2,3,4,5,13,14,15],"tindex":"37959c50-c853-11e4-8322-eb3ecb1f0613","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.NoteParser:156","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:93","type":"CtReturnImpl","sourcecode":"return ((((((((byte[][0]) == 'g') && ((byte[][1]) == 'i')) && ((byte[][2]) == 't')) && ((byte[][3]) == 'd')) && ((byte[][4]) == 'i')) && ((byte[][5]) == 'r')) && ((byte[][6]) == ':')) && ((byte[][7]) == ' ')"},"status":-1},{"failures":[0,1,16,17,18,19,20,21,22,5,2,3,4],"tindex":"37959c51-c853-11e4-8322-0bd4a60c7b89","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.FanoutBucket:161","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher:72","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,0,61,62,1,63,64,65,66,2,3,4,5],"tindex":"37959c52-c853-11e4-8322-b9e94312a148","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BatchRefUpdate:296","type":"CtTryImpl","sourcecode":"try {\n    if ((org.eclipse.jgit.transport.ReceiveCommand.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result)) {\n        org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk);\n        org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.BatchRefUpdate.newUpdate(org.eclipse.jgit.transport.ReceiveCommand);\n        SWITCH : switch (org.eclipse.jgit.transport.ReceiveCommand.getType()) {\n            case DELETE :\n                break;\n            case UPDATE :\n            case UPDATE_NONFASTFORWARD :\n                org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.BatchRefUpdate.newUpdate(org.eclipse.jgit.transport.ReceiveCommand);\n                org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk));\n                break;\n            case CREATE :\n                for (java.lang.String java.lang.String : org.eclipse.jgit.lib.BatchRefUpdate.org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(org.eclipse.jgit.transport.ReceiveCommand.getRefName())) {\n                    if (java.util.Collection<java.lang.String>.contains(java.lang.String)) {\n                        org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result);\n                        break SWITCH;\n                    } \n                }\n                if (java.util.Collection<java.lang.String>.contains(org.eclipse.jgit.transport.ReceiveCommand.getRefName())) {\n                    org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result);\n                    break SWITCH;\n                } \n                org.eclipse.jgit.lib.RefUpdate.setCheckConflicting(false);\n                org.eclipse.jgit.lib.BatchRefUpdate.org.eclipse.jgit.lib.BatchRefUpdate.addRefToPrefixes(java.util.Collection<java.lang.String>, org.eclipse.jgit.transport.ReceiveCommand.getRefName());\n                java.util.Collection<java.lang.String>.add(org.eclipse.jgit.transport.ReceiveCommand.getRefName());\n                org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk));\n        }\n    } \n} catch (java.io.IOException java.io.IOException) {\n    org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result, java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.IOException.getMessage()));\n} finally {\n    org.eclipse.jgit.lib.ProgressMonitor.update(1);\n}"},"status":-1},{"failures":[0,1,5,2,3,4],"tindex":"37959c53-c853-11e4-8322-f785867981db","variableMapping":{"result":"result","status":"result"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.TrackingRefUpdate:155","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.Result"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefUpdate:495","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result"},"status":-1},{"failures":[],"tindex":"37959c54-c853-11e4-8322-696615b1f69a","variableMapping":{"pckOut":"pckOut"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:910","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PacketLineOut.writeString(\"NAK\\n\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BaseReceivePack:1030","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PacketLineOut.setFlushOnEnd(false)"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.FileRepositoryBuilderTest.absoluteGitDirRef":15,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":64,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":58,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":56,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":34,"org.eclipse.jgit.ignore.IgnoreNodeTest.testRepeatedNegationInDifferentFiles2":17,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2,"org.eclipse.jgit.ignore.IgnoreNodeTest.testRepeatedNegationInDifferentFiles4":19,"org.eclipse.jgit.transport.TestProtocolTest.testUploadPackFactory":37,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":57,"org.eclipse.jgit.ignore.IgnoreNodeTest.testRepeatedNegationInDifferentFiles3":18,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":1,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":60,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":47,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":51,"org.eclipse.jgit.submodule.SubmoduleWalkTest.repositoryWithRootLevelSubmoduleRelativeRef":9,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":46,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":29,"org.eclipse.jgit.internal.storage.file.FileRepositoryBuilderTest.relativeGitDirRef":14,"org.eclipse.jgit.submodule.SubmoduleWalkTest.repositoryWithRootLevelSubmoduleAbsoluteRef":10,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateConflictThanksToDelete":24,"org.eclipse.jgit.diff.RawTextIgnoreTrailingWhitespaceTest.testEqualsWithoutWhitespace":6,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateNonFastForwardDoesNotDoExpensiveMergeCheck":27,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":66,"org.eclipse.jgit.attributes.AttributesNodeDirCacheIteratorTest.testRules":22,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":12,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":53,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":65,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":48,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":33,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":43,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":28,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.transport.TestProtocolTest.testReceivePackFactory":38,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":55,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testCreateBranchAtHiddenCommitFails":31,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateSimpleForce":23,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":41,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateConflict":26,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":45,"org.eclipse.jgit.transport.TestProtocolTest.testPush":36,"org.eclipse.jgit.ignore.IgnoreNodeTest.testNegateAllExceptJavaInSrc":20,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":39,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":42,"org.eclipse.jgit.ignore.IgnoreNodeTest.testNegation":21,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":62,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":59,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateSimpleNoForce":25,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":44,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTag":52,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":8,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":30,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":50,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":63,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":11,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":61,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":40,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":49,"org.eclipse.jgit.diff.RawTextIgnoreTrailingWhitespaceTest.testEqualsWithWhitespace":7,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testFilterHidesPrivate":32,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":54,"org.eclipse.jgit.attributes.AttributesNodeWorkingTreeIteratorTest.testRules":16,"org.eclipse.jgit.transport.TestProtocolTest.testFetch":35,"org.eclipse.jgit.internal.storage.file.FileRepositoryBuilderTest.scanWithGitDirRef":13}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

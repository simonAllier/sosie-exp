[{"failures":[0,1,2,3,4,5],"tindex":"c9186cc9-c84f-11e4-8f0c-b330740942a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TrackingRefUpdate:161","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.transport.TrackingRefUpdate.Command.decode(org.eclipse.jgit.transport.ReceiveCommand.Result)"},"status":-1},{"failures":[],"tindex":"c91893da-c84f-11e4-8f0c-9d7fad6758ea","variableMapping":{"org.eclipse.jgit.internal.storage.file.GC.PRUNE_EXPIRE_DEFAULT":"unsupportedPackVersion","pruneExpireStr":"unsupportedPackVersion"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.GC:312","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    java.lang.String = org.eclipse.jgit.internal.storage.file.GC.java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:686","type":"CtIfImpl","sourcecode":"if ((long != 2) && (long != 3))\n    throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.java.lang.Long.valueOf(long)));\n"},"status":-2},{"failures":[],"tindex":"c91893db-c84f-11e4-8f0c-9354e36a98ad","variableMapping":{"oe":"toAdd","java.lang.Integer.MAX_VALUE":"i"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexWriterV1:64","type":"CtReturnImpl","sourcecode":"return ((org.eclipse.jgit.transport.PackedObjectInfo.getOffset()) >>> 1) < (java.lang.Integer.int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObjectCache:129","type":"CtIfImpl","sourcecode":"if (java.util.concurrent.atomic.AtomicReferenceArray<org.eclipse.jgit.lib.ObjectId>.compareAndSet(int, null, org.eclipse.jgit.lib.AnyObjectId.copy()))\n    return true;\nelse\n    continue;\n"},"status":-2},{"failures":[],"tindex":"c91893dc-c84f-11e4-8f0c-6fe0f0703101","variableMapping":{"len":"length"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:1151","type":"CtIfImpl","sourcecode":"if (int == 0)\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackIndex:149","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[].int) ; int++)\n    if ((byte[][int]) != (byte[][int]))\n        return false;\n    "},"status":-2},{"failures":[1,2,3,4,0,6,5,7,8],"tindex":"c91893dd-c84f-11e4-8f0c-99b08f274390","variableMapping":{"homePath":"path","homeDrive":"path"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.FS_Win32:142","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    return new java.io.File(java.lang.String , java.lang.String);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:702","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.safeFS().resolve(org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.getGitDir(), java.lang.String).getCanonicalFile()"},"status":-1},{"failures":[],"tindex":"c91893de-c84f-11e4-8f0c-35363e4fa92e","variableMapping":{"s":"refName","i":"i"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher:75","type":"CtLocalVariableImpl","sourcecode":"char char = java.lang.String.charAt(int)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:1167","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.String.charAt(int)"},"status":-2},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"c91893df-c84f-11e4-8f0c-4f605271913a","variableMapping":{"this":"this","raw":"raw","end":"end","ptr":"ptr"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:487","type":"CtSwitchImpl","sourcecode":"switch (int - int) {\n    case 1 :\n        throw new org.eclipse.jgit.errors.CorruptObjectException(\"invalid name \\'.\\'\");\n    case 2 :\n        if ((byte[][(int + 1)]) == '.')\n            throw new org.eclipse.jgit.errors.CorruptObjectException(\"invalid name \\'..\\'\");\n        \n        break;\n    case 4 :\n        if (org.eclipse.jgit.lib.ObjectChecker.org.eclipse.jgit.lib.ObjectChecker.isGit(byte[], (int + 1)))\n            throw new org.eclipse.jgit.errors.CorruptObjectException(java.lang.String.java.lang.String.format(\"invalid name \\'%s\\'\", org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.decode(byte[], int, int)));\n        \n        break;\n    default :\n        if (((int - int) > 4) && org.eclipse.jgit.lib.ObjectChecker.(org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[], (int + 1), int)))\n            throw new org.eclipse.jgit.errors.CorruptObjectException(java.lang.String.java.lang.String.format(\"invalid name \\'%s\\'\", org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.decode(byte[], int, int)));\n        \n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:506","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ObjectChecker.org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[], int, int)) {\n    throw new org.eclipse.jgit.errors.CorruptObjectException(java.lang.String.java.lang.String.format(\"invalid name \\'%s\\'\", org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.decode(byte[], int, int)));\n} "},"status":-1},{"failures":[12,15,17,18,19,20],"tindex":"c91893e0-c84f-11e4-8f0c-b76946cdcca0","variableMapping":{"path":"startPointOrHead","ref":"startPointOrHead","repo":"repo"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:220","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(((java.lang.String + \":\") + java.lang.String))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CreateBranchCommand:283","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(java.lang.String)"},"status":-1},{"failures":[1,2,3,4,0,5],"tindex":"c91893e1-c84f-11e4-8f0c-33690b4d2d1b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.StrategySimpleTwoWayInCore:162","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId = null"},"status":-1},{"failures":[1,2,3,4,0,5],"tindex":"c91893e2-c84f-11e4-8f0c-e5c16442f38a","variableMapping":{"h":"flag","org.eclipse.jgit.lib.ObjectIdOwnerMap.SEGMENT_SHIFT":"flag"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectIdOwnerMap:198","type":"CtOperatorAssignmentImpl","sourcecode":"int >>>= org.eclipse.jgit.lib.ObjectIdOwnerMap.int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:310","type":"CtOperatorAssignmentImpl","sourcecode":"int &= ~((int & (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int)) << (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int))"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":9,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":20,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":3,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test000_openrepo_default_absolute_workdirconfig":7,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":11,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":16,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":13,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":15,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenMissing":19,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":2,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":1,"org.eclipse.jgit.internal.storage.file.RepositorySetupWorkDirTest.testNotBare_CreateRepositoryFromGitDirOnlyWithWorktreeConfig":6,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":14,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":18,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":4,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":5,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test000_openrepo_default_relative_workdirconfig":8,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":0,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":17,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":10,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestMissingThenSymlink":12}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

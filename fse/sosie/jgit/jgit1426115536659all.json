[{"failures":[0,1,2,3,4,5],"tindex":"0f6bc626-c844-11e4-bb5b-cfe2ab5493ea","variableMapping":{"sb":"s"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:246","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TextProgressMonitor:94","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(int)"},"status":-1},{"failures":[],"tindex":"0f6bed37-c844-11e4-bb5b-532d59e1600c","variableMapping":{"txt":"prefix"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.attributes.AttributesNode:96","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.trim()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RefMap:286","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(java.lang.String.length())"},"status":-2},{"failures":[4,0,1,2,6,7,3,5],"tindex":"0f6bed38-c844-11e4-bb5b-dd35438ddb0b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RefMap:265","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('[')"},"status":-1},{"failures":[0,1,2,3,8,9,10,11,12,13,14,15,16,4,5,17,18,19],"tindex":"0f6bed39-c844-11e4-bb5b-5ba53a56fd05","variableMapping":{"bs":"b","as":"e","be":"b","ae":"e"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.RawTextComparator:67","type":"CtIfImpl","sourcecode":"if ((int - int) != (int - int))\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevCommit:477","type":"CtWhileImpl","sourcecode":"while (int < int)\n    if ((byte[][int++]) == '\\n')\n        return true;\n    "},"status":-1},{"failures":[3,5,4,0,1,2],"tindex":"0f6bed3a-c844-11e4-bb5b-cfd5842f67b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:869","type":"CtIfImpl","sourcecode":"if ((java.lang.Integer.int) <= long)\n    throw new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit();\n"},"status":-1},{"failures":[],"tindex":"0f6bed3b-c844-11e4-bb5b-eb04f84c8730","variableMapping":{"p":"org.eclipse.jgit.lib.Constants.OBJ_COMMIT","data":"data","pos":"pos","sz":"pos","curs":"curs","db":"db","typeCode":"org.eclipse.jgit.lib.Constants.OBJ_TAG"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:741","type":"CtIfImpl","sourcecode":"if (byte[] != null)\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\nelse\n    return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:715","type":"CtForImpl","sourcecode":"SEARCH : for ( ;  ; ) {\n    org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n    int int = (byte[][0]) & 255;\n    final int int = (int >> 4) & 7;\n    long long = int & 15;\n    int int = 4;\n    int int = 1;\n    while ((int & 128) != 0) {\n        int = (byte[][int++]) & 255;\n        long += ((long)((int & 127))) << int;\n        int += 7;\n    }\n    switch (int) {\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                if ((org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) || (long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())))\n                    byte[] = org.eclipse.jgit.internal.storage.file.PackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.file.WindowCursor);\n                \n                if (org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) {\n                    int = int;\n                    break SEARCH;\n                } \n                if (byte[] != null)\n                    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n                else\n                    return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n                \n            }\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                int = (byte[][int++]) & 255;\n                long long = int & 127;\n                while ((int & 128) != 0) {\n                    long += 1;\n                    int = (byte[][int++]) & 255;\n                    long <<= 7;\n                    long += int & 127;\n                }\n                long = long - long;\n                org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , int , long);\n                if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                    break SEARCH;\n                \n                org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n                if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                    int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                    byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                    boolean = true;\n                    break SEARCH;\n                } \n                long = long;\n                continue SEARCH;\n            }\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                org.eclipse.jgit.internal.storage.file.PackFile.readFully((long + int), byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n                long long = org.eclipse.jgit.internal.storage.file.PackFile.findDeltaBase(org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromRaw(byte[]));\n                org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , (int + 20) , long);\n                if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                    break SEARCH;\n                \n                org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n                if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                    int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                    byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                    boolean = true;\n                    break SEARCH;\n                } \n                long = long;\n                continue SEARCH;\n            }\n        default :\n            throw new java.io.IOException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.java.lang.Integer.valueOf(int)));\n    }\n}"},"status":-2},{"failures":[],"tindex":"0f6bed3c-c844-11e4-bb5b-5fcb22e915a4","variableMapping":{"r":"org.eclipse.jgit.lib.Constants.R_HEADS"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.RefSpec:353","type":"CtInvocationImpl","sourcecode":"new org.eclipse.jgit.transport.RefSpec(this).expandFromSourceImp(java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CloneCommand:176","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.RefSpec = org.eclipse.jgit.transport.RefSpec.setSourceDestination(((org.eclipse.jgit.lib.Constants.java.lang.String) + \"*\"), java.lang.String)"},"status":-2},{"failures":[],"tindex":"0f6bed3d-c844-11e4-bb5b-5da9cea18a1c","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.MutableObjectId:127","type":"CtThrowImpl","sourcecode":"throw new java.lang.ArrayIndexOutOfBoundsException()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:1575","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.NoWorkTreeException()"},"status":-2},{"failures":[],"tindex":"0f6bed3e-c844-11e4-bb5b-b5f242d8a713","variableMapping":{"pattern":"checkoutUnexpectedResult"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher:56","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Pattern must have leading asterisk: \" + java.lang.String))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CheckoutCommand:303","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.RefUpdate.Result.name()))"},"status":-2},{"failures":[],"tindex":"0f6bed3f-c844-11e4-bb5b-6df3f9967f58","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.GarbageCollectCommand:185","type":"CtReturnImpl","sourcecode":"return new java.util.Properties()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.TransportAmazonS3:185","type":"CtReturnImpl","sourcecode":"return java.util.Properties"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.revwalk.RevCommitParseTest.testParse_ShortLineOnlyEmbeddedAndEndingLF":19,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":8,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveFixupFirstCommitShouldFail":13,"org.eclipse.jgit.util.RefMapTest.testToString_WithPrefix":6,"org.eclipse.jgit.revwalk.RevTagParseTest.testParse_ShortLineOnlyEmbeddedAndEndingLF":16,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.revwalk.RevTagParseTest.testParse_ShortLineOnlyEmbeddedLF":15,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":4,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.util.RefMapTest.testToString_NoPrefix":7,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseEndsIfLastStepIsEdit":10,"org.eclipse.jgit.revwalk.RevCommitParseTest.testParse_GitStyleMessageWithCRLF":17,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":14,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":3,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSquashFirstCommitShouldFail":12,"org.eclipse.jgit.revwalk.RevCommitParseTest.testParse_ShortLineOnlyEmbeddedLF":18,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":9,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":11}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

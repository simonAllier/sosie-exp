[{"failures":[],"tindex":"17e00a92-c868-11e4-9c1a-69071643924b","variableMapping":{"walk":"walk"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:161","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.initializeShallowCommits()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.FetchProcess:211","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.transport.ReceiveCommand org.eclipse.jgit.transport.ReceiveCommand : org.eclipse.jgit.lib.BatchRefUpdate.getCommands()) {\n    org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk);\n    if ((((org.eclipse.jgit.transport.ReceiveCommand.getType()) == (org.eclipse.jgit.transport.ReceiveCommand.Type.org.eclipse.jgit.transport.ReceiveCommand.Type)) && (org.eclipse.jgit.transport.ReceiveCommand instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command)) && (!(((org.eclipse.jgit.transport.TrackingRefUpdate.Command)(org.eclipse.jgit.transport.ReceiveCommand)).canForceUpdate())))\n        org.eclipse.jgit.transport.ReceiveCommand.setResult(org.eclipse.jgit.transport.ReceiveCommand.Result.org.eclipse.jgit.transport.ReceiveCommand.Result);\n    \n}"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"17e031a3-c868-11e4-9c1a-f757f5e15aa4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkRemoteObjectDatabase:459","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"17e031a4-c868-11e4-9c1a-8b402d22f320","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:839","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"This is a combination of (.*) commits\""},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:730","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.decode(java.nio.charset.Charset, byte[], int, (int - 1))"},"status":-2},{"failures":[1,2,3,4,5,6,0],"tindex":"17e031a5-c868-11e4-9c1a-d99046fd0113","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:401","type":"CtIfImpl","sourcecode":"if (boolean) {\n    java.util.zip.CRC32.update(byte[], 0, 20);\n    java.util.zip.CRC32.update(byte[], 0, 20);\n} "},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"17e031a6-c868-11e4-9c1a-0561a34eba3c","variableMapping":{"eb":"idx"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCache:250","type":"CtAssignmentImpl","sourcecode":"int = 4"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RefList:252","type":"CtAssignmentImpl","sourcecode":"int = -(int + 1)"},"status":-1},{"failures":[],"tindex":"17e031a7-c868-11e4-9c1a-51dd22177785","variableMapping":{"bs":"org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH","wantSize":"org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:323","type":"CtIfImpl","sourcecode":"if ((0 < int) && (int < int))\n    int = (int / int) * int;\nelse if (int <= 0)\n    int = int;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleWriter:198","type":"CtTryImpl","sourcecode":"try {\n    final java.util.HashSet<org.eclipse.jgit.lib.ObjectId> java.util.HashSet<org.eclipse.jgit.lib.ObjectId> = new java.util.HashSet<org.eclipse.jgit.lib.ObjectId>();\n    final java.util.HashSet<org.eclipse.jgit.lib.ObjectId> java.util.HashSet<org.eclipse.jgit.lib.ObjectId> = new java.util.HashSet<org.eclipse.jgit.lib.ObjectId>();\n    java.util.HashSet<org.eclipse.jgit.lib.ObjectId>.addAll(java.util.Map<java.lang.String, org.eclipse.jgit.lib.ObjectId>.values());\n    for (final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit : java.util.Set<org.eclipse.jgit.revwalk.RevCommit>)\n        java.util.HashSet<org.eclipse.jgit.lib.ObjectId>.add(org.eclipse.jgit.revwalk.RevCommit.getId());\n    org.eclipse.jgit.internal.storage.pack.PackWriter.setIndexDisabled(true);\n    org.eclipse.jgit.internal.storage.pack.PackWriter.setDeltaBaseAsOffset(true);\n    org.eclipse.jgit.internal.storage.pack.PackWriter.setThin(((java.util.HashSet<org.eclipse.jgit.lib.ObjectId>.size()) > 0));\n    org.eclipse.jgit.internal.storage.pack.PackWriter.setReuseValidatingObjects(false);\n    if ((java.util.HashSet<org.eclipse.jgit.lib.ObjectId>.size()) == 0)\n        org.eclipse.jgit.internal.storage.pack.PackWriter.setTagTargets(java.util.Set<org.eclipse.jgit.lib.ObjectId>);\n    \n    org.eclipse.jgit.internal.storage.pack.PackWriter.preparePack(org.eclipse.jgit.lib.ProgressMonitor, java.util.HashSet<org.eclipse.jgit.lib.ObjectId>, java.util.HashSet<org.eclipse.jgit.lib.ObjectId>);\n    final java.io.Writer java.io.Writer = new java.io.OutputStreamWriter(java.io.OutputStream , org.eclipse.jgit.lib.Constants.java.nio.charset.Charset);\n    java.io.Writer.write(org.eclipse.jgit.transport.TransportBundle.java.lang.String);\n    java.io.Writer.write('\\n');\n    final char[] char[] = new char[org.eclipse.jgit.lib.Constants.int];\n    for (final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit : java.util.Set<org.eclipse.jgit.revwalk.RevCommit>) {\n        java.io.Writer.write('-');\n        org.eclipse.jgit.revwalk.RevCommit.copyTo(char[], java.io.Writer);\n        if ((org.eclipse.jgit.revwalk.RevCommit.getRawBuffer()) != null) {\n            java.io.Writer.write(' ');\n            java.io.Writer.write(org.eclipse.jgit.revwalk.RevCommit.getShortMessage());\n        } \n        java.io.Writer.write('\\n');\n    }\n    for (final java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.ObjectId> java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.ObjectId> : java.util.Map<java.lang.String, org.eclipse.jgit.lib.ObjectId>.entrySet()) {\n        java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.ObjectId>.getValue().copyTo(char[], java.io.Writer);\n        java.io.Writer.write(' ');\n        java.io.Writer.write(java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.ObjectId>.getKey());\n        java.io.Writer.write('\\n');\n    }\n    java.io.Writer.write('\\n');\n    java.io.Writer.flush();\n    org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor, org.eclipse.jgit.lib.ProgressMonitor, java.io.OutputStream);\n} finally {\n    org.eclipse.jgit.internal.storage.pack.PackWriter.release();\n}"},"status":-2},{"failures":[1,27,28,29,30,31,2,3,4,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,0,53,54,55,56,57,58,59,60,61,5,62,63,64,65,66,67,68,69,70],"tindex":"17e058b8-c868-11e4-9c1a-d7c2aeff0be9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.CommitBuilder:280","type":"CtInvocationImpl","sourcecode":"java.io.OutputStreamWriter.write(org.eclipse.jgit.lib.CommitBuilder.getAuthor().toExternalString())"},"status":-1},{"failures":[2,3,4,5,1,0],"tindex":"17e058b9-c868-11e4-9c1a-f9529788c9e9","variableMapping":{"i":"i","workingTree":"i","dirCache":"i"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.filter.IndexDiffFilter:194","type":"CtIfImpl","sourcecode":"if ((int == (int)) || (int == (int)))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.FIFORevQueue:161","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.AbstractRevQueue.org.eclipse.jgit.revwalk.AbstractRevQueue.describe(java.lang.StringBuilder, org.eclipse.jgit.revwalk.BlockRevQueue.Block.org.eclipse.jgit.revwalk.RevCommit[][int])"},"status":-1},{"failures":[0,1,2,3,4,71,72,73,5],"tindex":"17e058ba-c868-11e4-9c1a-711086cfda16","variableMapping":{"sb":"r"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.ignore.internal.Strings:320","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setLength(((java.lang.StringBuilder.length()) - 4))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TreeEntry:247","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.TreeEntry.appendFullName(java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"17e058bb-c868-11e4-9c1a-71f7aef3f8ff","variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:216","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref> org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.internal.storage.file.RefDirectory.getPackedRefs()"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:620","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref> org.eclipse.jgit.util.RefList<org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.internal.storage.file.RefDirectory.readPackedRefs()"},"status":-2},{"failureDictionary":{"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryModify":49,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":4,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkModifiedNotNormalized":10,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":61,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":64,"org.eclipse.jgit.util.HookTest.testRunHook":25,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":2,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test024_createCommitNonAscii":28,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryModifyInSubfolder":40,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":52,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":6,"org.eclipse.jgit.symlinks.SymlinksTest.createFileSymlinkBeforeTarget":14,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":65,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":0,"org.eclipse.jgit.util.HookTest.testCommitMsgHookCanModifyCommitMessage":26,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":34,"org.eclipse.jgit.api.CommitAndLogCommandTest.testSomeCommits":63,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":56,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":69,"org.eclipse.jgit.util.HookTest.testFindHook":23,"org.eclipse.jgit.revwalk.RevCommitParseTest.testParse_PublicParseMethod":70,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":58,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFolder":20,"org.eclipse.jgit.api.StashCreateCommandTest.newFileInIndexThenModifiedInWorkTree":41,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryModifyIndexChanged":45,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryDeleteIndexEdit":44,"org.eclipse.jgit.symlinks.SymlinksTest.createSymlinkAfterTarget":16,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":55,"org.eclipse.jgit.symlinks.SymlinksTest.createDirSymlinkBeforeTarget":13,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryCleanIndexModify":38,"org.eclipse.jgit.api.CommitAndLogCommandTest.testCommitRange":62,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":68,"org.eclipse.jgit.util.HookTest.testFailedPreCommitHookBlockCommit":22,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":60,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFileThenSymlink":18,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":1,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":57,"org.eclipse.jgit.api.StashCreateCommandTest.indexDelete":48,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testFileModeSymLinkIsNotATree":11,"org.eclipse.jgit.api.StashCreateCommandTest.indexAdd":42,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":5,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkNotModifiedThoughNormalized":9,"org.eclipse.jgit.treewalk.FileTreeIteratorJava7Test.testSymlinkActuallyModified":8,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test022_createCommitTag":27,"org.eclipse.jgit.util.HookTest.testCommitMsgHookReceivesCorrectParameter":21,"org.eclipse.jgit.api.StashCreateCommandTest.untrackedFileNotIncluded":50,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test023_createCommitNonAnullii":31,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":32,"org.eclipse.jgit.lib.T0002_TreeTest.test006_addDeepTree":73,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenMissing":19,"org.eclipse.jgit.api.CommitCommandTest.commitAmendWithoutAuthorShouldSetOriginalAuthorAndAuthorTime":36,"org.eclipse.jgit.lib.T0002_TreeTest.test002_addFile":72,"org.eclipse.jgit.util.HookTest.testFailedCommitMsgHookBlocksCommit":24,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":53,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryDeleteIndexAdd":43,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestSymlinkThenFile":17,"org.eclipse.jgit.treewalk.TreeWalkJava7Test.testSymlinkToDirNotRecursingViaSymlink":7,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test026_CreateCommitMultipleparents":30,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":67,"org.eclipse.jgit.api.CommitCommandTest.commitAmendWithAuthorShouldUseIt":37,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryDelete":47,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestFolderThenSymlink":15,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":59,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":3,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":33,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":66,"org.eclipse.jgit.api.StashCreateCommandTest.refLogIncludesCommitMessage":46,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":54,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test009_CreateCommitOldFormat":29,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":35,"org.eclipse.jgit.api.StashCreateCommandTest.multipleEdits":39,"org.eclipse.jgit.lib.T0002_TreeTest.test004_addTree":71,"org.eclipse.jgit.symlinks.SymlinksTest.fileModeTestMissingThenSymlink":12,"org.eclipse.jgit.api.StashCreateCommandTest.untrackedFileIncluded":51}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

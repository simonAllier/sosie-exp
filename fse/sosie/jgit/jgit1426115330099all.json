[{"failures":[0,1,2,3,4,5,6],"tindex":"9729a47e-c843-11e4-bae3-db5c77ef177a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.FIFORevQueue:126","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block = null"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"972f49cf-c843-11e4-bae3-a30cc2f2d48d","variableMapping":{"raw":"nameBuf","ptr":"namePos"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:329","type":"CtWhileImpl","sourcecode":"while ((byte[][int]) != 0)\n    int++;"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TreeFormatter:237","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.TreeFormatter.fmtOverflowBuffer(byte[], int, int, org.eclipse.jgit.lib.FileMode)"},"status":-1},{"failures":[],"tindex":"972f49d0-c843-11e4-bae3-d9679c42bf41","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkRemoteObjectDatabase:462","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.String.indexOf(' ')"},"status":-2},{"failures":[0,1,7,8,9,10,11,12,13,14,15,16,17,2,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,3,4,5],"tindex":"972f70e1-c843-11e4-bae3-5328da8dfec2","variableMapping":{"in":"in"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectLoader:260","type":"CtIfImpl","sourcecode":"if (0 <= (org.eclipse.jgit.lib.ObjectStream.read()))\n    throw new java.io.EOFException();\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashCreateCommand:300","type":"CtInvocationImpl","sourcecode":"java.io.InputStream.close()"},"status":-1},{"failures":[],"tindex":"972f70e2-c843-11e4-bae3-3f947cfe3f54","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.CheckoutCommand:677","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Checking out ours/theirs is only possible when checking out index, \" + \"not when switching branches.\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RebaseCommand:446","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.api.errors.JGitInternalException(\"Could not resolve uniquely the abbreviated object ID\")"},"status":-2},{"failures":[],"tindex":"97300d23-c843-11e4-bae3-8198a2b2b04f","variableMapping":{"parentFile":"tmpIdx"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:473","type":"CtIfImpl","sourcecode":"if (!(java.io.File.delete()))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.WalkFetchConnection:850","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.FileUtils.org.eclipse.jgit.util.FileUtils.delete(java.io.File)"},"status":-2},{"failures":[0,3,4,5,1,2],"tindex":"9733ddb4-c843-11e4-bae3-ed41afbf0a92","variableMapping":{"r":"br"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.NetRC:311","type":"CtTryImpl","sourcecode":"try {\n    if (java.io.BufferedReader != null)\n        java.io.BufferedReader.close();\n    \n} catch (java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(java.io.IOException);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.OpenSshConfig:183","type":"CtWhileImpl","sourcecode":"while ((java.lang.String = java.io.BufferedReader.readLine()) != null) {\n    java.lang.String = java.lang.String.trim();\n    if (((java.lang.String.length()) == 0) || (java.lang.String.startsWith(\"#\")))\n        continue;\n    \n    final java.lang.String[] java.lang.String[] = java.lang.String.split(\"[ \\t]*[= \\t]\", 2);\n    final java.lang.String java.lang.String = java.lang.String[][0].trim();\n    final java.lang.String java.lang.String = java.lang.String[][1].trim();\n    if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"Host\", java.lang.String)) {\n        java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>.clear();\n        for (final java.lang.String java.lang.String : java.lang.String.split(\"[ \\t]\")) {\n            final java.lang.String java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String);\n            org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host = java.util.Map<java.lang.String, org.eclipse.jgit.transport.OpenSshConfig.Host>.get(java.lang.String);\n            if (org.eclipse.jgit.transport.OpenSshConfig.Host == null) {\n                org.eclipse.jgit.transport.OpenSshConfig.Host = new org.eclipse.jgit.transport.OpenSshConfig.Host();\n                java.util.Map<java.lang.String, org.eclipse.jgit.transport.OpenSshConfig.Host>.put(java.lang.String, org.eclipse.jgit.transport.OpenSshConfig.Host);\n            } \n            java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>.add(org.eclipse.jgit.transport.OpenSshConfig.Host);\n        }\n        continue;\n    } \n    if (java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>.isEmpty()) {\n        continue;\n    } \n    if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"HostName\", java.lang.String)) {\n        for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n            if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String) == null)\n                org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String);\n            \n    } else if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"User\", java.lang.String)) {\n        for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n            if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String) == null)\n                org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String);\n            \n    } else if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"Port\", java.lang.String)) {\n        try {\n            final int int = java.lang.Integer.java.lang.Integer.parseInt(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n            for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n                if ((org.eclipse.jgit.transport.OpenSshConfig.Host.int) == 0)\n                    org.eclipse.jgit.transport.OpenSshConfig.Host.int = int;\n                \n        } catch (java.lang.NumberFormatException java.lang.NumberFormatException) {\n        }\n    } else if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"IdentityFile\", java.lang.String)) {\n        for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n            if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.io.File) == null)\n                org.eclipse.jgit.transport.OpenSshConfig.Host.java.io.File = org.eclipse.jgit.transport.OpenSshConfig.toFile(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n            \n    } else if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"PreferredAuthentications\", java.lang.String)) {\n        for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n            if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String) == null)\n                org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.nows(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n            \n    } else if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"BatchMode\", java.lang.String)) {\n        for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n            if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.Boolean) == null)\n                org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.Boolean = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.yesno(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n            \n    } else if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"StrictHostKeyChecking\", java.lang.String)) {\n        java.lang.String java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String);\n        for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n            if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String) == null)\n                org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String = java.lang.String;\n            \n    } else if (org.eclipse.jgit.util.StringUtils.org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"ConnectionAttempts\", java.lang.String)) {\n        try {\n            final int int = java.lang.Integer.java.lang.Integer.parseInt(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n            if (int > 0) {\n                for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n                    if ((org.eclipse.jgit.transport.OpenSshConfig.Host.int) == 0)\n                        org.eclipse.jgit.transport.OpenSshConfig.Host.int = int;\n                    \n            } \n        } catch (java.lang.NumberFormatException java.lang.NumberFormatException) {\n        }\n    } \n}"},"status":-1},{"failures":[],"tindex":"9733ddb5-c843-11e4-bae3-31a7d24e9e59","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.PersonIdent:219","type":"CtLocalVariableImpl","sourcecode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(8)"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.PathFilterGroup:271","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"9733ddb6-c843-11e4-bae3-7722800f27b2","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1385","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"Could not rewind to upstream commit\")"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:128","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.org.eclipse.jgit.transport.URIish , org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String)"},"status":-2},{"failures":[0,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,1,107,2,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,3,4,5,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],"tindex":"973898a7-c843-11e4-bae3-51d6634f5843","variableMapping":{"fullNewName":"p","newName":"p","org.eclipse.jgit.lib.Constants.R_HEADS":"org.eclipse.jgit.internal.storage.file.RefDirectory.PACKED_REFS_HEADER","org.eclipse.jgit.lib.Constants.R_REMOTES":"p","fullOldName":"org.eclipse.jgit.internal.storage.file.RefDirectory.PACKED_REFS_PEELED"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RenameBranchCommand:128","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.eclipse.jgit.lib.Constants.java.lang.String))\n    java.lang.String = (org.eclipse.jgit.lib.Constants.java.lang.String) + (java.lang.String);\nelse {\n    java.lang.String = (org.eclipse.jgit.lib.Constants.java.lang.String) + (java.lang.String);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:780","type":"CtIfImpl","sourcecode":"if ((java.lang.String.charAt(0)) == '#') {\n    if (java.lang.String.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.java.lang.String)) {\n        java.lang.String = java.lang.String.substring(org.eclipse.jgit.internal.storage.file.RefDirectory.java.lang.String.length());\n        boolean = java.lang.String.contains(org.eclipse.jgit.internal.storage.file.RefDirectory.java.lang.String);\n    } \n    continue;\n} "},"status":-1},{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":26,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefDetachedUnbornHead":85,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadRightLog":94,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":5,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_PackedWithPeeled":99,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test028_LockPackedRef":35,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockFrom":55,"org.eclipse.jgit.lib.T0002_TreeTest.test009_SymlinkAndGitlink":132,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":110,"org.eclipse.jgit.transport.PushProcessTest.testTrackingRefUpdateDisabled":175,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testTwoBranches":121,"org.eclipse.jgit.lib.RepositoryResolveTest.testObjectId_nonexisting":133,"org.eclipse.jgit.api.StashDropCommandTest.dropMiddleStashCommit":13,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testCheckout":93,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithPackedPrefixNameExists":47,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryModifyInSubfolder":7,"org.eclipse.jgit.transport.PushProcessTest.testUpdateFastForward":164,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchHasPreviousLog":53,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentConflict":18,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefTag":145,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteFastForward":78,"org.eclipse.jgit.transport.PushProcessTest.testUpdateNonFastForwardUnknownObject":171,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithPackedPrefixOfExisting":79,"org.eclipse.jgit.lib.RepositoryResolveTest.testParseLookupPath":137,"org.eclipse.jgit.transport.PushProcessTest.testUpdateUnexpectedRemoteVsForce":165,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testTag":113,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":20,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefLockFailureWrongOldValue":68,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_SymrefToPacked":97,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNoCacheObjectIdSubclass":51,"org.eclipse.jgit.lib.RepositoryResolveTest.testParseGitDescribeOutput":141,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testIntoOtherThanMaster":119,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesNoWildcardNoTracking":157,"org.eclipse.jgit.transport.PushProcessTest.testUpdateNonFastForwardForced":168,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_ok":126,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteForce":48,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testIsNameConflicting":106,"org.eclipse.jgit.api.StashDropCommandTest.dropWithInvalidLogIndex":16,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.dontPackHEAD_nonBare":38,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testLooseDelete":59,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLooseAndItsDirectory":61,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":1,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRefsCacheAfterUpdateLooseOnly":73,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":92,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.whileRefLockedRefNotPackedNoError":40,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameCurrentBranch":54,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsWithFooters":122,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":21,"org.eclipse.jgit.merge.SimpleMergeTest.testTheirs":131,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":32,"org.eclipse.jgit.revwalk.FIFORevQueueTest.testClear":6,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockTo":77,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testIntoHeadOtherThanMaster":117,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay":127,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRefKeySameAsName":58,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":23,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForward":81,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.dontPackHEAD_bare":39,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":28,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForwardWithCheck2":65,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchAlsoInPack":75,"org.eclipse.jgit.lib.RefTest.testResolvedSymRef":149,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":19,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":88,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_AllPacked1":102,"org.eclipse.jgit.transport.PushProcessTest.testUpdateExpectedRemote":169,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefBlob":143,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":27,"org.eclipse.jgit.lib.RefTest.testResolvedNamesBranch":151,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":4,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithCommit":30,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":33,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_PackedNotPeeled_Sorted":103,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefTree":144,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteHEADreferencedRef":69,"org.eclipse.jgit.lib.RefTest.testReadAllIncludingSymrefs":147,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testThreeBranches":118,"org.eclipse.jgit.api.StashCreateCommandTest.untrackedFileIncluded":11,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockHEAD":71,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_Mixed":105,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryModify":10,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":42,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteNotFound":49,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":86,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":109,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_disjointhistories":130,"org.eclipse.jgit.lib.RepositoryResolveTest.testHEAD":134,"org.eclipse.jgit.api.StashApplyCommandTest.indexContentConflict":22,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsWithFooterlikeLineInBody":111,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":3,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithLoosePrefixNameExists":83,"org.eclipse.jgit.lib.RefTest.testReadSimplePackedRefSameRepo":148,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithWorkingDirectory":24,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":2,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesTwoRefSpecs":155,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_TagsOnly_AllPacked":98,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesTrackingRef":156,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":36,"org.eclipse.jgit.transport.PushProcessTest.testUpdateUpToDate":167,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockFrom":70,"org.eclipse.jgit.merge.SimpleMergeTest.testOurs":128,"org.eclipse.jgit.lib.RepositoryResolveTest.resolveUpstream":136,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.whileRefUpdatedRefUpdateSucceeds":37,"org.eclipse.jgit.api.StashDropCommandTest.dropAll":17,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_PackedNotPeeled_WrongSort":104,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_conflict":129,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_LooseOverridesPacked":101,"org.eclipse.jgit.api.StashCreateCommandTest.newFileInIndexThenModifiedInWorkTree":8,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryModifyIndexChanged":9,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testCommit":124,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForwardWithCheck1":64,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesWildcardNoTracking":160,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test027_UnpackedRefHigherPriorityThanPacked":34,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":87,"org.eclipse.jgit.api.StashDropCommandTest.dropBoundaryStashedCommits":15,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsNoFooter":115,"org.eclipse.jgit.lib.RepositoryResolveTest.testDistance_past_root":135,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission2avoided":57,"org.eclipse.jgit.api.GitConstructionTest.testClose":90,"org.eclipse.jgit.lib.RepositoryResolveTest.testRef_refname":146,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":0,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testIntoSymbolicRefHeadPointingToMaster":123,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testOneBranch":125,"org.eclipse.jgit.lib.RefTest.testReadLooseRef":152,"org.eclipse.jgit.api.StashDropCommandTest.dropSingleStashedCommit":12,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsNoFooterNoLineBreak":112,"org.eclipse.jgit.lib.RepositoryResolveTest.invalidNames":139,"org.eclipse.jgit.lib.RefTest.testReadSymRefToPacked":154,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":25,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":29,"org.eclipse.jgit.lib.RefTest.testReadLoosePackedRef":153,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNewNamespaceConflictWithLoosePrefixOfExisting":74,"org.eclipse.jgit.transport.PushProcessTest.testPushResult":170,"org.eclipse.jgit.transport.TransportTest.testFindRemoteRefUpdatesNoWildcardNoDestination":158,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":31,"org.eclipse.jgit.transport.PushProcessTest.testUpdateUnexpectedRemote":162,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":107,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisToLockFrom":66,"org.eclipse.jgit.lib.RepositoryResolveTest.resolveExprSimple":138,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testMixed":116,"org.eclipse.jgit.transport.PushProcessTest.testTrackingRefUpdateEnabled":173,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadLineWithMissingComment":96,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisToLockTo":56,"org.eclipse.jgit.lib.RepositoryResolveTest.testParseNonGitDescribe":140,"org.eclipse.jgit.transport.PushProcessTest.testUpdateRejectedByConnection":166,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":91,"org.eclipse.jgit.merge.SquashMessageFormatterTest.testCommit":108,"org.eclipse.jgit.transport.TransportTest.testLocalTransportFetchWithoutLocalRepository":159,"org.eclipse.jgit.transport.PushProcessTest.testUpdateNonFastForward":172,"org.eclipse.jgit.api.StashDropCommandTest.dropFirstStashedCommit":14,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefLockFailureLocked":60,"org.eclipse.jgit.lib.RefTest.testReadSymRefToLoosePacked":150,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testPullWithUri":114,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefNoChange":62,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testNoLog":95,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":44,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLoosePackedRejected":52,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRefsCacheAfterUpdate":80,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.test_repack":100,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteHead":76,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testRemoteBranch":120,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.looseRefPacked":41,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":45,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":46,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission1avoided":84,"org.eclipse.jgit.transport.PushProcessTest.testTrackingRefUpdateOnReject":163,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockTo":67,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefDetached":72,"org.eclipse.jgit.lib.RepositoryResolveTest.testObjectId_existing":142,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchNoPreviousLog":82,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":161,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLoosePacked":50,"org.eclipse.jgit.transport.PushProcessTest.testUpdateCreateRef":174,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteWithoutHead":63,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":89,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":43}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

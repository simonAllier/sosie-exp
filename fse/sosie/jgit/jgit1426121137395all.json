[{"failures":[0,1,2,3,4,5],"tindex":"1bd2231d-c851-11e4-a44c-df500ec1bae3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.ByteArraySet:223","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 1)\n    java.lang.StringBuilder.append(\" , \");\n"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"1bd4bb2e-c851-11e4-a44c-2bf658faa4e0","variableMapping":{"eb":"completed"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCache:249","type":"CtIfImpl","sourcecode":"if (int < 4)\n    int = 4;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ThreadSafeProgressMonitor:160","type":"CtIfImpl","sourcecode":"if (0 == (java.util.concurrent.atomic.AtomicInteger.getAndAdd(int)))\n    java.util.concurrent.Semaphore.release();\n"},"status":-1},{"failures":[],"tindex":"1bd5094f-c851-11e4-a44c-497575b9f796","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.gitrepo.RepoCommand:752","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.Config org.eclipse.jgit.lib.Config = new org.eclipse.jgit.lib.Config();\n    for (org.eclipse.jgit.gitrepo.RepoCommand.Project org.eclipse.jgit.gitrepo.RepoCommand.Project : java.util.List<org.eclipse.jgit.gitrepo.RepoCommand.Project>) {\n        java.lang.String java.lang.String = org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String;\n        java.lang.String java.lang.String = org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String;\n        org.eclipse.jgit.lib.Config.setString(\"submodule\", java.lang.String, \"path\", java.lang.String);\n        org.eclipse.jgit.lib.Config.setString(\"submodule\", java.lang.String, \"url\", java.lang.String);\n        org.eclipse.jgit.dircache.DirCacheEntry org.eclipse.jgit.dircache.DirCacheEntry = new org.eclipse.jgit.dircache.DirCacheEntry(java.lang.String);\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId;\n        if (org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.isId(org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String))\n            org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.fromString(org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String);\n        else {\n            org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.gitrepo.RepoCommand.RemoteReader.sha1(java.lang.String, org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String);\n        }\n        if (org.eclipse.jgit.lib.ObjectId == null)\n            throw new org.eclipse.jgit.gitrepo.RepoCommand.RemoteUnavailableException(java.lang.String);\n        \n        org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.lib.ObjectId);\n        org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode);\n        org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheEntry);\n        for (org.eclipse.jgit.gitrepo.RepoCommand.CopyFile org.eclipse.jgit.gitrepo.RepoCommand.CopyFile : org.eclipse.jgit.gitrepo.RepoCommand.Project.java.util.List<org.eclipse.jgit.gitrepo.RepoCommand.CopyFile>) {\n            byte[] byte[] = org.eclipse.jgit.gitrepo.RepoCommand.RemoteReader.readFile(java.lang.String, org.eclipse.jgit.gitrepo.RepoCommand.Project.java.lang.String, org.eclipse.jgit.gitrepo.RepoCommand.CopyFile.java.lang.String);\n            org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectInserter.insert(org.eclipse.jgit.lib.Constants.int, byte[]);\n            org.eclipse.jgit.dircache.DirCacheEntry = new org.eclipse.jgit.dircache.DirCacheEntry(org.eclipse.jgit.gitrepo.RepoCommand.CopyFile.java.lang.String);\n            org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.lib.ObjectId);\n            org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode);\n            org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheEntry);\n        }\n    }\n    java.lang.String java.lang.String = org.eclipse.jgit.lib.Config.toText();\n    final org.eclipse.jgit.dircache.DirCacheEntry org.eclipse.jgit.dircache.DirCacheEntry = new org.eclipse.jgit.dircache.DirCacheEntry(org.eclipse.jgit.lib.Constants.java.lang.String);\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectInserter.insert(org.eclipse.jgit.lib.Constants.int, java.lang.String.getBytes(org.eclipse.jgit.lib.Constants.java.lang.String));\n    org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.lib.ObjectId);\n    org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode);\n    org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheEntry);\n    org.eclipse.jgit.dircache.DirCacheBuilder.finish();\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.dircache.DirCache.writeTree(org.eclipse.jgit.lib.ObjectInserter);\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(((org.eclipse.jgit.lib.Constants.java.lang.String) + \"^{commit}\"));\n    org.eclipse.jgit.lib.CommitBuilder org.eclipse.jgit.lib.CommitBuilder = new org.eclipse.jgit.lib.CommitBuilder();\n    org.eclipse.jgit.lib.CommitBuilder.setTreeId(org.eclipse.jgit.lib.ObjectId);\n    if (org.eclipse.jgit.lib.ObjectId != null)\n        org.eclipse.jgit.lib.CommitBuilder.setParentIds(org.eclipse.jgit.lib.ObjectId);\n    \n    org.eclipse.jgit.lib.CommitBuilder.setAuthor(org.eclipse.jgit.lib.PersonIdent);\n    org.eclipse.jgit.lib.CommitBuilder.setCommitter(org.eclipse.jgit.lib.PersonIdent);\n    org.eclipse.jgit.lib.CommitBuilder.setMessage(org.eclipse.jgit.gitrepo.internal.RepoText.org.eclipse.jgit.gitrepo.internal.RepoText.get().java.lang.String);\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectInserter.insert(org.eclipse.jgit.lib.CommitBuilder);\n    org.eclipse.jgit.lib.ObjectInserter.flush();\n    org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.Repository.updateRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n    org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.lib.ObjectId);\n    org.eclipse.jgit.lib.RefUpdate.setExpectedOldObjectId((org.eclipse.jgit.lib.ObjectId != null ? org.eclipse.jgit.lib.ObjectId : org.eclipse.jgit.lib.ObjectId.org.eclipse.jgit.lib.ObjectId.zeroId()));\n    org.eclipse.jgit.lib.RefUpdate.Result org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.update(org.eclipse.jgit.revwalk.RevWalk);\n    switch (org.eclipse.jgit.lib.RefUpdate.Result) {\n        case NEW :\n        case FORCED :\n        case FAST_FORWARD :\n            break;\n        case REJECTED :\n        case LOCK_FAILURE :\n            throw new org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String , org.eclipse.jgit.lib.RefUpdate.getRef() , org.eclipse.jgit.lib.RefUpdate.Result);\n        default :\n            throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.Constants.java.lang.String, org.eclipse.jgit.lib.ObjectId.name(), org.eclipse.jgit.lib.RefUpdate.Result));\n    }\n    return org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n} catch (java.io.IOException java.io.IOException) {\n    throw new org.eclipse.jgit.gitrepo.RepoCommand.ManifestErrorException(java.io.IOException);\n} finally {\n    org.eclipse.jgit.revwalk.RevWalk.release();\n}"},"status":-2},{"failures":[],"tindex":"1bd53060-c851-11e4-a44c-e7140cb897e9","variableMapping":{"next":"next","b":"b"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.BlockRevQueue:104","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.LIFORevQueue:84","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block.org.eclipse.jgit.revwalk.BlockRevQueue.Block"},"status":-2},{"failures":[0,1,2,6,3,4,5,7,8,9],"tindex":"1bd7ef81-c851-11e4-a44c-99acfec46705","variableMapping":{"sb":"a"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:246","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.SquashMessageFormatter:99","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\">\\n\")"},"status":-1},{"failures":[],"tindex":"1bd864b2-c851-11e4-a44c-275fc8eeb824","variableMapping":{"high":"p"},"series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexV2:287","type":"CtIfImpl","sourcecode":"if (int == 0)\n    return -1;\n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:293","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[0,1,2,4,5,3],"tindex":"1bd900f3-c851-11e4-a44c-6df5a8b8486d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:728","type":"CtInvocationImpl","sourcecode":"java.io.FileOutputStream.close()"},"status":-1},{"failures":[],"tindex":"1bd97624-c851-11e4-a44c-49e125d1404d","variableMapping":{"overflow":"w"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.TemporaryBuffer:330","type":"CtIfImpl","sourcecode":"if ((java.io.OutputStream) != null) {\n    try {\n        java.io.OutputStream.close();\n    } catch (java.io.IOException java.io.IOException) {\n    } finally {\n        java.io.OutputStream = null;\n    }\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AnyObjectId:343","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.AnyObjectId.org.eclipse.jgit.lib.AnyObjectId.writeRawInt(java.io.OutputStream, int)"},"status":-2},{"failures":[0,1,2,4,5,3],"tindex":"1bda6085-c851-11e4-a44c-1b68f0b76ce9","variableMapping":{"neg":"tz","blkPtr":"tz","resPtr":"tz"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:329","type":"CtAssignmentImpl","sourcecode":"int = int - int"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:797","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"1bdc5c56-c851-11e4-a44c-37b7e8c8a62c","variableMapping":{"srcParent":"headCommit","merger":"merger"},"series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.CherryPickCommand:155","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.merge.ResolveMerger.setBase(org.eclipse.jgit.revwalk.RevCommit.getTree())"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:177","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.AnyObjectId.org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.revwalk.RevCommit.getTree().getId(), org.eclipse.jgit.merge.ResolveMerger.getResultTreeId()))\n    continue;\n"},"status":-1},{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree":3,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":2,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":8,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":7,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":1,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":4,"org.eclipse.jgit.merge.SquashMessageFormatterTest.testCommit":6,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":0,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":9}},{"os.arch":"amd64","os.name":"Linux","os.version":"3.2.0-4-amd64"}]

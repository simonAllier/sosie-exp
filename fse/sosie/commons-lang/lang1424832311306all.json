[{"failures":[],"tindex":"516a018b-bc98-11e4-88f9-51c45d69987b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:1109","type":"CtReturnImpl","sourcecode":"return \"StrTokenizer[not tokenized yet]\""},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.text.StrBuilder:2833","type":"CtReturnImpl","sourcecode":"return org.apache.commons.lang3.text.StrBuilder.this.toString()"},"status":-1},{"failures":[],"tindex":"516a018c-bc98-11e4-88f9-27edeec24434","variableMapping":{"f":"value","lhs":"value","builder":"value","rhs":"value"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:321","type":"CtTryImpl","sourcecode":"try {\n    org.apache.commons.lang3.builder.CompareToBuilder.append(java.lang.reflect.Field.get(java.lang.Object), java.lang.reflect.Field.get(java.lang.Object));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(\"Unexpected IllegalAccessException\");\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:558","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object);\n} else {\n    org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object);\n}"},"status":-2},{"failures":[],"tindex":"516a018d-bc98-11e4-88f9-39b30fc473b2","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1373","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MethodUtils:536","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.Class<?>, java.lang.reflect.Method.getDeclaringClass())"},"status":-2},{"failures":[],"tindex":"516a018e-bc98-11e4-88f9-a7d3fdc5cf98","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.math.Fraction:899","type":"CtReturnImpl","sourcecode":"return 1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.text.StrMatcher:373","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[],"tindex":"516a018f-bc98-11e4-88f9-99f237b14adb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.text.StrBuilder:2686","type":"CtForImpl","sourcecode":"for (int int = (int) - 1 ; int >= 0 ; int--) {\n    if ((char[][int]) != (char[][int])) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":"516a0190-bc98-11e4-88f9-bf238e4bfd8c","variableMapping":{"bufferEnd":"comparison","len":"comparison","pos":"comparison"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.lang3.text.StrMatcher:368","type":"CtIfImpl","sourcecode":"if ((int + int) > int) {\n    return 0;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:1003","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"516a0191-bc98-11e4-88f9-71bb39feb076","variableMapping":{"t":"srcPos","u":"srcPos","v":"srcPos"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.lang3.math.Fraction:614","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int = -int;\n} else {\n    int = int;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1628","type":"CtAssertImpl","sourcecode":"assert ((int - 1) * 1) < (16 - int)"},"status":-2},{"failures":[],"tindex":"516a28a2-bc98-11e4-88f9-6f63cbc3f92e","variableMapping":{"cs1":"cs","cs2":"cs"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.lang3.StringUtils:802","type":"CtReturnImpl","sourcecode":"return java.lang.CharSequence.equals(java.lang.CharSequence)"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.StringUtils:337","type":"CtReturnImpl","sourcecode":"return !org.apache.commons.lang3.StringUtils.(org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence))"},"status":-1},{"failures":[],"tindex":"516a28a3-bc98-11e4-88f9-c915b9bd932e","variableMapping":{"array":"org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.ArrayUtils:438","type":"CtReturnImpl","sourcecode":"return float[].clone()"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.ArrayUtils:3390","type":"CtIfImpl","sourcecode":"if ((java.lang.Float[].int) == 0) {\n    return org.apache.commons.lang3.ArrayUtils.float[];\n} "},"status":-1},{"failures":[],"tindex":"516a28a4-bc98-11e4-88f9-31a68d563114","variableMapping":{"dstPos":"offset","nInts":"endMatchLen"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.lang3.Conversion:690","type":"CtIfImpl","sourcecode":"if ((((int - 1) * 32) + int) >= 64) {\n    throw new java.lang.IllegalArgumentException(\"(nInts-1)*32+dstPos is greather or equal to than 64\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:795","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int++;\n} else {\n    if (int == 0) {\n        java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n        if (boolean) {\n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n            org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n            java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n        } \n        int += int;\n        final int int = int;\n        java.lang.String java.lang.String = java.lang.String;\n        java.lang.String java.lang.String = null;\n        if (org.apache.commons.lang3.text.StrMatcher != null) {\n            final char[] char[] = java.lang.String.toCharArray();\n            int int = 0;\n            for (int int = 0 ; int < (char[].int) ; int++) {\n                if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                    break;\n                } \n                if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                    java.lang.String = java.lang.String.substring(0, int);\n                    java.lang.String = java.lang.String.substring((int + int));\n                    break;\n                } \n            }\n        } \n        if (java.util.List<java.lang.String> == null) {\n            java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n        } \n        org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n        java.util.List<java.lang.String>.add(java.lang.String);\n        java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n        if (java.lang.String == null) {\n            java.lang.String = java.lang.String;\n        } \n        if (java.lang.String != null) {\n            final int int = java.lang.String.length();\n            org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n            boolean = true;\n            int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n            int = (int + int) - (int - int);\n            int += int;\n            int += int;\n            int += int;\n            char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n        } \n        java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n        break;\n    } else {\n        int--;\n        int += int;\n    }\n}"},"status":-2},{"failureDictionary":{}},{"memory":2012,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":2,"vendor":"AMD","model":"Opteron","mhz":2393},{"core":2,"vendor":"AMD","model":"Opteron","mhz":2393}],"os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":"28d20204-c047-11e4-9873-a160d8f65fa2","variableMapping":{"t":"java.util.Calendar.MONTH","u":"java.util.Calendar.MONTH","v":"java.util.Calendar.MONTH"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.lang3.math.Fraction:607","type":"CtDoImpl","sourcecode":"do {\n    while ((int & 1) == 0) {\n        int /= 2;\n    }\n    if (int > 0) {\n        int = -int;\n    } else {\n        int = int;\n    }\n    int = (int - int) / 2;\n} while (int != 0 )"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.time.FastDatePrinter:207","type":"CtIfImpl","sourcecode":"if (int >= 4) {\n    org.apache.commons.lang3.time.FastDatePrinter.Rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.int , java.lang.String[]);\n} else if (int == 3) {\n    org.apache.commons.lang3.time.FastDatePrinter.Rule = new org.apache.commons.lang3.time.FastDatePrinter.TextField(java.util.Calendar.int , java.lang.String[]);\n} else if (int == 2) {\n    org.apache.commons.lang3.time.FastDatePrinter.Rule = org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField.org.apache.commons.lang3.time.FastDatePrinter.TwoDigitMonthField;\n} else {\n    org.apache.commons.lang3.time.FastDatePrinter.Rule = org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField.org.apache.commons.lang3.time.FastDatePrinter.UnpaddedMonthField;\n}"},"status":-2},{"failures":[],"tindex":"28d22915-c047-11e4-9873-1d416c04c45e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.Validate:1252","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) == false) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(java.lang.String, java.lang.Object[]));\n} "},"status":-1},{"failures":[],"tindex":"28d22916-c047-11e4-9873-3df8306c633f","variableMapping":{"typeArguments":"result"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.reflect.TypeUtils:184","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type[].clone()"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1417","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type[]"},"status":-2},{"failures":[],"tindex":"28d22917-c047-11e4-9873-395d9f36268e","variableMapping":{"newLineStr":"org.apache.commons.lang3.StringUtils.EMPTY","org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR":"org.apache.commons.lang3.StringUtils.EMPTY"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.text.WordUtils:177","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.lang3.SystemUtils.java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.StringUtils:3995","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.lang3.StringUtils.java.lang.String"},"status":-2},{"failures":[],"tindex":"28d22918-c047-11e4-9873-3b75ae532331","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.lang3.reflect.TypeUtils:209","type":"CtLocalVariableImpl","sourcecode":"int int = 71 << 4"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1399","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.StringBuilder.length()"},"status":-2},{"failures":[],"tindex":"28d22919-c047-11e4-9873-17cd2159298c","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:410","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.StringUtils:4176","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"28d2291a-c047-11e4-9873-4517a7389488","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.math.Fraction:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.ArithmeticException(\"The denominator must not be negative\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.time.FastDateParser:792","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((java.lang.String + \" is not a supported timezone name\"))"},"status":-2},{"failures":[],"tindex":"28d2291b-c047-11e4-9873-61256040daaf","variableMapping":{"startIndex":"increase"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.text.StrBuilder:2301","type":"CtAssignmentImpl","sourcecode":"int = int < 0 ? 0 : int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.StringUtils:4762","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Math.java.lang.Math.min(int, ((java.lang.String.length()) / 5))"},"status":0},{"failures":[],"tindex":"28d2291c-c047-11e4-9873-3d669e3eed89","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.lang3.concurrent.BackgroundInitializer:215","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.BackgroundInitializer:212","type":"CtReturnImpl","sourcecode":"return org.apache.commons.lang3.concurrent.BackgroundInitializer<T>.getFuture().get()"},"status":-2},{"failures":[],"tindex":"28d2291d-c047-11e4-9873-5bbd343fcdf1","variableMapping":{"typeArguments":"typeArguments","length":"length","this":"this","type":"type"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1371","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n    if ((java.lang.reflect.ParameterizedType.getOwnerType()) == null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n    } else {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.putAll(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType));\n    }\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.Type[][int]);\n        if (java.lang.reflect.Type != null) {\n            java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n        } \n    }\n    return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(java.lang.reflect.ParameterizedType.getOwnerType(), ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())), java.lang.reflect.Type[]);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1367","type":"CtIfImpl","sourcecode":"if (org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(java.lang.reflect.Type)) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.Type));\n    } \n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n        if ((java.lang.reflect.ParameterizedType.getOwnerType()) == null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n        } else {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.putAll(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType));\n        }\n        final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n        for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n            final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.Type[][int]);\n            if (java.lang.reflect.Type != null) {\n                java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n            } \n        }\n        return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(java.lang.reflect.ParameterizedType.getOwnerType(), ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())), java.lang.reflect.Type[]);\n    } \n    if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n        final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n        return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.wildcardType().withUpperBounds(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.WildcardType.getUpperBounds())).withLowerBounds(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.WildcardType.getLowerBounds())).build();\n    } \n} "},"status":-2},{"failureDictionary":{}},{"memory":2012,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":2,"vendor":"AMD","model":"Opteron","mhz":2394},{"core":2,"vendor":"AMD","model":"Opteron","mhz":2394}],"os.version":"3.2.0-4-amd64"}]

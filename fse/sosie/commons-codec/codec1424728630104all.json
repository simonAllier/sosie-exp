[{"failures":[],"tindex":"b37dc6cb-bba5-11e4-b08e-57d0438b8502","variableMapping":{"length":"t"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:275","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[],"tindex":"b37deddc-bba5-11e4-b08e-3f5cc3e8a4a0","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:325","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[],"tindex":"b37deddd-bba5-11e4-b08e-0d504edc4bd9","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"status":-2},{"failures":[],"tindex":"b37dedde-bba5-11e4-b08e-917ad961820c","variableMapping":{"data":"data","this":"this"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:334","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1(byte[])"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:260","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(byte[])"},"status":-2},{"failures":[],"tindex":"b37e14ef-bba5-11e4-b08e-c3f45924c083","variableMapping":{"result":"result","this":"this","index":"index","value":"value"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:622","type":"CtIfImpl","sourcecode":"if (((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\") ? int + 2 : int + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SC\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else {\n    if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"S\", \"Z\") ? int + 2 : int + 1;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:413","type":"CtIfImpl","sourcecode":"if (((int == 1) && org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, 0)))) && (!boolean)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KN\", \"N\");\n} else if (((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"EY\"))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) != 'Y')) && (!boolean)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"N\", \"KN\");\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KN\");\n}"},"status":-1},{"failures":[],"tindex":"b37e14f0-bba5-11e4-b08e-e3d093417f67","variableMapping":{"result":"result"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('F')"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T')"},"status":-1},{"failures":[],"tindex":"b37e14f1-bba5-11e4-b08e-2b5c40eb3ba2","variableMapping":{"cp":"u"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"int = 0"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"int = 128"},"status":-1},{"failures":[],"tindex":"b37e3c02-bba5-11e4-b08e-c3d7e812c6cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:114","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"b37e3c03-bba5-11e4-b08e-ffcc213eb5d7","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:72","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[], ((org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + org.apache.commons.codec.digest.B64.(org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"status":-1},{"failures":[],"tindex":"b37e3c04-bba5-11e4-b08e-1f9f1fb4983c","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:317","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(java.lang.IllegalStateException)"},"status":-2},{"failures":[],"tindex":"b37e3c05-bba5-11e4-b08e-2f22cabaae80","variableMapping":{"ls":"other","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"other","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"other"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.LanguageSet.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : org.apache.commons.codec.language.bm.Languages.LanguageSet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:274","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.LanguageSet"},"status":0},{"failures":[],"tindex":"bc80c0c6-bba5-11e4-b08e-47433ba8cfbd","variableMapping":{"sumLength":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"n","minRating":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"n"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:215","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n    break;\n} "},"status":0},{"failures":[],"tindex":"6370ce77-bba6-11e4-b08e-eb585ad05c15","variableMapping":{"str":"remainder"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return java.lang.String;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:413","type":"CtReturnImpl","sourcecode":"return (((\"(\" + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")-(\") + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")\""},"status":-1},{"failures":[],"tindex":"6370ce78-bba6-11e4-b08e-eb1b8eac1ea2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:285","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[],"tindex":"6370ce79-bba6-11e4-b08e-037435676356","variableMapping":{"ph":"obj"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a \\'[\\' but does not end in \\']\\'\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"6370ce7a-bba6-11e4-b08e-bf06bc3d3dca","variableMapping":{"sumLength":"currentLine","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"currentLine","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"length","minRating":"currentLine","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"length"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    boolean = true;\n} else {\n    final int int = java.lang.String.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n    if (int >= 0) {\n        java.lang.String = java.lang.String.substring(0, int);\n    } \n    java.lang.String = java.lang.String.trim();\n    if ((java.lang.String.length()) == 0) {\n        continue;\n    } \n    if (java.lang.String.contains(\"=\")) {\n        final java.lang.String[] java.lang.String[] = java.lang.String.split(\"=\");\n        if ((java.lang.String[].int) != 2) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n        } else {\n            final java.lang.String java.lang.String = java.lang.String[][0];\n            final java.lang.String java.lang.String = java.lang.String[][1];\n            if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n                throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n            } \n            java.util.Map<java.lang.Character, java.lang.Character>.put(java.lang.String.charAt(0), java.lang.String.charAt(0));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = java.lang.String.split(\"\\\\s+\");\n        if ((java.lang.String[].int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n                final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n                if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                    java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n                } \n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n            } catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n            }\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"6370ce7b-bba6-11e4-b08e-15fc2dc32a01","variableMapping":{"a":"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH","b":"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH","m":"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH","n":"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:406","type":"CtLocalVariableImpl","sourcecode":"final int int = ((int >>> int) ^ int) & int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:767","type":"CtLocalVariableImpl","sourcecode":"int int = java.io.InputStream.read(byte[], 0, org.apache.commons.codec.digest.HmacUtils.int)"},"status":-2},{"failures":[],"tindex":"6370ce7c-bba6-11e4-b08e-797f5090c724","variableMapping":{"code":"local","this":"this","symb":"symb","local":"local","n":"n"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:273","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n    java.lang.StringBuilder.append('F');\n} else {\n    java.lang.StringBuilder.append(char);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:155","type":"CtSwitchImpl","sourcecode":"switch (char) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (int == 0) {\n            java.lang.StringBuilder.append(char);\n        } \n        break;\n    case 'B' :\n        if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'M')) && org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) {\n            break;\n        } \n        java.lang.StringBuilder.append(char);\n        break;\n    case 'C' :\n        if ((org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && (!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int)))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"CIA\")) {\n            java.lang.StringBuilder.append('X');\n            break;\n        } \n        if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n            java.lang.StringBuilder.append('S');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n            java.lang.StringBuilder.append('K');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n            if (((int == 0) && (int >= 3)) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, 2))) {\n                java.lang.StringBuilder.append('K');\n            } else {\n                java.lang.StringBuilder.append('X');\n            }\n        } else {\n            java.lang.StringBuilder.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n            java.lang.StringBuilder.append('J');\n            int += 2;\n        } else {\n            java.lang.StringBuilder.append('T');\n        }\n        break;\n    case 'G' :\n        if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n            break;\n        } \n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) && (!org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 2))))) {\n            break;\n        } \n        if ((int > 0) && (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GN\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GNED\")))) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder, int, 'G')) {\n            boolean = true;\n        } else {\n            boolean = false;\n        }\n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) && (!boolean)) {\n            java.lang.StringBuilder.append('J');\n        } else {\n            java.lang.StringBuilder.append('K');\n        }\n        break;\n    case 'H' :\n        if (org.apache.commons.codec.language.Metaphone.isLastChar(int, int)) {\n            break;\n        } \n        if ((int > 0) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int - 1)))) >= 0)) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isVowel(java.lang.StringBuilder, (int + 1))) {\n            java.lang.StringBuilder.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        java.lang.StringBuilder.append(char);\n        break;\n    case 'K' :\n        if (int > 0) {\n            if (!org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'C'))) {\n                java.lang.StringBuilder.append(char);\n            } \n        } else {\n            java.lang.StringBuilder.append(char);\n        }\n        break;\n    case 'P' :\n        if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n            java.lang.StringBuilder.append('F');\n        } else {\n            java.lang.StringBuilder.append(char);\n        }\n        break;\n    case 'Q' :\n        java.lang.StringBuilder.append('K');\n        break;\n    case 'S' :\n        if ((org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SH\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIO\"))) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIA\"))) {\n            java.lang.StringBuilder.append('X');\n        } else {\n            java.lang.StringBuilder.append('S');\n        }\n        break;\n    case 'T' :\n        if (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIA\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIO\"))) {\n            java.lang.StringBuilder.append('X');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TCH\")) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TH\")) {\n            java.lang.StringBuilder.append('0');\n        } else {\n            java.lang.StringBuilder.append('T');\n        }\n        break;\n    case 'V' :\n        java.lang.StringBuilder.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 1)))) {\n            java.lang.StringBuilder.append(char);\n        } \n        break;\n    case 'X' :\n        java.lang.StringBuilder.append('K');\n        java.lang.StringBuilder.append('S');\n        break;\n    case 'Z' :\n        java.lang.StringBuilder.append('S');\n        break;\n    default :\n        break;\n}"},"status":-1},{"failures":[],"tindex":"6370f58d-bba6-11e4-b08e-55c129cce106","variableMapping":{"bytes":"binaryData","this":"this"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:640","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], boolean, boolean, java.lang.Integer.int)"},"status":-1},{"failures":[],"tindex":"6370f58e-bba6-11e4-b08e-3907b399ac02","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:128","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"6370f58f-bba6-11e4-b08e-6b2bfb710cb8","variableMapping":{"result":"result"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('R')"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:159","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[],"tindex":"6370f590-bba6-11e4-b08e-2123e322c987","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:309","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-1},{"failures":[],"tindex":"6370f591-bba6-11e4-b08e-5b542da6ac9a","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:187","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[],"tindex":"6370f592-bba6-11e4-b08e-572e98ee02b7","variableMapping":{"words":"words2","words2":"words2"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:440","type":"CtInvocationImpl","sourcecode":"java.util.List<java.lang.String>.addAll(java.util.List<java.lang.String>)"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:441","type":"CtInvocationImpl","sourcecode":"java.util.List<java.lang.String>.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(this.org.apache.commons.codec.language.bm.NameType))"},"status":-1},{"failures":[],"tindex":"6370f593-bba6-11e4-b08e-3d34dd59aa2e","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(java.lang.String)) {\n    return java.lang.String + java.lang.String;\n} else {\n    return java.lang.String;\n}"},"status":-1},{"failures":[],"tindex":"6370f594-bba6-11e4-b08e-ad3593c52c28","variableMapping":{"key":"builder"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 2))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"status":-2},{"failures":[],"tindex":"6370f595-bba6-11e4-b08e-a39f83815315","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:334","type":"CtLocalVariableImpl","sourcecode":"char char"},"status":-2},{"failures":[],"tindex":"6370f596-bba6-11e4-b08e-992d36b09d46","variableMapping":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS","printable":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (java.util.BitSet == null) {\n    java.util.BitSet = org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set(',')"},"status":-2},{"failures":[],"tindex":"63711ca7-bba6-11e4-b08e-d7f4079368f9","variableMapping":{"txt":"str"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"why\", \"Why\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:337","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1))"},"status":0},{"failures":[],"tindex":"7d324838-bba6-11e4-b08e-47a65b1d8c72","variableMapping":{"index":"b"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:321","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream)"},"status":-1},{"failures":[],"tindex":"7d324839-bba6-11e4-b08e-c71b99800d31","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:716","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"7d32483a-bba6-11e4-b08e-59a9ec0d7fe7","variableMapping":{"v":"r","e1":"s"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"int &= int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:329","type":"CtAssignmentImpl","sourcecode":"int = ((int ^ (int << 16)) ^ int) ^ (int[][int])"},"status":-2},{"failures":[],"tindex":"7d32483b-bba6-11e4-b08e-0928b906f2eb","variableMapping":{"b":"rightLength"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"int += 256"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[],"tindex":"924be4bc-bba6-11e4-b08e-b56e85c85486","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:232","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + char))"},"status":-2},{"failures":[],"tindex":"924be4bd-bba6-11e4-b08e-8590f181f96e","variableMapping":{"pattern":"org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:703","type":"CtLocalVariableImpl","sourcecode":"final int int = this.java.lang.String.length()"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:361","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(char)"},"status":-1},{"failures":[],"tindex":"924be4be-bba6-11e4-b08e-e362f7676e95","variableMapping":{"sumLength":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"b","minRating":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"b"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int += 256;\n} "},"status":0},{"failures":[],"tindex":"a2f99b9f-bba6-11e4-b08e-0b1fba804a03","variableMapping":{"result":"result"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('F')"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:123","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F')"},"status":-1},{"failures":[],"tindex":"a2f99ba0-bba6-11e4-b08e-bbd02802ab48","variableMapping":{"cp":"pos"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"int = 0"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:478","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"ea866931-bba6-11e4-b08e-d1b1706e39b3","variableMapping":{"charset":"salt"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"status":-2},{"failures":[],"tindex":"ea866932-bba6-11e4-b08e-cf696b64fdc8","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can\\'t fetch any language from the empty language set.\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:190","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String))"},"status":-2},{"failures":[],"tindex":"ea866933-bba6-11e4-b08e-1d1925b7a44a","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:433","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = java.lang.String.split(\"\\'\")"},"status":-2},{"failures":[],"tindex":"ea866934-bba6-11e4-b08e-2552363dd633","variableMapping":{"b":"l_raw"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"byte[][8] = 0"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:211","type":"CtOperatorAssignmentImpl","sourcecode":"byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int]"},"status":-1},{"failures":[],"tindex":"ea866935-bba6-11e4-b08e-dfd13fd75547","variableMapping":{"result":"result"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L')"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:309","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S')"},"status":-1},{"failures":[],"tindex":"ea866936-bba6-11e4-b08e-1b5f32ece002","variableMapping":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"suffix","name2":"suffix","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"suffix","name1":"input"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtIfImpl","sourcecode":"if (((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) {\n    return false;\n} else if (((java.lang.String.length()) == 1) || ((java.lang.String.length()) == 1)) {\n    return false;\n} else if (java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return true;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtIfImpl","sourcecode":"if ((java.lang.CharSequence.length()) > (java.lang.CharSequence.length())) {\n    return false;\n} "},"status":-2},{"failures":[],"tindex":"ea866937-bba6-11e4-b08e-7bceaf8e6fe8","variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:216","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:188","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)"},"status":-2},{"failures":[],"tindex":"ea866938-bba6-11e4-b08e-2527ca3c3b0c","variableMapping":{"result":"result"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L')"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A', 'F')"},"status":-1},{"failures":[],"tindex":"ea866939-bba6-11e4-b08e-874f4fba9c80","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:356","type":"CtLocalVariableImpl","sourcecode":"final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream()"},"status":-2},{"failures":[],"tindex":"ea86693a-bba6-11e4-b08e-b78bc0d29f7c","variableMapping":{"line":"text","ls":"langs"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:190","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) > 0) {\n    java.util.Set<java.lang.String>.add(java.lang.String);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:219","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.bm.Lang.LangRule.matches(java.lang.String)) {\n    if (org.apache.commons.codec.language.bm.Lang.LangRule.boolean) {\n        java.util.Set<java.lang.String>.retainAll(org.apache.commons.codec.language.bm.Lang.LangRule.java.util.Set<java.lang.String>);\n    } else {\n        java.util.Set<java.lang.String>.removeAll(org.apache.commons.codec.language.bm.Lang.LangRule.java.util.Set<java.lang.String>);\n    }\n} "},"status":-1},{"failures":[],"tindex":"ea86693b-bba6-11e4-b08e-ad2267b70465","variableMapping":{"org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-2},{"failures":[],"tindex":"ea86693c-bba6-11e4-b08e-997dc3c21c94","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:357","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failureDictionary":{}},{"memory":32197,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301},{"core":12,"vendor":"Intel","model":"Xeon","mhz":2301}],"os.version":"3.2.0-4-amd64"}]

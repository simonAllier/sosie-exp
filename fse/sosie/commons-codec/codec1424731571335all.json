[{"failures":[],"tindex":"3f36d4f1-bbaa-11e4-afc7-8f3762d66e28","variableMapping":{"txt":"cachedString"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:76","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"x\", \"k\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:153","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.StringBuilder.toString()"},"status":-1},{"failures":[],"tindex":"3f372312-bbaa-11e4-afc7-ff8f1759f0c7","variableMapping":{"key":"sb"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:463","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"{line=\").append(int)"},"status":0},{"failures":[],"tindex":"61a11aa3-bbaa-11e4-afc7-05a4aadbf08a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:354","type":"CtIfImpl","sourcecode":"if ((char == 'B') || ((char == 'P') && (char != 'H'))) {\n    char = '1';\n} else if (((char == 'D') || (char == 'T')) && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '4';\n} else if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '4';\n    org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n    int++;\n} else if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2},{"failures":[],"tindex":"61a141b4-bbaa-11e4-afc7-9348e2fd5d18","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:315","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be decoded using Q codec\"))"},"status":-2},{"failures":[],"tindex":"61a141b5-bbaa-11e4-afc7-251bd1c7917f","variableMapping":{"cp":"pos"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"int = 0"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"int = 1"},"status":0},{"failures":[],"tindex":"b1529016-bbaa-11e4-afc7-9571464fcf3a","variableMapping":{"c":"index","d":"index"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"int = ((((int & 255) << 16) | (int & 65280)) | ((int & 16711680) >>> 16)) | ((int & -268435456) >>> 4)"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:476","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[],"tindex":"b1529017-bbaa-11e4-afc7-93129ec91551","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtIfImpl","sourcecode":"if ((char[][1]) == 'H') {\n    java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n    java.lang.StringBuilder.setCharAt(0, 'W');\n} else {\n    java.lang.StringBuilder.append(char[]);\n}"},"status":-1},{"failures":[],"tindex":"b1529018-bbaa-11e4-afc7-eb57993a79f6","variableMapping":{"blocksize":"index","cnt":"index"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:541","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"b1529019-bbaa-11e4-afc7-9351d8e3c5f2","variableMapping":{"wdsz":"index","n":"index"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:371","type":"CtReturnImpl","sourcecode":"return (int + 1) == int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:788","type":"CtIfImpl","sourcecode":"if (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 2));\n    return ((char != 'I') && (char != 'E')) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"status":0},{"failures":[],"tindex":"490e196a-bbab-11e4-afc7-75f9d899a950","variableMapping":{"context":"context","eof":"eof"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:339","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BaseNCodec.Context.boolean) {\n    return ;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:337","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true;\n    if ((0 == (org.apache.commons.codec.binary.BaseNCodec.Context.int)) && ((int) == 0)) {\n        return ;\n    } \n    final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    final int int = org.apache.commons.codec.binary.BaseNCodec.Context.int;\n    switch (org.apache.commons.codec.binary.BaseNCodec.Context.int) {\n        case 0 :\n            break;\n        case 1 :\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 2) & (org.apache.commons.codec.binary.Base64.int))];\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 4) & (org.apache.commons.codec.binary.Base64.int))];\n            if ((byte[]) == (org.apache.commons.codec.binary.Base64.byte[])) {\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n            } \n            break;\n        case 2 :\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 10) & (org.apache.commons.codec.binary.Base64.int))];\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 4) & (org.apache.commons.codec.binary.Base64.int))];\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 2) & (org.apache.commons.codec.binary.Base64.int))];\n            if ((byte[]) == (org.apache.commons.codec.binary.Base64.byte[])) {\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n            } \n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (org.apache.commons.codec.binary.BaseNCodec.Context.int)));\n    }\n    org.apache.commons.codec.binary.BaseNCodec.Context.int += (org.apache.commons.codec.binary.BaseNCodec.Context.int) - int;\n    if (((int) > 0) && ((org.apache.commons.codec.binary.BaseNCodec.Context.int) > 0)) {\n        java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int);\n        org.apache.commons.codec.binary.BaseNCodec.Context.int += byte[].int;\n    } \n} else {\n    for (int int = 0 ; int < int ; int++) {\n        final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context);\n        org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int);\n        int int = byte[][int++];\n        if (int < 0) {\n            int += 256;\n        } \n        org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 8) + int;\n        if (0 == (org.apache.commons.codec.binary.BaseNCodec.Context.int)) {\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 18) & (org.apache.commons.codec.binary.Base64.int))];\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 12) & (org.apache.commons.codec.binary.Base64.int))];\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 6) & (org.apache.commons.codec.binary.Base64.int))];\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.Base64.int))];\n            org.apache.commons.codec.binary.BaseNCodec.Context.int += org.apache.commons.codec.binary.Base64.int;\n            if (((int) > 0) && ((int) <= (org.apache.commons.codec.binary.BaseNCodec.Context.int))) {\n                java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int);\n                org.apache.commons.codec.binary.BaseNCodec.Context.int += byte[].int;\n                org.apache.commons.codec.binary.BaseNCodec.Context.int = 0;\n            } \n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"490e407b-bbab-11e4-afc7-f164cc1c36ab","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:315","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.StringBuilder.toString()"},"status":-2},{"failures":[],"tindex":"490e407c-bbab-11e4-afc7-81159de2319e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:132","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(java.lang.String)"},"status":-1},{"failures":[],"tindex":"490e407d-bbab-11e4-afc7-6525387e4adb","variableMapping":{"words":"words2","words2":"words2"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:440","type":"CtInvocationImpl","sourcecode":"java.util.List<java.lang.String>.addAll(java.util.List<java.lang.String>)"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:435","type":"CtInvocationImpl","sourcecode":"java.util.List<java.lang.String>.add(java.lang.String)"},"status":-1},{"failures":[],"tindex":"490e407e-bbab-11e4-afc7-ddd691a6e6b0","variableMapping":{"sb":"buffer"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0) {\n    java.lang.StringBuilder.append(\"|\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:460","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.b64from24bit(byte[][3], byte[][13], byte[][23], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"490e407f-bbab-11e4-afc7-3773caba7da2","variableMapping":{"other":"this","languages":"languages","this":"org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"this"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:136","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.bm.Languages.LanguageSet == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(org.apache.commons.codec.language.bm.Languages.LanguageSet));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Set<java.lang.String>);\n    for (java.lang.String java.lang.String : org.apache.commons.codec.language.bm.Languages.SomeLanguages.java.util.Set<java.lang.String>) {\n        java.util.Set<java.lang.String>.add(java.lang.String);\n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.org.apache.commons.codec.language.bm.Languages.LanguageSet.from(java.util.Set<java.lang.String>);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:116","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.bm.Languages.LanguageSet == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet;\n} else if (org.apache.commons.codec.language.bm.Languages.LanguageSet == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return this;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(org.apache.commons.codec.language.bm.Languages.LanguageSet));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.lang.Math.java.lang.Math.min(java.util.Set<java.lang.String>.size(), org.apache.commons.codec.language.bm.Languages.SomeLanguages.java.util.Set<java.lang.String>.size()));\n    for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n        if (org.apache.commons.codec.language.bm.Languages.SomeLanguages.java.util.Set<java.lang.String>.contains(java.lang.String)) {\n            java.util.Set<java.lang.String>.add(java.lang.String);\n        } \n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.org.apache.commons.codec.language.bm.Languages.LanguageSet.from(java.util.Set<java.lang.String>);\n}"},"status":-2},{"failures":[],"tindex":"49101540-bbab-11e4-afc7-796388db579e","variableMapping":{"result":"result"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('R')"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:716","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A')"},"status":-1},{"failures":[],"tindex":"49103c51-bbab-11e4-afc7-333ddb528a33","variableMapping":{"replacedName":"salt","dc":"salt"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(java.lang.String)) {\n    final java.lang.String java.lang.String = java.lang.String.substring(0, 1);\n    java.lang.String = java.lang.String.replace(java.lang.String, java.lang.String);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"status":-2},{"failures":[],"tindex":"49103c52-bbab-11e4-afc7-0948226a73de","variableMapping":{"b":"len"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int += 256;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:91","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(false);\n} "},"status":-2},{"failures":[],"tindex":"49103c53-bbab-11e4-afc7-bdd0d75ed02e","variableMapping":{"str":"txt"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:103","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"f+\", \"F\")"},"status":-1},{"failures":[],"tindex":"49103c54-bbab-11e4-afc7-315dd180f541","variableMapping":{"c1":"code","c2":"nextChar"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:370","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '4';\n} else {\n    char = '8';\n}"},"status":0},{"failures":[],"tindex":"69aacb15-bbab-11e4-afc7-8190c9c7db92","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:437","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement \\'\" + java.lang.String) + \"\\' in \") + java.lang.String))"},"status":-2},{"failures":[],"tindex":"69aacb16-bbab-11e4-afc7-b50ea53e11d7","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:467","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"69aacb17-bbab-11e4-afc7-cd2a0918f406","variableMapping":{"key":"bytes"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:174","type":"CtForEachImpl","sourcecode":"for (final byte byte : byte[]) {\n    if (byte == (org.apache.commons.codec.net.QCodec.byte)) {\n        boolean = true;\n        break;\n    } \n}"},"status":0},{"failures":[],"tindex":"e0299cc8-bbac-11e4-afc7-35c266d008d3","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:415","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(this.org.apache.commons.codec.language.bm.NameType)) {\n    if (java.lang.String.startsWith((java.lang.String + \" \"))) {\n        final java.lang.String java.lang.String = java.lang.String.substring(((java.lang.String.length()) + 1));\n        final java.lang.String java.lang.String = java.lang.String + java.lang.String;\n        return (((\"(\" + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")-(\") + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")\";\n    } \n}"},"status":-1},{"failures":[],"tindex":"e0299cc9-bbac-11e4-afc7-6518b4583cda","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:444","type":"CtInvocationImpl","sourcecode":"java.util.List<java.lang.String>.addAll(java.util.List<java.lang.String>)"},"status":-1},{"failures":[],"tindex":"e0299cca-bbac-11e4-afc7-5110bc9ad008","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:190","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String))"},"status":-1},{"failures":[],"tindex":"e0299ccb-bbac-11e4-afc7-65d4997b9784","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:107","type":"CtLocalVariableImpl","sourcecode":"final java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.LinkedHashSet<org.apache.commons.codec.language.bm.Rule.Phoneme>(int)"},"status":-2},{"failures":[],"tindex":"e0299ccc-bbac-11e4-afc7-d32bb6c44a04","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:342","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"e0299ccd-bbac-11e4-afc7-17adf445c41b","variableMapping":{"v":"length","e0":"length"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = int & int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:201","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.Math.((int)(java.lang.Math.min(byte[].int, long)))"},"status":-2},{"failures":[],"tindex":"e0299cce-bbac-11e4-afc7-13433163e598","variableMapping":{"found":"eof"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:433","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true"},"status":-2},{"failures":[],"tindex":"e029c3df-bbac-11e4-afc7-cda6faaf6e06","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:302","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[],"tindex":"e029c3e0-bbac-11e4-afc7-cff1264f9476","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:512","type":"CtLocalVariableImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = boolean ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.List"},"status":-2},{"failures":[],"tindex":"e029c3e1-bbac-11e4-afc7-2d06c93f4e32","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:258","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + java.lang.String))"},"status":-2},{"failures":[],"tindex":"e029eaf2-bbac-11e4-afc7-c1111f859bd2","variableMapping":{"key":"key"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:302","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 2))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:293","type":"CtLocalVariableImpl","sourcecode":"char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1))"},"status":-2},{"failures":[],"tindex":"e029eaf3-bbac-11e4-afc7-8d150048a32f","variableMapping":{"byteToCheck":"pad"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byte) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:464","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[].int) ; int++) {\n    if ((!org.apache.commons.codec.binary.BaseNCodec.(isInAlphabet(byte[][int]))) && ((!boolean) || (((byte[][int]) != (byte)) && (!org.apache.commons.codec.binary.BaseNCodec.(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte[][int])))))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":"e029eaf4-bbac-11e4-afc7-13534fbc1d9f","variableMapping":{"obj":"ascii","this":"ascii"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(java.lang.Object)));\n} "},"status":-2},{"failures":[],"tindex":"e029eaf5-bbac-11e4-afc7-1b756f62e75a","variableMapping":{"obj":"obj","this":"obj"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:507","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((java.lang.String)(java.lang.Object)))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"status":-2},{"failures":[],"tindex":"e029eaf6-bbac-11e4-afc7-099cac5d56ce","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:214","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:609","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"e02a1207-bbac-11e4-afc7-cb741b1b9cf9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:306","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n}"},"status":-1},{"failures":[],"tindex":"e02a1208-bbac-11e4-afc7-cbee31f12a2d","variableMapping":{"encodeSize":"index","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"index"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"status":0},{"failures":[],"tindex":"28feeff9-bbad-11e4-afc7-8d505689933c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:132","type":"CtLocalVariableImpl","sourcecode":"final int int = (java.lang.String.length()) - 2"},"status":-2},{"failures":[],"tindex":"28feeffa-bbad-11e4-afc7-3bac3ea296bc","variableMapping":{"i":"d","name2Size":"c"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (int > int) {\n    break;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:348","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 1, 1431655765, int[])"},"status":-2},{"failures":[],"tindex":"28feeffb-bbad-11e4-afc7-ef345fb0f30d","variableMapping":{"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH":"length"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:766","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.HmacUtils.int]"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:203","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(byte[].int) >> 3]"},"status":-2},{"failures":[],"tindex":"28ff170c-bbad-11e4-afc7-6302e2e7f3fd","variableMapping":{"charset":"phonemeText"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:353","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.append(java.lang.String.subSequence(int, (int + 1)))"},"status":-2},{"failures":[],"tindex":"28ff170d-bbad-11e4-afc7-f18ac4572e6a","variableMapping":{"key":"finalb"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.java.util.Arrays.fill(byte[], ((byte)(0)))"},"status":0},{"failures":[],"tindex":"c3b84ffe-bbad-11e4-afc7-ff97979abbd7","variableMapping":{"w":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH","buffer":"builder","n":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH","org.apache.commons.codec.digest.B64.B64T":"cachedString"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.B64:60","type":"CtWhileImpl","sourcecode":"while ((int--) > 0) {\n    java.lang.StringBuilder.append(org.apache.commons.codec.digest.B64.java.lang.String.charAt((int & 63)));\n    int >>= 6;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:138","type":"CtIfImpl","sourcecode":"if (boolean && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n    java.lang.StringBuilder.append(java.lang.String);\n    if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n        java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n    } \n    java.lang.String = null;\n} "},"status":-2},{"failures":[],"tindex":"c3b84fff-bbad-11e4-afc7-93364b57f8f1","variableMapping":{"c":"index"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (int != 0) {\n    return int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:280","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if ((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 6, \"CAESAR\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CH\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CZ\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 4, \"WICZ\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    int += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CC\")) && (!((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 0)) == 'M')))) {\n    return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-2},{"failureDictionary":{}},{"memory":2012,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":2,"vendor":"AMD","model":"Opteron","mhz":2389},{"core":2,"vendor":"AMD","model":"Opteron","mhz":2389}],"os.version":"3.2.0-4-amd64"}]

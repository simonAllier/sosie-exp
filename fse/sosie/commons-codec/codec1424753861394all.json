[{"failures":[],"tindex":"e9124564-bbde-11e4-8c9e-dff678d651ee","variableMapping":{"c":"pos"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 2) | (int << 26)"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:354","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"1dca8475-bbdf-11e4-8c9e-cb0acf6ca717","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:102","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:274","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), java.io.InputStream)"},"status":-1},{"failures":[],"tindex":"1dca8476-bbdf-11e4-8c9e-9fa0843dc4f7","variableMapping":{"terminator":"n","to":"wdsz"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:148","type":"CtWhileImpl","sourcecode":"while (((java.lang.StringBuilder.length()) < org.apache.commons.codec.language.Metaphone.(getMaxCodeLen())) && (int < int)) {\n    final char char = java.lang.StringBuilder.charAt(int);\n    if ((char != 'C') && org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, char))) {\n        int++;\n    } else {\n        switch (char) {\n            case 'A' :\n            case 'E' :\n            case 'I' :\n            case 'O' :\n            case 'U' :\n                if (int == 0) {\n                    java.lang.StringBuilder.append(char);\n                } \n                break;\n            case 'B' :\n                if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'M')) && org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) {\n                    break;\n                } \n                java.lang.StringBuilder.append(char);\n                break;\n            case 'C' :\n                if ((org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && (!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int)))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"CIA\")) {\n                    java.lang.StringBuilder.append('X');\n                    break;\n                } \n                if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n                    java.lang.StringBuilder.append('S');\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n                    java.lang.StringBuilder.append('K');\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n                    if (((int == 0) && (int >= 3)) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, 2))) {\n                        java.lang.StringBuilder.append('K');\n                    } else {\n                        java.lang.StringBuilder.append('X');\n                    }\n                } else {\n                    java.lang.StringBuilder.append('K');\n                }\n                break;\n            case 'D' :\n                if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n                    java.lang.StringBuilder.append('J');\n                    int += 2;\n                } else {\n                    java.lang.StringBuilder.append('T');\n                }\n                break;\n            case 'G' :\n                if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n                    break;\n                } \n                if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) && (!org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 2))))) {\n                    break;\n                } \n                if ((int > 0) && (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GN\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GNED\")))) {\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder, int, 'G')) {\n                    boolean = true;\n                } else {\n                    boolean = false;\n                }\n                if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) && (!boolean)) {\n                    java.lang.StringBuilder.append('J');\n                } else {\n                    java.lang.StringBuilder.append('K');\n                }\n                break;\n            case 'H' :\n                if (org.apache.commons.codec.language.Metaphone.isLastChar(int, int)) {\n                    break;\n                } \n                if ((int > 0) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int - 1)))) >= 0)) {\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.isVowel(java.lang.StringBuilder, (int + 1))) {\n                    java.lang.StringBuilder.append('H');\n                } \n                break;\n            case 'F' :\n            case 'J' :\n            case 'L' :\n            case 'M' :\n            case 'N' :\n            case 'R' :\n                java.lang.StringBuilder.append(char);\n                break;\n            case 'K' :\n                if (int > 0) {\n                    if (!org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'C'))) {\n                        java.lang.StringBuilder.append(char);\n                    } \n                } else {\n                    java.lang.StringBuilder.append(char);\n                }\n                break;\n            case 'P' :\n                if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n                    java.lang.StringBuilder.append('F');\n                } else {\n                    java.lang.StringBuilder.append(char);\n                }\n                break;\n            case 'Q' :\n                java.lang.StringBuilder.append('K');\n                break;\n            case 'S' :\n                if ((org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SH\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIO\"))) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIA\"))) {\n                    java.lang.StringBuilder.append('X');\n                } else {\n                    java.lang.StringBuilder.append('S');\n                }\n                break;\n            case 'T' :\n                if (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIA\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIO\"))) {\n                    java.lang.StringBuilder.append('X');\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TCH\")) {\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TH\")) {\n                    java.lang.StringBuilder.append('0');\n                } else {\n                    java.lang.StringBuilder.append('T');\n                }\n                break;\n            case 'V' :\n                java.lang.StringBuilder.append('F');\n                break;\n            case 'W' :\n            case 'Y' :\n                if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 1)))) {\n                    java.lang.StringBuilder.append(char);\n                } \n                break;\n            case 'X' :\n                java.lang.StringBuilder.append('K');\n                java.lang.StringBuilder.append('S');\n                break;\n            case 'Z' :\n                java.lang.StringBuilder.append('S');\n                break;\n            default :\n                break;\n        }\n        int++;\n    }\n    if ((java.lang.StringBuilder.length()) > org.apache.commons.codec.language.Metaphone.(getMaxCodeLen())) {\n        java.lang.StringBuilder.setLength(org.apache.commons.codec.language.Metaphone.getMaxCodeLen());\n    } \n}"},"status":-2},{"failures":[],"tindex":"1dcbe407-bbdf-11e4-8c9e-3390fd3b0d15","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:401","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer.toString()"},"status":-2},{"failures":[],"tindex":"1dcbe408-bbdf-11e4-8c9e-e9744bef1b39","variableMapping":{"txt":"str"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^y3\", \"Y3\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:262","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.SoundexUtils.org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)"},"status":0},{"failures":[],"tindex":"4a194a79-bbdf-11e4-8c9e-7fe0239cd9d9","variableMapping":{"value":"name"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.RuleType:47","type":"CtReturnImpl","sourcecode":"return this.java.lang.String"},"status":-2},{"failures":[],"tindex":"4a194a7a-bbdf-11e4-8c9e-a75d51c9b75b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"4a19718b-bbdf-11e4-8c9e-77453ea52f23","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:181","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"mark/reset not supported\")"},"status":0},{"failures":[],"tindex":"754ed84c-bbdf-11e4-8c9e-79a040778211","variableMapping":{"b":"buffer","offset":"pos","iValue":"pos"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = ((byte)(int & 255))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:454","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte"},"status":-2},{"failures":[],"tindex":"754ed84d-bbdf-11e4-8c9e-571aaf45ea83","variableMapping":{"string":"key","charsetName":"key"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:142","type":"CtReturnImpl","sourcecode":"return java.lang.String.getBytes(java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String), org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-2},{"failures":[],"tindex":"754f266e-bbdf-11e4-8c9e-4d89a894dad4","variableMapping":{"index":"index"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return int + 3"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:492","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"754f266f-bbdf-11e4-8c9e-13d6ed922719","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:214","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"b7807e40-bbdf-11e4-8c9e-79565471c454","variableMapping":{"r":"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = int ^ (int >>> 16)"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:794","type":"CtLocalVariableImpl","sourcecode":"int int = java.io.InputStream.read(byte[], 0, org.apache.commons.codec.digest.DigestUtils.int)"},"status":-2},{"failures":[],"tindex":"b7807e41-bbdf-11e4-8c9e-33ad4bcf2610","variableMapping":{"key":"code"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:320","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('S')"},"status":-1},{"failures":[],"tindex":"b780a552-bbdf-11e4-8c9e-ef027c23aee7","variableMapping":{"ibitWorkArea":"pos","b":"pos","context":"context"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:385","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 8) + int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:509","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"eeb94db3-bbdf-11e4-8c9e-23205f8f0634","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:520","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H')"},"status":-1},{"failures":[],"tindex":"eeb94db4-bbdf-11e4-8c9e-259a80386206","variableMapping":{"str":"txt"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:103","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"f+\", \"F\")"},"status":-1},{"failures":[],"tindex":"eeb974c5-bbdf-11e4-8c9e-21d653b72ba4","variableMapping":{"str":"str"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return java.lang.String;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"15fe6776-bbe0-11e4-8c9e-f74ce9459972","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtIfImpl","sourcecode":"if (long < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + long));\n} "},"status":-1},{"failures":[],"tindex":"15fe6777-bbe0-11e4-8c9e-b9b1e24a99b4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"int &= 268435455"},"status":0},{"failures":[],"tindex":"44bdb848-bbe0-11e4-8c9e-cfaafd0fa2d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:120","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1))"},"status":-1},{"failures":[],"tindex":"44bdb849-bbe0-11e4-8c9e-bb33e1c253e6","variableMapping":{"obj":"obj","this":"obj"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:533","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((java.lang.String)(java.lang.Object)))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.caverphone(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"44bdb84a-bbe0-11e4-8c9e-35d1af28a025","variableMapping":{"value":"input"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:409","type":"CtIfImpl","sourcecode":"if ((this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n    if (((java.lang.String.length()) >= 2) && (java.lang.String.substring(0, 2).equals(\"d\\'\"))) {\n        final java.lang.String java.lang.String = java.lang.String.substring(2);\n        final java.lang.String java.lang.String = \"d\" + java.lang.String;\n        return (((\"(\" + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")-(\") + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")\";\n    } \n    for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(this.org.apache.commons.codec.language.bm.NameType)) {\n        if (java.lang.String.startsWith((java.lang.String + \" \"))) {\n            final java.lang.String java.lang.String = java.lang.String.substring(((java.lang.String.length()) + 1));\n            final java.lang.String java.lang.String = java.lang.String + java.lang.String;\n            return (((\"(\" + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")-(\") + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")\";\n        } \n    }\n} "},"status":0},{"failures":[],"tindex":"c5a4d5bb-bbe0-11e4-8c9e-9f6371024a08","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"status":-2},{"failures":[],"tindex":"c5a4d5bc-bbe0-11e4-8c9e-e7a88c277d6e","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"status":-1},{"failures":[],"tindex":"c5a4d5bd-bbe0-11e4-8c9e-5b76fcc4dcbd","variableMapping":{"b":"maxPhonemes"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = 256 + int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.lang.String.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> , java.lang.String , org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder , int , int).invoke();\n    final boolean boolean = org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.isFound();\n    org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.getPhonemeBuilder();\n    if (!boolean) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.append(java.lang.String.subSequence(int, (int + 1)));\n    } \n    int = org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.getI();\n}"},"status":-2},{"failures":[],"tindex":"c5a4d5be-bbe0-11e4-8c9e-718154b1c2f8","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:47","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"c5a4d5bf-bbe0-11e4-8c9e-634b5247bb1f","variableMapping":{"obj":"obj","this":"obj"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.caverphone(((java.lang.String)(java.lang.Object)))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:338","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.decode(((byte[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"c5a4fcd0-bbe0-11e4-8c9e-f9a319d1e9fb","variableMapping":{"sumLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"index","minRating":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"index"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:344","type":"CtIfImpl","sourcecode":"if ((int > 0) && (int < (java.lang.StringBuilder.length()))) {\n    boolean = (java.lang.StringBuilder.charAt((int - 1))) == char;\n} "},"status":-2},{"failures":[],"tindex":"c5a4fcd1-bbe0-11e4-8c9e-c5719a9c4ec7","variableMapping":{"key":"code"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:281","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('K')"},"status":-1},{"failures":[],"tindex":"c5a4fcd2-bbe0-11e4-8c9e-ed5e3de02612","variableMapping":{"ibitWorkArea":"pos","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"ibitWorkArea","context":"context","buffer":"buffer"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:449","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:362","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 2) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"c5a4fcd3-bbe0-11e4-8c9e-ad7fae06ca23","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:102","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:103","type":"CtReturnImpl","sourcecode":"return byte < 0 ? 256 + byte : byte"},"status":-1},{"failures":[],"tindex":"c5a4fcd4-bbe0-11e4-8c9e-bf496f64b80d","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\")"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:342","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL decoded\"))"},"status":-2},{"failures":[],"tindex":"c5a4fcd5-bbe0-11e4-8c9e-dd891ea81148","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:194","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":0},{"failures":[],"tindex":"a99027d6-bbe1-11e4-8c9e-af0b71146cc3","variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:375","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getMd2Digest()"},"status":-1},{"failures":[],"tindex":"a99027d7-bbe1-11e4-8c9e-55cd028d9a7f","variableMapping":{"key":"phonemeText"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:121","type":"CtInvocationImpl","sourcecode":"this.java.lang.StringBuilder.append(org.apache.commons.codec.language.bm.Rule.Phoneme.java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"a99027d8-bbe1-11e4-8c9e-4fa3fef8c752","variableMapping":{"obj":"obj","this":"obj"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:313","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.encode(((byte[])(java.lang.Object)))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:153","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.soundex(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"a99027d9-bbe1-11e4-8c9e-d119550b3013","variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md2(byte[]))"},"status":-2},{"failures":[],"tindex":"a99027da-bbe1-11e4-8c9e-77112234b9ff","variableMapping":{"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:766","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.HmacUtils.int]"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:254","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(org.apache.commons.codec.binary.BaseNCodec.Context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.int)]"},"status":-2},{"failures":[],"tindex":"a99027db-bbe1-11e4-8c9e-b5e4753f19c7","variableMapping":{"input":"str"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return null;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"a99027dc-bbe1-11e4-8c9e-8bd42b752256","variableMapping":{"str":"str","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"str"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:92","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    org.apache.commons.codec.language.bm.Rule.Phoneme.append(java.lang.CharSequence);\n}"},"status":-2},{"failures":[],"tindex":"a9904eed-bbe1-11e4-8c9e-274f6b02fa53","variableMapping":{"blocksize":"cnt","cp":"cnt"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"status":-1},{"failures":[],"tindex":"a9904eee-bbe1-11e4-8c9e-3f0c9a09794a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((byte[] == null) || ((byte[].int) == 0)) {\n    return byte[];\n} "},"status":-1},{"failures":[],"tindex":"a9904eef-bbe1-11e4-8c9e-c17616298279","variableMapping":{"letter":"value"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:277","type":"CtReturnImpl","sourcecode":"return ((((java.lang.String.equalsIgnoreCase(\"E\")) || (java.lang.String.equalsIgnoreCase(\"A\"))) || (java.lang.String.equalsIgnoreCase(\"O\"))) || (java.lang.String.equalsIgnoreCase(\"I\"))) || (java.lang.String.equalsIgnoreCase(\"U\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((int == ((java.lang.String.length()) - 3)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, ((java.lang.String.length()) - 2), 2, \"AS\", \"OS\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, ((java.lang.String.length()) - 1), 1, \"A\", \"O\"))) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"status":-1},{"failures":[],"tindex":"a9904ef0-bbe1-11e4-8c9e-0f0f0b5a8dd4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:308","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 16, 65535, int[])"},"status":-1},{"failures":[],"tindex":"a9904ef1-bbe1-11e4-8c9e-0f5265fa71bc","variableMapping":{"txt":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","org.apache.commons.codec.language.Caverphone1.SIX_1":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || ((java.lang.String.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"status":-1},{"failures":[],"tindex":"a9904ef2-bbe1-11e4-8c9e-e9d828f6965c","variableMapping":{"key":"lineSeparator"},"series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[]);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + java.lang.String) + \"]\"));\n} "},"status":-1},{"failures":[],"tindex":"a9904ef3-bbe1-11e4-8c9e-19e2bead1f7e","variableMapping":{"key":"local"},"series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:113","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1))"},"status":-1},{"failures":[],"tindex":"a9904ef4-bbe1-11e4-8c9e-2b60a3b8e035","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.lang.String.length()) ; ) {\n    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> , java.lang.String , org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder , int , int).invoke();\n    final boolean boolean = org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.isFound();\n    org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.getPhonemeBuilder();\n    if (!boolean) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.append(java.lang.String.subSequence(int, (int + 1)));\n    } \n    int = org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.getI();\n}"},"status":-1},{"failureDictionary":{}},{"memory":2012,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":2,"vendor":"AMD","model":"Opteron","mhz":2393},{"core":2,"vendor":"AMD","model":"Opteron","mhz":2393}],"os.version":"3.2.0-4-amd64"}]

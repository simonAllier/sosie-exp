[{"failures":[],"tindex":1,"variableMapping":{"genericType":"genericType"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl","sourcecode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-1},{"failures":[],"tindex":2,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl","sourcecode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-1},{"failures":[],"tindex":3,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl","sourcecode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-1},{"failures":[],"tindex":4,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.ExpectedInvocation:112","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuffer.append(\")\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-2},{"failures":[],"tindex":5,"variableMapping":{"genericType":"genericType"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl","sourcecode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-2},{"failures":[],"tindex":6,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl","sourcecode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-2},{"failures":[],"tindex":7,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl","sourcecode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-2},{"failures":[],"tindex":8,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMock:1621","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-2},{"failures":[],"tindex":9,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Type"},"status":-2},{"failures":[],"tindex":10,"variableMapping":{"org.easymock.internal.ClassInstantiatorFactory.instantiator":"org.easymock.internal.ClassInstantiatorFactory.instantiator","i":"org.easymock.internal.ClassInstantiatorFactory.instantiator"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":-2},{"failures":[],"tindex":11,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":-1},{"failures":[],"tindex":12,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":-2},{"failures":[],"tindex":13,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:191","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":-2},{"failures":[],"tindex":14,"variableMapping":{"org.easymock.internal.ClassInstantiatorFactory.instantiator":"org.easymock.internal.ClassInstantiatorFactory.instantiator","i":"org.easymock.internal.ClassInstantiatorFactory.instantiator"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":-2},{"failures":[],"tindex":15,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":0},{"failures":[],"tindex":16,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":-2},{"failures":[],"tindex":17,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.Results:93","type":"CtOperatorAssignmentImpl","sourcecode":"int += org.easymock.internal.Range.getMinimum()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":-2},{"failures":[],"tindex":18,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()"},"status":-1},{"failures":[],"tindex":19,"variableMapping":{"clazz":"clazz"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":20,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":21,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":22,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":23,"variableMapping":{"clazz":"clazz"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":24,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":25,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":26,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":27,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getConstructors()[0]"},"status":-2},{"failures":[],"tindex":28,"variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"value"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.AndroidSupport.boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":29,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-1},{"failures":[],"tindex":30,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":31,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMock:1964","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":32,"variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"value"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.AndroidSupport.boolean = true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":33,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":0},{"failures":[],"tindex":34,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":35,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:49","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes())"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":36,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-1},{"failures":[],"tindex":37,"variableMapping":{"returnedType":"clazz"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:245","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":0},{"failures":[],"tindex":38,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":0},{"failures":[],"tindex":39,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":-2},{"failures":[],"tindex":40,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.RecordState:320","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.ExpectedInvocation.getMethod().getExceptionTypes()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":-2},{"failures":[],"tindex":41,"variableMapping":{"paramType":"clazz","argType":"clazz"},"series":0,"name":"add","transplant":{"position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":-2},{"failures":[],"tindex":42,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl","sourcecode":"assert java.lang.Class<?> != null : \"Class must not be null\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":0},{"failures":[],"tindex":43,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl","sourcecode":"assert java.lang.Class<?> != null : \"Class must not be null\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":0},{"failures":[],"tindex":44,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMock:1319","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":-2},{"failures":[],"tindex":45,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl","sourcecode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} "},"status":0},{"failures":[],"tindex":46,"variableMapping":{"f":"value","obj":"value","o":"value"},"series":0,"name":"replace","transplant":{"position":"org.easymock.EasyMockSupport:632","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = java.lang.reflect.Field.get(java.lang.Object)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":-2},{"failures":[],"tindex":47,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.EasyMock:800","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":-2},{"failures":[],"tindex":48,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.EasyMockSupport:667","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = java.lang.Object"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":-2},{"failures":[],"tindex":49,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.ClassProxyFactory:225","type":"CtLocalVariableImpl","sourcecode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":0},{"failures":[],"tindex":50,"variableMapping":{"mock":"value","toAssign":"value"},"series":0,"name":"add","transplant":{"position":"org.easymock.EasyMockSupport:667","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = java.lang.Object"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":0},{"failures":[],"tindex":51,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":-1},{"failures":[],"tindex":52,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.EasyMockSupport:632","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = java.lang.reflect.Field.get(java.lang.Object)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":-2},{"failures":[],"tindex":53,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.Results:97","type":"CtOperatorAssignmentImpl","sourcecode":"int += org.easymock.internal.Range.getMaximum()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":-2},{"failures":[],"tindex":54,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)"},"status":0},{"failures":[],"tindex":55,"variableMapping":{"actual":"this"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.Invocation.validateCaptures()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":-2},{"failures":[],"tindex":56,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":-1},{"failures":[],"tindex":57,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":-2},{"failures":[],"tindex":58,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMock:721","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":-2},{"failures":[],"tindex":59,"variableMapping":{"bridgeMethod":"this"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl","sourcecode":"assert java.lang.reflect.Method != null : \"Method must not be null\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":0},{"failures":[],"tindex":60,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":-2},{"failures":[],"tindex":61,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl","sourcecode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":-2},{"failures":[],"tindex":62,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl","sourcecode":"return java.lang.Object == null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":-2},{"failures":[],"tindex":63,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl","sourcecode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} "},"status":-1},{"failures":[],"tindex":64,"variableMapping":{"state":"state"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":65,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":66,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":67,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.Capture:118","type":"CtInvocationImpl","sourcecode":"org.easymock.Capture<T>.reset()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":68,"variableMapping":{"unordered":"shouldBeUsedInOneThread","match":"shouldBeUsedInOneThread","validCallCount":"shouldBeUsedInOneThread"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl","sourcecode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-2},{"failures":[],"tindex":69,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.assertRecordState()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":0},{"failures":[],"tindex":70,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.asStub()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":71,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:49","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes())"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-2},{"failures":[],"tindex":72,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":73,"variableMapping":{"delegateTo":"obj","this":"obj"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:125","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":74,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-1},{"failures":[],"tindex":75,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-1},{"failures":[],"tindex":76,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.ExpectedInvocation:104","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuffer.append(org.easymock.internal.Invocation.getMockAndMethodName())"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":77,"variableMapping":{"data":"obj"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeShort(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":78,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":0},{"failures":[],"tindex":79,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksControl:130","type":"CtIfImpl","sourcecode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":80,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.matchers.Same:43","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuffer.append(\")\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":81,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-1},{"failures":[],"tindex":82,"variableMapping":{"interval":"actual"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.Results:52","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":83,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl","sourcecode":"return java.lang.Object == null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-1},{"failures":[],"tindex":84,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl","sourcecode":"return java.lang.Object.equals(java.lang.Object)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-1},{"failures":[],"tindex":85,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMock:1397","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":86,"variableMapping":{"throwable":"expected"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.RecordState:314","type":"CtIfImpl","sourcecode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":87,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":88,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl","sourcecode":"return java.lang.Object != null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":89,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMock:1092","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":90,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"status":-2},{"failureDictionary":{}},{"memory":8006,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613}],"os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":1,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-1},{"failures":[],"tindex":2,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-1},{"failures":[],"tindex":3,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-1},{"failures":[],"tindex":4,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MocksControl:135","type":"CtLocalVariableImpl","sourcecode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-2},{"failures":[],"tindex":5,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.EasyMock:2125","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-2},{"failures":[],"tindex":6,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-2},{"failures":[],"tindex":7,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-2},{"failures":[],"tindex":8,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-2},{"failures":[],"tindex":9,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Range:41","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))"},"status":-1},{"failures":[],"tindex":10,"variableMapping":{"returnedType":"leafClass"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:245","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":-1},{"failures":[],"tindex":11,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":-1},{"failures":[],"tindex":12,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:245","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":-2},{"failures":[],"tindex":13,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.matchers.Same:41","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuffer.append(\"same(\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":-2},{"failures":[],"tindex":14,"variableMapping":{"clazz":"leafClass"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl","sourcecode":"assert java.lang.Class<?> != null : \"Class must not be null\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":-1},{"failures":[],"tindex":15,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":0},{"failures":[],"tindex":16,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl","sourcecode":"assert java.lang.Class<?> != null : \"Class must not be null\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":-2},{"failures":[],"tindex":17,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":-2},{"failures":[],"tindex":18,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","type":"CtDoImpl","sourcecode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )"},"status":-1},{"failures":[],"tindex":19,"variableMapping":{"field":"f"},"series":0,"name":"replace","transplant":{"position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":20,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.ClassProxyFactory:176","type":"CtLocalVariableImpl","sourcecode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":21,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":22,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMock:491","type":"CtReturnImpl","sourcecode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":23,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?>"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":24,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":25,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?>"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":26,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":27,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:704","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()"},"status":-2},{"failures":[],"tindex":28,"variableMapping":{"method":"bridgeMethod"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl","sourcecode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":-1},{"failures":[],"tindex":29,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl","sourcecode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":-1},{"failures":[],"tindex":30,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":-2},{"failures":[],"tindex":31,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.ExpectedInvocation:73","type":"CtLocalVariableImpl","sourcecode":"final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = ((org.easymock.internal.ExpectedInvocation)(java.lang.Object))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":-2},{"failures":[],"tindex":32,"variableMapping":{"result":"bridgeMethod"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":0},{"failures":[],"tindex":33,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl","sourcecode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":0},{"failures":[],"tindex":34,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl","sourcecode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":0},{"failures":[],"tindex":35,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:156","type":"CtLocalVariableImpl","sourcecode":"final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":-2},{"failures":[],"tindex":36,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}"},"status":-1},{"failures":[],"tindex":37,"variableMapping":{"unordered":"checkOrder","match":"checkOrder","validCallCount":"checkOrder"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl","sourcecode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-2},{"failures":[],"tindex":38,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-2},{"failures":[],"tindex":39,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl","sourcecode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-2},{"failures":[],"tindex":40,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-2},{"failures":[],"tindex":41,"variableMapping":{"expected":"expected","this":"this"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-1},{"failures":[],"tindex":42,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.AndroidSupport:26","type":"CtInvocationImpl","sourcecode":"java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-2},{"failures":[],"tindex":43,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-1},{"failures":[],"tindex":44,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ReflectionUtils:39","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-2},{"failures":[],"tindex":45,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"status":-1},{"failures":[],"tindex":46,"variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":-1},{"failures":[],"tindex":47,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.closeMethod()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":-2},{"failures":[],"tindex":48,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":-1},{"failures":[],"tindex":49,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MockInvocationHandler:37","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":-2},{"failures":[],"tindex":50,"variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.RecordState:85","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":-1},{"failures":[],"tindex":51,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":-2},{"failures":[],"tindex":52,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":0},{"failures":[],"tindex":53,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMock:1963","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Float>(org.easymock.Capture<java.lang.Float>))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":-2},{"failures":[],"tindex":54,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"status":-1},{"failures":[],"tindex":55,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-1},{"failures":[],"tindex":56,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-1},{"failures":[],"tindex":57,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl","sourcecode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-1},{"failures":[],"tindex":58,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl","sourcecode":"if (int == (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-2},{"failures":[],"tindex":59,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.Capture:80","type":"CtThrowImpl","sourcecode":"throw new java.lang.AssertionError(\"Nothing captured yet\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-2},{"failures":[],"tindex":60,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-2},{"failures":[],"tindex":61,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl","sourcecode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-2},{"failures":[],"tindex":62,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.LastControl:48","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-2},{"failures":[],"tindex":63,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))"},"status":-1},{"failures":[],"tindex":64,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl","sourcecode":"return \"geq\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-1},{"failures":[],"tindex":65,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","type":"CtReturnImpl","sourcecode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-1},{"failures":[],"tindex":66,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl","sourcecode":"return \"lt\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-1},{"failures":[],"tindex":67,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-2},{"failures":[],"tindex":68,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-2},{"failures":[],"tindex":69,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.Results:86","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.Results.getMainInterval().expectedCount()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-2},{"failures":[],"tindex":70,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl","sourcecode":"return \"geq\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-2},{"failures":[],"tindex":71,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl","sourcecode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-2},{"failures":[],"tindex":72,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:693","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()"},"status":-2},{"failures":[],"tindex":73,"variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":-1},{"failures":[],"tindex":74,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":-1},{"failures":[],"tindex":75,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":-1},{"failures":[],"tindex":76,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMockSupport:400","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":-2},{"failures":[],"tindex":77,"variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":0},{"failures":[],"tindex":78,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.Capture:117","type":"CtIfImpl","sourcecode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":-2},{"failures":[],"tindex":79,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":0},{"failures":[],"tindex":80,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl","sourcecode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":-2},{"failures":[],"tindex":81,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"status":-1},{"failures":[],"tindex":82,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":83,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":84,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":85,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:195","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":86,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":87,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":88,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":89,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":90,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failureDictionary":{}},{"memory":8006,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2600},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2600},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2600},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2600}],"os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":1,"variableMapping":{"result":"java.lang.Object.class","methods":"java.lang.Object.class","paramTypes":"java.lang.Object.class","name":"java.lang.Object.class","this":"java.lang.Object.class"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":-2},{"failures":[],"tindex":2,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl","sourcecode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":-1},{"failures":[],"tindex":3,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","type":"CtIfImpl","sourcecode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":-2},{"failures":[],"tindex":4,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.ArgumentToString:91","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\", \")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":-2},{"failures":[],"tindex":5,"variableMapping":{"result":"java.lang.Object.class","method":"java.lang.Object.class","paramTypes":"java.lang.Object.class","name":"java.lang.Object.class","this":"java.lang.Object.class"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.ReflectionUtils:105","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":-2},{"failures":[],"tindex":6,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl","sourcecode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":0},{"failures":[],"tindex":7,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":-2},{"failures":[],"tindex":8,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.Capture:83","type":"CtThrowImpl","sourcecode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":-2},{"failures":[],"tindex":9,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","type":"CtWhileImpl","sourcecode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"status":-1},{"failures":[],"tindex":10,"variableMapping":{"throwable":"java.io.Serializable.class"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:314","type":"CtIfImpl","sourcecode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":11,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-1},{"failures":[],"tindex":12,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:317","type":"CtIfImpl","sourcecode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":13,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMockSupport:142","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":14,"variableMapping":{"actual":"java.io.Serializable.class","invocation":"java.io.Serializable.class","this":"java.io.Serializable.class"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":15,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":16,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.UnorderedBehavior:75","type":"CtIfImpl","sourcecode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":17,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":18,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":19,"variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:289","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":0},{"failures":[],"tindex":20,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:289","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":0},{"failures":[],"tindex":21,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:289","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":0},{"failures":[],"tindex":22,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":-2},{"failures":[],"tindex":23,"variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.RecordState:289","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":0},{"failures":[],"tindex":24,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:289","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":0},{"failures":[],"tindex":25,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.RecordState:289","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":0},{"failures":[],"tindex":26,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ClassProxyFactory:115","type":"CtForEachImpl","sourcecode":"for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n    try {\n        java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n    }\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":-2},{"failures":[],"tindex":27,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:297","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} "},"status":-1},{"failures":[],"tindex":28,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":29,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":30,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":31,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:138","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":32,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":33,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":34,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":35,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl","sourcecode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":36,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":37,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-1},{"failures":[],"tindex":38,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-1},{"failures":[],"tindex":39,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-1},{"failures":[],"tindex":40,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MocksControl:354","type":"CtLocalVariableImpl","sourcecode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-1},{"failures":[],"tindex":41,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-2},{"failures":[],"tindex":42,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl","sourcecode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-2},{"failures":[],"tindex":43,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-2},{"failures":[],"tindex":44,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:255","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-2},{"failures":[],"tindex":45,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")"},"status":-1},{"failures":[],"tindex":46,"variableMapping":{"result":"obj","name":"obj"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.ReflectionUtils:107","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-1},{"failures":[],"tindex":47,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-1},{"failures":[],"tindex":48,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.ClassProxyFactory:107","type":"CtInvocationImpl","sourcecode":"java.io.ObjectInputStream.defaultReadObject()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":49,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MocksControl:343","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":50,"variableMapping":{"result":"obj","t":"obj"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":51,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":0},{"failures":[],"tindex":52,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl","sourcecode":"assert java.lang.String != null : \"Method name must not be null\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":53,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMockSupport.createStrictControl()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-2},{"failures":[],"tindex":54,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:655","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    if (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.Object java.lang.Object = null;\n    for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n        if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n            if (java.lang.Object != null) {\n                throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n            } \n            java.lang.Object = java.lang.Object;\n        } \n    }\n    if (java.lang.Object == null) {\n        continue;\n    } \n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n}"},"status":-1},{"failures":[],"tindex":55,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":56,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":57,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.Range:83","type":"CtReturnImpl","sourcecode":"return (int) == (java.lang.Integer.int)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-2},{"failures":[],"tindex":58,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMock:987","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-2},{"failures":[],"tindex":59,"variableMapping":{"actual":"otherArgument","expected":"myArgument","this":"otherArgument"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl","sourcecode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":60,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.Results:81","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.Results.getMainInterval().contains(org.easymock.internal.Results.getCallCount())"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-2},{"failures":[],"tindex":61,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.matchers.EndsWith:36","type":"CtReturnImpl","sourcecode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-2},{"failures":[],"tindex":62,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.Invocation:209","type":"CtInvocationImpl","sourcecode":"java.io.ObjectInputStream.defaultReadObject()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-2},{"failures":[],"tindex":63,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:121","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":64,"variableMapping":{"values":"values"},"series":0,"name":"replace","transplant":{"position":"org.easymock.Capture:60","type":"CtInvocationImpl","sourcecode":"java.util.List<T>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-1},{"failures":[],"tindex":65,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.Capture:60","type":"CtInvocationImpl","sourcecode":"java.util.List<T>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-1},{"failures":[],"tindex":66,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.Capture:60","type":"CtInvocationImpl","sourcecode":"java.util.List<T>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-1},{"failures":[],"tindex":67,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-2},{"failures":[],"tindex":68,"variableMapping":{"values":"values"},"series":0,"name":"add","transplant":{"position":"org.easymock.Capture:60","type":"CtInvocationImpl","sourcecode":"java.util.List<T>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-1},{"failures":[],"tindex":69,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.Capture:60","type":"CtInvocationImpl","sourcecode":"java.util.List<T>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-1},{"failures":[],"tindex":70,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.Capture:60","type":"CtInvocationImpl","sourcecode":"java.util.List<T>.clear()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-1},{"failures":[],"tindex":71,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMockSupport:625","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-2},{"failures":[],"tindex":72,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.Capture:79","type":"CtIfImpl","sourcecode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} "},"status":-1},{"failures":[],"tindex":73,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.EasyMockSupport:710","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":74,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.ClassProxyFactory:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.InstantiationException java.lang.InstantiationException"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":75,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.EasyMockSupport:661","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object = null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":76,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMock:946","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":77,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.EasyMockSupport:661","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object = null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":78,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl","sourcecode":"java.lang.Long java.lang.Long"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":79,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.EasyMockSupport:661","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object = null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":80,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl","sourcecode":"return java.lang.Object == null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":81,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]"},"status":-2},{"failures":[],"tindex":82,"variableMapping":{"initialPosition":"max","position":"max"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl","sourcecode":"int = int"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":-1},{"failures":[],"tindex":83,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":-1},{"failures":[],"tindex":84,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":-2},{"failures":[],"tindex":85,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:36","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":-2},{"failures":[],"tindex":86,"variableMapping":{"matches":"max"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":-1},{"failures":[],"tindex":87,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":0},{"failures":[],"tindex":88,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":-2},{"failures":[],"tindex":89,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMockSupport:678","type":"CtThrowImpl","sourcecode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":-2},{"failures":[],"tindex":90,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.int"},"status":-1},{"failureDictionary":{}},{"memory":8006,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2600},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2600},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2600},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2600}],"os.version":"3.2.0-4-amd64"}]

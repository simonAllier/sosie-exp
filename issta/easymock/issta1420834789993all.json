[{"failures":[],"tindex":1,"variableMapping":{"maximum":"result","minimum":"result"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.Range:52","type":"CtReturnImpl","sourcecode":"return (int) == (int)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-1},{"failures":[],"tindex":2,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl","sourcecode":"return int <= 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-1},{"failures":[],"tindex":3,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl","sourcecode":"return int > 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-1},{"failures":[],"tindex":4,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.EasyMockProperties:66","type":"CtLocalVariableImpl","sourcecode":"final java.io.IOException java.io.IOException"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-2},{"failures":[],"tindex":5,"variableMapping":{"result":"result"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl","sourcecode":"return int < 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-2},{"failures":[],"tindex":6,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl","sourcecode":"return int == 0"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-2},{"failures":[],"tindex":7,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.Range:79","type":"CtReturnImpl","sourcecode":"return ((int) <= int) && (int <= (int))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-2},{"failures":[],"tindex":8,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMock:1595","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-2},{"failures":[],"tindex":9,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl","sourcecode":"return int >= 0"},"status":-2},{"failures":[],"tindex":10,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl","sourcecode":"return \"leq\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-1},{"failures":[],"tindex":11,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.Capture:132","type":"CtReturnImpl","sourcecode":"return \"Nothing captured yet\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-1},{"failures":[],"tindex":12,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl","sourcecode":"return \"lt\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-1},{"failures":[],"tindex":13,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl","sourcecode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-2},{"failures":[],"tindex":14,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl","sourcecode":"return \"leq\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-2},{"failures":[],"tindex":15,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl","sourcecode":"return \"leq\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-2},{"failures":[],"tindex":16,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl","sourcecode":"return \"leq\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-2},{"failures":[],"tindex":17,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:200","type":"CtIfImpl","sourcecode":"if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-2},{"failures":[],"tindex":18,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl","sourcecode":"return \"cmpEq\""},"status":-2},{"failures":[],"tindex":19,"variableMapping":{"lastRange":"obj"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.Results:39","type":"CtIfImpl","sourcecode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":-2},{"failures":[],"tindex":20,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.MocksControl.reset()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":-2},{"failures":[],"tindex":21,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":-1},{"failures":[],"tindex":22,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl","sourcecode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":-2},{"failures":[],"tindex":23,"variableMapping":{"org.easymock.internal.EasyMockProperties.class":"obj","org.easymock.internal.EasyMockProperties.instance":"obj"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.EasyMockProperties:45","type":"CtSynchronizedImpl","sourcecode":"synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n    if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n        org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n    } \n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":-2},{"failures":[],"tindex":24,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":0},{"failures":[],"tindex":25,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.MocksControl.reset()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":-2},{"failures":[],"tindex":26,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl","sourcecode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":-2},{"failures":[],"tindex":27,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:694","type":"CtForEachImpl","sourcecode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.util.List<java.lang.Object>.add(java.lang.Object);\n}"},"status":-1},{"failures":[],"tindex":28,"variableMapping":{"data":"data"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeShort(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":-1},{"failures":[],"tindex":29,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeShort(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":-1},{"failures":[],"tindex":30,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeShort(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":-1},{"failures":[],"tindex":31,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":-2},{"failures":[],"tindex":32,"variableMapping":{"data":"data"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeShort(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":-1},{"failures":[],"tindex":33,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":0},{"failures":[],"tindex":34,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeShort(0)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":-1},{"failures":[],"tindex":35,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ArgumentToString:45","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuffer.append(\"[\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":-2},{"failures":[],"tindex":36,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl","sourcecode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)"},"status":-1},{"failures":[],"tindex":37,"variableMapping":{"clazz":"cls"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":-2},{"failures":[],"tindex":38,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":-1},{"failures":[],"tindex":39,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":-2},{"failures":[],"tindex":40,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MockBuilder:97","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":-2},{"failures":[],"tindex":41,"variableMapping":{"clazz":"cls"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":-2},{"failures":[],"tindex":42,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":0},{"failures":[],"tindex":43,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":-1},{"failures":[],"tindex":44,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.MocksBehavior:120","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":-2},{"failures":[],"tindex":45,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>"},"status":0},{"failures":[],"tindex":46,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl","sourcecode":"return "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-1},{"failures":[],"tindex":47,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl","sourcecode":"return "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-1},{"failures":[],"tindex":48,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl","sourcecode":"return "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-1},{"failures":[],"tindex":49,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMock:1975","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-2},{"failures":[],"tindex":50,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl","sourcecode":"return "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-1},{"failures":[],"tindex":51,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl","sourcecode":"return "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-1},{"failures":[],"tindex":52,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl","sourcecode":"return "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-1},{"failures":[],"tindex":53,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMock:557","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-2},{"failures":[],"tindex":54,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:39","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n    org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n    return ;\n} "},"status":-1},{"failures":[],"tindex":55,"variableMapping":{"toMock":"toMock","this":"control","mockedMethods":"mockedMethodArray"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-1},{"failures":[],"tindex":56,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":57,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MocksControl:234","type":"CtThrowImpl","sourcecode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":58,"variableMapping":{"toMock":"toMock","this":"control","mockedMethods":"mockedMethodArray"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":59,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksControl:79","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":60,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":61,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-1},{"failures":[],"tindex":62,"variableMapping":{"this":"state"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireVoidMethod()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":-2},{"failures":[],"tindex":63,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":-1},{"failures":[],"tindex":64,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.closeMethod()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":-2},{"failures":[],"tindex":65,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MockBuilder:114","type":"CtReturnImpl","sourcecode":"return this"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":-2},{"failures":[],"tindex":66,"variableMapping":{"state":"state"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.MocksControl:221","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":-1},{"failures":[],"tindex":67,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.assertRecordState()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":0},{"failures":[],"tindex":68,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.ReplayState:105","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":-2},{"failures":[],"tindex":69,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":-1},{"failures":[],"tindex":70,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)"},"status":-1},{"failures":[],"tindex":71,"variableMapping":{"toMock":"toMock","name":"name","this":"control","mockedMethods":"mockedMethodArray"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":0},{"failures":[],"tindex":72,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MocksControl:83","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":73,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MockBuilder:148","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-1},{"failures":[],"tindex":74,"variableMapping":{"toMock":"toMock","name":"name","this":"control","mockedMethods":"mockedMethodArray"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":75,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":76,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:51","type":"CtAssignmentImpl","sourcecode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-2},{"failures":[],"tindex":77,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl","sourcecode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])"},"status":-1},{"failures":[],"tindex":78,"variableMapping":{"type":"org.easymock.MockType.NICE"},"series":0,"name":"replace","transplant":{"position":"org.easymock.EasyMock:491","type":"CtReturnImpl","sourcecode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:520","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)"},"status":-2},{"failures":[],"tindex":79,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.EasyMock:491","type":"CtReturnImpl","sourcecode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:520","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)"},"status":-2},{"failures":[],"tindex":80,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:520","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)"},"status":-2},{"failures":[],"tindex":81,"variableMapping":{"type":"org.easymock.MockType.NICE"},"series":0,"name":"add","transplant":{"position":"org.easymock.EasyMock:491","type":"CtReturnImpl","sourcecode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:520","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)"},"status":-2},{"failures":[],"tindex":82,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.EasyMock:491","type":"CtReturnImpl","sourcecode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:520","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)"},"status":-2},{"failures":[],"tindex":83,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.MocksControl:83","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:520","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)"},"status":-2},{"failures":[],"tindex":84,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:520","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)"},"status":-2},{"failureDictionary":{}},{"memory":8006,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613}],"os.version":"3.2.0-4-amd64"}]

[{"failures":[],"tindex":1,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-1},{"failures":[],"tindex":2,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-2},{"failures":[],"tindex":3,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.UnorderedBehavior:108","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-2},{"failures":[],"tindex":4,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-2},{"failures":[],"tindex":5,"variableMapping":{"lastMethodCall":"this","expected":"this"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.UnorderedBehavior:108","type":"CtReturnImpl","sourcecode":"return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-2},{"failures":[],"tindex":6,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-2},{"failures":[],"tindex":7,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-2},{"failures":[],"tindex":8,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.matchers.Null:39","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuffer.append(\"isNull()\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-2},{"failures":[],"tindex":9,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl","sourcecode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))"},"status":-2},{"failures":[],"tindex":10,"variableMapping":{"this":"this","mockName":"mockName"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.Invocation:195","type":"CtIfImpl","sourcecode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":11,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.Invocation:195","type":"CtIfImpl","sourcecode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":12,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.Invocation:195","type":"CtIfImpl","sourcecode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":13,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":-2},{"failures":[],"tindex":14,"variableMapping":{"this":"this","mockName":"mockName"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.Invocation:195","type":"CtIfImpl","sourcecode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":0},{"failures":[],"tindex":15,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.Invocation:195","type":"CtIfImpl","sourcecode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":0},{"failures":[],"tindex":16,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.Invocation:195","type":"CtIfImpl","sourcecode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":0},{"failures":[],"tindex":17,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:40","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":-2},{"failures":[],"tindex":18,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl","sourcecode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":19,"variableMapping":{"state":"state","value":"threadSafe"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MocksControl:232","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":20,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.asStub()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":21,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":22,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:283","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-2},{"failures":[],"tindex":23,"variableMapping":{"this":"state"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-2},{"failures":[],"tindex":24,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.IMocksControlState.assertRecordState()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":0},{"failures":[],"tindex":25,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-2},{"failures":[],"tindex":26,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:56","type":"CtReturnImpl","sourcecode":"return com.google.dexmaker.stock.ProxyBuilder<T>.build()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-2},{"failures":[],"tindex":27,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl","sourcecode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}"},"status":-1},{"failures":[],"tindex":28,"variableMapping":{"method":"m"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl","sourcecode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-2},{"failures":[],"tindex":29,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-1},{"failures":[],"tindex":30,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-1},{"failures":[],"tindex":31,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:210","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-2},{"failures":[],"tindex":32,"variableMapping":{"result":"m"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-2},{"failures":[],"tindex":33,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-2},{"failures":[],"tindex":34,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl","sourcecode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-2},{"failures":[],"tindex":35,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.Invocation:76","type":"CtReturnImpl","sourcecode":"return java.lang.Object[]"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-2},{"failures":[],"tindex":36,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl","sourcecode":"return java.lang.reflect.Method"},"status":-2},{"failures":[],"tindex":37,"variableMapping":{},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl","sourcecode":"return \"gt\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-1},{"failures":[],"tindex":38,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.Capture:132","type":"CtReturnImpl","sourcecode":"return \"Nothing captured yet\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-1},{"failures":[],"tindex":39,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl","sourcecode":"return \"geq\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-1},{"failures":[],"tindex":40,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.EasyMock:1204","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-2},{"failures":[],"tindex":41,"variableMapping":{},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl","sourcecode":"return \"lt\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-2},{"failures":[],"tindex":42,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.Result:68","type":"CtReturnImpl","sourcecode":"return \"Answer returning \" + java.lang.Object"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-2},{"failures":[],"tindex":43,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl","sourcecode":"return \"gt\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-2},{"failures":[],"tindex":44,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.EasyMockSupport:162","type":"CtReturnImpl","sourcecode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-2},{"failures":[],"tindex":45,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.Result:115","type":"CtReturnImpl","sourcecode":"return org.easymock.IAnswer<?>.toString()"},"status":-2},{"failures":[],"tindex":46,"variableMapping":{"this":"lastThread","lastThread":"this"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":-2},{"failures":[],"tindex":47,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":-2},{"failures":[],"tindex":48,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":-1},{"failures":[],"tindex":49,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":-2},{"failures":[],"tindex":50,"variableMapping":{"this":"this","lastThread":"this"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":-2},{"failures":[],"tindex":51,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":-1},{"failures":[],"tindex":52,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":0},{"failures":[],"tindex":53,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.Results:77","type":"CtReturnImpl","sourcecode":"return null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":-2},{"failures":[],"tindex":54,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl","sourcecode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} "},"status":-1},{"failures":[],"tindex":55,"variableMapping":{"constructorArgs":"constructorArgs"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl","sourcecode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":-1},{"failures":[],"tindex":56,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl","sourcecode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":-1},{"failures":[],"tindex":57,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl","sourcecode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":-1},{"failures":[],"tindex":58,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.RecordState:65","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":-2},{"failures":[],"tindex":59,"variableMapping":{"constructorArgs":"constructorArgs"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl","sourcecode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":0},{"failures":[],"tindex":60,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":0},{"failures":[],"tindex":61,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl","sourcecode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":0},{"failures":[],"tindex":62,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ReflectionUtils:106","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":-2},{"failures":[],"tindex":63,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl","sourcecode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])"},"status":-1},{"failures":[],"tindex":64,"variableMapping":{"this":"toAssign"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:85","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":-1},{"failures":[],"tindex":65,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl","sourcecode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":-2},{"failures":[],"tindex":66,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":-2},{"failures":[],"tindex":67,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MocksControl:201","type":"CtAssignmentImpl","sourcecode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":-2},{"failures":[],"tindex":68,"variableMapping":{"result":"toAssign","bound":"toAssign","this":"toAssign"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":-2},{"failures":[],"tindex":69,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl","sourcecode":"new org.easymock.internal.JavaProxyFactory()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":0},{"failures":[],"tindex":70,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.EasyMockSupport:639","type":"CtWhileImpl","sourcecode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, java.util.List<java.lang.Object>);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":-2},{"failures":[],"tindex":71,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.MocksBehavior:87","type":"CtLocalVariableImpl","sourcecode":"final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":-2},{"failures":[],"tindex":72,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMockSupport:662","type":"CtForEachImpl","sourcecode":"for (java.lang.Object java.lang.Object : java.util.List<java.lang.Object>) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass())) {\n        if (java.lang.Object != null) {\n            throw new java.lang.RuntimeException((((((\"At least two mocks can be assigned to \" + java.lang.reflect.Field) + \": \") + java.lang.Object) + \" and \") + java.lang.Object));\n        } \n        java.lang.Object = java.lang.Object;\n    } \n}"},"status":-1},{"failures":[],"tindex":73,"variableMapping":{"this":"this","mocks":"mocks"},"series":0,"name":"replace","transplant":{"position":"org.easymock.EasyMock:2066","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":-1},{"failures":[],"tindex":74,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":-1},{"failures":[],"tindex":75,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.ArgumentToString:83","type":"CtIfImpl","sourcecode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":-2},{"failures":[],"tindex":76,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl","sourcecode":"return \"gt\""},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":-2},{"failures":[],"tindex":77,"variableMapping":{"this":"this","mocks":"mocks"},"series":0,"name":"add","transplant":{"position":"org.easymock.EasyMock:2066","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":-1},{"failures":[],"tindex":78,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl","sourcecode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":0},{"failures":[],"tindex":79,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.EasyMock:2038","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":-1},{"failures":[],"tindex":80,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":-2},{"failures":[],"tindex":81,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.EasyMock:2079","type":"CtForEachImpl","sourcecode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}"},"status":-1},{"failures":[],"tindex":82,"variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":-1},{"failures":[],"tindex":83,"variableMapping":{},"series":0,"name":"replaceWittgenstein","transplant":{"position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":-1},{"failures":[],"tindex":84,"variableMapping":{},"series":0,"name":"replaceReaction","transplant":{"position":"org.easymock.internal.RecordState:240","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":-1},{"failures":[],"tindex":85,"variableMapping":{},"series":0,"name":"replaceRandom","transplant":{"position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":-1},{"failures":[],"tindex":86,"variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"org.easymock.internal.RecordState:240","type":"CtIfImpl","sourcecode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":0},{"failures":[],"tindex":87,"variableMapping":{},"series":0,"name":"addWittgenstein","transplant":{"position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl","sourcecode":"org.easymock.internal.Result = null"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":0},{"failures":[],"tindex":88,"variableMapping":{},"series":0,"name":"addReaction","transplant":{"position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl","sourcecode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")"},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":0},{"failures":[],"tindex":89,"variableMapping":{},"series":0,"name":"addRandom","transplant":{"position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} "},"type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":-2},{"failures":[],"tindex":90,"series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.easymock.internal.RecordState:99","type":"CtIfImpl","sourcecode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} "},"status":-1},{"failureDictionary":{}},{"memory":8006,"os.arch":"amd64","os.name":"Linux","cpu":[{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613},{"core":4,"vendor":"AMD","model":"Dual-Core AMD Opteron(tm) Processor 2218","mhz":2613}],"os.version":"3.2.0-4-amd64"}]

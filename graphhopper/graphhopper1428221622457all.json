[{"failures":[],"tindex":"adf02eac-db6b-11e4-844a-85e895f6ba22","variableMapping":{"d":"this"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:270","type":"CtIfImpl","sourcecode":"if (java.lang.String.trim().isEmpty())\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:152","type":"CtIfImpl","sourcecode":"if ((long) != 0)\n    throw new java.lang.IllegalStateException(((\"You must not register a FlagEncoder (\" + java.lang.Object.(toString())) + \") twice!\"));\n"},"status":-2},{"failures":[],"tindex":"adf362fd-db6b-11e4-844a-812945aa9b00","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Unzipper:69","type":"CtLocalVariableImpl","sourcecode":"double double = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:226","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"adf362fe-db6b-11e4-844a-af332ebce802","variableMapping":{"high":"flags","highKey":"directionBitMask","key":"dir"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:123","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:255","type":"CtIfImpl","sourcecode":"if ((long == (long)) || (long == 0))\n    return long;\n"},"status":-1},{"failures":[],"tindex":"adf362ff-db6b-11e4-844a-27f9fa6546c0","variableMapping":{"newSegs":"segments","segments":"segments"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:119","type":"CtAssignmentImpl","sourcecode":"int[][] = int[][]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:294","type":"CtAssignmentImpl","sourcecode":"int[][] = new int[0][]"},"status":0},{"failures":[43,44,45,2,3,4,6,46,47,8,48,49,50,51,52,53,54,55,36,40,42],"tindex":"adf36300-db6b-11e4-844a-c967554a624f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:98","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.LevelGraphStorage.EdgeSkipIteratorImpl.next()"},"status":-1},{"failures":[],"tindex":"adf36301-db6b-11e4-844a-21cdfce8c13e","variableMapping":{"this":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:323","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.EncodingManager.(getVehicleCount()) == 0)\n    throw new java.lang.IllegalStateException(\"No encoder is active!\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodingManager.registerEncoder(((com.graphhopper.routing.util.AbstractFlagEncoder)(com.graphhopper.routing.util.FlagEncoder)))"},"status":0},{"failures":[],"tindex":"adf36302-db6b-11e4-844a-4b4d590fe498","variableMapping":{"need":"noOfStates"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:196","type":"CtForImpl","sourcecode":"for (int int = 4 ; int < 32 ; int++) {\n    if (int <= ((1 << int) - 12)) {\n        return (1 << int) - 12;\n    } \n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TraversalMode:86","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return com.graphhopper.util.EdgeIteratorState.getEdge();\n"},"status":-1},{"failures":[56,57],"tindex":"adf36303-db6b-11e4-844a-b574f8a6b4ba","variableMapping":{"str":"str"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:307","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0)\n    java.lang.StringBuilder.append(\",\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:305","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    if ((java.lang.StringBuilder.length()) > 0)\n        java.lang.StringBuilder.append(\",\");\n    \n    java.lang.StringBuilder.append(com.graphhopper.routing.util.AbstractFlagEncoder.toString());\n    java.lang.StringBuilder.append(\"|\");\n    java.lang.StringBuilder.append(com.graphhopper.routing.util.AbstractFlagEncoder.getPropertiesString());\n}"},"status":-1},{"failures":[],"tindex":"adf38a14-db6b-11e4-844a-fd6e2150c2e9","variableMapping":{"nodeId":"hash","mainNodes":"hash"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:340","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:345","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"adf38a15-db6b-11e4-844a-a7e00a50db8e","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:176","type":"CtReturnImpl","sourcecode":"return \"mtb\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:393","type":"CtReturnImpl","sourcecode":"return \"foot\""},"status":-2},{"failures":[58],"tindex":"adf38a16-db6b-11e4-844a-af6fb4082c51","variableMapping":{"acceptedRailways":"restrictedValues","way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:253","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"railway\")) && (!(com.graphhopper.reader.OSMWay.hasTag(\"railway\", java.util.HashSet<java.lang.String>))))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:231","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(java.util.List<java.lang.String>, java.util.HashSet<java.lang.String>))\n    return 0;\n"},"status":-1},{"failures":[59,60],"tindex":"adf38a17-db6b-11e4-844a-7d27100fb314","variableMapping":{"newAdjIndex":"node","newBaseIndex":"node"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:253","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int < 0))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:112","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHBitSetImpl.clear(int)"},"status":-1},{"failures":[61],"tindex":"adf38a18-db6b-11e4-844a-5d72ee167671","variableMapping":{"byteCount":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:152","type":"CtIfImpl","sourcecode":"if (long < 0) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:685","type":"CtReturnImpl","sourcecode":"return (long & (long)) != 0"},"status":-1},{"failures":[62,48,63,64,41,65],"tindex":"adf38a19-db6b-11e4-844a-c952e38801a9","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1506","type":"CtReturnImpl","sourcecode":"return 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTreeSC:63","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[],"tindex":"adf38a1a-db6b-11e4-844a-0fa6ea2154f8","variableMapping":{"maxLatTmp":"minLon","minLatTmp":"minLon"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:164","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:157","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.shapes.BBox.double"},"status":-2},{"failures":[0,66,67,68],"tindex":"adf38a1b-db6b-11e4-844a-f17ca032f7f1","variableMapping":{"unpavedBit":"acceptBit","shift":"index"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:196","type":"CtAssignmentImpl","sourcecode":"long = 1L << (int++)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:165","type":"CtAssignmentImpl","sourcecode":"long = 1L << int"},"status":-1},{"failures":[],"tindex":"adf38a1c-db6b-11e4-844a-f5ffba035649","variableMapping":{"shiftSum":"from"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:167","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"sum of all shifts does not fit into a long variable\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:59","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.AbstractBidirAlgo.initFrom(int, 0)"},"status":0},{"failures":[69],"tindex":"adf38a1d-db6b-11e4-844a-dd02e22dcfce","variableMapping":{"size":"defaultValue"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:132","type":"CtReturnImpl","sourcecode":"return (long) / 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:106","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedValue.setValue(long, long)"},"status":-1},{"failures":[],"tindex":"adf3b12e-db6b-11e4-844a-db7c27fed5fa","variableMapping":{"acceptBit":"acceptBit","ferryBit":"ferryBit","ferries":"ferries","way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:169","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.HashSet<java.lang.String>)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\");\n    if (java.lang.String == null)\n        java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motor_vehicle\");\n    \n    if ((((java.lang.String == null) && (!(com.graphhopper.reader.OSMWay.hasTag(\"foot\")))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\")))) || (\"yes\".equals(java.lang.String)))\n        return (long) | (long);\n    \n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:218","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.HashSet<java.lang.String>)) {\n        java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"bicycle\");\n        if (((java.lang.String == null) && (!(com.graphhopper.reader.OSMWay.hasTag(\"foot\")))) || (\"yes\".equals(java.lang.String)))\n            return (long) | (long);\n        \n    } \n    return 0;\n} "},"status":0},{"failures":[],"tindex":"adf3b12f-db6b-11e4-844a-9faf2fabc64d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:268","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"sac_scale\");\n    if (java.lang.String != null) {\n        if (\"hiking\".equals(java.lang.String))\n            long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n        else\n            long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n        \n    } else {\n        long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n    }\n    long |= long;\n    int int = 0;\n    if (long != 0)\n        int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)));\n    \n    long = com.graphhopper.routing.util.FootFlagEncoder.setLong(long, com.graphhopper.routing.util.PriorityWeighting.int, com.graphhopper.routing.util.FootFlagEncoder.handlePriority(com.graphhopper.reader.OSMWay, int));\n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, com.graphhopper.routing.util.FootFlagEncoder.int, com.graphhopper.routing.util.FootFlagEncoder.int, com.graphhopper.routing.util.FootFlagEncoder.int);\n    long |= long;\n}"},"status":-2},{"failures":[],"tindex":"adf3ff50-db6b-11e4-844a-5d6cb7937b68","variableMapping":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.UNCHANGED":"com.graphhopper.routing.util.PriorityCode.VERY_NICE","trackType":"highway","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.VERY_NICE","com.graphhopper.routing.util.PriorityCode.VERY_NICE":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:142","type":"CtIfImpl","sourcecode":"if (\"grade1\".equals(java.lang.String))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse if (java.lang.String == null)\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse if (java.lang.String.startsWith(\"grade\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:139","type":"CtIfImpl","sourcecode":"if (\"track\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if (\"grade1\".equals(java.lang.String))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else if (java.lang.String == null)\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else if (java.lang.String.startsWith(\"grade\"))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-2},{"failures":[55,35,36,70,71,42],"tindex":"adf3ff51-db6b-11e4-844a-9d5d18c67fa3","variableMapping":{"edge":"edgeState"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:409","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.EdgeSkipIterState.isShortcut()))\n    throw new java.lang.IllegalStateException(\"getWeight is only available for shortcuts\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:83","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, true)"},"status":-1},{"failures":[72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"adf3ff52-db6b-11e4-844a-6331cd30d393","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:94","type":"CtOperatorAssignmentImpl","sourcecode":"long &= long"},"status":-1},{"failures":[],"tindex":"adf3ff53-db6b-11e4-844a-d3b45cbe8cef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:161","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[84,67,85],"tindex":"adf3ff54-db6b-11e4-844a-9b0c3e676e74","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:256","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    long |= com.graphhopper.routing.util.AbstractFlagEncoder.handleRelationTags(com.graphhopper.reader.OSMRelation, long);\n}"},"status":-1},{"failures":[0,56,33,63,86,87,58],"tindex":"adf3ff55-db6b-11e4-844a-b5ee46a98b0f","variableMapping":{"nanoTime":"acceptBit"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.StopWatch:68","type":"CtReturnImpl","sourcecode":"return (long) / 1000000"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:238","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[],"tindex":"adf3ff56-db6b-11e4-844a-3d37d028cf62","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:133","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedValue.getBits()"},"status":0},{"failures":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,107,108,109,110,111,112,113,114,115,116,117,66,118,43,119,44,120,121,122,123,124,1,125,126,45,127,2,3,128,129,130,131,132,133,4,134,5,135,136,137,138,139,140,141,142,143,144,145,146,6,147,148,149,150,7,46,151,47,152,153,154,8,155,9,156,157,10,158,159,160,161,11,12,162,163,164,165,166,167,13,168,14,169,170,171,172,173,174,175,176,177,178,179,180,15,181,182,183,184,16,185,186,187,188,189,190,17,191,192,193,194,195,196,197,198,62,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,18,19,250,251,252,253,254,255,20,256,21,257,258,259,260,261,262,263,264,265,266,267,268,22,269,270,271,272,23,273,274,275,276,277,278,24,279,280,25,281,282,283,284,26,27,285,286,287,288,289,290,28,291,29,292,293,294,295,296,297,298,299,300,301,302,303,30,304,305,306,307,31,308,309,310,311,312,313,32,314,315,316,56,317,48,318,319,33,320,321,322,63,57,323,59,324,325,326,60,327,328,329,330,331,332,333,334,335,336,336,337,337,338,338,339,339,340,340,341,341,342,342,343,343,344,344,345,345,346,346,347,347,49,348,50,51,349,350,351,352,52,53,54,353,354,55,35,36,355,356,357,37,358,359,38,64,360,39,361,40,41,362,363,65,364,365,70,71,366,42],"tindex":"adf781c7-db6b-11e4-844a-c7c199c0cdc8","variableMapping":{"properties":"this"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:190","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.create(100)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:135","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"geometry.version\", com.graphhopper.util.Constants.int)"},"status":-1},{"failures":[67,85,367,73,368,78,81],"tindex":"adf7a8d8-db6b-11e4-844a-8d42e5350ab4","variableMapping":{"id":"priorityFromRelation"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:487","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:303","type":"CtAssignmentImpl","sourcecode":"int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)))"},"status":-1},{"failures":[],"tindex":"adf7a8d9-db6b-11e4-844a-f979bebbf817","variableMapping":{"newUniqueOsmId":"tmpValue"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:837","type":"CtReturnImpl","sourcecode":"return (long)++"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtReturnImpl","sourcecode":"return long | long"},"status":-2},{"failures":[],"tindex":"adf7cfea-db6b-11e4-844a-1d17050f290a","variableMapping":{"fileDetails":"val"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:229","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:720","type":"CtReturnImpl","sourcecode":"return java.lang.Double.java.lang.Double.parseDouble(java.lang.String)"},"status":-2},{"failures":[],"tindex":"adf7cfeb-db6b-11e4-844a-db2711171d0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:154","type":"CtLocalVariableImpl","sourcecode":"java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String)"},"status":-2},{"failures":[369,370,371,372,373,374,375,376,377,378,201,209,210,379,232,240,241],"tindex":"adf7cfec-db6b-11e4-844a-3341445f4425","variableMapping":{"incEleSum":"maxLatTmp","incDist2DSum":"maxLatTmp"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:198","type":"CtLocalVariableImpl","sourcecode":"double double = double > 1 ? double / double : 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:164","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"status":-1},{"failures":[],"tindex":"adf7cfed-db6b-11e4-844a-e32bf274602d","variableMapping":{"ghLocation":"entry"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:360","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new java.lang.IllegalArgumentException(\"graphhopper location cannot be null\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:158","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[56,57],"tindex":"adf7cfee-db6b-11e4-844a-595711e42e36","variableMapping":{"str":"str"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:307","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0)\n    java.lang.StringBuilder.append(\",\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:305","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    if ((java.lang.StringBuilder.length()) > 0)\n        java.lang.StringBuilder.append(\",\");\n    \n    java.lang.StringBuilder.append(com.graphhopper.routing.util.AbstractFlagEncoder.toString());\n    java.lang.StringBuilder.append(\"|\");\n    java.lang.StringBuilder.append(com.graphhopper.routing.util.AbstractFlagEncoder.getPropertiesString());\n}"},"status":-1},{"failures":[],"tindex":"adf7cfef-db6b-11e4-844a-e1ec8cc0b195","variableMapping":{"flags":"flags","scDirMask":"defaultValue"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:259","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:106","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedValue.setValue(long, long)"},"status":0},{"failures":[],"tindex":"adf7cff0-db6b-11e4-844a-7d26b501e314","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:272","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.EdgeSkipIterator com.graphhopper.util.EdgeSkipIterator = com.graphhopper.util.EdgeSkipExplorer.setBaseNode(com.graphhopper.util.EdgeIteratorState.getAdjNode())"},"status":-2},{"failures":[],"tindex":"adf7cff1-db6b-11e4-844a-2f085f674a44","variableMapping":{"size":"length","capacity":"segmentSizePower"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:224","type":"CtIfImpl","sourcecode":"if (int < (int)) {\n    throw new java.lang.IllegalStateException(\"BinHeap contains too many elements to fit in new capacity.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:112","type":"CtForImpl","sourcecode":"for (int int = byte[][].int ; int < (byte[][].int) ; int++) {\n    byte[][][int] = new byte[1 << (int)];\n}"},"status":-2},{"failures":[92,100,102,103,104,0,66,1,127,2,3,4,5,6,7,47,8,9,10,161,11,12,13,14,15,16,187,17,249,18,19,20,21,22,23,275,24,25,284,26,27,28,29,30,31,310,32,48,34,380,59,60,327,340,343,50,51,52,54,55,35,36,39,40,41,42],"tindex":"adf7cff2-db6b-11e4-844a-03ce4ed1c436","variableMapping":{"acceptBit":"directionBitMask","ferryBit":"directionBitMask"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:225","type":"CtReturnImpl","sourcecode":"return (long) | (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:258","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"status":-1},{"failures":[],"tindex":"adf7cff3-db6b-11e4-844a-297a0fcf762e","variableMapping":{"deltaX":"maxLat","tmp":"minLat"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:58","type":"CtLocalVariableImpl","sourcecode":"double double = double * (1.0 - double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:215","type":"CtLocalVariableImpl","sourcecode":"double double = ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) / 2"},"status":-2},{"failures":[381,317,48,318,320,321,348,50,51,349,350,351,352,52,54,353,354,55,36,355,356,357,37,358,359,38,64,360,39,361,40,41,362,363,65,364,365,70,71,366,42],"tindex":"adf7f704-db6b-11e4-844a-e933340b1a28","variableMapping":{"width":"size","lonSimilar":"size"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:93","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    int = (int) - 1;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:259","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.java.util.Arrays.fill(float[], int, ((int) + 1), 0.0F)"},"status":-1},{"failures":[],"tindex":"adf7f705-db6b-11e4-844a-bd0d60349115","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:95","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:189","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-2},{"failures":[84,67,85],"tindex":"adf7f706-db6b-11e4-844a-fbb5399adf05","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:256","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    long |= com.graphhopper.routing.util.AbstractFlagEncoder.handleRelationTags(com.graphhopper.reader.OSMRelation, long);\n}"},"status":-1},{"failures":[],"tindex":"adf7f707-db6b-11e4-844a-0348a20d08b1","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:71","type":"CtLocalVariableImpl","sourcecode":"double double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:226","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay)"},"status":-2},{"failures":[],"tindex":"adf7f708-db6b-11e4-844a-7f10115bd08b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:123","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"adf7f709-db6b-11e4-844a-613e568c7605","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:566","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.PriorityWeighting.int :\n        return com.graphhopper.routing.util.EncodedValue.setValue(long, long);\n    default :\n        return com.graphhopper.routing.util.AbstractFlagEncoder.setLong(long, int, long);\n}"},"status":-2},{"failures":[72,77],"tindex":"adf7f70a-db6b-11e4-844a-bf82d2753244","variableMapping":{"way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:446","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"service\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:69","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"status":-1},{"failures":[325],"tindex":"adf7f70b-db6b-11e4-844a-ab24b090508c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:79","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.PrepareRoutingSubnetworks.keepLargeNetworks(java.util.Map<java.lang.Integer, java.lang.Integer>)"},"status":-1},{"failures":[329],"tindex":"adf7f70c-db6b-11e4-844a-9712bd5268a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:146","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bridge\", \"yes\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))) {\n} else {\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = com.graphhopper.util.PointList.getElevation(0);\n    double double = 0;\n    double = com.graphhopper.util.EdgeIteratorState.getDistance();\n    double double = (com.graphhopper.util.PointList.getElevation(((com.graphhopper.util.PointList.size()) - 1))) - double;\n    if (double > 0.1) {\n        double = double;\n        double = double;\n    } else if (double < (-0.1)) {\n        double = -double;\n        double = double;\n    } \n    double double = double > 1 ? double / double : 0;\n    double double = double > 1 ? double / double : 0;\n    double double = (double - double) - double;\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getHighwaySpeed(\"cycleway\");\n    if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.FlagEncoder.int)) {\n        double double = com.graphhopper.routing.util.AbstractFlagEncoder.getSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n    if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.FlagEncoder.int)) {\n        double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n}"},"status":-1},{"failures":[],"tindex":"adf7f70d-db6b-11e4-844a-9ffb14798d03","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:57","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.AbstractRoutingAlgorithm.checkAlreadyRun()"},"status":0},{"failures":[],"tindex":"adf7f70e-db6b-11e4-844a-c1252feb56a8","variableMapping":{"java.lang.Double.MAX_VALUE":"baseOrientation","existingDirectWeight":"java.lang.Math.PI"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:610","type":"CtIfImpl","sourcecode":"if (double >= (java.lang.Double.double))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:74","type":"CtIfImpl","sourcecode":"if (double < ((-(java.lang.Math.double)) + double))\n    double = double + (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"status":-2},{"failures":[92,119,120,123,48,318,49,348,50,51,349,350,351,52,53,54,354,55,35,36,355,356,357,358,359,360,39,361,40,362,363,65,365,70,71,366,42],"tindex":"adf81e1f-db6b-11e4-844a-7fce66a7e226","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:58","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.initNodeAndEdgeEntrySize()"},"status":-1},{"failures":[],"tindex":"adf81e20-db6b-11e4-844a-578842aa2bf2","variableMapping":{"byteCount":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:152","type":"CtIfImpl","sourcecode":"if (long < 0) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:685","type":"CtReturnImpl","sourcecode":"return (long & (long)) != 0"},"status":-2},{"failures":[],"tindex":"adf81e21-db6b-11e4-844a-cfc19b647f99","variableMapping":{"bs":"bs"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHBitSetImpl:76","type":"CtInvocationImpl","sourcecode":"((com.graphhopper.coll.GHBitSetImpl)(com.graphhopper.coll.GHBitSet)).or(this)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHBitSetImpl:73","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHBitSet.clear()"},"status":0},{"failures":[382],"tindex":"adf81e22-db6b-11e4-844a-65ef5e361b01","variableMapping":{"maxLeafEntries":"nextTurnBit"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:52","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:209","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,107,108,109,110,111,112,113,114,115,116,117,66,383,384,385,386,43,119,44,120,121,122,123,124,1,125,126,45,127,2,3,128,129,130,131,132,133,4,134,5,135,136,137,138,139,140,141,142,143,144,145,146,6,147,148,149,150,7,46,151,47,152,153,154,8,155,9,157,10,158,159,160,161,11,12,162,163,164,165,166,167,13,168,14,169,170,171,172,173,174,175,176,177,178,179,180,15,181,182,183,184,16,185,186,187,188,189,190,17,191,192,193,194,195,197,198,62,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,219,220,221,222,224,225,226,227,228,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,247,248,21,270,280,25,281,282,283,284,26,27,285,286,287,288,289,290,28,291,29,292,293,294,295,296,297,298,299,300,301,302,303,30,304,305,306,307,31,308,309,310,311,312,313,32,314,315,316,56,317,48,318,319,33,320,321,322,63,57,323,59,324,325,326,60,327,328,329,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,49,348,50,51,349,350,351,352,52,53,54,353,354,55,35,36,355,356,357,37,358,359,38,64,360,39,361,40,41,362,363,65,364,365,70,71,366,42],"tindex":"adf81e23-db6b-11e4-844a-355db49b64d6","variableMapping":{"compressionLevel":"segmentsToCreate"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:71","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:110","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"adf81e24-db6b-11e4-844a-b5b8c2e345e4","variableMapping":{"way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:171","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:201","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"sac_scale\")"},"status":0},{"failures":[],"tindex":"adf81e25-db6b-11e4-844a-9983c834a592","variableMapping":{"otherEncoder":"otherEncoder","flags":"flags","this":"otherEncoder"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:86","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, com.graphhopper.routing.util.EncodedDoubleValue.getDoubleValue(long))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:122","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedValue.setValue(long, com.graphhopper.routing.util.EncodedValue.getValue(long))"},"status":-2},{"failures":[],"tindex":"adf81e26-db6b-11e4-844a-1fb6821208b4","variableMapping":{"leafEntry":"component","nodeId":"node"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:431","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.InMemLeafEntry.addNode(int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:111","type":"CtInvocationImpl","sourcecode":"gnu.trove.list.array.TIntArrayList.add(int)"},"status":-2},{"failures":[],"tindex":"adf81e27-db6b-11e4-844a-41be8cdf286b","variableMapping":{"highwayValue":"tt"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:238","type":"CtIfImpl","sourcecode":"if ((\"motorway\".equals(java.lang.String)) || (\"motorway_link\".equals(java.lang.String)))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:184","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.equals(\"grade1\"))))\n    return 0;\n"},"status":0},{"failures":[],"tindex":"adf81e28-db6b-11e4-844a-c3a9d0e61080","variableMapping":{"edgeState":"edge"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PreparationWeighting:48","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.EdgeIteratorState instanceof com.graphhopper.util.EdgeSkipIterState) {\n    com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.util.EdgeIteratorState));\n    if (com.graphhopper.util.EdgeSkipIterState.isShortcut())\n        return com.graphhopper.util.EdgeSkipIterState.getWeight();\n    \n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:56","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.util.EdgeIteratorState.getDistance()) / (double * (com.graphhopper.routing.util.FastestWeighting.double))"},"status":-2},{"failures":[105,112,387,382,388,389],"tindex":"adf81e29-db6b-11e4-844a-d7b3f0458fc3","variableMapping":{"fullyLoaded":"restricted"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1079","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"No configuration changes are possible after loading the graph\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:618","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if ((double != 0) || java.lang.Double.(java.lang.Double.isInfinite(double)))\n        throw new java.lang.IllegalArgumentException(\"Restricted turn can only have infinite costs (or use 0)\");\n    \n} else {\n    if (double >= (int))\n        throw new java.lang.IllegalArgumentException(\"Cost is too high. Or specifiy restricted == true\");\n    \n}"},"status":-1},{"failures":[72,74,75,76,77,79,80,81,82],"tindex":"adf81e2a-db6b-11e4-844a-ab3853424031","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:293","type":"CtReturnImpl","sourcecode":"return \"car\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:409","type":"CtReturnImpl","sourcecode":"return \"\""},"status":-1},{"failures":[390,391,392,393,394],"tindex":"adf81e2b-db6b-11e4-844a-f9451b6a6e72","variableMapping":{"high":"directionBitMask","highKey":"directionBitMask","key":"directionBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:123","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:229","type":"CtIfImpl","sourcecode":"if (boolean)\n    return long;\n"},"status":-1},{"failures":[],"tindex":"adf8453c-db6b-11e4-844a-97b2efdccc8a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:406","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[],"tindex":"adf8453d-db6b-11e4-844a-d97c8b65f14c","variableMapping":{"res":"encoded","value":"encoded"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:257","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long & 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:494","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.int, true)"},"status":0},{"failures":[],"tindex":"adf8453e-db6b-11e4-844a-d954eb5d755e","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:133","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:158","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getElevation(0)"},"status":-2},{"failures":[],"tindex":"adf8453f-db6b-11e4-844a-d7ce335c71e1","variableMapping":{"len":"flags","start":"directionBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:103","type":"CtLocalVariableImpl","sourcecode":"long long = long + long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:254","type":"CtLocalVariableImpl","sourcecode":"long long = long & (long)"},"status":-2},{"failures":[],"tindex":"adf84540-db6b-11e4-844a-090efaf47618","variableMapping":{"shift":"shift","preferWayEncoder":"preferWayEncoder"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:104","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue = new com.graphhopper.routing.util.EncodedValue(\"PreferWay\" , int , 3 , 1 , 3 , 7)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:132","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue = new com.graphhopper.routing.util.EncodedValue(\"PreferWay\" , int , 3 , 1 , 0 , 7)"},"status":0},{"failures":[395],"tindex":"adf84541-db6b-11e4-844a-1f2a38c2239c","variableMapping":{"dist":"distance"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:47","type":"CtReturnImpl","sourcecode":"return double * double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:47","type":"CtReturnImpl","sourcecode":"return double / (double)"},"status":-1},{"failures":[],"tindex":"adf84542-db6b-11e4-844a-4384f2420889","variableMapping":{"newUniqueOsmId":"acceptBit"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:837","type":"CtReturnImpl","sourcecode":"return (long)++"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:211","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[97,98,99,396,397,398,399,400,333],"tindex":"adf84543-db6b-11e4-844a-490466e51574","variableMapping":{"maxSpeed":"angle","fwdSpeed":"absY"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:329","type":"CtIfImpl","sourcecode":"if ((double >= 0) && ((double < 0) || (double < double)))\n    double = double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:37","type":"CtIfImpl","sourcecode":"if (double < 0.0) {\n    double = (double + double) / (double - double);\n    double = com.graphhopper.util.AngleCalc.double;\n} else {\n    double = (double - double) / (double + double);\n    double = com.graphhopper.util.AngleCalc.double;\n}"},"status":-1},{"failures":[68],"tindex":"adf84544-db6b-11e4-844a-b96aad1a4469","variableMapping":{"bytePos":"encoded"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:240","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:100","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, double)"},"status":-1},{"failures":[],"tindex":"adf84545-db6b-11e4-844a-4bce61a9d8ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:121","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.routing.util.EncodedValue.getValue(long)"},"status":-2},{"failures":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,44,401,402,403,315,316,323,59,324,325,326,60,327,330,331,332,333,334,335,49,348,50,51,349,350,351,352,52,53,54,353,354,55,35,36,355,356,357,37,358,359,38,64,360,39,361,40,41,362,363,65,364,365,70,71,366,42],"tindex":"adf84546-db6b-11e4-844a-011259ac525f","variableMapping":{"str":"_location"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMNode:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.trim().replaceAll(\"\\\\,\", \".\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:44","type":"CtAssignmentImpl","sourcecode":"java.lang.String = new java.io.File(\"\").getAbsolutePath()"},"status":-1},{"failures":[],"tindex":"adf84547-db6b-11e4-844a-05ea179ffbfa","variableMapping":{"d":"highway"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:270","type":"CtIfImpl","sourcecode":"if (java.lang.String.trim().isEmpty())\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:464","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.lang.String>.contains(java.lang.String)) || (double > 80)) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.HashSet<java.lang.String>))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-2},{"failures":[],"tindex":"adf84548-db6b-11e4-844a-03033281ec23","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:227","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << 63"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:52","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.util.EdgeSkipIterState.getFlags()"},"status":-2},{"failures":[99,106,0,107,109,112,113,114,115,116,117,66,48,318,319,33,320,322,61,404],"tindex":"adf84549-db6b-11e4-844a-21ba7fa8ddf8","variableMapping":{"prepared":"isRoundabout"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractAlgoPreparation:29","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"Call doWork only once!\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:239","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.HashSet<java.lang.String>)) || boolean) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\"))\n        long |= long;\n    else\n        long |= long;\n    \n} else\n    long |= long;\n"},"status":-1},{"failures":[317,48,318,320,321,348,50,51,349,350,351,352,52,54,353,354,55,36,355,356,357,37,358,359,38,64,360,39,361,40,41,362,363,65,364,365,70,71,366,42],"tindex":"adf8454a-db6b-11e4-844a-7547f4b09f30","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:30","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap.this(1000)"},"status":-1},{"failures":[],"tindex":"adf8454b-db6b-11e4-844a-15e602c0cf8c","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:223","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"bicycle\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:446","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"service\")"},"status":-2},{"failures":[405,73,406,75,407,408,78,409,410,81,411],"tindex":"adf8454c-db6b-11e4-844a-17f80cdd63f6","variableMapping":{"red":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:163","type":"CtAssignmentImpl","sourcecode":"int = 255"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:349","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer"},"status":-1},{"failures":[],"tindex":"adf8454d-db6b-11e4-844a-0dfe92fba421","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:108","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long / (int)))"},"status":-2},{"failures":[59,60,327],"tindex":"adf86c5e-db6b-11e4-844a-d1db6149e4ec","variableMapping":{"graph":"g"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:398","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.GraphStorage) == null)\n    throw new java.lang.IllegalStateException(\"Graph not initialized\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:65","type":"CtWhileImpl","sourcecode":"nextState : while (!(java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.empty())) {\n    com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState = java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.pop();\n    final int int = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.int;\n    final com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator;\n    if (com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.isStart()) {\n        int[][int] = int;\n        int[][int] = int;\n        (int)++;\n        gnu.trove.stack.array.TIntArrayStack.push(int);\n        com.graphhopper.coll.GHBitSetImpl.set(int);\n        com.graphhopper.util.EdgeIterator = com.graphhopper.storage.GraphStorage.createEdgeExplorer(com.graphhopper.routing.util.EdgeFilter).setBaseNode(int);\n    } else {\n        com.graphhopper.util.EdgeIterator = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.util.EdgeIterator;\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n    }\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if ((int[][int]) == 0) {\n            java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.resumeState(int, com.graphhopper.util.EdgeIterator));\n            java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.startState(int));\n            continue nextState;\n        } else if (com.graphhopper.coll.GHBitSetImpl.contains(int)) {\n            int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n        } \n    }\n    if ((int[][int]) == (int[][int])) {\n        gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList = new gnu.trove.list.array.TIntArrayList();\n        int int;\n        while ((int = gnu.trove.stack.array.TIntArrayStack.pop()) != int) {\n            gnu.trove.list.array.TIntArrayList.add(int);\n            com.graphhopper.coll.GHBitSetImpl.clear(int);\n        }\n        gnu.trove.list.array.TIntArrayList.add(int);\n        com.graphhopper.coll.GHBitSetImpl.clear(int);\n        java.util.ArrayList<gnu.trove.list.array.TIntArrayList>.add(gnu.trove.list.array.TIntArrayList);\n    } \n}"},"status":-1},{"failures":[],"tindex":"adf86c5f-db6b-11e4-844a-cd98c19a3b63","variableMapping":{"com.graphhopper.storage.LevelGraphStorage.MAX_WEIGHT":"com.graphhopper.util.DistanceCalcEarth.KM_MILE","java.lang.Double.POSITIVE_INFINITY":"com.graphhopper.util.DistanceCalcEarth.KM_MILE","weight":"com.graphhopper.util.DistanceCalcEarth.KM_MILE"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:413","type":"CtIfImpl","sourcecode":"if (double >= (com.graphhopper.storage.LevelGraphStorage.double))\n    return java.lang.Double.double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:377","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    java.lang.String = java.lang.String.substring(0, int).trim();\n    int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n    return int * (com.graphhopper.util.DistanceCalcEarth.double);\n} "},"status":-2},{"failures":[367,74,76,368,79,82],"tindex":"adf86c60-db6b-11e4-844a-1fa5785f03b6","variableMapping":{"line":"highway","key":"highway"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.TranslationMap:242","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    throw new java.lang.IllegalStateException((\"No key provided:\" + java.lang.String));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:497","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", java.util.HashSet<java.lang.String>)) {\n    if (boolean && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\"))))\n        com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n    else\n        com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n    \n} else if (\"cycleway\".equals(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-1},{"failures":[412],"tindex":"adf86c61-db6b-11e4-844a-bb4ca3ec4097","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:233","type":"CtIfImpl","sourcecode":"if (((boolean) && ((com.graphhopper.reader.OSMNode.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMNode.hasTag(\"ford\")))) && (!(com.graphhopper.reader.OSMNode.hasTag(java.util.List<java.lang.String>, java.util.HashSet<java.lang.String>))))\n    return long;\n"},"status":-1},{"failures":[],"tindex":"adf86c62-db6b-11e4-844a-1fd4c57f7035","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:271","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if (\"hiking\".equals(java.lang.String))\n        long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n    else\n        long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n    \n} else {\n    long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n}"},"status":-2},{"failures":[0,112,67,367,72,413,73,74,414,368,77,415,78,79,416],"tindex":"adf86c63-db6b-11e4-844a-57cc3956f23a","variableMapping":{"shift":"directionBitMask","tmpValue":"encoded"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:61","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:596","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"status":-1},{"failures":[],"tindex":"adf86c64-db6b-11e4-844a-6fbe8798c86e","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:480","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"surface\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:189","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-2},{"failures":[],"tindex":"adf86c65-db6b-11e4-844a-577b0927ccda","variableMapping":{"i":"encoded"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:90","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 7"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:233","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double)"},"status":-2},{"failures":[],"tindex":"adf86c66-db6b-11e4-844a-51099ea45a09","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc3D:45","type":"CtReturnImpl","sourcecode":"return \"EXACT3D\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:157","type":"CtReturnImpl","sourcecode":"return \"racingbike\""},"status":-2},{"failures":[417,418],"tindex":"adf86c67-db6b-11e4-844a-5dba6e30bd3f","variableMapping":{"index":"i"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1029","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:191","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[123,3,134,135,136,138,142,143,149,150,12,168,169,170,172,176,177,183,184,19,256,257,258,260,264,265,271,272,27,291,292,293,295,299,300,306,307,59,326],"tindex":"adf89378-db6b-11e4-844a-cd7b13bff945","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:158","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    int[][int] = int;\n} else {\n    int = ~int;\n    if ((int < (int)) && ((int[][int]) == (com.graphhopper.coll.SparseIntIntArray.int))) {\n        int[][int] = int;\n        int[][int] = int;\n        return int;\n    } \n    if ((boolean) && ((int) >= (int[].int))) {\n        com.graphhopper.coll.SparseIntIntArray.gc();\n        int = ~com.graphhopper.coll.SparseIntIntArray.(com.graphhopper.coll.SparseIntIntArray.binarySearch(int[], 0, int, int));\n    } \n    if ((int) >= (int[].int)) {\n        int int = com.graphhopper.util.Helper.com.graphhopper.util.Helper.idealIntArraySize(((int) + 1));\n        int[] int[] = new int[int];\n        int[] int[] = new int[int];\n        java.lang.System.java.lang.System.arraycopy(int[], 0, int[], 0, int[].int);\n        java.lang.System.java.lang.System.arraycopy(int[], 0, int[], 0, int[].int);\n        int[] = int[];\n        int[] = int[];\n    } \n    if (((int) - int) != 0) {\n        java.lang.System.java.lang.System.arraycopy(int[], int, int[], (int + 1), ((int) - int));\n        java.lang.System.java.lang.System.arraycopy(int[], int, int[], (int + 1), ((int) - int));\n    } \n    int[][int] = int;\n    int[][int] = int;\n    (int)++;\n}"},"status":-1},{"failures":[92,96,97,98,99,106,0,107,108,109,110,111,112,113,114,115,116,117,66,419,420,421,422,423,424,425,122,1,125,127,144,149,47,153,154,9,10,158,161,178,183,187,189,190,203,204,205,219,220,221,222,224,234,235,236,270,25,281,284,301,306,310,312,313,426,427,428,429,56,317,48,318,319,33,320,321,322,63,57,328,329,332,333,336,337,339,340,341,342,343,344,346,347,70],"tindex":"adf89379-db6b-11e4-844a-fdd5a290411e","variableMapping":{"WIDTH":"bufferIndex"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:250","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[(2 * (int)) * (int)]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:264","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = byte[][][int]"},"status":-1},{"failures":[106,0,107,108,109,110,111,112,113,84,114,115,116,117,66,44,390,430,323,86,431,432,87,58,34,433,434,435,61,412,436,437,438,439,404,440,441,387,380,442,443,67,382,444,85,68,325,445,446,405,367,447,72,413,73,388,448,391,449,450,451,452,453,454,74,455,456,406,414,457,458,459,75,407,392,460,461,462,463,464,76,465,466,467,328,329,468,408,368,469,77,415,78,389,470,393,471,472,473,474,475,476,79,477,478,409,416,479,410,80,81,394,480,481,482,483,484,485,82,486,487,411,488,331,35,360],"tindex":"adf8937a-db6b-11e4-844a-a3cf16f31e57","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:193","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EncodedDoubleValue = new com.graphhopper.routing.util.EncodedDoubleValue(\"Speed\" , int , int , double , java.util.Map<java.lang.String, java.lang.Integer>.get(\"cycleway\") , 30)"},"status":-1},{"failures":[],"tindex":"adf8937b-db6b-11e4-844a-4db68bdcba90","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:284","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[85],"tindex":"adf8937c-db6b-11e4-844a-51ec6beccaf7","variableMapping":{"nodeId":"relBitMask","nodeIdOffset":"relBitMask"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:285","type":"CtOperatorAssignmentImpl","sourcecode":"long += long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:523","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= int"},"status":-1},{"failures":[92,96,97,98,99,489,490,491,106,0,107,108,109,110,111,112,113,114,115,116,117,66,419,420,492,421,422,493,423,494,495,424,496,497,498,499,500,501,502,503,504,505,506,425,507,508,509,510,511,512,513,514,515,122,1,125,127,144,149,47,153,154,9,10,158,161,178,183,187,189,190,203,204,205,219,220,221,222,224,234,235,236,270,25,281,284,301,306,310,312,313,426,427,428,429,56,317,48,318,319,33,320,321,322,63,57,328,329,332,333,336,337,339,340,341,342,343,344,346,347,70],"tindex":"adf8937d-db6b-11e4-844a-37eafb75cfd6","variableMapping":{"intLow":"segmentSizeInBytes","intHigh":"segmentSizeInBytes"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:280","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | (int & 4294967295L)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:310","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.RAMDataAccess.((long)(getSegments())) * (int)"},"status":-1},{"failureDictionary":{"com.graphhopper.storage.LevelGraphStorageTest.testCopyTo":148,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":337,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":364,"com.graphhopper.storage.LevelGraphStorageTest.testCannotBeLoadedViaDifferentClass":122,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":194,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":18,"com.graphhopper.reader.OSMReaderTest.testFerry":106,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":100,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":101,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":413,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":407,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testMoreReal":204,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":317,"com.graphhopper.util.InstructionTest.testGetAzimuthAndGetDirection":400,"com.graphhopper.storage.LevelGraphStorageTest.testSetNodes":155,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":79,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":416,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":268,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":168,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_Get_Short_Long":494,"com.graphhopper.coll.CompressedArrayTest.testCompress":378,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":464,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":313,"com.graphhopper.storage.LevelGraphStorageTest.testPriosWhileDeleting":123,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":349,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":266,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":29,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSortHighLevelFirst":200,"com.graphhopper.util.AngleCalcTest.testOrientation":396,"com.graphhopper.storage.SynchedDAWrapperTest.testBoundsCheck":495,"com.graphhopper.storage.RAMDataAccessTest.testRenameNoFlush":510,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":54,"com.graphhopper.GraphHopperTest.testPrepare":318,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":65,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":276,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":49,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":298,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":447,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":96,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":360,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":218,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":76,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":89,"com.graphhopper.storage.LevelGraphStorageTest.internalDisconnect":45,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex":201,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":60,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":75,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":405,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":355,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":38,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":291,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":235,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":190,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat_withTurnCostEntries":9,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":374,"com.graphhopper.storage.LevelGraphStorageTest.testDetachEdge":127,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":55,"com.graphhopper.GraphHopperTest.testLoadOSM":320,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":242,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":236,"com.graphhopper.reader.OSMReaderTest.testSort":108,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxAndMinSpeed":455,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":115,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":325,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":158,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":497,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":308,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":25,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":372,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":277,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":343,"com.graphhopper.storage.RAMDataAccessTest.testHeader":511,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":105,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":186,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":493,"com.graphhopper.storage.LevelGraphStorageTest.testBounds":147,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":289,"com.graphhopper.storage.LevelGraphStorageTest.testPrios":119,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":156,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":312,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":164,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":77,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteAndOptimize":134,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":161,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":488,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testMaxAndMinSpeed":486,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSnappedPointAndGeometry":208,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":295,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":41,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraph":199,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testEdgeFilter":206,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":37,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteNodeForUnidir":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":357,"com.graphhopper.coll.OSMIDMapTest.testGetLong":421,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":171,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":346,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":162,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":177,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes":140,"com.graphhopper.storage.LevelGraphStorageTest.testSave_and_fileFormat":1,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode2":142,"com.graphhopper.util.AngleCalcTest.testCalcAzimuth":398,"com.graphhopper.coll.CompressedArrayTest.testCompress2":377,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":300,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":410,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":192,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":14,"com.graphhopper.GraphHopperAPITest.testLoad":315,"com.graphhopper.storage.LevelGraphStorageTest.testNoCreateCalled":401,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":384,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":390,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":292,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":27,"com.graphhopper.storage.LevelGraphStorageTest.testClone":129,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":11,"com.graphhopper.reader.OSMReaderTest.testBarriers":109,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":327,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraphBug":62,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":389,"com.graphhopper.util.GHUtilityTest.testCopy":92,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":252,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":359,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testDifferentVehicles":217,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":484,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":196,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":466,"com.graphhopper.storage.RAMDataAccessTest.testLoadClose":514,"com.graphhopper.routing.PathTest.testFindInstruction":333,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":461,"com.graphhopper.storage.LevelGraphStorageTest.testPropertiesWithNoInit":145,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":12,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":87,"com.graphhopper.util.EdgeSkipIteratorTest.testUpdateFlags":102,"com.graphhopper.storage.LevelGraphStorageTest.testInfinityWeight":152,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":193,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":469,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":309,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":296,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":16,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":90,"com.graphhopper.storage.LevelGraphStorageTest.testEnsureSize":124,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":172,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":351,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":475,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":444,"com.graphhopper.storage.LevelGraphStorageTest.testFlags":131,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":253,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":283,"com.graphhopper.util.InstructionListTest.testWayList2":98,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":409,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":23,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":243,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":165,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":72,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":118,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":189,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":367,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":395,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":281,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":328,"com.graphhopper.storage.LevelGraphStorageTest.testFootMix":133,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":424,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":388,"com.graphhopper.storage.SynchedDAWrapperTest.testEnsureCapacity":498,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":260,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":169,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":219,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBug1":358,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":110,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":496,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":70,"com.graphhopper.coll.OSMIDMapTest.testGet":419,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":13,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":58,"com.graphhopper.routing.PathBidirRefTest.testExtract":334,"com.graphhopper.storage.LevelGraphStorageTest.testEnabledElevation":144,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":449,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":492,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints120":212,"com.graphhopper.storage.RAMDataAccessTest.testCopy":507,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameNoFlush":499,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":238,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":272,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":191,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":271,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":458,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":391,"com.graphhopper.storage.RAMDataAccessTest.testSegments":513,"com.graphhopper.util.GHUtilityTest.testSort2":91,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":248,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":362,"com.graphhopper.reader.OSMReaderTest.testMain":107,"com.graphhopper.storage.LevelGraphStorageTest.testDoThrowExceptionIfDimDoesNotMatch":125,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":61,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":176,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":450,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":375,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testGrid":213,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":456,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectional":6,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":435,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":159,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":274,"com.graphhopper.storage.LevelGraphStorageTest.test8BytesFlags":5,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdgesWithDelete":138,"com.graphhopper.storage.LevelGraphStorageTest.testDirectional":8,"com.graphhopper.routing.util.EncodedValueTest.testSetValue":69,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete":135,"com.graphhopper.routing.QueryGraphTest.testIterationBug_163":340,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":472,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":15,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":383,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":408,"com.graphhopper.storage.LevelGraphStorageTest.testAddLocation":141,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":117,"com.graphhopper.storage.StorablePropertiesTest.testStore":423,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":425,"com.graphhopper.storage.GraphHopperStorageTest.testClone":286,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":314,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":273,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":404,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":294,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":438,"com.graphhopper.storage.LevelGraphStorageTest.testDisconnectEdge":43,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":487,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeFilter":120,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":254,"com.graphhopper.routing.PathTest.testTime":331,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":483,"com.graphhopper.storage.LevelGraphStorageTest.testNameIndex":153,"com.graphhopper.storage.LevelGraphStorageTest.testEdges":130,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":442,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":223,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":245,"com.graphhopper.reader.OSMReaderTest.testRelation":84,"com.graphhopper.storage.LevelGraphStorageTest.testCheckFirstNode":146,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":265,"com.graphhopper.util.GHUtilityTest.testSortDirected":94,"com.graphhopper.coll.IntDoubleBinHeapTest.test0":418,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxAndMinSpeed":477,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadClose":503,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":339,"com.graphhopper.GraphHopperTest.testFootOnly":63,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":459,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":220,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":436,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testReverseSpatialKey":207,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":356,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":348,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":468,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":247,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":261,"com.graphhopper.search.NameIndexTest.testCreate":429,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":512,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":336,"com.graphhopper.routing.QueryGraphTest.testOneWay":345,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":246,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":371,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":460,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":234,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":369,"com.graphhopper.reader.OSMReaderTest.testWithBounds":116,"com.graphhopper.storage.RAMDataAccessTest.testLoadFlush":515,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":478,"com.graphhopper.storage.RAMDataAccessTest.testBoundsCheck":506,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":188,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":258,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":324,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":341,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":34,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":267,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":67,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectionalEdgeFilter":2,"com.graphhopper.storage.LevelGraphStorageTest.testBigDataEdge":126,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":479,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":476,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":467,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":226,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":180,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":231,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":437,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":275,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":173,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":284,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":344,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":36,"com.graphhopper.util.InstructionListTest.testWayList":97,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":311,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":448,"com.graphhopper.GraphHopperAPITest.testDisconnected179":316,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":255,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":321,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":181,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":232,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":250,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":473,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":104,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":326,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":264,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":24,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":454,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":319,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":288,"com.graphhopper.routing.util.EncodedValueTest.testSwap":83,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":221,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":182,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":187,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":184,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":183,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":353,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":30,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":446,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":303,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":361,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":53,"com.graphhopper.storage.LevelGraphStorageTest.testPillarNodes":47,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":440,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":480,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":74,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeProperties":143,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":160,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":366,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":403,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testNoErrorOnEdgeCase_lastIndex":215,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameNoFlush":385,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":414,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":280,"com.graphhopper.routing.PathTest.testWayList":332,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":278,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":481,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":257,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":412,"com.graphhopper.coll.OSMIDMapTest.testGet2":420,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":42,"com.graphhopper.storage.SynchedDAWrapperTest.testHeader":500,"com.graphhopper.storage.LevelGraphStorageTest.testCreateDuplicateEdges":7,"com.graphhopper.reader.dem.HeightTileTest.testGetHeightForNegativeTile":489,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":233,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":179,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":453,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":297,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":430,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":166,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":287,"com.graphhopper.storage.LevelGraphStorageTest.testDozendEdges":139,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex2":209,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex3":210,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":508,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadFlush":504,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph":211,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":393,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":417,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":80,"com.graphhopper.util.GHUtilityTest.testSort":93,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":239,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":269,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":376,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":392,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":452,"com.graphhopper.search.NameIndexTest.testPut":427,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":17,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":285,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":402,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":195,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testRMin":202,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":224,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":227,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":386,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":415,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":342,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":225,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":329,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":157,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":322,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":394,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":490,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":432,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":71,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":174,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":59,"com.graphhopper.storage.LevelGraphStorageTest.testGetLocations":137,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":270,"com.graphhopper.routing.PathTest.testFound":330,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":57,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":68,"com.graphhopper.storage.LevelGraphStorageTest.testCreateLocation":151,"com.graphhopper.util.AngleCalcTest.testAtan2":397,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeightIfAdvancedEncoder":44,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":451,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":88,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":170,"com.graphhopper.coll.IntDoubleBinHeapTest.testClear":381,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":428,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":21,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":28,"com.graphhopper.util.InstructionListTest.testEmptyList":95,"com.graphhopper.storage.RAMDataAccessTest.testSet_Get_Short_Long":505,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":64,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":485,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph2":214,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":40,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":380,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":434,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":433,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testMaxAndMinSpeed":465,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":299,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":363,"com.graphhopper.reader.PrinctonReaderTest.testRead":103,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":310,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testWayGeometry":205,"com.graphhopper.storage.LevelGraphStorageTest.testUpdateUnidirectional":4,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":167,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":256,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":370,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":422,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":178,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":249,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes2":128,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":175,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":463,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":471,"com.graphhopper.routing.util.EncodingManagerTest.testTurnFlagCombination":382,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":482,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":368,"com.graphhopper.reader.OSMReaderTest.testFoot":0,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":22,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":347,"com.graphhopper.reader.dem.HeightTileTest.testGetHeight":491,"com.graphhopper.storage.LevelGraphStorageTest.testCopyProperties":154,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":240,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":373,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":457,"com.graphhopper.reader.OSMReaderTest.testOneWay":66,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":241,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":293,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":307,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":306,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":185,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":462,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":502,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":302,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":470,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":263,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":290,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":350,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":379,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":50,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":354,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":439,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":51,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":228,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":501,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":323,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testFindingWayGeometry":203,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":259,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":338,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":282,"com.graphhopper.routing.PathBidirRefTest.testExtract2":335,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":222,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":35,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":82,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":198,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":244,"com.graphhopper.search.NameIndexTest.testTooLongNameNoError":426,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":305,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":229,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":411,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":112,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":86,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":279,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":230,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":52,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":474,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":237,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":31,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdges":132,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":441,"com.graphhopper.GraphHopperTest.testFootAndCar":33,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":301,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode":136,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":81,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints32":216,"com.graphhopper.storage.RAMDataAccessTest.testEnsureCapacity":509,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":251,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":443,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":387,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":352,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":163,"com.graphhopper.GraphHopperTest.testPrepareOnly":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCorrectWeight":365,"com.graphhopper.GraphHopperTest.testVia":48,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":197,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":406,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":19,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":114,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeight":121,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":99,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":304,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":431,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":113,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":262,"com.graphhopper.util.AngleCalcTest.testCombined":399,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":445,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeReturn":46,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete3":150,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete2":149,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":10}}]

[{"failures":[0,1],"tindex":"ad0828e0-dbee-11e4-8127-69fe04390d2f","variableMapping":{"offset":"minutes"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:40","type":"CtUnaryOperatorImpl","sourcecode":"++int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:447","type":"CtOperatorAssignmentImpl","sourcecode":"int += java.lang.Integer.(java.lang.Integer.parseInt(java.lang.String)) * 60"},"status":-1},{"failures":[],"tindex":"ad08ec31-dbee-11e4-8127-81030b0334af","variableMapping":{"radiusInMeter":"java.lang.Math.PI","lon":"java.lang.Math.PI","lat":"orientation"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:105","type":"CtIfImpl","sourcecode":"if (double <= 0)\n    throw new java.lang.IllegalArgumentException((((((\"Distance must not be zero or negative! \" + double) + \" lat,lon:\") + double) + \",\") + double));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:81","type":"CtIfImpl","sourcecode":"if (double > ((+(java.lang.Math.double)) + double))\n    double = double - (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"status":-2},{"failures":[],"tindex":"ad08ec32-dbee-11e4-8127-c58c2bed5768","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Downloader:108","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:378","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)))"},"status":-2},{"failures":[],"tindex":"ad08ec33-dbee-11e4-8127-0bec0e07ff69","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:74","type":"CtIfImpl","sourcecode":"if (double < ((-(java.lang.Math.double)) + double))\n    double = double + (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"ad08ec34-dbee-11e4-8127-2f2b8c6a6149","variableMapping":{"precision":"midLon","lat":"midLon"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:132","type":"CtAssignmentImpl","sourcecode":"double = ((int)((double * (double)))) / (double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:234","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 2"},"status":-1},{"failures":[],"tindex":"ad08ec35-dbee-11e4-8127-010cf6196163","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:227","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << 63"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:69","type":"CtLocalVariableImpl","sourcecode":"long long = java.util.TreeMap<java.lang.Long, java.lang.Integer>.firstEntry().getKey()"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"tindex":"ad091346-dbee-11e4-8127-110b2664d6fc","variableMapping":{"lastInBoundsPillarNode":"index"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:660","type":"CtAssignmentImpl","sourcecode":"int = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:164","type":"CtOperatorAssignmentImpl","sourcecode":"int *= 2"},"status":-1},{"failures":[2,3,4,5,7,9,10,53,54,55,56,57,58,59,60,61,62,63],"tindex":"ad091347-dbee-11e4-8127-75dad4834520","variableMapping":{"pointer":"hash"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:125","type":"CtIfImpl","sourcecode":"if (long < 0) {\n    throw new java.lang.IllegalStateException((\"pointer cannot be negative:\" + long));\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:165","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} else {\n    long |= 1;\n    double = double;\n}"},"status":-1},{"failures":[],"tindex":"ad0a4bc8-dbee-11e4-8127-a1a9b42f5970","variableMapping":{"speed":"this"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:160","type":"CtReturnImpl","sourcecode":"return java.lang.Integer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:405","type":"CtReturnImpl","sourcecode":"return java.lang.Integer.java.lang.Integer.parseInt(java.lang.String)"},"status":-2},{"failures":[],"tindex":"ad0a4bc9-dbee-11e4-8127-17962a1e10d0","variableMapping":{"speed":"com.graphhopper.coll.GHTreeMapComposed.NOT_EMPTY","tInt":"com.graphhopper.coll.GHTreeMapComposed.NOT_EMPTY"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:156","type":"CtAssignmentImpl","sourcecode":"java.lang.Integer = java.lang.Integer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:64","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Long, java.lang.Integer>.put(long, com.graphhopper.coll.GHTreeMapComposed.java.lang.Integer)"},"status":-2},{"failures":[],"tindex":"ad0a4bca-dbee-11e4-8127-9b0d0822aa1a","variableMapping":{"str":"highway"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:271","type":"CtReturnImpl","sourcecode":"return (java.lang.String == null) || ((java.lang.String.trim().length()) == 0)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:70","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.reader.OSMWay.hasTag(\"highway\", java.util.HashSet<java.lang.String>)) || (((\"track\".equals(java.lang.String)) && (java.lang.String != null)) && (!(\"grade1\".equals(java.lang.String))))"},"status":-2},{"failures":[],"tindex":"ad0a4bcb-dbee-11e4-8127-0901558f6053","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:162","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String)"},"status":-2},{"failures":[],"tindex":"ad0a4bcc-dbee-11e4-8127-d76e977ea9f1","variableMapping":{"high":"maxValue","highKey":"maxValue","key":"maxValue"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:123","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:111","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"ad0a4bcd-dbee-11e4-8127-79fea7ae77e2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:76","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((int[].int) / (float)))"},"status":-2},{"failures":[],"tindex":"ad0a4bce-dbee-11e4-8127-ffb6d4463eeb","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:323","type":"CtReturnImpl","sourcecode":"return \"SRTM\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PreparationWeighting:61","type":"CtReturnImpl","sourcecode":"return \"PREPARE+\" + (com.graphhopper.routing.util.Weighting.toString())"},"status":-2},{"failures":[],"tindex":"ad0a4bcf-dbee-11e4-8127-a32bbc98de9d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TraversalMode:86","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return com.graphhopper.util.EdgeIteratorState.getEdge();\n"},"status":0},{"failures":[2,3,4,5,7,8,9,10,11],"tindex":"ad0a4bd0-dbee-11e4-8127-4181beae67c4","variableMapping":{"factor":"lat"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:203","type":"CtIfImpl","sourcecode":"if (false) {\n    if (double > 1)\n        double = 1;\n    else if (double < 0)\n        double = 0;\n    \n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:220","type":"CtWhileImpl","sourcecode":"while (true) {\n    if ((long & long) != 0) {\n        double += double;\n    } \n    double /= 2;\n    long >>>= 1;\n    if ((long & long) != 0) {\n        double += double;\n    } \n    double /= 2;\n    if (long > 1) {\n        long >>>= 1;\n    } else {\n        break;\n    }\n}"},"status":-1},{"failures":[],"tindex":"ad0a4bd1-dbee-11e4-8127-912270138689","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:372","type":"CtTryImpl","sourcecode":"try {\n    int int;\n    int int = java.lang.String.indexOf(\"mp\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n        int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n        return int * (com.graphhopper.util.DistanceCalcEarth.double);\n    } \n    int int = java.lang.String.indexOf(\"knots\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n        int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n        return int * 1.852;\n    } \n    int int = java.lang.String.indexOf(\"km\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n    } else {\n        int = java.lang.String.indexOf(\"kph\");\n        if (int > 0) {\n            java.lang.String = java.lang.String.substring(0, int).trim();\n        } \n    }\n    return java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n} catch (java.lang.Exception java.lang.Exception) {\n    return -1;\n}"},"status":-2},{"failures":[],"tindex":"ad0a4bd2-dbee-11e4-8127-411d691a2238","variableMapping":{"node":"node","directionBitMask":"directionBitMask","intendedValues":"intendedValues","restrictedValues":"intendedValues","potentialBarriers":"intendedValues","restrictions":"restrictions","blockByDefault":"blockFords"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:214","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMNode.hasTag(\"barrier\", java.util.HashSet<java.lang.String>)) {\n    boolean boolean = false;\n    if (com.graphhopper.reader.OSMNode.hasTag(\"locked\", \"yes\"))\n        boolean = true;\n    \n    for (java.lang.String java.lang.String : java.util.List<java.lang.String>) {\n        if ((!boolean) && (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.HashSet<java.lang.String>)))\n            return 0;\n        \n        if (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.HashSet<java.lang.String>))\n            return long;\n        \n    }\n    if (boolean)\n        return long;\n    \n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:233","type":"CtIfImpl","sourcecode":"if (((boolean) && ((com.graphhopper.reader.OSMNode.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMNode.hasTag(\"ford\")))) && (!(com.graphhopper.reader.OSMNode.hasTag(java.util.List<java.lang.String>, java.util.HashSet<java.lang.String>))))\n    return long;\n"},"status":0},{"failures":[39],"tindex":"ad0a4bd3-dbee-11e4-8127-c983341c4769","variableMapping":{"com.graphhopper.util.Constants.SNAPSHOT":"blockFords"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Constants:86","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.Constants.boolean = true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:125","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-1},{"failures":[64,65,66,67,68,26,38,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],"tindex":"ad0a72e4-dbee-11e4-8127-c1c4fdb27099","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:346","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    long = java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.get(int).reverseFlags(long);\n}"},"status":-1},{"failures":[129,130,131,132,25,133,134,135],"tindex":"ad0a72e5-dbee-11e4-8127-f9c153a272d0","variableMapping":{"fwdFaster":"angle"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:207","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:44","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"status":-1},{"failures":[],"tindex":"ad0a72e6-dbee-11e4-8127-1560167a6412","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:59","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.Math.java.lang.Math.round((double / (double)))"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22,23,24,64,136,137,138,139,140,26,27,28,29,30,31,32,33,34,35,36,38,141,142,143,144,79,80,145,146,147,56,148,149,150,151,152,59,153,154,155,156,157,158,159,160,161,162,60,163,164,165,166,167,63,168,169,170,171,172,173],"tindex":"ad0a72e7-dbee-11e4-8127-f77aa6bc6078","variableMapping":{"bytePos":"endIndexPlusOne"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:91","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:103","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[32,174,175,176,177],"tindex":"ad0a72e8-dbee-11e4-8127-4d1a2a7b0833","variableMapping":{"latIndex":"turnRestrictionBit","lonIndex":"turnRestrictionBit","lonUnits":"maxTurnCosts"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.LinearKeyAlgo:92","type":"CtReturnImpl","sourcecode":"return (long * (int)) + long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:610","type":"CtIfImpl","sourcecode":"if ((int) == 1) {\n    if (double != 0)\n        throw new java.lang.IllegalArgumentException(\"Only restrictions are supported\");\n    \n    return boolean ? long : 0;\n} "},"status":-1},{"failures":[16,19,25,37,178,179,41,180,181,52],"tindex":"ad0a72e9-dbee-11e4-8127-cb6721559d49","variableMapping":{"lat":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:129","type":"CtIfImpl","sourcecode":"if ((double > 60) || (double < (-60)))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:766","type":"CtIfImpl","sourcecode":"if (boolean || (double < double))\n    return double * 0.9;\n"},"status":-1},{"failures":[0,26,27,28,29,30,31,32,33,34,35,36,37,38,182,183,178,184,39,40,185,179,41,42,186,187,174,188,189,43,190,176,191,192,193,194,195,196,197,198,46,199],"tindex":"ad0a72ea-dbee-11e4-8127-0f833e6105a8","variableMapping":{"i":"shift","child":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:118","type":"CtAssignmentImpl","sourcecode":"int = int * 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:133","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedValue.getBits()"},"status":-1},{"failures":[],"tindex":"ad0a72eb-dbee-11e4-8127-bf8a1f0dff5f","variableMapping":{"bytes":"bytes","this":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:90","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.RAMDataAccess.ensureCapacity(java.lang.Math.java.lang.Math.max((10 * 4), long))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:93","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.RAMIntDataAccess.ensureCapacity(java.lang.Math.java.lang.Math.max((10 * 4), long))"},"status":0},{"failures":[],"tindex":"ad0a72ec-dbee-11e4-8127-d3d5be842c1b","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:334","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.LevelGraphStorage.this.getWeight(this)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:160","type":"CtReturnImpl","sourcecode":"return java.lang.Integer"},"status":-2},{"failures":[],"tindex":"ad0a72ed-dbee-11e4-8127-8ba135f1ac33","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:130","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.Edge:44","type":"CtReturnImpl","sourcecode":"return java.lang.Double.java.lang.Double.compare(double, com.graphhopper.storage.Edge.double)"},"status":-2},{"failures":[],"tindex":"ad0a72ee-dbee-11e4-8127-cd79123cf14f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:35","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.(java.lang.Math.abs(double)) + 1.0E-10"},"status":-2},{"failures":[],"tindex":"ad0a72ef-dbee-11e4-8127-0db6e860f26b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:864","type":"CtLocalVariableImpl","sourcecode":"long long = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:266","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.routing.util.EncodedDoubleValue.setDefaultValue(0)"},"status":-2},{"failures":[14,14,15,16,16,17,17,18,18,19,19,20,200,200,21,22,23,23,24,24,201,201,64,136,137,138,202,203,204,132,25,65,205,206,207,208,209,66,210,211,67,68,0,26,27,28,29,30,31,32,33,34,35,36,37,38,212,213,194,69,141,142,143,70,71,214,215,134,135,216,216,217,217,218,218,219,219,72,72,220,220,221,221,73,73,222,222,223,223,224,224,225,225,226,227,74,75,228,229,230,76,231,232,77,144,233,78,234,79,80,235,236,145,237,238,239,240,241,81,82,242,83,84,243,244,245,246,85,86,87,247,248,88,249,89,250,250,251,252,253,90,91,92,254,255,256,257,258,259,93,260,94,261,262,263,264,265,266,267,268,269,270,271,272,95,273,274,275,276,96,277,278,97,279,280,281,98,282,146,147,283,56,12,148,149,150,151,57,152,58,59,153,154,155,156,284,157,158,285,286,287,288,289,290,291,159,160,161,292,162,293,294,295,296,297,298,60,13,163,164,165,166,61,167,62,63,168,169,170,171,299,172,173,103,300,108,301,109,302,302,303,304,305,110,111,112,306,307,308,309,310,311,113,312,114,313,314,315,316,317,318,319,320,321,322,323,324,115,325,326,327,328,116,329,330,117,331,332,333,118,334,335,336,337,338,339,340,341,342,119,343,343,344,345,346,120,121,122,347,348,349,350,351,352,123,353,124,354,355,356,357,358,359,360,361,362,363,364,365,125,366,367,368,369,126,370,371,127,372,373,374,128,375],"tindex":"ad0a9a00-dbee-11e4-8127-7508e504f655","variableMapping":{"algo":"name"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:103","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    this.java.lang.String = java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:111","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.isStoring())\n    com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , true , java.nio.ByteOrder);\nelse\n    com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , false , java.nio.ByteOrder);\n"},"status":-1},{"failures":[],"tindex":"ad0a9a01-dbee-11e4-8127-97e6758b0fcd","variableMapping":{"segmentsToMap":"speed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:117","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalStateException(\"Too many segments needs to be allocated. Increase segmentSize.\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:330","type":"CtIfImpl","sourcecode":"if (java.lang.Integer != null)\n    int = java.lang.Integer;\n"},"status":0},{"failures":[],"tindex":"ad0a9a02-dbee-11e4-8127-89eb8415972b","variableMapping":{"com.graphhopper.storage.LevelGraphStorage.MAX_WEIGHT":"speed","java.lang.Double.POSITIVE_INFINITY":"com.graphhopper.routing.util.FastestWeighting.SPEED_CONV","weight":"com.graphhopper.routing.util.FastestWeighting.SPEED_CONV"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:413","type":"CtIfImpl","sourcecode":"if (double >= (com.graphhopper.storage.LevelGraphStorage.double))\n    return java.lang.Double.double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:56","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.util.EdgeIteratorState.getDistance()) / (double * (com.graphhopper.routing.util.FastestWeighting.double))"},"status":-2},{"failures":[],"tindex":"ad0a9a03-dbee-11e4-8127-6fd1e58072a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:57","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHTreeMapComposed.remove(int, int)"},"status":0},{"failures":[],"tindex":"ad0a9a04-dbee-11e4-8127-11ad2ffbcbf8","variableMapping":{"nodeId":"includeWay","nodeIdOffset":"includeWay"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:285","type":"CtOperatorAssignmentImpl","sourcecode":"long += long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:276","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.handleWayTags(com.graphhopper.reader.OSMWay, long, (long & (com.graphhopper.routing.util.AbstractFlagEncoder.getRelBitMask())))"},"status":0},{"failures":[],"tindex":"ad0a9a05-dbee-11e4-8127-69ff2a95183d","variableMapping":{"directionBitMask":"flags","flags":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:258","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:336","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"ad0a9a06-dbee-11e4-8127-dfaed4ce4c91","variableMapping":{"shift":"bits","preferWayEncoder":"this"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:104","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue = new com.graphhopper.routing.util.EncodedValue(\"PreferWay\" , int , 3 , 1 , 3 , 7)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:48","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue.this(java.lang.String, int, int, double, long, int, true)"},"status":-2},{"failures":[],"tindex":"ad0a9a07-dbee-11e4-8127-7f552f1707ca","variableMapping":{"minDistance":"maxSpeed","rMin":"restDist2D"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:737","type":"CtIfImpl","sourcecode":"if (double < double) {\n    break;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:214","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.FlagEncoder.int)) {\n    double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long);\n    double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n    double = double * double;\n    double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n    double = double * double;\n    double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n    long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n} "},"status":-2},{"failures":[179],"tindex":"ad0a9a08-dbee-11e4-8127-194ff261d622","variableMapping":{"towerNodeDistance":"maxSpeed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:745","type":"CtAssignmentImpl","sourcecode":"double = 1.0E-4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:330","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"ad0a9a09-dbee-11e4-8127-5dc5d62eb13b","variableMapping":{"fromX":"minLat","toX":"minLat"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:56","type":"CtLocalVariableImpl","sourcecode":"double double = double - double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:217","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.shapes.BBox.double"},"status":-2},{"failures":[],"tindex":"ad0a9a0a-dbee-11e4-8127-31af5cf45860","variableMapping":{"minLatInit":"maxLon","maxLonInit":"minLat","minLonInit":"java.lang.Double.NaN","bounds":"this","maxLatInit":"minLon"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.LinearKeyAlgo:56","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox = new com.graphhopper.util.shapes.BBox(double , double , double , double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:72","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.shapes.BBox.this(double, double, double, double, java.lang.Double.double, java.lang.Double.double, false)"},"status":-2},{"failures":[38,69,142,143,92,260,261,262,268,275,276,101,376,377,378,379,380,381,112,312,313,314,320,327,328,122,353,354,355,361,368,369],"tindex":"ad0c47bb-dbee-11e4-8127-35ce8daf34cb","variableMapping":{"values":"a","index":"high"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:327","type":"CtReturnImpl","sourcecode":"return int[][int]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:410","type":"CtIfImpl","sourcecode":"if (int == (int + int)) {\n    return ~(int + int);\n} else if ((int[][int]) == int) {\n    return int;\n} else {\n    return ~int;\n}"},"status":-1},{"failures":[16,17,18,19,20,22,23,64,136,27,28,29,144,79,80,145,382,55,146,147,56,148,149,150,151,152,58,59,153,154,155,156,157,158,60,163,164,165,166,167,62,63,168,169,170,171,172,173],"tindex":"ad0d0b0c-dbee-11e4-8127-df8b93e48413","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:126","type":"CtWhileImpl","sourcecode":"while (true) {\n    com.graphhopper.storage.index.PointEmitter.set(int, int);\n    if ((int == int) && (int == int))\n        break;\n    \n    int int = 2 * int;\n    if (int > (-int)) {\n        int -= int;\n        int += int;\n    } \n    if (int < int) {\n        int += int;\n        int += int;\n    } \n}"},"status":-1},{"failures":[],"tindex":"ad0d321d-dbee-11e4-8127-c1408b5ea6a6","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:106","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:446","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"service\")"},"status":-2},{"failures":[],"tindex":"ad0d321e-dbee-11e4-8127-3fa0a5b0a841","variableMapping":{"fromX":"minLon","toX":"minLon"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:56","type":"CtLocalVariableImpl","sourcecode":"double double = double - double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:157","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.shapes.BBox.double"},"status":-2},{"failures":[],"tindex":"ad0d321f-dbee-11e4-8127-554c608524ec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:128","type":"CtIfImpl","sourcecode":"if (\"track\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if (\"grade1\".equals(java.lang.String))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else if ((java.lang.String == null) || (java.lang.String.startsWith(\"grade\")))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-2},{"failures":[74,75,239,240,81,88],"tindex":"ad0d3220-dbee-11e4-8127-db2ae1ce0881","variableMapping":{"edge":"edgeState"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:409","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.EdgeSkipIterState.isShortcut()))\n    throw new java.lang.IllegalStateException(\"getWeight is only available for shortcuts\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:83","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, true)"},"status":-1},{"failures":[383],"tindex":"ad0d3221-dbee-11e4-8127-11d8f686ede0","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:614","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Load graph before importing OSM data\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:195","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((java.lang.String.(java.lang.String.format(com.graphhopper.routing.util.EncodingManager.java.lang.String, int, \"way\")) + (com.graphhopper.routing.util.EncodingManager.java.lang.String)))"},"status":-1},{"failures":[],"tindex":"ad0d3222-dbee-11e4-8127-d7cfbd834e67","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:66","type":"CtReturnImpl","sourcecode":"return 3"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:93","type":"CtReturnImpl","sourcecode":"return java.util.TreeMap<java.lang.Long, java.lang.Integer>.size()"},"status":0},{"failures":[64,136,137,138,203,204,132,25,205,206,207,208,209,66,210,211,67,68,69,141,142,143,70,71,216,217,219,72,220,221,73,222,223,224,225,226,227,74,228,229,230,76,231,232,77,144,233,78,80,235,236,145,237,238,239,240,241,81,242,83,84,243,244,245,246,85,87,247,248,88,249,89,252,90,91,92,254,255,256,258,93,261,262,263,264,265,266,267,268,269,272,95,274,275,276,96,278,280,281,98,282,146,147,56,12,148,149,150,151,57,152,58,59,153,154,155,156,157,158,285,286,287,288,289,290,159,160,161,292,162,293,294,295,296,297,298,60,13,163,164,165,166,61,167,62,63,168,169,170,171,172,173,99,100,101,384,385,386,387,102,377,378,388,389,390,391,392,379,393,394,104,300,380,381,105,395,396,397,107,398,108,399,301,109,304,110,111,112,306,307,308,310,113,313,314,315,316,317,318,319,320,321,324,115,326,327,328,116,330,332,333,118,334,335,338,342,119,345,120,121,122,347,348,349,351,123,354,355,356,357,358,359,360,361,362,365,125,367,368,369,126,371,373,374,128,375],"tindex":"ad0d3223-dbee-11e4-8127-3337b7c6516e","variableMapping":{"reverse":"forward"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:618","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"Not yet supported\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:332","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    long |= com.graphhopper.routing.util.AbstractFlagEncoder.flagsDefault(boolean, boolean);\n}"},"status":-1},{"failures":[213],"tindex":"ad0d3224-dbee-11e4-8127-d98b464e5d83","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:209","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"status":-1},{"failures":[],"tindex":"ad0e1c85-dbee-11e4-8127-69e8e3c05f7b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:139","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int += int;\n    int += int;\n} "},"status":-2},{"failures":[],"tindex":"ad0e4396-dbee-11e4-8127-994295046add","variableMapping":{"newUniqueOsmId":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:837","type":"CtReturnImpl","sourcecode":"return (long)++"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:336","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"ad0e4397-dbee-11e4-8127-c9a57d26338f","variableMapping":{"len":"index","start":"bufferIndex"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:488","type":"CtReturnImpl","sourcecode":"return ~(int + int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:234","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.BitUtil.toInt(byte[][][int], int)"},"status":-2},{"failures":[],"tindex":"ad0e4398-dbee-11e4-8127-7b9158f0dc7a","variableMapping":{"str":"osmValue","this":"osmValue"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:95","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.util.Helper.(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    try {\n        return java.lang.Boolean.java.lang.Boolean.parseBoolean(java.lang.String);\n    } catch (java.lang.Exception java.lang.Exception) {\n    }\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:144","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null)\n    return false;\n"},"status":-2},{"failures":[],"tindex":"ad0e4399-dbee-11e4-8127-2de5481c3fc0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:717","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.routing.util.AbstractFlagEncoder.com.graphhopper.routing.util.AbstractFlagEncoder.getStr(java.lang.String, java.lang.String)"},"status":-2},{"failures":[400],"tindex":"ad0e439a-dbee-11e4-8127-71035eefb1ed","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:151","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"ad0e439b-dbee-11e4-8127-758c58a47a08","variableMapping":{"com.graphhopper.storage.LevelGraphStorage.MAX_WEIGHT":"currDistToGoal","java.lang.Double.POSITIVE_INFINITY":"currDistToGoal","weight":"currDistToGoal"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:413","type":"CtIfImpl","sourcecode":"if (double >= (com.graphhopper.storage.LevelGraphStorage.double))\n    return java.lang.Double.double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.ShortestWeighting:33","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[14,20,21,22,24,89,108,109,401,340,119],"tindex":"ad0e439c-dbee-11e4-8127-0f35bccd7ab4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:135","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"geometry.version\", com.graphhopper.util.Constants.int)"},"status":-1},{"failures":[14,15,16,17,20,21,23,74,75,228,229,230,76,231,232,77,144,233,78,234,79,80,235,236,145,237,238,239,240,241,81],"tindex":"ad0e439d-dbee-11e4-8127-03d25385909c","variableMapping":{"size":"index"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:111","type":"CtIfImpl","sourcecode":"if ((int) <= 0) {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:65","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(((((long)(int)) * (int)) + (int)), int)"},"status":-2},{"failures":[],"tindex":"ad0e439e-dbee-11e4-8127-7920bf3b40fa","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.MapEntry:92","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:274","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"ad0e439f-dbee-11e4-8127-d5511d995d0f","variableMapping":{"initialBits":"nodeBitMask","allBits":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:98","type":"CtAssignmentImpl","sourcecode":"long = 1L << (int - 1)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:534","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= int"},"status":0},{"failures":[14,15,16,17,18,19,20,21,22,23,24,64,136,137,138,202,203,204,132,25,65,205,206,207,208,209,66,210,211,67,68,0,26,27,28,29,30,31,32,33,34,35,36,37,38,212,213,194,69,141,142,143,70,71,214,215,134,135,216,216,217,217,218,218,219,219,72,72,220,220,221,221,73,73,222,222,223,223,224,224,225,225,226,227,74,75,228,229,230,76,231,232,77,144,233,78,234,79,80,235,236,145,237,238,239,240,241,81,82,242,83,84,243,244,245,246,85,86,87,247,248,88,249,89,250,251,252,90,91,92,254,255,256,257,258,259,93,260,94,261,262,263,264,265,266,267,268,269,270,271,272,95,273,274,275,276,96,277,278,97,279,280,281,98,282,146,147,283,56,12,148,149,150,151,57,152,58,59,153,154,155,156,284,157,158,285,286,287,288,289,290,291,159,160,161,292,162,293,294,295,296,297,298,60,13,163,164,165,166,61,167,62,63,168,169,170,171,299,172,173,103,300,108,301,109,302,303,304,110,111,112,306,307,308,309,310,311,113,312,114,313,314,315,316,317,318,319,320,321,322,323,324,115,325,326,327,328,116,329,330,117,331,332,333,118,334,402,403,404,405,406,407,408,409,410,411,412,335,336,337,338,339,340,341,342,119,343,344,345,120,121,122,347,348,349,350,351,352,123,353,124,354,355,356,357,358,359,360,361,362,363,364,365,125,366,367,368,369,126,370,371,127,372,373,374,128,375],"tindex":"ad0e6ab0-dbee-11e4-8127-c94b21a41b92","variableMapping":{"segNumber":"segmentSizeIntsPower","segments":"newSegs"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:337","type":"CtAssignmentImpl","sourcecode":"int[][][int] = null"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:117","type":"CtAssignmentImpl","sourcecode":"int[][][int] = new int[1 << (int)]"},"status":-1},{"failures":[],"tindex":"ad0e6ab1-dbee-11e4-8127-4b480d5ed108","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:412","type":"CtReturnImpl","sourcecode":"return ~(int + int)"},"status":-2},{"failures":[],"tindex":"ad0e6ab2-dbee-11e4-8127-3131457c0949","variableMapping":{"com.graphhopper.reader.OSMReader.TOWER_NODE":"shift","id":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:473","type":"CtIfImpl","sourcecode":"if (int < (com.graphhopper.reader.OSMReader.int))\n    return (-int) - 3;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:134","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"ad0e6ab3-dbee-11e4-8127-4b713d59909b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:123","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"ad0e6ab4-dbee-11e4-8127-b562fa8f7cce","variableMapping":{"bytePos":"frontIndex"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:91","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:73","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[45,48,49,51],"tindex":"ad0e6ab5-dbee-11e4-8127-57117242f46c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:234","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", java.util.HashSet<java.lang.String>))\n    return long;\n"},"status":-1},{"failures":[],"tindex":"ad0e6ab6-dbee-11e4-8127-8522e32f1e42","variableMapping":{"closed":"found"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:188","type":"CtIfImpl","sourcecode":"if (boolean) {\n    throw new java.lang.IllegalStateException(\"already closed\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:279","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.EdgeSkipIterator.getEdge()) == (com.graphhopper.util.EdgeIteratorState.getEdge())) {\n    boolean = true;\n    break;\n} "},"status":0},{"failures":[14,15,16,20,21,22,24,249,89,250,94,284,413,159,160,161,292,414,162,415,299,99,100,101,384,385,386,416,387,417,102,376,103,377,378,388,389,390,391,392,379,393,418,419,394,104,420,300,380,381,105,421,395,106,422,396,397,107,398,108,399,301,109,302,114,423,424,340,342,119,343,124,425],"tindex":"ad0e6ab7-dbee-11e4-8127-e37c32a0c94d","variableMapping":{"obtained":"storing"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:170","type":"CtReturnImpl","sourcecode":"return !boolean"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:120","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-1},{"failures":[],"tindex":"ad0e6ab8-dbee-11e4-8127-3db8011dccbc","variableMapping":{"red":"cap"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:160","type":"CtOperatorAssignmentImpl","sourcecode":"int += 50"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:46","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.Helper.com.graphhopper.util.Helper.idealIntArraySize(int)"},"status":0},{"failures":[],"tindex":"ad0e91c9-dbee-11e4-8127-210ea26a120b","variableMapping":{"storedKey":"backwardBit","key":"directionBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:124","type":"CtIfImpl","sourcecode":"if (long > long) {\n    break;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:585","type":"CtIfImpl","sourcecode":"if ((((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.HashSet<java.lang.String>)) || (com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\"))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"oneway:bicycle\", \"no\")))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"cycleway\", java.util.HashSet<java.lang.String>)))) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\"))\n        long |= long;\n    else\n        long |= long;\n    \n} else {\n    long |= long;\n}"},"status":-2},{"failures":[234,83],"tindex":"ad0e91ca-dbee-11e4-8127-51542e58a39a","variableMapping":{"finishedTo":"finishedFrom","this":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AbstractBidirAlgo:73","type":"CtAssignmentImpl","sourcecode":"boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo())"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:70","type":"CtAssignmentImpl","sourcecode":"boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesFrom())"},"status":-1},{"failures":[],"tindex":"ad0e91cb-dbee-11e4-8127-070d3583f8e0","variableMapping":{"offset":"importance"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtilBig:40","type":"CtUnaryOperatorImpl","sourcecode":"++int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:52","type":"CtAssignmentImpl","sourcecode":"this.int = 0"},"status":0},{"failures":[383],"tindex":"ad0e91cc-dbee-11e4-8127-93b64d882150","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.SimpleFSLockFactory:53","type":"CtThrowImpl","sourcecode":"throw new java.lang.RuntimeException(\"Set lockDir before creating locks\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:195","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((java.lang.String.(java.lang.String.format(com.graphhopper.routing.util.EncodingManager.java.lang.String, int, \"way\")) + (com.graphhopper.routing.util.EncodingManager.java.lang.String)))"},"status":-1},{"failures":[],"tindex":"ad0e91cd-dbee-11e4-8127-37bdc1f0eaf0","variableMapping":{"size":"speed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:111","type":"CtIfImpl","sourcecode":"if ((int) <= 0) {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:348","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.getTag(\"service\")) == null)\n    int = java.lang.Integer;\nelse\n    int = java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\");\n"},"status":0},{"failures":[],"tindex":"ad0e91ce-dbee-11e4-8127-e5ed52bf5087","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:158","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHBitSetImpl com.graphhopper.coll.GHBitSetImpl = new com.graphhopper.coll.GHBitSetImpl(com.graphhopper.storage.GraphStorage.getNodes())"},"status":-2},{"failures":[39],"tindex":"ad0e91cf-dbee-11e4-8127-35972f1c91d4","variableMapping":{"mGarbage":"blockFords"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseArray:110","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:125","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22,23,24,64,136,137,138,202,203,204,132,25,65,205,206,207,208,209,66,210,211,67,68,0,26,27,28,29,30,31,32,33,34,35,36,37,38,212,213,194,69,141,142,143,70,71,214,215,134,135,216,216,217,217,218,218,219,219,72,72,220,220,221,221,73,73,222,222,223,223,224,224,225,225,226,227,74,75,228,229,230,76,231,232,77,144,233,78,234,79,80,235,236,145,237,238,239,240,241,81,82,242,83,84,243,244,245,246,85,86,87,247,248,88,249,89,250,251,252,90,91,92,254,255,256,257,258,259,93,260,94,261,262,263,264,265,266,267,268,269,270,271,272,95,273,274,275,276,96,277,278,97,279,280,281,98,282,146,147,283,56,12,148,149,150,151,57,152,58,59,153,154,155,156,284,157,158,285,286,287,288,413,289,290,291,159,160,161,292,414,162,293,294,295,296,415,297,298,60,13,163,164,165,166,61,167,62,63,168,169,170,171,299,172,173,99,100,101,384,385,386,416,387,417,102,376,103,377,378,388,389,390,391,392,379,393,418,419,394,104,420,300,380,381,105,421,395,106,422,396,397,107,398,108,399,301,109,302,303,304,110,111,112,306,307,308,309,310,311,113,312,114,313,314,315,316,317,318,319,320,321,322,323,324,115,325,326,327,328,116,329,330,117,331,332,333,118,334,335,336,337,338,339,340,341,342,119,343,344,345,120,121,122,347,348,349,350,351,352,123,353,124,354,355,356,357,358,359,360,361,362,363,364,365,125,366,367,368,369,126,370,371,127,372,373,374,128,375],"tindex":"ad0eb8e0-dbee-11e4-8127-1d6151afa4e0","variableMapping":{"properties":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:190","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.create(100)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:135","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"geometry.version\", com.graphhopper.util.Constants.int)"},"status":-1},{"failures":[16,17,18,19,20,22,23,64,74,75,228,229,230,76,231,232,77,144,233,234,79,80,235,236,145,238,239,240,241,81,82,83,85,86,88],"tindex":"ad0eb8e1-dbee-11e4-8127-4b02693a3aed","variableMapping":{"initialized":"finishedFrom"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:299","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"Call prepareIndex only once\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:67","type":"CtWhileImpl","sourcecode":"while (!com.graphhopper.routing.AbstractRoutingAlgorithm.(finished())) {\n    if (!(boolean))\n        boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesFrom());\n    \n    if (!(boolean))\n        boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo());\n    \n}"},"status":-1},{"failures":[69,70,71],"tindex":"ad0eb8e2-dbee-11e4-8127-977f4092079f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:65","type":"CtWhileImpl","sourcecode":"nextState : while (!(java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.empty())) {\n    com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState = java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.pop();\n    final int int = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.int;\n    final com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator;\n    if (com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.isStart()) {\n        int[][int] = int;\n        int[][int] = int;\n        (int)++;\n        gnu.trove.stack.array.TIntArrayStack.push(int);\n        com.graphhopper.coll.GHBitSetImpl.set(int);\n        com.graphhopper.util.EdgeIterator = com.graphhopper.storage.GraphStorage.createEdgeExplorer(com.graphhopper.routing.util.EdgeFilter).setBaseNode(int);\n    } else {\n        com.graphhopper.util.EdgeIterator = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.util.EdgeIterator;\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n    }\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if ((int[][int]) == 0) {\n            java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.resumeState(int, com.graphhopper.util.EdgeIterator));\n            java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.startState(int));\n            continue nextState;\n        } else if (com.graphhopper.coll.GHBitSetImpl.contains(int)) {\n            int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n        } \n    }\n    if ((int[][int]) == (int[][int])) {\n        gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList = new gnu.trove.list.array.TIntArrayList();\n        int int;\n        while ((int = gnu.trove.stack.array.TIntArrayStack.pop()) != int) {\n            gnu.trove.list.array.TIntArrayList.add(int);\n            com.graphhopper.coll.GHBitSetImpl.clear(int);\n        }\n        gnu.trove.list.array.TIntArrayList.add(int);\n        com.graphhopper.coll.GHBitSetImpl.clear(int);\n        java.util.ArrayList<gnu.trove.list.array.TIntArrayList>.add(gnu.trove.list.array.TIntArrayList);\n    } \n}"},"status":-1},{"failures":[],"tindex":"ad0eb8e3-dbee-11e4-8127-c5bf0441d23e","variableMapping":{"this":"this","way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:226","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:328","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.AbstractFlagEncoder.com.graphhopper.routing.util.AbstractFlagEncoder.parseSpeed(com.graphhopper.reader.OSMWay.getTag(\"maxspeed:forward\"))"},"status":-2},{"failures":[174,175,177],"tindex":"ad0eb8e4-dbee-11e4-8127-416c4b6206c9","variableMapping":{"periodicUpdates":"maxTurnCosts"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:114","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"periodicUpdates has to be in [0, 100], to disable it use 0\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:618","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if ((double != 0) || java.lang.Double.(java.lang.Double.isInfinite(double)))\n        throw new java.lang.IllegalArgumentException(\"Restricted turn can only have infinite costs (or use 0)\");\n    \n} else {\n    if (double >= (int))\n        throw new java.lang.IllegalArgumentException(\"Cost is too high. Or specifiy restricted == true\");\n    \n}"},"status":-1},{"failures":[],"tindex":"ad0eb8e5-dbee-11e4-8127-3dadf6cae75c","variableMapping":{"maxBits":"bytes"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:286","type":"CtLocalVariableImpl","sourcecode":"int int = 64 - int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:182","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(java.lang.Math.(java.lang.Math.log(int)) / java.lang.Math.(java.lang.Math.log(2))))"},"status":-2},{"failures":[0,1],"tindex":"ad0eb8e6-dbee-11e4-8127-6578a1a9d12e","variableMapping":{"red":"minutes"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:160","type":"CtOperatorAssignmentImpl","sourcecode":"int += 50"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:447","type":"CtOperatorAssignmentImpl","sourcecode":"int += java.lang.Integer.(java.lang.Integer.parseInt(java.lang.String)) * 60"},"status":-1},{"failures":[],"tindex":"ad0eb8e7-dbee-11e4-8127-911fd8484afb","variableMapping":{"directionBitMask":"acceptBit","flags":"acceptBit"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:258","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:207","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[0,26,27,28,30,31,32,33,36,37,38,426,427,428,429,430,431,432,433,434,191,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453],"tindex":"ad0eb8e8-dbee-11e4-8127-c1ba28dfec46","variableMapping":{"java.lang.Double.NaN":"maxSpeed","is3D":"force"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:210","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    return java.lang.Double.double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:764","type":"CtIfImpl","sourcecode":"if (double >= 0) {\n    if (boolean || (double < double))\n        return double * 0.9;\n    \n} "},"status":-1},{"failures":[],"tindex":"ad0eb8e9-dbee-11e4-8127-73283c9499b0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:329","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.PriorityWeighting.int :\n        return com.graphhopper.routing.util.EncodedValue.setValue(long, long);\n    default :\n        return com.graphhopper.routing.util.AbstractFlagEncoder.setLong(long, int, long);\n}"},"status":-2},{"failures":[454,180,428,455,456,436,457,442,458,459,181,449,460],"tindex":"ad0eb8ea-dbee-11e4-8127-dde39ae0dcae","variableMapping":{"i":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:149","type":"CtIfImpl","sourcecode":"if ((int++) > 1000) {\n    throw new java.lang.IllegalStateException(\"Something unexpected happened. A node probably will not have 1000+ relations.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:343","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.util.Helper.(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String);\n    if (java.lang.Integer != null) {\n        if ((com.graphhopper.reader.OSMWay.getTag(\"service\")) == null)\n            int = java.lang.Integer;\n        else\n            int = java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\");\n        \n    } \n} "},"status":-1},{"failures":[142,143],"tindex":"ad108dab-dbee-11e4-8127-63437c03dceb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:163","type":"CtAssignmentImpl","sourcecode":"int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getKey()"},"status":-1},{"failures":[],"tindex":"ad108dac-dbee-11e4-8127-bf6823c05f20","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:864","type":"CtLocalVariableImpl","sourcecode":"long long = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:273","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22,23,24,0,26,27,28,29,30,31,32,33,34,35,36,37,461,38,178,39,40,179,42,43,180,44,462,45,192,195,198,46,47,463,48,464,49,181,50,465,51],"tindex":"ad108dad-dbee-11e4-8127-ad2c7bdc3a8c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:145","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"ad108dae-dbee-11e4-8127-856c50040b69","variableMapping":{"pointIndex":"i","index":"mSize"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionList:354","type":"CtIfImpl","sourcecode":"if (int > 0)\n    int++;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:194","type":"CtIfImpl","sourcecode":"if (((int) - int) != 0) {\n    java.lang.System.java.lang.System.arraycopy(int[], int, int[], (int + 1), ((int) - int));\n    java.lang.System.java.lang.System.arraycopy(int[], int, int[], (int + 1), ((int) - int));\n} "},"status":0},{"failures":[],"tindex":"ad108daf-dbee-11e4-8127-2b3fa4f253c6","variableMapping":{"high":"value"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:126","type":"CtReturnImpl","sourcecode":"return ~long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:332","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedValue.setValue(long, long)"},"status":-2},{"failures":[46],"tindex":"ad10b4c0-dbee-11e4-8127-1d370e96b9c8","variableMapping":{"way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:241","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"motorroad\", \"yes\"))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:214","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"foot\", java.util.HashSet<java.lang.String>))\n    return long;\n"},"status":-1},{"failures":[1],"tindex":"ad10b4c1-dbee-11e4-8127-91a518e96f4a","variableMapping":{"str":"minStr","d":"minStr"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:276","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += java.lang.String.trim()"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:443","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring((int + 1))"},"status":-1},{"failures":[231,238,240,85],"tindex":"ad10b4c2-dbee-11e4-8127-a390b0d5d7ac","variableMapping":{"pointIndex":"key","index":"key"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionList:354","type":"CtIfImpl","sourcecode":"if (int > 0)\n    int++;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:57","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHTreeMapComposed.remove(int, int)"},"status":-1},{"failureDictionary":{"com.graphhopper.storage.LevelGraphStorageTest.testCopyTo":367,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":217,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":237,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":52,"com.graphhopper.storage.LevelGraphStorageTest.testCannotBeLoadedViaDifferentClass":340,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":287,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":100,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":66,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":210,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":181,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":458,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testMoreReal":149,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":15,"com.graphhopper.util.InstructionTest.testGetAzimuthAndGetDirection":133,"com.graphhopper.storage.LevelGraphStorageTest.testSetNodes":375,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":430,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":432,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":394,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":312,"com.graphhopper.coll.CompressedArrayTest.testCompress":3,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":443,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":281,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":243,"com.graphhopper.storage.LevelGraphStorageTest.testPriosWhileDeleting":341,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":418,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":94,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSortHighLevelFirst":283,"com.graphhopper.util.AngleCalcTest.testOrientation":129,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":87,"com.graphhopper.GraphHopperTest.testPrepare":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":145,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":422,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":82,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":267,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":203,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":233,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":291,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":444,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":138,"com.graphhopper.storage.LevelGraphStorageTest.internalDisconnect":345,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex":56,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":70,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":442,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":459,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":403,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":228,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":77,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":260,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":164,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":333,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":449,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":201,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat_withTurnCostEntries":108,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":53,"com.graphhopper.storage.LevelGraphStorageTest.testDetachEdge":120,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":88,"com.graphhopper.GraphHopperTest.testLoadOSM":20,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":168,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":406,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":165,"com.graphhopper.reader.OSMReaderTest.testSort":28,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxAndMinSpeed":452,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":35,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":142,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":302,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":277,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":89,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":396,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":73,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":211,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":330,"com.graphhopper.storage.LevelGraphStorageTest.testBounds":366,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":258,"com.graphhopper.storage.LevelGraphStorageTest.testPrios":336,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":399,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":280,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":308,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":427,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":110,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteAndOptimize":353,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":440,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testMaxAndMinSpeed":439,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSnappedPointAndGeometry":152,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":264,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":80,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraph":147,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testEdgeFilter":151,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":200,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":428,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":102,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":76,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteNodeForUnidir":122,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":230,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":224,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":315,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":306,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":321,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes":359,"com.graphhopper.storage.LevelGraphStorageTest.testSave_and_fileFormat":119,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode2":361,"com.graphhopper.util.AngleCalcTest.testCalcAzimuth":131,"com.graphhopper.coll.CompressedArrayTest.testCompress2":2,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":269,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":456,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":285,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":114,"com.graphhopper.GraphHopperAPITest.testLoad":64,"com.graphhopper.storage.LevelGraphStorageTest.testNoCreateCalled":346,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":405,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":192,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":261,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":92,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":1,"com.graphhopper.storage.LevelGraphStorageTest.testClone":348,"com.graphhopper.reader.OSMReaderTest.testBarriers":29,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":71,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":111,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraphBug":146,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":175,"com.graphhopper.util.GHUtilityTest.testCopy":207,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":232,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":386,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testDifferentVehicles":158,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":49,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":413,"com.graphhopper.routing.PathTest.testFindInstruction":135,"com.graphhopper.storage.LevelGraphStorageTest.testPropertiesWithNoInit":364,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":112,"com.graphhopper.util.EdgeSkipIteratorTest.testUpdateFlags":65,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":198,"com.graphhopper.storage.LevelGraphStorageTest.testInfinityWeight":372,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":286,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":278,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":265,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":116,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":205,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":245,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":316,"com.graphhopper.storage.LevelGraphStorageTest.testEnsureSize":342,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":383,"com.graphhopper.storage.LevelGraphStorageTest.testFlags":350,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":252,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":416,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":412,"com.graphhopper.util.InstructionListTest.testWayList2":132,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":455,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":105,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":169,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":98,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":6,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":309,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":448,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":401,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":332,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":447,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":212,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":250,"com.graphhopper.storage.LevelGraphStorageTest.testFootMix":352,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":177,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":389,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":313,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":159,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBug1":231,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":239,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":113,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":46,"com.graphhopper.routing.PathBidirRefTest.testExtract":226,"com.graphhopper.storage.LevelGraphStorageTest.testEnabledElevation":363,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints120":154,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":381,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":334,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":380,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":441,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":465,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":173,"com.graphhopper.util.GHUtilityTest.testSort2":206,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":235,"com.graphhopper.reader.OSMReaderTest.testMain":27,"com.graphhopper.storage.LevelGraphStorageTest.testDoThrowExceptionIfDimDoesNotMatch":343,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":184,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":320,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":54,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":51,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testGrid":155,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectional":125,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":178,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":303,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":395,"com.graphhopper.storage.LevelGraphStorageTest.test8BytesFlags":124,"com.graphhopper.util.SimpleIntDequeTest.testEmpty":139,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdgesWithDelete":357,"com.graphhopper.storage.LevelGraphStorageTest.testDirectional":128,"com.graphhopper.routing.QueryGraphTest.testIterationBug_163":72,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete":354,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":115,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":404,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":454,"com.graphhopper.storage.LevelGraphStorageTest.testAddLocation":360,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":37,"com.graphhopper.storage.StorablePropertiesTest.testStore":424,"com.graphhopper.storage.GraphHopperStorageTest.testClone":255,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":282,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":421,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":42,"com.graphhopper.storage.RAMDirectoryTest.testNoDuplicates":423,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":179,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":263,"com.graphhopper.storage.LevelGraphStorageTest.testDisconnectEdge":335,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":48,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeFilter":338,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":387,"com.graphhopper.routing.PathTest.testTime":215,"com.graphhopper.storage.LevelGraphStorageTest.testNameIndex":373,"com.graphhopper.storage.LevelGraphStorageTest.testEdges":349,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":189,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":414,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":171,"com.graphhopper.storage.LevelGraphStorageTest.testCheckFirstNode":365,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":393,"com.graphhopper.util.GHUtilityTest.testSortDirected":209,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxAndMinSpeed":431,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":219,"com.graphhopper.GraphHopperTest.testFootOnly":23,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":40,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":160,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testReverseSpatialKey":57,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":434,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":229,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamToLeft":382,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":242,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":172,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":390,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":216,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":408,"com.graphhopper.routing.QueryGraphTest.testOneWay":223,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":299,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":7,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":163,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":4,"com.graphhopper.reader.OSMReaderTest.testWithBounds":36,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":45,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":141,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":220,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":331,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":378,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":199,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":419,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":433,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectionalEdgeFilter":121,"com.graphhopper.storage.LevelGraphStorageTest.testBigDataEdge":344,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":47,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":429,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":446,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":294,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":324,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":185,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":298,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":106,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":317,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":90,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":222,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":75,"com.graphhopper.util.InstructionListTest.testWayList":204,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":279,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":50,"com.graphhopper.GraphHopperAPITest.testDisconnected179":136,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":8,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":417,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":325,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":384,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":68,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":143,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":379,"com.graphhopper.storage.RAMIntDataAccessTest.testSet_Get_Short_Long":402,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":107,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":450,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":18,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":257,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":117,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":326,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":328,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":327,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":247,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":95,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":272,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":234,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":86,"com.graphhopper.storage.LevelGraphStorageTest.testPillarNodes":127,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":186,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":451,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":304,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeProperties":362,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":241,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":253,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testNoErrorOnEdgeCase_lastIndex":284,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameNoFlush":407,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":453,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":249,"com.graphhopper.routing.PathTest.testWayList":134,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":397,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":39,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":377,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":81,"com.graphhopper.storage.LevelGraphStorageTest.testCreateDuplicateEdges":126,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":323,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":266,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":193,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":256,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":310,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex2":58,"com.graphhopper.storage.LevelGraphStorageTest.testDozendEdges":358,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex3":59,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph":153,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":462,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":435,"com.graphhopper.util.GHUtilityTest.testSort":208,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":167,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":420,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":11,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":464,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":118,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":254,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":305,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testRMin":12,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":288,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":162,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":295,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":410,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":180,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":221,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":213,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":293,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":22,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":301,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":463,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":197,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":318,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":69,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":411,"com.graphhopper.storage.LevelGraphStorageTest.testGetLocations":356,"com.graphhopper.routing.PathTest.testFound":214,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":300,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":24,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":191,"com.graphhopper.storage.LevelGraphStorageTest.testCreateLocation":371,"com.graphhopper.util.AngleCalcTest.testAtan2":130,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeightIfAdvancedEncoder":337,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":137,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":314,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":103,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":93,"com.graphhopper.util.InstructionListTest.testEmptyList":202,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":144,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":437,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph2":156,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":79,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":188,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":183,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":182,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testMaxAndMinSpeed":445,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":268,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":236,"com.graphhopper.reader.PrinctonReaderTest.testRead":67,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":97,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testWayGeometry":150,"com.graphhopper.storage.LevelGraphStorageTest.testUpdateUnidirectional":123,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":311,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":376,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":322,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":99,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes2":347,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":319,"com.graphhopper.routing.util.EncodingManagerTest.testTurnFlagCombination":176,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":426,"com.graphhopper.reader.OSMReaderTest.testFoot":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":104,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":225,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":62,"com.graphhopper.storage.LevelGraphStorageTest.testCopyProperties":374,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":400,"com.graphhopper.reader.OSMReaderTest.testOneWay":38,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":63,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":262,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":276,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":275,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":329,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":271,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":44,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":259,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":392,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":244,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":55,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":41,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":83,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":248,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":84,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":296,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":194,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testFindingWayGeometry":148,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":388,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":218,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":251,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":461,"com.graphhopper.storage.MMapDirectoryTest.testNoErrorForDACreate":425,"com.graphhopper.routing.PathBidirRefTest.testExtract2":227,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":409,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":292,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":74,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":170,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":290,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":438,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":274,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":415,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":457,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":32,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":195,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":398,"com.graphhopper.util.SimpleIntDequeTest.testPush":140,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":297,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":85,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":166,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":96,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdges":351,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":187,"com.graphhopper.GraphHopperTest.testFootAndCar":19,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":270,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode":355,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":436,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints32":157,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":190,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":385,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":174,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":246,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":78,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":307,"com.graphhopper.GraphHopperTest.testPrepareOnly":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCorrectWeight":238,"com.graphhopper.GraphHopperTest.testVia":16,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":289,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":460,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":101,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":34,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeight":339,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":25,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":273,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":196,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":391,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":43,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeReturn":370,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete3":369,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete2":368,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":109}}]

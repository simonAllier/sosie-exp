[{"failures":[],"tindex":"19f7e133-dbe0-11e4-94ad-f543c0f03284","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:657","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.PriorityWeighting.com.graphhopper.routing.util.PriorityWeighting.isAssignableFrom(java.lang.Class<?>)"},"status":0},{"failures":[],"tindex":"1a01f354-dbe0-11e4-94ad-eb8282bde986","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:123","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"1a01f355-dbe0-11e4-94ad-51e591e79c41","variableMapping":{"tmp":"fwdSlower"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:138","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:209","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"1a01f356-dbe0-11e4-94ad-35c4fc83161d","variableMapping":{"versionHint":"highway"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:117","type":"CtIfImpl","sourcecode":"if (!(\"GH\".equals(java.lang.String)))\n    throw new java.lang.IllegalArgumentException((\"Not a GraphHopper file! Expected \\'GH\\' as file marker but was \" + java.lang.String));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:503","type":"CtIfImpl","sourcecode":"if (\"cycleway\".equals(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-1},{"failures":[],"tindex":"1a01f357-dbe0-11e4-94ad-fd2e117a055b","variableMapping":{"com.graphhopper.reader.OSMReader.TOWER_NODE":"noOfStates","id":"noOfStates"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:473","type":"CtIfImpl","sourcecode":"if (int < (com.graphhopper.reader.OSMReader.int))\n    return (-int) - 3;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TraversalMode:84","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if ((int) == 1)\n        return com.graphhopper.util.EdgeIteratorState.getEdge();\n    \n    return com.graphhopper.util.GHUtility.com.graphhopper.util.GHUtility.createEdgeKey(com.graphhopper.util.EdgeIteratorState.getAdjNode(), com.graphhopper.util.EdgeIteratorState.getBaseNode(), com.graphhopper.util.EdgeIteratorState.getEdge(), boolean);\n} "},"status":0},{"failures":[34,35,36,37,38,39,40],"tindex":"1a021a68-dbe0-11e4-94ad-71b6b4ce6795","variableMapping":{"sacScale":"key"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:169","type":"CtReturnImpl","sourcecode":"return (((\"hiking\".equals(java.lang.String)) || (\"mountain_hiking\".equals(java.lang.String))) || (\"demanding_mountain_hiking\".equals(java.lang.String))) || (\"alpine_hiking\".equals(java.lang.String))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:175","type":"CtIfImpl","sourcecode":"if (java.util.Set<java.lang.String>.contains(java.util.Map<java.lang.String, java.lang.Object>.get(java.lang.String)))\n    return true;\n"},"status":-1},{"failures":[0,35],"tindex":"1a021a69-dbe0-11e4-94ad-4705a6b066a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:476","type":"CtIfImpl","sourcecode":"if (double > 0)\n    try {\n        java.lang.Number java.lang.Number = com.graphhopper.reader.OSMWay.getTag(\"estimated_distance\", null);\n        if (java.lang.Number != null) {\n            double double = (java.lang.Number.doubleValue()) / 1000;\n            double = java.lang.Math.java.lang.Math.round(((double / double) / 1.4));\n            if (double > com.graphhopper.routing.util.AbstractFlagEncoder.(getMaxSpeed()))\n                double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed();\n            \n            double = double;\n        } \n    } catch (java.lang.Exception java.lang.Exception) {\n    }\n"},"status":-1},{"failures":[6],"tindex":"1a021a6a-dbe0-11e4-94ad-838d03c098d8","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:473","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"tindex":"1a021a6b-dbe0-11e4-94ad-0b80f9a5cf44","variableMapping":{"str":"highway","lon":"maxSpeed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:203","type":"CtIfImpl","sourcecode":"if (double >= 0)\n    java.lang.String += \"E\";\nelse\n    java.lang.String += \"W\";\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:464","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.lang.String>.contains(java.lang.String)) || (double > 80)) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.HashSet<java.lang.String>))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-1},{"failures":[33],"tindex":"1a021a6c-dbe0-11e4-94ad-1d3e5a93d4cb","variableMapping":{"entryVal":"entryVal","fe":"fe"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:162","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:159","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(java.lang.String)"},"status":-1},{"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,0,1,2,3,72,4,5,6,7,73,74,75,8,9,10,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,34,339,340,341,342,343,344,345,346,347,348,349,350,351,35,352,353,354,36,355,356,357,358,359,360,41,11,12,361,362,363,42,43,364,365,13,44,37,366,14,367,368,369,370,15,371,16,372,373,374,375,45,376,377,17,46,38,18,378,47,19,48,20,21,22,379,380,381,382,383,49,50,384,385,23,51,39,386,24,387,388,389,52,25,53,26,27,28,390,391,392,393,394,54,55,395,396,29,56,40,397,30,398,399,33,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460],"tindex":"1a02417d-dbe0-11e4-94ad-e5cd2c19994a","variableMapping":{"pavementName":"key","wayTypeName":"str"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:413","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    return java.lang.String;\nelse\n    return (java.lang.String + \", \") + java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:742","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.lang.String.split(\"\\\\|\")) {\n    java.lang.String = java.lang.String.trim().toLowerCase();\n    int int = java.lang.String.indexOf(\"=\");\n    if (int < 0)\n        continue;\n    \n    java.lang.String java.lang.String = java.lang.String.substring(0, int);\n    java.lang.String java.lang.String = java.lang.String.substring((int + 1));\n    if (java.lang.String.equals(java.lang.String))\n        return java.lang.String;\n    \n}"},"status":-1},{"failures":[57,68,2],"tindex":"1a02417e-dbe0-11e4-94ad-dd853aed4d76","variableMapping":{"str":"key"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:434","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \",\\t\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:83","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String, java.lang.String)"},"status":-1},{"failures":[],"tindex":"1a02417f-dbe0-11e4-94ad-673b339d52b6","variableMapping":{"weightLong":"shift","com.graphhopper.storage.LevelGraphStorage.MAX_WEIGHT_LONG":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:399","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.storage.LevelGraphStorage.long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:61","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"status":-2},{"failures":[],"tindex":"1a024180-dbe0-11e4-94ad-75fcd7aa8091","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:502","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType"},"status":-2},{"failures":[],"tindex":"1a024181-dbe0-11e4-94ad-1505d05676d6","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:150","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:486","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.routing.util.BikeCommonFlagEncoder.isPushingSection(com.graphhopper.reader.OSMWay)"},"status":-2},{"failures":[461],"tindex":"1a024182-dbe0-11e4-94ad-41e60501c757","variableMapping":{"str":"hourStr"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:200","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"0\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:442","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int)"},"status":-1},{"failures":[],"tindex":"1a024183-dbe0-11e4-94ad-23c53cddee19","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:73","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:403","type":"CtLocalVariableImpl","sourcecode":"long long = (com.graphhopper.util.EdgeSkipIterState.getFlags()) & com.graphhopper.routing.ch.PrepareEncoder.(com.graphhopper.routing.ch.PrepareEncoder.getScDirMask())"},"status":-2},{"failures":[],"tindex":"1a024184-dbe0-11e4-94ad-e5e78ef99987","variableMapping":{"allBits":"guess"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:92","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.lang.IllegalStateException(\"allBits must be positive\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:397","type":"CtWhileImpl","sourcecode":"while ((int - int) > 1) {\n    int = (int + int) / 2;\n    if ((int[][int]) < int) {\n        int = int;\n    } else {\n        int = int;\n    }\n}"},"status":-2},{"failures":[],"tindex":"1a024185-dbe0-11e4-94ad-ed91baa9df3e","variableMapping":{"lazyUpdates":"from"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:130","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"lazyUpdates has to be in [0, 100], to disable it use 0\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:61","type":"CtIfImpl","sourcecode":"if (boolean) {\n    int int = int;\n    int = int;\n    int = int;\n} "},"status":0},{"failures":[462,88,463,464,465,466],"tindex":"1a024186-dbe0-11e4-94ad-1d0016682b7c","variableMapping":{"a_lon_deg":"y","factor":"y"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:224","type":"CtLocalVariableImpl","sourcecode":"double double = double * double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:35","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.(java.lang.Math.abs(double)) + 1.0E-10"},"status":-1},{"failures":[],"tindex":"1a024187-dbe0-11e4-94ad-d9ea2582bb82","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:167","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[],"tindex":"1a024188-dbe0-11e4-94ad-0d3d2e611dc4","variableMapping":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"sLat","speed":"sLat"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:363","type":"CtAssignmentImpl","sourcecode":"int = (com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:142","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-2},{"failures":[],"tindex":"1a024189-dbe0-11e4-94ad-390c7e768599","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:359","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:374","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"1a02418a-dbe0-11e4-94ad-151f5cb7c7dc","variableMapping":{"y1":"skippedEdge2","y2":"skippedEdge2","x1":"to","x2":"skippedEdge2"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:129","type":"CtIfImpl","sourcecode":"if ((int == int) && (int == int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:73","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n"},"status":-2},{"failures":[],"tindex":"1a02418b-dbe0-11e4-94ad-b7dd7e17f794","variableMapping":{"newAdjIndex":"speed","newBaseIndex":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:253","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int < 0))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:359","type":"CtIfImpl","sourcecode":"if ((int > (com.graphhopper.routing.util.BikeCommonFlagEncoder.int)) && ((!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", java.util.HashSet<java.lang.String>))) && (com.graphhopper.reader.OSMWay.hasTag(\"highway\", java.util.HashSet<java.lang.String>)))) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))\n        int = (com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2;\n    else\n        int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int;\n    \n} "},"status":-2},{"failures":[],"tindex":"1a02418c-dbe0-11e4-94ad-e344d4eb5903","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:715","type":"CtLocalVariableImpl","sourcecode":"double double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:159","type":"CtLocalVariableImpl","sourcecode":"double double = 0"},"status":-2},{"failures":[59,62,9,89,349,353,354,467,21,27],"tindex":"1a02689d-dbe0-11e4-94ad-179362d4e211","variableMapping":{"lat":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:129","type":"CtIfImpl","sourcecode":"if ((double > 60) || (double < (-60)))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:766","type":"CtIfImpl","sourcecode":"if (boolean || (double < double))\n    return double * 0.9;\n"},"status":-1},{"failures":[],"tindex":"1a02689e-dbe0-11e4-94ad-4573604ad117","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:53","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.calcMillis(double, long, boolean)"},"status":0},{"failures":[11,12,13,16,17,20,22,23,26,28,29],"tindex":"1a02689f-dbe0-11e4-94ad-bd5f238ebac8","variableMapping":{"size":"paveType","from":"com.graphhopper.routing.util.BikeCommonFlagEncoder.K_UNPAVED","end":"paveType"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:360","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int > (int)))\n    throw new java.lang.IllegalArgumentException((((((\"Illegal interval: \" + int) + \", \") + int) + \", size:\") + (int)));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:375","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.int))\n    int = 1;\n"},"status":-1},{"failures":[],"tindex":"1a0268a0-dbe0-11e4-94ad-4f3d327360e5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:451","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[],"tindex":"1a0268a1-dbe0-11e4-94ad-e3402393b60f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathNative:57","type":"CtAssignmentImpl","sourcecode":"int = int[][int]"},"status":-1},{"failures":[],"tindex":"1a088322-dbe0-11e4-94ad-db1d29177b03","variableMapping":{"maxMCSpeed":"java.lang.Math.PI","speed":"resultOrientation"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:174","type":"CtAssignmentImpl","sourcecode":"double = double * 0.9"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:82","type":"CtAssignmentImpl","sourcecode":"double = double - (2 * (java.lang.Math.double))"},"status":-2},{"failures":[37,38,39,40],"tindex":"1a088323-dbe0-11e4-94ad-ddfbac3fd005","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:218","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.HashSet<java.lang.String>)) {\n        java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"bicycle\");\n        if (((java.lang.String == null) && (!(com.graphhopper.reader.OSMWay.hasTag(\"foot\")))) || (\"yes\".equals(java.lang.String)))\n            return (long) | (long);\n        \n    } \n    return 0;\n} "},"status":-1},{"failures":[],"tindex":"1a088324-dbe0-11e4-94ad-b36decf888bd","variableMapping":{"str":"message"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:206","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"W\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:45","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String"},"status":0},{"failures":[],"tindex":"1a088325-dbe0-11e4-94ad-7325735150c7","variableMapping":{"weight":"incEleSum"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:327","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.LevelGraphStorage.this.setWeight(this, double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:163","type":"CtIfImpl","sourcecode":"if (double > 0.1) {\n    double = double;\n    double = double;\n} else if (double < (-0.1)) {\n    double = -double;\n    double = double;\n} "},"status":-2},{"failures":[],"tindex":"1a088326-dbe0-11e4-94ad-9d38f57259af","variableMapping":{"com.graphhopper.routing.ch.PrepareEncoder.scDirMask":"acceptBit"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareEncoder:36","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.ch.PrepareEncoder.long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:235","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"1a088327-dbe0-11e4-94ad-e119af83ce33","variableMapping":{"edgeId":"segmentSizeInBytes"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.PathBidir:70","type":"CtIfImpl","sourcecode":"if (int < 0)\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:109","type":"CtIfImpl","sourcecode":"if ((long % (int)) != 0)\n    int++;\n"},"status":-2},{"failures":[0,9,10,36],"tindex":"1a088328-dbe0-11e4-94ad-cff32026da07","variableMapping":{"systemProperty":"motorcarTag"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:59","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"-D\"))\n    java.lang.String = java.lang.String.substring(2);\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:172","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motor_vehicle\");\n"},"status":-1},{"failures":[],"tindex":"1a08aa39-dbe0-11e4-94ad-3ddc31ced979","variableMapping":{"hasOther":"defaultB","hasRel":"defaultB"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMRelation:102","type":"CtIfImpl","sourcecode":"if (boolean && boolean) {\n    return true;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:734","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    return boolean;\n"},"status":0},{"failures":[],"tindex":"1a08aa3a-dbe0-11e4-94ad-21e425992be6","variableMapping":{"additionalEdgeFilter":"com.graphhopper.routing.util.EdgeFilter.ALL_EDGES"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AbstractRoutingAlgorithm:62","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.routing.util.EdgeFilter = com.graphhopper.routing.util.EdgeFilter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:57","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EdgeFilter = com.graphhopper.routing.util.EdgeFilter.com.graphhopper.routing.util.EdgeFilter"},"status":-2},{"failures":[57,59,60,61,62,63,65,66,67,68,1,2,3,72,4,5,7,74,8,468,469,470,471,81,86,87,88,89,472,473,474,475,118,476,145,146,147,149,152,153,154,172,173,174,477,192,195,200,221,227,232,234,235,239,244,265,271,276,278,279,282,285,290,311,317,322,324,325,478,387,388,404,405,427,447,448,450,451,452,453,454,455,457,458],"tindex":"1a08aa3b-dbe0-11e4-94ad-bd8631ed832f","variableMapping":{"turnCostsCount":"index"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:63","type":"CtIfImpl","sourcecode":"if ((int) > 0)\n    throw new java.lang.AssertionError(\"The turn cost storage must be initialized only once.\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:266","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int -= int;\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n    byte[] = byte[][][(int + 1)];\n    java.lang.System.java.lang.System.arraycopy(byte[], int, byte[], 0, int);\n} else {\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n}"},"status":-1},{"failures":[],"tindex":"1a08aa3c-dbe0-11e4-94ad-1d2c003b8e9e","variableMapping":{"com.graphhopper.routing.ch.PrepareEncoder.scDirMask":"ferryBit"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareEncoder:36","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.ch.PrepareEncoder.long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:225","type":"CtReturnImpl","sourcecode":"return (long) | (long)"},"status":0},{"failures":[],"tindex":"1a08aa3d-dbe0-11e4-94ad-4f7dba27338f","variableMapping":{"daType":"type"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:121","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.storage.DAType = com.graphhopper.storage.DAType"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:81","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, com.graphhopper.storage.DAType>.put(java.lang.String, com.graphhopper.storage.DAType)"},"status":0},{"failures":[57,63,65,66,68,96,118,479,480,481,482,483,484,485,486,192,195,204,239,248,270,282,285,294,316,487,488],"tindex":"1a08aa3e-dbe0-11e4-94ad-c1f348f358b2","variableMapping":{"size":"value"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:235","type":"CtAssignmentImpl","sourcecode":"this.int = 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:85","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"1a08aa3f-dbe0-11e4-94ad-15a7f583c5c4","variableMapping":{"minResolutionInMeter":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:262","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.lang.IllegalStateException(\"Negative precision is not allowed!\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:223","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, true);\n    if ((double > 30) && (com.graphhopper.reader.OSMWay.hasTag(\"surface\", java.util.Set<java.lang.String>)))\n        double = 30;\n    \n    long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean)\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n    \n    if ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.HashSet<java.lang.String>)) || boolean) {\n        if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\"))\n            long |= long;\n        else\n            long |= long;\n        \n    } else\n        long |= long;\n    \n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"service\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"residential\"));\n    long |= long;\n}"},"status":0},{"failures":[388],"tindex":"1a08aa40-dbe0-11e4-94ad-05896922c040","variableMapping":{"deltaX":"fwdSlower","maxX":"fwdSlower"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:73","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:209","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"status":-1},{"failures":[],"tindex":"1a08aa41-dbe0-11e4-94ad-235eb63fccae","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:170","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:273","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"status":-2},{"failures":[],"tindex":"1a08aa42-dbe0-11e4-94ad-332172f5fe3f","variableMapping":{"visitedCountFrom":"bitsForEdgeFlags","visitedCountTo":"bitsForEdgeFlags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AbstractBidirAlgo:80","type":"CtReturnImpl","sourcecode":"return (int) + (int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:127","type":"CtReturnImpl","sourcecode":"return (int) / 8"},"status":-2},{"failures":[89,489],"tindex":"1a08aa43-dbe0-11e4-94ad-dbfe0830dde8","variableMapping":{"graphHopperFolder":"str"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:670","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"-gh\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:395","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int).trim()"},"status":-1},{"failures":[0,461],"tindex":"1a08aa44-dbe0-11e4-94ad-9b47fe6b0a7d","variableMapping":{"red":"minutes"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:160","type":"CtOperatorAssignmentImpl","sourcecode":"int += 50"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:447","type":"CtOperatorAssignmentImpl","sourcecode":"int += java.lang.Integer.(java.lang.Integer.parseInt(java.lang.String)) * 60"},"status":-1},{"failures":[490,491,492,493,440,444],"tindex":"1a08aa45-dbe0-11e4-94ad-b58b8a8f044d","variableMapping":{"bit":"i"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:93","type":"CtAssignmentImpl","sourcecode":"int = (int / 2) + 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:216","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"1a08d156-dbe0-11e4-94ad-315885da716b","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:132","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:396","type":"CtLocalVariableImpl","sourcecode":"int int"},"status":-2},{"failures":[],"tindex":"1a08d157-dbe0-11e4-94ad-c5fe277312f2","variableMapping":{"high":"length"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:497","type":"CtReturnImpl","sourcecode":"return ~int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:307","type":"CtReturnImpl","sourcecode":"return int[][].int"},"status":-2},{"failures":[57,59,60,61,62,63,65,66,67,68,70,71,0,1,2,3,72,4,5,6,7,74,75,8,9,10,494,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,103,118,130,131,132,133,135,136,137,138,139,140,142,143,495,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,496,497,481,498,499,500,501,482,502,503,504,505,187,188,189,190,191,192,193,194,195,196,197,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,284,285,286,287,288,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,334,340,341,342,343,344,345,387,388,400,401,402,403,404,405,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,434,435,436,437,438,439,440,441,442,443,444,445,447,447,448,448,449,449,450,450,451,451,452,452,453,453,454,454,455,455,456,456,457,457,458,458],"tindex":"1a08d158-dbe0-11e4-94ad-bfe0b0bdeae1","variableMapping":{"retBucket":"segmentSizeIntsPower"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:100","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:314","type":"CtAssignmentImpl","sourcecode":"int = ((int)(java.lang.Math.(java.lang.Math.log(((int) / 4))) / java.lang.Math.(java.lang.Math.log(2))))"},"status":-1},{"failures":[72,74,347],"tindex":"1a08d159-dbe0-11e4-94ad-71e085b2c21a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:229","type":"CtIfImpl","sourcecode":"if (boolean)\n    return long;\n"},"status":-1},{"failures":[],"tindex":"1a08d15a-dbe0-11e4-94ad-73497aea02ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:121","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.routing.util.EncodedValue.getValue(long)"},"status":-2},{"failures":[57,62,67,1,5,6,335,338,34,351,35,36,360,37,38,21,380,39,27,391,40],"tindex":"1a08d15b-dbe0-11e4-94ad-0f5a25659946","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:175","type":"CtIfImpl","sourcecode":"if (java.util.Set<java.lang.String>.contains(java.util.Map<java.lang.String, java.lang.Object>.get(java.lang.String)))\n    return true;\n"},"status":-1},{"failures":[],"tindex":"1a08d15c-dbe0-11e4-94ad-532964f4fc07","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.XFirstSearch:44","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"1a08d15d-dbe0-11e4-94ad-b50d5c14d6eb","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:735","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[],"tindex":"1a08d15e-dbe0-11e4-94ad-cf53cd0bd920","variableMapping":{"freeIndex":"com.graphhopper.routing.util.FootFlagEncoder.SLOW_SPEED","currentIndex":"com.graphhopper.routing.util.FootFlagEncoder.SLOW_SPEED"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:98","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = int;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:271","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if (\"hiking\".equals(java.lang.String))\n        long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n    else\n        long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n    \n} else {\n    long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n}"},"status":-2},{"failures":[],"tindex":"1a08f86f-dbe0-11e4-94ad-e51c6098bd98","variableMapping":{"acceptedRailways":"sidewalks","way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:253","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"railway\")) && (!(com.graphhopper.reader.OSMWay.hasTag(\"railway\", java.util.HashSet<java.lang.String>))))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:210","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"sidewalk\", java.util.HashSet<java.lang.String>))\n    return long;\n"},"status":0},{"failures":[],"tindex":"1a08f870-dbe0-11e4-94ad-21a2aa83e4dc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:302","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.AbstractDataAccess.close()"},"status":0},{"failures":[],"tindex":"1a08f871-dbe0-11e4-94ad-15230a4c4a5d","variableMapping":{"arrayLength":"maxCount","maxGeoRef":"maxCount"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:340","type":"CtOperatorAssignmentImpl","sourcecode":"int += int + 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:174","type":"CtAssignmentImpl","sourcecode":"int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue()"},"status":0},{"failures":[59,60,61,62,66,1,2,6,10,76,81,86,87,88,93,94,97,98,103,108,110,116,118,121,123,124,128,187,191,195,201,202,205,206,211,216,218,224,226,229,231,232,236,239,245,246,249,250,255,260,262,268,270,273,275,276,280,282,285,291,292,295,296,301,306,308,314,316,319,321,322,326,328,334,336,340,341,343,344,350,36,358,388,404,407,409,410,413,417,419,422,424,426,427,428,430,431,432,434,435,436,437,438,440,441,442,444,445,451,454],"tindex":"1a08f872-dbe0-11e4-94ad-7d133291bfee","variableMapping":{"initialBits":"backwardBit","allBits":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:98","type":"CtAssignmentImpl","sourcecode":"long = 1L << (int - 1)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:157","type":"CtAssignmentImpl","sourcecode":"long = 2L << int"},"status":-1},{"failures":[],"tindex":"1a08f873-dbe0-11e4-94ad-1b8a3a1822d9","variableMapping":{"nodeB":"length","edgeId":"length","nodeA":"length"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:511","type":"CtReturnImpl","sourcecode":"return int > int ? int : int + 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:307","type":"CtReturnImpl","sourcecode":"return int[][].int"},"status":-2},{"failures":[],"tindex":"1a08f874-dbe0-11e4-94ad-0f522d2f9447","variableMapping":{"len":"flags","start":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:118","type":"CtReturnImpl","sourcecode":"return ~(long + long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:122","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"1a08f875-dbe0-11e4-94ad-81b416b46893","variableMapping":{"acceptedRailways":"restrictedValues","way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:253","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"railway\")) && (!(com.graphhopper.reader.OSMWay.hasTag(\"railway\", java.util.HashSet<java.lang.String>))))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:231","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(java.util.List<java.lang.String>, java.util.HashSet<java.lang.String>))\n    return 0;\n"},"status":0},{"failures":[57,60,61,63,66,67,2,72,4,5,6,7,8,468,469,506,470,471,507,508,509,87,88,92,113,118,119,124,479,510,511,512,513,514,515,152,154,172,174,498,503,504,505,483,516,517,518,519,520,521,195,200,221,227,232,239,244,265,271,276,282,285,290,311,317,322,522,404,427,448,451,452,454,455,458],"tindex":"1a08f876-dbe0-11e4-94ad-b3828bd67b52","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:57","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(int))"},"status":-1},{"failures":[342,343],"tindex":"1a08f877-dbe0-11e4-94ad-951d4092f186","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:159","type":"CtForEachImpl","sourcecode":"for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> java.util.Map.Entry<java.lang.Integer, java.lang.Integer> : java.util.Map<java.lang.Integer, java.lang.Integer>.entrySet()) {\n    if (int < 0) {\n        int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getKey();\n        int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue();\n        continue;\n    } \n    if (int < (java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue())) {\n        com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeNetwork(int, int, com.graphhopper.coll.GHBitSetImpl);\n        int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getKey();\n        int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue();\n    } else {\n        com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeNetwork(java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getKey(), java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue(), com.graphhopper.coll.GHBitSetImpl);\n    }\n}"},"status":-1},{"failures":[],"tindex":"1a08f878-dbe0-11e4-94ad-cb23af4d57d4","variableMapping":{"edgeTo":"int0","edgeFrom":"int0"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMTurnRelation:157","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | ((long)(int))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:63","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | (int & 4294967295L)"},"status":-2},{"failures":[59,60,63,329,408,409,410,411,412,414,415,417,418,419,420,421,422,423,424,427,429,430,434,440,445],"tindex":"1a08f879-dbe0-11e4-94ad-67a85d6f092f","variableMapping":{"eof":"finishedTo"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMInputFile:162","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"EOF reached\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:72","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo());\n"},"status":-1},{"failures":[],"tindex":"1a08f87a-dbe0-11e4-94ad-cb4cddffb2cd","variableMapping":{"index":"index"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.CmdArgs:93","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    continue;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:287","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int -= int;\n    java.lang.System.java.lang.System.arraycopy(byte[], int, byte[], 0, int);\n    byte[] = byte[][][(int + 1)];\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n} else {\n    java.lang.System.java.lang.System.arraycopy(byte[], int, byte[], 0, int);\n}"},"status":-2},{"failures":[],"tindex":"1a08f87b-dbe0-11e4-94ad-43bc502eff24","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:73","type":"CtAssignmentImpl","sourcecode":"boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo())"},"status":-2},{"failures":[],"tindex":"1a091e8c-dbe0-11e4-94ad-01378f3c37e4","variableMapping":{"distance":"shortTripsSpeed","speed":"shortTripsSpeed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.Path:226","type":"CtReturnImpl","sourcecode":"return ((long)((double * 3600) / double))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:505","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double)"},"status":-2},{"failures":[],"tindex":"1a091e8d-dbe0-11e4-94ad-37a760778389","variableMapping":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.UNCHANGED":"com.graphhopper.routing.util.PriorityCode.VERY_NICE","trackType":"highway","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.VERY_NICE","com.graphhopper.routing.util.PriorityCode.VERY_NICE":"com.graphhopper.routing.util.PriorityCode.VERY_NICE"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:142","type":"CtIfImpl","sourcecode":"if (\"grade1\".equals(java.lang.String))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse if (java.lang.String == null)\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse if (java.lang.String.startsWith(\"grade\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:450","type":"CtIfImpl","sourcecode":"if (\"cycleway\".equals(java.lang.String))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-2},{"failures":[462,87,88,89,463,465,466,404,405],"tindex":"1a091e8e-dbe0-11e4-94ad-b737f3c8dd0d","variableMapping":{"dX":"lon2","dY":"lon2"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:61","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.AngleCalc.com.graphhopper.util.AngleCalc.atan2((double - double), (double - double))"},"status":-1},{"failures":[],"tindex":"1a091e8f-dbe0-11e4-94ad-73e3d8985274","variableMapping":{"eleDelta":"fwdFaster","decEleSum":"fwdFaster"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:169","type":"CtAssignmentImpl","sourcecode":"double = -double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:207","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"status":0},{"failures":[],"tindex":"1a091e90-dbe0-11e4-94ad-cdde02b7063f","variableMapping":{"keyIndex":"from"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:240","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    break;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:59","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.AbstractBidirAlgo.initFrom(int, 0)"},"status":-2},{"failures":[1,6,73,10,357,11,12,363,13,14,16,375,17,18,523,524,19,20,22,379,383,23,24,25,26,28,390,394,29,30,31,525,32],"tindex":"1a091e91-dbe0-11e4-94ad-f7ce5920035f","variableMapping":{"shift":"value","tmpValue":"value"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:61","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:81","type":"CtOperatorAssignmentImpl","sourcecode":"long /= double"},"status":-1},{"failures":[],"tindex":"1a091e92-dbe0-11e4-94ad-f3b5d866232c","variableMapping":{"lon1":"d1","lon2":"epsilon","this":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:99","type":"CtReturnImpl","sourcecode":"return java.lang.Math.(java.lang.Math.abs((double - double))) > 180.0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.NumHelper:34","type":"CtReturnImpl","sourcecode":"return java.lang.Math.(java.lang.Math.abs((double - double))) < double"},"status":-2},{"failures":[526,527,150,156,158,159,528,170,176,178,179,529,530,531,532,533,534,535,536],"tindex":"1a091e93-dbe0-11e4-94ad-3968aa18cb1d","variableMapping":{"minDistance":"maxLonTmp","rMin":"lon"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:737","type":"CtIfImpl","sourcecode":"if (double < double) {\n    break;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:182","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double double = (double + double) / 2;\n    if (double < double) {\n        double = double;\n    } else {\n        long |= 1;\n        double = double;\n    }\n} "},"status":-1},{"failures":[],"tindex":"1a091e94-dbe0-11e4-94ad-4d40febad737","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:59","type":"CtLocalVariableImpl","sourcecode":"final java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState> java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState> = new java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>()"},"status":-2},{"failures":[340,344,345],"tindex":"1a091e95-dbe0-11e4-94ad-2f10f386728c","variableMapping":{"turnCostsCount":"start"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:63","type":"CtIfImpl","sourcecode":"if ((int) > 0)\n    throw new java.lang.AssertionError(\"The turn cost storage must be initialized only once.\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:76","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHBitSetImpl.set(int)"},"status":-1},{"failures":[],"tindex":"1a091e96-dbe0-11e4-94ad-eb1c457726ec","variableMapping":{"str":"wayTypeName"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:284","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\",\"))\n    return \"destinations: \" + java.lang.String;\nelse\n    return \"destination: \" + java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:406","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty()) {\n    if ((int == 0) || (int == 3))\n        return \"\";\n    \n    return java.lang.String;\n} else {\n    if (java.lang.String.isEmpty())\n        return java.lang.String;\n    else\n        return (java.lang.String + \", \") + java.lang.String;\n    \n}"},"status":-2},{"failures":[],"tindex":"1a091e97-dbe0-11e4-94ad-a15cd7671263","variableMapping":{"id":"sLon"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:487","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:136","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-2},{"failures":[],"tindex":"1a0945a8-dbe0-11e4-94ad-0d8451d8a43d","variableMapping":{"c":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:228","type":"CtReturnImpl","sourcecode":"return int > 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:678","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return (long & (long)) != 0;\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return (long & (long)) != 0;\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return (long & (long)) != 0;\n    default :\n        throw new java.lang.IllegalArgumentException(((\"Unknown key \" + int) + \" for boolean value\"));\n}"},"status":-2},{"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,0,1,2,3,72,4,5,6,7,74,75,8,9,10],"tindex":"1a0945a9-dbe0-11e4-94ad-3dfd3132a44c","variableMapping":{"size":"bytes"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:111","type":"CtIfImpl","sourcecode":"if ((int) <= 0) {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:179","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int int = ((int)(java.lang.Math.(java.lang.Math.log(int)) / java.lang.Math.(java.lang.Math.log(2))));\n    int = java.lang.Math.java.lang.Math.max(java.lang.Math.((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int);\n} "},"status":-1},{"failures":[],"tindex":"1a0945aa-dbe0-11e4-94ad-6359ec2721a0","variableMapping":{"closestEdge":"edge","detach":"edge"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.QueryResult:131","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState = com.graphhopper.util.EdgeIteratorState"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:225","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setFlags(long)"},"status":0},{"failures":[],"tindex":"1a0945ab-dbe0-11e4-94ad-255361fe1d32","variableMapping":{"algo":"highway"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:103","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    this.java.lang.String = java.lang.String;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:505","type":"CtIfImpl","sourcecode":"if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":0},{"failures":[],"tindex":"1a0945ac-dbe0-11e4-94ad-939b9ec91652","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:71","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)))"},"status":-2},{"failures":[],"tindex":"1a0945ad-dbe0-11e4-94ad-a13c6ab6fe95","variableMapping":{"index":"high"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:164","type":"CtOperatorAssignmentImpl","sourcecode":"int *= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:406","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[16],"tindex":"1a0945ae-dbe0-11e4-94ad-b35ae09b2044","variableMapping":{"way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:171","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:130","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"status":-1},{"failures":[],"tindex":"1a0945af-dbe0-11e4-94ad-8124b4e57ed9","variableMapping":{"sacScale":"val"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:202","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if ((((!(\"hiking\".equals(java.lang.String))) && (!(\"mountain_hiking\".equals(java.lang.String)))) && (!(\"demanding_mountain_hiking\".equals(java.lang.String)))) && (!(\"alpine_hiking\".equals(java.lang.String))))\n        return 0;\n    \n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:726","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    return long;\n"},"status":0},{"failures":[],"tindex":"1a0945b0-dbe0-11e4-94ad-679e14aead67","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:247","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[526,527,150,156,158,159,528,170,176,178,179,529,530,531,532,533,534,535,536],"tindex":"1a0945b1-dbe0-11e4-94ad-4b4e77cde6c3","variableMapping":{"towerNodeDistance":"lon","zeroCounter":"hash"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:740","type":"CtIfImpl","sourcecode":"if (double == 0) {\n    (long)++;\n    double = 1.0E-4;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:182","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double double = (double + double) / 2;\n    if (double < double) {\n        double = double;\n    } else {\n        long |= 1;\n        double = double;\n    }\n} "},"status":-1},{"failures":[],"tindex":"1a0945b2-dbe0-11e4-94ad-6b1b6dfca66f","variableMapping":{"incEleSum":"fwdDecline","incDist2DSum":"fwdDecline"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:198","type":"CtLocalVariableImpl","sourcecode":"double double = double > 1 ? double / double : 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:219","type":"CtLocalVariableImpl","sourcecode":"double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)))"},"status":-2},{"failures":[526,527,150,156,158,159,528,170,176,178,179,529,530,537,531,532,533,534,535,536],"tindex":"1a0945b3-dbe0-11e4-94ad-679a798fc222","variableMapping":{"com.graphhopper.storage.LevelGraphStorage.MAX_WEIGHT":"maxLatTmp","com.graphhopper.storage.LevelGraphStorage.WEIGHT_FACTOR":"midLat","weight":"minLatTmp","weightLong":"hash","com.graphhopper.storage.LevelGraphStorage.MAX_WEIGHT_LONG":"hash"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:398","type":"CtIfImpl","sourcecode":"if (double > (com.graphhopper.storage.LevelGraphStorage.double))\n    long = com.graphhopper.storage.LevelGraphStorage.long;\nelse\n    long = ((long)((double * (com.graphhopper.storage.LevelGraphStorage.double)))) << 2;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:165","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} else {\n    long |= 1;\n    double = double;\n}"},"status":-1},{"failures":[41],"tindex":"1a0945b4-dbe0-11e4-94ad-bf250329baa4","variableMapping":{"way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:194","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"foot\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:138","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-1},{"failures":[],"tindex":"1a0945b5-dbe0-11e4-94ad-9734dd290fa7","variableMapping":{"r":"maxEle","angle":"maxEle"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:47","type":"CtOperatorAssignmentImpl","sourcecode":"double += (((0.1963 * double) * double) - 0.9817) * double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:49","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.com.graphhopper.util.shapes.BBox.double = -(java.lang.Double.double)"},"status":-2},{"failures":[62,68,0,1,2,3,72,4,5,6,7,74,75,8,9,10,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,136,143,166,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,331,332,333,334,335,336,337,338,34,339,342,346,347,348,349,350,351,35,352,353,354,36,355,356,357,358,359,360,41,11,12,361,362,363,42,43,364,365,13,44,37,366,14,370,15,371,16,372,373,374,375,45,376,377,17,46,38,18,378,47,19,48,20,21,22,379,380,381,382,383,49,50,384,385,23,51,39,386,24,387,388,389,52,25,53,26,27,28,390,391,392,393,394,54,55,395,396,29,56,40,397,30,398,31,525,538,32,33,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,446,447,459,460],"tindex":"1a096cc6-dbe0-11e4-94ad-4d36e3d37199","variableMapping":{"encodingManager":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1003","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.EncodingManager.getVehicleCount()) > 1)\n    throw new java.lang.IllegalArgumentException(((\"Contraction hierarchies preparation \" + \"requires (at the moment) only one vehicle. But was:\") + (com.graphhopper.routing.util.EncodingManager)));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodingManager.registerEncoder(((com.graphhopper.routing.util.AbstractFlagEncoder)(com.graphhopper.routing.util.FlagEncoder)))"},"status":-1},{"failureDictionary":{"com.graphhopper.storage.LevelGraphStorageTest.testCopyTo":226,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":425,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":448,"com.graphhopper.storage.LevelGraphStorageTest.testCannotBeLoadedViaDifferentClass":192,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":467,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":139,"com.graphhopper.GraphHopperAPITest.testNoLoad":330,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":93,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":77,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":78,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":21,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":372,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testMoreReal":173,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":58,"com.graphhopper.util.InstructionTest.testGetAzimuthAndGetDirection":462,"com.graphhopper.storage.LevelGraphStorageTest.testSetNodes":237,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":29,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":115,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":300,"com.graphhopper.coll.CompressedArrayTest.testCompress":527,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":377,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":279,"com.graphhopper.storage.LevelGraphStorageTest.testPriosWhileDeleting":193,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":436,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":113,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":255,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSortHighLevelFirst":169,"com.graphhopper.util.AngleCalcTest.testOrientation":463,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":442,"com.graphhopper.GraphHopperTest.testPrepare":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":125,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":424,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":262,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":431,"com.graphhopper.coll.IntDoubleBinHeapTest.testSpreading":493,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":48,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":86,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":417,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":495,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":17,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":91,"com.graphhopper.storage.LevelGraphStorageTest.internalDisconnect":198,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex":170,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":344,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":16,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":47,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":497,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":409,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":254,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":415,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":153,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":5,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":325,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":22,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":69,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat_withTurnCostEntries":282,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":534,"com.graphhopper.storage.LevelGraphStorageTest.testDetachEdge":200,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":492,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":445,"com.graphhopper.GraphHopperTest.testLoadOSM":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":160,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":500,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":154,"com.graphhopper.routing.util.EncodingManagerTest.testEncoderAcceptNoException":399,"com.graphhopper.reader.OSMReaderTest.testSort":3,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxAndMinSpeed":51,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":75,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":342,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":286,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":510,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":274,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":239,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":532,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":126,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":454,"com.graphhopper.storage.RAMDataAccessTest.testHeader":484,"com.graphhopper.routing.DijkstraTest.initializationError":459,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":494,"com.graphhopper.storage.MMapDataAccessTest.testHeader":488,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":321,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":522,"com.graphhopper.storage.LevelGraphStorageTest.testBounds":225,"com.graphhopper.storage.UnsafeDataAccessTest.testHeader":486,"com.graphhopper.storage.RAMIntDataAccessTest.testExceptionIfNoEnsureCapacityWasCalled":499,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":251,"com.graphhopper.storage.LevelGraphStorageTest.testPrios":188,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":433,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":283,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":278,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":295,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":26,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteAndOptimize":210,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":290,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":14,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testMaxAndMinSpeed":44,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSnappedPointAndGeometry":177,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":259,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraph":168,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":421,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testEdgeFilter":175,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":64,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":101,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":412,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteNodeForUnidir":202,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":411,"com.graphhopper.coll.OSMIDMapTest.testGetLong":470,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":304,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":457,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":293,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":310,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes":217,"com.graphhopper.storage.LevelGraphStorageTest.testSave_and_fileFormat":195,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode2":219,"com.graphhopper.util.AngleCalcTest.testCalcAzimuth":465,"com.graphhopper.coll.CompressedArrayTest.testCompress2":526,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":264,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":41,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":137,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":301,"com.graphhopper.GraphHopperAPITest.testLoad":328,"com.graphhopper.storage.LevelGraphStorageTest.testNoCreateCalled":199,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":498,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":332,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":256,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":246,"com.graphhopper.storage.LevelGraphStorageTest.testClone":204,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":461,"com.graphhopper.reader.OSMReaderTest.testBarriers":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":291,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":345,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraphBug":167,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":390,"com.graphhopper.util.GHUtilityTest.testCopy":81,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":97,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":414,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testDifferentVehicles":186,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":364,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":38,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":141,"com.graphhopper.storage.RAMDataAccessTest.testLoadClose":520,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":375,"com.graphhopper.routing.PathTest.testFindInstruction":405,"com.graphhopper.storage.LevelGraphStorageTest.testPropertiesWithNoInit":222,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":292,"com.graphhopper.coll.IntDoubleBinHeapTest.testBasic":490,"com.graphhopper.util.EdgeSkipIteratorTest.testUpdateFlags":76,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":338,"com.graphhopper.storage.LevelGraphStorageTest.testInfinityWeight":233,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":53,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":138,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":275,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":260,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":79,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":319,"com.graphhopper.storage.LevelGraphStorageTest.testEnsureSize":194,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":305,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":438,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":395,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":538,"com.graphhopper.routing.DijkstraBidirectionRefTest.initializationError":446,"com.graphhopper.storage.LevelGraphStorageTest.testFlags":206,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":98,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":242,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":505,"com.graphhopper.util.InstructionListTest.testWayList2":88,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":397,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":121,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":161,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":280,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":537,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":296,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":20,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":324,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":368,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":240,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":387,"com.graphhopper.storage.LevelGraphStorageTest.testFootMix":208,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":476,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":379,"com.graphhopper.storage.SynchedDAWrapperTest.testEnsureCapacity":511,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":107,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":302,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":144,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":245,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBug1":413,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":4,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":479,"com.graphhopper.routing.AStarTest.initializationError":331,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":427,"com.graphhopper.coll.OSMIDMapTest.testGet":468,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":299,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":485,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":34,"com.graphhopper.routing.PathBidirRefTest.testExtract":400,"com.graphhopper.storage.LevelGraphStorageTest.testEnabledElevation":221,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":382,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":506,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints120":181,"com.graphhopper.storage.RAMDataAccessTest.testCopy":483,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":156,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":120,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":327,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":119,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":381,"com.graphhopper.storage.RAMDataAccessTest.testSegments":519,"com.graphhopper.util.GHUtilityTest.testSort2":80,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":166,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":422,"com.graphhopper.reader.OSMReaderTest.testMain":2,"com.graphhopper.storage.LevelGraphStorageTest.testDoThrowExceptionIfDimDoesNotMatch":196,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":350,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":309,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":383,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":535,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":39,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testGrid":182,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectional":224,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":349,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":123,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":287,"com.graphhopper.storage.LevelGraphStorageTest.test8BytesFlags":211,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdgesWithDelete":215,"com.graphhopper.storage.LevelGraphStorageTest.testDirectional":236,"com.graphhopper.routing.util.EncodedValueTest.testSetValue":524,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete":212,"com.graphhopper.routing.QueryGraphTest.testIterationBug_163":451,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":394,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":314,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":52,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":481,"com.graphhopper.storage.LevelGraphStorageTest.testAddLocation":218,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":9,"com.graphhopper.storage.StorablePropertiesTest.testStore":478,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":477,"com.graphhopper.storage.GraphHopperStorageTest.testClone":248,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":281,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":122,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":36,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":258,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":353,"com.graphhopper.storage.LevelGraphStorageTest.testDisconnectEdge":187,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":37,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":99,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeFilter":190,"com.graphhopper.routing.PathTest.testTime":403,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":43,"com.graphhopper.util.BitUtilLittleTest.testToFloat":508,"com.graphhopper.storage.LevelGraphStorageTest.testNameIndex":234,"com.graphhopper.storage.LevelGraphStorageTest.testEdges":205,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":359,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":148,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":163,"com.graphhopper.reader.OSMReaderTest.testRelation":73,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":112,"com.graphhopper.storage.LevelGraphStorageTest.testCheckFirstNode":223,"com.graphhopper.util.GHUtilityTest.testSortDirected":84,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxAndMinSpeed":56,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadClose":514,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":450,"com.graphhopper.GraphHopperTest.testFootOnly":67,"com.graphhopper.util.BitUtilLittleTest.testToInt":509,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":371,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":35,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":145,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testReverseSpatialKey":176,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":410,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":432,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":389,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":165,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":108,"com.graphhopper.search.NameIndexTest.testCreate":475,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":518,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":447,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":482,"com.graphhopper.routing.QueryGraphTest.testOneWay":456,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":164,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":531,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":374,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":152,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":529,"com.graphhopper.reader.OSMReaderTest.testWithBounds":8,"com.graphhopper.storage.RAMDataAccessTest.testLoadFlush":521,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":105,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":323,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":341,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":452,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":114,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":339,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":31,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectionalEdgeFilter":201,"com.graphhopper.storage.LevelGraphStorageTest.testBigDataEdge":197,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":360,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":396,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":18,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":313,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":136,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":352,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":124,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":306,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":244,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":455,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":408,"com.graphhopper.util.BitUtilLittleTest.testToBitString":507,"com.graphhopper.util.InstructionListTest.testWayList":87,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":277,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":380,"com.graphhopper.GraphHopperAPITest.testDisconnected179":329,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":100,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":315,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":150,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":95,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":54,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":71,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":343,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":111,"com.graphhopper.storage.RAMIntDataAccessTest.testSet_Get_Short_Long":496,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":128,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":385,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":61,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":250,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":146,"com.graphhopper.routing.util.EncodedValueTest.testSwap":523,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":316,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":322,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":318,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":317,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":443,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":268,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":378,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":267,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":419,"com.graphhopper.routing.DijkstraOneToManyTest.initializationError":460,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":441,"com.graphhopper.storage.LevelGraphStorageTest.testPillarNodes":232,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":355,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":362,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":23,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeProperties":220,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":288,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":243,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":429,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testNoErrorOnEdgeCase_lastIndex":184,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameNoFlush":501,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":24,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":238,"com.graphhopper.routing.PathTest.testWayList":404,"com.graphhopper.storage.MMapDataAccessTest.testCopy":487,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":127,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":363,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":104,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":351,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":489,"com.graphhopper.coll.OSMIDMapTest.testGet2":469,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":430,"com.graphhopper.storage.SynchedDAWrapperTest.testHeader":480,"com.graphhopper.storage.LevelGraphStorageTest.testCreateDuplicateEdges":229,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":151,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":312,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":384,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":261,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":333,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":249,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":297,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex2":178,"com.graphhopper.storage.LevelGraphStorageTest.testDozendEdges":216,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex3":179,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":516,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadFlush":515,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph":180,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":392,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":491,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":11,"com.graphhopper.util.GHUtilityTest.testSort":82,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":117,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":157,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":536,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":50,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":373,"com.graphhopper.search.NameIndexTest.testPut":473,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":247,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":289,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":326,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":140,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testRMin":171,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":149,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":132,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":503,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":27,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":453,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":130,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":388,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":66,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":284,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":361,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":369,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":337,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":307,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":428,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":340,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":504,"com.graphhopper.storage.LevelGraphStorageTest.testGetLocations":214,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":118,"com.graphhopper.routing.PathTest.testFound":402,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":33,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":68,"com.graphhopper.storage.LevelGraphStorageTest.testCreateLocation":231,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseProperties":367,"com.graphhopper.util.AngleCalcTest.testAtan2":464,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeightIfAdvancedEncoder":189,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":49,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":90,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":303,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":474,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":103,"com.graphhopper.util.InstructionListTest.testEmptyList":85,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":253,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":416,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":365,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph2":183,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":358,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":420,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":348,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testMaxAndMinSpeed":46,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":347,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":263,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":423,"com.graphhopper.reader.PrinctonReaderTest.testRead":70,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":276,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testWayGeometry":174,"com.graphhopper.storage.LevelGraphStorageTest.testUpdateUnidirectional":209,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":298,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":102,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":471,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":530,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":311,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":92,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes2":203,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":308,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":376,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":393,"com.graphhopper.routing.util.EncodingManagerTest.testTurnFlagCombination":525,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":42,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":25,"com.graphhopper.reader.OSMReaderTest.testFoot":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":116,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":458,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":158,"com.graphhopper.storage.LevelGraphStorageTest.testCopyProperties":235,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":533,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":370,"com.graphhopper.reader.OSMReaderTest.testOneWay":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":159,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":257,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":272,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":271,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":320,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":45,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":513,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":266,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":391,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":110,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":252,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":437,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":528,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":354,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":434,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":444,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":133,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":435,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":512,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":334,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testFindingWayGeometry":172,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":106,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":449,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":241,"com.graphhopper.routing.PathBidirRefTest.testExtract2":401,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":502,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":147,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":407,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":13,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":143,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":162,"com.graphhopper.search.NameIndexTest.testTooLongNameNoError":472,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":270,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":134,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":366,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":129,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":335,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":135,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":55,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":440,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":155,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":273,"com.graphhopper.util.GHUtilityTest.testEdgeStuff":83,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdges":207,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":356,"com.graphhopper.GraphHopperTest.testFootAndCar":62,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":265,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode":213,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":12,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints32":185,"com.graphhopper.storage.RAMDataAccessTest.testEnsureCapacity":517,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":96,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":398,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":357,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":439,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":418,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":294,"com.graphhopper.GraphHopperTest.testPrepareOnly":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCorrectWeight":426,"com.graphhopper.GraphHopperTest.testVia":59,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":142,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":386,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":94,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":74,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeight":191,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":89,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":269,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":336,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":7,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":109,"com.graphhopper.routing.AStarBidirectionTest.initializationError":406,"com.graphhopper.util.AngleCalcTest.testCombined":466,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":346,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeReturn":230,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete3":228,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete2":227,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":285}}]

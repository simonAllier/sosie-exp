[{"failures":[],"tindex":"d626c5dd-da63-11e4-8b07-438dd01fe88e","variableMapping":{"precision":"minLon","lat":"minLon"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:132","type":"CtAssignmentImpl","sourcecode":"double = ((int)((double * (double)))) / (double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:44","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.com.graphhopper.util.shapes.BBox.double = java.lang.Double.double"},"status":-2},{"failures":[],"tindex":"d627b03e-da63-11e4-8b07-19b438272ecb","variableMapping":{"size":"com.graphhopper.routing.util.FootFlagEncoder.SLOW_SPEED"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:107","type":"CtIfImpl","sourcecode":"if ((int) == 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:273","type":"CtIfImpl","sourcecode":"if (\"hiking\".equals(java.lang.String))\n    long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\nelse\n    long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n"},"status":-2},{"failures":[0,1,2,3,4],"tindex":"d627b03f-da63-11e4-8b07-fbb7bb21ad3a","variableMapping":{"scDirMask":"acceptBit","flags":"acceptBit","dir":"acceptBit"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:255","type":"CtIfImpl","sourcecode":"if ((long == (long)) || (long == 0))\n    return long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:214","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"foot\", java.util.HashSet<java.lang.String>))\n    return long;\n"},"status":-1},{"failures":[],"tindex":"d627b040-da63-11e4-8b07-8348979db955","variableMapping":{"x1":"incDist2DSum","x2":"incDist2DSum"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:159","type":"CtAssignmentImpl","sourcecode":"double = double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:221","type":"CtAssignmentImpl","sourcecode":"double = (double * (((double * double) + (double * double)) + (1 * double))) / double"},"status":0},{"failures":[],"tindex":"d627b041-da63-11e4-8b07-31e8cfbab6f9","variableMapping":{"node":"wayType"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:173","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalArgumentException(\"via node cannot be negative\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:390","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case 0 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"road\");\n        break;\n    case 1 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"off_bike\");\n        break;\n    case 2 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"cycleway\");\n        break;\n    case 3 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"way\");\n        break;\n}"},"status":0},{"failures":[],"tindex":"d627b042-da63-11e4-8b07-1f29db51cced","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:331","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,0,265,266,267,268,1,269,270,271,272,273,274,275,276,277,278,279,2,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,294,295,295,296,296,297,297,298,298,299,299,300,300,301,301,302,302,303,303,304,304,305,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373],"tindex":"d627d753-da63-11e4-8b07-8f280a08cecb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:89","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType == null)\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType;\n"},"status":-1},{"failures":[],"tindex":"d627d754-da63-11e4-8b07-b137ddc22469","variableMapping":{"encoderList":"trackType"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:132","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\":\"))\n    throw new java.lang.IllegalArgumentException(\"EncodingManager does no longer use reflection instantiate encoders directly.\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:146","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"grade\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":0},{"failures":[374,318,319,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416],"tindex":"d627d755-da63-11e4-8b07-b9746f8ee544","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:323","type":"CtReturnImpl","sourcecode":"return \"SRTM\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:77","type":"CtReturnImpl","sourcecode":"return \"bike\""},"status":-1},{"failures":[417,418,419,420,421,422,423,377,379,380,381,391,395,424,425,426,427,398,400,401,402,412,416],"tindex":"d627d756-da63-11e4-8b07-df75e30d7ab8","variableMapping":{"high":"allowed","highKey":"allowed","key":"allowed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:123","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:294","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isAccept(long)))\n    return 0;\n"},"status":-1},{"failures":[],"tindex":"d627fe67-da63-11e4-8b07-1d331118fe7d","variableMapping":{"size":"x1"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:118","type":"CtLocalVariableImpl","sourcecode":"int int = (int) + 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:123","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.Math.java.lang.Math.abs((int - int))"},"status":-2},{"failures":[],"tindex":"d627fe68-da63-11e4-8b07-b98a31403bde","variableMapping":{"minResolutionInMeter":"segmentSizeInBytes"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:262","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.lang.IllegalStateException(\"Negative precision is not allowed!\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:106","type":"CtIfImpl","sourcecode":"if ((long % (int)) != 0)\n    int++;\n"},"status":0},{"failures":[],"tindex":"d627fe69-da63-11e4-8b07-a30864d423f4","variableMapping":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.PREFER","way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:359","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"foot\", \"designated\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:454","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.lang.String>.contains(java.lang.String)) || ((double > 0) && (double <= 30))) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.HashSet<java.lang.String>))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-2},{"failures":[],"tindex":"d627fe6a-da63-11e4-8b07-93c58807d297","variableMapping":{"sortedNodes":"value"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:245","type":"CtIfImpl","sourcecode":"if (com.graphhopper.coll.GHTreeMapComposed.isEmpty())\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:134","type":"CtReturnImpl","sourcecode":"return java.lang.Object.equals(java.util.Map<java.lang.String, java.lang.Object>.get(java.lang.String))"},"status":-2},{"failures":[428],"tindex":"d627fe6b-da63-11e4-8b07-537e4ceca2a2","variableMapping":{"radiusInMeter":"baseOrientation","lon":"baseOrientation","lat":"orientation"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:105","type":"CtIfImpl","sourcecode":"if (double <= 0)\n    throw new java.lang.IllegalArgumentException((((((\"Distance must not be zero or negative! \" + double) + \" lat,lon:\") + double) + \",\") + double));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:74","type":"CtIfImpl","sourcecode":"if (double < ((-(java.lang.Math.double)) + double))\n    double = double + (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"status":-1},{"failures":[],"tindex":"d627fe6c-da63-11e4-8b07-db81416689b8","variableMapping":{"size":"start","capacity":"start"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:224","type":"CtIfImpl","sourcecode":"if (int < (int)) {\n    throw new java.lang.IllegalStateException(\"BinHeap contains too many elements to fit in new capacity.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:107","type":"CtIfImpl","sourcecode":"if ((int[][int]) == (int[][int])) {\n    gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList = new gnu.trove.list.array.TIntArrayList();\n    int int;\n    while ((int = gnu.trove.stack.array.TIntArrayStack.pop()) != int) {\n        gnu.trove.list.array.TIntArrayList.add(int);\n        com.graphhopper.coll.GHBitSetImpl.clear(int);\n    }\n    gnu.trove.list.array.TIntArrayList.add(int);\n    com.graphhopper.coll.GHBitSetImpl.clear(int);\n    java.util.ArrayList<gnu.trove.list.array.TIntArrayList>.add(gnu.trove.list.array.TIntArrayList);\n} "},"status":0},{"failures":[429],"tindex":"d627fe6d-da63-11e4-8b07-a796c9d772e8","variableMapping":{"time":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:161","type":"CtReturnImpl","sourcecode":"return long + (this.long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:87","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, double)"},"status":-1},{"failures":[],"tindex":"d627fe6e-da63-11e4-8b07-b9896c437714","variableMapping":{"fromDist":"midLat"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:112","type":"CtIfImpl","sourcecode":"if (double < 0)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:222","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":0},{"failures":[],"tindex":"d627fe6f-da63-11e4-8b07-4fe4ae82eaa2","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:917","type":"CtLocalVariableImpl","sourcecode":"int int = 5"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:157","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"status":-2},{"failures":[],"tindex":"d627fe70-da63-11e4-8b07-4995ba382d23","variableMapping":{"elem":"elem","i":"toSize","element":"toSize"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:150","type":"CtIfImpl","sourcecode":"if ((int[][int]) == int) {\n    break;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:260","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.java.util.Arrays.fill(int[], int, ((int) + 1), 0)"},"status":-2},{"failures":[],"tindex":"d627fe71-da63-11e4-8b07-f920b0b16906","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.PrinctonReader:64","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:110","type":"CtLocalVariableImpl","sourcecode":"double double = float[][int]"},"status":-2},{"failures":[260,261,262,263,264,0,265,267,268,1,269,2,280,281,282,283,284,285,286,288,289,290,293,314],"tindex":"d627fe72-da63-11e4-8b07-63998d404fef","variableMapping":{"size":"del","index":"unvisitedDeadEnds"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:84","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.ArrayIndexOutOfBoundsException((\"index has to be smaller than size \" + (int)));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:85","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info(((((((((((\"optimize to remove subnetworks (\" + (java.util.Map<java.lang.Integer, java.lang.Integer>.size())) + \"), zero-degree-nodes (\") + int) + \"), \") + \"unvisited-dead-end-nodes(\") + int) + \"), \") + \"maxEdges/node (\") + (java.util.concurrent.atomic.AtomicInteger.get())) + \")\"))"},"status":-1},{"failures":[],"tindex":"d627fe73-da63-11e4-8b07-f1e2293a5dea","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:359","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:396","type":"CtLocalVariableImpl","sourcecode":"int int = int - 1"},"status":-2},{"failures":[430,431,432],"tindex":"d627fe74-da63-11e4-8b07-a3eb275e0349","variableMapping":{"ret":"child","retBucket":"child","i":"child","bucketSize":"child"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:122","type":"CtAssignmentImpl","sourcecode":"int = (int * (int)) + int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:121","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"d627fe75-da63-11e4-8b07-13180e675cff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:526","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.BikeCommonFlagEncoder.int :\n        return (long & (long)) != 0;\n    default :\n        return com.graphhopper.routing.util.AbstractFlagEncoder.isBool(long, int);\n}"},"status":-2},{"failures":[312,316,317],"tindex":"d6282586-da63-11e4-8b07-2b7bf1deb290","variableMapping":{"tmpEntries":"component"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:158","type":"CtInvocationImpl","sourcecode":"gnu.trove.list.array.TIntArrayList.add(4)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:117","type":"CtInvocationImpl","sourcecode":"java.util.ArrayList<gnu.trove.list.array.TIntArrayList>.add(gnu.trove.list.array.TIntArrayList)"},"status":-1},{"failures":[430,433,434,431,435,432,347,349,350,351,353,355,357],"tindex":"d6282587-da63-11e4-8b07-4bb00835746a","variableMapping":{"err":"size","dLat":"i","tmpErr":"size","x1":"size","sLon":"size"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:133","type":"CtIfImpl","sourcecode":"if (int > (-int)) {\n    int -= int;\n    int += int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:211","type":"CtForImpl","sourcecode":"for (int = int ; (float[][(int / 2)]) > double ; int /= 2) {\n    int[][int] = int[][(int / 2)];\n    float[][int] = float[][(int / 2)];\n}"},"status":-1},{"failures":[],"tindex":"d6282588-da63-11e4-8b07-013ea97f3818","variableMapping":{"size":"acceptBit"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:132","type":"CtReturnImpl","sourcecode":"return (long) / 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:207","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"d6282589-da63-11e4-8b07-3bf0119c8b7d","variableMapping":{"this":"em"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:320","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.EncodingManager.(getVehicleCount()) > 1)\n    throw new java.lang.IllegalStateException((\"Multiple encoders are active. cannot return one:\" + com.graphhopper.routing.util.EncodingManager.(toString())));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:56","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.EncodingManager.getVehicleCount()) > 1)\n    com.graphhopper.routing.util.EdgeFilter = com.graphhopper.routing.util.EdgeFilter.com.graphhopper.routing.util.EdgeFilter;\nelse\n    com.graphhopper.routing.util.EdgeFilter = new com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.EncodingManager.getSingle());\n"},"status":-2},{"failures":[],"tindex":"d628258a-da63-11e4-8b07-e93b40e9f64a","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:864","type":"CtLocalVariableImpl","sourcecode":"long long = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:100","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.RAMDataAccess.getCapacity()"},"status":-2},{"failures":[436,437,438,439,440,441,442,443,444],"tindex":"d628258b-da63-11e4-8b07-e7292714aed4","variableMapping":{"byteCount":"spatialKey"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:109","type":"CtIfImpl","sourcecode":"if (long < 0)\n    throw new java.lang.IllegalArgumentException(\"new capacity has to be strictly positive\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:222","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":-1},{"failures":[],"tindex":"d628258c-da63-11e4-8b07-5d2944910b25","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:154","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"status":-2},{"failures":[],"tindex":"d628258d-da63-11e4-8b07-5b8ec656b43f","variableMapping":{"currentBucket":"frontIndex"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:70","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((int) * 1.5F))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:72","type":"CtLocalVariableImpl","sourcecode":"int int = int[][int]"},"status":-2},{"failures":[],"tindex":"d628258e-da63-11e4-8b07-e3adef0dc621","variableMapping":{"this":"g","iter":"iter"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1330","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIterator = com.graphhopper.storage.GraphHopperStorage.getAllEdges()"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:78","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIterator = com.graphhopper.storage.GraphStorage.createEdgeExplorer(com.graphhopper.routing.util.EdgeFilter).setBaseNode(int)"},"status":-2},{"failures":[285,445,382,446,403],"tindex":"d628258f-da63-11e4-8b07-5fabec731792","variableMapping":{"edgePointer":"flags","maxEdges":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:528","type":"CtReturnImpl","sourcecode":"return (long) < (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:585","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.routing.util.EncodedValue.getValue(long)) == (int)"},"status":-1},{"failures":[],"tindex":"d6282590-da63-11e4-8b07-c9438e9a92b0","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1521","type":"CtReturnImpl","sourcecode":"return 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.Edge:44","type":"CtReturnImpl","sourcecode":"return java.lang.Double.java.lang.Double.compare(double, com.graphhopper.storage.Edge.double)"},"status":-2},{"failures":[],"tindex":"d6282591-da63-11e4-8b07-d5d61c663a06","variableMapping":{"silent":"integ"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.StorableProperties:179","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:128","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[312,317],"tindex":"d6282592-da63-11e4-8b07-dfdfd9a7b08e","variableMapping":{"edgeId":"removed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:400","type":"CtIfImpl","sourcecode":"if ((int % 2) == 0)\n    int++;\nelse\n    int--;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:248","type":"CtForEachImpl","sourcecode":"for (gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList : java.util.List<gnu.trove.list.array.TIntArrayList>) {\n    if ((gnu.trove.list.array.TIntArrayList.size()) < (int)) {\n        for (int int = 0 ; int < (gnu.trove.list.array.TIntArrayList.size()) ; int++) {\n            com.graphhopper.storage.GraphStorage.markNodeRemoved(gnu.trove.list.array.TIntArrayList.get(int));\n            int++;\n        }\n    } \n}"},"status":-1},{"failures":[],"tindex":"d6282593-da63-11e4-8b07-f76518c378b6","variableMapping":{"high":"valueIfKeyNotFound","len":"valueIfKeyNotFound","start":"valueIfKeyNotFound"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:486","type":"CtIfImpl","sourcecode":"if (int == (int + int)) {\n    return ~(int + int);\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:101","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"d6282594-da63-11e4-8b07-cdf4416597a3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:554","type":"CtIfImpl","sourcecode":"if ((int) == 1) {\n    long = 1L << int;\n    return int + 1;\n} "},"status":-2},{"failures":[433,262,263,265,267,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,346,347,348,349,350,351,352,353,355,356,357,358],"tindex":"d6284ba5-da63-11e4-8b07-83f42163feb4","variableMapping":{"heap":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:135","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap.clear()"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:266","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap.trimTo(0)"},"status":-1},{"failures":[],"tindex":"d6284ba6-da63-11e4-8b07-a3ab3df59e68","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:446","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"service\")"},"status":-2},{"failures":[],"tindex":"d6284ba7-da63-11e4-8b07-b30f0b456be7","variableMapping":{"entry":"com.graphhopper.routing.util.EncodingManager.BIKE","com.graphhopper.routing.util.EncodingManager.RACINGBIKE":"com.graphhopper.routing.util.EncodingManager.BIKE2","com.graphhopper.routing.util.EncodingManager.FOOT":"entryVal","com.graphhopper.routing.util.EncodingManager.MOTORCYCLE":"com.graphhopper.routing.util.EncodingManager.FOOT","com.graphhopper.routing.util.EncodingManager.BIKE2":"entryVal","entryVal":"entry","com.graphhopper.routing.util.EncodingManager.MOUNTAINBIKE":"com.graphhopper.routing.util.EncodingManager.CAR","fe":"fe"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:158","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:152","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.CarFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.BikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[],"tindex":"d6284ba8-da63-11e4-8b07-cd51e94e4066","variableMapping":{"visitedCountFrom":"key","visitedCountTo":"key"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AbstractBidirAlgo:80","type":"CtReturnImpl","sourcecode":"return (int) + (int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:89","type":"CtReturnImpl","sourcecode":"return com.graphhopper.coll.SparseIntIntArray.get(int, -1)"},"status":-2},{"failures":[],"tindex":"d6284ba9-da63-11e4-8b07-91e3f62e7ca9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.GHPoint3D:62","type":"CtIfImpl","sourcecode":"if (java.lang.Double.java.lang.Double.isNaN(double))\n    return com.graphhopper.util.NumHelper.(com.graphhopper.util.NumHelper.equalsEps(double, com.graphhopper.util.shapes.GHPoint3D.double)) && com.graphhopper.util.NumHelper.(com.graphhopper.util.NumHelper.equalsEps(double, com.graphhopper.util.shapes.GHPoint3D.double));\nelse\n    return (com.graphhopper.util.NumHelper.(com.graphhopper.util.NumHelper.equalsEps(double, com.graphhopper.util.shapes.GHPoint3D.double)) && com.graphhopper.util.NumHelper.(com.graphhopper.util.NumHelper.equalsEps(double, com.graphhopper.util.shapes.GHPoint3D.double))) && com.graphhopper.util.NumHelper.(com.graphhopper.util.NumHelper.equalsEps(double, com.graphhopper.util.shapes.GHPoint3D.double));\n"},"status":-2},{"failures":[],"tindex":"d6284baa-da63-11e4-8b07-e97495258fc2","variableMapping":{"bytePos":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:266","type":"CtIfImpl","sourcecode":"if (((long % 4) != 0) && ((long % 4) != 2))\n    throw new java.lang.IllegalMonitorStateException((\"bytePos of wrong multiple for RAMInt \" + long));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:411","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry : com.graphhopper.routing.util.AbstractFlagEncoder.analyzeTurnRelation(com.graphhopper.reader.OSMTurnRelation, com.graphhopper.reader.OSMReader)) {\n    com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = gnu.trove.map.TLongObjectMap<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.get(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.getItemId());\n    if (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry != null) {\n        com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long |= com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long;\n    } else {\n        gnu.trove.map.TLongObjectMap<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.put(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.getItemId(), com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n    }\n}"},"status":-2},{"failures":[447],"tindex":"d6284bab-da63-11e4-8b07-4dcde4da9223","variableMapping":{"high":"directionBitMask","len":"directionBitMask","start":"directionBitMask"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:117","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:210","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMNode.hasTag(\"barrier\", java.util.HashSet<java.lang.String>))\n    return long;\n"},"status":-1},{"failures":[],"tindex":"d6284bac-da63-11e4-8b07-e37dd3ab32e1","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:171","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:480","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"surface\")"},"status":-2},{"failures":[],"tindex":"d6284bad-da63-11e4-8b07-b13cf51dd27a","variableMapping":{"highwayValue":"res"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:238","type":"CtIfImpl","sourcecode":"if ((\"motorway\".equals(java.lang.String)) || (\"motorway_link\".equals(java.lang.String)))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:222","type":"CtIfImpl","sourcecode":"if ((!boolean) && (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.HashSet<java.lang.String>)))\n    return 0;\n"},"status":0},{"failures":[],"tindex":"d6284bae-da63-11e4-8b07-8776f911d003","variableMapping":{"hash":"turnRestrictionBit"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:170","type":"CtOperatorAssignmentImpl","sourcecode":"long |= 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:556","type":"CtAssignmentImpl","sourcecode":"long = 1L << int"},"status":0},{"failures":[5,6,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,448,449,450,451,452,453,454,455,456,457,458,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,162,163,164,165,166,168,169,173,174,175,176,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,228,243,260,261,262,263,264,0,265,267,268,1,269,271,277,278,279,2,280,281,282,283,284,285,286,288,289,290,291,293,294,294,295,295,296,296,297,297,298,298,299,299,300,300,301,301,302,302,303,303,304,304,305,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373],"tindex":"d62872bf-da63-11e4-8b07-0b660a398af5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:115","type":"CtForImpl","sourcecode":"for (int int = int[][].int ; int < (int[][].int) ; int++) {\n    int[][][int] = new int[1 << (int)];\n}"},"status":-1},{"failures":[],"tindex":"d62872c0-da63-11e4-8b07-d1ac17094391","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:480","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"surface\")"},"status":-2},{"failures":[],"tindex":"d62872c1-da63-11e4-8b07-f7b0a4b30850","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Constants:73","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"0.0\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:447","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-2},{"failures":[],"tindex":"d62872c2-da63-11e4-8b07-0bdabebf238d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:446","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"service\")"},"status":-2},{"failures":[],"tindex":"d62872c3-da63-11e4-8b07-8ba0e3875cab","variableMapping":{"index":"wayType"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:746","type":"CtIfImpl","sourcecode":"if (int < 0)\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:390","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case 0 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"road\");\n        break;\n    case 1 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"off_bike\");\n        break;\n    case 2 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"cycleway\");\n        break;\n    case 3 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"way\");\n        break;\n}"},"status":-2},{"failures":[459,460,461,462,463,464,465,466,467,468,469,470,471,472,58,106,158,159,160,162,211,243],"tindex":"d62872c4-da63-11e4-8b07-8192763a206a","variableMapping":{"res":"todoBytes","maxBits":"segmentSizePower","value":"cap"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:254","type":"CtForImpl","sourcecode":"for ( ; int > 0 ; long >>= 1) {\n    long <<= 1;\n    long |= long & 1;\n    int--;\n    if (long == 0) {\n        long <<= int;\n        break;\n    } \n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:109","type":"CtTryImpl","sourcecode":"try {\n    byte[][] byte[][] = java.util.Arrays.java.util.Arrays.copyOf(byte[][], ((byte[][].int) + int));\n    for (int int = byte[][].int ; int < (byte[][].int) ; int++) {\n        byte[][][int] = new byte[1 << (int)];\n    }\n    byte[][] = byte[][];\n} catch (java.lang.OutOfMemoryError java.lang.OutOfMemoryError) {\n    throw new java.lang.OutOfMemoryError((((((((((((java.lang.OutOfMemoryError.getMessage()) + \" - problem when allocating new memory. Old capacity: \") + long) + \", new bytes:\") + long) + \", segmentSizeIntsPower:\") + (int)) + \", new segments:\") + int) + \", existing:\") + (byte[][].int)));\n}"},"status":-1},{"failures":[],"tindex":"d62872c5-da63-11e4-8b07-f9053676ea2d","variableMapping":{"orientation":"orientation","resultOrientation":"baseOrientation","baseOrientation":"orientation","java.lang.Math.PI":"baseOrientation"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:74","type":"CtIfImpl","sourcecode":"if (double < ((-(java.lang.Math.double)) + double))\n    double = double + (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:81","type":"CtIfImpl","sourcecode":"if (double > ((+(java.lang.Math.double)) + double))\n    double = double - (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"status":0},{"failures":[],"tindex":"d62872c6-da63-11e4-8b07-fbb3a2de8c94","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:65","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:72","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.util.EdgeSkipIterState == null"},"status":-2},{"failures":[],"tindex":"d62872c7-da63-11e4-8b07-29d79822e683","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:503","type":"CtIfImpl","sourcecode":"if (\"cycleway\".equals(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-2},{"failures":[],"tindex":"d62872c8-da63-11e4-8b07-c5c0314cbf36","variableMapping":{"y":"java.lang.Double.POSITIVE_INFINITY","angle":"java.lang.Double.POSITIVE_INFINITY"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:48","type":"CtIfImpl","sourcecode":"if (double < 0.0)\n    return -double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:599","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[],"tindex":"d62872c9-da63-11e4-8b07-f909d7db7f9b","variableMapping":{"tmp":"edgeState"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PreparationWeighting:51","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.EdgeSkipIterState.isShortcut())\n    return com.graphhopper.util.EdgeSkipIterState.getWeight();\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PreparationWeighting:48","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.EdgeIteratorState instanceof com.graphhopper.util.EdgeSkipIterState) {\n    com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.util.EdgeIteratorState));\n    if (com.graphhopper.util.EdgeSkipIterState.isShortcut())\n        return com.graphhopper.util.EdgeSkipIterState.getWeight();\n    \n} "},"status":-2},{"failures":[5,6,13,14,15,16,17,19,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"d62872ca-da63-11e4-8b07-e37bf40f43d5","variableMapping":{"origEdgeId":"indexDivisor","mainEdges":"indexDivisor"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:394","type":"CtLocalVariableImpl","sourcecode":"int int = int - (int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:242","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[279,473],"tindex":"d62872cb-da63-11e4-8b07-698a2c5079ab","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:73","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:495","type":"CtIfImpl","sourcecode":"if (double == 0) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else if (double > 1) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n}"},"status":-1},{"failures":[287,417],"tindex":"d62872cc-da63-11e4-8b07-b78c49589746","variableMapping":{"oldValueIndex":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:72","type":"CtOperatorAssignmentImpl","sourcecode":"long *= 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:258","type":"CtOperatorAssignmentImpl","sourcecode":"long |= com.graphhopper.routing.util.AbstractFlagEncoder.handleRelationTags(com.graphhopper.reader.OSMRelation, long)"},"status":-1},{"failures":[],"tindex":"d62899dd-da63-11e4-8b07-d7050f726f8d","variableMapping":{"dLat":"segmentSizePower","dLon":"segmentSizePower"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:124","type":"CtLocalVariableImpl","sourcecode":"int int = int - int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:283","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-2},{"failures":[],"tindex":"d62899de-da63-11e4-8b07-97c30bfc7a5b","variableMapping":{"lastTime":"bits"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.StopWatch:59","type":"CtAssignmentImpl","sourcecode":"long = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:237","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 1"},"status":-2},{"failures":[],"tindex":"d62899df-da63-11e4-8b07-4fa02e5d4ee0","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:161","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:87","type":"CtLocalVariableImpl","sourcecode":"long long = java.util.TreeMap<java.lang.Long, java.lang.Integer>.pollFirstEntry().getKey()"},"status":-2},{"failures":[296,474],"tindex":"d62899e0-da63-11e4-8b07-ab9d2cc763f7","variableMapping":{"val":"ele"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:114","type":"CtReturnImpl","sourcecode":"return double - ((int)(double))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.GHPoint3D:43","type":"CtReturnImpl","sourcecode":"return double"},"status":-1},{"failures":[376,475,397],"tindex":"d62899e1-da63-11e4-8b07-6525508bf32f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:638","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Integer>.put(java.lang.String, int)"},"status":-1},{"failures":[],"tindex":"d62899e2-da63-11e4-8b07-4316eb3eb394","variableMapping":{"factor":"bwSlower"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:208","type":"CtAssignmentImpl","sourcecode":"double = 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:221","type":"CtAssignmentImpl","sourcecode":"double = (double * (((double * double) + (double * double)) + (1 * double))) / double"},"status":0},{"failures":[],"tindex":"d62a6ea3-da63-11e4-8b07-2fdee54cdf3e","variableMapping":{"need":"shift","i":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:198","type":"CtIfImpl","sourcecode":"if (int <= ((1 << int) - 12)) {\n    return (1 << int) - 12;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:211","type":"CtReturnImpl","sourcecode":"return int + (com.graphhopper.routing.util.EncodedValue.getBits())"},"status":-2},{"failures":[430,434,431,435,432,353,357],"tindex":"d62a6ea4-da63-11e4-8b07-ebb00a2255ee","variableMapping":{"factor":"key"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:205","type":"CtIfImpl","sourcecode":"if (double > 1)\n    double = 1;\nelse if (double < 0)\n    double = 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:211","type":"CtForImpl","sourcecode":"for (int = int ; (float[][(int / 2)]) > double ; int /= 2) {\n    int[][int] = int[][(int / 2)];\n    float[][int] = float[][(int / 2)];\n}"},"status":-1},{"failures":[312,317],"tindex":"d62a6ea5-da63-11e4-8b07-3528bd8c4c0a","variableMapping":{"edgeId":"minOnewayNetworkSize"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:400","type":"CtIfImpl","sourcecode":"if ((int % 2) == 0)\n    int++;\nelse\n    int--;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:248","type":"CtForEachImpl","sourcecode":"for (gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList : java.util.List<gnu.trove.list.array.TIntArrayList>) {\n    if ((gnu.trove.list.array.TIntArrayList.size()) < (int)) {\n        for (int int = 0 ; int < (gnu.trove.list.array.TIntArrayList.size()) ; int++) {\n            com.graphhopper.storage.GraphStorage.markNodeRemoved(gnu.trove.list.array.TIntArrayList.get(int));\n            int++;\n        }\n    } \n}"},"status":-1},{"failures":[],"tindex":"d62a6ea6-da63-11e4-8b07-eb77a31fd69a","variableMapping":{"latSize":"indexDivisor","lonSize":"indexDivisor"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:218","type":"CtLocalVariableImpl","sourcecode":"int int = (int) * (int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:284","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[],"tindex":"d62a95b7-da63-11e4-8b07-f3fa06193702","variableMapping":{"this":"this"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:168","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.Path.isFound())\n    throw new java.lang.IllegalStateException(\"Extract can only be called once\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathNative:59","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.reverseOrder()"},"status":-1},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,118,135,155,169,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,0,1,374,419,476,447,477,478,479,480,473,481,482,483,484,485,486,446,487,488,489,490,320,3,491,492,493,4,494,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344],"tindex":"d62a95b8-da63-11e4-8b07-370540723752","variableMapping":{"entryVal":"entryVal","fe":"fe"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:162","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:168","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String)"},"status":-1},{"failures":[419,376,475,397],"tindex":"d62a95b9-da63-11e4-8b07-3d638a40eda0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:362","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))\n    int = (com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2;\nelse\n    int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int;\n"},"status":-1},{"failures":[421,422,379,381,391,424,425,426,400,402,412],"tindex":"d62a95ba-da63-11e4-8b07-0bd89116512d","variableMapping":{"str":"wayTypeName"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:195","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"N\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:402","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Translation.tr(\"way\")"},"status":-1},{"failures":[495],"tindex":"d62a95bb-da63-11e4-8b07-0743e36453ae","variableMapping":{"cp":"minStr"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:125","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"SW\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:443","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring((int + 1))"},"status":-1},{"failures":[],"tindex":"d62a95bc-da63-11e4-8b07-0bda64ad8ed8","variableMapping":{"nodeFlags":"wayBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:846","type":"CtUnaryOperatorImpl","sourcecode":"~long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:512","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= int"},"status":-2},{"failures":[376,475,397],"tindex":"d62a95bd-da63-11e4-8b07-b90a298ca502","variableMapping":{"initLeafSize":"speed","maxLeafEntries":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:67","type":"CtAssignmentImpl","sourcecode":"int = int / 10"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:331","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer"},"status":-1},{"failures":[496,393,497,414],"tindex":"d62a95be-da63-11e4-8b07-91f081d7d827","variableMapping":{"flags":"acceptBit","scDirMask":"acceptBit"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:259","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:235","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[422,498,387,391,392,394,475,425,499,426,500,501,408,412,413,415],"tindex":"d62a95bf-da63-11e4-8b07-ed10b317f243","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:454","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.lang.String>.contains(java.lang.String)) || ((double > 0) && (double <= 30))) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.HashSet<java.lang.String>))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-1},{"failures":[],"tindex":"d62a95c0-da63-11e4-8b07-bb5c49df1860","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:334","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.LevelGraphStorage.this.getWeight(this)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:172","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[39,54,87,102,192,207,230,245,315],"tindex":"d62a95c1-da63-11e4-8b07-65ebb3af1e12","variableMapping":{"size":"i","newSize":"i"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:254","type":"CtIfImpl","sourcecode":"if (int > (int))\n    throw new java.lang.IllegalArgumentException(\"new size needs be smaller than old size\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:197","type":"CtInvocationImpl","sourcecode":"java.lang.System.java.lang.System.arraycopy(int[], int, int[], (int + 1), ((int) - int))"},"status":-1},{"failures":[496,393,497,414],"tindex":"d62a95c2-da63-11e4-8b07-91b3f34287f0","variableMapping":{"way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:191","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"impassable\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"status\", \"impassable\")))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:241","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"motorroad\", \"yes\"))\n    return 0;\n"},"status":-1},{"failures":[119,125,127,128,502,139,145,147,148,436,437,438,439,441,442,503,504,505,443,444],"tindex":"d62abcd3-da63-11e4-8b07-89b46dbda92e","variableMapping":{"shift":"hash","tmpValue":"hash"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:61","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:177","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 1"},"status":-1},{"failures":[480],"tindex":"d62abcd4-da63-11e4-8b07-f34a0eaf9cc8","variableMapping":{"node":"node","directionBitMask":"directionBitMask","absoluteBarriers":"intendedValues"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:210","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMNode.hasTag(\"barrier\", java.util.HashSet<java.lang.String>))\n    return long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:233","type":"CtIfImpl","sourcecode":"if (((boolean) && ((com.graphhopper.reader.OSMNode.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMNode.hasTag(\"ford\")))) && (!(com.graphhopper.reader.OSMNode.hasTag(java.util.List<java.lang.String>, java.util.HashSet<java.lang.String>))))\n    return long;\n"},"status":-1},{"failures":[],"tindex":"d62abcd5-da63-11e4-8b07-416332a5e467","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:244","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:232","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[436,437,438,439,441,442,504,443,444],"tindex":"d62abcd6-da63-11e4-8b07-49e7c20d650b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:134","type":"CtInvocationImpl","sourcecode":"com.graphhopper.geohash.SpatialKeyAlgo.setBounds(-180, 180, -90, 90)"},"status":-1},{"failures":[319],"tindex":"d62abcd7-da63-11e4-8b07-11ca7e58e6da","variableMapping":{"closestEdge":"edge","detach":"edge"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.QueryResult:131","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState = com.graphhopper.util.EdgeIteratorState"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:225","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setFlags(long)"},"status":-1},{"failures":[],"tindex":"d62abcd8-da63-11e4-8b07-3be5e17ed903","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:165","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(java.lang.String)"},"status":-2},{"failures":[],"tindex":"d62abcd9-da63-11e4-8b07-db445182a2b7","variableMapping":{"err":"biggestStart","dLat":"biggestStart"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:135","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:163","type":"CtAssignmentImpl","sourcecode":"int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getKey()"},"status":0},{"failures":[28,39,45,53,54,76,87,93,101,102,181,192,198,206,207,219,230,236,244,245,312,315],"tindex":"d62ae3ea-da63-11e4-8b07-69414ed7c5aa","variableMapping":{"err":"high","dLat":"high","tmpErr":"guess","x1":"key","sLon":"low"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:133","type":"CtIfImpl","sourcecode":"if (int > (-int)) {\n    int -= int;\n    int += int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:401","type":"CtIfImpl","sourcecode":"if ((int[][int]) < int) {\n    int = int;\n} else {\n    int = int;\n}"},"status":-1},{"failures":[119,120,123,124,126,128,129,132,135,139,140,143,144,146,148,149,152,155,441],"tindex":"d62ae3eb-da63-11e4-8b07-ef1557312c7f","variableMapping":{"costs":"lon"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:628","type":"CtIfImpl","sourcecode":"if (double < 0)\n    throw new java.lang.IllegalArgumentException(\"Turn costs cannot be negative\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:229","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":-1},{"failures":[],"tindex":"d62ae3ec-da63-11e4-8b07-c1e7c18e870e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:294","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isAccept(long)))\n    return 0;\n"},"status":0},{"failures":[],"tindex":"d62ae3ed-da63-11e4-8b07-53add0796c9a","variableMapping":{"high":"flags","len":"flags","start":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:117","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:110","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedDoubleValue.setDefaultValue(long)"},"status":-2},{"failures":[419,506,376,380,381,394,475,425,501,397,401,402,415],"tindex":"d62ae3ee-da63-11e4-8b07-2d2a1cf73c23","variableMapping":{"initLeafSize":"speed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:59","type":"CtAssignmentImpl","sourcecode":"int = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:349","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer"},"status":-1},{"failures":[],"tindex":"d62ae3ef-da63-11e4-8b07-0f09197e43a7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:286","type":"CtLocalVariableImpl","sourcecode":"int int = (int + int) - (int)"},"status":-2},{"failures":[377,398],"tindex":"d62ae3f0-da63-11e4-8b07-377df511395e","variableMapping":{"maxLeafEntries":"priorityFromRelation"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:52","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:303","type":"CtAssignmentImpl","sourcecode":"int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)))"},"status":-1},{"failureDictionary":{"com.graphhopper.storage.LevelGraphStorageTest.testCopyTo":52,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":295,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":339,"com.graphhopper.storage.LevelGraphStorageTest.testCannotBeLoadedViaDifferentClass":18,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":429,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":114,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":218,"com.graphhopper.reader.OSMReaderTest.testFerry":279,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":367,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":368,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":401,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":506,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testMoreReal":142,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":261,"com.graphhopper.storage.LevelGraphStorageTest.testSetNodes":63,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":391,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":395,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":84,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":273,"com.graphhopper.coll.CompressedArrayTest.testCompress":444,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":214,"com.graphhopper.storage.LevelGraphStorageTest.testPriosWhileDeleting":19,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":349,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":238,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":190,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSortHighLevelFirst":138,"com.graphhopper.storage.SynchedDAWrapperTest.testBoundsCheck":466,"com.graphhopper.storage.RAMDataAccessTest.testRenameNoFlush":463,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":355,"com.graphhopper.GraphHopperTest.testPrepare":263,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":250,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":338,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":197,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":345,"com.graphhopper.coll.IntDoubleBinHeapTest.testSpreading":432,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":399,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":331,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":363,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":156,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":422,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":360,"com.graphhopper.storage.LevelGraphStorageTest.internalDisconnect":24,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex":139,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":316,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":421,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":397,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":449,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":323,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":189,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":329,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":122,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":284,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":109,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":402,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":270,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat_withTurnCostEntries":66,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":503,"com.graphhopper.storage.LevelGraphStorageTest.testDetachEdge":26,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":431,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":358,"com.graphhopper.GraphHopperTest.testLoadOSM":265,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":129,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":452,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":123,"com.graphhopper.reader.OSMReaderTest.testSort":281,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxAndMinSpeed":413,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":289,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":314,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":70,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":468,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":209,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":174,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":441,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":251,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":301,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":271,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":105,"com.graphhopper.storage.LevelGraphStorageTest.testBounds":51,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":186,"com.graphhopper.storage.LevelGraphStorageTest.testPrios":14,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":67,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":213,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":79,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":379,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteAndOptimize":36,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":74,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":427,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testMaxAndMinSpeed":500,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSnappedPointAndGeometry":146,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":194,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraph":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":335,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testEdgeFilter":144,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":266,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":381,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":226,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":326,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteNodeForUnidir":28,"com.graphhopper.coll.OSMIDMapTest.testGetLong":258,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":325,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":88,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":304,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":77,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":94,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes":43,"com.graphhopper.storage.LevelGraphStorageTest.testSave_and_fileFormat":21,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode2":45,"com.graphhopper.coll.CompressedArrayTest.testCompress2":443,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":199,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":475,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":112,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":85,"com.graphhopper.GraphHopperAPITest.testLoad":5,"com.graphhopper.storage.LevelGraphStorageTest.testNoCreateCalled":25,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":451,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":489,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":191,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":181,"com.graphhopper.storage.LevelGraphStorageTest.testClone":30,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":495,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":75,"com.graphhopper.reader.OSMReaderTest.testBarriers":282,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":317,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraphBug":136,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":382,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":222,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":328,"com.graphhopper.util.GHUtilityTest.testCopy":371,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testDifferentVehicles":155,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":116,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":496,"com.graphhopper.routing.PathTest.testFindInstruction":311,"com.graphhopper.storage.LevelGraphStorageTest.testPropertiesWithNoInit":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":76,"com.graphhopper.coll.IntDoubleBinHeapTest.testBasic":430,"com.graphhopper.util.EdgeSkipIteratorTest.testUpdateFlags":361,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":493,"com.graphhopper.storage.LevelGraphStorageTest.testInfinityWeight":59,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":113,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":378,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":210,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":195,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":103,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":369,"com.graphhopper.storage.LevelGraphStorageTest.testEnsureSize":20,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":89,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":351,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":389,"com.graphhopper.storage.LevelGraphStorageTest.testFlags":32,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":177,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":223,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":458,"com.graphhopper.util.InstructionListTest.testWayList2":365,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":394,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":246,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":130,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":215,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":438,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":80,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":400,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":172,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":108,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":398,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":175,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":318,"com.graphhopper.storage.LevelGraphStorageTest.testFootMix":34,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":403,"com.graphhopper.storage.SynchedDAWrapperTest.testEnsureCapacity":469,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":232,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":86,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":157,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":180,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBug1":327,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":283,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":467,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":341,"com.graphhopper.coll.OSMIDMapTest.testGet":255,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":83,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":4,"com.graphhopper.routing.PathBidirRefTest.testExtract":306,"com.graphhopper.storage.LevelGraphStorageTest.testEnabledElevation":47,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":257,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":406,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints120":150,"com.graphhopper.storage.RAMDataAccessTest.testCopy":460,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameNoFlush":470,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":125,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":245,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":111,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":244,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":420,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":405,"com.graphhopper.storage.RAMDataAccessTest.testSegments":465,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":135,"com.graphhopper.util.GHUtilityTest.testSort2":370,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":336,"com.graphhopper.reader.OSMReaderTest.testMain":280,"com.graphhopper.storage.LevelGraphStorageTest.testDoThrowExceptionIfDimDoesNotMatch":22,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":479,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":93,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":407,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":504,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testGrid":151,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":414,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectional":50,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":478,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":248,"com.graphhopper.storage.LevelGraphStorageTest.test8BytesFlags":37,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdgesWithDelete":41,"com.graphhopper.storage.LevelGraphStorageTest.testDirectional":62,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete":38,"com.graphhopper.routing.QueryGraphTest.testIterationBug_163":298,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":386,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":98,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":376,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":450,"com.graphhopper.storage.LevelGraphStorageTest.testAddLocation":44,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":291,"com.graphhopper.storage.StorablePropertiesTest.testStore":170,"com.graphhopper.storage.GraphHopperStorageTest.testClone":183,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":216,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":247,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":484,"com.graphhopper.storage.RAMDirectoryTest.testNoDuplicates":11,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":193,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":482,"com.graphhopper.storage.LevelGraphStorageTest.testDisconnectEdge":13,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":497,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeFilter":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":224,"com.graphhopper.routing.PathTest.testTime":309,"com.graphhopper.storage.LevelGraphStorageTest.testNameIndex":60,"com.graphhopper.storage.LevelGraphStorageTest.testEdges":31,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":488,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":161,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":132,"com.graphhopper.storage.LevelGraphStorageTest.testCheckFirstNode":49,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":237,"com.graphhopper.reader.OSMReaderTest.testRelation":287,"com.graphhopper.util.GHUtilityTest.testSortDirected":373,"com.graphhopper.coll.IntDoubleBinHeapTest.test0":435,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":474,"com.graphhopper.storage.MMapDirectoryTest.testNoDuplicates":64,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxAndMinSpeed":392,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":297,"com.graphhopper.GraphHopperTest.testFootOnly":1,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":158,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":473,"com.graphhopper.storage.RAMDirectoryTest.testNoErrorForDACreate":12,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testReverseSpatialKey":145,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":418,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":324,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":346,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":375,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":134,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":233,"com.graphhopper.search.NameIndexTest.testCreate":10,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":464,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":294,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":454,"com.graphhopper.routing.QueryGraphTest.testOneWay":303,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":133,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":439,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":272,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":121,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":436,"com.graphhopper.reader.OSMReaderTest.testWithBounds":290,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":393,"com.graphhopper.storage.RAMDataAccessTest.testBoundsCheck":459,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":107,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":230,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":299,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":313,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":239,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":494,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":417,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectionalEdgeFilter":27,"com.graphhopper.storage.LevelGraphStorageTest.testBigDataEdge":23,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":390,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":423,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":164,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":97,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":169,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":481,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":249,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":90,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":179,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":302,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":322,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":212,"com.graphhopper.util.InstructionListTest.testWayList":364,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":404,"com.graphhopper.GraphHopperAPITest.testDisconnected179":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":225,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":440,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":267,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":99,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":119,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":220,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":387,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":278,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":315,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":236,"com.graphhopper.storage.RAMIntDataAccessTest.testSet_Get_Short_Long":448,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":253,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":411,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":264,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":185,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":159,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":100,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":106,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":102,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":101,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":356,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":203,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":396,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":202,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":333,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":354,"com.graphhopper.storage.LevelGraphStorageTest.testPillarNodes":58,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":485,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":412,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeProperties":46,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":72,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":178,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":343,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testNoErrorOnEdgeCase_lastIndex":153,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameNoFlush":453,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":416,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":173,"com.graphhopper.routing.PathTest.testWayList":310,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":252,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":229,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":480,"com.graphhopper.coll.OSMIDMapTest.testGet2":256,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":344,"com.graphhopper.storage.LevelGraphStorageTest.testCreateDuplicateEdges":55,"com.graphhopper.reader.dem.HeightTileTest.testGetHeightForNegativeTile":274,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":120,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":96,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":410,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":196,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":490,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":81,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":184,"com.graphhopper.storage.LevelGraphStorageTest.testDozendEdges":42,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex2":147,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex3":148,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":461,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph":149,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":384,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":434,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":424,"com.graphhopper.util.GHUtilityTest.testSort":372,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":126,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":242,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":505,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":409,"com.graphhopper.search.NameIndexTest.testPut":8,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":110,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":182,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":115,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testRMin":140,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":162,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":165,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":456,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":380,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":300,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":163,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":319,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":68,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":268,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":275,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":492,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":342,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":312,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":457,"com.graphhopper.storage.LevelGraphStorageTest.testGetLocations":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":243,"com.graphhopper.routing.PathTest.testFound":308,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":269,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":419,"com.graphhopper.storage.LevelGraphStorageTest.testCreateLocation":57,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeightIfAdvancedEncoder":15,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":408,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":359,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":87,"com.graphhopper.coll.IntDoubleBinHeapTest.testClear":433,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":9,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":228,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":188,"com.graphhopper.util.InstructionListTest.testEmptyList":362,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":330,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph2":152,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":334,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":487,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":477,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":447,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testMaxAndMinSpeed":498,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":198,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":337,"com.graphhopper.reader.PrinctonReaderTest.testRead":277,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":211,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testWayGeometry":143,"com.graphhopper.storage.LevelGraphStorageTest.testUpdateUnidirectional":35,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":82,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":227,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":259,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":437,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":95,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":217,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes2":29,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":92,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":385,"com.graphhopper.routing.util.EncodingManagerTest.testTurnFlagCombination":445,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":499,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":377,"com.graphhopper.reader.OSMReaderTest.testFoot":2,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":241,"com.graphhopper.reader.dem.HeightTileTest.testGetHeight":276,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":305,"com.graphhopper.storage.LevelGraphStorageTest.testCopyProperties":61,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":127,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":442,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":128,"com.graphhopper.reader.OSMReaderTest.testOneWay":293,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":192,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":207,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":206,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":104,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":472,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":201,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":383,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":187,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":235,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":350,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":502,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":347,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":357,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":483,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":166,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":348,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":471,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":320,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testFindingWayGeometry":141,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":231,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":296,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":176,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":292,"com.graphhopper.storage.MMapDirectoryTest.testNoErrorForDACreate":65,"com.graphhopper.routing.PathBidirRefTest.testExtract2":307,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":455,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":160,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":321,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":118,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":131,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":426,"com.graphhopper.search.NameIndexTest.testTooLongNameNoError":7,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":205,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":167,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":501,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":285,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":254,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":168,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":353,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":388,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":124,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":208,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdges":33,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":486,"com.graphhopper.GraphHopperTest.testFootAndCar":0,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":200,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode":39,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":425,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints32":154,"com.graphhopper.storage.RAMDataAccessTest.testEnsureCapacity":462,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":221,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":374,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":446,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":352,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":332,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":78,"com.graphhopper.storage.StorablePropertiesTest.testLoad":171,"com.graphhopper.GraphHopperTest.testPrepareOnly":260,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCorrectWeight":340,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":117,"com.graphhopper.GraphHopperTest.testVia":262,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":415,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":219,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":288,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeight":17,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":204,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":366,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":491,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":286,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":234,"com.graphhopper.util.AngleCalcTest.testCombined":428,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":476,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeReturn":56,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete3":54,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete2":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":69}}]

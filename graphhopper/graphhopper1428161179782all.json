[{"failures":[],"tindex":"f1c7df25-dade-11e4-a0c4-f5a73d947f00","variableMapping":{"acceptBit":"acceptBit","ferryBit":"acceptBit","ferries":"ferries","highwayValue":"highwayValue","way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:218","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.HashSet<java.lang.String>)) {\n        java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"bicycle\");\n        if (((java.lang.String == null) && (!(com.graphhopper.reader.OSMWay.hasTag(\"foot\")))) || (\"yes\".equals(java.lang.String)))\n            return (long) | (long);\n        \n    } \n    return 0;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:190","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.HashSet<java.lang.String>)) {\n        java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"foot\");\n        if ((java.lang.String == null) || (\"yes\".equals(java.lang.String)))\n            return (long) | (long);\n        \n    } \n    return 0;\n} "},"status":0},{"failures":[0,1],"tindex":"f1c8c986-dade-11e4-a0c4-6ddf7e53de1e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:101","type":"CtAssignmentImpl","sourcecode":"int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int])"},"status":-1},{"failures":[2,3],"tindex":"f1c8c987-dade-11e4-a0c4-8d6571f2f960","variableMapping":{"keys":"keys","i":"i"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:188","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][(int / 2)]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:126","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][int]"},"status":-1},{"failures":[],"tindex":"f1c8f098-dade-11e4-a0c4-016dcd534a85","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:52","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.CarFlagEncoder.this(5, 5, 0)"},"status":-2},{"failures":[4],"tindex":"f1c8f099-dade-11e4-a0c4-99ba91afc839","variableMapping":{"i":"val"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:189","type":"CtOperatorAssignmentImpl","sourcecode":"int /= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:388","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String)"},"status":-1},{"failures":[],"tindex":"f1c8f09a-dade-11e4-a0c4-f727bc473201","variableMapping":{"heap":"this"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:218","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap = null"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:30","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap.this(1000)"},"status":-2},{"failures":[],"tindex":"f1c8f09b-dade-11e4-a0c4-ff585d1c3cd8","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:244","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:235","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\")"},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"f1c8f09c-dade-11e4-a0c4-7da7f2d66dd9","variableMapping":{"edgeId":"segmentSizeInBytes"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:509","type":"CtAssignmentImpl","sourcecode":"int = int << 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:183","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Math.java.lang.Math.max(java.lang.Math.((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int)"},"status":-1},{"failures":[38,39,40,41,6,42,43,44,7,45,46,47,48,49,50,51,52,53],"tindex":"f1c8f09d-dade-11e4-a0c4-dd606374e34c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:165","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} else {\n    long |= 1;\n    double = double;\n}"},"status":-1},{"failures":[],"tindex":"f1c8f09e-dade-11e4-a0c4-77c3b0eeffe0","variableMapping":{"need":"com.graphhopper.coll.SparseIntIntArray.DELETED"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:196","type":"CtForImpl","sourcecode":"for (int int = 4 ; int < 32 ; int++) {\n    if (int <= ((1 << int) - 12)) {\n        return (1 << int) - 12;\n    } \n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:99","type":"CtIfImpl","sourcecode":"if ((int < 0) || ((int[][int]) == (com.graphhopper.coll.SparseIntIntArray.int))) {\n    return int;\n} else {\n    return int[][int];\n}"},"status":-2},{"failures":[0,1],"tindex":"f1c8f09f-dade-11e4-a0c4-970ea6385ae2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:112","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHBitSetImpl.clear(int)"},"status":-1},{"failures":[],"tindex":"f1c8f0a0-dade-11e4-a0c4-d1d917a87f14","variableMapping":{"type":"index"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMElement:198","type":"CtReturnImpl","sourcecode":"return (this.int) == int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTBitSet:50","type":"CtReturnImpl","sourcecode":"return gnu.trove.set.hash.TIntHashSet.contains(int)"},"status":-2},{"failures":[54,55,56,57,58,59,60,61,62],"tindex":"f1c8f0a1-dade-11e4-a0c4-db0ea3fd9dd4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:766","type":"CtIfImpl","sourcecode":"if (boolean || (double < double))\n    return double * 0.9;\n"},"status":-1},{"failures":[],"tindex":"f1c8f0a2-dade-11e4-a0c4-171a984fdea3","variableMapping":{"size":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:132","type":"CtReturnImpl","sourcecode":"return (long) / 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:110","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedDoubleValue.setDefaultValue(long)"},"status":-2},{"failures":[],"tindex":"f1c8f0a3-dade-11e4-a0c4-bb765119b40e","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:141","type":"CtReturnImpl","sourcecode":"return int + (com.graphhopper.routing.util.EncodedValue.getBits())"},"status":-2},{"failures":[],"tindex":"f1c8f0a4-dade-11e4-a0c4-05c9d658e920","variableMapping":{"minDistance":"lon","rMin":"lon"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:737","type":"CtIfImpl","sourcecode":"if (double < double) {\n    break;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:185","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} else {\n    long |= 1;\n    double = double;\n}"},"status":0},{"failures":[],"tindex":"f1c917b5-dade-11e4-a0c4-cb5f7e55bc5d","variableMapping":{"this":"this","way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:327","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.AbstractFlagEncoder.com.graphhopper.routing.util.AbstractFlagEncoder.parseSpeed(com.graphhopper.reader.OSMWay.getTag(\"maxspeed\"))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:332","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.AbstractFlagEncoder.com.graphhopper.routing.util.AbstractFlagEncoder.parseSpeed(com.graphhopper.reader.OSMWay.getTag(\"maxspeed:backward\"))"},"status":-2},{"failures":[63,64,65,66,54,67,68,55,69,59,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"f1c917b6-dade-11e4-a0c4-c94934b3f43e","variableMapping":{"i":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:189","type":"CtOperatorAssignmentImpl","sourcecode":"int /= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:159","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[],"tindex":"f1c917b7-dade-11e4-a0c4-e5fb7f9c3dbe","variableMapping":{"res":"flags","maxBit":"flags","value":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:290","type":"CtIfImpl","sourcecode":"if ((long & long) != 0)\n    long |= 1;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:332","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    long |= com.graphhopper.routing.util.AbstractFlagEncoder.flagsDefault(boolean, boolean);\n}"},"status":0},{"failures":[],"tindex":"f1c917b8-dade-11e4-a0c4-0f1d3a305c1f","variableMapping":{"defaultUTurnCost":"com.graphhopper.util.DistanceCalcEarth.KM_MILE","turnCosts":"com.graphhopper.util.DistanceCalcEarth.KM_MILE","edgeId":"val","prevOrNextEdgeId":"val","weight":"com.graphhopper.util.DistanceCalcEarth.KM_MILE"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TurnWeighting:84","type":"CtIfImpl","sourcecode":"if ((double == 0) && (int == int))\n    return double + (double);\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:381","type":"CtReturnImpl","sourcecode":"return int * (com.graphhopper.util.DistanceCalcEarth.double)"},"status":-2},{"failures":[],"tindex":"f1c917b9-dade-11e4-a0c4-0b7be0859dc3","variableMapping":{"fromNode":"i"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.Path:107","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    throw new java.lang.IllegalStateException(\"Call extract() before retrieving fromNode\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:176","type":"CtIfImpl","sourcecode":"if (int < (int))\n    long <<= 1;\nelse\n    break;\n"},"status":0},{"failures":[38,39,40,41,6,42,43,44,7,45,46,47,48,49,50,51,52,53],"tindex":"f1c917ba-dade-11e4-a0c4-3585e7e0497f","variableMapping":{"lastTime":"hash"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.StopWatch:59","type":"CtAssignmentImpl","sourcecode":"long = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:170","type":"CtOperatorAssignmentImpl","sourcecode":"long |= 1"},"status":-1},{"failures":[],"tindex":"f1c917bb-dade-11e4-a0c4-c195a7a30f10","variableMapping":{"maxLeafEntries":"biggestStart"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:52","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:163","type":"CtAssignmentImpl","sourcecode":"int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getKey()"},"status":0},{"failures":[45,46,47,48,49,83,50,51,84],"tindex":"f1c917bc-dade-11e4-a0c4-bde741bb349f","variableMapping":{"bytePointer":"bits"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:90","type":"CtIfImpl","sourcecode":"if ((long) < 0) {\n    throw new java.lang.IllegalStateException(\"Way index is too large. Cannot contain more than 2GB\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:229","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":-1},{"failures":[56,85,86,87,88,89,90,91,92,93,94,95,60,96,97,33,98,99,81,100,101],"tindex":"f1c917bd-dade-11e4-a0c4-393b74174d02","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:178","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[102],"tindex":"f1c917be-dade-11e4-a0c4-7156b943ffb3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:71","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.ensureNodeIndex(int)"},"status":-1},{"failures":[],"tindex":"f1c917bf-dade-11e4-a0c4-7d1d7156a995","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GHNodeAccess:153","type":"CtReturnImpl","sourcecode":"return 3"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:88","type":"CtReturnImpl","sourcecode":"return ((int)(long & 4294967295L))"},"status":-2},{"failures":[0,1,103],"tindex":"f1c917c0-dade-11e4-a0c4-1f5b2e86b123","variableMapping":{"elem":"nodeLowLink","size":"index","keys":"nodeIndex","i":"index","child":"index","lastPrio":"index"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:111","type":"CtForImpl","sourcecode":"for (int = 1 ; (int * 2) <= (int) ; int = int) {\n    int = int * 2;\n    if ((int != (int)) && ((int[][(int + 1)]) < (int[][int]))) {\n        int++;\n    } \n    if (int > (int[][int])) {\n        int[][int] = int[][int];\n        int[][int] = int[][int];\n    } else {\n        break;\n    }\n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:65","type":"CtWhileImpl","sourcecode":"nextState : while (!(java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.empty())) {\n    com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState = java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.pop();\n    final int int = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.int;\n    final com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator;\n    if (com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.isStart()) {\n        int[][int] = int;\n        int[][int] = int;\n        (int)++;\n        gnu.trove.stack.array.TIntArrayStack.push(int);\n        com.graphhopper.coll.GHBitSetImpl.set(int);\n        com.graphhopper.util.EdgeIterator = com.graphhopper.storage.GraphStorage.createEdgeExplorer(com.graphhopper.routing.util.EdgeFilter).setBaseNode(int);\n    } else {\n        com.graphhopper.util.EdgeIterator = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.util.EdgeIterator;\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n    }\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if ((int[][int]) == 0) {\n            java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.resumeState(int, com.graphhopper.util.EdgeIterator));\n            java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.startState(int));\n            continue nextState;\n        } else if (com.graphhopper.coll.GHBitSetImpl.contains(int)) {\n            int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n        } \n    }\n    if ((int[][int]) == (int[][int])) {\n        gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList = new gnu.trove.list.array.TIntArrayList();\n        int int;\n        while ((int = gnu.trove.stack.array.TIntArrayStack.pop()) != int) {\n            gnu.trove.list.array.TIntArrayList.add(int);\n            com.graphhopper.coll.GHBitSetImpl.clear(int);\n        }\n        gnu.trove.list.array.TIntArrayList.add(int);\n        com.graphhopper.coll.GHBitSetImpl.clear(int);\n        java.util.ArrayList<gnu.trove.list.array.TIntArrayList>.add(gnu.trove.list.array.TIntArrayList);\n    } \n}"},"status":-1},{"failures":[104],"tindex":"f1c917c1-dade-11e4-a0c4-9fe54e13935d","variableMapping":{"r":"incEleSum","angle":"incEleSum"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:47","type":"CtOperatorAssignmentImpl","sourcecode":"double += (((0.1963 * double) * double) - 0.9817) * double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:165","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"f1c917c2-dade-11e4-a0c4-9ff5c4cf6b73","variableMapping":{"currentEntry":"shift"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.CompressedArray:86","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:56","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedDoubleValue.getBits()"},"status":0},{"failures":[105,106,107,108,109,110,111,79],"tindex":"f1c93dd3-dade-11e4-a0c4-3516123b8955","variableMapping":{"segmentSizeInBytes":"value","length":"key"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:357","type":"CtAssertImpl","sourcecode":"assert int <= (int) : ((\"the length has to be smaller or equal to the segment size: \" + int) + \" vs. \") + (int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:58","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHTreeMapComposed.insert(int, int)"},"status":-1},{"failures":[112,113,114,115,116,117,118,119,120,33,121,61,122,123,98,34,35,36,99,37,80,81,124,125,126,127,100,101,128,129,130,131,62,82],"tindex":"f1c93dd4-dade-11e4-a0c4-cd1a2e52cda4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create(long)"},"status":-1},{"failures":[132,133,134,135],"tindex":"f1c93dd5-dade-11e4-a0c4-1790f46a345c","variableMapping":{"maxLeafEntries":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:52","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:339","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer"},"status":-1},{"failures":[136,102,137,138,139,112,140,5,113,114,141,142,143,144,145,146,147,148,149,150,151,152,153,154,63,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,39,190,191,192,193,194,40,195,41,6,196,197,198,199,200,201,202,42,203,204,205,206,207,43,208,44,7,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,64,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,115,116,268,269,270,271,272,273,274,275,276,277,278,279,280,281,65,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,118,26,27,119,120,308,309,310,311,312,313,314,315,316,317,318,319,320,321,66,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,54,358,359,360,361,362,67,68,363,132,364,365,366,56,69,367,85,368,369,370,371,372,373,374,375,376,86,377,378,87,379,380,381,382,383,384,385,386,387,388,389,390,88,391,392,393,394,0,395,396,397,1,103,398,133,399,134,400,401,402,403,404,405,406,407,408,89,409,410,411,57,412,90,91,413,58,59,92,414,415,416,417,418,419,420,421,93,70,422,94,95,423,424,104,425,135,426,427,428,60,71,429,96,430,431,432,433,434,435,436,437,438,97,439,440,441,442,73,443,444,74,75,445,446,447,448,449,450,105,451,452,453,454,455,106,456,457,458,107,459,76,77,460,461,462,463,108,464,465,466,109,467,468,78,469,470,471,472,473,110,474,111,475,79,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,33,121,61,122,123,98,34,492,35,36,99,37,493,80,81,124,125,126,127,100,101,128,494,129,130,131,62,82,495,496,497,498,499],"tindex":"f1c964e6-dade-11e4-a0c4-e18d7d3e116e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:746","type":"CtIfImpl","sourcecode":"if (int < 0)\n    continue;\n"},"status":-1},{"failures":[],"tindex":"f1c964e7-dade-11e4-a0c4-411e2ad553b6","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Downloader:108","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:345","type":"CtLocalVariableImpl","sourcecode":"int int = java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.size()"},"status":-2},{"failures":[],"tindex":"f1c964e8-dade-11e4-a0c4-5b042bd10b92","variableMapping":{"high":"forwardBit","highKey":"roundaboutBit","key":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:123","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:662","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return boolean ? long | (long) : long & (~(long));\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return boolean ? long | (long) : long & (~(long));\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return boolean ? long | (long) : long & (~(long));\n    default :\n        throw new java.lang.IllegalArgumentException(((\"Unknown key \" + int) + \" for boolean value\"));\n}"},"status":-2},{"failures":[],"tindex":"f1c964e9-dade-11e4-a0c4-73c1b649c1b1","variableMapping":{"turnCostIndex":"toSize","NO_TURN_ENTRY":"toSize"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:185","type":"CtIfImpl","sourcecode":"if (int == (int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:259","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.java.util.Arrays.fill(float[], int, ((int) + 1), 0.0F)"},"status":-2},{"failures":[500],"tindex":"f1c964ea-dade-11e4-a0c4-19708cb1ab37","variableMapping":{"min":"minutes","tmpSize":"index"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:168","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int = int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:438","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    java.lang.String java.lang.String = java.lang.String;\n    java.lang.String = java.lang.String.substring(0, int);\n    java.lang.String = java.lang.String.substring((int + 1));\n    int = (java.lang.Integer.(java.lang.Integer.parseInt(java.lang.String)) * 60) * 24;\n} "},"status":-1},{"failures":[],"tindex":"f1c964eb-dade-11e4-a0c4-7d15c030285a","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:103","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"f1c98bfc-dade-11e4-a0c4-a712c307e03c","variableMapping":{"maxLatTmp":"lon","minLatTmp":"midLon","lat":"midLon","hash":"spatialKey"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:162","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double double = (double + double) / 2;\n    if (double < double) {\n        double = double;\n    } else {\n        long |= 1;\n        double = double;\n    }\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:229","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":-2},{"failures":[],"tindex":"f1c98bfd-dade-11e4-a0c4-e373dcfb6135","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GHNodeAccess:153","type":"CtReturnImpl","sourcecode":"return 3"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TraversalMode:92","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.EdgeIteratorState.getAdjNode()"},"status":-2},{"failures":[],"tindex":"f1c98bfe-dade-11e4-a0c4-a9dcb1c1abd0","variableMapping":{"turnCosts":"com.graphhopper.util.DistanceCalcEarth.KM_MILE","weight":"com.graphhopper.util.DistanceCalcEarth.KM_MILE"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.TurnWeighting:87","type":"CtReturnImpl","sourcecode":"return double + double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:372","type":"CtTryImpl","sourcecode":"try {\n    int int;\n    int int = java.lang.String.indexOf(\"mp\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n        int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n        return int * (com.graphhopper.util.DistanceCalcEarth.double);\n    } \n    int int = java.lang.String.indexOf(\"knots\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n        int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n        return int * 1.852;\n    } \n    int int = java.lang.String.indexOf(\"km\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n    } else {\n        int = java.lang.String.indexOf(\"kph\");\n        if (int > 0) {\n            java.lang.String = java.lang.String.substring(0, int).trim();\n        } \n    }\n    return java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n} catch (java.lang.Exception java.lang.Exception) {\n    return -1;\n}"},"status":-2},{"failures":[],"tindex":"f1c98bff-dade-11e4-a0c4-af0184104739","variableMapping":{"weight":"orientation"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:394","type":"CtIfImpl","sourcecode":"if (double < 0)\n    throw new java.lang.IllegalArgumentException((\"weight cannot be negative! but was \" + double));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:81","type":"CtIfImpl","sourcecode":"if (double > ((+(java.lang.Math.double)) + double))\n    double = double - (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"status":-2},{"failures":[],"tindex":"f1c98c00-dade-11e4-a0c4-0152c0810dbf","variableMapping":{"clonedG":"graph","nodeEntryBytes":"skippedEdge1"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1074","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.GraphHopperStorage.int) != (int))\n    throw new java.lang.IllegalStateException(((((\"nodeEntryBytes cannot be different for cloned graph. \" + \"Cloned: \") + (com.graphhopper.storage.GraphHopperStorage.int)) + \" vs \") + (int)));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:69","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    boolean boolean = com.graphhopper.util.EdgeSkipIterState == null;\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, false);\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    else\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, true);\n} else {\n    com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    boolean boolean = com.graphhopper.util.EdgeSkipIterState == null;\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, true);\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    else\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, false);\n}"},"status":0},{"failures":[501,502,494],"tindex":"f1c98c01-dade-11e4-a0c4-7becfba33d13","variableMapping":{"bytePointer":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:90","type":"CtIfImpl","sourcecode":"if ((long) < 0) {\n    throw new java.lang.IllegalStateException(\"Way index is too large. Cannot contain more than 2GB\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:256","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    long |= com.graphhopper.routing.util.AbstractFlagEncoder.handleRelationTags(com.graphhopper.reader.OSMRelation, long);\n}"},"status":-1},{"failures":[188,191,192,193,194,195,196,197,198,199,201,202,204,205,206,207,208,209,210,211,212,214,215,122,123,98,99],"tindex":"f1c9b312-dade-11e4-a0c4-c7821191a42c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:192","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    return ;\n} "},"status":-1},{"failures":[],"tindex":"f1c9b313-dade-11e4-a0c4-618a450836b4","variableMapping":{"nodeB":"bits","edgeId":"bits","nodeA":"bits"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:512","type":"CtReturnImpl","sourcecode":"return int > int ? int + 1 : int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:101","type":"CtReturnImpl","sourcecode":"return int"},"status":0},{"failures":[],"tindex":"f1c9b314-dade-11e4-a0c4-53494b0ab469","variableMapping":{"longSegmentSize":"bits","bufferStart":"bits"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:153","type":"CtOperatorAssignmentImpl","sourcecode":"long += long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:228","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 1"},"status":-2},{"failures":[38,39,40,41,6,42,43,44,7,45,46,47,48,49,50,51,52,53,84],"tindex":"f1c9b315-dade-11e4-a0c4-4b2038972b72","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:182","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double double = (double + double) / 2;\n    if (double < double) {\n        double = double;\n    } else {\n        long |= 1;\n        double = double;\n    }\n} "},"status":-1},{"failures":[],"tindex":"f1c9b316-dade-11e4-a0c4-d710998f6b64","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:53","type":"CtLocalVariableImpl","sourcecode":"final double double = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:215","type":"CtLocalVariableImpl","sourcecode":"double double = ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) / 2"},"status":-2},{"failures":[104],"tindex":"f1c9b317-dade-11e4-a0c4-a325c93369b6","variableMapping":{"distInMeter":"eleDelta"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:94","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 1000"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:165","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[503,504],"tindex":"f1c9b318-dade-11e4-a0c4-676917cae2f8","variableMapping":{"com.graphhopper.util.Helper7.UNMAP_SUPPORTED":"closed","v":"closed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper7:50","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.Helper7.boolean = boolean"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:72","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[],"tindex":"f1c9b319-dade-11e4-a0c4-290a59b3114d","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:303","type":"CtReturnImpl","sourcecode":"return \"CGIAR\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:68","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-2},{"failures":[],"tindex":"f1c9b31a-dade-11e4-a0c4-5b2ccdd77773","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:400","type":"CtThrowImpl","sourcecode":"throw new java.lang.UnsupportedOperationException(\"Not supported. Edge is empty.\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:195","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((java.lang.String.(java.lang.String.format(com.graphhopper.routing.util.EncodingManager.java.lang.String, int, \"way\")) + (com.graphhopper.routing.util.EncodingManager.java.lang.String)))"},"status":-2},{"failures":[38,39,40,41,6,42,43,44,7,45,46,47,48,49,50,51,52,53,84],"tindex":"f1c9b31b-dade-11e4-a0c4-2747fd6e31d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:160","type":"CtWhileImpl","sourcecode":"while (true) {\n    if (double < double) {\n        double double = (double + double) / 2;\n        if (double < double) {\n            double = double;\n        } else {\n            long |= 1;\n            double = double;\n        }\n    } \n    int++;\n    if (int < (int))\n        long <<= 1;\n    else\n        break;\n    \n    if (double < double) {\n        double double = (double + double) / 2;\n        if (double < double) {\n            double = double;\n        } else {\n            long |= 1;\n            double = double;\n        }\n    } \n    int++;\n    if (int < (int))\n        long <<= 1;\n    else\n        break;\n    \n}"},"status":-1},{"failures":[],"tindex":"f1c9b31c-dade-11e4-a0c4-85fef3fd024e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:47","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.GraphStorage.getNodes()"},"status":-2},{"failures":[],"tindex":"f1c9b31d-dade-11e4-a0c4-7f73c1888823","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:171","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"UTF-8\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:434","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String.substring(0, int)"},"status":-2},{"failures":[376,390,408,438],"tindex":"f1c9b31e-dade-11e4-a0c4-a36bc0503835","variableMapping":{"this":"this","way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:328","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.AbstractFlagEncoder.com.graphhopper.routing.util.AbstractFlagEncoder.parseSpeed(com.graphhopper.reader.OSMWay.getTag(\"maxspeed:forward\"))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:453","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed(com.graphhopper.reader.OSMWay)"},"status":-1},{"failures":[112,113,505,115,17,506,507,20,21,508,509,117,118,119,28,510,511,31,32,512,513,514,33,34,35,36,37],"tindex":"f1c9b31f-dade-11e4-a0c4-d3c3d773b9db","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:148","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:310","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.RAMDataAccess.((long)(getSegments())) * (int)"},"status":-1},{"failures":[],"tindex":"f1c9b320-dade-11e4-a0c4-75d760b3be21","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:231","type":"CtReturnImpl","sourcecode":"return \"bike2\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:176","type":"CtReturnImpl","sourcecode":"return \"mtb\""},"status":-2},{"failures":[146,154,155,156,158,162,163,170,171,232,240,241,242,244,248,249,256,257,273,281,282,283,285,289,290,297,298,313,321,322,323,325,329,330,337,338,0,397],"tindex":"f1c9da31-dade-11e4-a0c4-1b8169b633b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:200","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"f1c9da32-dade-11e4-a0c4-9bd0f541d01b","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:171","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:480","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"surface\")"},"status":-2},{"failures":[],"tindex":"f1c9da33-dade-11e4-a0c4-bb1437289fca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:211","type":"CtForImpl","sourcecode":"for (int = int ; (float[][(int / 2)]) > double ; int /= 2) {\n    int[][int] = int[][(int / 2)];\n    float[][int] = float[][(int / 2)];\n}"},"status":-2},{"failures":[],"tindex":"f1c9da34-dade-11e4-a0c4-2bfe415fcc1b","variableMapping":{"numTiles":"com.graphhopper.util.EdgeIterator.NO_EDGE"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:111","type":"CtIfImpl","sourcecode":"if ((int % 2) == 1)\n    int++;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:99","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.LevelGraphStorage.EdgeSkipIteratorImpl.setSkippedEdges(com.graphhopper.util.EdgeIterator.int, com.graphhopper.util.EdgeIterator.int)"},"status":-2},{"failures":[0,1],"tindex":"f1c9da35-dade-11e4-a0c4-2727992eb4e0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:91","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if ((int[][int]) == 0) {\n        java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.resumeState(int, com.graphhopper.util.EdgeIterator));\n        java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.startState(int));\n        continue nextState;\n    } else if (com.graphhopper.coll.GHBitSetImpl.contains(int)) {\n        int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n    } \n}"},"status":-1},{"failures":[],"tindex":"f1c9da36-dade-11e4-a0c4-9be0f6f81731","variableMapping":{"str":"str"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:463","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return \"\";\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:465","type":"CtReturnImpl","sourcecode":"return java.lang.String.replaceAll(\";[ ]*\", \", \")"},"status":-2},{"failures":[375,389,133,134,407,437],"tindex":"f1c9da37-dade-11e4-a0c4-1d0baa09d153","variableMapping":{"fullyLoaded":"isPusingSection"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:1079","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"No configuration changes are possible after loading the graph\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:499","type":"CtIfImpl","sourcecode":"if (boolean && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\"))))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-1},{"failures":[],"tindex":"f1c9da38-dade-11e4-a0c4-bfe37bf179db","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1521","type":"CtReturnImpl","sourcecode":"return 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:88","type":"CtReturnImpl","sourcecode":"return ((int)(long & 4294967295L))"},"status":-2},{"failures":[],"tindex":"f1c9da39-dade-11e4-a0c4-3312d09e156b","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:148","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:195","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || (\"yes\".equals(java.lang.String)))\n    return (long) | (long);\n"},"status":0},{"failures":[],"tindex":"f1c9da3a-dade-11e4-a0c4-69d6112ff562","variableMapping":{"this":"encoder"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:201","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getHighwaySpeed(\"cycleway\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:53","type":"CtLocalVariableImpl","sourcecode":"double double = boolean ? com.graphhopper.routing.util.FlagEncoder.getReverseSpeed(com.graphhopper.util.EdgeIteratorState.getFlags()) : com.graphhopper.routing.util.FlagEncoder.getSpeed(com.graphhopper.util.EdgeIteratorState.getFlags())"},"status":-2},{"failures":[],"tindex":"f1c9da3b-dade-11e4-a0c4-a1c54b2ec516","variableMapping":{"i":"com.graphhopper.routing.util.FlagEncoder.K_BACKWARD"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:149","type":"CtIfImpl","sourcecode":"if ((int++) > 1000) {\n    throw new java.lang.IllegalStateException(\"Something unexpected happened. A node probably will not have 1000+ relations.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:146","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bridge\", \"yes\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))) {\n} else {\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = com.graphhopper.util.PointList.getElevation(0);\n    double double = 0;\n    double = com.graphhopper.util.EdgeIteratorState.getDistance();\n    double double = (com.graphhopper.util.PointList.getElevation(((com.graphhopper.util.PointList.size()) - 1))) - double;\n    if (double > 0.1) {\n        double = double;\n        double = double;\n    } else if (double < (-0.1)) {\n        double = -double;\n        double = double;\n    } \n    double double = double > 1 ? double / double : 0;\n    double double = double > 1 ? double / double : 0;\n    double double = (double - double) - double;\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getHighwaySpeed(\"cycleway\");\n    if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.FlagEncoder.int)) {\n        double double = com.graphhopper.routing.util.AbstractFlagEncoder.getSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n    if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.FlagEncoder.int)) {\n        double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n}"},"status":-2},{"failures":[],"tindex":"f1c9da3c-dade-11e4-a0c4-e7231f1e4cd0","variableMapping":{"minLon":"d1","maxLon":"d1"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.shapes.BBox:94","type":"CtIfImpl","sourcecode":"if ((double) >= (double))\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.NumHelper:29","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.NumHelper.com.graphhopper.util.NumHelper.equalsEps(double, double, com.graphhopper.util.NumHelper.double)"},"status":-2},{"failures":[396,98,37,81,124,125,126,127,100,101,128,129,130,131,82],"tindex":"f1c9da3d-dade-11e4-a0c4-197b3081a6ec","variableMapping":{"encodingManager":"em"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1003","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.EncodingManager.getVehicleCount()) > 1)\n    throw new java.lang.IllegalArgumentException(((\"Contraction hierarchies preparation \" + \"requires (at the moment) only one vehicle. But was:\") + (com.graphhopper.routing.util.EncodingManager)));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:56","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.EncodingManager.getVehicleCount()) > 1)\n    com.graphhopper.routing.util.EdgeFilter = com.graphhopper.routing.util.EdgeFilter.com.graphhopper.routing.util.EdgeFilter;\nelse\n    com.graphhopper.routing.util.EdgeFilter = new com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.EncodingManager.getSingle());\n"},"status":-1},{"failures":[],"tindex":"f1c9da3e-dade-11e4-a0c4-79950710c7fd","variableMapping":{"maxTurnCosts":"maxTurnCosts","java.lang.Double.POSITIVE_INFINITY":"java.lang.Double.POSITIVE_INFINITY","turnRestrictionBit":"cost","flags":"cost"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:594","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return (long & (long)) == 0 ? 0 : java.lang.Double.double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:598","type":"CtIfImpl","sourcecode":"if (long == (int))\n    return java.lang.Double.double;\n"},"status":-2},{"failures":[],"tindex":"f1c9da3f-dade-11e4-a0c4-ede79a2b4c49","variableMapping":{"maxTurnCosts":"com.graphhopper.routing.util.FlagEncoder.K_BACKWARD","turnRestrictionBit":"flags","flags":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:582","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return (long & (long)) != 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:678","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return (long & (long)) != 0;\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return (long & (long)) != 0;\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return (long & (long)) != 0;\n    default :\n        throw new java.lang.IllegalArgumentException(((\"Unknown key \" + int) + \" for boolean value\"));\n}"},"status":-2},{"failures":[],"tindex":"f1c9da40-dade-11e4-a0c4-dfc6c1f32f66","variableMapping":{"x1":"fwdIncline"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:158","type":"CtLocalVariableImpl","sourcecode":"double double = double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:217","type":"CtLocalVariableImpl","sourcecode":"double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)))"},"status":-2},{"failures":[],"tindex":"f1c9da41-dade-11e4-a0c4-e92d0fc3c4ca","variableMapping":{"val":"com.graphhopper.routing.util.EncodingManager.MOTORCYCLE","existing":"entryVal","key":"com.graphhopper.routing.util.EncodingManager.MOTORCYCLE"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.TranslationMap:210","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    throw new java.lang.IllegalStateException((((((\"Cannot overwrite key \" + java.lang.String) + \" with \") + java.lang.String) + \", was: \") + java.lang.String));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:167","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[368,382,401,410,90,419,430,61,122,123,98,99,37,80,81,124,126,127,100,128,129,130,131,82],"tindex":"f1c9da42-dade-11e4-a0c4-390a66eca5c4","variableMapping":{"high":"directionBitMask","highKey":"directionBitMask","key":"directionBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:123","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:210","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMNode.hasTag(\"barrier\", java.util.HashSet<java.lang.String>))\n    return long;\n"},"status":-1},{"failures":[515,2,3,106,107,108,110,111,79],"tindex":"f1ca0153-dade-11e4-a0c4-33083c78c3d3","variableMapping":{"foundIndex":"child"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:1016","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:121","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"f1ca0154-dade-11e4-a0c4-45a71e419111","variableMapping":{"r":"midLat","x":"lat","absY":"lat"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:39","type":"CtAssignmentImpl","sourcecode":"double = (double + double) / (double - double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:245","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":0},{"failures":[],"tindex":"f1ca0155-dade-11e4-a0c4-03cfbf793b4e","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:65","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:87","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.util.EdgeSkipIterState == null"},"status":-2},{"failures":[],"tindex":"f1ca0156-dade-11e4-a0c4-7d6ed9aacd51","variableMapping":{"len":"indexDivisor","start":"indexDivisor"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:472","type":"CtLocalVariableImpl","sourcecode":"int int = int + int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:242","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[],"tindex":"f1ca0157-dade-11e4-a0c4-c95fdd3edfb4","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:383","type":"CtLocalVariableImpl","sourcecode":"double double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:208","type":"CtLocalVariableImpl","sourcecode":"double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)))"},"status":-2},{"failures":[2,3],"tindex":"f1ca0158-dade-11e4-a0c4-714ce0177049","variableMapping":{"keys":"keys","i":"i"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:188","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][(int / 2)]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:126","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][int]"},"status":-1},{"failures":[516,50],"tindex":"f1ca0159-dade-11e4-a0c4-e3760c20d46e","variableMapping":{"bytePointer":"bits"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.search.NameIndex:90","type":"CtIfImpl","sourcecode":"if ((long) < 0) {\n    throw new java.lang.IllegalStateException(\"Way index is too large. Cannot contain more than 2GB\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:222","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":-1},{"failures":[],"tindex":"f1ca015a-dade-11e4-a0c4-f3d987d04093","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:472","type":"CtLocalVariableImpl","sourcecode":"int int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:81","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[146,158,162,163,170,232,244,248,249,256,273,285,289,290,297,313,325,329,330,337,396,397,82],"tindex":"f1ca015b-dade-11e4-a0c4-9d602004e338","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1487","type":"CtReturnImpl","sourcecode":"return 7"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:101","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[515,2,3],"tindex":"f1ca015c-dade-11e4-a0c4-4b704fc7837e","variableMapping":{"keys":"keys","i":"i","child":"i"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:173","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][int]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:133","type":"CtAssignmentImpl","sourcecode":"float[][int] = ((float)(double))"},"status":-1},{"failures":[],"tindex":"f1ca015d-dade-11e4-a0c4-6da8ec7b3838","variableMapping":{"numTiles":"com.graphhopper.routing.util.PriorityWeighting.KEY"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:107","type":"CtIfImpl","sourcecode":"if (int < 1)\n    throw new java.lang.IllegalArgumentException((\"Region of location index must be at least 1 but was \" + int));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:298","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    int int = 0;\n    if (long != 0)\n        int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)));\n    \n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setLong(long, com.graphhopper.routing.util.PriorityWeighting.int, com.graphhopper.routing.util.BikeCommonFlagEncoder.handlePriority(com.graphhopper.reader.OSMWay, int));\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, false);\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.handleSpeed(com.graphhopper.reader.OSMWay, double, long);\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.handleBikeRelated(com.graphhopper.reader.OSMWay, long, (long > (com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())));\n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"track\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"primary\"));\n    long |= long;\n}"},"status":-2},{"failures":[],"tindex":"f1ca015e-dade-11e4-a0c4-45650aff2ddd","variableMapping":{"flags":"nodeBitMask","mask":"nodeBitMask"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedValue:94","type":"CtOperatorAssignmentImpl","sourcecode":"long &= long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:534","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= int"},"status":0},{"failures":[],"tindex":"f1ca015f-dade-11e4-a0c4-6d8df284d5e8","variableMapping":{"edgeId":"hash","nextEdge":"hash"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:762","type":"CtAssignmentImpl","sourcecode":"this.int = this.int = int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:343","type":"CtAssignmentImpl","sourcecode":"int = (61 * int) + ((int)(this.long))"},"status":0},{"failures":[],"tindex":"f1ca0160-dade-11e4-a0c4-45007fde340d","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:170","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:58","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeSkipIterState.getSkippedEdge1()"},"status":-2},{"failures":[146,155,156,162,170,171,232,241,242,248,256,257,273,282,283,289,297,298,313,322,323,329,337,338,397],"tindex":"f1ca0161-dade-11e4-a0c4-af02324d664c","variableMapping":{"E_ADDITIONAL":"mSize"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1455","type":"CtAssignmentImpl","sourcecode":"int = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:202","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[],"tindex":"f1ca0162-dade-11e4-a0c4-c9c70f13b7df","variableMapping":{"directionBitMask":"directionBitMask","blockByDefault":"locked"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:229","type":"CtIfImpl","sourcecode":"if (boolean)\n    return long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:220","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.List<java.lang.String>) {\n    if ((!boolean) && (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.HashSet<java.lang.String>)))\n        return 0;\n    \n    if (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.HashSet<java.lang.String>))\n        return long;\n    \n}"},"status":0},{"failures":[],"tindex":"f1ca0163-dade-11e4-a0c4-09d0ea8a663d","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:334","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.LevelGraphStorage.this.getWeight(this)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:160","type":"CtReturnImpl","sourcecode":"return java.lang.Integer"},"status":-2},{"failures":[],"tindex":"f1ca0164-dade-11e4-a0c4-174008bf6a10","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:161","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:273","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"status":-2},{"failures":[104],"tindex":"f1ca2875-dade-11e4-a0c4-d541186a731b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:214","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.FlagEncoder.int)) {\n    double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long);\n    double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n    double = double * double;\n    double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n    double = double * double;\n    double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n    long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n} "},"status":-1},{"failureDictionary":{"com.graphhopper.storage.LevelGraphStorageTest.testCopyTo":169,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":473,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":481,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":55,"com.graphhopper.storage.LevelGraphStorageTest.testCannotBeLoadedViaDifferentClass":112,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":225,"com.graphhopper.GraphHopperAPITest.testNoLoad":499,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":231,"com.graphhopper.reader.OSMReaderTest.testFerry":80,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":361,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":362,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":56,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":400,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testMoreReal":192,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":121,"com.graphhopper.storage.LevelGraphStorageTest.testSetNodes":180,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":437,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":440,"com.graphhopper.storage.MMapDataAccessTest.testSegments":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":252,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":321,"com.graphhopper.coll.CompressedArrayTest.testCompress":46,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":406,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":305,"com.graphhopper.storage.LevelGraphStorageTest.testPriosWhileDeleting":140,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":452,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":250,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":65,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSortHighLevelFirst":189,"com.graphhopper.storage.SynchedDAWrapperTest.testBoundsCheck":17,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":457,"com.graphhopper.GraphHopperTest.testPrepare":122,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":262,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":472,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":288,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":448,"com.graphhopper.coll.IntDoubleBinHeapTest.testSpreading":3,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":365,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":109,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":355,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":407,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":360,"com.graphhopper.storage.LevelGraphStorageTest.internalDisconnect":142,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex":39,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":1,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":134,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":132,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":460,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":281,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":465,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":205,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":100,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":345,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":69,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":493,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat_withTurnCostEntries":118,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":52,"com.graphhopper.storage.LevelGraphStorageTest.testDetachEdge":144,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":2,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":459,"com.graphhopper.GraphHopperTest.testLoadOSM":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":209,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":206,"com.graphhopper.routing.util.EncodingManagerTest.testEncoderAcceptNoException":442,"com.graphhopper.reader.OSMReaderTest.testSort":125,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxAndMinSpeed":376,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":130,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":396,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":120,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":506,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":300,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":115,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":50,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":263,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":487,"com.graphhopper.storage.RAMDataAccessTest.testHeader":511,"com.graphhopper.routing.DijkstraTest.initializationError":478,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":341,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":505,"com.graphhopper.storage.LevelGraphStorageTest.testBounds":168,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":278,"com.graphhopper.storage.LevelGraphStorageTest.testPrios":102,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":450,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":26,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":304,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":316,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":428,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteAndOptimize":154,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":311,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":392,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testMaxAndMinSpeed":390,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSnappedPointAndGeometry":195,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":285,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraph":188,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":469,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testEdgeFilter":194,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":492,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":239,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":463,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteNodeForUnidir":146,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":462,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":324,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":490,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":314,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":330,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes":160,"com.graphhopper.storage.LevelGraphStorageTest.testSave_and_fileFormat":113,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode2":162,"com.graphhopper.coll.CompressedArrayTest.testCompress2":45,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":290,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":379,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":223,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":66,"com.graphhopper.GraphHopperAPITest.testLoad":497,"com.graphhopper.storage.LevelGraphStorageTest.testNoCreateCalled":143,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":419,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":282,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":273,"com.graphhopper.storage.LevelGraphStorageTest.testClone":148,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":500,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":103,"com.graphhopper.reader.OSMReaderTest.testBarriers":126,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":312,"com.graphhopper.storage.UnsafeDataAccessTest.testSegments":25,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraphBug":187,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":429,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":235,"com.graphhopper.util.GHUtilityTest.testCopy":350,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":464,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testDifferentVehicles":202,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":387,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":89,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":227,"com.graphhopper.storage.RAMDataAccessTest.testLoadClose":512,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":403,"com.graphhopper.routing.PathTest.testFindInstruction":445,"com.graphhopper.storage.LevelGraphStorageTest.testPropertiesWithNoInit":165,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":313,"com.graphhopper.coll.IntDoubleBinHeapTest.testBasic":515,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":94,"com.graphhopper.util.EdgeSkipIteratorTest.testUpdateFlags":358,"com.graphhopper.storage.LevelGraphStorageTest.testInfinityWeight":176,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":224,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":427,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":301,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":286,"com.graphhopper.storage.RAMDataAccessTest.testSegmentSize":30,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":339,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":348,"com.graphhopper.storage.LevelGraphStorageTest.testEnsureSize":5,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":325,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":454,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":435,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":72,"com.graphhopper.routing.DijkstraBidirectionRefTest.initializationError":479,"com.graphhopper.storage.LevelGraphStorageTest.testFlags":150,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":236,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":269,"com.graphhopper.storage.MMapDataAccessTest.testTrimTo":11,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":504,"com.graphhopper.util.InstructionListTest.testWayList2":357,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":439,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":258,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":210,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":306,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":516,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":317,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":366,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":344,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":364,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":116,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":424,"com.graphhopper.storage.LevelGraphStorageTest.testFootMix":152,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":18,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":367,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":244,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":322,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":181,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBug1":108,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":272,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":127,"com.graphhopper.routing.AStarTest.initializationError":446,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":474,"com.graphhopper.coll.OSMIDMapTest.testGet":514,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":320,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":95,"com.graphhopper.routing.PathBidirRefTest.testExtract":476,"com.graphhopper.storage.LevelGraphStorageTest.testEnabledElevation":164,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":369,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints120":197,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":43,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":257,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":347,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":256,"com.graphhopper.storage.RAMDataAccessTest.testSegments":32,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":368,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":215,"com.graphhopper.util.GHUtilityTest.testSort2":349,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":470,"com.graphhopper.reader.OSMReaderTest.testMain":124,"com.graphhopper.storage.LevelGraphStorageTest.testDoThrowExceptionIfDimDoesNotMatch":114,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":412,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":329,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":370,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":53,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":86,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testGrid":198,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":57,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectional":167,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":260,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":308,"com.graphhopper.storage.LevelGraphStorageTest.test8BytesFlags":63,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdgesWithDelete":158,"com.graphhopper.storage.LevelGraphStorageTest.testDirectional":179,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete":155,"com.graphhopper.routing.QueryGraphTest.testIterationBug_163":484,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":432,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":334,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":135,"com.graphhopper.storage.LevelGraphStorageTest.testAddLocation":161,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":62,"com.graphhopper.storage.StorablePropertiesTest.testStore":117,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":29,"com.graphhopper.storage.GraphHopperStorageTest.testClone":275,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":307,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":259,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":92,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":58,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":284,"com.graphhopper.storage.LevelGraphStorageTest.testDisconnectEdge":136,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":88,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeFilter":138,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":237,"com.graphhopper.routing.PathTest.testTime":74,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":386,"com.graphhopper.storage.LevelGraphStorageTest.testNameIndex":177,"com.graphhopper.storage.LevelGraphStorageTest.testEdges":149,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":418,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":185,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":212,"com.graphhopper.storage.LevelGraphStorageTest.testCheckFirstNode":166,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":249,"com.graphhopper.reader.OSMReaderTest.testRelation":494,"com.graphhopper.util.GHUtilityTest.testSortDirected":353,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxAndMinSpeed":438,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadClose":508,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":483,"com.graphhopper.GraphHopperTest.testFootOnly":99,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":399,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":91,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":182,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testReverseSpatialKey":40,"com.graphhopper.storage.MMapDataAccessTest.testSegmentSize":10,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":502,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":461,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":449,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":425,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":214,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":245,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":31,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":480,"com.graphhopper.routing.QueryGraphTest.testOneWay":489,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":213,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":49,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":402,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":204,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":47,"com.graphhopper.reader.OSMReaderTest.testWithBounds":131,"com.graphhopper.storage.RAMDataAccessTest.testLoadFlush":513,"com.graphhopper.storage.UnsafeDataAccessTest.testSegmentSize":23,"com.graphhopper.storage.RAMDataAccessTest.testBoundsCheck":28,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":97,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":242,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":343,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":395,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":485,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":251,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":423,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":501,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectionalEdgeFilter":145,"com.graphhopper.storage.LevelGraphStorageTest.testBigDataEdge":141,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":87,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":436,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":409,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":217,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":333,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":222,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":413,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":261,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":326,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":271,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":488,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":77,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":303,"com.graphhopper.util.InstructionListTest.testWayList":356,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":85,"com.graphhopper.GraphHopperAPITest.testDisconnected179":498,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":83,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":238,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":35,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":335,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":233,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":433,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":496,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":397,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":248,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":265,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":374,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":123,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":277,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":183,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":336,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":342,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":338,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":337,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":458,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":294,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":363,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":293,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":468,"com.graphhopper.routing.DijkstraOneToManyTest.initializationError":443,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":456,"com.graphhopper.storage.LevelGraphStorageTest.testPillarNodes":175,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":414,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":383,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":375,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeProperties":163,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":309,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":270,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":475,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testNoErrorOnEdgeCase_lastIndex":200,"com.graphhopper.storage.RAMIntDataAccessTest.testSegmentSize":14,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":378,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":267,"com.graphhopper.routing.PathTest.testWayList":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":264,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":384,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":90,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":241,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":79,"com.graphhopper.storage.SynchedDAWrapperTest.testHeader":507,"com.graphhopper.storage.LevelGraphStorageTest.testCreateDuplicateEdges":172,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":203,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":332,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":373,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":287,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":420,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":276,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":318,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex2":41,"com.graphhopper.storage.LevelGraphStorageTest.testDozendEdges":159,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex3":6,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":510,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadFlush":509,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph":196,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":430,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":380,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":9,"com.graphhopper.util.GHUtilityTest.testSort":351,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":208,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":254,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":84,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":372,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":401,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":274,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":310,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":346,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testRMin":190,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":226,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":186,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":218,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":16,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":60,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":486,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":104,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":216,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":27,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":36,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":382,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":68,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":422,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":327,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":0,"com.graphhopper.storage.LevelGraphStorageTest.testGetLocations":157,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":255,"com.graphhopper.routing.PathTest.testFound":444,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":37,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":73,"com.graphhopper.storage.SynchedDAWrapperTest.testSegmentSize":19,"com.graphhopper.storage.LevelGraphStorageTest.testCreateLocation":174,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseProperties":393,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeightIfAdvancedEncoder":137,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":371,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":359,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":323,"com.graphhopper.storage.UnsafeDataAccessTest.testSet_GetBytes":22,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":64,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":280,"com.graphhopper.util.InstructionListTest.testEmptyList":354,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":466,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":388,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph2":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":78,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":417,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":411,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testMaxAndMinSpeed":408,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":410,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":289,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":471,"com.graphhopper.reader.PrinctonReaderTest.testRead":495,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":302,"com.graphhopper.storage.MMapDataAccessTest.testLoadFlush":503,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testWayGeometry":193,"com.graphhopper.storage.LevelGraphStorageTest.testUpdateUnidirectional":153,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":319,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":48,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":331,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":230,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes2":147,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":328,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":405,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":431,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":385,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":426,"com.graphhopper.reader.OSMReaderTest.testFoot":81,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":253,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":491,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":44,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":51,"com.graphhopper.storage.LevelGraphStorageTest.testCopyProperties":178,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":398,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":7,"com.graphhopper.reader.OSMReaderTest.testOneWay":82,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":283,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":298,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":297,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":340,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":404,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":21,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":292,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":96,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":247,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":279,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":453,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":38,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":59,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":105,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":107,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":20,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":219,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":451,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":421,"com.graphhopper.storage.UnsafeDataAccessTest.testTrimTo":24,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testFindingWayGeometry":191,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":243,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":482,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":268,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":15,"com.graphhopper.routing.PathBidirRefTest.testExtract2":477,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":184,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":76,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":211,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":229,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":389,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":296,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":220,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":391,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":101,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":93,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":266,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":221,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":106,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":434,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":207,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":299,"com.graphhopper.util.GHUtilityTest.testEdgeStuff":352,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdges":151,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":415,"com.graphhopper.GraphHopperTest.testFootAndCar":98,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":291,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode":156,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":381,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints32":201,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":234,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":441,"com.graphhopper.storage.MMapDataAccessTest.testBoundsCheck":8,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":416,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":455,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":467,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":315,"com.graphhopper.GraphHopperTest.testPrepareOnly":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCorrectWeight":110,"com.graphhopper.GraphHopperTest.testVia":61,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":228,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":377,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":232,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":129,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeight":139,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":54,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":295,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":70,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":128,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":246,"com.graphhopper.routing.AStarBidirectionTest.initializationError":447,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":394,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeReturn":173,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete3":171,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete2":170,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":119}}]

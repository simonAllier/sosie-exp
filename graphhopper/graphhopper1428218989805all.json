[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366],"tindex":"8b0f6849-db65-11e4-b5c4-ed4dffa3e756","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:138","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.lang.String[]) {\n    java.lang.String = java.lang.String.trim().toLowerCase();\n    if (java.lang.String.isEmpty())\n        continue;\n    \n    java.lang.String java.lang.String = \"\";\n    if (java.lang.String.contains(\"|\")) {\n        java.lang.String = java.lang.String;\n        java.lang.String = java.lang.String.split(\"\\\\|\")[0];\n    } \n    com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder;\n    if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.CarFlagEncoder(java.lang.String);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.BikeFlagEncoder(java.lang.String);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(java.lang.String);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(java.lang.String);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\n    else\n        throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n    \n    java.util.List<com.graphhopper.routing.util.FlagEncoder>.add(com.graphhopper.routing.util.AbstractFlagEncoder);\n}"},"status":-1},{"failures":[],"tindex":"8b0f684a-db65-11e4-b5c4-afb53e879783","variableMapping":{"max":"java.lang.Double.POSITIVE_INFINITY"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.MiniPerfTest:75","type":"CtReturnImpl","sourcecode":"return (double) / 1000000.0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:55","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[],"tindex":"8b0f684b-db65-11e4-b5c4-59c370affaaa","variableMapping":{"i":"hash","list":"this"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:202","type":"CtInvocationImpl","sourcecode":"gnu.trove.list.TIntList.set(int, int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:344","type":"CtAssignmentImpl","sourcecode":"int = (61 * int) + (java.lang.Object.toString().hashCode())"},"status":-2},{"failures":[],"tindex":"8b0f684c-db65-11e4-b5c4-2fdd2c0b4c57","variableMapping":{"calcMean":"empty","eleCalcMean":"empty"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:75","type":"CtAssignmentImpl","sourcecode":"boolean = boolean"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:43","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"status":0},{"failures":[],"tindex":"8b0f684d-db65-11e4-b5c4-6f78404a2dd8","variableMapping":{"i":"endNode"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:189","type":"CtOperatorAssignmentImpl","sourcecode":"int /= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathNative:57","type":"CtAssignmentImpl","sourcecode":"int = int[][int]"},"status":-1},{"failures":[],"tindex":"8b0f8f5e-db65-11e4-b5c4-59ef2c64d6e1","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:334","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.LevelGraphStorage.this.getWeight(this)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:50","type":"CtReturnImpl","sourcecode":"return -double"},"status":-2},{"failures":[],"tindex":"8b0f8f5f-db65-11e4-b5c4-ab6b14b5c534","variableMapping":{"hash":"mask"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:177","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:64","type":"CtOperatorAssignmentImpl","sourcecode":"long &= ~(long)"},"status":-2},{"failures":[],"tindex":"8b0f8f60-db65-11e4-b5c4-c5ca8f6b9615","variableMapping":{"nodeB":"shift","edgeId":"shift","nodeA":"shift"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:512","type":"CtReturnImpl","sourcecode":"return int > int ? int + 1 : int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:139","type":"CtReturnImpl","sourcecode":"return int + (com.graphhopper.routing.util.EncodedDoubleValue.getBits())"},"status":-2},{"failures":[367],"tindex":"8b0f8f61-db65-11e4-b5c4-bb937d04ca1a","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareEncoder:58","type":"CtReturnImpl","sourcecode":"return ((long & (com.graphhopper.routing.ch.PrepareEncoder.long)) == (com.graphhopper.routing.ch.PrepareEncoder.long)) || ((long & (com.graphhopper.routing.ch.PrepareEncoder.long)) == (long & (com.graphhopper.routing.ch.PrepareEncoder.long)))"},"status":-1},{"failures":[224,246,258,273,286,307],"tindex":"8b0f8f62-db65-11e4-b5c4-99899d27d9bf","variableMapping":{"node":"node","directionBitMask":"directionBitMask","absoluteBarriers":"intendedValues"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:210","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMNode.hasTag(\"barrier\", java.util.HashSet<java.lang.String>))\n    return long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:220","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.List<java.lang.String>) {\n    if ((!boolean) && (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.HashSet<java.lang.String>)))\n        return 0;\n    \n    if (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.HashSet<java.lang.String>))\n        return long;\n    \n}"},"status":-1},{"failures":[],"tindex":"8b0f8f63-db65-11e4-b5c4-53ff35f38d2b","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:657","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.PriorityWeighting.com.graphhopper.routing.util.PriorityWeighting.isAssignableFrom(java.lang.Class<?>)"},"status":-2},{"failures":[],"tindex":"8b0f8f64-db65-11e4-b5c4-436be058f1a7","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:149","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"8b0f8f65-db65-11e4-b5c4-19af875f5d52","variableMapping":{"size":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED","hash":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:387","type":"CtAssignmentImpl","sourcecode":"int = (73 * int) + (this.int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:365","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int"},"status":-2},{"failures":[368,215],"tindex":"8b0f8f66-db65-11e4-b5c4-f1c2c8ed9c51","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:164","type":"CtAssignmentImpl","sourcecode":"int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue()"},"status":-1},{"failures":[],"tindex":"8b0f8f67-db65-11e4-b5c4-79627020b145","variableMapping":{"size":"acceptBit"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:132","type":"CtReturnImpl","sourcecode":"return (long) / 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:225","type":"CtReturnImpl","sourcecode":"return (long) | (long)"},"status":-2},{"failures":[],"tindex":"8b0f8f68-db65-11e4-b5c4-399d15f86d54","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:231","type":"CtReturnImpl","sourcecode":"return \"bike2\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:413","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    return java.lang.String;\nelse\n    return (java.lang.String + \", \") + java.lang.String;\n"},"status":-2},{"failures":[369,370],"tindex":"8b0f8f69-db65-11e4-b5c4-2d6f4b8a06d6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:522","type":"CtAssignmentImpl","sourcecode":"long = (1L << int) - 1"},"status":-1},{"failures":[],"tindex":"8b0f8f6a-db65-11e4-b5c4-6d1767021a35","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:171","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\")"},"status":-2},{"failures":[],"tindex":"8b0f8f6b-db65-11e4-b5c4-9b758ac4da64","variableMapping":{"newValue":"endNode","values":"parentNodes","index":"endNode"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:191","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathNative:57","type":"CtAssignmentImpl","sourcecode":"int = int[][int]"},"status":-1},{"failures":[],"tindex":"8b0fb67c-db65-11e4-b5c4-772dc7f7f55e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:218","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"status":0},{"failures":[371,372,361,362,363],"tindex":"8b0fb67d-db65-11e4-b5c4-89763488608e","variableMapping":{"tmp":"resultOrientation"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:138","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:77","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"8b0fb67e-db65-11e4-b5c4-35e486209f46","variableMapping":{"time":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Instruction:161","type":"CtReturnImpl","sourcecode":"return long + (this.long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:112","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[279],"tindex":"8b0fb67f-db65-11e4-b5c4-67636953aa32","variableMapping":{"lastTime":"encoded"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.StopWatch:59","type":"CtAssignmentImpl","sourcecode":"long = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:276","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int)"},"status":-1},{"failures":[],"tindex":"8b0fb680-db65-11e4-b5c4-f526ca331247","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:762","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed(com.graphhopper.reader.OSMWay)"},"status":-2},{"failures":[],"tindex":"8b0fb681-db65-11e4-b5c4-af4805858075","variableMapping":{"maxY":"key","deltaX":"key","stepX":"i","maxX":"key","deltaY":"key","stepY":"i","x":"size","y":"size"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:71","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double += double;\n    int += int;\n} else {\n    double += double;\n    int += int;\n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:211","type":"CtForImpl","sourcecode":"for (int = int ; (float[][(int / 2)]) > double ; int /= 2) {\n    int[][int] = int[][(int / 2)];\n    float[][int] = float[][(int / 2)];\n}"},"status":-2},{"failures":[],"tindex":"8b0fb682-db65-11e4-b5c4-e18df1e5f63e","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:176","type":"CtReturnImpl","sourcecode":"return \"mtb\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:774","type":"CtReturnImpl","sourcecode":"return ((((\"speedFactor=\" + (double)) + \"|speedBits=\") + (int)) + \"|turnCosts=\") + ((int) > 0)"},"status":-2},{"failures":[],"tindex":"8b0fb683-db65-11e4-b5c4-116c8d6a5013","variableMapping":{"relationCodeEncoder":"wayTypeEncoder","shift":"shift"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:210","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue = new com.graphhopper.routing.util.EncodedValue(\"RelationCode\" , int , 3 , 1 , 0 , 7)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:198","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue = new com.graphhopper.routing.util.EncodedValue(\"WayType\" , int , 2 , 1 , 0 , 3 , true)"},"status":0},{"failures":[],"tindex":"8b0fb684-db65-11e4-b5c4-a7b6a6f33e94","variableMapping":{"delNodes":"i","this":"g"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1144","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.inPlaceNodeRemove(int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:252","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphStorage.markNodeRemoved(gnu.trove.list.array.TIntArrayList.get(int))"},"status":-2},{"failures":[373,374,375,376,377,7,10,15,36,42,47,49,53,56,61,82,88,93,95,378,379,380,381,382,383,384,385,386,105,110,131,137,142,144,387,388,389,390,186,188,192,193,194,195,196,391,392,393,394,200,395,201,396,397,206,207,339,360,361,362,363],"tindex":"8b0fb685-db65-11e4-b5c4-659aa05972ba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:266","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int -= int;\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n    byte[] = byte[][][(int + 1)];\n    java.lang.System.java.lang.System.arraycopy(byte[], int, byte[], 0, int);\n} else {\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n}"},"status":-1},{"failures":[398,399],"tindex":"8b0fb686-db65-11e4-b5c4-3d8e3a553f0f","variableMapping":{"height":"index"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:415","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = int + \": \""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:435","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String.substring((int + 1))"},"status":-1},{"failures":[],"tindex":"8b0fb687-db65-11e4-b5c4-9f6788a1e734","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:594","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return (long & (long)) == 0 ? 0 : java.lang.Double.double;\n"},"status":-2},{"failures":[195,369,370,222,226,230,233,239,241,243,248,253,257,400,401,284,285,288,293,297,300,302,304,309,314,318],"tindex":"8b0fb688-db65-11e4-b5c4-279a33598292","variableMapping":{"flags":"flags","mask":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:64","type":"CtOperatorAssignmentImpl","sourcecode":"long &= ~(long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:95","type":"CtOperatorAssignmentImpl","sourcecode":"long >>= long"},"status":-1},{"failures":[402,187,188,189,192,193,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,344,346,347,348,349,350,351,352,354,355,356,357],"tindex":"8b0fdd99-db65-11e4-b5c4-2f176bdff8ba","variableMapping":{"red":"toSize"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:160","type":"CtOperatorAssignmentImpl","sourcecode":"int += 50"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:257","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[0,1,187,188,190,191,192,193,194],"tindex":"8b0fdd9a-db65-11e4-b5c4-258babe33597","variableMapping":{"nodes":"maxTurnCosts","adj":"maxTurnCosts","base":"maxTurnCosts"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.LevelEdgeFilter:45","type":"CtIfImpl","sourcecode":"if ((int >= (int)) || (int >= (int)))\n    return true;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:780","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.TurnWeighting.com.graphhopper.routing.util.TurnWeighting.isAssignableFrom(java.lang.Class<?>))\n    return (int) > 0;\n"},"status":-1},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,99,419,420,378,421,379,422,423,424,425,426,427,428,429,430,431,100,432,101,433,434,435,380,436,381,437,438,439,440,441,442,443,444,445,446,102,447,382,383,384,385,448,449,450,451,452,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,159,174,186,187,188,189,190,191,192,193,194,195,196,453,197,198,398,454,391,455,456,392,393,457,458,459,460,461,462,368,463,394,464,465,200,395,466,201,396,467,468,397,202,203,206,207,213,214,215,216,217,218,235,236,275,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,346,347,348,349,350,351,352,353,354,355,356,357,469,470,358,359,360,361,362,363,364,365,471,472,366,473,474],"tindex":"8b0fdd9b-db65-11e4-b5c4-330a16ce486c","variableMapping":{"segments":"segments"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:294","type":"CtAssignmentImpl","sourcecode":"int[][] = new int[0][]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:119","type":"CtAssignmentImpl","sourcecode":"int[][] = int[][]"},"status":-1},{"failures":[237,268,298],"tindex":"8b0fdd9c-db65-11e4-b5c4-ed1a625d7dc5","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:580","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"8b0fdd9d-db65-11e4-b5c4-f56881128725","variableMapping":{"strLen":"bufferIndex","bLen":"index"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtilBig:91","type":"CtIfImpl","sourcecode":"if ((int % 8) != 0)\n    int++;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:266","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int -= int;\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n    byte[] = byte[][][(int + 1)];\n    java.lang.System.java.lang.System.arraycopy(byte[], int, byte[], 0, int);\n} else {\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n}"},"status":0},{"failures":[],"tindex":"8b0fdd9e-db65-11e4-b5c4-4376dc4d1791","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:610","type":"CtIfImpl","sourcecode":"if ((int) == 1) {\n    if (double != 0)\n        throw new java.lang.IllegalArgumentException(\"Only restrictions are supported\");\n    \n    return boolean ? long : 0;\n} "},"status":-1},{"failures":[],"tindex":"8b0fdd9f-db65-11e4-b5c4-5d7806b8e6d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:53","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.FlagEncoder.getReverseSpeed(com.graphhopper.util.EdgeIteratorState.getFlags())"},"status":0},{"failures":[16,17,24,26,39,44,47,51,62,63,70,72,85,90,93,97,111,112,119,121,134,139,142,146,149,150,157,159,172,177,180,184,188,197,198,454,368,200,201,214,216,271,281,319,320,332,333,342,343,346,347,352,353,354,357,366],"tindex":"8b0fdda0-db65-11e4-b5c4-fb38dcc8cd79","variableMapping":{"size":"directionBitMask"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:132","type":"CtReturnImpl","sourcecode":"return (long) / 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:258","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"status":-1},{"failures":[],"tindex":"8b0fdda1-db65-11e4-b5c4-eb60307d51d8","variableMapping":{"latSize":"to","size":"skippedEdge2","lonSize":"from"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:147","type":"CtIfImpl","sourcecode":"if (((int) * (int)) < int)\n    (int)++;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:69","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    boolean boolean = com.graphhopper.util.EdgeSkipIterState == null;\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, false);\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    else\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, true);\n} else {\n    com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    boolean boolean = com.graphhopper.util.EdgeSkipIterState == null;\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, true);\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    else\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, false);\n}"},"status":0},{"failures":[475,476,477,478,479,480,481,482,483,484],"tindex":"8b1004b2-db65-11e4-b5c4-8de6eedac447","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:237","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 1"},"status":-1},{"failures":[],"tindex":"8b1004b3-db65-11e4-b5c4-59ce4a3a424f","variableMapping":{"nodeThis":"removed","nextEdgeOther":"removed","nodeOther":"removed","nextEdge":"removed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:397","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int int = int;\n    int = int;\n    int = int;\n    int = int;\n    int = int;\n    int = int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:251","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (gnu.trove.list.array.TIntArrayList.size()) ; int++) {\n    com.graphhopper.storage.GraphStorage.markNodeRemoved(gnu.trove.list.array.TIntArrayList.get(int));\n    int++;\n}"},"status":0},{"failures":[485],"tindex":"8b1004b4-db65-11e4-b5c4-8592e00adafc","variableMapping":{"flags":"flags","scDirMask":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:254","type":"CtLocalVariableImpl","sourcecode":"long long = long & (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:597","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.routing.util.EncodedValue.getValue(long)"},"status":-1},{"failures":[260],"tindex":"8b1004b5-db65-11e4-b5c4-8f11721505bf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:279","type":"CtIfImpl","sourcecode":"if (double < 0)\n    throw new java.lang.IllegalArgumentException((((\"Speed cannot be negative: \" + double) + \", flags:\") + (com.graphhopper.util.BitUtil.com.graphhopper.util.BitUtil.toBitString(long))));\n"},"status":-1},{"failures":[222,230,241,243,253,284,293,302,304,314],"tindex":"8b1004b6-db65-11e4-b5c4-8575fd25cf3a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:396","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Translation.tr(\"off_bike\")"},"status":-1},{"failures":[],"tindex":"8b1004b7-db65-11e4-b5c4-7d211b2467a8","variableMapping":{"precision":"minLonTmp","lat":"midLon"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:132","type":"CtAssignmentImpl","sourcecode":"double = ((int)((double * (double)))) / (double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:191","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":0},{"failures":[],"tindex":"8b1004b8-db65-11e4-b5c4-a38fe7379d98","variableMapping":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"endNode","nextEdge":"tmpEdge"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:794","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.util.EdgeIterator.int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:43","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.Path4CH.expandEdge(((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int))), false)"},"status":-2},{"failures":[222,241,284,302],"tindex":"8b1004b9-db65-11e4-b5c4-178e836c0d14","variableMapping":{"way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:303","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\", \"\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:482","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"status":-1},{"failures":[],"tindex":"8b1004ba-db65-11e4-b5c4-87c4fe0bfd1a","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:480","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"surface\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:130","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"status":-2},{"failures":[],"tindex":"8b1004bb-db65-11e4-b5c4-b797a97a6733","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:262","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-2},{"failures":[],"tindex":"8b1004bc-db65-11e4-b5c4-99b4c7b7f7fc","variableMapping":{"finishedTo":"defaultB","finishedFrom":"defaultB"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AStarBidirection:179","type":"CtIfImpl","sourcecode":"if ((boolean) || (boolean))\n    return true;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:734","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    return boolean;\n"},"status":0},{"failures":[],"tindex":"8b1004bd-db65-11e4-b5c4-bb8a447c4973","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.search.NameIndex:73","type":"CtReturnImpl","sourcecode":"return 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:495","type":"CtIfImpl","sourcecode":"if (double == 0) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else if (double > 1) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n}"},"status":-2},{"failures":[188,462,486,260,265,266,363],"tindex":"8b1004be-db65-11e4-b5c4-2f48ed582f2e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:227","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, true)"},"status":-1},{"failures":[222,238,299],"tindex":"8b1004bf-db65-11e4-b5c4-1b8f85acc80c","variableMapping":{"latSize":"speed","size":"speed","lonSize":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:147","type":"CtIfImpl","sourcecode":"if (((int) * (int)) < int)\n    (int)++;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:338","type":"CtIfImpl","sourcecode":"if (java.lang.Integer != null)\n    int = java.lang.Integer;\n"},"status":-1},{"failures":[],"tindex":"8b1004c0-db65-11e4-b5c4-75e6185859d2","variableMapping":{"intIndex":"noOfStates","len":"noOfStates"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:521","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    return int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TraversalMode:84","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if ((int) == 1)\n        return com.graphhopper.util.EdgeIteratorState.getEdge();\n    \n    return com.graphhopper.util.GHUtility.com.graphhopper.util.GHUtility.createEdgeKey(com.graphhopper.util.EdgeIteratorState.getAdjNode(), com.graphhopper.util.EdgeIteratorState.getBaseNode(), com.graphhopper.util.EdgeIteratorState.getEdge(), boolean);\n} "},"status":0},{"failures":[],"tindex":"8b102bd1-db65-11e4-b5c4-bf5f1d060cb4","variableMapping":{"high":"allowed","len":"allowed","start":"allowed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:117","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:294","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isAccept(long)))\n    return 0;\n"},"status":0},{"failures":[487,488,349,350,361],"tindex":"8b102bd2-db65-11e4-b5c4-1f6ae26067db","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.Edge:44","type":"CtReturnImpl","sourcecode":"return java.lang.Double.java.lang.Double.compare(double, com.graphhopper.storage.Edge.double)"},"status":-1},{"failures":[3,8],"tindex":"8b102bd3-db65-11e4-b5c4-536f286f9803","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:64","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.ensureNodeIndex(int)"},"status":-1},{"failures":[222],"tindex":"8b102bd4-db65-11e4-b5c4-e7c10be8cd4c","variableMapping":{"str":"trackType"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:181","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) > 64)\n    throw new java.lang.UnsupportedOperationException((\"Strings needs to fit into a \\'long\\' but length was \" + (java.lang.String.length())));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:133","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || (java.lang.String.startsWith(\"grade\")))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[346,348,350,351,352,354,356],"tindex":"8b102bd5-db65-11e4-b5c4-ff1167614dee","variableMapping":{"com.graphhopper.routing.DijkstraOneToMany.NOT_FOUND":"size"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:120","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.DijkstraOneToMany.int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:90","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    return int[][1];\n} else {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n}"},"status":-1},{"failures":[222,230,241,253,284,285,293,302,314],"tindex":"8b102bd6-db65-11e4-b5c4-7fe14e9254a4","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:326","type":"CtReturnImpl","sourcecode":"return \"motorcycle\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:409","type":"CtReturnImpl","sourcecode":"return \"\""},"status":-1},{"failures":[],"tindex":"8b102bd7-db65-11e4-b5c4-298a70169abb","variableMapping":{"dataAccessType":"type","this":"type","graphDATypeStr":"name"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:483","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType.fromString(java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:81","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, com.graphhopper.storage.DAType>.put(java.lang.String, com.graphhopper.storage.DAType)"},"status":0},{"failures":[399],"tindex":"8b1052e8-db65-11e4-b5c4-a166ff741f4c","variableMapping":{"baseUrl":"minStr"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:111","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || (java.lang.String.isEmpty()))\n    throw new java.lang.IllegalArgumentException(\"baseUrl cannot be empty\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:438","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    java.lang.String java.lang.String = java.lang.String;\n    java.lang.String = java.lang.String.substring(0, int);\n    java.lang.String = java.lang.String.substring((int + 1));\n    int = (java.lang.Integer.(java.lang.Integer.parseInt(java.lang.String)) * 60) * 24;\n} "},"status":-1},{"failures":[2,13,16,17,24,39,45,47,51,432,188,320,332,342,343,346,347,352,353,354,357],"tindex":"8b1052e9-db65-11e4-b5c4-158c6d1f900b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:96","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.LevelGraphStorage.EdgeSkipIteratorImpl.setBaseNode(int)"},"status":-1},{"failures":[369,239,242,243,257,300,303,304,318],"tindex":"8b1052ea-db65-11e4-b5c4-7f2036f5ba7f","variableMapping":{"shift":"encoded","flags":"encoded"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedValue:95","type":"CtOperatorAssignmentImpl","sourcecode":"long >>= long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:582","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double)"},"status":-1},{"failures":[242,303],"tindex":"8b1052eb-db65-11e4-b5c4-6953dcd7f202","variableMapping":{"angle":"speed","com.graphhopper.util.AngleCalc.PI3_4":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:40","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:308","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, false)"},"status":-1},{"failures":[],"tindex":"8b1052ec-db65-11e4-b5c4-b9a0a9fcad61","variableMapping":{"r":"durationInHours","x":"val","absY":"shortTripsSpeed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:43","type":"CtAssignmentImpl","sourcecode":"double = (double - double) / (double + double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:486","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.java.lang.Math.round(((double / double) / 1.4))"},"status":0},{"failures":[],"tindex":"8b1052ed-db65-11e4-b5c4-af2f6fdb59f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:48","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue.this(java.lang.String, int, int, double, long, int, true)"},"status":-2},{"failures":[],"tindex":"8b1052ee-db65-11e4-b5c4-d58aca845408","variableMapping":{"intLow":"segmentSizeInBytes","intHigh":"segmentSizeInBytes"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:280","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | (int & 4294967295L)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:310","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.RAMDataAccess.((long)(getSegments())) * (int)"},"status":-2},{"failures":[],"tindex":"8b1079ff-db65-11e4-b5c4-d931470c8998","variableMapping":{"tmpNode":"allBits"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:797","type":"CtReturnImpl","sourcecode":"return ((int)(int))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:107","type":"CtReturnImpl","sourcecode":"return int"},"status":0},{"failures":[],"tindex":"8b107a00-db65-11e4-b5c4-a73e16a558af","variableMapping":{"val":"start","com.graphhopper.coll.SparseIntIntArray.DELETED":"start","keys":"nodeLowLink","values":"nodeIndex","i":"index","o":"start"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseIntIntArray:134","type":"CtIfImpl","sourcecode":"if (int != (com.graphhopper.coll.SparseIntIntArray.int)) {\n    if (int != int) {\n        int[][int] = int[][int];\n        int[][int] = int;\n    } \n    int++;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:70","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.isStart()) {\n    int[][int] = int;\n    int[][int] = int;\n    (int)++;\n    gnu.trove.stack.array.TIntArrayStack.push(int);\n    com.graphhopper.coll.GHBitSetImpl.set(int);\n    com.graphhopper.util.EdgeIterator = com.graphhopper.storage.GraphStorage.createEdgeExplorer(com.graphhopper.routing.util.EdgeFilter).setBaseNode(int);\n} else {\n    com.graphhopper.util.EdgeIterator = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.util.EdgeIterator;\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n}"},"status":-2},{"failures":[],"tindex":"8b107a01-db65-11e4-b5c4-43ef221e53f2","variableMapping":{"tt":"footTag"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:184","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.equals(\"grade1\"))))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:195","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || (\"yes\".equals(java.lang.String)))\n    return (long) | (long);\n"},"status":0},{"failures":[],"tindex":"8b107a02-db65-11e4-b5c4-834243918cc3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:342","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"status":-2},{"failures":[475,476,478,479,480,481,482,483,484],"tindex":"8b107a03-db65-11e4-b5c4-d144b81297ae","variableMapping":{"eleDelta":"midLat","decEleSum":"lon","fullDist2D":"midLon","decDist2DSum":"midLon"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:167","type":"CtIfImpl","sourcecode":"if (double < (-0.1)) {\n    double = -double;\n    double = double;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:220","type":"CtWhileImpl","sourcecode":"while (true) {\n    if ((long & long) != 0) {\n        double += double;\n    } \n    double /= 2;\n    long >>>= 1;\n    if ((long & long) != 0) {\n        double += double;\n    } \n    double /= 2;\n    if (long > 1) {\n        long >>>= 1;\n    } else {\n        break;\n    }\n}"},"status":-1},{"failures":[],"tindex":"8b107a04-db65-11e4-b5c4-1134796b7d2a","variableMapping":{"name":"key"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:161","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String + \".tif\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:717","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.routing.util.AbstractFlagEncoder.com.graphhopper.routing.util.AbstractFlagEncoder.getStr(java.lang.String, java.lang.String)"},"status":-2},{"failures":[],"tindex":"8b107a05-db65-11e4-b5c4-39093f973a52","variableMapping":{"directionBitMask":"capacity","shift":"segmentSizeInBytes"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:158","type":"CtAssignmentImpl","sourcecode":"long = 3L << int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:324","type":"CtAssignmentImpl","sourcecode":"long = int"},"status":0},{"failures":[17,28,30,34,35,42,43,63,74,76,80,81,88,89,112,123,125,129,130,137,138,150,161,163,167,168,175,176,213,216],"tindex":"8b107a06-db65-11e4-b5c4-29245d783316","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:397","type":"CtWhileImpl","sourcecode":"while ((int - int) > 1) {\n    int = (int + int) / 2;\n    if ((int[][int]) < int) {\n        int = int;\n    } else {\n        int = int;\n    }\n}"},"status":-1},{"failures":[0,1,489,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,414,415,416,417,490,418,99,419,420,378,421,379,422,423,424,425,426,427,428,429,430,491,431,100,432,101,433,434,435,380,436,381,437,438,439,440,441,442,443,444,445,492,446,102,447,382,383,384,493,385,448,449,450,451,494,452,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,495,193,194,195,196,496,453,197,198,398,454,391,455,456,392,393,457,458,199,459,460,461,462,497,368,463,394,464,465,200,395,466,201,396,467,468,397,498,202,203,499,500,501,204,205,206,207,208,369,485,502,370,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,486,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,503,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,469,470,358,359,360,361,362,363,364,365,471,472,366,473,504,474],"tindex":"8b10a117-db65-11e4-b5c4-15d2b077f9f2","variableMapping":{"locs":"nextRelBit"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:180","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalStateException(\"check your graph - it is empty!\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:202","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.setRelBitMask((int - (int)), int)"},"status":-1},{"failures":[221,249,289,310],"tindex":"8b10a118-db65-11e4-b5c4-bd1a35aa9b3d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:457","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.HashSet<java.lang.String>))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[475,476,477,478,479,480,481,483,484],"tindex":"8b10a119-db65-11e4-b5c4-cdcba0fa883a","variableMapping":{"tmp":"midLat"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:138","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:224","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":-1},{"failures":[188,189,192,195,319,320,321,322,323,324,325,326,327,328,329,331,332,333,334,335,336,338,339,340,341,342,343,346,352,353,357],"tindex":"8b10a11a-db65-11e4-b5c4-cb6d799494a0","variableMapping":{"includeWay":"millis"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:347","type":"CtIfImpl","sourcecode":"if (long == 0)\n    return ;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:48","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.EdgeSkipIterState.isShortcut())) {\n    double double = com.graphhopper.util.EdgeSkipIterState.getDistance();\n    double += double;\n    long long = com.graphhopper.util.EdgeSkipIterState.getFlags();\n    long += com.graphhopper.routing.Path.calcMillis(double, long, boolean);\n    com.graphhopper.routing.Path.addEdge(com.graphhopper.util.EdgeSkipIterState.getEdge());\n    return ;\n} "},"status":-1},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,99,419,420,378,421,379,422,423,424,425,426,427,428,429,430,431,100,432,101,433,434,435,380,436,381,437,438,439,440,441,442,443,444,445,446,102,505,447,382,383,384,385,448,449,450,451,452,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,159,174,186,187,188,189,190,191,192,193,194,195,196,453,197,198,398,454,391,455,456,392,393,457,458,459,460,461,462,368,463,463,394,394,464,464,465,465,200,200,395,395,466,466,201,201,396,396,467,467,468,468,397,397,202,203,204,205,206,207,213,214,215,216,217,218,235,236,275,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,346,347,348,349,350,351,352,353,354,355,356,357,469,470,358,359,360,361,362,363,364,365,471,472,366,473,474],"tindex":"8b10a11b-db65-11e4-b5c4-83bee64975f8","variableMapping":{"segNumber":"i","segments":"newSegs"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:337","type":"CtAssignmentImpl","sourcecode":"int[][][int] = null"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:117","type":"CtAssignmentImpl","sourcecode":"int[][][int] = new int[1 << (int)]"},"status":-1},{"failures":[206,360],"tindex":"8b10a11c-db65-11e4-b5c4-975a723c45c5","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:98","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"8b10a11d-db65-11e4-b5c4-9df18dfcf2b6","variableMapping":{"maxY":"lastPrio","deltaX":"lastPrio","stepX":"i","maxX":"lastPrio","deltaY":"lastPrio","stepY":"child","x":"child","y":"i"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:71","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double += double;\n    int += int;\n} else {\n    double += double;\n    int += int;\n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:116","type":"CtForImpl","sourcecode":"for (int = 1 ; (int * 2) <= (int) ; int = int) {\n    int = int * 2;\n    if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n        int++;\n    } \n    if (double > (float[][int])) {\n        int[][int] = int[][int];\n        float[][int] = float[][int];\n    } else {\n        break;\n    }\n}"},"status":-2},{"failures":[263],"tindex":"8b10a11e-db65-11e4-b5c4-1d2edb605647","variableMapping":{"distance":"shortTripsSpeed","speed":"shortTripsSpeed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:226","type":"CtReturnImpl","sourcecode":"return ((long)((double * 3600) / double))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:505","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double)"},"status":-1},{"failures":[],"tindex":"8b10a11f-db65-11e4-b5c4-51df79007e5a","variableMapping":{"y":"speedVal","angle":"speedVal"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:48","type":"CtIfImpl","sourcecode":"if (double < 0.0)\n    return -double;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:295","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[206,207,371,372,361,362,363],"tindex":"8b10a120-db65-11e4-b5c4-17a5221c9d46","variableMapping":{"dX":"resultOrientation","dY":"resultOrientation"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:86","type":"CtReturnImpl","sourcecode":"return double"},"status":-1},{"failures":[],"tindex":"8b10a121-db65-11e4-b5c4-45a72f25a49c","variableMapping":{"val":"currDistToGoal"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:114","type":"CtReturnImpl","sourcecode":"return double - ((int)(double))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.ShortestWeighting:33","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[186,188,189,190,191,192,193,194,195,196,454,391,455,456,392,393,457,458,459,460,461,368,215],"tindex":"8b10c832-db65-11e4-b5c4-5d583c63eb44","variableMapping":{"preparation":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1021","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.PrepareRoutingSubnetworks.doWork()"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:79","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.PrepareRoutingSubnetworks.keepLargeNetworks(java.util.Map<java.lang.Integer, java.lang.Integer>)"},"status":-1},{"failures":[],"tindex":"8b10c833-db65-11e4-b5c4-194f0eb69b14","variableMapping":{"pos":"value","mSize":"index"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseArray:367","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:233","type":"CtAssignmentImpl","sourcecode":"int[][][int][int] = int"},"status":0},{"failures":[],"tindex":"8b10c834-db65-11e4-b5c4-7de74fa5c6ad","variableMapping":{"size":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:87","type":"CtOperatorAssignmentImpl","sourcecode":"long += 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:86","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, com.graphhopper.routing.util.EncodedDoubleValue.getDoubleValue(long))"},"status":0},{"failures":[506,507,320,322,325,326,328,332,334,335,337,338,339,340,341,342,352,356],"tindex":"8b10c835-db65-11e4-b5c4-bfe0ca6c1ce0","variableMapping":{"edgeId":"i","nextEdge":"i"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:903","type":"CtIfImpl","sourcecode":"if ((int) == (int))\n    throw new java.lang.IllegalStateException(\"call next before detaching\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:160","type":"CtIfImpl","sourcecode":"if (double > (float[][int])) {\n    while ((int * 2) <= (int)) {\n        int int = int * 2;\n        if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n            int++;\n        } \n        if (double > (float[][int])) {\n            int[][int] = int[][int];\n            float[][int] = float[][int];\n            int = int;\n        } else {\n            break;\n        }\n    }\n    int[][int] = int;\n    float[][int] = ((float)(double));\n} else {\n    while ((float[][(int / 2)]) > double) {\n        int[][int] = int[][(int / 2)];\n        float[][int] = float[][(int / 2)];\n        int /= 2;\n    }\n    int[][int] = int;\n    float[][int] = ((float)(double));\n}"},"status":-1},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,99,419,420,378,421,379,422,423,424,425,426,427,428,429,430,431,100,432,101,433,434,435,380,436,381,437,438,439,440,441,442,443,444,445,446,102,447,382,383,384,385,448,449,450,451,452,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,159,174,186,187,188,189,190,191,192,193,194,195,196,453,197,198,398,454,391,455,456,392,393,457,458,459,460,461,462,368,463,394,464,465,200,395,466,201,396,467,468,397,202,203,206,207,213,214,215,216,217,218,235,236,275,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,346,347,348,349,350,351,352,353,354,355,356,357,469,470,358,359,360,361,362,363,364,365,471,472,366,473,474],"tindex":"8b10c836-db65-11e4-b5c4-8ff7c8d7321f","variableMapping":{"segments":"segments"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:294","type":"CtAssignmentImpl","sourcecode":"int[][] = new int[0][]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:119","type":"CtAssignmentImpl","sourcecode":"int[][] = int[][]"},"status":-1},{"failures":[],"tindex":"8b10c837-db65-11e4-b5c4-b17a868e8d13","variableMapping":{"length":"bufferIndex","segments":"segments"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:316","type":"CtReturnImpl","sourcecode":"return byte[][].int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:234","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.BitUtil.toInt(byte[][][int], int)"},"status":-2},{"failures":[],"tindex":"8b10c838-db65-11e4-b5c4-d91f2a2d007f","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:244","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:262","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-2},{"failures":[454,457,199,368,369,485,370,222,226,230,233,239,241,243,244,248,253,257,400,401,270,284,285,288,293,297,300,302,304,305,309,314,318],"tindex":"8b10c839-db65-11e4-b5c4-e35f38c357f5","variableMapping":{"shift":"value","tmpValue":"value"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:61","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:81","type":"CtOperatorAssignmentImpl","sourcecode":"long /= double"},"status":-1},{"failures":[398,263],"tindex":"8b10c83a-db65-11e4-b5c4-ef0898604d3f","variableMapping":{"weight":"durationInHours"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:394","type":"CtIfImpl","sourcecode":"if (double < 0)\n    throw new java.lang.IllegalArgumentException((\"weight cannot be negative! but was \" + double));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:480","type":"CtIfImpl","sourcecode":"if (java.lang.Number != null) {\n    double double = (java.lang.Number.doubleValue()) / 1000;\n    double = java.lang.Math.java.lang.Math.round(((double / double) / 1.4));\n    if (double > com.graphhopper.routing.util.AbstractFlagEncoder.(getMaxSpeed()))\n        double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed();\n    \n    double = double;\n} "},"status":-1},{"failures":[],"tindex":"8b10c83b-db65-11e4-b5c4-e37029d1afd7","variableMapping":{"offset":"offset","bytes":"bytes","value":"value"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtilLittle:54","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 3)] = ((byte)(int >> 24))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:55","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 2)] = ((byte)(int >> 16))"},"status":0},{"failures":[210],"tindex":"8b10c83c-db65-11e4-b5c4-f34ef0a55106","variableMapping":{"entryVal":"entryVal","fe":"fe"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:168","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:159","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(java.lang.String)"},"status":-1},{"failureDictionary":{"com.graphhopper.storage.LevelGraphStorageTest.testCopyTo":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":337,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":394,"com.graphhopper.storage.LevelGraphStorageTest.testCannotBeLoadedViaDifferentClass":7,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":486,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":416,"com.graphhopper.GraphHopperAPITest.testNoLoad":489,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":149,"com.graphhopper.reader.OSMReaderTest.testFerry":398,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":364,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":365,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":303,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":223,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testMoreReal":436,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":187,"com.graphhopper.storage.LevelGraphStorageTest.testSetNodes":52,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":253,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":257,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":171,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":71,"com.graphhopper.coll.CompressedArrayTest.testCompress":484,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":229,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":145,"com.graphhopper.storage.LevelGraphStorageTest.testPriosWhileDeleting":8,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":348,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":169,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":121,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSortHighLevelFirst":433,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":354,"com.graphhopper.GraphHopperTest.testPrepare":189,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":181,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":336,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":128,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":343,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":301,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":329,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":360,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":505,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":230,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":470,"com.graphhopper.storage.LevelGraphStorageTest.internalDisconnect":13,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex":434,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":217,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":222,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":299,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":404,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":321,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":120,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":327,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":421,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":393,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":96,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":304,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":496,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat_withTurnCostEntries":53,"com.graphhopper.storage.LevelGraphStorageTest.testDetachEdge":15,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":487,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":357,"com.graphhopper.GraphHopperTest.testLoadOSM":192,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":427,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":407,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":379,"com.graphhopper.routing.util.EncodingManagerTest.testEncoderAcceptNoException":209,"com.graphhopper.reader.OSMReaderTest.testSort":455,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxAndMinSpeed":315,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":215,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":460,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":57,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":140,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":105,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":480,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":182,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":201,"com.graphhopper.routing.DijkstraTest.initializationError":498,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":453,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":92,"com.graphhopper.storage.LevelGraphStorageTest.testBounds":40,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":117,"com.graphhopper.storage.LevelGraphStorageTest.testPrios":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":345,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":54,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":144,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":66,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":241,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteAndOptimize":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":61,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":297,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testMaxAndMinSpeed":294,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSnappedPointAndGeometry":439,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":125,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraph":101,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":333,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testEdgeFilter":437,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":495,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":243,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":157,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":324,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteNodeForUnidir":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":323,"com.graphhopper.coll.OSMIDMapTest.testGetLong":389,"com.graphhopper.coll.IntIntBinHeapTest.testSize":488,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":75,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":468,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":81,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes":32,"com.graphhopper.storage.LevelGraphStorageTest.testSave_and_fileFormat":10,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode2":34,"com.graphhopper.coll.CompressedArrayTest.testCompress2":483,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":130,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":283,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":414,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":72,"com.graphhopper.GraphHopperAPITest.testLoad":0,"com.graphhopper.storage.LevelGraphStorageTest.testNoCreateCalled":14,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":406,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":273,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":122,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":112,"com.graphhopper.storage.LevelGraphStorageTest.testClone":19,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":399,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":62,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":218,"com.graphhopper.reader.OSMReaderTest.testBarriers":456,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraphBug":432,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":244,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":153,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":326,"com.graphhopper.util.GHUtilityTest.testCopy":366,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testDifferentVehicles":102,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":291,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":232,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":490,"com.graphhopper.routing.PathTest.testFindInstruction":207,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":226,"com.graphhopper.storage.LevelGraphStorageTest.testPropertiesWithNoInit":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":63,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":279,"com.graphhopper.util.EdgeSkipIteratorTest.testUpdateFlags":358,"com.graphhopper.storage.LevelGraphStorageTest.testInfinityWeight":48,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":240,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":415,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":141,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":126,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":90,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":471,"com.graphhopper.storage.LevelGraphStorageTest.testEnsureSize":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":76,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":350,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":251,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":502,"com.graphhopper.routing.DijkstraBidirectionRefTest.initializationError":501,"com.graphhopper.storage.LevelGraphStorageTest.testFlags":21,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":108,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":154,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":413,"com.graphhopper.util.InstructionListTest.testWayList2":362,"com.graphhopper.util.AngleCalcTest.testAlignOrientation":372,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":256,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":177,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":428,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":146,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":477,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":67,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":302,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":95,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":211,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":300,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":106,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":235,"com.graphhopper.storage.LevelGraphStorageTest.testFootMix":23,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":377,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":305,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":163,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":73,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":447,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":111,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBug1":325,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":392,"com.graphhopper.routing.AStarTest.initializationError":503,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":339,"com.graphhopper.coll.OSMIDMapTest.testGet":387,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":70,"com.graphhopper.routing.PathBidirRefTest.testExtract":202,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":280,"com.graphhopper.storage.LevelGraphStorageTest.testEnabledElevation":36,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":308,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints120":443,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":423,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":176,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":175,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":220,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":307,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":100,"com.graphhopper.util.GHUtilityTest.testSort2":472,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":334,"com.graphhopper.reader.OSMReaderTest.testMain":391,"com.graphhopper.storage.LevelGraphStorageTest.testDoThrowExceptionIfDimDoesNotMatch":11,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":261,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":80,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":309,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":316,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testGrid":444,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectional":39,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":260,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":179,"com.graphhopper.storage.LevelGraphStorageTest.test8BytesFlags":26,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdgesWithDelete":30,"com.graphhopper.storage.LevelGraphStorageTest.testDirectional":51,"com.graphhopper.routing.util.EncodedValueTest.testSetValue":401,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete":27,"com.graphhopper.routing.QueryGraphTest.testIterationBug_163":200,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":248,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":85,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":238,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":405,"com.graphhopper.storage.LevelGraphStorageTest.testAddLocation":33,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":462,"com.graphhopper.storage.StorablePropertiesTest.testStore":386,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":376,"com.graphhopper.storage.GraphHopperStorageTest.testClone":114,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":147,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":178,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":267,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":124,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":265,"com.graphhopper.storage.LevelGraphStorageTest.testDisconnectEdge":2,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":295,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeFilter":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":155,"com.graphhopper.routing.PathTest.testTime":205,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":290,"com.graphhopper.storage.LevelGraphStorageTest.testNameIndex":49,"com.graphhopper.storage.LevelGraphStorageTest.testEdges":20,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":272,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":493,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":430,"com.graphhopper.storage.LevelGraphStorageTest.testCheckFirstNode":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":168,"com.graphhopper.reader.OSMReaderTest.testRelation":199,"com.graphhopper.util.GHUtilityTest.testSortDirected":474,"com.graphhopper.coll.IntDoubleBinHeapTest.test0":507,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxAndMinSpeed":254,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":465,"com.graphhopper.GraphHopperTest.testFootOnly":195,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":221,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":263,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":382,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testReverseSpatialKey":438,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":370,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":322,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":344,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":237,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":431,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":164,"com.graphhopper.search.NameIndexTest.testCreate":375,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":463,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":409,"com.graphhopper.routing.QueryGraphTest.testOneWay":467,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":491,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":478,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":225,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":378,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":475,"com.graphhopper.reader.OSMReaderTest.testWithBounds":461,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":255,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":161,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":214,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":395,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":170,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":281,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":369,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectionalEdgeFilter":16,"com.graphhopper.storage.LevelGraphStorageTest.testBigDataEdge":12,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":282,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":252,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":233,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":449,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":84,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":103,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":264,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":180,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":77,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":110,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":396,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":320,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":143,"com.graphhopper.util.InstructionListTest.testWayList":361,"com.graphhopper.routing.ch.PrepareEncoderTest.testOverwrite":367,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":306,"com.graphhopper.GraphHopperAPITest.testDisconnected179":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":156,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":479,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":193,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":86,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":419,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":151,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":249,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":198,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":216,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":167,"com.graphhopper.storage.RAMIntDataAccessTest.testSet_Get_Short_Long":403,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":184,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":313,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":190,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":116,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":383,"com.graphhopper.routing.util.EncodedValueTest.testSwap":400,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":88,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":355,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":134,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":298,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":133,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":331,"com.graphhopper.routing.DijkstraOneToManyTest.initializationError":500,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":353,"com.graphhopper.storage.LevelGraphStorageTest.testPillarNodes":47,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":268,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":287,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":314,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeProperties":35,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":59,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":109,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":341,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testNoErrorOnEdgeCase_lastIndex":492,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameNoFlush":408,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":318,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":104,"com.graphhopper.routing.PathTest.testWayList":206,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":183,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":288,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":160,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":262,"com.graphhopper.coll.OSMIDMapTest.testGet2":388,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":342,"com.graphhopper.storage.LevelGraphStorageTest.testCreateDuplicateEdges":44,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":420,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":83,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":312,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":127,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":274,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":68,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":115,"com.graphhopper.storage.LevelGraphStorageTest.testDozendEdges":31,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex2":440,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex3":441,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph":442,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":246,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":506,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":284,"com.graphhopper.util.GHUtilityTest.testSort":473,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":173,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":424,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":482,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":224,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":311,"com.graphhopper.search.NameIndexTest.testPut":373,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":60,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":97,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":113,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":417,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testRMin":435,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":385,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":450,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":411,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":242,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":466,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":236,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":448,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":55,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":194,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":286,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":212,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":278,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":340,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":213,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":412,"com.graphhopper.storage.LevelGraphStorageTest.testGetLocations":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":174,"com.graphhopper.routing.PathTest.testFound":204,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":196,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":210,"com.graphhopper.storage.LevelGraphStorageTest.testCreateLocation":46,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeightIfAdvancedEncoder":4,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":310,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":469,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":74,"com.graphhopper.coll.IntDoubleBinHeapTest.testClear":402,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":374,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":159,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":119,"com.graphhopper.util.InstructionListTest.testEmptyList":359,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":328,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":292,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph2":445,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":271,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":332,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":259,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testMaxAndMinSpeed":231,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":258,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":335,"com.graphhopper.reader.PrinctonReaderTest.testRead":197,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":142,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testWayGeometry":381,"com.graphhopper.storage.LevelGraphStorageTest.testUpdateUnidirectional":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":69,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":158,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":390,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":476,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":82,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":148,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes2":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":79,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":228,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":247,"com.graphhopper.routing.util.EncodingManagerTest.testTurnFlagCombination":485,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":289,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":239,"com.graphhopper.reader.OSMReaderTest.testFoot":454,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":172,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":397,"com.graphhopper.storage.LevelGraphStorageTest.testCopyProperties":50,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":425,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":481,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":219,"com.graphhopper.reader.OSMReaderTest.testOneWay":368,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":426,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":123,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":138,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":137,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":91,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":227,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":132,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":245,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":118,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":166,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":349,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":266,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":346,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":356,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":347,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":451,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":275,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testFindingWayGeometry":380,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":162,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":464,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":107,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":497,"com.graphhopper.routing.PathBidirRefTest.testExtract2":203,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":410,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":384,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":319,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":99,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":293,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":429,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":136,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":494,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":296,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":457,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":185,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":276,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":452,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":250,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":352,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":422,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":139,"com.graphhopper.util.GHUtilityTest.testEdgeStuff":504,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdges":22,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":269,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":131,"com.graphhopper.GraphHopperTest.testFootAndCar":191,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode":28,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":285,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints32":446,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":152,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":208,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":270,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":351,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":330,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":65,"com.graphhopper.GraphHopperTest.testPrepareOnly":186,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCorrectWeight":338,"com.graphhopper.GraphHopperTest.testVia":188,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":418,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":317,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":150,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":459,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeight":6,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":135,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":363,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":277,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":458,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":165,"com.graphhopper.util.AngleCalcTest.testCombined":371,"com.graphhopper.routing.AStarBidirectionTest.initializationError":499,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":234,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeReturn":45,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete3":43,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete2":42,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":56}}]

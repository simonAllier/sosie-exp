[{"failures":[],"tindex":"8c3f0707-db43-11e4-be33-93aa40c07967","variableMapping":{"workerThreads":"biggestStart"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMInputFile:248","type":"CtIfImpl","sourcecode":"if ((int) <= 0)\n    int = 2;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:168","type":"CtIfImpl","sourcecode":"if (int < (java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue())) {\n    com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeNetwork(int, int, com.graphhopper.coll.GHBitSetImpl);\n    int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getKey();\n    int = java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue();\n} else {\n    com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeNetwork(java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getKey(), java.util.Map.Entry<java.lang.Integer, java.lang.Integer>.getValue(), com.graphhopper.coll.GHBitSetImpl);\n}"},"status":0},{"failures":[],"tindex":"8c3f0708-db43-11e4-be33-672a6439f9e5","variableMapping":{"weightApproximation":"maxLon"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.ConsistentWeightApproximator:38","type":"CtOperatorAssignmentImpl","sourcecode":"double *= -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:45","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.com.graphhopper.util.shapes.BBox.double = -(java.lang.Double.double)"},"status":-2},{"failures":[],"tindex":"8c3f0709-db43-11e4-be33-75e6efc6de66","variableMapping":{"len":"acceptBit","start":"acceptBit"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:118","type":"CtReturnImpl","sourcecode":"return ~(long + long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:262","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"tindex":"8c3f070a-db43-11e4-be33-21584ac52f11","variableMapping":{"currentEntry":"I_SKIP_EDGE1"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:143","type":"CtAssignmentImpl","sourcecode":"int = 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:55","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.GraphHopperStorage.nextEdgeEntryIndex(4)"},"status":-1},{"failures":[95,96,97,62,75,77,79,88,91],"tindex":"8c3f2e1b-db43-11e4-be33-91a28c05c94d","variableMapping":{"E_ADDITIONAL":"child"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1455","type":"CtAssignmentImpl","sourcecode":"int = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:121","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[2,98,3,4,5,6,9,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,29,30,99,31,33,34,35,100,36,37,38,39,101,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,102,91,92,93,103,94],"tindex":"8c3f2e1c-db43-11e4-be33-99a548741fd3","variableMapping":{"i":"lastEdgeIndex","to":"edgeCount","lonSize":"edgeCount"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:257","type":"CtAssignmentImpl","sourcecode":"int = int + (int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:87","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[],"tindex":"8c3f2e1d-db43-11e4-be33-f3fe73878bff","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:334","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.LevelGraphStorage.this.getWeight(this)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:307","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.getSpeed(long)"},"status":-2},{"failures":[104,105],"tindex":"8c3f2e1e-db43-11e4-be33-9795bcecec79","variableMapping":{"logMessagesPercentage":"shortTripsSpeed","logMessages":"val"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:159","type":"CtAssignmentImpl","sourcecode":"this.double = double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:486","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.java.lang.Math.round(((double / double) / 1.4))"},"status":-1},{"failures":[],"tindex":"8c3f2e1f-db43-11e4-be33-b9100c78a1c5","variableMapping":{"dX":"speed","dY":"speed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:769","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[106,105,107],"tindex":"8c3f2e20-db43-11e4-be33-5350bef8cb47","variableMapping":{"name":"tt"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:71","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || (java.lang.String.isEmpty())) {\n    return 0;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:184","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.equals(\"grade1\"))))\n    return 0;\n"},"status":-1},{"failures":[108,109,110,111,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,106,105,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,56,57,66,68,69,79,145],"tindex":"8c3f7c41-db43-11e4-be33-69f744591296","variableMapping":{"max":"factor"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.MiniPerfTest:75","type":"CtReturnImpl","sourcecode":"return (double) / 1000000.0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:75","type":"CtReturnImpl","sourcecode":"return long * (double)"},"status":-1},{"failures":[],"tindex":"8c3f7c42-db43-11e4-be33-b7d830cffd83","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:446","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"service\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:69","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"status":-2},{"failures":[146,145],"tindex":"8c3f7c43-db43-11e4-be33-15386682bcbf","variableMapping":{"str":"str"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.DAType:148","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"RAM\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:395","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int).trim()"},"status":-1},{"failures":[],"tindex":"8c3f7c44-db43-11e4-be33-271bff07b3c3","variableMapping":{"this":"this","unknownSpeed":"longTripsSpeed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:498","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:499","type":"CtIfImpl","sourcecode":"if (double > 1) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n}"},"status":0},{"failures":[],"tindex":"8c3f7c45-db43-11e4-be33-f381ba55b91a","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareEncoder:58","type":"CtReturnImpl","sourcecode":"return ((long & (com.graphhopper.routing.ch.PrepareEncoder.long)) == (com.graphhopper.routing.ch.PrepareEncoder.long)) || ((long & (com.graphhopper.routing.ch.PrepareEncoder.long)) == (long & (com.graphhopper.routing.ch.PrepareEncoder.long)))"},"status":-2},{"failures":[],"tindex":"8c3f7c46-db43-11e4-be33-01174118f330","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:105","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long / (int)))"},"status":-2},{"failures":[0,98,3,5,6,7,9,10,13,14,108,18,19,23,24,27,28,29,31,147,148,149,150,151,152,153,154,155,109,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,110,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,111,187,188,189,190,191,192,193,194,49,50,51,52,53,54,55,195,196,197,198,199,200,113,114,201,202,203,204,205,122,206,207,208,209,135,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,102,91,92,210,211,212,213,214,94],"tindex":"8c3f7c47-db43-11e4-be33-5b32b14d4c96","variableMapping":{"flags":"flags","tmpValue":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtReturnImpl","sourcecode":"return long | long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:665","type":"CtReturnImpl","sourcecode":"return boolean ? long | (long) : long & (~(long))"},"status":-1},{"failures":[215,216,217,218,219,35,101,41,42,220,221,222,223,224,225,226,227,228,229,230],"tindex":"8c3f7c48-db43-11e4-be33-cde22a12948a","variableMapping":{"E_ADDITIONAL":"allBits"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1455","type":"CtAssignmentImpl","sourcecode":"int = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:97","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"8c3fa359-db43-11e4-be33-65f143b12086","variableMapping":{"str":"_location","name":"_location"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.shapes.GHPlace:71","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += java.lang.String"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:47","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"/\""},"status":0},{"failures":[104,105],"tindex":"8c3fa35a-db43-11e4-be33-2328dd3fb4c4","variableMapping":{"tInt":"estimatedLength","speed":"estimatedLength"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:155","type":"CtIfImpl","sourcecode":"if (java.lang.Integer != null)\n    java.lang.Integer = java.lang.Integer;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:480","type":"CtIfImpl","sourcecode":"if (java.lang.Number != null) {\n    double double = (java.lang.Number.doubleValue()) / 1000;\n    double = java.lang.Math.java.lang.Math.round(((double / double) / 1.4));\n    if (double > com.graphhopper.routing.util.AbstractFlagEncoder.(getMaxSpeed()))\n        double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed();\n    \n    double = double;\n} "},"status":-1},{"failures":[],"tindex":"8c3fa35b-db43-11e4-be33-af64c90a40c3","variableMapping":{"width":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT","lonSimilar":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:93","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    int = (int) - 1;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:223","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, true);\n    if ((double > 30) && (com.graphhopper.reader.OSMWay.hasTag(\"surface\", java.util.Set<java.lang.String>)))\n        double = 30;\n    \n    long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean)\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n    \n    if ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.HashSet<java.lang.String>)) || boolean) {\n        if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\"))\n            long |= long;\n        else\n            long |= long;\n        \n    } else\n        long |= long;\n    \n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"service\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"residential\"));\n    long |= long;\n}"},"status":-2},{"failures":[119],"tindex":"8c3fa35c-db43-11e4-be33-55e77fa61d19","variableMapping":{"key":"trackType"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:99","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"-\")) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:133","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || (java.lang.String.startsWith(\"grade\")))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[],"tindex":"8c3fca6d-db43-11e4-be33-a51852e41956","variableMapping":{"index":"i"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:164","type":"CtOperatorAssignmentImpl","sourcecode":"int *= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:187","type":"CtAssignmentImpl","sourcecode":"int[][int] = int[][(int / 2)]"},"status":-2},{"failures":[],"tindex":"8c3fca6e-db43-11e4-be33-bf50aafb37ed","variableMapping":{"str":"str","this":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PMap:80","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.util.Helper.(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    try {\n        return java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n    } catch (java.lang.Exception java.lang.Exception) {\n    }\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:423","type":"CtTryImpl","sourcecode":"try {\n    if (java.lang.String.startsWith(\"P\"))\n        return 0;\n    \n    int int = java.lang.String.indexOf(\":\");\n    if (int > 0) {\n        java.lang.String java.lang.String = java.lang.String.substring(0, int);\n        java.lang.String java.lang.String = java.lang.String.substring((int + 1));\n        int = java.lang.String.indexOf(\":\");\n        int int = 0;\n        if (int > 0) {\n            java.lang.String java.lang.String = java.lang.String;\n            java.lang.String = java.lang.String.substring(0, int);\n            java.lang.String = java.lang.String.substring((int + 1));\n            int = (java.lang.Integer.(java.lang.Integer.parseInt(java.lang.String)) * 60) * 24;\n        } \n        int += java.lang.Integer.(java.lang.Integer.parseInt(java.lang.String)) * 60;\n        int += java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n        return int;\n    } else {\n        return java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n    }\n} catch (java.lang.Exception java.lang.Exception) {\n    com.graphhopper.routing.util.AbstractFlagEncoder.org.slf4j.Logger.warn(((\"Cannot parse \" + java.lang.String) + \" using 0 minutes\"));\n}"},"status":0},{"failures":[],"tindex":"8c3fca6f-db43-11e4-be33-6f30b0164a9d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:98","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"status":0},{"failures":[50,51,52,231,232,53,54,233,234,104,235,236,237,238,239,240,241,242,243,244,245,112,246,247,121,127,106,206,130,131,107,145],"tindex":"8c3fca70-db43-11e4-be33-151600ec1aeb","variableMapping":{"eleDelta":"speed","decEleSum":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:169","type":"CtAssignmentImpl","sourcecode":"double = -double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:227","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, true)"},"status":-1},{"failures":[],"tindex":"8c3ff181-db43-11e4-be33-2704bfdd5382","variableMapping":{"latSimilar":"length"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:96","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:266","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int -= int;\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n    byte[] = byte[][][(int + 1)];\n    java.lang.System.java.lang.System.arraycopy(byte[], int, byte[], 0, int);\n} else {\n    java.lang.System.java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n}"},"status":0},{"failures":[],"tindex":"8c3ff182-db43-11e4-be33-797b538c8bd8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:85","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.EncodedDoubleValue.getDoubleValue(long)"},"status":-2},{"failures":[],"tindex":"8c3ff183-db43-11e4-be33-9346adf3526b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:271","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if (\"hiking\".equals(java.lang.String))\n        long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n    else\n        long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n    \n} else {\n    long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(0, com.graphhopper.routing.util.FootFlagEncoder.int);\n}"},"status":-2},{"failures":[119,248,249,125,250,251,139,252,253,143,254],"tindex":"8c3ff184-db43-11e4-be33-e95212d97ed8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:45","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String"},"status":-1},{"failures":[],"tindex":"8c401895-db43-11e4-be33-43d66bb24125","variableMapping":{"edgeCount":"removed","this":"g"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:376","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.ensureEdgeIndex(int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:251","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (gnu.trove.list.array.TIntArrayList.size()) ; int++) {\n    com.graphhopper.storage.GraphStorage.markNodeRemoved(gnu.trove.list.array.TIntArrayList.get(int));\n    int++;\n}"},"status":-2},{"failures":[],"tindex":"8c401896-db43-11e4-be33-bf4189d41ed1","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseArray:132","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:123","type":"CtLocalVariableImpl","sourcecode":"int int = boolean ? 1 : -1"},"status":-2},{"failures":[],"tindex":"8c401897-db43-11e4-be33-212805157394","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.shapes.BBox:207","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:396","type":"CtLocalVariableImpl","sourcecode":"int int"},"status":-2},{"failures":[255,256,257,0,258,1,2,98,259,260,261,3,262,263,4,264,5,6,7,8,9,10,11,12,13,14,265,108,15,16,266,17,18,267,19,20,21,22,268,269,23,270,24,25,26,27,271,28,29,272,30,99,31,32,147,273,274,148,275,276,277,278,149,150,151,279,152,153,280,281,154,155,282,109,283,284,285,286,156,287,157,288,289,290,291,292,158,293,159,294,295,160,296,161,162,297,298,299,163,300,301,302,303,304,305,306,307,215,308,309,310,311,312,216,313,217,218,314,315,316,317,318,319,320,33,34,321,35,100,36,37,38,39,101,40,41,42,43,44,45,46,322,47,48,323,324,325,326,327,328,329,330,331,332,333,334,335,336,164,337,338,339,340,165,166,167,341,168,169,342,343,170,171,344,110,345,346,347,348,172,349,173,350,351,352,353,354,174,355,175,356,357,176,358,177,178,359,360,361,179,362,180,181,182,363,183,184,364,365,185,186,366,111,367,368,369,370,187,371,188,372,373,374,375,376,189,377,190,378,379,191,380,192,193,381,382,383,194,384,49,50,51,52,231,232,53,385,54,233,55,234,386,387,195,196,104,235,236,237,238,239,240,241,242,388,243,244,245,112,246,247,389,390,391,392,197,393,394,198,395,396,397,398,399,199,200,400,401,402,403,113,114,201,404,405,406,407,408,409,115,116,117,202,203,410,204,205,411,412,118,413,119,414,415,416,417,418,419,420,248,120,421,422,121,423,122,424,123,425,426,249,124,125,427,428,429,430,431,432,433,434,435,250,126,436,437,438,127,439,440,106,206,441,105,207,130,131,107,442,443,444,208,132,445,133,209,134,135,446,136,447,137,448,138,251,139,449,450,451,452,453,454,455,252,140,456,457,458,459,141,460,461,253,142,143,462,463,464,465,466,467,468,469,470,254,144,471,472,473,474,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,475,82,83,84,85,86,87,88,89,90,102,91,92,476,477,93,478,210,211,212,145,213,214,103,479,94,480,481,482],"tindex":"8c403fa8-db43-11e4-be33-6795d8849365","variableMapping":{"originalEdgesCount":"shift","edgeDifference":"shift","contractedNeighbors":"shift"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:567","type":"CtReturnImpl","sourcecode":"return ((10 * int) + int) + int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:168","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[122],"tindex":"8c403fa9-db43-11e4-be33-257ea1ea1e28","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:146","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bridge\", \"yes\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))) {\n} else {\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = com.graphhopper.util.PointList.getElevation(0);\n    double double = 0;\n    double = com.graphhopper.util.EdgeIteratorState.getDistance();\n    double double = (com.graphhopper.util.PointList.getElevation(((com.graphhopper.util.PointList.size()) - 1))) - double;\n    if (double > 0.1) {\n        double = double;\n        double = double;\n    } else if (double < (-0.1)) {\n        double = -double;\n        double = double;\n    } \n    double double = double > 1 ? double / double : 0;\n    double double = double > 1 ? double / double : 0;\n    double double = (double - double) - double;\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getHighwaySpeed(\"cycleway\");\n    if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.FlagEncoder.int)) {\n        double double = com.graphhopper.routing.util.AbstractFlagEncoder.getSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n    if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.FlagEncoder.int)) {\n        double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n}"},"status":-1},{"failures":[],"tindex":"8c403faa-db43-11e4-be33-d3580474da1e","variableMapping":{"size":"endNode"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:125","type":"CtIfImpl","sourcecode":"if ((int) < 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathNative:56","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.processEdge(int, int)"},"status":0},{"failures":[],"tindex":"8c403fab-db43-11e4-be33-a31c3a1cfb6d","variableMapping":{"segmentSizeInBytes":"segmentSizeInBytes","rda":"this"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:74","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.RAMIntDataAccess.setSegmentSize(int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:89","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.AbstractDataAccess.setSegmentSize(int)"},"status":0},{"failures":[],"tindex":"8c403fac-db43-11e4-be33-f7430a95b833","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:472","type":"CtLocalVariableImpl","sourcecode":"int int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:77","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeZeroDegreeNodes()"},"status":-2},{"failures":[],"tindex":"8c403fad-db43-11e4-be33-f53977ec7f6e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:744","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.trim().toLowerCase()"},"status":0},{"failures":[215,216,217,218,219,35,101,41,42,220,221,223,224,225,226,227,228,229,230],"tindex":"8c403fae-db43-11e4-be33-7b9407a1dfdb","variableMapping":{"factor":"maxLonTmp","delta_lon":"minLonTmp","a_lon":"maxLonTmp"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:212","type":"CtLocalVariableImpl","sourcecode":"double double = double + (double * double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:184","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"status":-1},{"failures":[],"tindex":"8c403faf-db43-11e4-be33-df20cc3394fe","variableMapping":{"orientation":"fullDist2D","java.lang.Math.PI":"decDist2DSum"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:97","type":"CtIfImpl","sourcecode":"if (double < 0)\n    double += 2 * (java.lang.Math.double);\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:163","type":"CtIfImpl","sourcecode":"if (double > 0.1) {\n    double = double;\n    double = double;\n} else if (double < (-0.1)) {\n    double = -double;\n    double = double;\n} "},"status":0},{"failures":[],"tindex":"8c403fb0-db43-11e4-be33-6155d8752e3d","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.PrinctonReader:64","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:217","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.shapes.BBox.double"},"status":-2},{"failures":[],"tindex":"8c403fb1-db43-11e4-be33-c56520ea108d","variableMapping":{"foundIndex":"sLat"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:1016","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:142","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-2},{"failures":[],"tindex":"8c4066c2-db43-11e4-be33-c1136adac893","variableMapping":{"bits":"hash"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:235","type":"CtIfImpl","sourcecode":"if (long > 1) {\n    long >>>= 1;\n} else {\n    break;\n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:160","type":"CtWhileImpl","sourcecode":"while (true) {\n    if (double < double) {\n        double double = (double + double) / 2;\n        if (double < double) {\n            double = double;\n        } else {\n            long |= 1;\n            double = double;\n        }\n    } \n    int++;\n    if (int < (int))\n        long <<= 1;\n    else\n        break;\n    \n    if (double < double) {\n        double double = (double + double) / 2;\n        if (double < double) {\n            double = double;\n        } else {\n            long |= 1;\n            double = double;\n        }\n    } \n    int++;\n    if (int < (int))\n        long <<= 1;\n    else\n        break;\n    \n}"},"status":-2},{"failures":[],"tindex":"8c4066c3-db43-11e4-be33-0bc9a8c6a49f","variableMapping":{"ghLocation":"com.graphhopper.routing.util.EncodingManager.MOUNTAINBIKE"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:360","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new java.lang.IllegalArgumentException(\"graphhopper location cannot be null\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:152","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.CarFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.BikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":0},{"failures":[215,218,219,35,42,224,226],"tindex":"8c4066c4-db43-11e4-be33-23e117eb5a14","variableMapping":{"factor":"lon"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:207","type":"CtIfImpl","sourcecode":"if (double < 0)\n    double = 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:185","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} else {\n    long |= 1;\n    double = double;\n}"},"status":-1},{"failures":[104],"tindex":"8c4066c5-db43-11e4-be33-1f74fe6c9ed2","variableMapping":{"orientation":"shortTripsSpeed","resultOrientation":"durationInHours","baseOrientation":"longTripsSpeed","java.lang.Math.PI":"shortTripsSpeed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:72","type":"CtIfImpl","sourcecode":"if (double >= 0) {\n    if (double < ((-(java.lang.Math.double)) + double))\n        double = double + (2 * (java.lang.Math.double));\n    else\n        double = double;\n    \n} else {\n    if (double > ((+(java.lang.Math.double)) + double))\n        double = double - (2 * (java.lang.Math.double));\n    else\n        double = double;\n    \n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:476","type":"CtIfImpl","sourcecode":"if (double > 0)\n    try {\n        java.lang.Number java.lang.Number = com.graphhopper.reader.OSMWay.getTag(\"estimated_distance\", null);\n        if (java.lang.Number != null) {\n            double double = (java.lang.Number.doubleValue()) / 1000;\n            double = java.lang.Math.java.lang.Math.round(((double / double) / 1.4));\n            if (double > com.graphhopper.routing.util.AbstractFlagEncoder.(getMaxSpeed()))\n                double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed();\n            \n            double = double;\n        } \n    } catch (java.lang.Exception java.lang.Exception) {\n    }\n"},"status":-1},{"failures":[95,96,97],"tindex":"8c4066c6-db43-11e4-be33-ffd683cdb5f2","variableMapping":{"edgeId":"child"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:509","type":"CtAssignmentImpl","sourcecode":"int = int << 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:121","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"8c4066c7-db43-11e4-be33-2b636d272c9a","variableMapping":{"i":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:201","type":"CtIfImpl","sourcecode":"if (int > 1000)\n    throw new java.lang.IllegalStateException(\"something went wrong: there seems to be no end of the turn cost-list!?\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:223","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, true);\n    if ((double > 30) && (com.graphhopper.reader.OSMWay.hasTag(\"surface\", java.util.Set<java.lang.String>)))\n        double = 30;\n    \n    long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean)\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n    \n    if ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.HashSet<java.lang.String>)) || boolean) {\n        if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\"))\n            long |= long;\n        else\n            long |= long;\n        \n    } else\n        long |= long;\n    \n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"service\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"residential\"));\n    long |= long;\n}"},"status":-2},{"failures":[95,483,96,97,91],"tindex":"8c4066c8-db43-11e4-be33-712abb940962","variableMapping":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"size","nextEdge":"size"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:794","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.util.EdgeIterator.int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:119","type":"CtIfImpl","sourcecode":"if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n    int++;\n} "},"status":-1},{"failures":[7,16,17,20,21,25,26,151,284,286,288,289,294,295,167,346,348,350,351,356,357,182,368,370,372,373,378,379,202,204],"tindex":"8c4066c9-db43-11e4-be33-bfc322f71152","variableMapping":{"noNumberValue":"key"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:332","type":"CtReturnImpl","sourcecode":"return int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:89","type":"CtReturnImpl","sourcecode":"return com.graphhopper.coll.SparseIntIntArray.get(int, -1)"},"status":-1},{"failures":[49,50,51,52,231,232,53,54,233,55,234,484,104,235,236,237,238,239,240,241,242,243,244,245,112,246,247,115,413,119,414,415,416,418,248,120,421,121,122,123,425,426,124,125,428,429,430,432,433,250,126,436,437,439,106,206,441,105,130,107,445,134,136,447,448,138,449,450,452,453,252,140,456,457,141,460,461,142,143,463,464,465,467,468,254,144,471,472,145],"tindex":"8c4066ca-db43-11e4-be33-5b40c1ce6b56","variableMapping":{"com.graphhopper.storage.DAType.MemRef.HEAP":"value","memRef":"value"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.DAType:107","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.storage.DAType.MemRef) == (com.graphhopper.storage.DAType.MemRef.com.graphhopper.storage.DAType.MemRef)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:134","type":"CtReturnImpl","sourcecode":"return java.lang.Object.equals(java.util.Map<java.lang.String, java.lang.Object>.get(java.lang.String))"},"status":-1},{"failures":[485],"tindex":"8c4066cb-db43-11e4-be33-3351dabadb1d","variableMapping":{"str":"minStr"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:430","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"\\n\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:443","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring((int + 1))"},"status":-1},{"failures":[104,105],"tindex":"8c4066cc-db43-11e4-be33-0de311b8507c","variableMapping":{"factor":"shortTripsSpeed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:207","type":"CtIfImpl","sourcecode":"if (double < 0)\n    double = 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:477","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Number java.lang.Number = com.graphhopper.reader.OSMWay.getTag(\"estimated_distance\", null);\n    if (java.lang.Number != null) {\n        double double = (java.lang.Number.doubleValue()) / 1000;\n        double = java.lang.Math.java.lang.Math.round(((double / double) / 1.4));\n        if (double > com.graphhopper.routing.util.AbstractFlagEncoder.(getMaxSpeed()))\n            double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed();\n        \n        double = double;\n    } \n} catch (java.lang.Exception java.lang.Exception) {\n}"},"status":-1},{"failures":[413,119,414,416,418,248,120,422,123,426,430,432,433,250,126,437,438,138,139,450,452,453,252,140,457,458,141,461,465,467,468,254,144,472,473],"tindex":"8c4066cd-db43-11e4-be33-9d7bc8ae4e77","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:434","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.BikeCommonFlagEncoder.collect(com.graphhopper.reader.OSMWay, java.util.TreeMap<java.lang.Double, java.lang.Integer>)"},"status":-1},{"failures":[],"tindex":"8c4066ce-db43-11e4-be33-8b28e8b19d11","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Downloader:108","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:263","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[],"tindex":"8c408ddf-db43-11e4-be33-ddaaa5ce52ef","variableMapping":{"byteCount":"todoBytes"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:241","type":"CtIfImpl","sourcecode":"if (long < 0)\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:105","type":"CtIfImpl","sourcecode":"if (long <= 0)\n    return false;\n"},"status":0},{"failures":[],"tindex":"8c408de0-db43-11e4-be33-5f6441f00873","variableMapping":{"byteCount":"todoBytes"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:241","type":"CtIfImpl","sourcecode":"if (long < 0)\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:105","type":"CtIfImpl","sourcecode":"if (long <= 0)\n    return false;\n"},"status":0},{"failures":[205],"tindex":"8c408de1-db43-11e4-be33-ef0f11d1b820","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:86","type":"CtAssignmentImpl","sourcecode":"int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int])"},"status":-1},{"failures":[241,405,408,115,118,119,248,422,425,249,124,125,250,438,251,139,252,458,460,253,142,143,254,473],"tindex":"8c408de2-db43-11e4-be33-fbb4b9cca6d6","variableMapping":{"flags":"encoded","scDirMask":"encoded"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:259","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:320","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[],"tindex":"8c408de3-db43-11e4-be33-f3e6f6c3d3eb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:98","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = java.util.Map<java.lang.String, com.graphhopper.storage.DataAccess>.get(java.lang.String)"},"status":-2},{"failures":[],"tindex":"8c408de4-db43-11e4-be33-e1701827f770","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:59","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EdgeFilter = new com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.EncodingManager.getSingle())"},"status":-2},{"failures":[],"tindex":"8c408de5-db43-11e4-be33-d16a396ef7ba","variableMapping":{"turnCostIndex":"del","NO_TURN_ENTRY":"del"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:185","type":"CtIfImpl","sourcecode":"if (int == (int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:85","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info(((((((((((\"optimize to remove subnetworks (\" + (java.util.Map<java.lang.Integer, java.lang.Integer>.size())) + \"), zero-degree-nodes (\") + int) + \"), \") + \"unvisited-dead-end-nodes(\") + int) + \"), \") + \"maxEdges/node (\") + (java.util.concurrent.atomic.AtomicInteger.get())) + \")\"))"},"status":-2},{"failures":[406,427,444,462],"tindex":"8c408de6-db43-11e4-be33-1d6812c3aeb9","variableMapping":{"segmentSizeInBytes":"maxTurnCosts","index":"maxTurnCosts"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:253","type":"CtAssertImpl","sourcecode":"assert (int + 2) <= (int) : \"integer cannot be distributed over two segments\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:624","type":"CtIfImpl","sourcecode":"if (double >= (int))\n    throw new java.lang.IllegalArgumentException(\"Cost is too high. Or specifiy restricted == true\");\n"},"status":-1},{"failures":[],"tindex":"8c408de7-db43-11e4-be33-1f67b87c3633","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:118","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcycle\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:144","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-2},{"failures":[],"tindex":"8c408de8-db43-11e4-be33-fb0fa0967dbb","variableMapping":{"flags":"forwardBit","tmpValue":"forwardBit"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtReturnImpl","sourcecode":"return long | long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:665","type":"CtReturnImpl","sourcecode":"return boolean ? long | (long) : long & (~(long))"},"status":-2},{"failures":[51,52,231,232,53,233,234,235,236,237,238,240,241,242,243,244,245,112,246,247],"tindex":"8c408de9-db43-11e4-be33-57a2bc60c538","variableMapping":{"highwayValue":"highwayValue"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:238","type":"CtIfImpl","sourcecode":"if ((\"motorway\".equals(java.lang.String)) || (\"motorway_link\".equals(java.lang.String)))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:181","type":"CtIfImpl","sourcecode":"if (\"track\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if ((java.lang.String != null) && (!(java.lang.String.equals(\"grade1\"))))\n        return 0;\n    \n} "},"status":-1},{"failures":[56,57,76,79,92],"tindex":"8c408dea-db43-11e4-be33-b11edb097d31","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:73","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n"},"status":-1},{"failures":[],"tindex":"8c408deb-db43-11e4-be33-f10377bba48e","variableMapping":{"low":"i","guess":"i"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:479","type":"CtAssignmentImpl","sourcecode":"int = int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:194","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[],"tindex":"8c408dec-db43-11e4-be33-0fc4f0e15dc9","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:191","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"impassable\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"status\", \"impassable\")))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:231","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(java.util.List<java.lang.String>, java.util.HashSet<java.lang.String>))\n    return 0;\n"},"status":0},{"failures":[],"tindex":"8c408ded-db43-11e4-be33-e92eaf778f04","variableMapping":{"maxSpeed":"weight"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:767","type":"CtReturnImpl","sourcecode":"return double * 0.9"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:416","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[],"tindex":"8c408dee-db43-11e4-be33-df6ee16f3e52","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:43","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"status":0},{"failures":[],"tindex":"8c408def-db43-11e4-be33-37347fa7c04d","variableMapping":{"str":"location","this":"type"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.DAType:154","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.isStoring())\n    java.lang.String += \"_STORE\";\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:111","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.isStoring())\n    com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , true , java.nio.ByteOrder);\nelse\n    com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , false , java.nio.ByteOrder);\n"},"status":-2},{"failures":[],"tindex":"8c408df0-db43-11e4-be33-03cc132ac5a5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:420","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return 0;\n"},"status":0},{"failures":[],"tindex":"8c408df1-db43-11e4-be33-39e8f3902faa","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:244","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:342","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"status":-2},{"failures":[255,256,0,1,2,98,260,3,4,5,6,7,8,9,10,11,12,13,14,265,108,15,16,266,17,18,267,19,20,21,22,268,269,23,24,25,26,27,271,28,29,272,30,99,31,32,147,148,277,149,150,151,279,152,153,280,281,154,155,282,109,283,284,285,286,156,287,157,288,289,290,291,292,158,159,294,295,160,296,161,162,297,298,299,163,300,486,301,302,303,304,306,307,215,308,309,310,311,312,216,313,217,218,314,315,316,317,319,320,33,34,321,35,100,36,37,38,39,101,40,41,42,43,44,45,46,47,48,323,324,325,326,328,329,330,331,332,334,335,164,339,165,166,167,341,168,169,342,343,170,171,344,110,345,346,347,348,172,349,173,350,351,352,353,354,174,175,356,357,176,358,177,178,360,361,179,362,111,190,49,51,52,231,232,53,54,233,55,234,387,195,196,104,235,236,237,238,239,240,241,242,243,244,245,112,247,389,390,391,392,197,393,394,198,395,396,397,398,199,200,114,201,202,203,410,204,205,411,423,122,209,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,102,91,92,476,477,93,210,211,212,145,213,214,103,479,94,480,482],"tindex":"8c40b502-db43-11e4-be33-a99d1719cd89","variableMapping":{"initLeafSize":"indexDivisor"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:59","type":"CtAssignmentImpl","sourcecode":"int = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:315","type":"CtAssignmentImpl","sourcecode":"int = ((int) / 4) - 1"},"status":-1},{"failures":[],"tindex":"8c40b503-db43-11e4-be33-6be0d5b5c7e5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:582","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return (long & (long)) != 0;\n"},"status":-1},{"failures":[],"tindex":"8c40b504-db43-11e4-be33-65ba6bcebe0c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PrinctonReader:64","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:226","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay)"},"status":-2},{"failures":[],"tindex":"8c40b505-db43-11e4-be33-db780a255c43","variableMapping":{"from":"skippedEdge2","to":"skippedEdge1","reverse":"reverseOrder"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.Path4CH:61","type":"CtIfImpl","sourcecode":"if (boolean) {\n    int int = int;\n    int = int;\n    int = int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:69","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    boolean boolean = com.graphhopper.util.EdgeSkipIterState == null;\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, false);\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    else\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, true);\n} else {\n    com.graphhopper.util.EdgeSkipIterState com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    boolean boolean = com.graphhopper.util.EdgeSkipIterState == null;\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, true);\n    if (boolean)\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    else\n        com.graphhopper.util.EdgeSkipIterState = ((com.graphhopper.util.EdgeSkipIterState)(com.graphhopper.storage.Graph.getEdgeProps(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.EdgeSkipIterState, false);\n}"},"status":0},{"failures":[],"tindex":"8c40b506-db43-11e4-be33-6f2292032eb1","variableMapping":{"turnCosts":"com.graphhopper.util.DistanceCalcEarth.KM_MILE","weight":"com.graphhopper.util.DistanceCalcEarth.KM_MILE"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TurnWeighting:87","type":"CtReturnImpl","sourcecode":"return double + double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:381","type":"CtReturnImpl","sourcecode":"return int * (com.graphhopper.util.DistanceCalcEarth.double)"},"status":-2},{"failures":[220,221,222,223,487,224,225,228,229,230],"tindex":"8c40b507-db43-11e4-be33-ffe932e175aa","variableMapping":{"tmp":"midLon"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:138","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:234","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 2"},"status":-1},{"failures":[],"tindex":"8c40b508-db43-11e4-be33-830eb95ab1b0","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:334","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.LevelGraphStorage.this.getWeight(this)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:601","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"8c40b509-db43-11e4-be33-db688276e63f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:263","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[],"tindex":"8c40b50a-db43-11e4-be33-39545254c886","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:475","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"8c40b50b-db43-11e4-be33-c10375390513","variableMapping":{"midLat":"resultOrientation"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:227","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:75","type":"CtAssignmentImpl","sourcecode":"double = double + (2 * (java.lang.Math.double))"},"status":-2},{"failures":[],"tindex":"8c40b50c-db43-11e4-be33-4775f163deb6","variableMapping":{"width":"dLat","latSimilar":"dLat","lonSimilar":"dLon"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:100","type":"CtLocalVariableImpl","sourcecode":"int int = 2 * ((int * (int)) + int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:124","type":"CtLocalVariableImpl","sourcecode":"int int = int - int"},"status":-2},{"failures":[62,75,77,82,88,91],"tindex":"8c40b50d-db43-11e4-be33-214e32f7d2ed","variableMapping":{"size":"oldValue","index":"key"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:84","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.ArrayIndexOutOfBoundsException((\"index has to be smaller than size \" + (int)));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:57","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHTreeMapComposed.remove(int, int)"},"status":-1},{"failures":[],"tindex":"8c40b50e-db43-11e4-be33-cd247993cb17","variableMapping":{"scDirMask":"com.graphhopper.routing.ch.PrepareEncoder.scFwdDir","flags":"com.graphhopper.routing.ch.PrepareEncoder.scFwdDir","dir":"com.graphhopper.routing.ch.PrepareEncoder.scFwdDir"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:255","type":"CtIfImpl","sourcecode":"if ((long == (long)) || (long == 0))\n    return long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareEncoder:41","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.ch.PrepareEncoder.long"},"status":-2},{"failures":[],"tindex":"8c40b50f-db43-11e4-be33-13402a99ffb3","variableMapping":{"size":"directionBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:132","type":"CtReturnImpl","sourcecode":"return (long) / 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:211","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[49,234,236],"tindex":"8c40b510-db43-11e4-be33-cfe6d198f8c7","variableMapping":{"cp":"val"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:116","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"E\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:83","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String, java.lang.String)"},"status":-1},{"failures":[],"tindex":"8c40dc21-db43-11e4-be33-1d1f3179b274","variableMapping":{"keys":"keys","i":"i","child":"i"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:173","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][int]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:133","type":"CtAssignmentImpl","sourcecode":"float[][int] = ((float)(double))"},"status":0},{"failures":[],"tindex":"8c4262c2-db43-11e4-be33-cd7fc6675f82","variableMapping":{"size":"size"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:124","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:115","type":"CtOperatorAssignmentImpl","sourcecode":"int -= 1"},"status":0},{"failures":[],"tindex":"8c4262c3-db43-11e4-be33-4fa5141c5203","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:58","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.GHDirectory.isStoring()) {\n    com.graphhopper.storage.GHDirectory.put(\"locationIndex\", com.graphhopper.storage.DAType.com.graphhopper.storage.DAType);\n    com.graphhopper.storage.GHDirectory.put(\"edges\", com.graphhopper.storage.DAType.com.graphhopper.storage.DAType);\n    com.graphhopper.storage.GHDirectory.put(\"nodes\", com.graphhopper.storage.DAType.com.graphhopper.storage.DAType);\n} else {\n    com.graphhopper.storage.GHDirectory.put(\"locationIndex\", com.graphhopper.storage.DAType.com.graphhopper.storage.DAType);\n    com.graphhopper.storage.GHDirectory.put(\"edges\", com.graphhopper.storage.DAType.com.graphhopper.storage.DAType);\n    com.graphhopper.storage.GHDirectory.put(\"nodes\", com.graphhopper.storage.DAType.com.graphhopper.storage.DAType);\n}"},"status":0},{"failures":[258,261,265,16,274,282,284,488,489,490,491,492,336],"tindex":"8c4262c4-db43-11e4-be33-cfb06a8fbebe","variableMapping":{"origEdgeId":"segmentSizeInBytes","mainEdges":"segmentSizeInBytes"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:394","type":"CtLocalVariableImpl","sourcecode":"int int = int - (int)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:108","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long / (int)))"},"status":-1},{"failures":[],"tindex":"8c4262c5-db43-11e4-be33-cf06eb07ee98","variableMapping":{"val":"speed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:108","type":"CtReturnImpl","sourcecode":"return double + 0.1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:769","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[],"tindex":"8c4262c6-db43-11e4-be33-d5baab250ee3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:223","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, true);\n    if ((double > 30) && (com.graphhopper.reader.OSMWay.hasTag(\"surface\", java.util.Set<java.lang.String>)))\n        double = 30;\n    \n    long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean)\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n    \n    if ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.HashSet<java.lang.String>)) || boolean) {\n        if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\"))\n            long |= long;\n        else\n            long |= long;\n        \n    } else\n        long |= long;\n    \n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"service\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"residential\"));\n    long |= long;\n}"},"status":-2},{"failures":[],"tindex":"8c4262c7-db43-11e4-be33-31f6313953a2","variableMapping":{"heap":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:218","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap = null"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:30","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap.this(1000)"},"status":-2},{"failures":[],"tindex":"8c4262c8-db43-11e4-be33-b9fb1dfdf791","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalc3D:37","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.DistanceCalcEarth.calcDist(double, double, double, double)"},"status":-2},{"failures":[],"tindex":"8c4262c9-db43-11e4-be33-8f4d0b31b11f","variableMapping":{"i":"hash"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:200","type":"CtReturnImpl","sourcecode":"return (1 << int) - 12"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:345","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"8c4262ca-db43-11e4-be33-87b089375847","variableMapping":{"speed":"eleDelta"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:231","type":"CtAssignmentImpl","sourcecode":"double = 30"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:165","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":0},{"failureDictionary":{"com.graphhopper.storage.LevelGraphStorageTest.testCopyTo":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":74,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":390,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":127,"com.graphhopper.storage.LevelGraphStorageTest.testCannotBeLoadedViaDifferentClass":259,"com.graphhopper.GraphHopperAPITest.testNoLoad":257,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":303,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":181,"com.graphhopper.reader.OSMReaderTest.testFerry":104,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":213,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":214,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":142,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":414,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testMoreReal":37,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":50,"com.graphhopper.storage.LevelGraphStorageTest.testSetNodes":32,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":250,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":438,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":376,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":282,"com.graphhopper.coll.CompressedArrayTest.testCompress":230,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":420,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":361,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":84,"com.graphhopper.storage.LevelGraphStorageTest.testPriosWhileDeleting":260,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":374,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":110,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSortHighLevelFirst":321,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":90,"com.graphhopper.GraphHopperTest.testPrepare":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":73,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":381,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":80,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":173,"com.graphhopper.coll.IntDoubleBinHeapTest.testSpreading":97,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":461,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":66,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":210,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":248,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":477,"com.graphhopper.storage.LevelGraphStorageTest.internalDisconnect":4,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex":35,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":205,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":119,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":141,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":488,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":64,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":344,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":310,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":299,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":143,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":386,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat_withTurnCostEntries":147,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":226,"com.graphhopper.storage.LevelGraphStorageTest.testDetachEdge":5,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":96,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":92,"com.graphhopper.GraphHopperTest.testLoadOSM":53,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":314,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":490,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":311,"com.graphhopper.routing.util.EncodingManagerTest.testEncoderAcceptNoException":409,"com.graphhopper.reader.OSMReaderTest.testSort":237,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxAndMinSpeed":144,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":244,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":410,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":275,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":358,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":164,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":224,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":382,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":198,"com.graphhopper.routing.DijkstraTest.initializationError":399,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":387,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":161,"com.graphhopper.storage.LevelGraphStorageTest.testBounds":270,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":343,"com.graphhopper.storage.LevelGraphStorageTest.testPrios":258,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":475,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":273,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":360,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":153,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValue":129,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":249,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":149,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteAndOptimize":265,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":458,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testMaxAndMinSpeed":140,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSnappedPointAndGeometry":40,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":348,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraph":34,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":70,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testEdgeFilter":39,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":385,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":125,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":186,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":61,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteNodeForUnidir":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":60,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":285,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":397,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":279,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":289,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes":267,"com.graphhopper.storage.LevelGraphStorageTest.testSave_and_fileFormat":3,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode2":20,"com.graphhopper.coll.CompressedArrayTest.testCompress2":229,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":351,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":138,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":301,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":109,"com.graphhopper.GraphHopperAPITest.testLoad":255,"com.graphhopper.storage.LevelGraphStorageTest.testNoCreateCalled":264,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":445,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":345,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":167,"com.graphhopper.storage.LevelGraphStorageTest.testClone":9,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":485,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":150,"com.graphhopper.reader.OSMReaderTest.testBarriers":238,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":411,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraphBug":33,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":427,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":63,"com.graphhopper.util.GHUtilityTest.testCopy":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":184,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testDifferentVehicles":48,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":454,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":305,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":421,"com.graphhopper.routing.PathTest.testFindInstruction":201,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":417,"com.graphhopper.storage.LevelGraphStorageTest.testPropertiesWithNoInit":268,"com.graphhopper.coll.IntDoubleBinHeapTest.testBasic":95,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":151,"com.graphhopper.util.EdgeSkipIteratorTest.testUpdateFlags":93,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":136,"com.graphhopper.storage.LevelGraphStorageTest.testInfinityWeight":272,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":302,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":426,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":177,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":172,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":103,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":160,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":86,"com.graphhopper.storage.LevelGraphStorageTest.testEnsureSize":261,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":286,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":434,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":407,"com.graphhopper.routing.DijkstraBidirectionRefTest.initializationError":402,"com.graphhopper.storage.LevelGraphStorageTest.testFlags":11,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":339,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":364,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":486,"com.graphhopper.util.InstructionListTest.testWayList2":212,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":437,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":191,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":315,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":179,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":222,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":280,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":253,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":116,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":298,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":460,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":337,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":423,"com.graphhopper.storage.LevelGraphStorageTest.testFootMix":13,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":462,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":370,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":283,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":323,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBug1":62,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":166,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":239,"com.graphhopper.routing.AStarTest.initializationError":474,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":76,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":155,"com.graphhopper.routing.PathBidirRefTest.testExtract":199,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":447,"com.graphhopper.storage.LevelGraphStorageTest.testEnabledElevation":22,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":465,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints120":44,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":216,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":379,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":300,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":118,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":378,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":464,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":320,"com.graphhopper.util.GHUtilityTest.testSort2":479,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":71,"com.graphhopper.reader.OSMReaderTest.testMain":236,"com.graphhopper.storage.LevelGraphStorageTest.testDoThrowExceptionIfDimDoesNotMatch":262,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":206,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":288,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":466,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":227,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testGrid":45,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":471,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectional":23,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":106,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":192,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":276,"com.graphhopper.storage.LevelGraphStorageTest.test8BytesFlags":108,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdgesWithDelete":17,"com.graphhopper.storage.LevelGraphStorageTest.testDirectional":31,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete":15,"com.graphhopper.routing.QueryGraphTest.testIterationBug_163":197,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":431,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":158,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":123,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":489,"com.graphhopper.storage.LevelGraphStorageTest.testAddLocation":19,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":112,"com.graphhopper.storage.GraphHopperStorageTest.testClone":168,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":362,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":380,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":107,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":130,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":347,"com.graphhopper.storage.LevelGraphStorageTest.testDisconnectEdge":0,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":456,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeFilter":2,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":365,"com.graphhopper.routing.PathTest.testTime":113,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":453,"com.graphhopper.storage.LevelGraphStorageTest.testNameIndex":30,"com.graphhopper.storage.LevelGraphStorageTest.testEdges":10,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":132,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":327,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":317,"com.graphhopper.storage.LevelGraphStorageTest.testCheckFirstNode":269,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":373,"com.graphhopper.reader.OSMReaderTest.testRelation":388,"com.graphhopper.util.GHUtilityTest.testSortDirected":482,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxAndMinSpeed":126,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":392,"com.graphhopper.GraphHopperTest.testFootOnly":55,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":413,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":105,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":324,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testReverseSpatialKey":101,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":408,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":59,"com.graphhopper.reader.OSMElementTest.testSetTags":484,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":81,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":424,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":319,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":187,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":389,"com.graphhopper.routing.QueryGraphTest.testOneWay":396,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":318,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":223,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":416,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":309,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":220,"com.graphhopper.reader.OSMReaderTest.testWithBounds":245,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":436,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":203,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":297,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":368,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":393,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":137,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":375,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":405,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectionalEdgeFilter":6,"com.graphhopper.storage.LevelGraphStorageTest.testBigDataEdge":263,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":448,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":435,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":422,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":330,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":292,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":207,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":335,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":193,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":156,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":165,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":395,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":57,"com.graphhopper.util.InstructionListTest.testWayList":211,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":359,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":463,"com.graphhopper.GraphHopperAPITest.testDisconnected179":256,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":185,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":487,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":293,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":215,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":363,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":432,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":196,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":204,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":372,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":194,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":470,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":231,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":342,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":325,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":159,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":162,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":295,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":294,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":102,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":174,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":459,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":354,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":68,"com.graphhopper.routing.DijkstraOneToManyTest.initializationError":401,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":89,"com.graphhopper.storage.LevelGraphStorageTest.testPillarNodes":29,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":442,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":450,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":254,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeProperties":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":277,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":78,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":340,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testNoErrorOnEdgeCase_lastIndex":322,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":473,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":336,"com.graphhopper.routing.PathTest.testWayList":114,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":383,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":451,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":367,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":441,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":146,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":79,"com.graphhopper.storage.LevelGraphStorageTest.testCreateDuplicateEdges":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":308,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":291,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":469,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":349,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":133,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":281,"com.graphhopper.storage.LevelGraphStorageTest.testDozendEdges":18,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex2":41,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex3":42,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph":43,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":429,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":483,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":251,"com.graphhopper.util.GHUtilityTest.testSort":480,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":313,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":377,"com.graphhopper.routing.util.EncodedDoubleValueTest.testSetDoubleValue":128,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":228,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":415,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":468,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":163,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":278,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":341,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testRMin":100,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":304,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":328,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":331,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":492,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":124,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":394,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":122,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":329,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":233,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":274,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":449,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":117,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":446,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":77,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":287,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":202,"com.graphhopper.storage.LevelGraphStorageTest.testGetLocations":266,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":190,"com.graphhopper.routing.PathTest.testFound":403,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":115,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":234,"com.graphhopper.storage.LevelGraphStorageTest.testCreateLocation":28,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeightIfAdvancedEncoder":1,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":467,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":476,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":284,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":111,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":171,"com.graphhopper.util.InstructionListTest.testEmptyList":478,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":65,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":455,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph2":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":69,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":208,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":440,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testMaxAndMinSpeed":120,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":439,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":350,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":72,"com.graphhopper.reader.PrinctonReaderTest.testRead":195,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":178,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testWayGeometry":38,"com.graphhopper.storage.LevelGraphStorageTest.testUpdateUnidirectional":14,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":154,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":221,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":366,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":290,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":180,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes2":8,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":157,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":419,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":430,"com.graphhopper.routing.util.EncodingManagerTest.testTurnFlagCombination":406,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":452,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":425,"com.graphhopper.reader.OSMReaderTest.testFoot":235,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":189,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":398,"com.graphhopper.storage.LevelGraphStorageTest.testCopyProperties":99,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":217,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":225,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":412,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":218,"com.graphhopper.reader.OSMReaderTest.testOneWay":247,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":346,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":357,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":356,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":296,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":418,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":353,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":428,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":170,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":188,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":85,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":219,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":91,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":131,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":83,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":332,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":209,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testFindingWayGeometry":36,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":369,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":391,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":246,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":338,"com.graphhopper.routing.PathBidirRefTest.testExtract2":200,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":491,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":326,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":56,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":252,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":307,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":316,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":175,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":333,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":457,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":241,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":134,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":384,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":334,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":88,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":433,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":312,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":176,"com.graphhopper.util.GHUtilityTest.testEdgeStuff":481,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdges":12,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":443,"com.graphhopper.GraphHopperTest.testFootAndCar":232,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":352,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode":16,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":139,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints32":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":183,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":404,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":444,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":152,"com.graphhopper.GraphHopperTest.testPrepareOnly":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCorrectWeight":75,"com.graphhopper.GraphHopperTest.testVia":51,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":306,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":472,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":182,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":243,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeight":98,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":145,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":355,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":135,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":242,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":371,"com.graphhopper.routing.AStarBidirectionTest.initializationError":400,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":121,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeReturn":271,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete3":26,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete2":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":148}}]

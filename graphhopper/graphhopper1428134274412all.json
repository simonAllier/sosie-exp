[{"failures":[],"tindex":"4cd2c02d-daa0-11e4-8af3-0bc10596d15a","variableMapping":{"size":"y2","from":"x2","end":"y2"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:360","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int > (int)))\n    throw new java.lang.IllegalArgumentException((((((\"Illegal interval: \" + int) + \", \") + int) + \", size:\") + (int)));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:129","type":"CtIfImpl","sourcecode":"if ((int == int) && (int == int))\n    break;\n"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"tindex":"4cd2c02e-daa0-11e4-8af3-ad396ae13ba6","variableMapping":{"max":"segmentSizePower","tmpSize":"segmentsToCreate"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:172","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int = int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:109","type":"CtTryImpl","sourcecode":"try {\n    byte[][] byte[][] = java.util.Arrays.java.util.Arrays.copyOf(byte[][], ((byte[][].int) + int));\n    for (int int = byte[][].int ; int < (byte[][].int) ; int++) {\n        byte[][][int] = new byte[1 << (int)];\n    }\n    byte[][] = byte[][];\n} catch (java.lang.OutOfMemoryError java.lang.OutOfMemoryError) {\n    throw new java.lang.OutOfMemoryError((((((((((((java.lang.OutOfMemoryError.getMessage()) + \" - problem when allocating new memory. Old capacity: \") + long) + \", new bytes:\") + long) + \", segmentSizeIntsPower:\") + (int)) + \", new segments:\") + int) + \", existing:\") + (byte[][].int)));\n}"},"status":-1},{"failures":[],"tindex":"4cd2c02f-daa0-11e4-8af3-074601a442b4","variableMapping":{"str":"entryVal"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:181","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) > 64)\n    throw new java.lang.UnsupportedOperationException((\"Strings needs to fit into a \\'long\\' but length was \" + (java.lang.String.length())));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:164","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(java.lang.String);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[],"tindex":"4cd2e740-daa0-11e4-8af3-1d236d18b823","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:103","type":"CtLocalVariableImpl","sourcecode":"long long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:273","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"status":-2},{"failures":[121,122,123,124,125,126,127,128,129],"tindex":"4cd2e741-daa0-11e4-8af3-ffd7076058e6","variableMapping":{"cap":"code"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:101","type":"CtIfImpl","sourcecode":"if (int < 15)\n    int = 15;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:278","type":"CtIfImpl","sourcecode":"if (java.lang.Integer != null)\n    int = java.lang.Integer;\n"},"status":-1},{"failures":[],"tindex":"4cd30e52-daa0-11e4-8af3-63112e735d44","variableMapping":{"flags":"flags","tmpValue":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtReturnImpl","sourcecode":"return long | long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:122","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[130,131,123,132,133,134],"tindex":"4cd30e53-daa0-11e4-8af3-135b1d54755d","variableMapping":{"fullyLoaded":"isPusingSection"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1079","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"No configuration changes are possible after loading the graph\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:499","type":"CtIfImpl","sourcecode":"if (boolean && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\"))))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-1},{"failures":[135],"tindex":"4cd30e54-daa0-11e4-8af3-01299083fc12","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:329","type":"CtIfImpl","sourcecode":"if ((double >= 0) && ((double < 0) || (double < double)))\n    double = double;\n"},"status":-1},{"failures":[2,3,4,5,6,8,9,13,14,15,136,137,138,139,60,61,62,140,141,142,143,144,145,146,147,148,149,150,151,152,63,64,65,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173],"tindex":"4cd33565-daa0-11e4-8af3-f9fdcc1da849","variableMapping":{"costs":"lat"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:612","type":"CtIfImpl","sourcecode":"if (double != 0)\n    throw new java.lang.IllegalArgumentException(\"Only restrictions are supported\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:222","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":-1},{"failures":[],"tindex":"4cd33566-daa0-11e4-8af3-83eee66f640c","variableMapping":{"i":"weightLong"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:90","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 7"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:401","type":"CtAssignmentImpl","sourcecode":"long = ((long)((double * (com.graphhopper.storage.LevelGraphStorage.double)))) << 2"},"status":-2},{"failures":[],"tindex":"4cd33567-daa0-11e4-8af3-5f63e3ece3d0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:254","type":"CtLocalVariableImpl","sourcecode":"long long = long & (long)"},"status":-2},{"failures":[],"tindex":"4cd33568-daa0-11e4-8af3-114e7549c9e2","variableMapping":{"type":"defaultType"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.DAType:76","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.isSynched())\n    throw new java.lang.IllegalStateException(\"something went wrong as DataAccess object is already synched!?\");\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:89","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType == null)\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType;\n"},"status":0},{"failures":[],"tindex":"4cd33569-daa0-11e4-8af3-fbf4732d043a","variableMapping":{"res":"directionBitMask","maxBit":"forwardBit","value":"directionBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:290","type":"CtIfImpl","sourcecode":"if ((long & long) != 0)\n    long |= 1;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:585","type":"CtIfImpl","sourcecode":"if ((((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.HashSet<java.lang.String>)) || (com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\"))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"oneway:bicycle\", \"no\")))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"cycleway\", java.util.HashSet<java.lang.String>)))) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\"))\n        long |= long;\n    else\n        long |= long;\n    \n} else {\n    long |= long;\n}"},"status":0},{"failures":[0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,174,175,176,33,34,35,36,177,178,42,179,180,181,44,46,48,51,52,53,54,60,61,62,63,64,65,182,183,184,185,67,69,71,74,75,76,77,79,81,82,83,84,86,87,89,90,91,92,94,95,96,98,99,100,101,103,106,107,108,110,111,112,113,114,115,116,117,118,119,120],"tindex":"4cd35c7a-daa0-11e4-8af3-61829a4930ba","variableMapping":{"offset":"value","bytes":"bytes","value":"value"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilLittle:54","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 3)] = ((byte)(int >> 24))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:56","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 1)] = ((byte)(int >> 8))"},"status":-1},{"failures":[0,1,2,3,4,5,6,7,8,9,10,186,187,11,12,13,14,15,16,17,18,19,121,20,21,22,23,188,24,189,190,191,33,192,34,35,36,37,177,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,178,213,214,215,216,42,179,217,218,219,220,180,221,222,181,223,224,225,226,148,150,161,227,228,229,230,231,78,232,233,79,80,234,235,236,81,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,82,257,258,259,260,261,83,262,263,264,265,84,266,85,86,267,268,269,87,88,270,271,272,89,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,90,293,294,295,296,297,91,298,299,300,301,92,302,93,94,303,304,95,305,306,96,97,307,308,309,98,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,99,330,331,332,333,334,100,335,336,337,338,101,339,102,103,340,341,162,163,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,135,365,366,367,368,369,370,371,372,373,374,122,375,376,377,378,379,380,381,130,382,383,384,385,386,387,388,131,389,123,390,391,392,393,394,395,396,132,397,398,399,400,401,124,402,403,404,125,405,406,407,408,409,410,411,412,413,133,414,415,416,417,106,107,418,419,126,420,421,422,127,423,424,425,426,427,428,429,430,431,134,432,433,434,435,436,128,437,129,438,439,440,441,442,443,108,109,444,445,446,447,448,449,450,451,452,164,453,454,455,165,166,456,457,167,458,459,110,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,114,117],"tindex":"4cd3838b-daa0-11e4-8af3-6f6c5593a21a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:211","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.add(com.graphhopper.routing.util.AbstractFlagEncoder)"},"status":-1},{"failures":[],"tindex":"4cd3838c-daa0-11e4-8af3-f3dba3f58a91","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PrinctonReader:64","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:291","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.EncodedDoubleValue.getDoubleValue(long)"},"status":-2},{"failures":[],"tindex":"4cd3838d-daa0-11e4-8af3-7d9cf13a94e1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:202","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if ((((!(\"hiking\".equals(java.lang.String))) && (!(\"mountain_hiking\".equals(java.lang.String)))) && (!(\"demanding_mountain_hiking\".equals(java.lang.String)))) && (!(\"alpine_hiking\".equals(java.lang.String))))\n        return 0;\n    \n} "},"status":0},{"failures":[5,186,187,189,190,191,177,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,178,213,214,215,216,42,179,217,218,219,220,180,221,222,181,223,224,225,226,148,150,161,227,228,229,230,231,78,232,233,79,80,234,235,236,81,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,82,257,258,259,260,261,83,262,263,264,265,84,266,85,86,267,268,269,87,88,270,271,272,89,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,90,293,294,295,296,297,91,298,299,300,301,92,302,93,94,303,304,95,305,306,96,97,307,308,309,98,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,99,330,331,332,333,334,100,335,336,337,338,101,339,102,103,340,341,346,357,358,359,360,361,362,363,364,135,365,366,367,368,369,370,371,386,387,436,438,440,441,442,443,108,109,444,445,446,447,448,449,450,451,452,164,453,454,455,165,166,456,457,167,458,459,110,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,114],"tindex":"4cd3838e-daa0-11e4-8af3-dd867df32de9","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphExtension:170","type":"CtReturnImpl","sourcecode":"return \"NoExt\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:293","type":"CtReturnImpl","sourcecode":"return \"car\""},"status":-1},{"failures":[],"tindex":"4cd3838f-daa0-11e4-8af3-15fe0d41c032","variableMapping":{"entry":"highway","entryVal":"highway"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:145","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\"|\")) {\n    java.lang.String = java.lang.String;\n    java.lang.String = java.lang.String.split(\"\\\\|\")[0];\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:363","type":"CtIfImpl","sourcecode":"if (((java.util.Set<java.lang.String>.contains(java.lang.String)) || ((double > 0) && (double <= 20))) || (com.graphhopper.reader.OSMWay.hasTag(\"sidewalk\", java.util.HashSet<java.lang.String>))) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.HashSet<java.lang.String>))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":0},{"failures":[374,122,130,131,123,132,403,133,421,134],"tindex":"4cd3aaa0-daa0-11e4-8af3-11f25276dd5c","variableMapping":{"width":"shift","lonSimilar":"shift"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:94","type":"CtAssignmentImpl","sourcecode":"int = (int) - 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:194","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedDoubleValue.getBits()"},"status":-1},{"failures":[2,5,12,24,361,366],"tindex":"4cd3aaa1-daa0-11e4-8af3-39161777dec1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:241","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\"))\n    long |= long;\nelse\n    long |= long;\n"},"status":-1},{"failures":[],"tindex":"4cd3aaa2-daa0-11e4-8af3-3b72fca339fd","variableMapping":{"iter":"edgeState","counter":"tmpPrevEdge"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:93","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int++;\n}"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:275","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeSkipIterator.next()) {\n    if ((com.graphhopper.util.EdgeSkipIterator.getEdge()) == (com.graphhopper.util.EdgeIteratorState.getEdge())) {\n        boolean = true;\n        break;\n    } \n    int = com.graphhopper.util.EdgeSkipIterator.getEdge();\n}"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,186,187,11,12,13,14,15,16,17,18,19,20,21,22,23,24,478,189,190,191,479,480,33,481,482,192,34,35,36,37,483,484,177,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,178,213,214,215,216,42,179,217,218,219,220,180,221,222,181,223,224,485,486,487,488,489,490,225,491,492,493,494,495,496,226,497,55,56,57,58,498,59,138,139,60,61,62,140,499,141,500,142,143,144,145,146,501,147,148,149,150,502,151,152,63,64,65,153,503,154,504,155,156,157,158,159,505,160,161,227,228,229,230,231,78,232,233,79,80,234,235,81,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,82,257,258,259,260,261,83,262,263,264,265,84,266,85,86,267,268,269,87,88,270,271,89,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,90,293,294,295,296,297,91,298,299,300,301,92,302,93,94,303,304,95,305,306,96,97,307,308,98,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,99,330,331,332,333,334,100,335,336,337,338,101,339,102,103,340,341,162,163,344,351,352,353,354,355,356,106,107,440,441,442,443,108,109,444,445,446,447,448,449,450,451,452,164,453,454,455,165,166,456,457,167,458,459,110,460,461,462,463,464,466,467,468,469,470,471,472,473,474,475,476,477,111,111,112,112,506,506,113,113,114,114,115,115,116,116,117,117,118,118,507,507,119,119,120,120],"tindex":"4cd3d1b3-daa0-11e4-8af3-9d7b75ebf9de","variableMapping":{"properties":"this"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:190","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.create(100)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:137","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"nameIndex.version\", com.graphhopper.util.Constants.int)"},"status":-1},{"failures":[],"tindex":"4cd3d1b4-daa0-11e4-8af3-6d32d1fa670a","variableMapping":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"index","edge":"index"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:445","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.util.EdgeIterator.int))\n    break;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:65","type":"CtWhileImpl","sourcecode":"nextState : while (!(java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.empty())) {\n    com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState = java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.pop();\n    final int int = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.int;\n    final com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator;\n    if (com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.isStart()) {\n        int[][int] = int;\n        int[][int] = int;\n        (int)++;\n        gnu.trove.stack.array.TIntArrayStack.push(int);\n        com.graphhopper.coll.GHBitSetImpl.set(int);\n        com.graphhopper.util.EdgeIterator = com.graphhopper.storage.GraphStorage.createEdgeExplorer(com.graphhopper.routing.util.EdgeFilter).setBaseNode(int);\n    } else {\n        com.graphhopper.util.EdgeIterator = com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.util.EdgeIterator;\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n    }\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if ((int[][int]) == 0) {\n            java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.resumeState(int, com.graphhopper.util.EdgeIterator));\n            java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.startState(int));\n            continue nextState;\n        } else if (com.graphhopper.coll.GHBitSetImpl.contains(int)) {\n            int[][int] = java.lang.Math.java.lang.Math.min(int[][int], int[][int]);\n        } \n    }\n    if ((int[][int]) == (int[][int])) {\n        gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList = new gnu.trove.list.array.TIntArrayList();\n        int int;\n        while ((int = gnu.trove.stack.array.TIntArrayStack.pop()) != int) {\n            gnu.trove.list.array.TIntArrayList.add(int);\n            com.graphhopper.coll.GHBitSetImpl.clear(int);\n        }\n        gnu.trove.list.array.TIntArrayList.add(int);\n        com.graphhopper.coll.GHBitSetImpl.clear(int);\n        java.util.ArrayList<gnu.trove.list.array.TIntArrayList>.add(gnu.trove.list.array.TIntArrayList);\n    } \n}"},"status":-2},{"failures":[107],"tindex":"4cd3d1b5-daa0-11e4-8af3-e123e38fd778","variableMapping":{"tmp":"fwdFaster"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:135","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:210","type":"CtAssignmentImpl","sourcecode":"double = (double * (((double * double) + (double * double)) + (1 * double))) / double"},"status":-1},{"failures":[],"tindex":"4cd3d1b6-daa0-11e4-8af3-0700fda785bd","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PrinctonReader:64","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:155","type":"CtLocalVariableImpl","sourcecode":"double double = 0"},"status":-2},{"failures":[],"tindex":"4cd3d1b7-daa0-11e4-8af3-072753f2ce78","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistancePlaneProjection:73","type":"CtReturnImpl","sourcecode":"return \"PLANE_PROJ\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:112","type":"CtReturnImpl","sourcecode":"return ((java.lang.String)(java.util.Map<java.lang.String, java.lang.Object>.get(java.lang.String)))"},"status":-2},{"failures":[136,137,508,168,170,171,172,173,509],"tindex":"4cd41fd8-daa0-11e4-8af3-2954504a67eb","variableMapping":{"strLen":"allBits","res":"initialBits"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:192","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 64 - int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:98","type":"CtAssignmentImpl","sourcecode":"long = 1L << (int - 1)"},"status":-1},{"failures":[],"tindex":"4cd41fd9-daa0-11e4-8af3-716b63c5cb53","variableMapping":{"flags":"flags","scDirMask":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:259","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:134","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double)"},"status":-2},{"failures":[136,137,508,168,169,170,171,172,173],"tindex":"4cd41fda-daa0-11e4-8af3-1bc54fd8497f","variableMapping":{"r":"lat","x":"lat","absY":"midLat"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:39","type":"CtAssignmentImpl","sourcecode":"double = (double + double) / (double - double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:224","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":-1},{"failures":[],"tindex":"4cd41fdb-daa0-11e4-8af3-596d0e6cadf1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:77","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeZeroDegreeNodes()"},"status":-2},{"failures":[],"tindex":"4cd41fdc-daa0-11e4-8af3-c5c612a8b9b0","variableMapping":{"high":"flags","highKey":"flags","key":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:123","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:336","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[],"tindex":"4cd41fdd-daa0-11e4-8af3-f37046b490c8","variableMapping":{"high":"flags","len":"flags","start":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:117","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:119","type":"CtIfImpl","sourcecode":"if (boolean)\n    return com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, double);\n"},"status":0},{"failures":[374,131,123,403,421,128],"tindex":"4cd41fde-daa0-11e4-8af3-dbaaab50900f","variableMapping":{"val":"trackType","existing":"trackType","key":"highway"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.TranslationMap:210","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    throw new java.lang.IllegalStateException((((((\"Cannot overwrite key \" + java.lang.String) + \" with \") + java.lang.String) + \", was: \") + java.lang.String));\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:490","type":"CtIfImpl","sourcecode":"if ((((\"track\".equals(java.lang.String)) && ((java.lang.String == null) || (!(\"grade1\".equals(java.lang.String))))) || ((\"path\".equals(java.lang.String)) && (java.lang.String == null))) || (java.util.Set<java.lang.String>.contains(java.lang.String))) {\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.int, true);\n} "},"status":-1},{"failures":[],"tindex":"4cd41fdf-daa0-11e4-8af3-afa40af5b99f","variableMapping":{"res":"wayTypeName","algo":"pavementName"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.GHRequest:170","type":"CtReturnImpl","sourcecode":"return ((java.lang.String + \"(\") + (java.lang.String)) + \")\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:406","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty()) {\n    if ((int == 0) || (int == 3))\n        return \"\";\n    \n    return java.lang.String;\n} else {\n    if (java.lang.String.isEmpty())\n        return java.lang.String;\n    else\n        return (java.lang.String + \", \") + java.lang.String;\n    \n}"},"status":-2},{"failures":[],"tindex":"4cd41fe0-daa0-11e4-8af3-b9ea306f2379","variableMapping":{"high":"acceptBit","highKey":"acceptBit","key":"acceptBit"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:123","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:262","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"4cd446f1-daa0-11e4-8af3-b37c40961253","variableMapping":{"start":"value","delta":"bytePos"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:77","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:85","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":0},{"failures":[360],"tindex":"4cd446f2-daa0-11e4-8af3-c3a6d49d953a","variableMapping":{"tt":"highwayValue","this":"this","trackTypeSpeedMap":"trackTypeSpeedMap","speed":"speed"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:152","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.util.Helper.(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String);\n    if (java.lang.Integer != null)\n        java.lang.Integer = java.lang.Integer;\n    \n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:149","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"track\")) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if (!com.graphhopper.util.Helper.(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n        java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String);\n        if (java.lang.Integer != null)\n            java.lang.Integer = java.lang.Integer;\n        \n    } \n} "},"status":-1},{"failures":[],"tindex":"4cd446f3-daa0-11e4-8af3-7764064962ef","variableMapping":{"err":"speed","tmpErr":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED","y1":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED","dLon":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED","sLat":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:139","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int += int;\n    int += int;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:359","type":"CtIfImpl","sourcecode":"if ((int > (com.graphhopper.routing.util.BikeCommonFlagEncoder.int)) && ((!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", java.util.HashSet<java.lang.String>))) && (com.graphhopper.reader.OSMWay.hasTag(\"highway\", java.util.HashSet<java.lang.String>)))) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))\n        int = (com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2;\n    else\n        int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int;\n    \n} "},"status":-2},{"failures":[],"tindex":"4cd446f4-daa0-11e4-8af3-5718f95e56ba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:116","type":"CtForImpl","sourcecode":"for (int = 1 ; (int * 2) <= (int) ; int = int) {\n    int = int * 2;\n    if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n        int++;\n    } \n    if (double > (float[][int])) {\n        int[][int] = int[][int];\n        float[][int] = float[][int];\n    } else {\n        break;\n    }\n}"},"status":-2},{"failures":[],"tindex":"4cd446f5-daa0-11e4-8af3-657f37a528b5","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PrinctonReader:64","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:762","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed(com.graphhopper.reader.OSMWay)"},"status":-2},{"failures":[510,164,470,472,476],"tindex":"4cd446f6-daa0-11e4-8af3-8339b5de9ffa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:132","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"4cd446f7-daa0-11e4-8af3-0d4cfd5f273f","variableMapping":{"nodeFlags":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:846","type":"CtUnaryOperatorImpl","sourcecode":"~long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:417","type":"CtOperatorAssignmentImpl","sourcecode":"com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long |= com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long"},"status":-2},{"failures":[],"tindex":"4cd446f8-daa0-11e4-8af3-d57a11de7141","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:171","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"UTF-8\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:733","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.routing.util.AbstractFlagEncoder.com.graphhopper.routing.util.AbstractFlagEncoder.getStr(java.lang.String, java.lang.String)"},"status":-2},{"failures":[],"tindex":"4cd446f9-daa0-11e4-8af3-97481d61daf9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:345","type":"CtLocalVariableImpl","sourcecode":"int int = java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.size()"},"status":-2},{"failures":[],"tindex":"4cd446fa-daa0-11e4-8af3-0f13767e4f3e","variableMapping":{"size":"length"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:111","type":"CtIfImpl","sourcecode":"if ((int) <= 0) {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:295","type":"CtInvocationImpl","sourcecode":"java.lang.System.java.lang.System.arraycopy(byte[], int, byte[], 0, int)"},"status":0},{"failures":[],"tindex":"4cd446fb-daa0-11e4-8af3-95e26dd55e15","variableMapping":{"size":"oldRelationFlags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:132","type":"CtReturnImpl","sourcecode":"return (long) / 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:162","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[2,5,186,12,24,189,190,191,177,193,194,201,203,208,215,218,180,223,227,231,79,81,237,238,245,247,252,259,263,84,267,87,89,273,274,281,283,288,295,299,92,303,95,96,98,310,311,318,320,325,332,336,101,340,162,346,355,361,364,366,370,441,444,445,448,449,452,454,165,166,462,463,464,467,472,473,474,476,477,114,117],"tindex":"4cd46e0c-daa0-11e4-8af3-53a7cc64188c","variableMapping":{"todoBytes":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:102","type":"CtIfImpl","sourcecode":"if (long <= 0)\n    return false;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:681","type":"CtReturnImpl","sourcecode":"return (long & (long)) != 0"},"status":-1},{"failures":[511,512,510,513,514,472,476],"tindex":"4cd46e0d-daa0-11e4-8af3-a9cc1c7e9c7e","variableMapping":{"keys":"keys","i":"i"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:188","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][(int / 2)]"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:217","type":"CtAssignmentImpl","sourcecode":"float[][int] = ((float)(double))"},"status":-1},{"failures":[2,5,10,12,17,18,363],"tindex":"4cd46e0e-daa0-11e4-8af3-237a0f1fab87","variableMapping":{"name":"highwayValue"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:71","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || (java.lang.String.isEmpty())) {\n    return 0;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:188","type":"CtIfImpl","sourcecode":"if (!(java.util.Map<java.lang.String, java.lang.Integer>.containsKey(java.lang.String)))\n    return 0;\n"},"status":-1},{"failures":[],"tindex":"4cd46e0f-daa0-11e4-8af3-138414cb6c69","variableMapping":{"autoRemoveTemporary":"empty"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:85","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:43","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"status":0},{"failures":[136,137,508,168,169,170,171,172,173],"tindex":"4cd46e10-daa0-11e4-8af3-d10203b6e459","variableMapping":{"distInMeter":"lat"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:94","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 1000"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:245","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":-1},{"failures":[],"tindex":"4cd46e11-daa0-11e4-8af3-3bb5c51ef38b","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.MapEntry:92","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:215","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-2},{"failures":[],"tindex":"4cd46e12-daa0-11e4-8af3-6779ac431735","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:94","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.GraphHopperStorage.internalEdgeAdd(int, int)"},"status":-2},{"failures":[374,130,123,132,403,125,133,421,127,134],"tindex":"4cd46e13-daa0-11e4-8af3-835b25755fd2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:397","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"4cd46e14-daa0-11e4-8af3-d5784be11ba0","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:107","type":"CtLocalVariableImpl","sourcecode":"double double = 360.0 / 16"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:291","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.EncodedDoubleValue.getDoubleValue(long)"},"status":-2},{"failures":[24,194,202,204,205,207,211,212,179,217,232,238,246,248,249,251,255,256,83,262,274,282,284,285,287,291,292,91,298,311,319,321,322,324,328,329,100,335,351,353,354],"tindex":"4cd46e15-daa0-11e4-8af3-011a115f5c7e","variableMapping":{"oldPriorities":"mKeys"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:411","type":"CtAssignmentImpl","sourcecode":"int[] = null"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:47","type":"CtAssignmentImpl","sourcecode":"int[] = new int[int]"},"status":-1},{"failures":[],"tindex":"4cd46e16-daa0-11e4-8af3-29b8ba6a1eb4","variableMapping":{"maxSpeed":"com.graphhopper.util.DistanceCalcEarth.KM_MILE"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:767","type":"CtReturnImpl","sourcecode":"return double * 0.9"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:372","type":"CtTryImpl","sourcecode":"try {\n    int int;\n    int int = java.lang.String.indexOf(\"mp\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n        int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n        return int * (com.graphhopper.util.DistanceCalcEarth.double);\n    } \n    int int = java.lang.String.indexOf(\"knots\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n        int = java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n        return int * 1.852;\n    } \n    int int = java.lang.String.indexOf(\"km\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n    } else {\n        int = java.lang.String.indexOf(\"kph\");\n        if (int > 0) {\n            java.lang.String = java.lang.String.substring(0, int).trim();\n        } \n    }\n    return java.lang.Integer.java.lang.Integer.parseInt(java.lang.String);\n} catch (java.lang.Exception java.lang.Exception) {\n    return -1;\n}"},"status":-2},{"failures":[374,122,130,123,132,403,125,133,421,127,134],"tindex":"4cd46e17-daa0-11e4-8af3-5bfb5bc496ed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:45","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String"},"status":-1},{"failures":[],"tindex":"4cd46e18-daa0-11e4-8af3-8bfeb5dff7b7","variableMapping":{"prevEle":"angle","ele":"angle"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:727","type":"CtAssignmentImpl","sourcecode":"double = double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:44","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"status":-2},{"failures":[],"tindex":"4cd46e19-daa0-11e4-8af3-8d1a10448b41","variableMapping":{"bm":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:214","type":"CtIfImpl","sourcecode":"if (long <= 0) {\n    throw new java.lang.IllegalStateException((\"invalid bitmask:\" + long));\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:411","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry : com.graphhopper.routing.util.AbstractFlagEncoder.analyzeTurnRelation(com.graphhopper.reader.OSMTurnRelation, com.graphhopper.reader.OSMReader)) {\n    com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = gnu.trove.map.TLongObjectMap<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.get(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.getItemId());\n    if (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry != null) {\n        com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long |= com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long;\n    } else {\n        gnu.trove.map.TLongObjectMap<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.put(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.getItemId(), com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n    }\n}"},"status":-2},{"failures":[54,77],"tindex":"4cd46e1a-daa0-11e4-8af3-61117f18bb0c","variableMapping":{"mGarbage":"closed"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseArray:153","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:304","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[365,515,516],"tindex":"4cd46e1b-daa0-11e4-8af3-d16aa88eaa7d","variableMapping":{"cp":"str"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:122","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"S\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:379","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int).trim()"},"status":-1},{"failures":[],"tindex":"4cd46e1c-daa0-11e4-8af3-79c9695726ed","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:219","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMDirectory().find(\"tempIndexCopy\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:98","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = java.util.Map<java.lang.String, com.graphhopper.storage.DataAccess>.get(java.lang.String)"},"status":-2},{"failures":[],"tindex":"4cd46e1d-daa0-11e4-8af3-6d65031c2049","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:410","type":"CtIfImpl","sourcecode":"if (int == (int + int)) {\n    return ~(int + int);\n} else if ((int[][int]) == int) {\n    return int;\n} else {\n    return ~int;\n}"},"status":-2},{"failures":[],"tindex":"4cd4942e-daa0-11e4-8af3-c71f752ec3bd","variableMapping":{"com.graphhopper.reader.OSMReader.EMPTY":"encoderCount","tmpNode":"encoderCount"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:634","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int))\n    continue;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:408","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder = java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.get(int);\n    for (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry : com.graphhopper.routing.util.AbstractFlagEncoder.analyzeTurnRelation(com.graphhopper.reader.OSMTurnRelation, com.graphhopper.reader.OSMReader)) {\n        com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = gnu.trove.map.TLongObjectMap<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.get(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.getItemId());\n        if (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry != null) {\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long |= com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long;\n        } else {\n            gnu.trove.map.TLongObjectMap<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.put(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.getItemId(), com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"4cd4942f-daa0-11e4-8af3-795abd147f6a","variableMapping":{"mSize":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseArray:349","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:325","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int"},"status":-2},{"failures":[510,517],"tindex":"4cd49430-daa0-11e4-8af3-4d2cfe55179c","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1506","type":"CtReturnImpl","sourcecode":"return 4"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.Edge:44","type":"CtReturnImpl","sourcecode":"return java.lang.Double.java.lang.Double.compare(double, com.graphhopper.storage.Edge.double)"},"status":-1},{"failures":[],"tindex":"4cd49431-daa0-11e4-8af3-e3d73660ac17","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:176","type":"CtReturnImpl","sourcecode":"return \"mtb\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.ShortestWeighting:45","type":"CtReturnImpl","sourcecode":"return \"SHORTEST\""},"status":-2},{"failures":[],"tindex":"4cd49432-daa0-11e4-8af3-4393b7741d23","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:53","type":"CtLocalVariableImpl","sourcecode":"final double double = 1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:50","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.EdgeSkipIterState.getDistance()"},"status":-2},{"failures":[],"tindex":"4cd49433-daa0-11e4-8af3-5b0555858452","variableMapping":{"lastTime":"wayBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.StopWatch:59","type":"CtAssignmentImpl","sourcecode":"long = -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:511","type":"CtAssignmentImpl","sourcecode":"long = (1L << int) - 1"},"status":0},{"failures":[0,6,7,8,10,196,42,46,50,182,518,69,73,519,520,78,79,240,87,276,297,95,96,313,334,521,522],"tindex":"4cd49434-daa0-11e4-8af3-776e17f1fa46","variableMapping":{"tmpNo":"bytePos"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:147","type":"CtAssignmentImpl","sourcecode":"int = 16"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:85","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"4cd49435-daa0-11e4-8af3-7bf55b4cc561","variableMapping":{"com.graphhopper.reader.pbf.PbfFieldDecoder.COORDINATE_SCALING_FACTOR":"java.lang.Double.POSITIVE_INFINITY","coordLatitudeOffset":"turnRestrictionBit","rawLatitude":"turnRestrictionBit","coordGranularity":"maxTurnCosts"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfFieldDecoder:51","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.reader.pbf.PbfFieldDecoder.double) * ((long) + ((int) * long))"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:594","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return (long & (long)) == 0 ? 0 : java.lang.Double.double;\n"},"status":-2},{"failures":[],"tindex":"4cd49436-daa0-11e4-8af3-8d4b451e19c3","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:334","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.LevelGraphStorage.this.getWeight(this)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:592","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[],"tindex":"4cd49437-daa0-11e4-8af3-abdb2187fd23","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:1487","type":"CtReturnImpl","sourcecode":"return 7"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.Edge:44","type":"CtReturnImpl","sourcecode":"return java.lang.Double.java.lang.Double.compare(double, com.graphhopper.storage.Edge.double)"},"status":-2},{"failures":[],"tindex":"4cd49438-daa0-11e4-8af3-3329c758a983","variableMapping":{"shift":"wayBitMask","tmpValue":"wayBitMask"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:61","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:511","type":"CtAssignmentImpl","sourcecode":"long = (1L << int) - 1"},"status":0},{"failures":[],"tindex":"4cd49439-daa0-11e4-8af3-a91c6c25ff14","variableMapping":{"silent":"synched"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.StorableProperties:179","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return false;\n} "},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:138","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[],"tindex":"4cd4943a-daa0-11e4-8af3-1b5fd8c2b53d","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:281","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"srtm_\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:256","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"sac_scale\")"},"status":-2},{"failures":[],"tindex":"4cd4943b-daa0-11e4-8af3-9fbba24faf55","variableMapping":{},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:1063","type":"CtReturnImpl","sourcecode":"return \"TREE\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:77","type":"CtReturnImpl","sourcecode":"return \"bike\""},"status":-2},{"failures":[],"tindex":"4cd4943c-daa0-11e4-8af3-8dfbe1b64d33","variableMapping":{"flags":"flags","tmpValue":"flags"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtReturnImpl","sourcecode":"return long | long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:336","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[],"tindex":"4cd4943d-daa0-11e4-8af3-ffbf881495c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:168","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(java.lang.String)"},"status":-2},{"failures":[],"tindex":"4cd4943e-daa0-11e4-8af3-f9d0f7616aea","variableMapping":{"shift":"millis","tmpValue":"flags"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:61","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:53","type":"CtOperatorAssignmentImpl","sourcecode":"long += com.graphhopper.routing.Path.calcMillis(double, long, boolean)"},"status":0},{"failures":[107],"tindex":"4cd4943f-daa0-11e4-8af3-3bb07ea300a3","variableMapping":{"weightApproximation":"bwFaster"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.ConsistentWeightApproximator:38","type":"CtOperatorAssignmentImpl","sourcecode":"double *= -1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:218","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"status":-1},{"failures":[],"tindex":"4cd49440-daa0-11e4-8af3-d9b145d98d16","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:191","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"impassable\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"status\", \"impassable\")))\n    return 0;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:241","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"motorroad\", \"yes\"))\n    return 0;\n"},"status":0},{"failures":[136,137,138,499,500,142,523,151,503,504,155,508,168,170,172,173,524,525,509],"tindex":"4cd49441-daa0-11e4-8af3-ab91a31eac03","variableMapping":{"com.graphhopper.storage.LevelGraphStorage.MAX_WEIGHT":"lon","com.graphhopper.storage.LevelGraphStorage.WEIGHT_FACTOR":"lon","weight":"maxLonTmp","weightLong":"hash","com.graphhopper.storage.LevelGraphStorage.MAX_WEIGHT_LONG":"hash"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.LevelGraphStorage:398","type":"CtIfImpl","sourcecode":"if (double > (com.graphhopper.storage.LevelGraphStorage.double))\n    long = com.graphhopper.storage.LevelGraphStorage.long;\nelse\n    long = ((long)((double * (com.graphhopper.storage.LevelGraphStorage.double)))) << 2;\n"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:182","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double double = (double + double) / 2;\n    if (double < double) {\n        double = double;\n    } else {\n        long |= 1;\n        double = double;\n    }\n} "},"status":-1},{"failures":[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,138,60,61,62,140,141,500,142,143,144,145,146,147,148,526,527,528,529,530,523,531,532,149,150,151,63,64,65,153,154,504,155,156,157,158,159,160,161,162,163,164,165,166,167],"tindex":"4cd4bb52-daa0-11e4-8af3-fddca7c1bc2b","variableMapping":{"segmentSizeInBytes":"y1","index":"y1"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:253","type":"CtAssertImpl","sourcecode":"assert (int + 2) <= (int) : \"integer cannot be distributed over two segments\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:129","type":"CtIfImpl","sourcecode":"if ((int == int) && (int == int))\n    break;\n"},"status":-1},{"failures":[],"tindex":"4cd4bb53-daa0-11e4-8af3-f33b36ca7cb5","variableMapping":{"way":"way"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:334","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:141","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-2},{"failures":[130,132,133,134],"tindex":"4cd4bb54-daa0-11e4-8af3-13cc837f70e3","variableMapping":{"key":"wayTypeName"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:101","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(1)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:399","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Translation.tr(\"cycleway\")"},"status":-1},{"failures":[],"tindex":"4cd4bb55-daa0-11e4-8af3-f5983ded7855","variableMapping":{"com.graphhopper.util.DistanceCalcEarth.KM_MILE":"fullDist2D","distInMeter":"fullDist2D"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:76","type":"CtLocalVariableImpl","sourcecode":"double double = (double / 1000) / (com.graphhopper.util.DistanceCalcEarth.double)"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:200","type":"CtLocalVariableImpl","sourcecode":"double double = (double - double) - double"},"status":0},{"failures":[],"tindex":"4cd4bb56-daa0-11e4-8af3-0de78ebfac50","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:199","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue.getBits()"},"status":0},{"failures":[],"tindex":"4cd4bb57-daa0-11e4-8af3-6b00a7e4dad1","variableMapping":{"minLon":"maxLon","java.lang.Double.MAX_VALUE":"java.lang.Double.MAX_VALUE","com.graphhopper.util.shapes.BBox.INVERSE":"com.graphhopper.util.shapes.BBox.INVERSE"},"series":0,"name":"add","transplant":{"position":"com.graphhopper.util.shapes.BBox:44","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.com.graphhopper.util.shapes.BBox.double = java.lang.Double.double"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:45","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.com.graphhopper.util.shapes.BBox.double = -(java.lang.Double.double)"},"status":-2},{"failures":[0,10,13],"tindex":"4cd4e268-daa0-11e4-8af3-b9ac1d00f148","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:83","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String, java.lang.String)"},"status":-1},{"failures":[],"tindex":"4cd4e269-daa0-11e4-8af3-0b53cc7190ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.LevelGraphStorage:401","type":"CtAssignmentImpl","sourcecode":"long = ((long)((double * (com.graphhopper.storage.LevelGraphStorage.double)))) << 2"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,24,352,353,354],"tindex":"4cd4e26a-daa0-11e4-8af3-ddb1ecb0d21c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:111","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"4cd4e26b-daa0-11e4-8af3-51f610e2df61","variableMapping":{},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.BBox:207","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:345","type":"CtLocalVariableImpl","sourcecode":"int int = java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.size()"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,37,128,129,439],"tindex":"4cd4e26c-daa0-11e4-8af3-63b3e3ddec6a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:276","type":"CtOperatorAssignmentImpl","sourcecode":"long |= com.graphhopper.routing.util.AbstractFlagEncoder.handleWayTags(com.graphhopper.reader.OSMWay, long, (long & (com.graphhopper.routing.util.AbstractFlagEncoder.getRelBitMask())))"},"status":-1},{"failures":[123],"tindex":"4cd4e26d-daa0-11e4-8af3-57d674356cd7","variableMapping":{"way":"way"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:334","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:124","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-1},{"failures":[],"tindex":"4cd4e26e-daa0-11e4-8af3-017b0f55ace9","variableMapping":{"str":"_location"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.DAType:155","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"_STORE\""},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:44","type":"CtAssignmentImpl","sourcecode":"java.lang.String = new java.io.File(\"\").getAbsolutePath()"},"status":0},{"failures":[],"tindex":"4cd4e26f-daa0-11e4-8af3-017b2cb5e759","variableMapping":{"mGarbage":"finishedTo"},"series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:153","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:73","type":"CtAssignmentImpl","sourcecode":"boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo())"},"status":-2},{"failureDictionary":{"com.graphhopper.storage.LevelGraphStorageTest.testCopyTo":261,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":112,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":458,"com.graphhopper.storage.LevelGraphStorageTest.testCannotBeLoadedViaDifferentClass":78,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":516,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":493,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":193,"com.graphhopper.reader.OSMReaderTest.testFerry":11,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":190,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":191,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":404,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":390,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamHorizontal":526,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testMoreReal":64,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":1,"com.graphhopper.storage.LevelGraphStorageTest.testSetNodes":268,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":134,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":435,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":214,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":319,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_Get_Short_Long":43,"com.graphhopper.coll.CompressedArrayTest.testCompress":137,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":396,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":94,"com.graphhopper.storage.LevelGraphStorageTest.testPriosWhileDeleting":232,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":468,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":178,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":283,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSortHighLevelFirst":502,"com.graphhopper.storage.SynchedDAWrapperTest.testBoundsCheck":44,"com.graphhopper.storage.RAMDataAccessTest.testRenameNoFlush":72,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":474,"com.graphhopper.GraphHopperTest.testPrepare":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":167,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":221,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":290,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":463,"com.graphhopper.coll.IntDoubleBinHeapTest.testSpreading":514,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":402,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":34,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":453,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":497,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":132,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":484,"com.graphhopper.storage.LevelGraphStorageTest.internalDisconnect":235,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex":151,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":355,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":123,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":401,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":446,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":282,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":452,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":61,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":103,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":125,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat_withTurnCostEntries":95,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":524,"com.graphhopper.storage.LevelGraphStorageTest.testDetachEdge":81,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":510,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":477,"com.graphhopper.GraphHopperTest.testLoadOSM":6,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":143,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":62,"com.graphhopper.routing.util.EncodingManagerTest.testEncoderAcceptNoException":438,"com.graphhopper.reader.OSMReaderTest.testSort":14,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxAndMinSpeed":414,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":21,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":353,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":97,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":300,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":87,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":172,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":222,"com.graphhopper.storage.RAMDataAccessTest.testHeader":73,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":117,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":478,"com.graphhopper.storage.MMapDataAccessTest.testHeader":522,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":104,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":338,"com.graphhopper.storage.LevelGraphStorageTest.testBounds":260,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamVertical":527,"com.graphhopper.storage.UnsafeDataAccessTest.testHeader":520,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":279,"com.graphhopper.storage.LevelGraphStorageTest.testPrios":228,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":465,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":305,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":314,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":421,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":98,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteAndOptimize":246,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":385,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testMaxAndMinSpeed":382,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSnappedPointAndGeometry":154,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":287,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraph":150,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":166,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testEdgeFilter":153,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":127,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":201,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":449,"com.graphhopper.coll.OSMIDMapTest.testGetLong":31,"com.graphhopper.storage.LevelGraphStorageTest.testDeleteNodeForUnidir":238,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":448,"com.graphhopper.coll.IntIntBinHeapTest.testSize":517,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":119,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":323,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":312,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":329,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes":253,"com.graphhopper.storage.LevelGraphStorageTest.testSave_and_fileFormat":79,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode2":255,"com.graphhopper.coll.CompressedArrayTest.testCompress2":136,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":292,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":373,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":491,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":320,"com.graphhopper.GraphHopperAPITest.testLoad":162,"com.graphhopper.storage.LevelGraphStorageTest.testNoCreateCalled":236,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":342,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":284,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":274,"com.graphhopper.storage.LevelGraphStorageTest.testClone":240,"com.graphhopper.reader.OSMReaderTest.testBarriers":15,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":310,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":356,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testLevelGraphBug":149,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":423,"com.graphhopper.util.GHUtilityTest.testCopy":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":197,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":451,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testDifferentVehicles":161,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":380,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":398,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":495,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamBug":528,"com.graphhopper.storage.RAMDataAccessTest.testLoadClose":76,"com.graphhopper.routing.PathTest.testFindInstruction":109,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":393,"com.graphhopper.storage.LevelGraphStorageTest.testPropertiesWithNoInit":257,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":311,"com.graphhopper.coll.IntDoubleBinHeapTest.testBasic":511,"com.graphhopper.util.EdgeSkipIteratorTest.testUpdateFlags":189,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":348,"com.graphhopper.storage.LevelGraphStorageTest.testInfinityWeight":266,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":420,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":492,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":301,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":288,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":336,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":479,"com.graphhopper.storage.LevelGraphStorageTest.testEnsureSize":233,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":324,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":470,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":430,"com.graphhopper.storage.LevelGraphStorageTest.testFlags":242,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":198,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":271,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":185,"com.graphhopper.util.InstructionListTest.testWayList2":36,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":434,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":218,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":144,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":303,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":315,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":403,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":102,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":124,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":386,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":88,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":106,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineRightDown":531,"com.graphhopper.storage.LevelGraphStorageTest.testFootMix":244,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":45,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":405,"com.graphhopper.storage.SynchedDAWrapperTest.testEnsureCapacity":48,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":207,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":321,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":55,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":273,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBug1":450,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":16,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":110,"com.graphhopper.coll.OSMIDMapTest.testGet":28,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":318,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":519,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":349,"com.graphhopper.routing.PathBidirRefTest.testExtract":440,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":30,"com.graphhopper.storage.LevelGraphStorageTest.testEnabledElevation":82,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":408,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints120":157,"com.graphhopper.storage.RAMDataAccessTest.testCopy":69,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameNoFlush":49,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":499,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":217,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":341,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":131,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":179,"com.graphhopper.storage.RAMDataAccessTest.testSegments":75,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":407,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":148,"com.graphhopper.util.GHUtilityTest.testSort2":480,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":456,"com.graphhopper.reader.OSMReaderTest.testMain":13,"com.graphhopper.storage.LevelGraphStorageTest.testDoThrowExceptionIfDimDoesNotMatch":80,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":361,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":328,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":409,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":525,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testGrid":158,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":415,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectional":259,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":360,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":220,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":307,"com.graphhopper.storage.LevelGraphStorageTest.test8BytesFlags":247,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdgesWithDelete":251,"com.graphhopper.storage.LevelGraphStorageTest.testDirectional":267,"com.graphhopper.routing.QueryGraphTest.testIterationBug_163":114,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete":248,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":427,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":332,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":182,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":419,"com.graphhopper.storage.LevelGraphStorageTest.testAddLocation":254,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":23,"com.graphhopper.storage.StorablePropertiesTest.testStore":105,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":68,"com.graphhopper.storage.GraphHopperStorageTest.testClone":276,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":304,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":219,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":366,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":135,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":286,"com.graphhopper.storage.LevelGraphStorageTest.testDisconnectEdge":227,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":383,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":199,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeFilter":230,"com.graphhopper.routing.PathTest.testTime":443,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":379,"com.graphhopper.util.BitUtilLittleTest.testToFloat":175,"com.graphhopper.storage.LevelGraphStorageTest.testNameIndex":85,"com.graphhopper.storage.LevelGraphStorageTest.testEdges":241,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":371,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":498,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":146,"com.graphhopper.reader.OSMReaderTest.testRelation":121,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":212,"com.graphhopper.storage.LevelGraphStorageTest.testCheckFirstNode":258,"com.graphhopper.util.GHUtilityTest.testSortDirected":482,"com.graphhopper.coll.IntDoubleBinHeapTest.test0":513,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxAndMinSpeed":432,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadClose":53,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":113,"com.graphhopper.GraphHopperTest.testFootOnly":9,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineRightUp":532,"com.graphhopper.util.BitUtilLittleTest.testToInt":176,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":389,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":56,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":363,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testReverseSpatialKey":503,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":447,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":464,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":418,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":147,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":208,"com.graphhopper.search.NameIndexTest.testCreate":41,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":74,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":111,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":518,"com.graphhopper.routing.QueryGraphTest.testOneWay":507,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":501,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":170,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":392,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":60,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":508,"com.graphhopper.reader.OSMReaderTest.testWithBounds":22,"com.graphhopper.storage.RAMDataAccessTest.testLoadFlush":77,"com.graphhopper.storage.RAMDataAccessTest.testBoundsCheck":67,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":433,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":115,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":205,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":339,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":352,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":213,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":350,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":128,"com.graphhopper.storage.LevelGraphStorageTest.testUnidirectionalEdgeFilter":237,"com.graphhopper.storage.LevelGraphStorageTest.testBigDataEdge":234,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":372,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":431,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":399,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":486,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":331,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":225,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":364,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":180,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":325,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":89,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":445,"com.graphhopper.util.BitUtilLittleTest.testToBitString":174,"com.graphhopper.util.InstructionListTest.testWayList":35,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":302,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":406,"com.graphhopper.GraphHopperAPITest.testDisconnected179":163,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":171,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":200,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":7,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":333,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":138,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":195,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":428,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":187,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":354,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":211,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":223,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":413,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":4,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":278,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":101,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":334,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":335,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":100,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":475,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":295,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":400,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":294,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":455,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":473,"com.graphhopper.storage.LevelGraphStorageTest.testPillarNodes":84,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":367,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":376,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":133,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeProperties":256,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":308,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":272,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":461,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testNoErrorOnEdgeCase_lastIndex":505,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":417,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":269,"com.graphhopper.routing.PathTest.testWayList":108,"com.graphhopper.storage.MMapDataAccessTest.testCopy":521,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":181,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":377,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":204,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":362,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":515,"com.graphhopper.coll.OSMIDMapTest.testGet2":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":462,"com.graphhopper.storage.SynchedDAWrapperTest.testHeader":50,"com.graphhopper.storage.LevelGraphStorageTest.testCreateDuplicateEdges":263,"com.graphhopper.reader.dem.HeightTileTest.testGetHeightForNegativeTile":25,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":139,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":330,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":412,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":289,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":343,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":277,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":316,"com.graphhopper.storage.LevelGraphStorageTest.testDozendEdges":252,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex2":504,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testInMemIndex3":155,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":70,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadFlush":54,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph":156,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":425,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":512,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":374,"com.graphhopper.util.GHUtilityTest.testSort":481,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":141,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":216,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":509,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":391,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":411,"com.graphhopper.search.NameIndexTest.testPut":39,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":275,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":309,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":340,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testRMin":152,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":494,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":59,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":487,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":183,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":422,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":116,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":107,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":485,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":8,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":306,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":375,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":26,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":387,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":347,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":326,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":460,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":351,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":184,"com.graphhopper.storage.LevelGraphStorageTest.testGetLocations":250,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":42,"com.graphhopper.routing.PathTest.testFound":442,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":10,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":439,"com.graphhopper.storage.LevelGraphStorageTest.testCreateLocation":265,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeightIfAdvancedEncoder":229,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":410,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":483,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":322,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":40,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":203,"com.graphhopper.storage.RAMDataAccessTest.testSet_Get_Short_Long":66,"com.graphhopper.util.InstructionListTest.testEmptyList":192,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":281,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":164,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":381,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSimpleGraph2":159,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":165,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":370,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":359,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":358,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testMaxAndMinSpeed":397,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":291,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":457,"com.graphhopper.reader.PrinctonReaderTest.testRead":186,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":92,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testWayGeometry":65,"com.graphhopper.storage.LevelGraphStorageTest.testUpdateUnidirectional":245,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":317,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":32,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":168,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":202,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":99,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":177,"com.graphhopper.storage.LevelGraphStorageTest.testIdenticalNodes2":239,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":327,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":395,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":426,"com.graphhopper.routing.util.EncodingManagerTest.testTurnFlagCombination":437,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":378,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":126,"com.graphhopper.reader.OSMReaderTest.testFoot":12,"com.graphhopper.reader.dem.HeightTileTest.testGetHeight":27,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":120,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":215,"com.graphhopper.storage.LevelGraphStorageTest.testCopyProperties":86,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":173,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":500,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":388,"com.graphhopper.reader.OSMReaderTest.testOneWay":24,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":142,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":285,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":298,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":91,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":337,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":394,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":52,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":293,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":424,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":210,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":280,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":469,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":523,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":365,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":466,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":476,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":51,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":467,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":488,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineLeftDown":529,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":344,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testFindingWayGeometry":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":206,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":506,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":188,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":270,"com.graphhopper.routing.PathBidirRefTest.testExtract2":441,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":444,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":130,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":145,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":226,"com.graphhopper.search.NameIndexTest.testTooLongNameNoError":38,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":297,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":489,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":384,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":18,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineLeftUp":530,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":224,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":345,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":490,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":429,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":472,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":140,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":299,"com.graphhopper.storage.LevelGraphStorageTest.testGetAllEdges":243,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":368,"com.graphhopper.GraphHopperTest.testFootAndCar":5,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":90,"com.graphhopper.storage.LevelGraphStorageTest.testComplexDeleteNode":249,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":122,"com.graphhopper.storage.index.LocationIndexTreeSCTest.testSinglePoints32":160,"com.graphhopper.storage.RAMDataAccessTest.testEnsureCapacity":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":196,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":436,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":369,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":471,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":454,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":313,"com.graphhopper.GraphHopperTest.testPrepareOnly":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCorrectWeight":459,"com.graphhopper.GraphHopperTest.testVia":2,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":496,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":416,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":194,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":20,"com.graphhopper.storage.LevelGraphStorageTest.testGetWeight":231,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":37,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":296,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":346,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":209,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":357,"com.graphhopper.storage.LevelGraphStorageTest.testEdgeReturn":264,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete3":262,"com.graphhopper.storage.LevelGraphStorageTest.testSimpleDelete2":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":96}}]

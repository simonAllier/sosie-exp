{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"07faf88f-8b63-11e6-8fe0-abc1f46be754","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:4793","type":"CtLocalVariableImpl","sourcecode":"int int = trueGOTO"},"variableMap":{"trueGOTO":"pc"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:2275","type":"CtLocalVariableImpl","sourcecode":"int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)"},"status":-1},{"failures":[],"tindex":"07fb1fa0-8b63-11e6-8fe0-2328c99ebe46","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptableObject:198","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.ScriptableObject.checkValidAttributes(value)"},"variableMap":{"value":"org.mozilla.classfile.ByteCode.GETSTATIC"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:1457","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Void\", \"TYPE\", \"Ljava/lang/Class;\")"},"status":-1},{"failures":[],"tindex":"07fb46b1-8b63-11e6-8fe0-73ea02584400","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.TokenStream:1520","type":"CtIfImpl","sourcecode":"if (n < 0) {\n    return false;\n} "},"variableMap":{"n":"op"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1972","type":"CtIfImpl","sourcecode":"if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n    result = match >= 0;\n    if (result)\n        pc = match;\n    \n} else {\n    switchStatement : switch (op) {\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                if ((gData.int) == end) {\n                    result = false;\n                    break;\n                } \n                char char = input.charAt(gData.int);\n                if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                    if ((c != matchCh1) && (!(org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][matchCh2], c)))) {\n                        result = false;\n                        break;\n                    } \n                } else {\n                    if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))\n                        c = org.mozilla.javascript.regexp.NativeRegExp.upcase(c);\n                    \n                    if ((c != matchCh1) && (c != matchCh2)) {\n                        result = false;\n                        break;\n                    } \n                }\n            }\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                int int = gData.int;\n                if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n                    if (match < 0) {\n                        op = program[(nextpc++)];\n                        pc = nextpc;\n                        continue;\n                    } \n                    result = true;\n                    pc = match;\n                    op = program[(pc++)];\n                } \n                byte byte = program[(nextpc++)];\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, nextop, nextpc, startcp, continuationOp, continuationPc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                pc += offset;\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                gData.setParens(parenIndex, gData.int, 0);\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                int int = gData.parensIndex(parenIndex);\n                gData.setParens(parenIndex, cap_index, ((gData.int) - cap_index));\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                if ((org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) && ((org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false)) < 0)) {\n                    result = false;\n                    break;\n                } \n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false);\n                    if ((match >= 0) && ((program[match]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) {\n                        result = false;\n                        break;\n                    } \n                } \n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                gData.int = state.int;\n                gData.org.mozilla.javascript.regexp.REBackTrackData = state.org.mozilla.javascript.regexp.REBackTrackData;\n                continuationPc = state.int;\n                continuationOp = state.int;\n                if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                    result = !result;\n                } \n            }\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int;\n                int int;\n                boolean boolean = false;\n                switch (op) {\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 0;\n                        max = -1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 1;\n                        max = -1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 0;\n                        max = 1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        max = (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc)) - 1;\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        break;\n                    default :\n                        throw org.mozilla.javascript.Kit.codeBug();\n                }\n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, min, max, gData.int, null, continuationOp, continuationPc);\n                if (greedy) {\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    op = program[(pc++)];\n                } else {\n                    if (min != 0) {\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        op = program[(pc++)];\n                    } else {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                        org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                        op = program[(pc++)];\n                    }\n                }\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            result = true;\n            pc = continuationPc;\n            op = continuationOp;\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int;\n                int int;\n                do {\n                    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    if (!result) {\n                        if ((state.int) == 0)\n                            result = true;\n                        \n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                        result = false;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    int int = state.int;\n                    int int = state.int;\n                    if (new_min != 0)\n                        new_min--;\n                    \n                    if (new_max != (-1))\n                        new_max--;\n                    \n                    if (new_max == 0) {\n                        result = true;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    nextpc = pc + (3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int));\n                    nextop = program[nextpc];\n                    int int = gData.int;\n                    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(nextop)) {\n                        nextpc++;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, nextop, program, nextpc, end, true);\n                        if (match < 0) {\n                            result = new_min == 0;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        result = true;\n                        nextpc = match;\n                    } \n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, startcp, null, state.int, state.int);\n                    if (new_min == 0) {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc, startcp, state.int, state.int);\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, (pc + (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)));\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                    } \n                } while ((program[nextpc]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte) );\n                pc = nextpc;\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                if (!result) {\n                    if (((state.int) == (-1)) || ((state.int) > 0)) {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, state.int, state.int, gData.int, null, state.int, state.int);\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                        op = program[(pc++)];\n                        continue;\n                    } else {\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        break;\n                    }\n                } else {\n                    if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                        result = false;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        break;\n                    } \n                    int int = state.int;\n                    int int = state.int;\n                    if (new_min != 0)\n                        new_min--;\n                    \n                    if (new_max != (-1))\n                        new_max--;\n                    \n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, gData.int, null, state.int, state.int);\n                    if (new_min != 0) {\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                        op = program[(pc++)];\n                    } else {\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                        org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                        op = program[(pc++)];\n                    }\n                    continue;\n                }\n            }\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            return true;\n        default :\n            throw org.mozilla.javascript.Kit.codeBug(\"invalid bytecode\");\n    }\n}"},"status":-1},{"failures":[],"tindex":"07fc0a02-8b63-11e6-8fe0-5186397ed6e3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ast.FunctionCall:83","type":"CtInvocationImpl","sourcecode":"addArgument(arg)"},"status":-1},{"failures":[],"tindex":"07fc0a03-8b63-11e6-8fe0-1b86ff28f73f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:4151","type":"CtUnaryOperatorImpl","sourcecode":"copyTo++"},"status":-1},{"failures":[],"tindex":"07fc0a04-8b63-11e6-8fe0-d3cfe1e80c53","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.ScriptNode:157","type":"CtIfImpl","sourcecode":"if ((lineno < 0) || ((int) >= 0))\n    org.mozilla.javascript.ast.AstNode.codeBug();\n"},"variableMap":{"lineno":"e","endLineno":"e"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.DiyFp:125","type":"CtWhileImpl","sourcecode":"while ((f & (org.mozilla.javascript.v8dtoa.DiyFp.org.mozilla.javascript.v8dtoa.DiyFp.long)) == 0) {\n    f <<= 1;\n    e--;\n}"},"status":-1},{"failures":[],"tindex":"07fd1b75-8b63-11e6-8fe0-5b9d0f56365c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Interpreter:256","type":"CtIfImpl","sourcecode":"if (!((start <= pc) && (pc < end))) {\n    continue;\n} "},"variableMap":{"pc":"org.mozilla.javascript.Token.LOOP","start":"org.mozilla.javascript.Token.LOOP","end":"org.mozilla.javascript.Token.BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NodeTransformer:83","type":"CtIfImpl","sourcecode":"if ((createScopeObjects && (((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) || (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)))) && (node instanceof org.mozilla.javascript.ast.Scope)) {\n    org.mozilla.javascript.ast.Scope org.mozilla.javascript.ast.Scope = ((org.mozilla.javascript.ast.Scope)(node));\n    if ((newScope.getSymbolTable()) != null) {\n        org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.Token.org.mozilla.javascript.Token.int : org.mozilla.javascript.Token.org.mozilla.javascript.Token.int));\n        org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        let.addChildToBack(innerLet);\n        for (java.lang.String java.lang.String : newScope.getSymbolTable().keySet()) {\n            innerLet.addChildToBack(org.mozilla.javascript.Node.newString(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, name));\n        }\n        newScope.setSymbolTable(null);\n        org.mozilla.javascript.Node org.mozilla.javascript.Node = node;\n        node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, let);\n        type = node.getType();\n        let.addChildToBack(oldNode);\n    } \n} "},"status":-1}],"header":{"groupId":"r","transformationCount":7,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
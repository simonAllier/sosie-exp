{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"375df9b0-8b7c-11e6-9f08-7b86b1053a5d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:3654","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.addALoad(short)"},"status":-1},{"failures":[],"tindex":"375e20c1-8b7c-11e6-9f08-fb2e73143171","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ObjToIntMap:315","type":"CtAssignmentImpl","sourcecode":"int = int = 0"},"status":-1},{"failures":[],"tindex":"375e20c2-8b7c-11e6-9f08-a1cf60a31f69","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:2637","type":"CtIfImpl","sourcecode":"if (filename == null) {\n    int[] int[] = new int[1];\n    filename = org.mozilla.javascript.Context.getSourcePositionFromStack(linep);\n    if (filename != null) {\n        lineNumber = linep[0];\n    } else {\n        filename = \"\";\n    }\n} "},"variableMap":{"filename":"X","lineNumber":"org.mozilla.javascript.NativeString.Id_bold"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeString:762","type":"CtSwitchImpl","sourcecode":"L : switch (s.length()) {\n    case 3 :\n        c = s.charAt(2);\n        if (c == 'b') {\n            if (((s.charAt(0)) == 's') && ((s.charAt(1)) == 'u')) {\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L0;\n            } \n        } else if (c == 'g') {\n            if (((s.charAt(0)) == 'b') && ((s.charAt(1)) == 'i')) {\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L0;\n            } \n        } else if (c == 'p') {\n            if (((s.charAt(0)) == 's') && ((s.charAt(1)) == 'u')) {\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L0;\n            } \n        } \n        break L;\n    case 4 :\n        c = s.charAt(0);\n        if (c == 'b') {\n            X = \"bold\";\n            id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        } else if (c == 'l') {\n            X = \"link\";\n            id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        } else if (c == 't') {\n            X = \"trim\";\n            id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        } \n        break L;\n    case 5 :\n        switch (s.charAt(4)) {\n            case 'd' :\n                X = \"fixed\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'e' :\n                X = \"slice\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'h' :\n                X = \"match\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'k' :\n                X = \"blink\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'l' :\n                X = \"small\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 't' :\n                X = \"split\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n        }\n        break L;\n    case 6 :\n        switch (s.charAt(1)) {\n            case 'e' :\n                c = s.charAt(0);\n                if (c == 'r') {\n                    X = \"repeat\";\n                    id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                } else if (c == 's') {\n                    X = \"search\";\n                    id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                } \n                break L;\n            case 'h' :\n                X = \"charAt\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'n' :\n                X = \"anchor\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'o' :\n                X = \"concat\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'q' :\n                X = \"equals\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 't' :\n                X = \"strike\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'u' :\n                X = \"substr\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n        }\n        break L;\n    case 7 :\n        switch (s.charAt(1)) {\n            case 'a' :\n                X = \"valueOf\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'e' :\n                X = \"replace\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'n' :\n                X = \"indexOf\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 't' :\n                X = \"italics\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n        }\n        break L;\n    case 8 :\n        switch (s.charAt(6)) {\n            case 'c' :\n                X = \"toSource\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'e' :\n                X = \"includes\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'f' :\n                X = \"trimLeft\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'n' :\n                X = \"toString\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 't' :\n                X = \"endsWith\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'z' :\n                X = \"fontsize\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n        }\n        break L;\n    case 9 :\n        switch (s.charAt(0)) {\n            case 'f' :\n                X = \"fontcolor\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'n' :\n                X = \"normalize\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 's' :\n                X = \"substring\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 't' :\n                X = \"trimRight\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n        }\n        break L;\n    case 10 :\n        c = s.charAt(0);\n        if (c == 'c') {\n            X = \"charCodeAt\";\n            id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        } else if (c == 's') {\n            X = \"startsWith\";\n            id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        } \n        break L;\n    case 11 :\n        switch (s.charAt(2)) {\n            case 'L' :\n                X = \"toLowerCase\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'U' :\n                X = \"toUpperCase\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'd' :\n                X = \"codePointAt\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 'n' :\n                X = \"constructor\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n            case 's' :\n                X = \"lastIndexOf\";\n                id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n                break L;\n        }\n        break L;\n    case 13 :\n        X = \"localeCompare\";\n        id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        break L;\n    case 16 :\n        X = \"equalsIgnoreCase\";\n        id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        break L;\n    case 17 :\n        c = s.charAt(8);\n        if (c == 'L') {\n            X = \"toLocaleLowerCase\";\n            id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        } else if (c == 'U') {\n            X = \"toLocaleUpperCase\";\n            id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int;\n        } \n        break L;\n}"},"status":-1},{"failures":[],"tindex":"375e6ee3-8b7c-11e6-9f08-0def3d894f9e","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:3291","type":"CtAssignmentImpl","sourcecode":"methodName = \"newObjectSpecial\""},"variableMap":{"methodName":"s1"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:2039","type":"CtAssignmentImpl","sourcecode":"s1 = org.mozilla.javascript.ScriptRuntime.numberToString(left.getDouble(), 10)"},"status":-1},{"failures":[],"tindex":"375e6ee4-8b7c-11e6-9f08-73cc77c99b40","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJavaObject:42","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.NativeJavaObject.this.java.lang.Class<?> = staticType"},"variableMap":{"staticType":"dynamicType"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeJavaObject:50","type":"CtAssignmentImpl","sourcecode":"dynamicType = java.lang.Object.getClass()"},"status":-1},{"failures":[],"tindex":"375e6ee5-8b7c-11e6-9f08-2723b24d6572","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.jdk13.VMBridge_jdk13:129","type":"CtReturnImpl","sourcecode":"return (\"Proxy[\" + (target.toString())) + \"]\""},"variableMap":{"target":"org.mozilla.javascript.Undefined.instance"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeObject:302","type":"CtReturnImpl","sourcecode":"return desc == null ? org.mozilla.javascript.Undefined.org.mozilla.javascript.Undefined.java.lang.Object : desc"},"status":-1},{"failures":[],"tindex":"375e6ee6-8b7c-11e6-9f08-c71c61a6b23a","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:3901","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, catchLabel)"},"variableMap":{"catchLabel":"org.mozilla.javascript.Token.DEL_REF","cfw":"cfw","org.mozilla.classfile.ByteCode.GOTO":"org.mozilla.javascript.Token.SHNE"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:2165","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (((org.mozilla.javascript.optimizer.OptFunctionNode) != null) || ((parent.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode = org.mozilla.javascript.optimizer.OptFunctionNode.get(org.mozilla.javascript.ast.ScriptNode, fnIndex);\n            int int = ofn.org.mozilla.javascript.ast.FunctionNode.getFunctionType();\n            if (t != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                throw org.mozilla.javascript.optimizer.Codegen.badTree();\n            } \n            visitFunction(ofn, t);\n        } \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addPush(node.getString());\n            addScriptRuntimeInvoke(\"name\", (\"(Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/String;\" + \")Ljava/lang/Object;\"))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            if (specialType == (org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)) {\n                org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode;\n                target = ((org.mozilla.javascript.optimizer.OptFunctionNode)(node.getProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)));\n                if (target != null) {\n                    visitOptimizedCall(node, target, type, child);\n                } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    visitStandardCall(node, child);\n                } else {\n                    visitStandardNew(node, child);\n                }\n            } else {\n                visitSpecialCall(node, type, specialType, child);\n            }\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateFunctionAndThisObj(child, node);\n        child = child.getNext();\n        generateCallArgArray(node, child, false);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"callRef\", (\"(Lorg/mozilla/javascript/Callable;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"[Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Lorg/mozilla/javascript/Ref;\")))));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            double double = node.getDouble();\n            if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) != (-1)) {\n                org.mozilla.classfile.ClassFileWriter.addPush(num);\n            } else {\n                org.mozilla.javascript.optimizer.Codegen.pushNumberAsObject(org.mozilla.classfile.ClassFileWriter, num);\n            }\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addPush(node.getString());\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"TRUE\", \"Ljava/lang/Boolean;\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"FALSE\", \"Ljava/lang/Boolean;\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, org.mozilla.javascript.optimizer.Codegen.java.lang.String, org.mozilla.javascript.optimizer.Codegen.getCompiledRegexpName(org.mozilla.javascript.ast.ScriptNode, i), \"Ljava/lang/Object;\");\n            org.mozilla.classfile.ClassFileWriter.addInvoke(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"org/mozilla/javascript/ScriptRuntime\", \"wrapRegExp\", (\"(Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/Object;\" + \")Lorg/mozilla/javascript/Scriptable;\"))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getNext();\n            while (next != null) {\n                generateExpression(child, node);\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                child = next;\n                next = next.getNext();\n            }\n            generateExpression(child, node);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = getLocalBlockRegister(node);\n            org.mozilla.classfile.ClassFileWriter.addALoad(local);\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                addScriptRuntimeInvoke(\"enumNext\", \"(Ljava/lang/Object;)Ljava/lang/Boolean;\");\n            } else {\n                org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                addScriptRuntimeInvoke(\"enumId\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n            }\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArrayLiteral(node, child, false);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitObjectLiteral(node, child, false);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            generateIfJump(child, node, trueTarget, falseTarget);\n            org.mozilla.classfile.ClassFileWriter.markLabel(trueTarget);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"FALSE\", \"Ljava/lang/Boolean;\");\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, beyond);\n            org.mozilla.classfile.ClassFileWriter.markLabel(falseTarget);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"TRUE\", \"Ljava/lang/Boolean;\");\n            org.mozilla.classfile.ClassFileWriter.markLabel(beyond);\n            org.mozilla.classfile.ClassFileWriter.adjustStackTop((-1));\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        addScriptRuntimeInvoke(\"toInt32\", \"(Ljava/lang/Object;)I\");\n        org.mozilla.classfile.ClassFileWriter.addPush((-1));\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        addDoubleWrap();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        org.mozilla.javascript.optimizer.Codegen.pushUndefined(org.mozilla.classfile.ClassFileWriter);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        addScriptRuntimeInvoke(\"typeof\", (\"(Ljava/lang/Object;\" + \")Ljava/lang/String;\"));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitTypeofname(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitIncDec(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            generateExpression(child, node);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            addScriptRuntimeInvoke(\"toBoolean\", \"(Ljava/lang/Object;)Z\");\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, falseTarget);\n            else\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, falseTarget);\n            \n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            generateExpression(child.getNext(), node);\n            org.mozilla.classfile.ClassFileWriter.markLabel(falseTarget);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getNext();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ifThen.getNext();\n            generateExpression(child, node);\n            addScriptRuntimeInvoke(\"toBoolean\", \"(Ljava/lang/Object;)Z\");\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, elseTarget);\n            short short = org.mozilla.classfile.ClassFileWriter.getStackTop();\n            generateExpression(ifThen, node);\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, afterHook);\n            org.mozilla.classfile.ClassFileWriter.markLabel(elseTarget, stack);\n            generateExpression(ifElse, node);\n            org.mozilla.classfile.ClassFileWriter.markLabel(afterHook);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            generateExpression(child, node);\n            generateExpression(child.getNext(), node);\n            switch (node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) {\n                case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n                    org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                    break;\n                case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n                    addOptRuntimeInvoke(\"add\", \"(DLjava/lang/Object;)Ljava/lang/Object;\");\n                    break;\n                case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n                    addOptRuntimeInvoke(\"add\", \"(Ljava/lang/Object;D)Ljava/lang/Object;\");\n                    break;\n                default :\n                    if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        addScriptRuntimeInvoke(\"add\", (\"(Ljava/lang/CharSequence;\" + (\"Ljava/lang/Object;\" + \")Ljava/lang/CharSequence;\")));\n                    } else if ((child.getNext().getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        addScriptRuntimeInvoke(\"add\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/CharSequence;\" + \")Ljava/lang/CharSequence;\")));\n                    } else {\n                        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                        addScriptRuntimeInvoke(\"add\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\"))));\n                    }\n            }\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArithmetic(node, org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, child, parent);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArithmetic(node, org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, child, parent);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArithmetic(node, (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int : org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int), child, parent);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitBitOp(node, type, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        addObjectToDouble();\n        if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        } \n        addDoubleWrap();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        addObjectToDouble();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = -1;\n            if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                prop = child.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1));\n            } \n            if (prop != (-1)) {\n                child.removeProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                generateExpression(child, node);\n                child.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, prop);\n            } else {\n                generateExpression(child, node);\n                addDoubleWrap();\n            }\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            visitIfJumpRelOp(node, child, trueGOTO, falseGOTO);\n            addJumpedBooleanWrap(trueGOTO, falseGOTO);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            visitIfJumpEqOp(node, child, trueGOTO, falseGOTO);\n            addJumpedBooleanWrap(trueGOTO, falseGOTO);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitGetProp(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        generateExpression(child.getNext(), node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) != (-1)) {\n            addScriptRuntimeInvoke(\"getObjectIndex\", (\"(Ljava/lang/Object;D\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n        } else {\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"getObjectElem\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Ljava/lang/Object;\")))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"refGet\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitGetVar(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetVar(node, child, true);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetName(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitStrictSetName(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetConst(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetConstVar(node, child, true);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetProp(type, node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetElem(type, node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            generateExpression(child, node);\n            child = child.getNext();\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                addScriptRuntimeInvoke(\"refGet\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n            } \n            generateExpression(child, node);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"refSet\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Ljava/lang/Object;\")))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"refDel\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        boolean boolean = (child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        generateExpression(child, node);\n        child = child.getNext();\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        org.mozilla.classfile.ClassFileWriter.addPush(isName);\n        addScriptRuntimeInvoke(\"delete\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \"Z)Ljava/lang/Object;\"))));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            while (child != null) {\n                generateExpression(child, node);\n                child = child.getNext();\n            }\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addPush(node.getString());\n            addScriptRuntimeInvoke(\"bind\", (\"(Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/String;\" + \")Lorg/mozilla/javascript/Scriptable;\"))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addALoad(getLocalBlockRegister(node));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            java.lang.String java.lang.String = ((java.lang.String)(node.getProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)));\n            generateExpression(child, node);\n            org.mozilla.classfile.ClassFileWriter.addPush(special);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"specialRef\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/String;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Ref;\")))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, 0);\n            do {\n                generateExpression(child, node);\n                child = child.getNext();\n            } while (child != null );\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            switch (type) {\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    methodName = \"memberRef\";\n                    signature = \"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"I\" + \")Lorg/mozilla/javascript/Ref;\")));\n                    break;\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    methodName = \"memberRef\";\n                    signature = \"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"I\" + \")Lorg/mozilla/javascript/Ref;\"))));\n                    break;\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    methodName = \"nameRef\";\n                    signature = \"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"I\" + \")Lorg/mozilla/javascript/Ref;\")));\n                    org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                    break;\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    methodName = \"nameRef\";\n                    signature = \"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"I\" + \")Lorg/mozilla/javascript/Ref;\"))));\n                    org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                    break;\n                default :\n                    throw org.mozilla.javascript.Kit.codeBug();\n            }\n            org.mozilla.classfile.ClassFileWriter.addPush(memberTypeFlags);\n            addScriptRuntimeInvoke(methodName, signature);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitDotQuery(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"escapeAttributeValue\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/String;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"escapeTextValue\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/String;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"setDefaultNamespace\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateYieldPoint(node, true);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child;\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = enterWith.getNext();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = with.getNext();\n            generateStatement(enterWith);\n            generateExpression(with.getFirstChild(), with);\n            generateStatement(leaveWith);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child;\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getNext();\n            generateStatement(initStmt);\n            generateExpression(expr, node);\n            break;\n        }\n    default :\n        throw new java.lang.RuntimeException((\"Unexpected node type \" + type));\n}"},"status":-1},{"failures":[],"tindex":"375f3237-8b7c-11e6-9f08-eb949d5e9c77","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:3162","type":"CtAssignmentImpl","sourcecode":"proto = proto.getPrototype()"},"variableMap":{"proto":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:2272","type":"CtAssignmentImpl","sourcecode":"obj = obj.getPrototype()"},"status":-1},{"failures":[],"tindex":"375f3238-8b7c-11e6-9f08-d731875c3ab7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.CachedPowers:58","type":"CtInvocationImpl","sourcecode":"c_mk.setE(cachedPower.short)"},"status":-1},{"failures":[],"tindex":"375f3239-8b7c-11e6-9f08-370f5f4dee07","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.NativeArray:1445","type":"CtAssignmentImpl","sourcecode":"begin = 0"},"variableMap":{"begin":"f"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.DiyFp:69","type":"CtOperatorAssignmentImpl","sourcecode":"long -= other.long"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"03137f77-8b51-11e6-9254-390dd9d2d3c7","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.typedarrays.NativeDataView:332","type":"CtIfImpl","sourcecode":"if (c == '2') {\n    X = \"setUint32\";\n    id = org.mozilla.javascript.typedarrays.NativeDataView.org.mozilla.javascript.typedarrays.NativeDataView.int;\n} else if (c == '6') {\n    X = \"setUint16\";\n    id = org.mozilla.javascript.typedarrays.NativeDataView.org.mozilla.javascript.typedarrays.NativeDataView.int;\n} "},"variableMap":{"org.mozilla.javascript.typedarrays.NativeDataView.Id_setUint16":"org.mozilla.javascript.regexp.NativeRegExp.INDEX_LEN","c":"op","X":"input","id":"op","org.mozilla.javascript.typedarrays.NativeDataView.Id_setUint32":"cp"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1768","type":"CtSwitchImpl","sourcecode":"switch (op) {\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((gData.int) != 0) {\n            if ((!(gData.boolean)) || (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(((gData.int) - 1)))))) {\n                break;\n            } \n        } \n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((gData.int) != end) {\n            if ((!(gData.boolean)) || (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(gData.int))))) {\n                break;\n            } \n        } \n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = (((gData.int) == 0) || (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(((gData.int) - 1)))))) ^ (!(((gData.int) < end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int)))));\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = (((gData.int) == 0) || (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(((gData.int) - 1)))))) ^ (((gData.int) < end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int))));\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isDigit(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isDigit(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isREWhiteSpace(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isREWhiteSpace(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            parenIndex = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.backrefMatcher(gData, parenIndex, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            length = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.flatNMatcher(gData, offset, length, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)((program[(pc++)]) & 255));\n            if (((gData.int) != end) && ((input.charAt(gData.int)) == matchCh)) {\n                result = true;\n                (gData.int)++;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            length = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.flatNIMatcher(gData, offset, length, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)((program[(pc++)]) & 255));\n            if ((gData.int) != end) {\n                char char = input.charAt(gData.int);\n                if ((matchCh == c) || ((org.mozilla.javascript.regexp.NativeRegExp.upcase(matchCh)) == (org.mozilla.javascript.regexp.NativeRegExp.upcase(c)))) {\n                    result = true;\n                    (gData.int)++;\n                } \n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if (((gData.int) != end) && ((input.charAt(gData.int)) == matchCh)) {\n                result = true;\n                (gData.int)++;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) != end) {\n                char char = input.charAt(gData.int);\n                if ((matchCh == c) || ((org.mozilla.javascript.regexp.NativeRegExp.upcase(matchCh)) == (org.mozilla.javascript.regexp.NativeRegExp.upcase(c)))) {\n                    result = true;\n                    (gData.int)++;\n                } \n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            index = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) != end) {\n                if (org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][index], input.charAt(gData.int))) {\n                    (gData.int)++;\n                    result = true;\n                    break;\n                } \n            } \n        }\n        break;\n    default :\n        throw org.mozilla.javascript.Kit.codeBug();\n}"},"status":-1},{"failures":[],"tindex":"0313cd98-8b51-11e6-9254-67c91a7c3d8e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NodeTransformer:43","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.ObjArray = new org.mozilla.javascript.ObjArray()"},"status":-1},{"failures":[],"tindex":"0313cd99-8b51-11e6-9254-0f8bd56b9fb7","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.GeneratorExpression:114","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.ast.GeneratorExpression.this.int = ifPosition"},"variableMap":{"ifPosition":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:2599","type":"CtAssignmentImpl","sourcecode":"id = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int"},"status":-1},{"failures":[],"tindex":"0313cd9a-8b51-11e6-9254-2df4733c7942","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:627","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.bad.range\", \"\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:3131","type":"CtInvocationImpl","sourcecode":"in.defaultReadObject()"},"status":-1},{"failures":[],"tindex":"0313f4ab-8b51-11e6-9254-33da4f3e3886","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:627","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.bad.range\", \"\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.MemberBox:143","type":"CtDoImpl","sourcecode":"do {\n    e = ((java.lang.reflect.InvocationTargetException)(e)).getTargetException();\n} while (e instanceof java.lang.reflect.InvocationTargetException )"},"status":-1},{"failures":[],"tindex":"0313f4ac-8b51-11e6-9254-9392be6644c2","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.JavaScriptException:60","type":"CtIfImpl","sourcecode":"if ((java.lang.Object) == null) {\n    return \"null\";\n} else if ((java.lang.Object) instanceof org.mozilla.javascript.NativeError) {\n    return java.lang.Object.toString();\n} "},"variableMap":{"value":"org.mozilla.javascript.Undefined.instance"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:906","type":"CtIfImpl","sourcecode":"if (thisObj instanceof org.mozilla.javascript.NativeArray) {\n    org.mozilla.javascript.NativeArray org.mozilla.javascript.NativeArray = ((org.mozilla.javascript.NativeArray)(thisObj));\n    if (na.boolean) {\n        java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n        for (int int = 0 ; i < length ; i++) {\n            if (i != 0) {\n                sb.append(separator);\n            } \n            if (i < (na.java.lang.Object[].int)) {\n                java.lang.Object java.lang.Object = na.java.lang.Object[][i];\n                if (((temp != null) && (temp != (org.mozilla.javascript.Undefined.org.mozilla.javascript.Undefined.java.lang.Object))) && (temp != (org.mozilla.javascript.Scriptable.org.mozilla.javascript.Scriptable.java.lang.Object))) {\n                    sb.append(org.mozilla.javascript.ScriptRuntime.toString(temp));\n                } \n            } \n        }\n        return sb.toString();\n    } \n} "},"status":-1},{"failures":[],"tindex":"0313f4ad-8b51-11e6-9254-9da1d7778e62","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1060","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.class\", \"\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:520","type":"CtInvocationImpl","sourcecode":"cfw.addLoadThis()"},"status":-1},{"failures":[],"tindex":"0313f4ae-8b51-11e6-9254-c3b50021f324","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.typedarrays.NativeDataView:314","type":"CtAssignmentImpl","sourcecode":"c = s.charAt(0)"},"status":-1},{"failures":[],"tindex":"0313f4af-8b51-11e6-9254-e74f4e1382c7","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:542","type":"CtAssignmentImpl","sourcecode":"tailTerm = headTerm"},"variableMap":{"headTerm":"t","tailTerm":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1274","type":"CtAssignmentImpl","sourcecode":"t.org.mozilla.javascript.regexp.RENode = t.org.mozilla.javascript.regexp.RENode.org.mozilla.javascript.regexp.RENode"},"status":-1},{"failures":[],"tindex":"0313f4b0-8b51-11e6-9254-33bbc621ca0b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:2208","type":"CtIfImpl","sourcecode":"if ((x.org.mozilla.javascript.Scriptable) == null) {\n    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n} "},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
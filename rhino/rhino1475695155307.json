{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"9acc4c6c-8b30-11e6-9aca-1106ede78ead","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.JavaMembers:648","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Context.reportWarning((((\"Could not access constructor \" + \" of class \") + (java.lang.Class<?>.getName())) + \" due to lack of privileges.\"))"},"variableMap":{"cl":"cl"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DefiningClassLoader:40","type":"CtIfImpl","sourcecode":"if (cl == null) {\n    if ((java.lang.ClassLoader) != null) {\n        cl = java.lang.ClassLoader.loadClass(name);\n    } else {\n        cl = findSystemClass(name);\n    }\n} "},"status":-1},{"failures":[],"tindex":"9acc737d-8b30-11e6-9aca-01c3e76cdcc0","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptableObject:1882","type":"CtLocalVariableImpl","sourcecode":"final int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:1433","type":"CtLocalVariableImpl","sourcecode":"int int = endIndex - beginIndex"},"status":-1},{"failures":[],"tindex":"9acc737e-8b30-11e6-9aca-5774c6072823","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeArray:1694","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = id == (org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int)"},"variableMap":{"org.mozilla.javascript.NativeArray.Id_reduce":"length","id":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeIterator:147","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = ((args.int) > 1) && (org.mozilla.javascript.ScriptRuntime.toBoolean(args[1]))"},"status":-2},{"failures":[],"tindex":"9acc737f-8b30-11e6-9aca-db6784fc26e2","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeNumber:150","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isNaN(value)) {\n    return \"NaN\";\n} "},"variableMap":{"value":"java.lang.Double.NEGATIVE_INFINITY"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeMath:108","type":"CtSwitchImpl","sourcecode":"switch (methodId) {\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        return \"Math\";\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = x == 0.0 ? 0.0 : x < 0.0 ? -x : x;\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        if (((x == x) && ((-1.0) <= x)) && (x <= 1.0)) {\n            x = methodId == (org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int) ? java.lang.Math.acos(x) : java.lang.Math.asin(x);\n        } else {\n            x = java.lang.Double.java.lang.Double.double;\n        }\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.atan(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.atan2(x, org.mozilla.javascript.ScriptRuntime.toNumber(args, 1));\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.cbrt(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.ceil(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = (x == (java.lang.Double.java.lang.Double.double)) || (x == (java.lang.Double.java.lang.Double.double)) ? java.lang.Double.java.lang.Double.double : java.lang.Math.cos(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.cosh(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = js_hypot(args);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = x == (java.lang.Double.java.lang.Double.double) ? x : x == (java.lang.Double.java.lang.Double.double) ? 0.0 : java.lang.Math.exp(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.expm1(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.floor(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        return js_imul(args);\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = x < 0 ? java.lang.Double.java.lang.Double.double : java.lang.Math.log(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.log1p(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.log10(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = methodId == (org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int) ? java.lang.Double.java.lang.Double.double : java.lang.Double.java.lang.Double.double;\n        for (int int = 0 ; i != (args.int) ; ++i) {\n            double double = org.mozilla.javascript.ScriptRuntime.toNumber(args[i]);\n            if (d != d) {\n                x = d;\n                break;\n            } \n            if (methodId == (org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int)) {\n                x = java.lang.Math.max(x, d);\n            } else {\n                x = java.lang.Math.min(x, d);\n            }\n        }\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = js_pow(x, org.mozilla.javascript.ScriptRuntime.toNumber(args, 1));\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = java.lang.Math.random();\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        if (((x == x) && (x != (java.lang.Double.java.lang.Double.double))) && (x != (java.lang.Double.java.lang.Double.double))) {\n            long long = java.lang.Math.round(x);\n            if (l != 0) {\n                x = l;\n            } else {\n                if (x < 0.0) {\n                    x = org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.double;\n                } else if (x != 0.0) {\n                    x = 0.0;\n                } \n            }\n        } \n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = (x == (java.lang.Double.java.lang.Double.double)) || (x == (java.lang.Double.java.lang.Double.double)) ? java.lang.Double.java.lang.Double.double : java.lang.Math.sin(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.sinh(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.sqrt(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.tan(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.tanh(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = js_trunc(x);\n        break;\n    default :\n        throw new java.lang.IllegalStateException(java.lang.String.valueOf(methodId));\n}"},"status":-2},{"failures":[],"tindex":"9acc9a90-8b30-11e6-9aca-e979cfc555e0","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:1401","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.ScriptRuntime.toString(d)"},"variableMap":{"d":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeNumber:162","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.NativeNumber.num_to(value, args, org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int, org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int, 0, 1)"},"status":-1},{"failures":[],"tindex":"9acc9a91-8b30-11e6-9aca-09cd771068ef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1642","type":"CtIfImpl","sourcecode":"if (('0' <= c) && (c <= '7')) {\n    src++;\n    i = (8 * n) + (c - '0');\n    if (i <= 255)\n        n = i;\n    else\n        src--;\n    \n} "},"status":-1},{"failures":[],"tindex":"9acc9a92-8b30-11e6-9aca-4d66502cd924","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.NativeScript:136","type":"CtReturnImpl","sourcecode":"return real"},"variableMap":{"real":"nscript"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeScript:117","type":"CtReturnImpl","sourcecode":"return nscript"},"status":-1},{"failures":[],"tindex":"9acc9a93-8b30-11e6-9aca-c322096a6be9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:1679","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"org/mozilla/javascript/ScriptRuntime\", \"emptyArgs\", \"[Ljava/lang/Object;\")"},"status":-1},{"failures":[],"tindex":"9acc9a94-8b30-11e6-9aca-d9edc049a4fe","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:505","type":"CtInvocationImpl","sourcecode":"cfw.markLabel(nonTopCallLabel)"},"variableMap":{"cfw":"cfw","nonTopCallLabel":"org.mozilla.classfile.ByteCode.INVOKESTATIC"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:484","type":"CtInvocationImpl","sourcecode":"cfw.addInvoke(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"org/mozilla/javascript/ScriptRuntime\", \"hasTopCall\", (\"(Lorg/mozilla/javascript/Context;\" + \")Z\"))"},"status":-1},{"failures":[],"tindex":"9accc1a5-8b30-11e6-9aca-fd3b08107fb5","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Decompiler:852","type":"CtLocalVariableImpl","sourcecode":"double double = 0.0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:2074","type":"CtLocalVariableImpl","sourcecode":"double double = left.getDouble()"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
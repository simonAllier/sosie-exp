{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"3d350716-89b5-11e6-810b-bda0f833b3b6","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Optimizer:358","type":"CtInvocationImpl","sourcecode":"n.addChildToFront(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , arrayBase))"},"variableMap":{"org.mozilla.javascript.Token.TO_OBJECT":"org.mozilla.javascript.Token.LOCAL_BLOCK","arrayBase":"target","n":"child"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:233","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            int int = org.mozilla.javascript.ast.ScriptNode.getFunctionNode(fnIndex).getFunctionType();\n            if (fnType == (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, fnIndex);\n            } else {\n                if (fnType != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                    throw org.mozilla.javascript.Kit.codeBug();\n                } \n            }\n            if (!(boolean)) {\n                addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, fnIndex);\n                stackChange(1);\n                addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange((-1));\n            } \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        while (child != null) {\n            visitStatement(child, initialStackDepth);\n            child = child.getNext();\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = allocLocal();\n            node.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, local);\n            updateLineNumber(node);\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, local);\n            releaseLocal(local);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        {\n            visitExpression(child, 0);\n            for (org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(child.getNext())) ; caseNode != null ; caseNode = ((org.mozilla.javascript.ast.Jump)(caseNode.getNext()))) {\n                if ((caseNode.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                    throw badTree(caseNode);\n                \n                org.mozilla.javascript.Node org.mozilla.javascript.Node = caseNode.getFirstChild();\n                addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange(1);\n                visitExpression(test, 0);\n                addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                stackChange((-1));\n                addGoto(caseNode.org.mozilla.javascript.Node, org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange((-1));\n            }\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        markTargetLabel(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            visitExpression(child, 0);\n            addGoto(target, type);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            addGoto(target, type);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            addGoto(target, org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            stackChange(1);\n            int int = getLocalBlockRef(node);\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, finallyRegister);\n            stackChange((-1));\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, finallyRegister);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        visitExpression(child, 0);\n        addIcode((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int : org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(node));\n            int int = getLocalBlockRef(tryNode);\n            int int = allocLocal();\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, scopeLocal);\n            int int = int;\n            boolean boolean = boolean;\n            boolean = true;\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            boolean = savedFlag;\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = tryNode.org.mozilla.javascript.Node;\n            if (catchTarget != null) {\n                int int = int[][getTargetLabel(catchTarget)];\n                addExceptionHandler(tryStart, catchStartPC, catchStartPC, false, exceptionObjectLocal, scopeLocal);\n            } \n            org.mozilla.javascript.Node org.mozilla.javascript.Node = tryNode.getFinally();\n            if (finallyTarget != null) {\n                int int = int[][getTargetLabel(finallyTarget)];\n                addExceptionHandler(tryStart, finallyStartPC, finallyStartPC, true, exceptionObjectLocal, scopeLocal);\n            } \n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, scopeLocal);\n            releaseLocal(scopeLocal);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = getLocalBlockRef(node);\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            java.lang.String java.lang.String = child.getString();\n            child = child.getNext();\n            visitExpression(child, 0);\n            addStringPrefix(name);\n            addIndexPrefix(localIndex);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            addUint8((scopeIndex != 0 ? 1 : 0));\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        visitExpression(child, 0);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        addUint16(((int) & 65535));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        addIndexOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, getLocalBlockRef(node));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, 0)) != 0) {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            addUint16(((int) & 65535));\n        } else if (child != null) {\n            visitExpression(child, org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            stackChange((-1));\n        } else {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addIndexOp(type, getLocalBlockRef(node));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int :\n        break;\n    default :\n        throw badTree(node);\n}"},"status":-1},{"failures":[],"tindex":"3d355537-89b5-11e6-810b-572009110421","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeError:256","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object = org.mozilla.javascript.ScriptableObject.getProperty(thisObj, \"fileName\")"},"variableMap":{"thisObj":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeJavaClass:287","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object = ((org.mozilla.javascript.Wrapper)(value)).unwrap()"},"status":-1},{"failures":[],"tindex":"3d355538-89b5-11e6-810b-b51d6cf891e1","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Context:2603","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?> = org.mozilla.javascript.Kit.classOrNull(\"org.mozilla.javascript.regexp.RegExpImpl\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaMembers:661","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>"},"status":-1},{"failures":[],"tindex":"3d355539-89b5-11e6-810b-f983516bfc69","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeObject:357","type":"CtIfImpl","sourcecode":"if (obj.isExtensible())\n    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n"},"variableMap":{"java.lang.Boolean.FALSE":"val1","obj":"val2"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:2735","type":"CtIfImpl","sourcecode":"if ((!(val1 instanceof java.lang.CharSequence)) && (!(val2 instanceof java.lang.CharSequence)))\n    if ((val1 instanceof java.lang.Number) && (val2 instanceof java.lang.Number))\n        return org.mozilla.javascript.ScriptRuntime.wrapNumber(((((java.lang.Number)(val1)).doubleValue()) + (((java.lang.Number)(val2)).doubleValue())));\n    else\n        return org.mozilla.javascript.ScriptRuntime.wrapNumber(((org.mozilla.javascript.ScriptRuntime.toNumber(val1)) + (org.mozilla.javascript.ScriptRuntime.toNumber(val2))));\n    \n"},"status":-1},{"failures":[],"tindex":"3d35553a-89b5-11e6-810b-a7f23cfe111e","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:716","type":"CtIfImpl","sourcecode":"if (!((escapeQuote == '\"') || (escapeQuote == '\\'')))\n    org.mozilla.javascript.Kit.codeBug();\n"},"variableMap":{"escapeQuote":"chr"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:486","type":"CtIfImpl","sourcecode":"if (((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) && ((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) {\n    result.byte = ((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) == 0 ? org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte : org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    result.char = result.org.mozilla.javascript.regexp.RENode.char;\n    result.int = result.org.mozilla.javascript.regexp.RENode.char;\n    state.int += 13;\n} else if (((((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) && ((result.org.mozilla.javascript.regexp.RENode.int) < 256)) && ((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) && (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) == 0)) {\n    result.byte = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    result.char = result.org.mozilla.javascript.regexp.RENode.char;\n    result.int = result.org.mozilla.javascript.regexp.RENode.int;\n    state.int += 13;\n} else if (((((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) && ((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) && ((result.org.mozilla.javascript.regexp.RENode.int) < 256)) && (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) == 0)) {\n    result.byte = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    result.char = result.org.mozilla.javascript.regexp.RENode.char;\n    result.int = result.org.mozilla.javascript.regexp.RENode.int;\n    state.int += 13;\n} else {\n    state.int += 9;\n}"},"status":-1},{"failures":[],"tindex":"3d357c4b-89b5-11e6-810b-3369c7281112","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Parser:954","type":"CtSwitchImpl","sourcecode":"switch (tt) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        break guessingStatementEnd;\n}"},"variableMap":{"tt":"k","org.mozilla.javascript.Token.ERROR":"y","org.mozilla.javascript.Token.EOL":"z","org.mozilla.javascript.Token.SEMI":"z","org.mozilla.javascript.Token.EOF":"k"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:177","type":"CtIfImpl","sourcecode":"if (k != 0) {\n    org.mozilla.javascript.DToA.stuffBits(dbl_bits, 4, (y | (z << (32 - k))));\n    z >>= k;\n} else\n    org.mozilla.javascript.DToA.stuffBits(dbl_bits, 4, y);\n"},"status":-1},{"failures":[],"tindex":"3d357c4c-89b5-11e6-810b-27e62c70d8ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeGlobal:445","type":"CtForImpl","sourcecode":"for (int int = firstEscapePos ; k != L ; ) {\n    char char = buf[k];\n    ++k;\n    if ((c == '%') && (k != L)) {\n        int int;\n        int int;\n        if ((buf[k]) == 'u') {\n            start = k + 1;\n            end = k + 5;\n        } else {\n            start = k;\n            end = k + 2;\n        }\n        if (end <= L) {\n            int int = 0;\n            for (int int = start ; i != end ; ++i) {\n                x = org.mozilla.javascript.Kit.xDigitToInt(buf[i], x);\n            }\n            if (x >= 0) {\n                c = ((char)(x));\n                k = end;\n            } \n        } \n    } \n    buf[destination] = c;\n    ++destination;\n}"},"status":-1},{"failures":[],"tindex":"3d357c4d-89b5-11e6-810b-49d60c9fcce6","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:2953","type":"CtLocalVariableImpl","sourcecode":"int int = org.mozilla.javascript.optimizer.Codegen.getIndex(ofn.org.mozilla.javascript.ast.FunctionNode)"},"variableMap":{"codegen":"key","ofn":"key","fnode":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ObjToIntMap:125","type":"CtLocalVariableImpl","sourcecode":"int int = findIndex(key)"},"status":-1},{"failures":[],"tindex":"3d357c4e-89b5-11e6-810b-837e18f436d4","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExpCtor:55","type":"CtReturnImpl","sourcecode":"return args[0]"},"variableMap":{"args":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:280","type":"CtReturnImpl","sourcecode":"return value"},"status":-1},{"failures":[],"tindex":"3d357c4f-89b5-11e6-810b-c14fc6a6c85b","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Context:2048","type":"CtAssignmentImpl","sourcecode":"int = max"},"variableMap":{"max":"size","maximumInterpreterStackDepth":"size"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:4331","type":"CtOperatorAssignmentImpl","sourcecode":"size += 2"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"9f2caf46-8b57-11e6-8492-d9796affa762","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Decompiler:442","type":"CtIfImpl","sourcecode":"if (newLine) {\n    result.append('\\n');\n} "},"status":-1},{"failures":[],"tindex":"9f2cd657-8b57-11e6-8492-93a3c5a7c9c8","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.NativeJSON:128","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Object java.lang.Object"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaMembers:259","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object = null"},"status":-1},{"failures":[],"tindex":"9f2cfd68-8b57-11e6-8492-f3d47fea4852","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Arguments:194","type":"CtSwitchImpl","sourcecode":"switch (id) {\n    case org.mozilla.javascript.Arguments.org.mozilla.javascript.Arguments.int :\n        attr = int;\n        break;\n    case org.mozilla.javascript.Arguments.org.mozilla.javascript.Arguments.int :\n        attr = int;\n        break;\n    case org.mozilla.javascript.Arguments.org.mozilla.javascript.Arguments.int :\n        attr = int;\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}"},"variableMap":{"org.mozilla.javascript.Arguments.Id_length":"org.mozilla.javascript.NativeMath.Id_max","calleeAttr":"org.mozilla.javascript.NativeMath.Id_max","org.mozilla.javascript.Arguments.Id_callee":"methodId","id":"methodId","org.mozilla.javascript.Arguments.Id_caller":"methodId","attr":"org.mozilla.javascript.NativeMath.Id_max","lengthAttr":"org.mozilla.javascript.NativeMath.Id_max","callerAttr":"org.mozilla.javascript.NativeMath.Id_max"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeMath:210","type":"CtIfImpl","sourcecode":"if (methodId == (org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int)) {\n    x = java.lang.Math.max(x, d);\n} else {\n    x = java.lang.Math.min(x, d);\n}"},"status":-1},{"failures":[],"tindex":"9f2cfd69-8b57-11e6-8492-d5bab8440273","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.TopLevel:228","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object = func != null ? func.getPrototypeProperty() : null"},"variableMap":{"func":"desc"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:1927","type":"CtLocalVariableImpl","sourcecode":"java.lang.Object java.lang.Object = org.mozilla.javascript.ScriptableObject.getProperty(desc, \"get\")"},"status":-1},{"failures":[],"tindex":"9f2cfd6a-8b57-11e6-8492-d7ac2015e573","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.DToA:569","type":"CtAssignmentImpl","sourcecode":"s2 = j"},"variableMap":{"j":"offset","s2":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:2807","type":"CtAssignmentImpl","sourcecode":"offset = org.mozilla.classfile.ClassFileWriter.putInt16(org.mozilla.javascript.ObjArray.size(), data, offset)"},"status":-1},{"failures":[],"tindex":"9f2cfd6b-8b57-11e6-8492-358c14576616","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:3311","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    proto = proto.getPrototype();\n    if (proto == staticTopScope) {\n        return possibleDynamicScope;\n    } \n    if (proto == null) {\n        return staticTopScope;\n    } \n}"},"variableMap":{"staticTopScope":"thisObj","proto":"thisObj","possibleDynamicScope":"thisObj"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:960","type":"CtIfImpl","sourcecode":"if (thisObj instanceof org.mozilla.javascript.NativeArray) {\n    org.mozilla.javascript.NativeArray org.mozilla.javascript.NativeArray = ((org.mozilla.javascript.NativeArray)(thisObj));\n    if (na.boolean) {\n        for (int int = 0, int int = ((int)(na.long)) - 1 ; i < j ; i++ , j--) {\n            java.lang.Object java.lang.Object = na.java.lang.Object[][i];\n            na.java.lang.Object[][i] = na.java.lang.Object[][j];\n            na.java.lang.Object[][j] = temp;\n        }\n        return thisObj;\n    } \n} "},"status":-1},{"failures":[],"tindex":"9f2d247c-8b57-11e6-8492-1368eea0cf1e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:3442","type":"CtAssignmentImpl","sourcecode":"errorMsg = ee.getErrorMessage()"},"status":-1},{"failures":[],"tindex":"9f2d247d-8b57-11e6-8492-6b1a3923bea5","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:560","type":"CtInvocationImpl","sourcecode":"cfw.adjustStackTop((-1))"},"variableMap":{"cfw":"cfw"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:2858","type":"CtIfImpl","sourcecode":"if (exprContext) {\n    org.mozilla.classfile.ClassFileWriter.addALoad(short);\n} "},"status":-1},{"failures":[],"tindex":"9f2d247e-8b57-11e6-8492-2dfd564be44a","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.DToA:173","type":"CtIfImpl","sourcecode":"if ((y = d1) != 0) {\n    dbl_bits = new byte[8];\n    k = org.mozilla.javascript.DToA.lo0bits(y);\n    y >>>= k;\n    if (k != 0) {\n        org.mozilla.javascript.DToA.stuffBits(dbl_bits, 4, (y | (z << (32 - k))));\n        z >>= k;\n    } else\n        org.mozilla.javascript.DToA.stuffBits(dbl_bits, 4, y);\n    \n    org.mozilla.javascript.DToA.stuffBits(dbl_bits, 0, z);\n    i = z != 0 ? 2 : 1;\n} else {\n    dbl_bits = new byte[4];\n    k = org.mozilla.javascript.DToA.lo0bits(z);\n    z >>>= k;\n    org.mozilla.javascript.DToA.stuffBits(dbl_bits, 0, z);\n    k += 32;\n    i = 1;\n}"},"variableMap":{"y":"nextAltFixup","i":"org.mozilla.javascript.regexp.NativeRegExp.JSREG_FOLD","z":"length","dbl_bits":"program","k":"parenIndex","d1":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1234","type":"CtSwitchImpl","sourcecode":"switch (t.byte) {\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        --pc;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        boolean boolean = (t.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, (ignoreCase ? org.mozilla.javascript.regexp.NativeRegExp.upcase(t.char) : t.char));\n        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n        org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, (ignoreCase ? org.mozilla.javascript.regexp.NativeRegExp.upcase(((char)(t.int))) : t.int));\n        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        nextAlt = t.org.mozilla.javascript.regexp.RENode;\n        nextAltFixup = pc;\n        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n        pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n        program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        nextTermFixup = pc;\n        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n        org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextAltFixup, pc);\n        pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, nextAlt);\n        program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        nextAltFixup = pc;\n        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n        org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextTermFixup, pc);\n        org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextAltFixup, pc);\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((t.int) != (-1)) {\n            while ((((t.org.mozilla.javascript.regexp.RENode) != null) && ((t.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) && (((t.int) + (t.int)) == (t.org.mozilla.javascript.regexp.RENode.int))) {\n                t.int += t.org.mozilla.javascript.regexp.RENode.int;\n                t.org.mozilla.javascript.regexp.RENode = t.org.mozilla.javascript.regexp.RENode.org.mozilla.javascript.regexp.RENode;\n            }\n        } \n        if (((t.int) != (-1)) && ((t.int) > 1)) {\n            if (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) != 0)\n                program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            else\n                program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            \n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n        } else {\n            if ((t.char) < 256) {\n                if (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) != 0)\n                    program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                else\n                    program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                \n                program[(pc++)] = ((byte)(t.char));\n            } else {\n                if (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) != 0)\n                    program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                else\n                    program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                \n                pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.char);\n            }\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n        pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n        program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        nextTermFixup = pc;\n        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n        pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n        program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextTermFixup, pc);\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        nextTermFixup = pc;\n        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n        pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n        program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextTermFixup, pc);\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((t.int) == 0) && ((t.int) == (-1)))\n            program[(pc - 1)] = t.boolean ? org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte : org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        else if (((t.int) == 0) && ((t.int) == 1))\n            program[(pc - 1)] = t.boolean ? org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte : org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        else if (((t.int) == 1) && ((t.int) == (-1)))\n            program[(pc - 1)] = t.boolean ? org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte : org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        else {\n            if (!(t.boolean))\n                program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            \n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, ((t.int) + 1));\n        }\n        pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n        pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n        nextTermFixup = pc;\n        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n        pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n        program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextTermFixup, pc);\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (!(t.boolean))\n            program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n        \n        pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n        re.org.mozilla.javascript.regexp.RECharSet[][t.int] = new org.mozilla.javascript.regexp.RECharSet(t.int , t.int , t.int , t.boolean);\n        break;\n    default :\n        break;\n}"},"status":-1},{"failures":[],"tindex":"9f2d729f-8b57-11e6-8492-b36a16b8f90d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:704","type":"CtInvocationImpl","sourcecode":"visitExpression(child, 0)"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
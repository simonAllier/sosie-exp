{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"492ca626-89d9-11e6-9fa8-f54442051100","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:3145","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.ScriptableObject.Slot[] = new org.mozilla.javascript.ScriptableObject.Slot[tableSize]"},"status":-1},{"failures":[],"tindex":"492ccd37-89d9-11e6-9fa8-794badd243cd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:253","type":"CtIfImpl","sourcecode":"if (array == null) {\n    synchronized(org.mozilla.javascript.IdScriptableObject.PrototypeValues.this) {\n        array = java.lang.Object[];\n        if (array == null) {\n            array = new java.lang.Object[(int) * (org.mozilla.javascript.IdScriptableObject.PrototypeValues.org.mozilla.javascript.IdScriptableObject.PrototypeValues.int)];\n            java.lang.Object[] = array;\n            short[] = new short[int];\n        } \n    }\n} "},"status":-1},{"failures":[],"tindex":"492ccd38-89d9-11e6-9fa8-89cd9d513f02","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:1221","type":"CtInvocationImpl","sourcecode":"resolveGoto(fromPC, int)"},"status":-1},{"failures":[],"tindex":"492ccd39-89d9-11e6-9fa8-3fab15a6816c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.MemberBox:42","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.MemberBox.this.java.lang.reflect.Member = method"},"variableMap":{"memberObject":"memberObject","method":"memberObject"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.MemberBox:49","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.MemberBox.this.java.lang.reflect.Member = constructor"},"status":-1},{"failures":[],"tindex":"492ccd3a-89d9-11e6-9fa8-0bed3597adfd","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJavaObject:136","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.Scriptable = m"},"variableMap":{"parent":"target","m":"target"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:2784","type":"CtAssignmentImpl","sourcecode":"target = target.getPrototype()"},"status":-2},{"failures":[],"tindex":"492ccd3b-89d9-11e6-9fa8-ff2be9a7200d","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4504","type":"CtIfImpl","sourcecode":"if ((strLen * 3) <= (org.mozilla.classfile.ConstantPool.org.mozilla.classfile.ConstantPool.int)) {\n    return true;\n} else if (strLen > (org.mozilla.classfile.ConstantPool.org.mozilla.classfile.ConstantPool.int)) {\n    return false;\n} "},"variableMap":{"strLen":"startIndex","org.mozilla.classfile.ConstantPool.MAX_UTF_ENCODING_SIZE":"cpend"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:817","type":"CtSwitchImpl","sourcecode":"switch (c) {\n    case '^' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        return true;\n    case '$' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        return true;\n    case '\\\\' :\n        if ((state.int) < (state.int)) {\n            c = src[((state.int)++)];\n            switch (c) {\n                case 'b' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    return true;\n                case 'B' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    return true;\n                case '0' :\n                    org.mozilla.javascript.regexp.NativeRegExp.reportWarning(state.org.mozilla.javascript.Context, \"msg.bad.backref\", \"\");\n                    num = 0;\n                    while ((num < 32) && ((state.int) < (state.int))) {\n                        c = src[state.int];\n                        if ((c >= '0') && (c <= '7')) {\n                            (state.int)++;\n                            num = (8 * num) + (c - '0');\n                        } else\n                            break;\n                        \n                    }\n                    c = ((char)(num));\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case '1' :\n                case '2' :\n                case '3' :\n                case '4' :\n                case '5' :\n                case '6' :\n                case '7' :\n                case '8' :\n                case '9' :\n                    termStart = (state.int) - 1;\n                    num = org.mozilla.javascript.regexp.NativeRegExp.getDecimalValue(c, state, 65535, \"msg.overlarge.backref\");\n                    if (num > (state.int))\n                        org.mozilla.javascript.regexp.NativeRegExp.reportWarning(state.org.mozilla.javascript.Context, \"msg.bad.backref\", \"\");\n                    \n                    if (num > (state.int)) {\n                        state.int = termStart;\n                        if (c >= '8') {\n                            c = '\\\\';\n                            org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                            break;\n                        } \n                        (state.int)++;\n                        num = c - '0';\n                        while ((num < 32) && ((state.int) < (state.int))) {\n                            c = src[state.int];\n                            if ((c >= '0') && (c <= '7')) {\n                                (state.int)++;\n                                num = (8 * num) + (c - '0');\n                            } else\n                                break;\n                            \n                        }\n                        c = ((char)(num));\n                        org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                        break;\n                    } \n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.org.mozilla.javascript.regexp.RENode.int = num - 1;\n                    state.int += 3;\n                    if ((state.int) < num) {\n                        state.int = num;\n                    } \n                    break;\n                case 'f' :\n                    c = 12;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'n' :\n                    c = 10;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'r' :\n                    c = 13;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 't' :\n                    c = 9;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'v' :\n                    c = 11;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'c' :\n                    if (((state.int) < (state.int)) && (org.mozilla.javascript.regexp.NativeRegExp.isControlLetter(src[state.int])))\n                        c = ((char)((src[((state.int)++)]) & 31));\n                    else {\n                        --(state.int);\n                        c = '\\\\';\n                    }\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'u' :\n                    nDigits += 2;\n                case 'x' :\n                    {\n                        int int = 0;\n                        int int;\n                        for (i = 0 ; (i < nDigits) && ((state.int) < (state.int)) ; i++) {\n                            c = src[((state.int)++)];\n                            n = org.mozilla.javascript.Kit.xDigitToInt(c, n);\n                            if (n < 0) {\n                                state.int -= i + 2;\n                                n = src[((state.int)++)];\n                                break;\n                            } \n                        }\n                        c = ((char)(n));\n                    }\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'd' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'D' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 's' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'S' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'w' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'W' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                default :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.org.mozilla.javascript.regexp.RENode.char = c;\n                    state.org.mozilla.javascript.regexp.RENode.int = 1;\n                    state.org.mozilla.javascript.regexp.RENode.int = (state.int) - 1;\n                    state.int += 3;\n                    break;\n            }\n            break;\n        } else {\n            org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.trail.backslash\", \"\");\n            return false;\n        }\n    case '(' :\n        {\n            org.mozilla.javascript.regexp.RENode org.mozilla.javascript.regexp.RENode = null;\n            termStart = state.int;\n            if (((((state.int) + 1) < (state.int)) && ((src[state.int]) == '?')) && ((((c = src[((state.int) + 1)]) == '=') || (c == '!')) || (c == ':'))) {\n                state.int += 2;\n                if (c == '=') {\n                    result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.int += 4;\n                } else if (c == '!') {\n                    result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.int += 4;\n                } \n            } else {\n                result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                state.int += 6;\n                result.int = (state.int)++;\n            }\n            ++(state.int);\n            if (!(org.mozilla.javascript.regexp.NativeRegExp.parseDisjunction(state)))\n                return false;\n            \n            if (((state.int) == (state.int)) || ((src[state.int]) != ')')) {\n                org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.paren\", \"\");\n                return false;\n            } \n            ++(state.int);\n            --(state.int);\n            if (result != null) {\n                result.org.mozilla.javascript.regexp.RENode = state.org.mozilla.javascript.regexp.RENode;\n                state.org.mozilla.javascript.regexp.RENode = result;\n            } \n            break;\n        }\n    case ')' :\n        org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.re.unmatched.right.paren\", \"\");\n        return false;\n    case '[' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        termStart = state.int;\n        state.org.mozilla.javascript.regexp.RENode.int = termStart;\n        while (true) {\n            if ((state.int) == (state.int)) {\n                org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.class\", \"\");\n                return false;\n            } \n            if ((src[state.int]) == '\\\\')\n                (state.int)++;\n            else {\n                if ((src[state.int]) == ']') {\n                    state.org.mozilla.javascript.regexp.RENode.int = (state.int) - termStart;\n                    break;\n                } \n            }\n            (state.int)++;\n        }\n        state.org.mozilla.javascript.regexp.RENode.int = (state.int)++;\n        if (!(org.mozilla.javascript.regexp.NativeRegExp.calculateBitmapSize(state, state.org.mozilla.javascript.regexp.RENode, src, termStart, ((state.int)++))))\n            return false;\n        \n        state.int += 3;\n        break;\n    case '.' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        break;\n    case '*' :\n    case '+' :\n    case '?' :\n        org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.bad.quant\", java.lang.String.valueOf(src[((state.int) - 1)]));\n        return false;\n    default :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        state.org.mozilla.javascript.regexp.RENode.char = c;\n        state.org.mozilla.javascript.regexp.RENode.int = 1;\n        state.org.mozilla.javascript.regexp.RENode.int = (state.int) - 1;\n        state.int += 3;\n        break;\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":6,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"1195dc5d-8b2a-11e6-8e6b-cf1483824d27","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Node:541","type":"CtIfImpl","sourcecode":"if (s == null)\n    org.mozilla.javascript.Kit.codeBug();\n"},"variableMap":{"s":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:2192","type":"CtDoImpl","sourcecode":"do {\n    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n    if (!result) {\n        if ((state.int) == 0)\n            result = true;\n        \n        continuationPc = state.int;\n        continuationOp = state.int;\n        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n        break switchStatement;\n    } \n    if (((state.int) == 0) && ((gData.int) == (state.int))) {\n        result = false;\n        continuationPc = state.int;\n        continuationOp = state.int;\n        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n        break switchStatement;\n    } \n    int int = state.int;\n    int int = state.int;\n    if (new_min != 0)\n        new_min--;\n    \n    if (new_max != (-1))\n        new_max--;\n    \n    if (new_max == 0) {\n        result = true;\n        continuationPc = state.int;\n        continuationOp = state.int;\n        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n        break switchStatement;\n    } \n    nextpc = pc + (3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int));\n    nextop = program[nextpc];\n    int int = gData.int;\n    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(nextop)) {\n        nextpc++;\n        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, nextop, program, nextpc, end, true);\n        if (match < 0) {\n            result = new_min == 0;\n            continuationPc = state.int;\n            continuationOp = state.int;\n            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n            break switchStatement;\n        } \n        result = true;\n        nextpc = match;\n    } \n    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    continuationPc = pc;\n    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, startcp, null, state.int, state.int);\n    if (new_min == 0) {\n        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc, startcp, state.int, state.int);\n        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, (pc + (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)));\n        for (int int = 0 ; k < parenCount ; k++) {\n            gData.setParens((parenIndex + k), (-1), 0);\n        }\n    } \n} while ((program[nextpc]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte) )"},"status":-1},{"failures":[],"tindex":"1196518e-8b2a-11e6-8e6b-61df490513d2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:2753","type":"CtOperatorAssignmentImpl","sourcecode":"size += 2"},"status":-1},{"failures":[],"tindex":"1196518f-8b2a-11e6-8e6b-55cfd852d349","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeArray:1793","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(longLen))"},"variableMap":{"longLen":"dBits"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:165","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(dBits))"},"status":-1},{"failures":[],"tindex":"11965190-8b2a-11e6-8e6b-59345f4e13da","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4191","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ImporterTopLevel:232","type":"CtLocalVariableImpl","sourcecode":"int int = f.methodId()"},"status":-1},{"failures":[],"tindex":"11965191-8b2a-11e6-8e6b-0f064b3ca633","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ObjToIntMap:42","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.ObjToIntMap.Iterator.this.int = -1"},"status":-1},{"failures":[],"tindex":"11965192-8b2a-11e6-8e6b-99530840704f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1847","type":"CtAssignmentImpl","sourcecode":"offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)"},"status":-1}],"header":{"groupId":"r","transformationCount":6,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
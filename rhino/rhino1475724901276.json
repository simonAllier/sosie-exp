{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"dcc76c5c-8b75-11e6-9855-93dea48886a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeMath:108","type":"CtSwitchImpl","sourcecode":"switch (methodId) {\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        return \"Math\";\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = x == 0.0 ? 0.0 : x < 0.0 ? -x : x;\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        if (((x == x) && ((-1.0) <= x)) && (x <= 1.0)) {\n            x = methodId == (org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int) ? java.lang.Math.acos(x) : java.lang.Math.asin(x);\n        } else {\n            x = java.lang.Double.java.lang.Double.double;\n        }\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.atan(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.atan2(x, org.mozilla.javascript.ScriptRuntime.toNumber(args, 1));\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.cbrt(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.ceil(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = (x == (java.lang.Double.java.lang.Double.double)) || (x == (java.lang.Double.java.lang.Double.double)) ? java.lang.Double.java.lang.Double.double : java.lang.Math.cos(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.cosh(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = js_hypot(args);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = x == (java.lang.Double.java.lang.Double.double) ? x : x == (java.lang.Double.java.lang.Double.double) ? 0.0 : java.lang.Math.exp(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.expm1(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.floor(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        return js_imul(args);\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = x < 0 ? java.lang.Double.java.lang.Double.double : java.lang.Math.log(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.log1p(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.log10(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = methodId == (org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int) ? java.lang.Double.java.lang.Double.double : java.lang.Double.java.lang.Double.double;\n        for (int int = 0 ; i != (args.int) ; ++i) {\n            double double = org.mozilla.javascript.ScriptRuntime.toNumber(args[i]);\n            if (d != d) {\n                x = d;\n                break;\n            } \n            if (methodId == (org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int)) {\n                x = java.lang.Math.max(x, d);\n            } else {\n                x = java.lang.Math.min(x, d);\n            }\n        }\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = js_pow(x, org.mozilla.javascript.ScriptRuntime.toNumber(args, 1));\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = java.lang.Math.random();\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        if (((x == x) && (x != (java.lang.Double.java.lang.Double.double))) && (x != (java.lang.Double.java.lang.Double.double))) {\n            long long = java.lang.Math.round(x);\n            if (l != 0) {\n                x = l;\n            } else {\n                if (x < 0.0) {\n                    x = org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.double;\n                } else if (x != 0.0) {\n                    x = 0.0;\n                } \n            }\n        } \n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = (x == (java.lang.Double.java.lang.Double.double)) || (x == (java.lang.Double.java.lang.Double.double)) ? java.lang.Double.java.lang.Double.double : java.lang.Math.sin(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.sinh(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.sqrt(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.tan(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = java.lang.Math.tanh(x);\n        break;\n    case org.mozilla.javascript.NativeMath.org.mozilla.javascript.NativeMath.int :\n        x = org.mozilla.javascript.ScriptRuntime.toNumber(args, 0);\n        x = js_trunc(x);\n        break;\n    default :\n        throw new java.lang.IllegalStateException(java.lang.String.valueOf(methodId));\n}"},"status":-1},{"failures":[],"tindex":"dcc7ba7d-8b75-11e6-9855-5592a195514a","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ast.Scope:32","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.ast.Scope.this.int = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int"},"variableMap":{"org.mozilla.javascript.Token.BLOCK":"c","type":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:970","type":"CtAssignmentImpl","sourcecode":"c = getChar()"},"status":0},{"failures":[],"tindex":"dcc7ba7e-8b75-11e6-9855-513129b91e44","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.LazilyLoadedCtor:50","type":"CtInvocationImpl","sourcecode":"scope.addLazilyInitializedValue(propertyName, 0, org.mozilla.javascript.LazilyLoadedCtor.this, org.mozilla.javascript.ScriptableObject.org.mozilla.javascript.ScriptableObject.int)"},"status":-1},{"failures":[],"tindex":"dcc7ba7f-8b75-11e6-9855-8bf1b6ee0bc7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:593","type":"CtInvocationImpl","sourcecode":"ctor.sealObject()"},"status":0},{"failures":[],"tindex":"dcc7ba80-8b75-11e6-9855-175f3788c657","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:2383","type":"CtIfImpl","sourcecode":"if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n    org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, falseTarget);\nelse\n    org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, falseTarget);\n"},"variableMap":{"cfw":"cfw","falseTarget":"start","org.mozilla.classfile.ByteCode.IFNE":"switchStart","type":"start","org.mozilla.javascript.Token.AND":"org.mozilla.classfile.ByteCode.INVOKESPECIAL","org.mozilla.classfile.ByteCode.IFEQ":"org.mozilla.classfile.ByteCode.INVOKESPECIAL"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:680","type":"CtForImpl","sourcecode":"for (int int = start ; i != end ; ++i) {\n    if (generateSwitch) {\n        if (i == start) {\n            cfw.markTableSwitchDefault(switchStart);\n            switchStackTop = cfw.getStackTop();\n        } else {\n            cfw.markTableSwitchCase(switchStart, ((i - 1) - start), switchStackTop);\n        }\n    } \n    org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode = org.mozilla.javascript.optimizer.OptFunctionNode.get(org.mozilla.javascript.ast.ScriptNode[][i]);\n    cfw.addInvoke(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, java.lang.String, getFunctionInitMethodName(ofn), org.mozilla.javascript.optimizer.Codegen.org.mozilla.javascript.optimizer.Codegen.java.lang.String);\n    cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n}"},"status":-1},{"failures":[],"tindex":"dcc7ba81-8b75-11e6-9855-49d3ba91f836","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeGlobal:739","type":"CtWhileImpl","sourcecode":"while (a != 0) {\n    a >>>= 5;\n    utf8Length++;\n}"},"variableMap":{"a":"c","utf8Length":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:1207","type":"CtInvocationImpl","sourcecode":"addToString(c)"},"status":-1},{"failures":[],"tindex":"dcc7e192-8b75-11e6-9855-8d86fe0cf57d","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeArray:1520","type":"CtIfImpl","sourcecode":"if ((val != (org.mozilla.javascript.Scriptable.org.mozilla.javascript.Scriptable.java.lang.Object)) && (org.mozilla.javascript.ScriptRuntime.shallowEq(val, compareTo))) {\n    return java.lang.Long.valueOf(i);\n} "},"variableMap":{"val":"org.mozilla.javascript.Undefined.instance","i":"index","org.mozilla.javascript.Scriptable.NOT_FOUND":"org.mozilla.javascript.Undefined.instance","compareTo":"org.mozilla.javascript.Undefined.instance"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.typedarrays.NativeInt8Array:76","type":"CtIfImpl","sourcecode":"if (checkIndex(index)) {\n    return org.mozilla.javascript.Undefined.org.mozilla.javascript.Undefined.java.lang.Object;\n} "},"status":-1},{"failures":[],"tindex":"dcc7e193-8b75-11e6-9855-b73e39269e0b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:592","type":"CtIfImpl","sourcecode":"if (sealed) {\n    ctor.sealObject();\n} "},"status":-1},{"failures":[],"tindex":"dcc7e194-8b75-11e6-9855-89392a855d2f","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Parser:1324","type":"CtInvocationImpl","sourcecode":"fis.setIterator(init)"},"variableMap":{"fis":"right","init":"child"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:1843","type":"CtInvocationImpl","sourcecode":"child.removeChild(right)"},"status":-1},{"failures":[],"tindex":"dcc7e195-8b75-11e6-9855-4d6a19089141","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:695","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.floor(((org.mozilla.javascript.NativeDate.TimeFromYear(year)) / (org.mozilla.javascript.NativeDate.org.mozilla.javascript.NativeDate.double)))"},"variableMap":{"year":"lorutime","org.mozilla.javascript.NativeDate.msPerDay":"time"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:1487","type":"CtLocalVariableImpl","sourcecode":"double double = org.mozilla.javascript.NativeDate.MakeDate(org.mozilla.javascript.NativeDate.Day(lorutime), time)"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
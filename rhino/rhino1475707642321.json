{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"ada393b0-8b4d-11e6-ac76-29486f6ec9c0","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ObjToIntMap:56","type":"CtIfImpl","sourcecode":"if ((int) == (-1))\n    org.mozilla.javascript.Kit.codeBug();\n"},"variableMap":{"remaining":"beyond"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:3560","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.markLabel(beyond)"},"status":-1},{"failures":[],"tindex":"ada3bac1-8b4d-11e6-ac76-150089337838","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.InfixExpression:86","type":"CtIfImpl","sourcecode":"if (!(org.mozilla.javascript.Token.isValidToken(operator)))\n    throw new java.lang.IllegalArgumentException((\"Invalid token: \" + operator));\n"},"variableMap":{"operator":"bmsize"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1232","type":"CtWhileImpl","sourcecode":"while (t != null) {\n    program[(pc++)] = t.byte;\n    switch (t.byte) {\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            --pc;\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            boolean boolean = (t.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n            org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, (ignoreCase ? org.mozilla.javascript.regexp.NativeRegExp.upcase(t.char) : t.char));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, (ignoreCase ? org.mozilla.javascript.regexp.NativeRegExp.upcase(((char)(t.int))) : t.int));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            nextAlt = t.org.mozilla.javascript.regexp.RENode;\n            nextAltFixup = pc;\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n            program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            nextTermFixup = pc;\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextAltFixup, pc);\n            pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, nextAlt);\n            program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            nextAltFixup = pc;\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextTermFixup, pc);\n            org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextAltFixup, pc);\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            if ((t.int) != (-1)) {\n                while ((((t.org.mozilla.javascript.regexp.RENode) != null) && ((t.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) && (((t.int) + (t.int)) == (t.org.mozilla.javascript.regexp.RENode.int))) {\n                    t.int += t.org.mozilla.javascript.regexp.RENode.int;\n                    t.org.mozilla.javascript.regexp.RENode = t.org.mozilla.javascript.regexp.RENode.org.mozilla.javascript.regexp.RENode;\n                }\n            } \n            if (((t.int) != (-1)) && ((t.int) > 1)) {\n                if (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) != 0)\n                    program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                else\n                    program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                \n                pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n                pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            } else {\n                if ((t.char) < 256) {\n                    if (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) != 0)\n                        program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    else\n                        program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    \n                    program[(pc++)] = ((byte)(t.char));\n                } else {\n                    if (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) != 0)\n                        program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    else\n                        program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    \n                    pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.char);\n                }\n            }\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n            program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            nextTermFixup = pc;\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n            program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextTermFixup, pc);\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            nextTermFixup = pc;\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n            program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextTermFixup, pc);\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            if (((t.int) == 0) && ((t.int) == (-1)))\n                program[(pc - 1)] = t.boolean ? org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte : org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            else if (((t.int) == 0) && ((t.int) == 1))\n                program[(pc - 1)] = t.boolean ? org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte : org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            else if (((t.int) == 1) && ((t.int) == (-1)))\n                program[(pc - 1)] = t.boolean ? org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte : org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            else {\n                if (!(t.boolean))\n                    program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                \n                pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n                pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, ((t.int) + 1));\n            }\n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            nextTermFixup = pc;\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            pc = org.mozilla.javascript.regexp.NativeRegExp.emitREBytecode(state, re, pc, t.org.mozilla.javascript.regexp.RENode);\n            program[(pc++)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            org.mozilla.javascript.regexp.NativeRegExp.resolveForwardJump(program, nextTermFixup, pc);\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            if (!(t.boolean))\n                program[(pc - 1)] = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n            \n            pc = org.mozilla.javascript.regexp.NativeRegExp.addIndex(program, pc, t.int);\n            re.org.mozilla.javascript.regexp.RECharSet[][t.int] = new org.mozilla.javascript.regexp.RECharSet(t.int , t.int , t.int , t.boolean);\n            break;\n        default :\n            break;\n    }\n    t = t.org.mozilla.javascript.regexp.RENode;\n}"},"status":-1},{"failures":[],"tindex":"ada3e1d2-8b4d-11e6-ac76-49d7f1767c80","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ast.InfixExpression:86","type":"CtIfImpl","sourcecode":"if (!(org.mozilla.javascript.Token.isValidToken(operator)))\n    throw new java.lang.IllegalArgumentException((\"Invalid token: \" + operator));\n"},"variableMap":{"operator":"insertPos"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:3013","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.ScriptableObject.addKnownAbsentSlot(newSlots, insSlot, insertPos)"},"status":-1},{"failures":[],"tindex":"ada3e1d3-8b4d-11e6-ac76-79e0e3624534","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaAdapter:1165","type":"CtInvocationImpl","sourcecode":"sb.append(typeLetter)"},"status":-1},{"failures":[],"tindex":"ada3e1d4-8b4d-11e6-ac76-d140360b3f1f","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:811","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:515","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-1},{"failures":[],"tindex":"ada3e1d5-8b4d-11e6-ac76-71017421f4fe","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:1575","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.addPush(0.0)"},"variableMap":{"cfw":"cfw"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:731","type":"CtInvocationImpl","sourcecode":"cfw.stopMethod(((short)(3)))"},"status":-1},{"failures":[],"tindex":"ada408e6-8b4d-11e6-ac76-1bc1306a884b","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:786","type":"CtLocalVariableImpl","sourcecode":"final int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:4191","type":"CtLocalVariableImpl","sourcecode":"int int = 48"},"status":-1},{"failures":[],"tindex":"ada408e7-8b4d-11e6-ac76-d1a3a06dc445","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ast.ForLoop:106","type":"CtInvocationImpl","sourcecode":"sb.append(\"for (\")"},"status":-1},{"failures":[],"tindex":"ada408e8-8b4d-11e6-ac76-97bbd842c4b0","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.DToA:858","type":"CtOperatorAssignmentImpl","sourcecode":"b2 -= i"},"variableMap":{"b2":"attrLength","i":"attrLength"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:341","type":"CtOperatorAssignmentImpl","sourcecode":"attrLength -= 6"},"status":-1},{"failures":[],"tindex":"ada408e9-8b4d-11e6-ac76-bbf6f3bc6612","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:458","type":"CtOperatorAssignmentImpl","sourcecode":"day += ((m - 1) / 2) - 1"},"variableMap":{"day":"org.mozilla.javascript.NativeString.Id_search","m":"org.mozilla.javascript.NativeString.Id_search"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeString:784","type":"CtAssignmentImpl","sourcecode":"id = org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
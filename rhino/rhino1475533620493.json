{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"8097fa2f-89b8-11e6-b97d-6d289a653642","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:538","type":"CtIfImpl","sourcecode":"if ((n.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n    org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode = org.mozilla.javascript.optimizer.OptFunctionNode.get(n);\n    if (ofn.isTargetOfDirectCall()) {\n        int int = ofn.org.mozilla.javascript.ast.FunctionNode.getParamCount();\n        if (pcount != 0) {\n            for (int int = 0 ; p != pcount ; ++p) {\n                cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                cfw.addPush(p);\n                int int = cfw.acquireLabel();\n                int int = cfw.acquireLabel();\n                cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, undefArg);\n                cfw.addALoad(4);\n                cfw.addPush(p);\n                cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, beyond);\n                cfw.markLabel(undefArg);\n                org.mozilla.javascript.optimizer.Codegen.pushUndefined(cfw);\n                cfw.markLabel(beyond);\n                cfw.adjustStackTop((-1));\n                cfw.addPush(0.0);\n                cfw.addALoad(4);\n            }\n        } \n    } \n} "},"status":-1},{"failures":[],"tindex":"80986f60-89b8-11e6-b97d-63140563ef15","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptableObject:3070","type":"CtIfImpl","sourcecode":"if (c == externalLen) {\n    java.lang.Object[] java.lang.Object[] = a;\n    a = new java.lang.Object[(s.int) + externalLen];\n    if (oldA != null) {\n        java.lang.System.arraycopy(oldA, 0, a, 0, externalLen);\n    } \n} "},"variableMap":{"a":"helper","c":"enterCount","s":"helper","length":"enterCount","externalLen":"enterCount"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Context:398","type":"CtIfImpl","sourcecode":"if (old != null) {\n    cx = old;\n} else {\n    if (cx == null) {\n        cx = factory.makeContext();\n        if ((cx.int) != 0) {\n            throw new java.lang.IllegalStateException(\"factory.makeContext() returned Context instance already associated with some thread\");\n        } \n        factory.onContextCreated(cx);\n        if ((factory.isSealed()) && (!(cx.isSealed()))) {\n            cx.seal(null);\n        } \n    } else {\n        if ((cx.int) != 0) {\n            throw new java.lang.IllegalStateException(\"can not use Context instance already associated with some thread\");\n        } \n    }\n    org.mozilla.javascript.VMBridge.org.mozilla.javascript.VMBridge.org.mozilla.javascript.VMBridge.setContext(helper, cx);\n}"},"status":-1},{"failures":[],"tindex":"80986f61-89b8-11e6-b97d-0d232cc98cf9","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Node:266","type":"CtIfImpl","sourcecode":"if ((org.mozilla.javascript.Node) != null) {\n    org.mozilla.javascript.Node.org.mozilla.javascript.Node = children;\n} "},"variableMap":{"next":"node","last":"target","children":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:233","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            int int = org.mozilla.javascript.ast.ScriptNode.getFunctionNode(fnIndex).getFunctionType();\n            if (fnType == (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, fnIndex);\n            } else {\n                if (fnType != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                    throw org.mozilla.javascript.Kit.codeBug();\n                } \n            }\n            if (!(boolean)) {\n                addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, fnIndex);\n                stackChange(1);\n                addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange((-1));\n            } \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        while (child != null) {\n            visitStatement(child, initialStackDepth);\n            child = child.getNext();\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = allocLocal();\n            node.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, local);\n            updateLineNumber(node);\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, local);\n            releaseLocal(local);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        {\n            visitExpression(child, 0);\n            for (org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(child.getNext())) ; caseNode != null ; caseNode = ((org.mozilla.javascript.ast.Jump)(caseNode.getNext()))) {\n                if ((caseNode.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                    throw badTree(caseNode);\n                \n                org.mozilla.javascript.Node org.mozilla.javascript.Node = caseNode.getFirstChild();\n                addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange(1);\n                visitExpression(test, 0);\n                addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                stackChange((-1));\n                addGoto(caseNode.org.mozilla.javascript.Node, org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange((-1));\n            }\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        markTargetLabel(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            visitExpression(child, 0);\n            addGoto(target, type);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            addGoto(target, type);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            addGoto(target, org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            stackChange(1);\n            int int = getLocalBlockRef(node);\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, finallyRegister);\n            stackChange((-1));\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, finallyRegister);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        visitExpression(child, 0);\n        addIcode((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int : org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(node));\n            int int = getLocalBlockRef(tryNode);\n            int int = allocLocal();\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, scopeLocal);\n            int int = int;\n            boolean boolean = boolean;\n            boolean = true;\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            boolean = savedFlag;\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = tryNode.org.mozilla.javascript.Node;\n            if (catchTarget != null) {\n                int int = int[][getTargetLabel(catchTarget)];\n                addExceptionHandler(tryStart, catchStartPC, catchStartPC, false, exceptionObjectLocal, scopeLocal);\n            } \n            org.mozilla.javascript.Node org.mozilla.javascript.Node = tryNode.getFinally();\n            if (finallyTarget != null) {\n                int int = int[][getTargetLabel(finallyTarget)];\n                addExceptionHandler(tryStart, finallyStartPC, finallyStartPC, true, exceptionObjectLocal, scopeLocal);\n            } \n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, scopeLocal);\n            releaseLocal(scopeLocal);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = getLocalBlockRef(node);\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            java.lang.String java.lang.String = child.getString();\n            child = child.getNext();\n            visitExpression(child, 0);\n            addStringPrefix(name);\n            addIndexPrefix(localIndex);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            addUint8((scopeIndex != 0 ? 1 : 0));\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        visitExpression(child, 0);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        addUint16(((int) & 65535));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        addIndexOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, getLocalBlockRef(node));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, 0)) != 0) {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            addUint16(((int) & 65535));\n        } else if (child != null) {\n            visitExpression(child, org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            stackChange((-1));\n        } else {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addIndexOp(type, getLocalBlockRef(node));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int :\n        break;\n    default :\n        throw badTree(node);\n}"},"status":-1},{"failures":[],"tindex":"8098e492-89b8-11e6-b97d-e9c83d8c5199","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:1635","type":"CtAssignmentImpl","sourcecode":"X = \"getMinutes\""},"variableMap":{"X":"signature"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:3403","type":"CtAssignmentImpl","sourcecode":"signature = \"(Lorg/mozilla/javascript/Callable;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Ljava/lang/Object;\")))))"},"status":-1},{"failures":[],"tindex":"8098e493-89b8-11e6-b97d-a329cf525147","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:241","type":"CtLocalVariableImpl","sourcecode":"int[] int[] = new int[]{ nameIndex , descriptorIndex , startPC , register }"},"variableMap":{"nameIndex":"arraySize","descriptorIndex":"arraySize","startPC":"arraySize","register":"arraySize"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.OptRuntime:197","type":"CtLocalVariableImpl","sourcecode":"int[] int[] = new int[arraySize]"},"status":-1},{"failures":[],"tindex":"8098e494-89b8-11e6-b97d-79b8adfd538e","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:1134","type":"CtUnaryOperatorImpl","sourcecode":"--padSize"},"variableMap":{"padSize":"byteLength"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.typedarrays.NativeArrayBufferView:34","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[],"tindex":"80990ba5-89b8-11e6-b97d-07d9338762cf","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider:307","type":"CtLocalVariableImpl","sourcecode":"final long long = response_time - corrected_initial_age"},"variableMap":{"corrected_initial_age":"kM32","response_time":"kM32"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.DiyFp:92","type":"CtLocalVariableImpl","sourcecode":"long long = (other.long) & kM32"},"status":-1},{"failures":[],"tindex":"80990ba6-89b8-11e6-b97d-499f71ebcc7f","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Interpreter:891","type":"CtLocalVariableImpl","sourcecode":"final int int = 100"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:2328","type":"CtLocalVariableImpl","sourcecode":"int int = org.mozilla.classfile.ClassFileWriter.acquireLabel()"},"status":-1},{"failures":[],"tindex":"80990ba7-89b8-11e6-b97d-677c0bb83a03","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.RegExpImpl:539","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.Scriptable org.mozilla.javascript.Scriptable = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdFunctionObject:129","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.Scriptable org.mozilla.javascript.Scriptable = ((org.mozilla.javascript.Scriptable)(org.mozilla.javascript.IdFunctionCall))"},"status":-1},{"failures":[],"tindex":"809932b8-89b8-11e6-b97d-1bcc568a2c4d","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.BaseFunction:376","type":"CtInvocationImpl","sourcecode":"result.setPrototype(proto)"},"variableMap":{"result":"exports","proto":"exports"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.commonjs.module.Require:336","type":"CtInvocationImpl","sourcecode":"moduleObject.put(\"exports\", moduleObject, exports)"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"c8318e87-8b64-11e6-b2b8-4380e4386239","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:421","type":"CtIfImpl","sourcecode":"if (ch < 128) {\n    if (('a' <= ch) && (ch <= 'z')) {\n        return ((char)(ch + ('A' - 'a')));\n    } \n    return ch;\n} "},"variableMap":{"ch":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:433","type":"CtIfImpl","sourcecode":"if (ch < 128) {\n    if (('A' <= ch) && (ch <= 'Z')) {\n        return ((char)(ch + ('a' - 'A')));\n    } \n    return ch;\n} "},"status":-1},{"failures":[],"tindex":"c831b598-8b64-11e6-b2b8-413f502b6764","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Context:336","type":"CtAssignmentImpl","sourcecode":"this.org.mozilla.javascript.ContextFactory = factory"},"status":-1},{"failures":[],"tindex":"c831b599-8b64-11e6-b2b8-7f0b86de41c6","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.NativeDate:891","type":"CtIfImpl","sourcecode":"if ((state == ERROR) || (i != len))\n    break syntax;\n"},"variableMap":{"len":"i","i":"i","ERROR":"i","state":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:2819","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.addLoadConstant(i)"},"status":-1},{"failures":[],"tindex":"c831b59a-8b64-11e6-b2b8-81e998bf5b53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:231","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Decompiler.addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)"},"status":-1},{"failures":[],"tindex":"c831b59b-8b64-11e6-b2b8-e3f15ea25500","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NodeTransformer:143","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.ObjArray.pop()"},"status":-1},{"failures":[],"tindex":"c831dcac-8b64-11e6-b2b8-97206d48e327","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaMembers:581","type":"CtAssignmentImpl","sourcecode":"getter = findGetter(isStatic, ht, \"get\", nameComponent)"},"status":-1},{"failures":[],"tindex":"c831dcad-8b64-11e6-b2b8-492f8d2fbe2f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:233","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            int int = org.mozilla.javascript.ast.ScriptNode.getFunctionNode(fnIndex).getFunctionType();\n            if (fnType == (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, fnIndex);\n            } else {\n                if (fnType != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                    throw org.mozilla.javascript.Kit.codeBug();\n                } \n            }\n            if (!(boolean)) {\n                addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, fnIndex);\n                stackChange(1);\n                addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange((-1));\n            } \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        while (child != null) {\n            visitStatement(child, initialStackDepth);\n            child = child.getNext();\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = allocLocal();\n            node.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, local);\n            updateLineNumber(node);\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, local);\n            releaseLocal(local);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        {\n            visitExpression(child, 0);\n            for (org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(child.getNext())) ; caseNode != null ; caseNode = ((org.mozilla.javascript.ast.Jump)(caseNode.getNext()))) {\n                if ((caseNode.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                    throw badTree(caseNode);\n                \n                org.mozilla.javascript.Node org.mozilla.javascript.Node = caseNode.getFirstChild();\n                addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange(1);\n                visitExpression(test, 0);\n                addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                stackChange((-1));\n                addGoto(caseNode.org.mozilla.javascript.Node, org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange((-1));\n            }\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        markTargetLabel(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            visitExpression(child, 0);\n            addGoto(target, type);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            addGoto(target, type);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node;\n            addGoto(target, org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            stackChange(1);\n            int int = getLocalBlockRef(node);\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, finallyRegister);\n            stackChange((-1));\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, finallyRegister);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        visitExpression(child, 0);\n        addIcode((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int : org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(node));\n            int int = getLocalBlockRef(tryNode);\n            int int = allocLocal();\n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, scopeLocal);\n            int int = int;\n            boolean boolean = boolean;\n            boolean = true;\n            while (child != null) {\n                visitStatement(child, initialStackDepth);\n                child = child.getNext();\n            }\n            boolean = savedFlag;\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = tryNode.org.mozilla.javascript.Node;\n            if (catchTarget != null) {\n                int int = int[][getTargetLabel(catchTarget)];\n                addExceptionHandler(tryStart, catchStartPC, catchStartPC, false, exceptionObjectLocal, scopeLocal);\n            } \n            org.mozilla.javascript.Node org.mozilla.javascript.Node = tryNode.getFinally();\n            if (finallyTarget != null) {\n                int int = int[][getTargetLabel(finallyTarget)];\n                addExceptionHandler(tryStart, finallyStartPC, finallyStartPC, true, exceptionObjectLocal, scopeLocal);\n            } \n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, scopeLocal);\n            releaseLocal(scopeLocal);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = getLocalBlockRef(node);\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            java.lang.String java.lang.String = child.getString();\n            child = child.getNext();\n            visitExpression(child, 0);\n            addStringPrefix(name);\n            addIndexPrefix(localIndex);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            addUint8((scopeIndex != 0 ? 1 : 0));\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        visitExpression(child, 0);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        addUint16(((int) & 65535));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        addIndexOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, getLocalBlockRef(node));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, 0)) != 0) {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            addUint16(((int) & 65535));\n        } else if (child != null) {\n            visitExpression(child, org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            stackChange((-1));\n        } else {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        updateLineNumber(node);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addIndexOp(type, getLocalBlockRef(node));\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int :\n        break;\n    default :\n        throw badTree(node);\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":7,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
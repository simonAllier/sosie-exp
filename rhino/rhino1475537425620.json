{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"5c94aeb7-89c1-11e6-bf0c-95e311ccd244","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NodeTransformer:287","type":"CtIfImpl","sourcecode":"if (!(n.hasChildren()))\n    continue;\n"},"variableMap":{"n":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:3179","type":"CtInvocationImpl","sourcecode":"generateExpression(child2, node)"},"status":-1},{"failures":[],"tindex":"5c94d5c8-89c1-11e6-bf0c-47782357e191","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Delegator:142","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.Scriptable.getPrototype()"},"variableMap":{"obj":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:3794","type":"CtReturnImpl","sourcecode":"return object"},"status":-1},{"failures":[],"tindex":"5c94fcd9-89c1-11e6-bf0c-35fa9efc6c64","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:2498","type":"CtInvocationImpl","sourcecode":"child.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, prop)"},"variableMap":{"org.mozilla.javascript.Node.ISNUMBER_PROP":"org.mozilla.javascript.ast.FunctionNode.FUNCTION_EXPRESSION","prop":"org.mozilla.javascript.ast.FunctionNode.FUNCTION_EXPRESSION","child":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:500","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            org.mozilla.javascript.ast.FunctionNode org.mozilla.javascript.ast.FunctionNode = org.mozilla.javascript.ast.ScriptNode.getFunctionNode(fnIndex);\n            if ((fn.getFunctionType()) != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                throw org.mozilla.javascript.Kit.codeBug();\n            } \n            addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, fnIndex);\n            stackChange(1);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = getLocalBlockRef(node);\n            addIndexOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, localIndex);\n            stackChange(1);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getLastChild();\n            while (child != lastChild) {\n                visitExpression(child, 0);\n                addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange((-1));\n                child = child.getNext();\n            }\n            visitExpression(child, (contextFlags & (org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int)));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        stackChange(1);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                visitExpression(child, 0);\n            } else {\n                generateCallFunAndThis(child);\n            }\n            int int = 0;\n            while ((child = child.getNext()) != null) {\n                visitExpression(child, 0);\n                ++argCount;\n            }\n            int int = node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            if ((type != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) && (callType != (org.mozilla.javascript.Node.org.mozilla.javascript.Node.int))) {\n                addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, argCount);\n                addUint8(callType);\n                addUint8((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? 1 : 0));\n                addUint16(((int) & 65535));\n            } else {\n                if ((((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) && ((contextFlags & (org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int)) != 0)) && (!(org.mozilla.javascript.CompilerEnvirons.isGenerateDebugInfo()))) && (!(boolean))) {\n                    type = org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int;\n                } \n                addIndexOp(type, argCount);\n            }\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                stackChange((-argCount));\n            } else {\n                stackChange(((-1) - argCount));\n            }\n            if (argCount > (org.mozilla.javascript.InterpreterData.int)) {\n                org.mozilla.javascript.InterpreterData.int = argCount;\n            } \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            visitExpression(child, 0);\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange(1);\n            int int = int;\n            int int = type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.Token.org.mozilla.javascript.Token.int : org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            addGotoOp(jump);\n            stackChange((-1));\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange((-1));\n            child = child.getNext();\n            visitExpression(child, (contextFlags & (org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int)));\n            resolveForwardGoto(afterSecondJumpStart);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getNext();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ifThen.getNext();\n            visitExpression(child, 0);\n            int int = int;\n            addGotoOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            stackChange((-1));\n            visitExpression(ifThen, (contextFlags & (org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int)));\n            int int = int;\n            addGotoOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            resolveForwardGoto(elseJumpStart);\n            int = savedStackDepth;\n            visitExpression(ifElse, (contextFlags & (org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int)));\n            resolveForwardGoto(afterElseJumpStart);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        child = child.getNext();\n        addStringOp(type, child.getString());\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        boolean boolean = (child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        visitExpression(child, 0);\n        child = child.getNext();\n        visitExpression(child, 0);\n        if (isName) {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        } else {\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        }\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        child = child.getNext();\n        visitExpression(child, 0);\n        addToken(type);\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n        } else {\n            addToken(type);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addToken(type);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            visitExpression(child, 0);\n            child = child.getNext();\n            java.lang.String java.lang.String = child.getString();\n            child = child.getNext();\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                stackChange(1);\n                addStringOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, property);\n                stackChange((-1));\n            } \n            visitExpression(child, 0);\n            addStringOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, property);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        child = child.getNext();\n        visitExpression(child, 0);\n        child = child.getNext();\n        if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange(2);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            stackChange((-1));\n            stackChange((-1));\n        } \n        visitExpression(child, 0);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        stackChange((-2));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        child = child.getNext();\n        if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange(1);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            stackChange((-1));\n        } \n        visitExpression(child, 0);\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        stackChange((-1));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            java.lang.String java.lang.String = child.getString();\n            visitExpression(child, 0);\n            child = child.getNext();\n            visitExpression(child, 0);\n            addStringOp(type, name);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            java.lang.String java.lang.String = child.getString();\n            visitExpression(child, 0);\n            child = child.getNext();\n            visitExpression(child, 0);\n            addStringOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, name);\n            stackChange((-1));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = -1;\n            if ((boolean) && (!(org.mozilla.javascript.InterpreterData.boolean)))\n                index = org.mozilla.javascript.ast.ScriptNode.getIndexForNameNode(node);\n            \n            if (index == (-1)) {\n                addStringOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, node.getString());\n                stackChange(1);\n            } else {\n                addVarOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, index);\n                stackChange(1);\n                addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            }\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addStringOp(type, node.getString());\n        stackChange(1);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitIncDec(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            double double = node.getDouble();\n            int int = ((int)(num));\n            if (inum == num) {\n                if (inum == 0) {\n                    addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                    if ((1.0 / num) < 0.0) {\n                        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    } \n                } else if (inum == 1) {\n                    addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                } else if (((short)(inum)) == inum) {\n                    addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                    addUint16((inum & 65535));\n                } else {\n                    addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n                    addInt(inum);\n                }\n            } else {\n                int int = getDoubleIndex(num);\n                addIndexOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, index);\n            }\n            stackChange(1);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (org.mozilla.javascript.InterpreterData.boolean)\n                org.mozilla.javascript.Kit.codeBug();\n            \n            int int = org.mozilla.javascript.ast.ScriptNode.getIndexForNameNode(node);\n            addVarOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, index);\n            stackChange(1);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (org.mozilla.javascript.InterpreterData.boolean)\n                org.mozilla.javascript.Kit.codeBug();\n            \n            int int = org.mozilla.javascript.ast.ScriptNode.getIndexForNameNode(child);\n            child = child.getNext();\n            visitExpression(child, 0);\n            addVarOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, index);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (org.mozilla.javascript.InterpreterData.boolean)\n                org.mozilla.javascript.Kit.codeBug();\n            \n            int int = org.mozilla.javascript.ast.ScriptNode.getIndexForNameNode(child);\n            child = child.getNext();\n            visitExpression(child, 0);\n            addVarOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, index);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addToken(type);\n        stackChange(1);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        addIndexOp(type, getLocalBlockRef(node));\n        stackChange(1);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            addIndexOp(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, index);\n            stackChange(1);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitLiteral(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArrayComprehension(node, child, child.getNext());\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addStringOp(type, ((java.lang.String)(node.getProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int))));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, 0);\n            int int = 0;\n            do {\n                visitExpression(child, 0);\n                ++childCount;\n                child = child.getNext();\n            } while (child != null );\n            addIndexOp(type, memberTypeFlags);\n            stackChange((1 - childCount));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int;\n            updateLineNumber(node);\n            visitExpression(child, 0);\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange((-1));\n            queryPC = int;\n            visitExpression(child.getNext(), 0);\n            addBackwardGoto(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, queryPC);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitExpression(child, 0);\n        addToken(type);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (child != null) {\n            visitExpression(child, 0);\n        } else {\n            addIcode(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int);\n            stackChange(1);\n        }\n        addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        addUint16(((node.getLineno()) & 65535));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getFirstChild();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = enterWith.getNext();\n            visitExpression(enterWith.getFirstChild(), 0);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            stackChange((-1));\n            visitExpression(with.getFirstChild(), 0);\n            addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            break;\n        }\n    default :\n        throw badTree(node);\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":3,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
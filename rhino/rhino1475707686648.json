{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"c80f5750-8b4d-11e6-a866-39c031398013","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Parser:843","type":"CtIfImpl","sourcecode":"if (memberExprNode != null) {\n    org.mozilla.javascript.Kit.codeBug();\n    fnNode.setMemberExprNode(memberExprNode);\n} "},"variableMap":{"memberExprNode":"parent","fnNode":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NodeTransformer:70","type":"CtForImpl","sourcecode":"siblingLoop : for ( ;  ; ) {\n    org.mozilla.javascript.Node org.mozilla.javascript.Node = null;\n    if (node == null) {\n        node = parent.getFirstChild();\n    } else {\n        previous = node;\n        node = node.getNext();\n    }\n    if (node == null) {\n        break;\n    } \n    int int = node.getType();\n    if ((createScopeObjects && (((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) || (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)))) && (node instanceof org.mozilla.javascript.ast.Scope)) {\n        org.mozilla.javascript.ast.Scope org.mozilla.javascript.ast.Scope = ((org.mozilla.javascript.ast.Scope)(node));\n        if ((newScope.getSymbolTable()) != null) {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.Token.org.mozilla.javascript.Token.int : org.mozilla.javascript.Token.org.mozilla.javascript.Token.int));\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            let.addChildToBack(innerLet);\n            for (java.lang.String java.lang.String : newScope.getSymbolTable().keySet()) {\n                innerLet.addChildToBack(org.mozilla.javascript.Node.newString(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, name));\n            }\n            newScope.setSymbolTable(null);\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = node;\n            node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, let);\n            type = node.getType();\n            let.addChildToBack(oldNode);\n        } \n    } \n    switch (type) {\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            org.mozilla.javascript.ObjArray.push(node);\n            org.mozilla.javascript.ObjArray.push(((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node);\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                org.mozilla.javascript.ObjArray.push(node);\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getNext();\n                if ((leave.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    org.mozilla.javascript.Kit.codeBug();\n                } \n                org.mozilla.javascript.ObjArray.push(leave);\n                break;\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(node));\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = jump.getFinally();\n                if (finallytarget != null) {\n                    boolean = true;\n                    org.mozilla.javascript.ObjArray.push(node);\n                    org.mozilla.javascript.ObjArray.push(finallytarget);\n                } \n                break;\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            if ((!(org.mozilla.javascript.ObjArray.isEmpty())) && ((org.mozilla.javascript.ObjArray.peek()) == node)) {\n                org.mozilla.javascript.ObjArray.pop();\n                org.mozilla.javascript.ObjArray.pop();\n            } \n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            ((org.mozilla.javascript.ast.FunctionNode)(tree)).addResumptionPoint(node);\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                boolean boolean = ((tree.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) && (((org.mozilla.javascript.ast.FunctionNode)(tree)).isGenerator());\n                if (isGenerator) {\n                    node.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, 1);\n                } \n                if (!(boolean))\n                    break;\n                \n                org.mozilla.javascript.Node org.mozilla.javascript.Node = null;\n                for (int int = (org.mozilla.javascript.ObjArray.size()) - 1 ; i >= 0 ; i--) {\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.Node)(org.mozilla.javascript.ObjArray.get(i)));\n                    int int = n.getType();\n                    if ((elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                        org.mozilla.javascript.Node org.mozilla.javascript.Node;\n                        if (elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                            org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = new org.mozilla.javascript.ast.Jump(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                            org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(n)).getFinally();\n                            jsrnode.org.mozilla.javascript.Node = jsrtarget;\n                            unwind = jsrnode;\n                        } else {\n                            unwind = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        }\n                        if (unwindBlock == null) {\n                            unwindBlock = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , node.getLineno());\n                        } \n                        unwindBlock.addChildToBack(unwind);\n                    } \n                }\n                if (unwindBlock != null) {\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = node;\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = returnNode.getFirstChild();\n                    node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, unwindBlock);\n                    if ((returnExpr == null) || isGenerator) {\n                        unwindBlock.addChildToBack(returnNode);\n                    } else {\n                        org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , returnExpr);\n                        unwindBlock.addChildToFront(store);\n                        returnNode = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        unwindBlock.addChildToBack(returnNode);\n                        transformCompilationUnit_r(tree, store, scope, createScopeObjects, inStrictMode);\n                    }\n                    continue siblingLoop;\n                } \n                break;\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(node));\n                org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = jump.getJumpStatement();\n                if (jumpStatement == null)\n                    org.mozilla.javascript.Kit.codeBug();\n                \n                for (int int = org.mozilla.javascript.ObjArray.size() ;  ; ) {\n                    if (i == 0) {\n                        throw org.mozilla.javascript.Kit.codeBug();\n                    } \n                    --i;\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.Node)(org.mozilla.javascript.ObjArray.get(i)));\n                    if (n == jumpStatement) {\n                        break;\n                    } \n                    int int = n.getType();\n                    if (elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        previous = org.mozilla.javascript.NodeTransformer.addBeforeCurrent(parent, previous, node, leave);\n                    } else if (elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(n));\n                        org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = new org.mozilla.javascript.ast.Jump(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        jsrFinally.org.mozilla.javascript.Node = tryNode.getFinally();\n                        previous = org.mozilla.javascript.NodeTransformer.addBeforeCurrent(parent, previous, node, jsrFinally);\n                    } \n                }\n                if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    jump.org.mozilla.javascript.Node = jumpStatement.org.mozilla.javascript.Node;\n                } else {\n                    jump.org.mozilla.javascript.Node = jumpStatement.getContinue();\n                }\n                jump.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                break;\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            visitCall(node, tree);\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            visitNew(node, tree);\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getFirstChild();\n                if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    boolean boolean = ((tree.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (((org.mozilla.javascript.ast.FunctionNode)(tree)).requiresActivation());\n                    node = visitLet(createWith, parent, previous, node);\n                    break;\n                } else {\n                }\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                for (org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getFirstChild() ; cursor != null ; ) {\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = cursor;\n                    cursor = cursor.getNext();\n                    if ((n.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        if (!(n.hasChildren()))\n                            continue;\n                        \n                        org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n                        n.removeChild(init);\n                        n.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        n = new org.mozilla.javascript.Node((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.Token.org.mozilla.javascript.Token.int : org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) , n , init);\n                    } else {\n                        if ((n.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                            throw org.mozilla.javascript.Kit.codeBug();\n                        \n                    }\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , n , node.getLineno());\n                    result.addChildToBack(pop);\n                }\n                node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, result);\n                break;\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                org.mozilla.javascript.ast.Scope org.mozilla.javascript.ast.Scope = scope.getDefiningScope(node.getString());\n                if (defining != null) {\n                    node.setScope(defining);\n                } \n            }\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getFirstChild();\n                if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    while ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        child = child.getFirstChild();\n                    }\n                    if (((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                        org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getFirstChild();\n                        org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getLastChild();\n                        if (((first.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) && (first.getString().equals(\"undefined\")))\n                            child = last;\n                        else if (((last.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) && (last.getString().equals(\"undefined\")))\n                            child = first;\n                        \n                    } \n                } \n                if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                    child.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                \n                break;\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            if (inStrictMode) {\n                node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            } \n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                if (createScopeObjects) {\n                    break;\n                } \n                org.mozilla.javascript.Node org.mozilla.javascript.Node;\n                if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    nameSource = node;\n                } else {\n                    nameSource = node.getFirstChild();\n                    if ((nameSource.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                            break;\n                        } \n                        throw org.mozilla.javascript.Kit.codeBug();\n                    } \n                }\n                if ((nameSource.getScope()) != null) {\n                    break;\n                } \n                java.lang.String java.lang.String = nameSource.getString();\n                org.mozilla.javascript.ast.Scope org.mozilla.javascript.ast.Scope = scope.getDefiningScope(name);\n                if (defining != null) {\n                    nameSource.setScope(defining);\n                    if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    } else if ((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                        node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        nameSource.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        nameSource.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, n);\n                    } else {\n                        throw org.mozilla.javascript.Kit.codeBug();\n                    }\n                } \n                break;\n            }\n    }\n    transformCompilationUnit_r(tree, node, (node instanceof org.mozilla.javascript.ast.Scope ? ((org.mozilla.javascript.ast.Scope)(node)) : scope), createScopeObjects, inStrictMode);\n}"},"status":-1},{"failures":[],"tindex":"c80fcc81-8b4d-11e6-a866-89b37f8e7af8","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:544","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (digit & bitShiftInChar) != 0"},"variableMap":{"bitShiftInChar":"varIndex","digit":"varIndex"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:4990","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = org.mozilla.javascript.optimizer.OptFunctionNode.isNumberVar(varIndex)"},"status":-1},{"failures":[],"tindex":"c80fcc82-8b4d-11e6-a866-ab6b5d99f473","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Decompiler:306","type":"CtAssignmentImpl","sourcecode":"topFunctionType = -1"},"variableMap":{"topFunctionType":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeNumber:332","type":"CtAssignmentImpl","sourcecode":"id = 0"},"status":-1},{"failures":[],"tindex":"c80fcc83-8b4d-11e6-a866-039bd99134a1","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.LazilyLoadedCtor:45","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = className"},"variableMap":{"className":"methodName"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:3339","type":"CtAssignmentImpl","sourcecode":"methodName = \"callName0\""},"status":-1}],"header":{"groupId":"r","transformationCount":4,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"58b93d24-89a6-11e6-88cf-6f9435024a5c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.JavaAdapter:817","type":"CtInvocationImpl","sourcecode":"cfw.addInvoke(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"<init>\", \"(Z)V\")"},"variableMap":{"cfw":"cfw","org.mozilla.classfile.ByteCode.INVOKESPECIAL":"org.mozilla.classfile.ByteCode.DUP2_X1"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:5162","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int)"},"status":-1},{"failures":[],"tindex":"58b96435-89a6-11e6-88cf-8d90ac75f701","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.json.JsonParser:346","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"variableMap":{"pos":"keyCount"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ObjToIntMap:315","type":"CtAssignmentImpl","sourcecode":"int = int = 0"},"status":-1},{"failures":[],"tindex":"58b96436-89a6-11e6-88cf-0954e453b8b2","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeMath:353","type":"CtIfImpl","sourcecode":"if ((d == (java.lang.Double.java.lang.Double.double)) || (d == (java.lang.Double.java.lang.Double.double))) {\n    return java.lang.Double.java.lang.Double.double;\n} "},"variableMap":{"java.lang.Double.POSITIVE_INFINITY":"org.mozilla.javascript.ScriptRuntime.NaN","d":"org.mozilla.javascript.ScriptRuntime.NaN","java.lang.Double.NEGATIVE_INFINITY":"org.mozilla.javascript.ScriptRuntime.NaN"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:1085","type":"CtIfImpl","sourcecode":"if ((hour > 12) || (hour < 0)) {\n    return org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.double;\n} else if (index == 0) {\n    if (hour == 12)\n        hour = 0;\n    \n} else {\n    if (hour != 12)\n        hour += 12;\n    \n}"},"status":-1},{"failures":[],"tindex":"58b96437-89a6-11e6-88cf-d54feba22c20","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeGlobal:705","type":"CtIfImpl","sourcecode":"if (((('A' <= c) && (c <= 'Z')) || (('a' <= c) && (c <= 'z'))) || (('0' <= c) && (c <= '9'))) {\n    return true;\n} "},"variableMap":{"c":"chr"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:817","type":"CtSwitchImpl","sourcecode":"switch (c) {\n    case '^' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        return true;\n    case '$' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        return true;\n    case '\\\\' :\n        if ((state.int) < (state.int)) {\n            c = src[((state.int)++)];\n            switch (c) {\n                case 'b' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    return true;\n                case 'B' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    return true;\n                case '0' :\n                    org.mozilla.javascript.regexp.NativeRegExp.reportWarning(state.org.mozilla.javascript.Context, \"msg.bad.backref\", \"\");\n                    num = 0;\n                    while ((num < 32) && ((state.int) < (state.int))) {\n                        c = src[state.int];\n                        if ((c >= '0') && (c <= '7')) {\n                            (state.int)++;\n                            num = (8 * num) + (c - '0');\n                        } else\n                            break;\n                        \n                    }\n                    c = ((char)(num));\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case '1' :\n                case '2' :\n                case '3' :\n                case '4' :\n                case '5' :\n                case '6' :\n                case '7' :\n                case '8' :\n                case '9' :\n                    termStart = (state.int) - 1;\n                    num = org.mozilla.javascript.regexp.NativeRegExp.getDecimalValue(c, state, 65535, \"msg.overlarge.backref\");\n                    if (num > (state.int))\n                        org.mozilla.javascript.regexp.NativeRegExp.reportWarning(state.org.mozilla.javascript.Context, \"msg.bad.backref\", \"\");\n                    \n                    if (num > (state.int)) {\n                        state.int = termStart;\n                        if (c >= '8') {\n                            c = '\\\\';\n                            org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                            break;\n                        } \n                        (state.int)++;\n                        num = c - '0';\n                        while ((num < 32) && ((state.int) < (state.int))) {\n                            c = src[state.int];\n                            if ((c >= '0') && (c <= '7')) {\n                                (state.int)++;\n                                num = (8 * num) + (c - '0');\n                            } else\n                                break;\n                            \n                        }\n                        c = ((char)(num));\n                        org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                        break;\n                    } \n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.org.mozilla.javascript.regexp.RENode.int = num - 1;\n                    state.int += 3;\n                    if ((state.int) < num) {\n                        state.int = num;\n                    } \n                    break;\n                case 'f' :\n                    c = 12;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'n' :\n                    c = 10;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'r' :\n                    c = 13;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 't' :\n                    c = 9;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'v' :\n                    c = 11;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'c' :\n                    if (((state.int) < (state.int)) && (org.mozilla.javascript.regexp.NativeRegExp.isControlLetter(src[state.int])))\n                        c = ((char)((src[((state.int)++)]) & 31));\n                    else {\n                        --(state.int);\n                        c = '\\\\';\n                    }\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'u' :\n                    nDigits += 2;\n                case 'x' :\n                    {\n                        int int = 0;\n                        int int;\n                        for (i = 0 ; (i < nDigits) && ((state.int) < (state.int)) ; i++) {\n                            c = src[((state.int)++)];\n                            n = org.mozilla.javascript.Kit.xDigitToInt(c, n);\n                            if (n < 0) {\n                                state.int -= i + 2;\n                                n = src[((state.int)++)];\n                                break;\n                            } \n                        }\n                        c = ((char)(n));\n                    }\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'd' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'D' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 's' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'S' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'w' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'W' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                default :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.org.mozilla.javascript.regexp.RENode.char = c;\n                    state.org.mozilla.javascript.regexp.RENode.int = 1;\n                    state.org.mozilla.javascript.regexp.RENode.int = (state.int) - 1;\n                    state.int += 3;\n                    break;\n            }\n            break;\n        } else {\n            org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.trail.backslash\", \"\");\n            return false;\n        }\n    case '(' :\n        {\n            org.mozilla.javascript.regexp.RENode org.mozilla.javascript.regexp.RENode = null;\n            termStart = state.int;\n            if (((((state.int) + 1) < (state.int)) && ((src[state.int]) == '?')) && ((((c = src[((state.int) + 1)]) == '=') || (c == '!')) || (c == ':'))) {\n                state.int += 2;\n                if (c == '=') {\n                    result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.int += 4;\n                } else if (c == '!') {\n                    result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.int += 4;\n                } \n            } else {\n                result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                state.int += 6;\n                result.int = (state.int)++;\n            }\n            ++(state.int);\n            if (!(org.mozilla.javascript.regexp.NativeRegExp.parseDisjunction(state)))\n                return false;\n            \n            if (((state.int) == (state.int)) || ((src[state.int]) != ')')) {\n                org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.paren\", \"\");\n                return false;\n            } \n            ++(state.int);\n            --(state.int);\n            if (result != null) {\n                result.org.mozilla.javascript.regexp.RENode = state.org.mozilla.javascript.regexp.RENode;\n                state.org.mozilla.javascript.regexp.RENode = result;\n            } \n            break;\n        }\n    case ')' :\n        org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.re.unmatched.right.paren\", \"\");\n        return false;\n    case '[' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        termStart = state.int;\n        state.org.mozilla.javascript.regexp.RENode.int = termStart;\n        while (true) {\n            if ((state.int) == (state.int)) {\n                org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.class\", \"\");\n                return false;\n            } \n            if ((src[state.int]) == '\\\\')\n                (state.int)++;\n            else {\n                if ((src[state.int]) == ']') {\n                    state.org.mozilla.javascript.regexp.RENode.int = (state.int) - termStart;\n                    break;\n                } \n            }\n            (state.int)++;\n        }\n        state.org.mozilla.javascript.regexp.RENode.int = (state.int)++;\n        if (!(org.mozilla.javascript.regexp.NativeRegExp.calculateBitmapSize(state, state.org.mozilla.javascript.regexp.RENode, src, termStart, ((state.int)++))))\n            return false;\n        \n        state.int += 3;\n        break;\n    case '.' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        break;\n    case '*' :\n    case '+' :\n    case '?' :\n        org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.bad.quant\", java.lang.String.valueOf(src[((state.int) - 1)]));\n        return false;\n    default :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        state.org.mozilla.javascript.regexp.RENode.char = c;\n        state.org.mozilla.javascript.regexp.RENode.int = 1;\n        state.org.mozilla.javascript.regexp.RENode.int = (state.int) - 1;\n        state.int += 3;\n        break;\n}"},"status":-1},{"failures":[],"tindex":"58b9b258-89a6-11e6-88cf-ef11d3d28ecc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.UintMap:298","type":"CtIfImpl","sourcecode":"if (entry != (org.mozilla.javascript.UintMap.org.mozilla.javascript.UintMap.int)) {\n    if (entry == (org.mozilla.javascript.UintMap.org.mozilla.javascript.UintMap.int)) {\n        firstDeleted = index;\n    } \n    int int = (1 << (int)) - 1;\n    int int = org.mozilla.javascript.UintMap.tableLookupStep(fraction, mask, int);\n    int int = 0;\n    do {\n        if (org.mozilla.javascript.UintMap.org.mozilla.javascript.UintMap.boolean) {\n            if (n >= (int))\n                org.mozilla.javascript.Kit.codeBug();\n            \n            ++n;\n        } \n        index = (index + step) & mask;\n        entry = keys[index];\n        if (entry == key) {\n            return index;\n        } \n        if ((entry == (org.mozilla.javascript.UintMap.org.mozilla.javascript.UintMap.int)) && (firstDeleted < 0)) {\n            firstDeleted = index;\n        } \n    } while (entry != (org.mozilla.javascript.UintMap.org.mozilla.javascript.UintMap.int) );\n} "},"status":-1},{"failures":[],"tindex":"58b9b259-89a6-11e6-88cf-e72b665f1bd7","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptableObject:2864","type":"CtAssignmentImpl","sourcecode":"prev = slot"},"variableMap":{"prev":"slot","slot":"slot"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:1891","type":"CtAssignmentImpl","sourcecode":"slot = org.mozilla.javascript.ScriptableObject.unwrapSlot(slot)"},"status":-1},{"failures":[],"tindex":"58b9b25a-89a6-11e6-88cf-7728e7b9dd6b","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4100","type":"CtIfImpl","sourcecode":"if (minimalSize > newSize) {\n    newSize = minimalSize;\n} "},"variableMap":{"newSize":"offset","minimalSize":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Decompiler:856","type":"CtIfImpl","sourcecode":"if (sb != null) {\n    int int = source.charAt(offset);\n    number = ival;\n} "},"status":-1},{"failures":[],"tindex":"58b9d96b-89a6-11e6-88cf-b54ed614d09f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1963","type":"CtUnaryOperatorImpl","sourcecode":"(gData.int)++"},"status":-1},{"failures":[],"tindex":"58b9d96c-89a6-11e6-88cf-8b07c962333d","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.NodeTransformer:76","type":"CtAssignmentImpl","sourcecode":"node = node.getNext()"},"variableMap":{"node":"child"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:3092","type":"CtAssignmentImpl","sourcecode":"child = child.getNext()"},"status":-1},{"failures":[],"tindex":"58b9d96d-89a6-11e6-88cf-672bf8d5aa21","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeArray:1017","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ObjToIntMap:141","type":"CtReturnImpl","sourcecode":"return int[][index]"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
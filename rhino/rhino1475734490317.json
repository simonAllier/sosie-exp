{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"304a80e1-8b8c-11e6-a1a0-c79399cfc7a1","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Context:2069","type":"CtIfImpl","sourcecode":"if (org.mozilla.javascript.SecurityController.hasGlobal()) {\n    throw new java.lang.SecurityException(\"Can not overwrite existing global SecurityController object\");\n} "},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeString:498","type":"CtIfImpl","sourcecode":"if (attribute != null) {\n    result.append(' ');\n    result.append(attribute);\n    result.append(\"=\\\"\");\n    result.append(org.mozilla.javascript.ScriptRuntime.toString(args, 0));\n    result.append('\"');\n} "},"status":0},{"failures":[],"tindex":"304a80e2-8b8c-11e6-a1a0-538c16ac6868","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptableObject:1496","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.FunctionObject org.mozilla.javascript.FunctionObject = new org.mozilla.javascript.FunctionObject(name , method , proto)"},"variableMap":{"method":"ctorMember","proto":"scope","name":"className"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:1404","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.FunctionObject org.mozilla.javascript.FunctionObject = new org.mozilla.javascript.FunctionObject(className , ctorMember , scope)"},"status":-1},{"failures":[],"tindex":"304a80e3-8b8c-11e6-a1a0-5f20d19fd3a1","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeObject:346","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.Scriptable org.mozilla.javascript.Scriptable = org.mozilla.javascript.Context.toObject(args[1], getParentScope())"},"variableMap":{"args":"val","this":"val"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:2948","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.Scriptable org.mozilla.javascript.Scriptable = ((org.mozilla.javascript.Scriptable)(val))"},"status":-2},{"failures":[],"tindex":"304aa7f4-8b8c-11e6-a1a0-d708c7b95467","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptableObject:3133","type":"CtLocalVariableImpl","sourcecode":"int int = in.readInt()"},"variableMap":{"in":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ObjToIntMap:231","type":"CtLocalVariableImpl","sourcecode":"int int = key.hashCode()"},"status":-1},{"failures":[],"tindex":"304aa7f5-8b8c-11e6-a1a0-b9aad696945d","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJavaArray:86","type":"CtIfImpl","sourcecode":"if (!(id.equals(\"length\")))\n    throw org.mozilla.javascript.Context.reportRuntimeError1(\"msg.java.array.member.not.found\", id);\n"},"variableMap":{"id":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:4860","type":"CtInvocationImpl","sourcecode":"addScriptRuntimeInvoke(name, (\"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + \")Z\")))"},"status":-1},{"failures":[],"tindex":"304aa7f6-8b8c-11e6-a1a0-618412758d6f","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:897","type":"CtIfImpl","sourcecode":"if (((((((((year > 275943) || ((month < 1) || (month > 12))) || ((day < 1) || (day > (org.mozilla.javascript.NativeDate.DaysInMonth(year, month))))) || (hour > 24)) || ((hour == 24) && (((min > 0) || (sec > 0)) || (msec > 0)))) || (min > 59)) || (sec > 59)) || (tzhour > 23)) || (tzmin > 59)) {\n    break syntax;\n} "},"variableMap":{"sec":"org.mozilla.javascript.CodeGenerator.ECF_TAIL","tzhour":"contextFlags","min":"org.mozilla.javascript.CodeGenerator.ECF_TAIL","month":"org.mozilla.javascript.CodeGenerator.ECF_TAIL","hour":"org.mozilla.javascript.CodeGenerator.ECF_TAIL","year":"contextFlags","msec":"org.mozilla.javascript.CodeGenerator.ECF_TAIL","tzmin":"contextFlags","day":"contextFlags"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:625","type":"CtInvocationImpl","sourcecode":"visitExpression(ifElse, (contextFlags & (org.mozilla.javascript.CodeGenerator.org.mozilla.javascript.CodeGenerator.int)))"},"status":-1},{"failures":[],"tindex":"304aa7f7-8b8c-11e6-a1a0-2bce96f76856","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:706","type":"CtIfImpl","sourcecode":"if (localMax > max)\n    max = localMax;\n"},"variableMap":{"localMax":"org.mozilla.javascript.Token.ASSIGN","max":"org.mozilla.javascript.Token.ASSIGN"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:1313","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Decompiler.addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)"},"status":-1},{"failures":[],"tindex":"304aa7f8-8b8c-11e6-a1a0-3d5ed89117f5","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.WrapFactory:160","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Context.onSealedMutation()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:1635","type":"CtInvocationImpl","sourcecode":"executeWorkList()"},"status":-1},{"failures":[],"tindex":"304aa7f9-8b8c-11e6-a1a0-456f0dee137e","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Parser:651","type":"CtInvocationImpl","sourcecode":"pn.addStatement(n)"},"variableMap":{"pn":"node","n":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:1844","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount()) {\n            addInstructionCount(1);\n        } \n        while (child != null) {\n            generateStatement(child);\n            child = child.getNext();\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            boolean boolean = boolean;\n            boolean = true;\n            int int = getNewWordLocal();\n            if (boolean) {\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                org.mozilla.classfile.ClassFileWriter.addAStore(local);\n            } \n            node.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, local);\n            while (child != null) {\n                generateStatement(child);\n                child = child.getNext();\n            }\n            releaseWordLocal(((short)(local)));\n            node.removeProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            boolean = prevLocal;\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode = org.mozilla.javascript.optimizer.OptFunctionNode.get(org.mozilla.javascript.ast.ScriptNode, fnIndex);\n            int int = ofn.org.mozilla.javascript.ast.FunctionNode.getFunctionType();\n            if (t == (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                visitFunction(ofn, t);\n            } else {\n                if (t != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                    throw org.mozilla.javascript.optimizer.Codegen.badTree();\n                } \n            }\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitTryCatchFinally(((org.mozilla.javascript.ast.Jump)(node)), child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.classfile.ClassFileWriter.setStackTop(((short)(0)));\n            int int = getLocalBlockRegister(node);\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            java.lang.String java.lang.String = child.getString();\n            child = child.getNext();\n            generateExpression(child, node);\n            if (scopeIndex == 0) {\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            } else {\n                org.mozilla.classfile.ClassFileWriter.addALoad(local);\n            }\n            org.mozilla.classfile.ClassFileWriter.addPush(name);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"newCatchScope\", (\"(Ljava/lang/Throwable;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/String;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"))))));\n            org.mozilla.classfile.ClassFileWriter.addAStore(local);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        generateThrowJavaScriptException();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        org.mozilla.classfile.ClassFileWriter.addALoad(getLocalBlockRegister(node));\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (!(boolean)) {\n            if (child != null) {\n                generateExpression(child, node);\n            } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                org.mozilla.javascript.optimizer.Codegen.pushUndefined(org.mozilla.classfile.ClassFileWriter);\n            } else {\n                if ((short) < 0)\n                    throw org.mozilla.javascript.optimizer.Codegen.badTree();\n                \n                org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            }\n        } \n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        if ((int) == (-1)) {\n            if (!(boolean))\n                throw org.mozilla.javascript.optimizer.Codegen.badTree();\n            \n            int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n        } \n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        visitSwitch(((org.mozilla.javascript.ast.Jump)(node)), child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"enterWith\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"))));\n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        incReferenceWordLocal(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"leaveWith\", (\"(Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"));\n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        decReferenceWordLocal(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        int int = type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int : type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int : org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int;\n        org.mozilla.classfile.ClassFileWriter.addPush(enumType);\n        addScriptRuntimeInvoke(\"enumInit\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"I\" + \")Ljava/lang/Object;\")))));\n        org.mozilla.classfile.ClassFileWriter.addAStore(getLocalBlockRegister(node));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            visitSetVar(child, child.getFirstChild(), false);\n        } else if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            visitSetConstVar(child, child.getFirstChild(), false);\n        } else if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            generateYieldPoint(child, false);\n        } else {\n            generateExpression(child, node);\n            if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) != (-1))\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            else\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        if ((short) < 0) {\n            short = getNewWordLocal();\n        } \n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                addInstructionCount();\n            \n            int int = getTargetLabel(node);\n            org.mozilla.classfile.ClassFileWriter.markLabel(label);\n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                saveCurrentCodeOffset();\n            \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        visitGoto(((org.mozilla.javascript.ast.Jump)(node)), type, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (!(boolean)) {\n                break;\n            } \n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                saveCurrentCodeOffset();\n            \n            org.mozilla.classfile.ClassFileWriter.setStackTop(((short)(1)));\n            int int = getNewWordLocal();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.markLabel(finallyStart);\n            generateIntegerWrap();\n            org.mozilla.classfile.ClassFileWriter.addAStore(finallyRegister);\n            while (child != null) {\n                generateStatement(child);\n                child = child.getNext();\n            }\n            org.mozilla.classfile.ClassFileWriter.addALoad(finallyRegister);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Integer\");\n            generateIntegerUnwrap();\n            org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint = java.util.Map<org.mozilla.javascript.Node, org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint>.get(node);\n            ret.int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, ret.int);\n            releaseWordLocal(((short)(finallyRegister)));\n            org.mozilla.classfile.ClassFileWriter.markLabel(finallyEnd);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        break;\n    default :\n        throw org.mozilla.javascript.optimizer.Codegen.badTree();\n}"},"status":-1},{"failures":[],"tindex":"304af61a-8b8c-11e6-a1a0-f7e0646c883b","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1465","type":"CtIfImpl","sourcecode":"if (parenContent == (-1))\n    return true;\n"},"variableMap":{"parenContent":"org.mozilla.javascript.TokenStream.EOF_CHAR"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:1206","type":"CtForImpl","sourcecode":"for (int int = getChar() ; c != (org.mozilla.javascript.TokenStream.org.mozilla.javascript.TokenStream.int) ; c = getChar()) {\n    addToString(c);\n    if ((c == '?') && ((peekChar()) == '>')) {\n        c = getChar();\n        addToString(c);\n        return true;\n    } \n}"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
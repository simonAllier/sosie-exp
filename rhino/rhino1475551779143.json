{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"c7f27a7d-89e2-11e6-9ddb-710dfd5e1be0","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.BaseFunction:569","type":"CtSwitchImpl","sourcecode":"L : switch (s.length()) {\n    case 4 :\n        c = s.charAt(0);\n        if (c == 'b') {\n            X = \"bind\";\n            id = org.mozilla.javascript.BaseFunction.org.mozilla.javascript.BaseFunction.int;\n        } else if (c == 'c') {\n            X = \"call\";\n            id = org.mozilla.javascript.BaseFunction.org.mozilla.javascript.BaseFunction.int;\n        } \n        break L;\n    case 5 :\n        X = \"apply\";\n        id = org.mozilla.javascript.BaseFunction.org.mozilla.javascript.BaseFunction.int;\n        break L;\n    case 8 :\n        c = s.charAt(3);\n        if (c == 'o') {\n            X = \"toSource\";\n            id = org.mozilla.javascript.BaseFunction.org.mozilla.javascript.BaseFunction.int;\n        } else if (c == 't') {\n            X = \"toString\";\n            id = org.mozilla.javascript.BaseFunction.org.mozilla.javascript.BaseFunction.int;\n        } \n        break L;\n    case 11 :\n        X = \"constructor\";\n        id = org.mozilla.javascript.BaseFunction.org.mozilla.javascript.BaseFunction.int;\n        break L;\n}"},"variableMap":{"s":"typeName","c":"org.mozilla.classfile.ByteCode.FLOAD","org.mozilla.javascript.BaseFunction.Id_constructor":"org.mozilla.classfile.ByteCode.L2D","org.mozilla.javascript.BaseFunction.Id_bind":"org.mozilla.classfile.ByteCode.F2D","org.mozilla.javascript.BaseFunction.Id_toSource":"paramOffset","org.mozilla.javascript.BaseFunction.Id_call":"paramOffset","X":"typeName","org.mozilla.javascript.BaseFunction.Id_apply":"paramOffset","id":"org.mozilla.classfile.ByteCode.F2D","org.mozilla.javascript.BaseFunction.Id_toString":"org.mozilla.classfile.ByteCode.I2D"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaAdapter:831","type":"CtSwitchImpl","sourcecode":"switch (typeName.charAt(0)) {\n    case 'b' :\n    case 's' :\n    case 'i' :\n        cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, paramOffset);\n        cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case 'l' :\n        cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, paramOffset);\n        cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        size = 2;\n        break;\n    case 'f' :\n        cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, paramOffset);\n        cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case 'd' :\n        cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, paramOffset);\n        size = 2;\n        break;\n}"},"status":-1},{"failures":[],"tindex":"c7f2a18e-89e2-11e6-9ddb-0788fc9a4a7d","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.BaseFunction:496","type":"CtReturnImpl","sourcecode":"return activation == null ? null : activation.get(\"arguments\", activation)"},"variableMap":{"activation":"activation"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Arguments:67","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.NativeCall.get(argName, org.mozilla.javascript.NativeCall)"},"status":-1},{"failures":[],"tindex":"c7f2a18f-89e2-11e6-9ddb-ed663c7aaf48","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.KeywordLiteral:49","type":"CtIfImpl","sourcecode":"if (!(((((nodeType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (nodeType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) || (nodeType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) || (nodeType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) || (nodeType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))))\n    throw new java.lang.IllegalArgumentException((\"Invalid node type: \" + nodeType));\n"},"variableMap":{"org.mozilla.javascript.Token.FALSE":"index","org.mozilla.javascript.Token.NULL":"org.mozilla.javascript.regexp.NativeRegExp.JSREG_FOLD","org.mozilla.javascript.Token.DEBUGGER":"org.mozilla.javascript.regexp.NativeRegExp.JSREG_FOLD","nodeType":"index","org.mozilla.javascript.Token.THIS":"index","org.mozilla.javascript.Token.TRUE":"org.mozilla.javascript.regexp.NativeRegExp.JSREG_FOLD"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:486","type":"CtIfImpl","sourcecode":"if (((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) && ((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) {\n    result.byte = ((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) == 0 ? org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte : org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    result.char = result.org.mozilla.javascript.regexp.RENode.char;\n    result.int = result.org.mozilla.javascript.regexp.RENode.char;\n    state.int += 13;\n} else if (((((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) && ((result.org.mozilla.javascript.regexp.RENode.int) < 256)) && ((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) && (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) == 0)) {\n    result.byte = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    result.char = result.org.mozilla.javascript.regexp.RENode.char;\n    result.int = result.org.mozilla.javascript.regexp.RENode.int;\n    state.int += 13;\n} else if (((((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) && ((result.org.mozilla.javascript.regexp.RENode.byte) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) && ((result.org.mozilla.javascript.regexp.RENode.int) < 256)) && (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) == 0)) {\n    result.byte = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    result.char = result.org.mozilla.javascript.regexp.RENode.char;\n    result.int = result.org.mozilla.javascript.regexp.RENode.int;\n    state.int += 13;\n} else {\n    state.int += 9;\n}"},"status":-1},{"failures":[],"tindex":"c7f2c8a0-89e2-11e6-9ddb-937417f1ce89","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:4758","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) ? \"cmp_LT\" : \"cmp_LE\""},"variableMap":{"org.mozilla.javascript.Token.LT":"i","org.mozilla.javascript.Token.GT":"i","type":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.VMBridge:29","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = classNames[i]"},"status":-1},{"failures":[],"tindex":"c7f2c8a1-89e2-11e6-9ddb-73a3700972fc","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.v8dtoa.FastDtoaBuilder:75","type":"CtOperatorAssignmentImpl","sourcecode":"int += (int) - (int)"},"variableMap":{"end":"cp","point":"cp"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.RegExpImpl:442","type":"CtAssignmentImpl","sourcecode":"skip[0] = cp - dp"},"status":-1},{"failures":[],"tindex":"c7f2c8a2-89e2-11e6-9ddb-83cce28302a4","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Parser:777","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.ast.AstNode org.mozilla.javascript.ast.AstNode = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:358","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.ast.AstNode org.mozilla.javascript.ast.AstNode = removeParens(node.getLeft())"},"status":-1},{"failures":[],"tindex":"c7f2c8a3-89e2-11e6-9ddb-c371cb83c1a9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Context:636","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Context.checkLanguageVersion(version)"},"status":-1},{"failures":[],"tindex":"c7f2c8a4-89e2-11e6-9ddb-d572a79afe70","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptableObject:3141","type":"CtWhileImpl","sourcecode":"while (newSize < tableSize)\n    newSize <<= 1;"},"variableMap":{"tableSize":"org.mozilla.javascript.Token.RP","newSize":"org.mozilla.javascript.Token.RP"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:275","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Decompiler.addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)"},"status":-1},{"failures":[],"tindex":"c7f2c8a5-89e2-11e6-9ddb-9b443b1e6e2a","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.Label:56","type":"CtIfImpl","sourcecode":"if ((name == null) || (\"\".equals(name)))\n    throw new java.lang.IllegalArgumentException(\"invalid label name\");\n"},"variableMap":{"name":"org.mozilla.javascript.optimizer.Codegen.ID_FIELD_NAME"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:810","type":"CtIfImpl","sourcecode":"if (count > 1) {\n    cfw.addLoadThis();\n    cfw.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, cfw.getClassName(), org.mozilla.javascript.optimizer.Codegen.org.mozilla.javascript.optimizer.Codegen.java.lang.String, \"I\");\n    switchStart = cfw.addTableSwitch(1, (count - 1));\n} "},"status":-1},{"failures":[],"tindex":"c7f2efb6-89e2-11e6-9ddb-199c3288808b","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ClassCache:119","type":"CtIfImpl","sourcecode":"if (enabled == (boolean))\n    return ;\n"},"variableMap":{"cachingIsEnabled":"includePrivate","enabled":"includePrivate"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaMembers:310","type":"CtIfImpl","sourcecode":"if ((java.lang.reflect.Modifier.isPublic(clazz.getModifiers())) || includePrivate) {\n    try {\n        if (includeProtected || includePrivate) {\n            while (clazz != null) {\n                try {\n                    java.lang.reflect.Method[] java.lang.reflect.Method[] = clazz.getDeclaredMethods();\n                    for (java.lang.reflect.Method java.lang.reflect.Method : methods) {\n                        int int = method.getModifiers();\n                        if (((java.lang.reflect.Modifier.isPublic(mods)) || (java.lang.reflect.Modifier.isProtected(mods))) || includePrivate) {\n                            org.mozilla.javascript.JavaMembers.MethodSignature org.mozilla.javascript.JavaMembers.MethodSignature = new org.mozilla.javascript.JavaMembers.MethodSignature(method);\n                            if (!(map.containsKey(sig))) {\n                                if (includePrivate && (!(method.isAccessible())))\n                                    method.setAccessible(true);\n                                \n                                map.put(sig, method);\n                            } \n                        } \n                    }\n                    clazz = clazz.getSuperclass();\n                } catch (java.lang.SecurityException e) {\n                    java.lang.reflect.Method[] java.lang.reflect.Method[] = clazz.getMethods();\n                    for (java.lang.reflect.Method java.lang.reflect.Method : methods) {\n                        org.mozilla.javascript.JavaMembers.MethodSignature org.mozilla.javascript.JavaMembers.MethodSignature = new org.mozilla.javascript.JavaMembers.MethodSignature(method);\n                        if (!(map.containsKey(sig)))\n                            map.put(sig, method);\n                        \n                    }\n                    break;\n                }\n            }\n        } else {\n            java.lang.reflect.Method[] java.lang.reflect.Method[] = clazz.getMethods();\n            for (java.lang.reflect.Method java.lang.reflect.Method : methods) {\n                org.mozilla.javascript.JavaMembers.MethodSignature org.mozilla.javascript.JavaMembers.MethodSignature = new org.mozilla.javascript.JavaMembers.MethodSignature(method);\n                if (!(map.containsKey(sig)))\n                    map.put(sig, method);\n                \n            }\n        }\n        return ;\n    } catch (java.lang.SecurityException e) {\n        org.mozilla.javascript.Context.reportWarning((((\"Could not discover accessible methods of class \" + (clazz.getName())) + \" due to lack of privileges, \") + \"attemping superclasses/interfaces.\"));\n    }\n} "},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
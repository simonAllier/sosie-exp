{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"d6e03a1c-8b5c-11e6-9a0f-d7f71e2b6671","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.IRFactory:2063","type":"CtIfImpl","sourcecode":"if ((right.getDouble()) == 0.0) {\n    return new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , left);\n} "},"variableMap":{"org.mozilla.javascript.Token.POS":"org.mozilla.javascript.Token.TYPEOF","left":"child","right":"child"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:1827","type":"CtSwitchImpl","sourcecode":"switch (nodeType) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node;\n            if (childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                child.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = child;\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = org.mozilla.javascript.Node.newString(child.getString());\n                n = new org.mozilla.javascript.Node(nodeType , left , right);\n            } else if ((childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getFirstChild();\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getLastChild();\n                child.removeChild(left);\n                child.removeChild(right);\n                n = new org.mozilla.javascript.Node(nodeType , left , right);\n            } else if (childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getFirstChild();\n                child.removeChild(ref);\n                n = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , ref);\n            } else {\n                n = new org.mozilla.javascript.Node(nodeType , new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) , child);\n            }\n            return n;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            child.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            return child;\n        } \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            int int = org.mozilla.javascript.ScriptRuntime.toInt32(child.getDouble());\n            child.setDouble((~value));\n            return child;\n        } \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            child.setDouble((-(child.getDouble())));\n            return child;\n        } \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = org.mozilla.javascript.IRFactory.isAlwaysDefinedBoolean(child);\n            if (status != 0) {\n                int int;\n                if (status == (org.mozilla.javascript.IRFactory.org.mozilla.javascript.IRFactory.int)) {\n                    type = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else {\n                    type = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                }\n                if ((childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                    child.setType(type);\n                    return child;\n                } \n                return new org.mozilla.javascript.Node(type);\n            } \n            break;\n        }\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":1,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
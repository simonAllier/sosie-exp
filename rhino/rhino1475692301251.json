{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"f5ad15b3-8b29-11e6-b29b-c5317d65fad3","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Context:1585","type":"CtReturnImpl","sourcecode":"return \"[native code]\\n\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeIterator:87","type":"CtReturnImpl","sourcecode":"return \"Iterator\""},"status":-1},{"failures":[],"tindex":"f5ad3cc4-8b29-11e6-b29b-dbc1b2787b09","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaMembers:281","type":"CtInvocationImpl","sourcecode":"ht.put(name, fun)"},"status":-1},{"failures":[],"tindex":"f5ad3cc5-8b29-11e6-b29b-efa3059e9c89","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJSON:294","type":"CtAssignmentImpl","sourcecode":"value = org.mozilla.javascript.ScriptRuntime.toNumber(value)"},"variableMap":{"value":"javaObject"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeJavaObject:910","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = in.readObject()"},"status":-1},{"failures":[],"tindex":"f5ad3cc6-8b29-11e6-b29b-d9755a17c947","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.JavaMembers:182","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"[]\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:2745","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = null"},"status":-1},{"failures":[],"tindex":"f5ad3cc7-8b29-11e6-b29b-c97355307403","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Interpreter:2816","type":"CtAssignmentImpl","sourcecode":"frame.org.mozilla.javascript.InterpretedFunction = fnOrScript"},"variableMap":{"fnOrScript":"staticSecurityDomain","frame":"staticSecurityDomain"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.InterpretedFunction:69","type":"CtAssignmentImpl","sourcecode":"f = new org.mozilla.javascript.InterpretedFunction(idata , staticSecurityDomain)"},"status":-1},{"failures":[],"tindex":"f5ad3cc8-8b29-11e6-b29b-91c46123dac5","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4152","type":"CtAssignmentImpl","sourcecode":"prev = curr"},"variableMap":{"prev":"classCount","curr":"classCount"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:334","type":"CtAssignmentImpl","sourcecode":"regexp.int = state.int"},"status":-1},{"failures":[],"tindex":"f5ad63d9-8b29-11e6-b29b-35c339d14de8","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptableObject:254","type":"CtIfImpl","sourcecode":"if (org.mozilla.javascript.Context.getContext().hasFeature(org.mozilla.javascript.Context.org.mozilla.javascript.Context.int)) {\n    throw org.mozilla.javascript.ScriptRuntime.typeError1(\"msg.set.prop.no.setter\", java.lang.String);\n} "},"variableMap":{"org.mozilla.javascript.Context.FEATURE_STRICT_MODE":"org.mozilla.javascript.Node.ISNUMBER_PROP","name":"mainClassName"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:2165","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (((org.mozilla.javascript.optimizer.OptFunctionNode) != null) || ((parent.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode = org.mozilla.javascript.optimizer.OptFunctionNode.get(org.mozilla.javascript.ast.ScriptNode, fnIndex);\n            int int = ofn.org.mozilla.javascript.ast.FunctionNode.getFunctionType();\n            if (t != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                throw org.mozilla.javascript.optimizer.Codegen.badTree();\n            } \n            visitFunction(ofn, t);\n        } \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addPush(node.getString());\n            addScriptRuntimeInvoke(\"name\", (\"(Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/String;\" + \")Ljava/lang/Object;\"))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            if (specialType == (org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)) {\n                org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode;\n                target = ((org.mozilla.javascript.optimizer.OptFunctionNode)(node.getProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)));\n                if (target != null) {\n                    visitOptimizedCall(node, target, type, child);\n                } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    visitStandardCall(node, child);\n                } else {\n                    visitStandardNew(node, child);\n                }\n            } else {\n                visitSpecialCall(node, type, specialType, child);\n            }\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateFunctionAndThisObj(child, node);\n        child = child.getNext();\n        generateCallArgArray(node, child, false);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"callRef\", (\"(Lorg/mozilla/javascript/Callable;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"[Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Lorg/mozilla/javascript/Ref;\")))));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            double double = node.getDouble();\n            if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) != (-1)) {\n                org.mozilla.classfile.ClassFileWriter.addPush(num);\n            } else {\n                org.mozilla.javascript.optimizer.Codegen.pushNumberAsObject(org.mozilla.classfile.ClassFileWriter, num);\n            }\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addPush(node.getString());\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"TRUE\", \"Ljava/lang/Boolean;\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"FALSE\", \"Ljava/lang/Boolean;\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, org.mozilla.javascript.optimizer.Codegen.java.lang.String, org.mozilla.javascript.optimizer.Codegen.getCompiledRegexpName(org.mozilla.javascript.ast.ScriptNode, i), \"Ljava/lang/Object;\");\n            org.mozilla.classfile.ClassFileWriter.addInvoke(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"org/mozilla/javascript/ScriptRuntime\", \"wrapRegExp\", (\"(Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/Object;\" + \")Lorg/mozilla/javascript/Scriptable;\"))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getNext();\n            while (next != null) {\n                generateExpression(child, node);\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                child = next;\n                next = next.getNext();\n            }\n            generateExpression(child, node);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = getLocalBlockRegister(node);\n            org.mozilla.classfile.ClassFileWriter.addALoad(local);\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                addScriptRuntimeInvoke(\"enumNext\", \"(Ljava/lang/Object;)Ljava/lang/Boolean;\");\n            } else {\n                org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                addScriptRuntimeInvoke(\"enumId\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n            }\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArrayLiteral(node, child, false);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitObjectLiteral(node, child, false);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            generateIfJump(child, node, trueTarget, falseTarget);\n            org.mozilla.classfile.ClassFileWriter.markLabel(trueTarget);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"FALSE\", \"Ljava/lang/Boolean;\");\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, beyond);\n            org.mozilla.classfile.ClassFileWriter.markLabel(falseTarget);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"TRUE\", \"Ljava/lang/Boolean;\");\n            org.mozilla.classfile.ClassFileWriter.markLabel(beyond);\n            org.mozilla.classfile.ClassFileWriter.adjustStackTop((-1));\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        addScriptRuntimeInvoke(\"toInt32\", \"(Ljava/lang/Object;)I\");\n        org.mozilla.classfile.ClassFileWriter.addPush((-1));\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        addDoubleWrap();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        org.mozilla.javascript.optimizer.Codegen.pushUndefined(org.mozilla.classfile.ClassFileWriter);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        addScriptRuntimeInvoke(\"typeof\", (\"(Ljava/lang/Object;\" + \")Ljava/lang/String;\"));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitTypeofname(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitIncDec(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            generateExpression(child, node);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            addScriptRuntimeInvoke(\"toBoolean\", \"(Ljava/lang/Object;)Z\");\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, falseTarget);\n            else\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, falseTarget);\n            \n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            generateExpression(child.getNext(), node);\n            org.mozilla.classfile.ClassFileWriter.markLabel(falseTarget);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getNext();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = ifThen.getNext();\n            generateExpression(child, node);\n            addScriptRuntimeInvoke(\"toBoolean\", \"(Ljava/lang/Object;)Z\");\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, elseTarget);\n            short short = org.mozilla.classfile.ClassFileWriter.getStackTop();\n            generateExpression(ifThen, node);\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, afterHook);\n            org.mozilla.classfile.ClassFileWriter.markLabel(elseTarget, stack);\n            generateExpression(ifElse, node);\n            org.mozilla.classfile.ClassFileWriter.markLabel(afterHook);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            generateExpression(child, node);\n            generateExpression(child.getNext(), node);\n            switch (node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) {\n                case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n                    org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                    break;\n                case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n                    addOptRuntimeInvoke(\"add\", \"(DLjava/lang/Object;)Ljava/lang/Object;\");\n                    break;\n                case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n                    addOptRuntimeInvoke(\"add\", \"(Ljava/lang/Object;D)Ljava/lang/Object;\");\n                    break;\n                default :\n                    if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        addScriptRuntimeInvoke(\"add\", (\"(Ljava/lang/CharSequence;\" + (\"Ljava/lang/Object;\" + \")Ljava/lang/CharSequence;\")));\n                    } else if ((child.getNext().getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        addScriptRuntimeInvoke(\"add\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/CharSequence;\" + \")Ljava/lang/CharSequence;\")));\n                    } else {\n                        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                        addScriptRuntimeInvoke(\"add\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\"))));\n                    }\n            }\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArithmetic(node, org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, child, parent);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArithmetic(node, org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, child, parent);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitArithmetic(node, (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int : org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int), child, parent);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitBitOp(node, type, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        addObjectToDouble();\n        if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        } \n        addDoubleWrap();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        addObjectToDouble();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = -1;\n            if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                prop = child.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1));\n            } \n            if (prop != (-1)) {\n                child.removeProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                generateExpression(child, node);\n                child.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, prop);\n            } else {\n                generateExpression(child, node);\n                addDoubleWrap();\n            }\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            visitIfJumpRelOp(node, child, trueGOTO, falseGOTO);\n            addJumpedBooleanWrap(trueGOTO, falseGOTO);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            visitIfJumpEqOp(node, child, trueGOTO, falseGOTO);\n            addJumpedBooleanWrap(trueGOTO, falseGOTO);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitGetProp(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        generateExpression(child.getNext(), node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) != (-1)) {\n            addScriptRuntimeInvoke(\"getObjectIndex\", (\"(Ljava/lang/Object;D\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n        } else {\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"getObjectElem\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Ljava/lang/Object;\")))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"refGet\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitGetVar(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetVar(node, child, true);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetName(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitStrictSetName(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetConst(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetConstVar(node, child, true);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetProp(type, node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitSetElem(type, node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            generateExpression(child, node);\n            child = child.getNext();\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                addScriptRuntimeInvoke(\"refGet\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n            } \n            generateExpression(child, node);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"refSet\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Ljava/lang/Object;\")))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"refDel\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        boolean boolean = (child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        generateExpression(child, node);\n        child = child.getNext();\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        org.mozilla.classfile.ClassFileWriter.addPush(isName);\n        addScriptRuntimeInvoke(\"delete\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \"Z)Ljava/lang/Object;\"))));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            while (child != null) {\n                generateExpression(child, node);\n                child = child.getNext();\n            }\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addPush(node.getString());\n            addScriptRuntimeInvoke(\"bind\", (\"(Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/String;\" + \")Lorg/mozilla/javascript/Scriptable;\"))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addALoad(getLocalBlockRegister(node));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            java.lang.String java.lang.String = ((java.lang.String)(node.getProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)));\n            generateExpression(child, node);\n            org.mozilla.classfile.ClassFileWriter.addPush(special);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"specialRef\", (\"(Ljava/lang/Object;\" + (\"Ljava/lang/String;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Ref;\")))));\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, 0);\n            do {\n                generateExpression(child, node);\n                child = child.getNext();\n            } while (child != null );\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            switch (type) {\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    methodName = \"memberRef\";\n                    signature = \"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"I\" + \")Lorg/mozilla/javascript/Ref;\")));\n                    break;\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    methodName = \"memberRef\";\n                    signature = \"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"I\" + \")Lorg/mozilla/javascript/Ref;\"))));\n                    break;\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    methodName = \"nameRef\";\n                    signature = \"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"I\" + \")Lorg/mozilla/javascript/Ref;\")));\n                    org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                    break;\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    methodName = \"nameRef\";\n                    signature = \"(Ljava/lang/Object;\" + (\"Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"I\" + \")Lorg/mozilla/javascript/Ref;\"))));\n                    org.mozilla.classfile.ClassFileWriter.addALoad(short);\n                    break;\n                default :\n                    throw org.mozilla.javascript.Kit.codeBug();\n            }\n            org.mozilla.classfile.ClassFileWriter.addPush(memberTypeFlags);\n            addScriptRuntimeInvoke(methodName, signature);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitDotQuery(node, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"escapeAttributeValue\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/String;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"escapeTextValue\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/String;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"setDefaultNamespace\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + \")Ljava/lang/Object;\")));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateYieldPoint(node, true);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child;\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = enterWith.getNext();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = with.getNext();\n            generateStatement(enterWith);\n            generateExpression(with.getFirstChild(), with);\n            generateStatement(leaveWith);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child;\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getNext();\n            generateStatement(initStmt);\n            generateExpression(expr, node);\n            break;\n        }\n    default :\n        throw new java.lang.RuntimeException((\"Unexpected node type \" + type));\n}"},"status":-1},{"failures":[],"tindex":"f5add90a-8b29-11e6-b29b-11e36d2af446","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.UintMap:151","type":"CtIfImpl","sourcecode":"if ((int) != 0) {\n    int[][((int) + index)] = 0;\n} "},"variableMap":{"keys":"bbits","index":"b5","ivaluesShift":"org.mozilla.javascript.DToA.P"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:827","type":"CtIfImpl","sourcecode":"if (leftright) {\n    if (mode < 2) {\n        i = denorm ? (be[0]) + ((((org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int) + ((org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int) - 1)) - 1) + 1) : (1 + (org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int)) - (bbits[0]);\n    } else {\n        j = ilim - 1;\n        if (m5 >= j)\n            m5 -= j;\n        else {\n            s5 += j -= m5;\n            b5 += j;\n            m5 = 0;\n        }\n        if ((i = ilim) < 0) {\n            m2 -= i;\n            i = 0;\n        } \n    }\n    b2 += i;\n    s2 += i;\n    mhi = java.math.BigInteger.valueOf(1);\n} "},"status":-1},{"failures":[],"tindex":"f5add90b-8b29-11e6-b29b-d3460ba0c7f7","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:1195","type":"CtIfImpl","sourcecode":"if (!((0 <= switchStart) && (switchStart <= ((((int) - (4 * 4)) - padSize) - 1)))) {\n    throw new java.lang.IllegalArgumentException(((switchStart + \" is outside a possible range of tableswitch\") + \" in already generated code\"));\n} "},"variableMap":{"switchStart":"org.mozilla.classfile.ByteCode.GETSTATIC","padSize":"org.mozilla.classfile.ByteCode.GETSTATIC","itsCodeBufferTop":"org.mozilla.classfile.ByteCode.GETSTATIC"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:5340","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Boolean\", \"FALSE\", \"Ljava/lang/Boolean;\")"},"status":-1},{"failures":[],"tindex":"f5add90c-8b29-11e6-b29b-3b07b18f53e7","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.BaseFunction:276","type":"CtIfImpl","sourcecode":"if (indent >= 0) {\n    flags = 0;\n} else {\n    indent = 0;\n}"},"variableMap":{"indent":"c","flags":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:1488","type":"CtIfImpl","sourcecode":"if (org.mozilla.javascript.ScriptRuntime.isJSLineTerminator(c)) {\n    start = cur;\n    break;\n} "},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
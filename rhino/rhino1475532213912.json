{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"3a28b1c4-89b5-11e6-9398-97cf1f29c2a9","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJavaMethod:194","type":"CtAssignmentImpl","sourcecode":"args = args.clone()"},"variableMap":{"args":"args"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:259","type":"CtAssignmentImpl","sourcecode":"args = newArgs"},"status":-1},{"failures":[],"tindex":"3a28d8d5-89b5-11e6-9398-35fd87f7855c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:462","type":"CtLocalVariableImpl","sourcecode":"char char = 'A'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:555","type":"CtLocalVariableImpl","sourcecode":"char char = 0"},"status":-1},{"failures":[],"tindex":"3a28d8d6-89b5-11e6-9398-01802e1b9415","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeGlobal:404","type":"CtInvocationImpl","sourcecode":"sb.setLength(k)"},"status":-1},{"failures":[],"tindex":"3a28d8d7-89b5-11e6-9398-55ba93700f2e","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.DToA:634","type":"CtAssignmentImpl","sourcecode":"ieps = 2"},"variableMap":{"ieps":"S_hiWord"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:910","type":"CtAssignmentImpl","sourcecode":"S_hiWord = S_hiWord << 8"},"status":-1},{"failures":[],"tindex":"3a28d8d8-89b5-11e6-9398-35d37639ee79","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.RhinoException:156","type":"CtIfImpl","sourcecode":"if ((org.mozilla.javascript.RhinoException.this.java.lang.String) != null)\n    throw new java.lang.IllegalStateException();\n"},"variableMap":{"lineSource":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1768","type":"CtSwitchImpl","sourcecode":"switch (op) {\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((gData.int) != 0) {\n            if ((!(gData.boolean)) || (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(((gData.int) - 1)))))) {\n                break;\n            } \n        } \n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((gData.int) != end) {\n            if ((!(gData.boolean)) || (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(gData.int))))) {\n                break;\n            } \n        } \n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = (((gData.int) == 0) || (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(((gData.int) - 1)))))) ^ (!(((gData.int) < end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int)))));\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = (((gData.int) == 0) || (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(((gData.int) - 1)))))) ^ (((gData.int) < end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int))));\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isDigit(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isDigit(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isREWhiteSpace(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isREWhiteSpace(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            parenIndex = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.backrefMatcher(gData, parenIndex, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            length = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.flatNMatcher(gData, offset, length, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)((program[(pc++)]) & 255));\n            if (((gData.int) != end) && ((input.charAt(gData.int)) == matchCh)) {\n                result = true;\n                (gData.int)++;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            length = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.flatNIMatcher(gData, offset, length, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)((program[(pc++)]) & 255));\n            if ((gData.int) != end) {\n                char char = input.charAt(gData.int);\n                if ((matchCh == c) || ((org.mozilla.javascript.regexp.NativeRegExp.upcase(matchCh)) == (org.mozilla.javascript.regexp.NativeRegExp.upcase(c)))) {\n                    result = true;\n                    (gData.int)++;\n                } \n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if (((gData.int) != end) && ((input.charAt(gData.int)) == matchCh)) {\n                result = true;\n                (gData.int)++;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) != end) {\n                char char = input.charAt(gData.int);\n                if ((matchCh == c) || ((org.mozilla.javascript.regexp.NativeRegExp.upcase(matchCh)) == (org.mozilla.javascript.regexp.NativeRegExp.upcase(c)))) {\n                    result = true;\n                    (gData.int)++;\n                } \n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            index = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) != end) {\n                if (org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][index], input.charAt(gData.int))) {\n                    (gData.int)++;\n                    result = true;\n                    break;\n                } \n            } \n        }\n        break;\n    default :\n        throw org.mozilla.javascript.Kit.codeBug();\n}"},"status":-1},{"failures":[],"tindex":"3a28ffe9-89b5-11e6-9398-ebd44c615f77","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Decompiler:432","type":"CtAssignmentImpl","sourcecode":"afterFirstEOL = true"},"status":-1},{"failures":[],"tindex":"3a28ffea-89b5-11e6-9398-5375e6c66022","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Decompiler:874","type":"CtOperatorAssignmentImpl","sourcecode":"offset += 4"},"variableMap":{"offset":"escapeVal"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:577","type":"CtAssignmentImpl","sourcecode":"c = escapeVal"},"status":-1},{"failures":[],"tindex":"3a28ffeb-89b5-11e6-9398-afc19a1909df","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.v8dtoa.FastDtoa:145","type":"CtOperatorAssignmentImpl","sourcecode":"rest += ten_kappa"},"variableMap":{"rest":"f","ten_kappa":"new_value"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.DiyFp:142","type":"CtAssignmentImpl","sourcecode":"long = new_value"},"status":-1},{"failures":[],"tindex":"3a2926fc-89b5-11e6-9398-cb995bc616ab","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4191","type":"CtLocalVariableImpl","sourcecode":"int int = 48"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:4521","type":"CtLocalVariableImpl","sourcecode":"int int = org.mozilla.classfile.ConstantPool.org.mozilla.classfile.ConstantPool.int"},"status":-1},{"failures":[],"tindex":"3a2926fd-89b5-11e6-9398-2b24348dd5f9","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1040","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.paren\", \"\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1535","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.regexp.NativeRegExp.processCharSetImpl(gData, charSet)"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
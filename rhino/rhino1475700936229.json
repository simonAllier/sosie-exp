{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"108fc7ab-8b3e-11e6-826c-4d005691a198","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Context:2483","type":"CtIfImpl","sourcecode":"if (returnFunction) {\n    p.boolean = true;\n} "},"status":-1},{"failures":[],"tindex":"108feebc-8b3e-11e6-826c-a3c4804e0016","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:737","type":"CtSwitchImpl","sourcecode":"switch (c) {\n    case '\\b' :\n        escape = 'b';\n        break;\n    case '\\f' :\n        escape = 'f';\n        break;\n    case '\\n' :\n        escape = 'n';\n        break;\n    case '\\r' :\n        escape = 'r';\n        break;\n    case '\\t' :\n        escape = 't';\n        break;\n    case 11 :\n        escape = 'v';\n        break;\n    case ' ' :\n        escape = ' ';\n        break;\n    case '\\\\' :\n        escape = '\\\\';\n        break;\n}"},"variableMap":{"c":"memberTypeFlags","escape":"org.mozilla.javascript.Node.ATTRIBUTE_FLAG"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:1289","type":"CtIfImpl","sourcecode":"if ((memberTypeFlags & (org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)) != 0)\n    org.mozilla.javascript.Decompiler.addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n"},"status":-1},{"failures":[],"tindex":"108feebd-8b3e-11e6-826c-436234c413ee","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.BaseFunction:473","type":"CtIfImpl","sourcecode":"if (proto != obj) {\n    obj.setPrototype(proto);\n} "},"variableMap":{"obj":"desc","proto":"scope"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:540","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.ScriptRuntime.setBuiltinProtoAndParent(desc, scope, org.mozilla.javascript.TopLevel.Builtins.org.mozilla.javascript.TopLevel.Builtins.org.mozilla.javascript.TopLevel.Builtins)"},"status":-1},{"failures":[],"tindex":"109015ce-8b3e-11e6-826c-0958a4f76744","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:4516","type":"CtInvocationImpl","sourcecode":"addScriptRuntimeInvoke(\"refIncrDecr\", (\"(Lorg/mozilla/javascript/Ref;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \"I)Ljava/lang/Object;\"))))"},"status":-1},{"failures":[],"tindex":"109015cf-8b3e-11e6-826c-ef689727db24","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeNumber:155","type":"CtReturnImpl","sourcecode":"return \"Infinity\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaAdapter:581","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.JavaAdapter.doCall(cx, scope, thisObj, f, args, argsToWrap)"},"status":-1},{"failures":[],"tindex":"109015d0-8b3e-11e6-826c-e5ca41437498","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:334","type":"CtSwitchImpl","sourcecode":"switch (c) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n    case '\\u00a0' :\n    case '\\f' :\n    case '\u000b' :\n    case '\\u2028' :\n    case '\\u2029' :\n    case '\\ufeff' :\n        return true;\n    default :\n        return (java.lang.Character.getType(c)) == (java.lang.Character.java.lang.Character.byte);\n}"},"variableMap":{"java.lang.Character.SPACE_SEPARATOR":"org.mozilla.javascript.regexp.NativeRegExp.REOP_ASSERT","c":"maxBackReference"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:817","type":"CtSwitchImpl","sourcecode":"switch (c) {\n    case '^' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        return true;\n    case '$' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        return true;\n    case '\\\\' :\n        if ((state.int) < (state.int)) {\n            c = src[((state.int)++)];\n            switch (c) {\n                case 'b' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    return true;\n                case 'B' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    return true;\n                case '0' :\n                    org.mozilla.javascript.regexp.NativeRegExp.reportWarning(state.org.mozilla.javascript.Context, \"msg.bad.backref\", \"\");\n                    num = 0;\n                    while ((num < 32) && ((state.int) < (state.int))) {\n                        c = src[state.int];\n                        if ((c >= '0') && (c <= '7')) {\n                            (state.int)++;\n                            num = (8 * num) + (c - '0');\n                        } else\n                            break;\n                        \n                    }\n                    c = ((char)(num));\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case '1' :\n                case '2' :\n                case '3' :\n                case '4' :\n                case '5' :\n                case '6' :\n                case '7' :\n                case '8' :\n                case '9' :\n                    termStart = (state.int) - 1;\n                    num = org.mozilla.javascript.regexp.NativeRegExp.getDecimalValue(c, state, 65535, \"msg.overlarge.backref\");\n                    if (num > (state.int))\n                        org.mozilla.javascript.regexp.NativeRegExp.reportWarning(state.org.mozilla.javascript.Context, \"msg.bad.backref\", \"\");\n                    \n                    if (num > (state.int)) {\n                        state.int = termStart;\n                        if (c >= '8') {\n                            c = '\\\\';\n                            org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                            break;\n                        } \n                        (state.int)++;\n                        num = c - '0';\n                        while ((num < 32) && ((state.int) < (state.int))) {\n                            c = src[state.int];\n                            if ((c >= '0') && (c <= '7')) {\n                                (state.int)++;\n                                num = (8 * num) + (c - '0');\n                            } else\n                                break;\n                            \n                        }\n                        c = ((char)(num));\n                        org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                        break;\n                    } \n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.org.mozilla.javascript.regexp.RENode.int = num - 1;\n                    state.int += 3;\n                    if ((state.int) < num) {\n                        state.int = num;\n                    } \n                    break;\n                case 'f' :\n                    c = 12;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'n' :\n                    c = 10;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'r' :\n                    c = 13;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 't' :\n                    c = 9;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'v' :\n                    c = 11;\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'c' :\n                    if (((state.int) < (state.int)) && (org.mozilla.javascript.regexp.NativeRegExp.isControlLetter(src[state.int])))\n                        c = ((char)((src[((state.int)++)]) & 31));\n                    else {\n                        --(state.int);\n                        c = '\\\\';\n                    }\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'u' :\n                    nDigits += 2;\n                case 'x' :\n                    {\n                        int int = 0;\n                        int int;\n                        for (i = 0 ; (i < nDigits) && ((state.int) < (state.int)) ; i++) {\n                            c = src[((state.int)++)];\n                            n = org.mozilla.javascript.Kit.xDigitToInt(c, n);\n                            if (n < 0) {\n                                state.int -= i + 2;\n                                n = src[((state.int)++)];\n                                break;\n                            } \n                        }\n                        c = ((char)(n));\n                    }\n                    org.mozilla.javascript.regexp.NativeRegExp.doFlat(state, c);\n                    break;\n                case 'd' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'D' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 's' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'S' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'w' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                case 'W' :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    (state.int)++;\n                    break;\n                default :\n                    state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.org.mozilla.javascript.regexp.RENode.char = c;\n                    state.org.mozilla.javascript.regexp.RENode.int = 1;\n                    state.org.mozilla.javascript.regexp.RENode.int = (state.int) - 1;\n                    state.int += 3;\n                    break;\n            }\n            break;\n        } else {\n            org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.trail.backslash\", \"\");\n            return false;\n        }\n    case '(' :\n        {\n            org.mozilla.javascript.regexp.RENode org.mozilla.javascript.regexp.RENode = null;\n            termStart = state.int;\n            if (((((state.int) + 1) < (state.int)) && ((src[state.int]) == '?')) && ((((c = src[((state.int) + 1)]) == '=') || (c == '!')) || (c == ':'))) {\n                state.int += 2;\n                if (c == '=') {\n                    result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.int += 4;\n                } else if (c == '!') {\n                    result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                    state.int += 4;\n                } \n            } else {\n                result = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n                state.int += 6;\n                result.int = (state.int)++;\n            }\n            ++(state.int);\n            if (!(org.mozilla.javascript.regexp.NativeRegExp.parseDisjunction(state)))\n                return false;\n            \n            if (((state.int) == (state.int)) || ((src[state.int]) != ')')) {\n                org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.paren\", \"\");\n                return false;\n            } \n            ++(state.int);\n            --(state.int);\n            if (result != null) {\n                result.org.mozilla.javascript.regexp.RENode = state.org.mozilla.javascript.regexp.RENode;\n                state.org.mozilla.javascript.regexp.RENode = result;\n            } \n            break;\n        }\n    case ')' :\n        org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.re.unmatched.right.paren\", \"\");\n        return false;\n    case '[' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        termStart = state.int;\n        state.org.mozilla.javascript.regexp.RENode.int = termStart;\n        while (true) {\n            if ((state.int) == (state.int)) {\n                org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.class\", \"\");\n                return false;\n            } \n            if ((src[state.int]) == '\\\\')\n                (state.int)++;\n            else {\n                if ((src[state.int]) == ']') {\n                    state.org.mozilla.javascript.regexp.RENode.int = (state.int) - termStart;\n                    break;\n                } \n            }\n            (state.int)++;\n        }\n        state.org.mozilla.javascript.regexp.RENode.int = (state.int)++;\n        if (!(org.mozilla.javascript.regexp.NativeRegExp.calculateBitmapSize(state, state.org.mozilla.javascript.regexp.RENode, src, termStart, ((state.int)++))))\n            return false;\n        \n        state.int += 3;\n        break;\n    case '.' :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        (state.int)++;\n        break;\n    case '*' :\n    case '+' :\n    case '?' :\n        org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.bad.quant\", java.lang.String.valueOf(src[((state.int) - 1)]));\n        return false;\n    default :\n        state.org.mozilla.javascript.regexp.RENode = new org.mozilla.javascript.regexp.RENode(org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte);\n        state.org.mozilla.javascript.regexp.RENode.char = c;\n        state.org.mozilla.javascript.regexp.RENode.int = 1;\n        state.org.mozilla.javascript.regexp.RENode.int = (state.int) - 1;\n        state.int += 3;\n        break;\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":6,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"272c5b23-8ab9-11e6-8755-99f99289941c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.IdScriptableObject:514","type":"CtReturnImpl","sourcecode":"return (attributes << 16) | id"},"variableMap":{"attributes":"org.mozilla.javascript.Node.RIGHT","id":"org.mozilla.javascript.Token.GETVAR"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Optimizer:118","type":"CtSwitchImpl","sourcecode":"switch (n.getType()) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            int int = rewriteForNumberVariables(child, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            if (type == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int))\n                n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            \n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n        return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = org.mozilla.javascript.optimizer.OptFunctionNode.getVarIndex(n);\n            if (((boolean) && (org.mozilla.javascript.optimizer.OptFunctionNode.isParameter(varIndex))) && (desired == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int))) {\n                n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n            } else if (org.mozilla.javascript.optimizer.OptFunctionNode.isNumberVar(varIndex)) {\n                n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n            } \n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            int int = rewriteForNumberVariables(child, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                if ((type == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) && (!(convertParameter(child)))) {\n                    n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    markDCPNumberContext(child);\n                    return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                } \n                return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n            } else if (((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                return type;\n            } \n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = lChild.getNext();\n            int int = rewriteForNumberVariables(rChild, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            int int = org.mozilla.javascript.optimizer.OptFunctionNode.getVarIndex(n);\n            if ((boolean) && (org.mozilla.javascript.optimizer.OptFunctionNode.isParameter(varIndex))) {\n                if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                    if (!(convertParameter(rChild))) {\n                        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                        return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                    } \n                    markDCPNumberContext(rChild);\n                    return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                } else\n                    return rType;\n                \n            } else if (org.mozilla.javascript.optimizer.OptFunctionNode.isNumberVar(varIndex)) {\n                if (rType != (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                    n.removeChild(rChild);\n                    n.addChildToBack(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , rChild));\n                } \n                n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                markDCPNumberContext(rChild);\n                return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n            } else {\n                if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                    if (!(convertParameter(rChild))) {\n                        n.removeChild(rChild);\n                        n.addChildToBack(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , rChild));\n                    } \n                } \n                return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n            }\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = lChild.getNext();\n            int int = rewriteForNumberVariables(lChild, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            int int = rewriteForNumberVariables(rChild, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            markDCPNumberContext(lChild);\n            markDCPNumberContext(rChild);\n            if (convertParameter(lChild)) {\n                if (convertParameter(rChild)) {\n                    return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                } else if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                    n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                } \n            } else if (convertParameter(rChild)) {\n                if (lType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                    n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                } \n            } else {\n                if (lType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                    if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    } else {\n                        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    }\n                } else {\n                    if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    } \n                }\n            }\n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = lChild.getNext();\n            int int = rewriteForNumberVariables(lChild, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            int int = rewriteForNumberVariables(rChild, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            if (convertParameter(lChild)) {\n                if (convertParameter(rChild)) {\n                    return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                } else {\n                    if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    } \n                }\n            } else {\n                if (convertParameter(rChild)) {\n                    if (lType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    } \n                } else {\n                    if (lType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                        if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                            n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                        } else {\n                            n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                        }\n                    } else {\n                        if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                            n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                        } \n                    }\n                }\n            }\n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = lChild.getNext();\n            int int = rewriteForNumberVariables(lChild, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            int int = rewriteForNumberVariables(rChild, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            markDCPNumberContext(lChild);\n            markDCPNumberContext(rChild);\n            if (lType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                    n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                } else {\n                    if (!(convertParameter(rChild))) {\n                        n.removeChild(rChild);\n                        n.addChildToBack(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , rChild));\n                        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    } \n                    return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                }\n            } else {\n                if (rType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                    if (!(convertParameter(lChild))) {\n                        n.removeChild(lChild);\n                        n.addChildToFront(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , lChild));\n                        n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    } \n                    return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                } else {\n                    if (!(convertParameter(lChild))) {\n                        n.removeChild(lChild);\n                        n.addChildToFront(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , lChild));\n                    } \n                    if (!(convertParameter(rChild))) {\n                        n.removeChild(rChild);\n                        n.addChildToBack(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , rChild));\n                    } \n                    n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                    return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n                }\n            }\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = arrayBase.getNext();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = arrayIndex.getNext();\n            int int = rewriteForNumberVariables(arrayBase, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            if (baseType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                if (!(convertParameter(arrayBase))) {\n                    n.removeChild(arrayBase);\n                    n.addChildToFront(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , arrayBase));\n                } \n            } \n            int int = rewriteForNumberVariables(arrayIndex, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            if (indexType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                if (!(convertParameter(arrayIndex))) {\n                    n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                } \n            } \n            int int = rewriteForNumberVariables(rValue, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            if (rValueType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                if (!(convertParameter(rValue))) {\n                    n.removeChild(rValue);\n                    n.addChildToBack(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , rValue));\n                } \n            } \n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = arrayBase.getNext();\n            int int = rewriteForNumberVariables(arrayBase, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            if (baseType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                if (!(convertParameter(arrayBase))) {\n                    n.removeChild(arrayBase);\n                    n.addChildToFront(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , arrayBase));\n                } \n            } \n            int int = rewriteForNumberVariables(arrayIndex, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n            if (indexType == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                if (!(convertParameter(arrayIndex))) {\n                    n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n                } \n            } \n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n            rewriteAsObjectChildren(child, child.getFirstChild());\n            child = child.getNext();\n            org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode = ((org.mozilla.javascript.optimizer.OptFunctionNode)(n.getProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)));\n            if (target != null) {\n                while (child != null) {\n                    int int = rewriteForNumberVariables(child, org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int);\n                    if (type == (org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int)) {\n                        markDCPNumberContext(child);\n                    } \n                    child = child.getNext();\n                }\n            } else {\n                rewriteAsObjectChildren(n, child);\n            }\n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n    default :\n        {\n            rewriteAsObjectChildren(n, n.getFirstChild());\n            return org.mozilla.javascript.optimizer.Optimizer.org.mozilla.javascript.optimizer.Optimizer.int;\n        }\n}"},"status":-1},{"failures":[],"tindex":"272d1e74-8ab9-11e6-8755-5f93fdb75cf8","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Kit:30","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?> = org.mozilla.javascript.Kit.classOrNull(\"java.lang.Throwable\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.VMBridge:30","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?> = org.mozilla.javascript.Kit.classOrNull(className)"},"status":-1},{"failures":[],"tindex":"272d1e75-8ab9-11e6-8755-7777476810ee","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ImporterTopLevel:97","type":"CtIfImpl","sourcecode":"if (result != (org.mozilla.javascript.Scriptable.org.mozilla.javascript.Scriptable.java.lang.Object))\n    return result;\n"},"variableMap":{"result":"org.mozilla.javascript.Undefined.instance","org.mozilla.javascript.Scriptable.NOT_FOUND":"org.mozilla.javascript.Undefined.instance"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.typedarrays.NativeInt32Array:87","type":"CtIfImpl","sourcecode":"if (checkIndex(index)) {\n    return org.mozilla.javascript.Undefined.org.mozilla.javascript.Undefined.java.lang.Object;\n} "},"status":-1},{"failures":[],"tindex":"272d1e76-8ab9-11e6-8755-8bb7f4059e46","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.Jump:73","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.Node = defaultTarget"},"variableMap":{"defaultTarget":"left","target2":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:1147","type":"CtAssignmentImpl","sourcecode":"left = target"},"status":-1},{"failures":[],"tindex":"272d1e77-8ab9-11e6-8755-2bc11d85e3a1","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.DToA:128","type":"CtIfImpl","sourcecode":"if ((x & -16777216) == 0) {\n    k += 8;\n    x <<= 8;\n} "},"variableMap":{"x":"c","k":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:905","type":"CtInvocationImpl","sourcecode":"addToString(c)"},"status":-1},{"failures":[],"tindex":"272d1e78-8ab9-11e6-8755-1b0634bb4c82","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeString:514","type":"CtReturnImpl","sourcecode":"return java.lang.CharSequence"},"variableMap":{"string":"target"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeString:716","type":"CtReturnImpl","sourcecode":"return target.subSequence(((int)(begin)), ((int)(end)))"},"status":-1},{"failures":[],"tindex":"272d4589-8ab9-11e6-8755-9f3ad56a73c4","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NodeTransformer:378","type":"CtIfImpl","sourcecode":"if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n    node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n} else if ((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n    node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n    nameSource.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n} else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n    node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n    nameSource.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n} else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n    org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n    node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, n);\n} else {\n    throw org.mozilla.javascript.Kit.codeBug();\n}"},"variableMap":{"nameSource":"node","parent":"node","org.mozilla.javascript.Token.NAME":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","previous":"node","org.mozilla.javascript.Token.GETVAR":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","org.mozilla.javascript.Token.SETVAR":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","org.mozilla.javascript.Token.SETCONST":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","type":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","node":"node","org.mozilla.javascript.Token.DELPROP":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","org.mozilla.javascript.Token.FALSE":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","org.mozilla.javascript.Token.SETCONSTVAR":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","org.mozilla.javascript.Token.STRING":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","org.mozilla.javascript.Token.STRICT_SETNAME":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME","org.mozilla.javascript.Token.SETNAME":"org.mozilla.javascript.Icode.Icode_TYPEOFNAME"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:787","type":"CtInvocationImpl","sourcecode":"addStringOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, node.getString())"},"status":-1},{"failures":[],"tindex":"272d458a-8ab9-11e6-8755-cb48870ce0ba","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Interpreter:277","type":"CtReturnImpl","sourcecode":"return best"},"variableMap":{"best":"mask"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.UintMap:189","type":"CtReturnImpl","sourcecode":"return ((fraction >>> shift) & mask) | 1"},"status":-1},{"failures":[],"tindex":"272d458b-8ab9-11e6-8755-ef91782b099a","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.v8dtoa.FastDtoa:372","type":"CtLocalVariableImpl","sourcecode":"int int = integrals / divider"},"variableMap":{"divider":"pc","integrals":"pc"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:2077","type":"CtLocalVariableImpl","sourcecode":"int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc))"},"status":-1},{"failures":[],"tindex":"272d6c9c-8ab9-11e6-8755-f7372c03cb95","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:494","type":"CtIfImpl","sourcecode":"if (org.mozilla.javascript.NativeDate.IsLeapYear(year)) {\n    if (d == 0)\n        return 1;\n    \n    --d;\n} "},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
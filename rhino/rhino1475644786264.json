{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"5483314d-8abb-11e6-8d1e-67fabc83f8f0","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeArray:1557","type":"CtAssignmentImpl","sourcecode":"start = length - 1"},"variableMap":{"start":"lengthArg","length":"lengthArg"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:69","type":"CtAssignmentImpl","sourcecode":"long = lengthArg"},"status":-1},{"failures":[],"tindex":"5483585e-8abb-11e6-8d1e-3fc29f373171","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.typedarrays.NativeArrayBufferView:113","type":"CtIfImpl","sourcecode":"if (s_length == 6) {\n    X = \"buffer\";\n    id = org.mozilla.javascript.typedarrays.NativeArrayBufferView.org.mozilla.javascript.typedarrays.NativeArrayBufferView.int;\n} else if (s_length == 10) {\n    c = s.charAt(4);\n    if (c == 'L') {\n        X = \"byteLength\";\n        id = org.mozilla.javascript.typedarrays.NativeArrayBufferView.org.mozilla.javascript.typedarrays.NativeArrayBufferView.int;\n    } else if (c == 'O') {\n        X = \"byteOffset\";\n        id = org.mozilla.javascript.typedarrays.NativeArrayBufferView.org.mozilla.javascript.typedarrays.NativeArrayBufferView.int;\n    } \n} "},"variableMap":{"org.mozilla.javascript.typedarrays.NativeArrayBufferView.Id_byteLength":"i","c":"i","s":"arg","org.mozilla.javascript.typedarrays.NativeArrayBufferView.Id_byteOffset":"i","s_length":"i","X":"x","id":"i","org.mozilla.javascript.typedarrays.NativeArrayBufferView.Id_buffer":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeJavaClass:257","type":"CtIfImpl","sourcecode":"if (x != arg) {\n    if (args == origArgs) {\n        args = origArgs.clone();\n    } \n    args[i] = x;\n} "},"status":-1},{"failures":[],"tindex":"54837f6f-8abb-11e6-8d1e-df5657b8e2cc","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Optimizer:375","type":"CtInvocationImpl","sourcecode":"n.addChildToBack(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , rValue))"},"variableMap":{"org.mozilla.javascript.Token.TO_OBJECT":"org.mozilla.javascript.ast.FunctionNode.FUNCTION_STATEMENT","rValue":"child","n":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:1844","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount()) {\n            addInstructionCount(1);\n        } \n        while (child != null) {\n            generateStatement(child);\n            child = child.getNext();\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            boolean boolean = boolean;\n            boolean = true;\n            int int = getNewWordLocal();\n            if (boolean) {\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                org.mozilla.classfile.ClassFileWriter.addAStore(local);\n            } \n            node.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, local);\n            while (child != null) {\n                generateStatement(child);\n                child = child.getNext();\n            }\n            releaseWordLocal(((short)(local)));\n            node.removeProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            boolean = prevLocal;\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode = org.mozilla.javascript.optimizer.OptFunctionNode.get(org.mozilla.javascript.ast.ScriptNode, fnIndex);\n            int int = ofn.org.mozilla.javascript.ast.FunctionNode.getFunctionType();\n            if (t == (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                visitFunction(ofn, t);\n            } else {\n                if (t != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                    throw org.mozilla.javascript.optimizer.Codegen.badTree();\n                } \n            }\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitTryCatchFinally(((org.mozilla.javascript.ast.Jump)(node)), child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.classfile.ClassFileWriter.setStackTop(((short)(0)));\n            int int = getLocalBlockRegister(node);\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            java.lang.String java.lang.String = child.getString();\n            child = child.getNext();\n            generateExpression(child, node);\n            if (scopeIndex == 0) {\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            } else {\n                org.mozilla.classfile.ClassFileWriter.addALoad(local);\n            }\n            org.mozilla.classfile.ClassFileWriter.addPush(name);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"newCatchScope\", (\"(Ljava/lang/Throwable;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/String;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"))))));\n            org.mozilla.classfile.ClassFileWriter.addAStore(local);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        generateThrowJavaScriptException();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        org.mozilla.classfile.ClassFileWriter.addALoad(getLocalBlockRegister(node));\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (!(boolean)) {\n            if (child != null) {\n                generateExpression(child, node);\n            } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                org.mozilla.javascript.optimizer.Codegen.pushUndefined(org.mozilla.classfile.ClassFileWriter);\n            } else {\n                if ((short) < 0)\n                    throw org.mozilla.javascript.optimizer.Codegen.badTree();\n                \n                org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            }\n        } \n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        if ((int) == (-1)) {\n            if (!(boolean))\n                throw org.mozilla.javascript.optimizer.Codegen.badTree();\n            \n            int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n        } \n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        visitSwitch(((org.mozilla.javascript.ast.Jump)(node)), child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"enterWith\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"))));\n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        incReferenceWordLocal(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"leaveWith\", (\"(Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"));\n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        decReferenceWordLocal(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        int int = type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int : type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int : org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int;\n        org.mozilla.classfile.ClassFileWriter.addPush(enumType);\n        addScriptRuntimeInvoke(\"enumInit\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"I\" + \")Ljava/lang/Object;\")))));\n        org.mozilla.classfile.ClassFileWriter.addAStore(getLocalBlockRegister(node));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            visitSetVar(child, child.getFirstChild(), false);\n        } else if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            visitSetConstVar(child, child.getFirstChild(), false);\n        } else if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            generateYieldPoint(child, false);\n        } else {\n            generateExpression(child, node);\n            if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) != (-1))\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            else\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        if ((short) < 0) {\n            short = getNewWordLocal();\n        } \n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                addInstructionCount();\n            \n            int int = getTargetLabel(node);\n            org.mozilla.classfile.ClassFileWriter.markLabel(label);\n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                saveCurrentCodeOffset();\n            \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        visitGoto(((org.mozilla.javascript.ast.Jump)(node)), type, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (!(boolean)) {\n                break;\n            } \n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                saveCurrentCodeOffset();\n            \n            org.mozilla.classfile.ClassFileWriter.setStackTop(((short)(1)));\n            int int = getNewWordLocal();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.markLabel(finallyStart);\n            generateIntegerWrap();\n            org.mozilla.classfile.ClassFileWriter.addAStore(finallyRegister);\n            while (child != null) {\n                generateStatement(child);\n                child = child.getNext();\n            }\n            org.mozilla.classfile.ClassFileWriter.addALoad(finallyRegister);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Integer\");\n            generateIntegerUnwrap();\n            org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint = java.util.Map<org.mozilla.javascript.Node, org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint>.get(node);\n            ret.int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, ret.int);\n            releaseWordLocal(((short)(finallyRegister)));\n            org.mozilla.classfile.ClassFileWriter.markLabel(finallyEnd);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        break;\n    default :\n        throw org.mozilla.javascript.optimizer.Codegen.badTree();\n}"},"status":-1},{"failures":[],"tindex":"5483f4a0-8abb-11e6-8d1e-61e01a444ba4","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.TryStatement:146","type":"CtInvocationImpl","sourcecode":"sb.append(\" finally \")"},"variableMap":{"sb":"buf"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:1050","type":"CtInvocationImpl","sourcecode":"buf.append(dig)"},"status":-1},{"failures":[],"tindex":"5483f4a1-8abb-11e6-8d1e-69dedb4bea4b","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJSON:36","type":"CtInvocationImpl","sourcecode":"obj.setParentScope(scope)"},"variableMap":{"obj":"thisObj","scope":"thisObj"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:2447","type":"CtIfImpl","sourcecode":"if (f instanceof org.mozilla.javascript.Scriptable) {\n    thisObj = ((org.mozilla.javascript.Scriptable)(f)).getParentScope();\n} "},"status":-1},{"failures":[],"tindex":"548490e2-8abb-11e6-8d1e-e5dcd89e7234","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4471","type":"CtReturnImpl","sourcecode":"return (int)++"},"variableMap":{"itsTopIndex":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeContinuation:99","type":"CtReturnImpl","sourcecode":"return id"},"status":-1},{"failures":[],"tindex":"5484b7f3-8abb-11e6-8d1e-e1d05a247509","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:44","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.TokenStream.this.int = 0"},"status":-1}],"header":{"groupId":"r","transformationCount":7,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"0d6ecfa5-8aad-11e6-8ed1-8504a93d0a79","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:953","type":"CtAssignmentImpl","sourcecode":"c = s.charAt(i)"},"variableMap":{"c":"dc","s":"da","i":"dp"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.RegExpImpl:403","type":"CtAssignmentImpl","sourcecode":"dc = da.charAt((dp + 1))"},"status":-1},{"failures":[],"tindex":"0d6ef6b6-8aad-11e6-8ed1-475bbaceef12","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.typedarrays.Conversions:98","type":"CtLocalVariableImpl","sourcecode":"long long = lv % (org.mozilla.javascript.typedarrays.Conversions.org.mozilla.javascript.typedarrays.Conversions.long)"},"variableMap":{"org.mozilla.javascript.typedarrays.Conversions.THIRTYTWO_BIT":"i","lv":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:975","type":"CtLocalVariableImpl","sourcecode":"long long = (len - i) - 1"},"status":-1},{"failures":[],"tindex":"0d6ef6b7-8aad-11e6-8ed1-870a3d003075","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Arguments:305","type":"CtIfImpl","sourcecode":"if (offset != extraCount)\n    org.mozilla.javascript.Kit.codeBug();\n"},"variableMap":{"offset":"elseTarget","extraCount":"elseTarget"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:2405","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.markLabel(elseTarget, stack)"},"status":-1},{"failures":[],"tindex":"0d6ef6b8-8aad-11e6-8ed1-f7bd5d2baf9a","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:698","type":"CtReturnImpl","sourcecode":"return ((yearday + monthday) + date) - 1"},"variableMap":{"monthday":"result","date":"result","yearday":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:1492","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.NativeDate.TimeClip(result)"},"status":-1},{"failures":[],"tindex":"0d6f1dc9-8aad-11e6-8ed1-038f0151a0b0","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Decompiler:466","type":"CtIfImpl","sourcecode":"if ((source.charAt(afterName)) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n    less = indentGap;\n"},"variableMap":{"indentGap":"parenIndex","afterName":"index","source":"input","less":"cp","org.mozilla.javascript.Token.COLON":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1768","type":"CtSwitchImpl","sourcecode":"switch (op) {\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((gData.int) != 0) {\n            if ((!(gData.boolean)) || (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(((gData.int) - 1)))))) {\n                break;\n            } \n        } \n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((gData.int) != end) {\n            if ((!(gData.boolean)) || (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(gData.int))))) {\n                break;\n            } \n        } \n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = (((gData.int) == 0) || (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(((gData.int) - 1)))))) ^ (!(((gData.int) < end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int)))));\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = (((gData.int) == 0) || (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(((gData.int) - 1)))))) ^ (((gData.int) < end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int))));\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isDigit(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isDigit(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isREWhiteSpace(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isREWhiteSpace(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            parenIndex = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.backrefMatcher(gData, parenIndex, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            length = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.flatNMatcher(gData, offset, length, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)((program[(pc++)]) & 255));\n            if (((gData.int) != end) && ((input.charAt(gData.int)) == matchCh)) {\n                result = true;\n                (gData.int)++;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            length = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.flatNIMatcher(gData, offset, length, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)((program[(pc++)]) & 255));\n            if ((gData.int) != end) {\n                char char = input.charAt(gData.int);\n                if ((matchCh == c) || ((org.mozilla.javascript.regexp.NativeRegExp.upcase(matchCh)) == (org.mozilla.javascript.regexp.NativeRegExp.upcase(c)))) {\n                    result = true;\n                    (gData.int)++;\n                } \n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if (((gData.int) != end) && ((input.charAt(gData.int)) == matchCh)) {\n                result = true;\n                (gData.int)++;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) != end) {\n                char char = input.charAt(gData.int);\n                if ((matchCh == c) || ((org.mozilla.javascript.regexp.NativeRegExp.upcase(matchCh)) == (org.mozilla.javascript.regexp.NativeRegExp.upcase(c)))) {\n                    result = true;\n                    (gData.int)++;\n                } \n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            index = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) != end) {\n                if (org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][index], input.charAt(gData.int))) {\n                    (gData.int)++;\n                    result = true;\n                    break;\n                } \n            } \n        }\n        break;\n    default :\n        throw org.mozilla.javascript.Kit.codeBug();\n}"},"status":-1},{"failures":[],"tindex":"0d6f44da-8aad-11e6-8ed1-c9448271c06c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:620","type":"CtSwitchImpl","sourcecode":"switch (day) {\n    case 0 :\n        return 1978;\n    case 1 :\n        return 1973;\n    case 2 :\n        return 1985;\n    case 3 :\n        return 1986;\n    case 4 :\n        return 1981;\n    case 5 :\n        return 1971;\n    case 6 :\n        return 1977;\n}"},"variableMap":{"day":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:1816","type":"CtIfImpl","sourcecode":"if (o == null) {\n    for (int int = len - 1 ; i >= 0 ; i--) {\n        if ((get(i)) == null) {\n            return i;\n        } \n    }\n} else {\n    for (int int = len - 1 ; i >= 0 ; i--) {\n        if (o.equals(get(i))) {\n            return i;\n        } \n    }\n}"},"status":-1},{"failures":[],"tindex":"0d6f44db-8aad-11e6-8ed1-e3206c15a8c5","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Parser:558","type":"CtIfImpl","sourcecode":"if (tt <= (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n    break;\n} "},"variableMap":{"tt":"theOpCode","org.mozilla.javascript.Token.EOF":"theOpCode"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:835","type":"CtInvocationImpl","sourcecode":"addToCodeBuffer(theOpCode)"},"status":-1},{"failures":[],"tindex":"0d6f44dc-8aad-11e6-8ed1-7b04390ac902","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.serialize.ScriptableOutputStream:178","type":"CtIfImpl","sourcecode":"if (false)\n    throw new java.io.IOException();\n"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ast.ObjectProperty:110","type":"CtIfImpl","sourcecode":"if (isGetterMethod()) {\n    sb.append(\"get \");\n} else if (isSetterMethod()) {\n    sb.append(\"set \");\n} "},"status":-1},{"failures":[],"tindex":"0d6f44dd-8aad-11e6-8ed1-250d9a3488c0","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:4083","type":"CtAssignmentImpl","sourcecode":"cx.org.mozilla.javascript.RegExpProxy = proxy"},"variableMap":{"proxy":"reProxy","cx":"cx","regExpProxy":"reProxy"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.RegExpImpl:542","type":"CtAssignmentImpl","sourcecode":"reProxy = org.mozilla.javascript.ScriptRuntime.getRegExpProxy(cx)"},"status":-1},{"failures":[],"tindex":"0d6f44de-8aad-11e6-8ed1-ad10d57dbfba","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Interpreter:891","type":"CtLocalVariableImpl","sourcecode":"final int int = 100"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.UintMap:291","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
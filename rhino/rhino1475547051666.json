{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"c6316ae5-89d7-11e6-bf56-93819a9ac273","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.NativeScript:117","type":"CtReturnImpl","sourcecode":"return nscript"},"variableMap":{"nscript":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeObject:318","type":"CtReturnImpl","sourcecode":"return java.lang.Boolean.valueOf(obj.isExtensible())"},"status":-1},{"failures":[],"tindex":"c6347826-89d7-11e6-bf56-8b1954736e42","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Parser:296","type":"CtIfImpl","sourcecode":"if ((comment.charAt(i)) == '\\n') {\n    lines++;\n} "},"variableMap":{"i":"i","comment":"id","lines":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:951","type":"CtIfImpl","sourcecode":"if (id instanceof java.lang.Integer) {\n    int int = ((java.lang.Integer)(id)).intValue();\n    value = thisObj.get(intId, thisObj);\n    if (value == (org.mozilla.javascript.Scriptable.org.mozilla.javascript.Scriptable.java.lang.Object))\n        continue;\n    \n    if (i > 0)\n        result.append(\", \");\n    \n    result.append(intId);\n} else {\n    java.lang.String java.lang.String = ((java.lang.String)(id));\n    value = thisObj.get(strId, thisObj);\n    if (value == (org.mozilla.javascript.Scriptable.org.mozilla.javascript.Scriptable.java.lang.Object))\n        continue;\n    \n    if (i > 0)\n        result.append(\", \");\n    \n    if (org.mozilla.javascript.ScriptRuntime.isValidIdentifierName(strId)) {\n        result.append(strId);\n    } else {\n        result.append('\\'');\n        result.append(org.mozilla.javascript.ScriptRuntime.escapeString(strId, '\\''));\n        result.append('\\'');\n    }\n}"},"status":-1},{"failures":[],"tindex":"c6349f37-89d7-11e6-bf56-07834b88173a","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:296","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.ScriptableObject org.mozilla.javascript.ScriptableObject"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.xml.XMLLib:39","type":"CtLocalVariableImpl","sourcecode":"org.mozilla.javascript.ScriptableObject org.mozilla.javascript.ScriptableObject = org.mozilla.javascript.ScriptRuntime.getLibraryScopeOrNull(scope)"},"status":-1},{"failures":[],"tindex":"c6349f38-89d7-11e6-bf56-03e714f6b44b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:2221","type":"CtOperatorAssignmentImpl","sourcecode":"pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc)"},"status":-1},{"failures":[],"tindex":"c6349f39-89d7-11e6-bf56-d1df675b66ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:868","type":"CtAssignmentImpl","sourcecode":"b1 = mhi.multiply(b)"},"status":-1},{"failures":[],"tindex":"c634c64a-89d7-11e6-bf56-0bb404593d64","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.TokenStream:1184","type":"CtSwitchImpl","sourcecode":"switch (c) {\n    case '<' :\n        declTags++;\n        break;\n    case '>' :\n        declTags--;\n        if (declTags == 0)\n            return true;\n        \n        break;\n}"},"variableMap":{"c":"pc","declTags":"continuationOp"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1972","type":"CtIfImpl","sourcecode":"if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n    result = match >= 0;\n    if (result)\n        pc = match;\n    \n} else {\n    switchStatement : switch (op) {\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                if ((gData.int) == end) {\n                    result = false;\n                    break;\n                } \n                char char = input.charAt(gData.int);\n                if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                    if ((c != matchCh1) && (!(org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][matchCh2], c)))) {\n                        result = false;\n                        break;\n                    } \n                } else {\n                    if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))\n                        c = org.mozilla.javascript.regexp.NativeRegExp.upcase(c);\n                    \n                    if ((c != matchCh1) && (c != matchCh2)) {\n                        result = false;\n                        break;\n                    } \n                }\n            }\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                int int = gData.int;\n                if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n                    if (match < 0) {\n                        op = program[(nextpc++)];\n                        pc = nextpc;\n                        continue;\n                    } \n                    result = true;\n                    pc = match;\n                    op = program[(pc++)];\n                } \n                byte byte = program[(nextpc++)];\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, nextop, nextpc, startcp, continuationOp, continuationPc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                pc += offset;\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                gData.setParens(parenIndex, gData.int, 0);\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                int int = gData.parensIndex(parenIndex);\n                gData.setParens(parenIndex, cap_index, ((gData.int) - cap_index));\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                if ((org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) && ((org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false)) < 0)) {\n                    result = false;\n                    break;\n                } \n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false);\n                    if ((match >= 0) && ((program[match]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) {\n                        result = false;\n                        break;\n                    } \n                } \n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                gData.int = state.int;\n                gData.org.mozilla.javascript.regexp.REBackTrackData = state.org.mozilla.javascript.regexp.REBackTrackData;\n                continuationPc = state.int;\n                continuationOp = state.int;\n                if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                    result = !result;\n                } \n            }\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int;\n                int int;\n                boolean boolean = false;\n                switch (op) {\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 0;\n                        max = -1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 1;\n                        max = -1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 0;\n                        max = 1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        max = (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc)) - 1;\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        break;\n                    default :\n                        throw org.mozilla.javascript.Kit.codeBug();\n                }\n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, min, max, gData.int, null, continuationOp, continuationPc);\n                if (greedy) {\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    op = program[(pc++)];\n                } else {\n                    if (min != 0) {\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        op = program[(pc++)];\n                    } else {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                        org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                        op = program[(pc++)];\n                    }\n                }\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            result = true;\n            pc = continuationPc;\n            op = continuationOp;\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int;\n                int int;\n                do {\n                    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    if (!result) {\n                        if ((state.int) == 0)\n                            result = true;\n                        \n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                        result = false;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    int int = state.int;\n                    int int = state.int;\n                    if (new_min != 0)\n                        new_min--;\n                    \n                    if (new_max != (-1))\n                        new_max--;\n                    \n                    if (new_max == 0) {\n                        result = true;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    nextpc = pc + (3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int));\n                    nextop = program[nextpc];\n                    int int = gData.int;\n                    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(nextop)) {\n                        nextpc++;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, nextop, program, nextpc, end, true);\n                        if (match < 0) {\n                            result = new_min == 0;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        result = true;\n                        nextpc = match;\n                    } \n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, startcp, null, state.int, state.int);\n                    if (new_min == 0) {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc, startcp, state.int, state.int);\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, (pc + (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)));\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                    } \n                } while ((program[nextpc]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte) );\n                pc = nextpc;\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                if (!result) {\n                    if (((state.int) == (-1)) || ((state.int) > 0)) {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, state.int, state.int, gData.int, null, state.int, state.int);\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                        op = program[(pc++)];\n                        continue;\n                    } else {\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        break;\n                    }\n                } else {\n                    if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                        result = false;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        break;\n                    } \n                    int int = state.int;\n                    int int = state.int;\n                    if (new_min != 0)\n                        new_min--;\n                    \n                    if (new_max != (-1))\n                        new_max--;\n                    \n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, gData.int, null, state.int, state.int);\n                    if (new_min != 0) {\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                        op = program[(pc++)];\n                    } else {\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                        org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                        op = program[(pc++)];\n                    }\n                    continue;\n                }\n            }\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            return true;\n        default :\n            throw org.mozilla.javascript.Kit.codeBug(\"invalid bytecode\");\n    }\n}"},"status":-1},{"failures":[],"tindex":"c635899b-89d7-11e6-bf56-9f4383bed005","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJavaMethod:403","type":"CtAssignmentImpl","sourcecode":"extraBestFits[j] = i"},"variableMap":{"extraBestFits":"arg","i":"iv","j":"iv"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.typedarrays.Conversions:89","type":"CtAssignmentImpl","sourcecode":"iv = org.mozilla.javascript.ScriptRuntime.toInt32(arg)"},"status":-1},{"failures":[],"tindex":"c635899c-89d7-11e6-bf56-b33238472ef4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:359","type":"CtInvocationImpl","sourcecode":"cfw.addALoad(1)"},"status":-1},{"failures":[],"tindex":"c635899d-89d7-11e6-bf56-87097558ee3c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:530","type":"CtAssignmentImpl","sourcecode":"child = child.getNext()"},"status":-1},{"failures":[],"tindex":"c635b0ae-89d7-11e6-bf56-85947e203927","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ContextFactory:566","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Context.exit()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaMembers:421","type":"CtForEachImpl","sourcecode":"for (java.lang.reflect.Method java.lang.reflect.Method : methods) {\n    int int = method.getModifiers();\n    boolean boolean = java.lang.reflect.Modifier.isStatic(mods);\n    java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = isStatic ? java.util.Map<java.lang.String, java.lang.Object> : java.util.Map<java.lang.String, java.lang.Object>;\n    java.lang.String java.lang.String = method.getName();\n    java.lang.Object java.lang.Object = ht.get(name);\n    if (value == null) {\n        ht.put(name, method);\n    } else {\n        org.mozilla.javascript.ObjArray org.mozilla.javascript.ObjArray;\n        if (value instanceof org.mozilla.javascript.ObjArray) {\n            overloadedMethods = ((org.mozilla.javascript.ObjArray)(value));\n        } else {\n            if (!(value instanceof java.lang.reflect.Method))\n                org.mozilla.javascript.Kit.codeBug();\n            \n            overloadedMethods = new org.mozilla.javascript.ObjArray();\n            overloadedMethods.add(value);\n            ht.put(name, overloadedMethods);\n        }\n        overloadedMethods.add(method);\n    }\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
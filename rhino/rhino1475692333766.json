{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"09074fbe-8b2a-11e6-9273-f59966b55677","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:811","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:3565","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-1},{"failures":[],"tindex":"090776cf-8b2a-11e6-9273-1dd83135241c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.JavaMembers:685","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.getFields()"},"variableMap":{"cl":"cl"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaMembers:659","type":"CtTryImpl","sourcecode":"try {\n    java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = new java.util.ArrayList<java.lang.reflect.Field>();\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>;\n    while (currentClass != null) {\n        java.lang.reflect.Field[] java.lang.reflect.Field[] = currentClass.getDeclaredFields();\n        for (java.lang.reflect.Field java.lang.reflect.Field : declared) {\n            int int = field.getModifiers();\n            if ((includePrivate || (java.lang.reflect.Modifier.isPublic(mod))) || (java.lang.reflect.Modifier.isProtected(mod))) {\n                if (!(field.isAccessible()))\n                    field.setAccessible(true);\n                \n                fieldsList.add(field);\n            } \n        }\n        currentClass = currentClass.getSuperclass();\n    }\n    return fieldsList.toArray(new java.lang.reflect.Field[fieldsList.size()]);\n} catch (java.lang.SecurityException e) {\n}"},"status":-1},{"failures":[],"tindex":"090776d0-8b2a-11e6-9273-3fe1b6d84a44","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:2581","type":"CtAssignmentImpl","sourcecode":"callArgs = new java.lang.Object[L - 1]"},"variableMap":{"callArgs":"ids","L":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:483","type":"CtAssignmentImpl","sourcecode":"ids = new java.lang.Object[id]"},"status":-1},{"failures":[],"tindex":"09079de1-8b2a-11e6-9273-cbe83f4f7ced","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:3231","type":"CtIfImpl","sourcecode":"if ((childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (childType == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n    hasGetterSetters = true;\n    break;\n} "},"variableMap":{"childType":"org.mozilla.javascript.Token.CONTINUE","org.mozilla.javascript.Token.SET":"org.mozilla.javascript.Token.RB","hasGetterSetters":"afterFirstEOL","org.mozilla.javascript.Token.GET":"org.mozilla.javascript.Token.DOT"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Decompiler:323","type":"CtSwitchImpl","sourcecode":"switch (source.charAt(i)) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if ((source.charAt(i)) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            result.append(\"get \");\n        } else if ((source.charAt(i)) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            result.append(\"set \");\n        } \n        ++i;\n        i = org.mozilla.javascript.Decompiler.printSourceString(source, (i + 1), false, result);\n        ++i;\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        i = org.mozilla.javascript.Decompiler.printSourceString(source, (i + 1), false, result);\n        continue;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        i = org.mozilla.javascript.Decompiler.printSourceString(source, (i + 1), true, result);\n        continue;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        i = org.mozilla.javascript.Decompiler.printSourceNumber(source, (i + 1), result);\n        continue;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"true\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"false\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"null\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"this\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        ++i;\n        result.append(\"function \");\n        break;\n    case org.mozilla.javascript.Decompiler.org.mozilla.javascript.Decompiler.int :\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\", \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        ++braceNesting;\n        if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n            indent += indentGap;\n        \n        result.append('{');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            --braceNesting;\n            if (justFunctionBody && (braceNesting == 0))\n                break;\n            \n            result.append('}');\n            switch (org.mozilla.javascript.Decompiler.getNext(source, length, i)) {\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                case org.mozilla.javascript.Decompiler.org.mozilla.javascript.Decompiler.int :\n                    indent -= indentGap;\n                    break;\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    indent -= indentGap;\n                    result.append(' ');\n                    break;\n            }\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append('(');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(')');\n        if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n            result.append(' ');\n        \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append('[');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(']');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (toSource)\n                break;\n            \n            boolean boolean = true;\n            if (!afterFirstEOL) {\n                afterFirstEOL = true;\n                if (justFunctionBody) {\n                    result.setLength(0);\n                    indent -= indentGap;\n                    newLine = false;\n                } \n            } \n            if (newLine) {\n                result.append('\\n');\n            } \n            if ((i + 1) < length) {\n                int int = 0;\n                int int = source.charAt((i + 1));\n                if ((nextToken == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (nextToken == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                    less = indentGap - caseGap;\n                } else if (nextToken == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    less = indentGap;\n                } else if (nextToken == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    int int = org.mozilla.javascript.Decompiler.getSourceStringEnd(source, (i + 2));\n                    if ((source.charAt(afterName)) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                        less = indentGap;\n                    \n                } \n                for ( ; less < indent ; less++)\n                    result.append(' ');\n            } \n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append('.');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"new \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"delete \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"if \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"else \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"for \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" in \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"with \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"while \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"do \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"try \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"catch \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"finally \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"throw \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"switch \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"break\");\n        if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n            result.append(' ');\n        \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"continue\");\n        if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n            result.append(' ');\n        \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"case \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"default\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"return\");\n        if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) != (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n            result.append(' ');\n        \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"var \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"let \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(';');\n        if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) != (org.mozilla.javascript.Decompiler.getNext(source, length, i))) {\n            result.append(' ');\n        } \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" = \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" += \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" -= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" *= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" /= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" %= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" |= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" ^= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" &= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" <<= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" >>= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" >>>= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" ? \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\": \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n            result.append(':');\n        else\n            result.append(\" : \");\n        \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" || \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" && \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" | \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" ^ \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" & \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" === \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" !== \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" == \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" != \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" <= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" < \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" >= \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" > \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" instanceof \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" << \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" >> \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" >>> \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"typeof \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"void \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"const \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"yield \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append('!');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append('~');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append('+');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append('-');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"++\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"--\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" + \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" - \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" * \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" / \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\" % \");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"::\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"..\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\".(\");\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append('@');\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        result.append(\"debugger;\\n\");\n        break;\n    default :\n        throw new java.lang.RuntimeException((\"Token: \" + (org.mozilla.javascript.Token.name(source.charAt(i)))));\n}"},"status":-1},{"failures":[],"tindex":"0907ec02-8b2a-11e6-9273-f5535af06a36","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:4729","type":"CtIfImpl","sourcecode":"if (stack != (org.mozilla.classfile.ClassFileWriter.getStackTop()))\n    throw org.mozilla.javascript.optimizer.Codegen.badTree();\n"},"variableMap":{"stack":"reg","cfw":"cfw"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:5036","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.addILoad((reg + 1))"},"status":-1},{"failures":[],"tindex":"0907ec03-8b2a-11e6-9273-552b33bcf7f2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:650","type":"CtOperatorAssignmentImpl","sourcecode":"d /= ds"},"status":-1},{"failures":[],"tindex":"0907ec04-8b2a-11e6-9273-53d857f3bb49","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Decompiler:267","type":"CtIfImpl","sourcecode":"if (caseGap < 0)\n    throw new java.lang.IllegalArgumentException();\n"},"variableMap":{"caseGap":"org.mozilla.classfile.ByteCode.TABLESWITCH"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:1730","type":"CtForImpl","sourcecode":"for (int int = work.getStart() ; bci < (work.getEnd()) ; bci += next) {\n    bc = (byte[][bci]) & 255;\n    next = execute(bci);\n    if (isBranch(bc)) {\n        org.mozilla.classfile.SuperBlock org.mozilla.classfile.SuperBlock = getBranchTarget(bci);\n        if (org.mozilla.classfile.ClassFileWriter.StackMapTable.org.mozilla.classfile.ClassFileWriter.StackMapTable.boolean) {\n            java.lang.System.java.lang.System.java.io.PrintStream.println(((((((((\"sb \" + (work.getIndex())) + \" points to sb \") + (targetSB.getIndex())) + \" (offset \") + bci) + \" -> \") + (targetSB.getStart())) + \")\"));\n            java.lang.System.java.lang.System.java.io.PrintStream.println(((\"type state at \" + bci) + \":\"));\n            org.mozilla.classfile.TypeInfo.print(int[], int, int[], int, org.mozilla.classfile.ConstantPool);\n        } \n        flowInto(targetSB);\n        if (org.mozilla.classfile.ClassFileWriter.StackMapTable.org.mozilla.classfile.ClassFileWriter.StackMapTable.boolean) {\n            java.lang.System.java.lang.System.java.io.PrintStream.println(((\"type state of \" + targetSB) + \" after merge:\"));\n            org.mozilla.classfile.TypeInfo.print(targetSB.getLocals(), targetSB.getStack(), org.mozilla.classfile.ConstantPool);\n        } \n    } else if (bc == (org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int)) {\n        int int = (bci + 1) + (3 & (~bci));\n        int int = getOperand(switchStart, 4);\n        org.mozilla.classfile.SuperBlock org.mozilla.classfile.SuperBlock = getSuperBlockFromOffset((bci + defaultOffset));\n        if (org.mozilla.classfile.ClassFileWriter.org.mozilla.classfile.ClassFileWriter.boolean) {\n            java.lang.System.java.lang.System.java.io.PrintStream.println((((\"merging sb \" + (work.getIndex())) + \" with sb \") + (targetSB.getIndex())));\n        } \n        flowInto(targetSB);\n        int int = getOperand((switchStart + 4), 4);\n        int int = getOperand((switchStart + 8), 4);\n        int int = (high - low) + 1;\n        int int = switchStart + 12;\n        for (int int = 0 ; i < numCases ; i++) {\n            int int = bci + (getOperand((caseBase + (4 * i)), 4));\n            targetSB = getSuperBlockFromOffset(label);\n            if (org.mozilla.classfile.ClassFileWriter.StackMapTable.org.mozilla.classfile.ClassFileWriter.StackMapTable.boolean) {\n                java.lang.System.java.lang.System.java.io.PrintStream.println((((\"merging sb \" + (work.getIndex())) + \" with sb \") + (targetSB.getIndex())));\n            } \n            flowInto(targetSB);\n        }\n    } \n    for (int int = 0 ; i < (int) ; i++) {\n        org.mozilla.classfile.ExceptionTableEntry org.mozilla.classfile.ExceptionTableEntry = org.mozilla.classfile.ExceptionTableEntry[][i];\n        short short = ((short)(getLabelPC(ete.int)));\n        short short = ((short)(getLabelPC(ete.int)));\n        if ((bci < startPC) || (bci >= endPC)) {\n            continue;\n        } \n        short short = ((short)(getLabelPC(ete.int)));\n        org.mozilla.classfile.SuperBlock org.mozilla.classfile.SuperBlock = getSuperBlockFromOffset(handlerPC);\n        int int;\n        if ((ete.short) == 0) {\n            exceptionType = org.mozilla.classfile.TypeInfo.OBJECT(org.mozilla.classfile.ConstantPool.addClass(\"java/lang/Throwable\"));\n        } else {\n            exceptionType = org.mozilla.classfile.TypeInfo.OBJECT(ete.short);\n        }\n        sb.merge(int[], int, new int[]{ exceptionType }, 1, org.mozilla.classfile.ConstantPool);\n        addToWorkList(sb);\n    }\n}"},"status":-1},{"failures":[],"tindex":"09081315-8b2a-11e6-9273-0747d490bbbc","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Node:158","type":"CtReturnImpl","sourcecode":"return name"},"variableMap":{"name":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:807","type":"CtReturnImpl","sourcecode":"return node"},"status":-1},{"failures":[],"tindex":"09081316-8b2a-11e6-9273-4b0f6ed16138","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:1678","type":"CtIfImpl","sourcecode":"if (c == 'M') {\n    X = \"getUTCMinutes\";\n    id = org.mozilla.javascript.NativeDate.org.mozilla.javascript.NativeDate.int;\n} else if (c == 'S') {\n    X = \"getUTCSeconds\";\n    id = org.mozilla.javascript.NativeDate.org.mozilla.javascript.NativeDate.int;\n} "},"status":-1},{"failures":[],"tindex":"09081317-8b2a-11e6-9273-097915701aa4","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Interpreter:256","type":"CtIfImpl","sourcecode":"if (!((start <= pc) && (pc < end))) {\n    continue;\n} "},"variableMap":{"pc":"count","start":"count","end":"org.mozilla.javascript.Icode.Icode_LITERAL_NEW"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:1079","type":"CtInvocationImpl","sourcecode":"addIndexOp(org.mozilla.javascript.Icode.org.mozilla.javascript.Icode.int, count)"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
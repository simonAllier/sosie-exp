{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"4c67a589-89ac-11e6-aae5-31d329888ab4","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.RegExpImpl:649","type":"CtWhileImpl","sourcecode":"while ((i < length) && (!(java.lang.Character.isWhitespace(target.charAt(i)))))\n    i++;"},"variableMap":{"length":"continuationOp","i":"org.mozilla.javascript.regexp.NativeRegExp.INDEX_LEN","target":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:2192","type":"CtDoImpl","sourcecode":"do {\n    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n    if (!result) {\n        if ((state.int) == 0)\n            result = true;\n        \n        continuationPc = state.int;\n        continuationOp = state.int;\n        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n        break switchStatement;\n    } \n    if (((state.int) == 0) && ((gData.int) == (state.int))) {\n        result = false;\n        continuationPc = state.int;\n        continuationOp = state.int;\n        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n        break switchStatement;\n    } \n    int int = state.int;\n    int int = state.int;\n    if (new_min != 0)\n        new_min--;\n    \n    if (new_max != (-1))\n        new_max--;\n    \n    if (new_max == 0) {\n        result = true;\n        continuationPc = state.int;\n        continuationOp = state.int;\n        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n        break switchStatement;\n    } \n    nextpc = pc + (3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int));\n    nextop = program[nextpc];\n    int int = gData.int;\n    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(nextop)) {\n        nextpc++;\n        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, nextop, program, nextpc, end, true);\n        if (match < 0) {\n            result = new_min == 0;\n            continuationPc = state.int;\n            continuationOp = state.int;\n            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n            break switchStatement;\n        } \n        result = true;\n        nextpc = match;\n    } \n    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    continuationPc = pc;\n    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, startcp, null, state.int, state.int);\n    if (new_min == 0) {\n        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc, startcp, state.int, state.int);\n        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, (pc + (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)));\n        for (int int = 0 ; k < parenCount ; k++) {\n            gData.setParens((parenIndex + k), (-1), 0);\n        }\n    } \n} while ((program[nextpc]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte) )"},"status":-1},{"failures":[],"tindex":"4c67cc9a-89ac-11e6-aae5-c31b83468594","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Interpreter:570","type":"CtIfImpl","sourcecode":"if (!(org.mozilla.javascript.Icode.validBytecode(bytecode)))\n    throw org.mozilla.javascript.Kit.codeBug();\n"},"variableMap":{"bytecode":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaAdapter:991","type":"CtIfImpl","sourcecode":"if (!(parms[i].isPrimitive())) {\n    convertionMask |= 1 << i;\n} "},"status":-1},{"failures":[],"tindex":"4c67cc9b-89ac-11e6-aae5-5f046cb628dd","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.NativeFunction:101","type":"CtThrowImpl","sourcecode":"throw new org.mozilla.javascript.EvaluatorException(\"resumeGenerator() not implemented\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.typedarrays.NativeUint8ClampedArray:107","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-1},{"failures":[],"tindex":"4c67f3ac-89ac-11e6-aae5-8be6b684354e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:1824","type":"CtIfImpl","sourcecode":"if (o.equals(get(i))) {\n    return i;\n} "},"status":-1},{"failures":[],"tindex":"4c67f3ad-89ac-11e6-aae5-61f750dd6946","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:1293","type":"CtLocalVariableImpl","sourcecode":"final int int = 10"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:1697","type":"CtLocalVariableImpl","sourcecode":"int int = (sb.getEnd()) - 1"},"status":-1},{"failures":[],"tindex":"4c67f3ae-89ac-11e6-aae5-c1b3fce37406","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:3610","type":"CtReturnImpl","sourcecode":"return xmlObject.enterWith(scope)"},"variableMap":{"scope":"scope","xmlObject":"scope"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:2007","type":"CtReturnImpl","sourcecode":"return scope"},"status":-1},{"failures":[],"tindex":"4c67f3af-89ac-11e6-aae5-8f2f54d25aeb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:1256","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[],"tindex":"4c67f3b0-89ac-11e6-aae5-5343b1e24869","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:811","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:465","type":"CtLocalVariableImpl","sourcecode":"int int = getMaxInstanceId()"},"status":-1},{"failures":[],"tindex":"4c67f3b1-89ac-11e6-aae5-f35cf2ee282f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:5402","type":"CtIfImpl","sourcecode":"if (count > 2)\n    locals[(result + 2)] = 1;\n"},"status":-1},{"failures":[],"tindex":"4c681ac2-89ac-11e6-aae5-d1cc3d784b66","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeString:38","type":"CtInvocationImpl","sourcecode":"obj.exportAsJSClass(org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int, scope, sealed)"},"variableMap":{"obj":"scope","sealed":"sealed","scope":"scope","org.mozilla.javascript.NativeString.MAX_PROTOTYPE_ID":"org.mozilla.javascript.BaseFunction.MAX_PROTOTYPE_ID"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.BaseFunction:26","type":"CtInvocationImpl","sourcecode":"obj.exportAsJSClass(org.mozilla.javascript.BaseFunction.org.mozilla.javascript.BaseFunction.int, scope, sealed)"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
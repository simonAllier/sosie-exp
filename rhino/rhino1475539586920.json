{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"65000a23-89c6-11e6-8a58-5f8d0c16309d","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.DToA:94","type":"CtIfImpl","sourcecode":"if ((x & 65535) == 0) {\n    k = 16;\n    x >>>= 16;\n} "},"variableMap":{"x":"closeLabel","k":"closeLabel"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:2875","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.markLabel(closeLabel)"},"status":-1},{"failures":[],"tindex":"650476f4-89c6-11e6-8a58-85b3406a6e2c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ClassCache:123","type":"CtAssignmentImpl","sourcecode":"boolean = enabled"},"variableMap":{"cachingIsEnabled":"needsActivation","enabled":"needsActivation"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ast.FunctionNode:277","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[],"tindex":"650476f5-89c6-11e6-8a58-390425c96d6b","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ContextFactory:566","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Context.exit()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ast.FunctionNode:391","type":"CtInvocationImpl","sourcecode":"printList(java.util.List<org.mozilla.javascript.ast.AstNode>, sb)"},"status":-1},{"failures":[],"tindex":"650476f6-89c6-11e6-8a58-253b50a9296d","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.RegExpImpl:168","type":"CtAssignmentImpl","sourcecode":"re.java.lang.Object = 0.0"},"variableMap":{"re":"result","lastIndex":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:1914","type":"CtAssignmentImpl","sourcecode":"result = org.mozilla.javascript.ScriptRuntime.topScopeName(cx, scope, name)"},"status":-1},{"failures":[],"tindex":"65049e07-89c6-11e6-8a58-d942898ca9ec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1970","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n        result = match >= 0;\n        if (result)\n            pc = match;\n        \n    } else {\n        switchStatement : switch (op) {\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    if ((gData.int) == end) {\n                        result = false;\n                        break;\n                    } \n                    char char = input.charAt(gData.int);\n                    if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                        if ((c != matchCh1) && (!(org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][matchCh2], c)))) {\n                            result = false;\n                            break;\n                        } \n                    } else {\n                        if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))\n                            c = org.mozilla.javascript.regexp.NativeRegExp.upcase(c);\n                        \n                        if ((c != matchCh1) && (c != matchCh2)) {\n                            result = false;\n                            break;\n                        } \n                    }\n                }\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    op = program[(pc++)];\n                    int int = gData.int;\n                    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n                        if (match < 0) {\n                            op = program[(nextpc++)];\n                            pc = nextpc;\n                            continue;\n                        } \n                        result = true;\n                        pc = match;\n                        op = program[(pc++)];\n                    } \n                    byte byte = program[(nextpc++)];\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, nextop, nextpc, startcp, continuationOp, continuationPc);\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                    pc += offset;\n                    op = program[(pc++)];\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    gData.setParens(parenIndex, gData.int, 0);\n                    op = program[(pc++)];\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    int int = gData.parensIndex(parenIndex);\n                    gData.setParens(parenIndex, cap_index, ((gData.int) - cap_index));\n                    op = program[(pc++)];\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    op = program[(pc++)];\n                    if ((org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) && ((org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false)) < 0)) {\n                        result = false;\n                        break;\n                    } \n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    op = program[(pc++)];\n                    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false);\n                        if ((match >= 0) && ((program[match]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) {\n                            result = false;\n                            break;\n                        } \n                    } \n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    gData.int = state.int;\n                    gData.org.mozilla.javascript.regexp.REBackTrackData = state.org.mozilla.javascript.regexp.REBackTrackData;\n                    continuationPc = state.int;\n                    continuationOp = state.int;\n                    if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                        result = !result;\n                    } \n                }\n                break;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int;\n                    int int;\n                    boolean boolean = false;\n                    switch (op) {\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            greedy = true;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            min = 0;\n                            max = -1;\n                            break;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            greedy = true;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            min = 1;\n                            max = -1;\n                            break;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            greedy = true;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            min = 0;\n                            max = 1;\n                            break;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            greedy = true;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            min = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                            max = (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc)) - 1;\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                            break;\n                        default :\n                            throw org.mozilla.javascript.Kit.codeBug();\n                    }\n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, min, max, gData.int, null, continuationOp, continuationPc);\n                    if (greedy) {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        op = program[(pc++)];\n                    } else {\n                        if (min != 0) {\n                            continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                            continuationPc = pc;\n                            pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            op = program[(pc++)];\n                        } else {\n                            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                            org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                            op = program[(pc++)];\n                        }\n                    }\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                result = true;\n                pc = continuationPc;\n                op = continuationOp;\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int;\n                    int int;\n                    do {\n                        org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                        if (!result) {\n                            if ((state.int) == 0)\n                                result = true;\n                            \n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                            result = false;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        int int = state.int;\n                        int int = state.int;\n                        if (new_min != 0)\n                            new_min--;\n                        \n                        if (new_max != (-1))\n                            new_max--;\n                        \n                        if (new_max == 0) {\n                            result = true;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        nextpc = pc + (3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int));\n                        nextop = program[nextpc];\n                        int int = gData.int;\n                        if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(nextop)) {\n                            nextpc++;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, nextop, program, nextpc, end, true);\n                            if (match < 0) {\n                                result = new_min == 0;\n                                continuationPc = state.int;\n                                continuationOp = state.int;\n                                pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                                pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                                break switchStatement;\n                            } \n                            result = true;\n                            nextpc = match;\n                        } \n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, startcp, null, state.int, state.int);\n                        if (new_min == 0) {\n                            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc, startcp, state.int, state.int);\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, (pc + (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)));\n                            for (int int = 0 ; k < parenCount ; k++) {\n                                gData.setParens((parenIndex + k), (-1), 0);\n                            }\n                        } \n                    } while ((program[nextpc]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte) );\n                    pc = nextpc;\n                    op = program[(pc++)];\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    if (!result) {\n                        if (((state.int) == (-1)) || ((state.int) > 0)) {\n                            org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, state.int, state.int, gData.int, null, state.int, state.int);\n                            continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                            continuationPc = pc;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            for (int int = 0 ; k < parenCount ; k++) {\n                                gData.setParens((parenIndex + k), (-1), 0);\n                            }\n                            op = program[(pc++)];\n                            continue;\n                        } else {\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            break;\n                        }\n                    } else {\n                        if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                            result = false;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            break;\n                        } \n                        int int = state.int;\n                        int int = state.int;\n                        if (new_min != 0)\n                            new_min--;\n                        \n                        if (new_max != (-1))\n                            new_max--;\n                        \n                        org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, gData.int, null, state.int, state.int);\n                        if (new_min != 0) {\n                            continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                            continuationPc = pc;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            for (int int = 0 ; k < parenCount ; k++) {\n                                gData.setParens((parenIndex + k), (-1), 0);\n                            }\n                            op = program[(pc++)];\n                        } else {\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                            org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                            op = program[(pc++)];\n                        }\n                        continue;\n                    }\n                }\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                return true;\n            default :\n                throw org.mozilla.javascript.Kit.codeBug(\"invalid bytecode\");\n        }\n    }\n    if (!result) {\n        org.mozilla.javascript.regexp.REBackTrackData org.mozilla.javascript.regexp.REBackTrackData = gData.org.mozilla.javascript.regexp.REBackTrackData;\n        if (backTrackData != null) {\n            gData.org.mozilla.javascript.regexp.REBackTrackData = backTrackData.org.mozilla.javascript.regexp.REBackTrackData;\n            gData.long[] = backTrackData.long[];\n            gData.int = backTrackData.int;\n            gData.org.mozilla.javascript.regexp.REProgState = backTrackData.org.mozilla.javascript.regexp.REProgState;\n            continuationOp = backTrackData.int;\n            continuationPc = backTrackData.int;\n            pc = backTrackData.int;\n            op = backTrackData.int;\n            continue;\n        } else\n            return false;\n        \n    } \n    op = program[(pc++)];\n}"},"status":-1},{"failures":[],"tindex":"65056158-89c6-11e6-8a58-17a53b596548","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:2158","type":"CtReturnImpl","sourcecode":"return nodeIndex + (org.mozilla.javascript.optimizer.BodyCodegen.org.mozilla.javascript.optimizer.BodyCodegen.int)"},"variableMap":{"org.mozilla.javascript.optimizer.BodyCodegen.GENERATOR_YIELD_START":"org.mozilla.javascript.Token.RSH","nodeIndex":"org.mozilla.javascript.Token.RSH"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:728","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int"},"status":-1},{"failures":[],"tindex":"65058869-89c6-11e6-8a58-f3a2c710bda1","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Parser:3586","type":"CtLocalVariableImpl","sourcecode":"char[] char[] = new char[1024]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeGlobal:443","type":"CtLocalVariableImpl","sourcecode":"char[] char[] = s.toCharArray()"},"status":-1},{"failures":[],"tindex":"6505886a-89c6-11e6-8a58-bb2b0d796ff5","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:362","type":"CtIfImpl","sourcecode":"if (handlerPC == (-1))\n    throw new java.lang.IllegalStateException(\"handler label not defined\");\n"},"variableMap":{"handlerPC":"itsSourceFileNameIndex"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:2741","type":"CtIfImpl","sourcecode":"if ((short) != 0) {\n    org.mozilla.classfile.ConstantPool.addUtf8(\"SourceFile\");\n} "},"status":-1},{"failures":[],"tindex":"6505886b-89c6-11e6-8a58-2b3ec74c3335","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.typedarrays.NativeTypedArrayView:223","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.Math.max(0, (end - start))"},"variableMap":{"start":"constructorId","end":"constructorId"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:624","type":"CtLocalVariableImpl","sourcecode":"int int = org.mozilla.javascript.IdScriptableObject.PrototypeValues.int"},"status":-1},{"failures":[],"tindex":"6505af7c-89c6-11e6-8a58-9bddfe14c079","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4205","type":"CtOperatorAssignmentImpl","sourcecode":"read += c"},"variableMap":{"read":"id","c":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:1678","type":"CtAssignmentImpl","sourcecode":"id = org.mozilla.javascript.NativeDate.org.mozilla.javascript.NativeDate.int"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
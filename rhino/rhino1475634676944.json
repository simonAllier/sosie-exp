{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"cae27641-8aa3-11e6-84f7-b11a8c9878b2","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptableObject:381","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.ScriptableObject.Slot.markDeleted()"},"variableMap":{"slot":"temp2"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:978","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.NativeArray.setRawElem(cx, thisObj, i, temp2)"},"status":-1},{"failures":[],"tindex":"cae29d52-8aa3-11e6-84f7-e9a93fe04e6b","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.DToA:286","type":"CtLocalVariableImpl","sourcecode":"int int = -((word0 >>> (org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int)) & ((org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int) >> (org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int)))"},"variableMap":{"org.mozilla.javascript.DToA.Exp_mask":"d","word0":"d","org.mozilla.javascript.DToA.Exp_shift1":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:501","type":"CtLocalVariableImpl","sourcecode":"int int = d / 30"},"status":-1},{"failures":[],"tindex":"cae29d53-8aa3-11e6-84f7-b79606ea62c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1066","type":"CtIfImpl","sourcecode":"if ((src[state.int]) == ']') {\n    state.org.mozilla.javascript.regexp.RENode.int = (state.int) - termStart;\n    break;\n} "},"status":-1},{"failures":[],"tindex":"cae29d54-8aa3-11e6-84f7-472f09cdada6","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.ConditionalExpression:117","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.ast.ConditionalExpression.this.int = questionMarkPosition"},"variableMap":{"questionMarkPosition":"commentCursor"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:1570","type":"CtAssignmentImpl","sourcecode":"int = (int) - 1"},"status":-1},{"failures":[],"tindex":"cae29d55-8aa3-11e6-84f7-5d1d1ef48bb9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeGlobal:291","type":"CtIfImpl","sourcecode":"if (c == 'I') {\n    if (((i + 8) <= len) && (s.regionMatches(i, \"Infinity\", 0, 8))) {\n        double double;\n        if ((s.charAt(start)) == '-') {\n            d = java.lang.Double.java.lang.Double.double;\n        } else {\n            d = java.lang.Double.java.lang.Double.double;\n        }\n        return org.mozilla.javascript.ScriptRuntime.wrapNumber(d);\n    } \n    return org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.java.lang.Double;\n} "},"status":-1},{"failures":[],"tindex":"cae29d56-8aa3-11e6-84f7-bf4d5a11d296","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:2850","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.addLoadConstant(((top - i) - 1))"},"variableMap":{"top":"index","cfw":"value","i":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Arguments:322","type":"CtIfImpl","sourcecode":"if (sharedWithActivation(index)) {\n    value = getFromActivation(index);\n} "},"status":-1},{"failures":[],"tindex":"cae29d57-8aa3-11e6-84f7-531c9d47d38c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeGlobal:156","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.NativeNumber.isFinite(args[0])"},"variableMap":{"args":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Arguments:111","type":"CtIfImpl","sourcecode":"if (sharedWithActivation(index)) {\n    return getFromActivation(index);\n} else {\n    return value;\n}"},"status":-1},{"failures":[],"tindex":"cae2c468-8aa3-11e6-84f7-b379d735860f","series":0,"name":"add","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4981","type":"CtReturnImpl","sourcecode":"return typeInfo & 255"},"variableMap":{"typeInfo":"org.mozilla.javascript.NativeJavaObject.JSTYPE_NUMBER"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeJavaObject:421","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.NativeJavaObject.org.mozilla.javascript.NativeJavaObject.int"},"status":-1},{"failures":[],"tindex":"cae2c469-8aa3-11e6-84f7-1f3a92b7268f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.OptRuntime:92","type":"CtIfImpl","sourcecode":"if (!(val1 instanceof java.lang.CharSequence))\n    return org.mozilla.javascript.optimizer.OptRuntime.wrapDouble(((org.mozilla.javascript.ScriptRuntime.toNumber(val1)) + val2));\n"},"status":-1},{"failures":[],"tindex":"cae2c46a-8aa3-11e6-84f7-bd5f06fc77da","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptRuntime:630","type":"CtIfImpl","sourcecode":"if ((start + 2) < len) {\n    int int = s.charAt((start + 1));\n    if ((c1 == 'x') || (c1 == 'X')) {\n        return org.mozilla.javascript.ScriptRuntime.stringToNumber(s, (start + 2), 16);\n    } \n} "},"variableMap":{"s":"s","len":"radix","start":"radix"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:489","type":"CtIfImpl","sourcecode":"if (sum >= 9.007199254740992E15) {\n    if (radix == 10) {\n        try {\n            return java.lang.Double.parseDouble(s.substring(start, end));\n        } catch (java.lang.NumberFormatException nfe) {\n            return org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.double;\n        }\n    } else if (((((radix == 2) || (radix == 4)) || (radix == 8)) || (radix == 16)) || (radix == 32)) {\n        int int = 1;\n        int int = 0;\n        final int int = 0;\n        final int int = 1;\n        final int int = 2;\n        final int int = 3;\n        final int int = 4;\n        int int = SKIP_LEADING_ZEROS;\n        int int = 53;\n        double double = 0.0;\n        boolean boolean = false;\n        boolean boolean = false;\n        for ( ;  ; ) {\n            if (bitShiftInChar == 1) {\n                if (start == end)\n                    break;\n                \n                digit = s.charAt((start++));\n                if (('0' <= digit) && (digit <= '9'))\n                    digit -= '0';\n                else if (('a' <= digit) && (digit <= 'z'))\n                    digit -= 'a' - 10;\n                else\n                    digit -= 'A' - 10;\n                \n                bitShiftInChar = radix;\n            } \n            bitShiftInChar >>= 1;\n            boolean boolean = (digit & bitShiftInChar) != 0;\n            switch (state) {\n                case SKIP_LEADING_ZEROS :\n                    if (bit) {\n                        --exactBitsLimit;\n                        sum = 1.0;\n                        state = FIRST_EXACT_53_BITS;\n                    } \n                    break;\n                case FIRST_EXACT_53_BITS :\n                    sum *= 2.0;\n                    if (bit)\n                        sum += 1.0;\n                    \n                    --exactBitsLimit;\n                    if (exactBitsLimit == 0) {\n                        bit53 = bit;\n                        state = AFTER_BIT_53;\n                    } \n                    break;\n                case AFTER_BIT_53 :\n                    bit54 = bit;\n                    factor = 2.0;\n                    state = ZEROS_AFTER_54;\n                    break;\n                case ZEROS_AFTER_54 :\n                    if (bit) {\n                        state = MIXED_AFTER_54;\n                    } \n                case MIXED_AFTER_54 :\n                    factor *= 2;\n                    break;\n            }\n        }\n        switch (state) {\n            case SKIP_LEADING_ZEROS :\n                sum = 0.0;\n                break;\n            case FIRST_EXACT_53_BITS :\n            case AFTER_BIT_53 :\n                break;\n            case ZEROS_AFTER_54 :\n                if (bit54 & bit53)\n                    sum += 1.0;\n                \n                sum *= factor;\n                break;\n            case MIXED_AFTER_54 :\n                if (bit54)\n                    sum += 1.0;\n                \n                sum *= factor;\n                break;\n        }\n    } \n} "},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"f2679a1c-8b4c-11e6-894e-f1e95dbc422e","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.v8dtoa.DiyFp:88","type":"CtLocalVariableImpl","sourcecode":"final long long = 4294967295L"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeMath:373","type":"CtLocalVariableImpl","sourcecode":"long long = org.mozilla.javascript.typedarrays.Conversions.toUint32(args[0])"},"status":-1},{"failures":[],"tindex":"f2679a1d-8b4c-11e6-894e-e18178d1839e","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Node:403","type":"CtSwitchImpl","sourcecode":"switch (propType) {\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"function\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"local\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"local_block\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"regexp\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"casearray\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"targetblock\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"variable\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"isnumber\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"directcall\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"specialcall\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"skip_indexes\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"object_ids_prop\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"incrdecr_prop\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"catch_scope_prop\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"label_id_prop\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"member_type_prop\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"name_prop\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"control_block_prop\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"parenthesized_prop\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"generator_end\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"destructuring_array_length\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"destructuring_names\";\n    case org.mozilla.javascript.Node.org.mozilla.javascript.Node.int :\n        return \"destructuring_params\";\n    default :\n        org.mozilla.javascript.Kit.codeBug();\n}"},"variableMap":{"org.mozilla.javascript.Node.LOCAL_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.REGEXP_PROP":"id","org.mozilla.javascript.Node.SPECIALCALL_PROP":"org.mozilla.javascript.Arguments.Id_caller","org.mozilla.javascript.Node.SKIP_INDEXES_PROP":"org.mozilla.javascript.Arguments.Id_callee","org.mozilla.javascript.Node.GENERATOR_END_PROP":"id","org.mozilla.javascript.Node.MEMBER_TYPE_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.LOCAL_BLOCK_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.VARIABLE_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.PARENTHESIZED_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.ISNUMBER_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.DESTRUCTURING_ARRAY_LENGTH":"id","org.mozilla.javascript.Node.OBJECT_IDS_PROP":"id","org.mozilla.javascript.Node.CONTROL_BLOCK_PROP":"org.mozilla.javascript.Arguments.Id_caller","org.mozilla.javascript.Node.DESTRUCTURING_NAMES":"org.mozilla.javascript.Arguments.Id_caller","org.mozilla.javascript.Node.CATCH_SCOPE_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.LABEL_ID_PROP":"org.mozilla.javascript.Arguments.Id_caller","org.mozilla.javascript.Node.NAME_PROP":"org.mozilla.javascript.Arguments.Id_caller","org.mozilla.javascript.Node.DIRECTCALL_PROP":"org.mozilla.javascript.Arguments.Id_callee","org.mozilla.javascript.Node.INCRDECR_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.FUNCTION_PROP":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.TARGETBLOCK_PROP":"id","propType":"org.mozilla.javascript.Arguments.Id_length","org.mozilla.javascript.Node.CASEARRAY_PROP":"org.mozilla.javascript.Arguments.Id_callee","org.mozilla.javascript.Node.DESTRUCTURING_PARAMS":"org.mozilla.javascript.Arguments.Id_length"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Arguments:214","type":"CtSwitchImpl","sourcecode":"switch (id) {\n    case org.mozilla.javascript.Arguments.org.mozilla.javascript.Arguments.int :\n        return \"callee\";\n    case org.mozilla.javascript.Arguments.org.mozilla.javascript.Arguments.int :\n        return \"length\";\n    case org.mozilla.javascript.Arguments.org.mozilla.javascript.Arguments.int :\n        return \"caller\";\n}"},"status":-1},{"failures":[],"tindex":"f267c12e-8b4c-11e6-894e-e7e3f21f805b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:1498","type":"CtIfImpl","sourcecode":"if ((args.int) == 0) {\n    return org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.double;\n} "},"status":-1},{"failures":[],"tindex":"f267c12f-8b4c-11e6-894e-193112057c0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1970","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n        result = match >= 0;\n        if (result)\n            pc = match;\n        \n    } else {\n        switchStatement : switch (op) {\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    if ((gData.int) == end) {\n                        result = false;\n                        break;\n                    } \n                    char char = input.charAt(gData.int);\n                    if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                        if ((c != matchCh1) && (!(org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][matchCh2], c)))) {\n                            result = false;\n                            break;\n                        } \n                    } else {\n                        if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))\n                            c = org.mozilla.javascript.regexp.NativeRegExp.upcase(c);\n                        \n                        if ((c != matchCh1) && (c != matchCh2)) {\n                            result = false;\n                            break;\n                        } \n                    }\n                }\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    op = program[(pc++)];\n                    int int = gData.int;\n                    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n                        if (match < 0) {\n                            op = program[(nextpc++)];\n                            pc = nextpc;\n                            continue;\n                        } \n                        result = true;\n                        pc = match;\n                        op = program[(pc++)];\n                    } \n                    byte byte = program[(nextpc++)];\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, nextop, nextpc, startcp, continuationOp, continuationPc);\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                    pc += offset;\n                    op = program[(pc++)];\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    gData.setParens(parenIndex, gData.int, 0);\n                    op = program[(pc++)];\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    int int = gData.parensIndex(parenIndex);\n                    gData.setParens(parenIndex, cap_index, ((gData.int) - cap_index));\n                    op = program[(pc++)];\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    op = program[(pc++)];\n                    if ((org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) && ((org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false)) < 0)) {\n                        result = false;\n                        break;\n                    } \n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    op = program[(pc++)];\n                    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false);\n                        if ((match >= 0) && ((program[match]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) {\n                            result = false;\n                            break;\n                        } \n                    } \n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    gData.int = state.int;\n                    gData.org.mozilla.javascript.regexp.REBackTrackData = state.org.mozilla.javascript.regexp.REBackTrackData;\n                    continuationPc = state.int;\n                    continuationOp = state.int;\n                    if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                        result = !result;\n                    } \n                }\n                break;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int;\n                    int int;\n                    boolean boolean = false;\n                    switch (op) {\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            greedy = true;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            min = 0;\n                            max = -1;\n                            break;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            greedy = true;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            min = 1;\n                            max = -1;\n                            break;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            greedy = true;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            min = 0;\n                            max = 1;\n                            break;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            greedy = true;\n                        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                            min = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                            max = (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc)) - 1;\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                            break;\n                        default :\n                            throw org.mozilla.javascript.Kit.codeBug();\n                    }\n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, min, max, gData.int, null, continuationOp, continuationPc);\n                    if (greedy) {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        op = program[(pc++)];\n                    } else {\n                        if (min != 0) {\n                            continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                            continuationPc = pc;\n                            pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            op = program[(pc++)];\n                        } else {\n                            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                            org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                            op = program[(pc++)];\n                        }\n                    }\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                result = true;\n                pc = continuationPc;\n                op = continuationOp;\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    int int;\n                    int int;\n                    do {\n                        org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                        if (!result) {\n                            if ((state.int) == 0)\n                                result = true;\n                            \n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                            result = false;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        int int = state.int;\n                        int int = state.int;\n                        if (new_min != 0)\n                            new_min--;\n                        \n                        if (new_max != (-1))\n                            new_max--;\n                        \n                        if (new_max == 0) {\n                            result = true;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        nextpc = pc + (3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int));\n                        nextop = program[nextpc];\n                        int int = gData.int;\n                        if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(nextop)) {\n                            nextpc++;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, nextop, program, nextpc, end, true);\n                            if (match < 0) {\n                                result = new_min == 0;\n                                continuationPc = state.int;\n                                continuationOp = state.int;\n                                pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                                pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                                break switchStatement;\n                            } \n                            result = true;\n                            nextpc = match;\n                        } \n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, startcp, null, state.int, state.int);\n                        if (new_min == 0) {\n                            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc, startcp, state.int, state.int);\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, (pc + (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)));\n                            for (int int = 0 ; k < parenCount ; k++) {\n                                gData.setParens((parenIndex + k), (-1), 0);\n                            }\n                        } \n                    } while ((program[nextpc]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte) );\n                    pc = nextpc;\n                    op = program[(pc++)];\n                }\n                continue;\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                {\n                    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    if (!result) {\n                        if (((state.int) == (-1)) || ((state.int) > 0)) {\n                            org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, state.int, state.int, gData.int, null, state.int, state.int);\n                            continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                            continuationPc = pc;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            for (int int = 0 ; k < parenCount ; k++) {\n                                gData.setParens((parenIndex + k), (-1), 0);\n                            }\n                            op = program[(pc++)];\n                            continue;\n                        } else {\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            break;\n                        }\n                    } else {\n                        if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                            result = false;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            break;\n                        } \n                        int int = state.int;\n                        int int = state.int;\n                        if (new_min != 0)\n                            new_min--;\n                        \n                        if (new_max != (-1))\n                            new_max--;\n                        \n                        org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, gData.int, null, state.int, state.int);\n                        if (new_min != 0) {\n                            continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                            continuationPc = pc;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            for (int int = 0 ; k < parenCount ; k++) {\n                                gData.setParens((parenIndex + k), (-1), 0);\n                            }\n                            op = program[(pc++)];\n                        } else {\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                            org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                            op = program[(pc++)];\n                        }\n                        continue;\n                    }\n                }\n            case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                return true;\n            default :\n                throw org.mozilla.javascript.Kit.codeBug(\"invalid bytecode\");\n        }\n    }\n    if (!result) {\n        org.mozilla.javascript.regexp.REBackTrackData org.mozilla.javascript.regexp.REBackTrackData = gData.org.mozilla.javascript.regexp.REBackTrackData;\n        if (backTrackData != null) {\n            gData.org.mozilla.javascript.regexp.REBackTrackData = backTrackData.org.mozilla.javascript.regexp.REBackTrackData;\n            gData.long[] = backTrackData.long[];\n            gData.int = backTrackData.int;\n            gData.org.mozilla.javascript.regexp.REProgState = backTrackData.org.mozilla.javascript.regexp.REProgState;\n            continuationOp = backTrackData.int;\n            continuationPc = backTrackData.int;\n            pc = backTrackData.int;\n            op = backTrackData.int;\n            continue;\n        } else\n            return false;\n        \n    } \n    op = program[(pc++)];\n}"},"status":-1},{"failures":[],"tindex":"f2683660-8b4c-11e6-894e-bbc90ba4e033","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ScriptableObject:1053","type":"CtIfImpl","sourcecode":"if (u instanceof java.lang.String)\n    return u;\n"},"variableMap":{"u":"target"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.InterfaceAdapter:97","type":"CtIfImpl","sourcecode":"if (target instanceof org.mozilla.javascript.Callable) {\n    function = ((org.mozilla.javascript.Callable)(target));\n} else {\n    org.mozilla.javascript.Scriptable org.mozilla.javascript.Scriptable = ((org.mozilla.javascript.Scriptable)(target));\n    java.lang.String java.lang.String = method.getName();\n    java.lang.Object java.lang.Object = org.mozilla.javascript.ScriptableObject.getProperty(s, methodName);\n    if (value == (org.mozilla.javascript.ScriptableObject.org.mozilla.javascript.ScriptableObject.java.lang.Object)) {\n        org.mozilla.javascript.Context.reportWarning(org.mozilla.javascript.ScriptRuntime.getMessage1(\"msg.undefined.function.interface\", methodName));\n        java.lang.Class<?> java.lang.Class<?> = method.getReturnType();\n        if (resultType == (java.lang.Void.java.lang.Void.java.lang.Class<java.lang.Void>)) {\n            return null;\n        } else {\n            return org.mozilla.javascript.Context.jsToJava(null, resultType);\n        }\n    } \n    if (!(value instanceof org.mozilla.javascript.Callable)) {\n        throw org.mozilla.javascript.Context.reportRuntimeError1(\"msg.not.function.interface\", methodName);\n    } \n    function = ((org.mozilla.javascript.Callable)(value));\n}"},"status":-1},{"failures":[],"tindex":"f2683661-8b4c-11e6-894e-9b9703231b45","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:903","type":"CtIfImpl","sourcecode":"if (value instanceof java.lang.Boolean) {\n    return org.mozilla.javascript.ScriptRuntime.toString(value);\n} "},"status":-1},{"failures":[],"tindex":"f2685d72-8b4c-11e6-894e-fd5aecef12e4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:1421","type":"CtInvocationImpl","sourcecode":"statements.addChildToBack(new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))"},"status":-1},{"failures":[],"tindex":"f2685d73-8b4c-11e6-894e-5d324cf00558","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaMembers:667","type":"CtForEachImpl","sourcecode":"for (java.lang.reflect.Field java.lang.reflect.Field : declared) {\n    int int = field.getModifiers();\n    if ((includePrivate || (java.lang.reflect.Modifier.isPublic(mod))) || (java.lang.reflect.Modifier.isProtected(mod))) {\n        if (!(field.isAccessible()))\n            field.setAccessible(true);\n        \n        fieldsList.add(field);\n    } \n}"},"status":-1}],"header":{"groupId":"r","transformationCount":8,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
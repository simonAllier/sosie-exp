{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"502d3410-8b6b-11e6-804b-afec71a9dced","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.BaseFunction:522","type":"CtInvocationImpl","sourcecode":"sourceBuf.append(',')"},"variableMap":{"sourceBuf":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:985","type":"CtInvocationImpl","sourcecode":"result.append('}')"},"status":-1},{"failures":[],"tindex":"502d5b21-8b6b-11e6-804b-b782ff0d3969","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.FunctionObject:145","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?> = org.mozilla.javascript.MemberBox.getDeclaringClass()"},"variableMap":{"member":"bytecode"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:85","type":"CtLocalVariableImpl","sourcecode":"java.lang.Class<?> java.lang.Class<?> = defineClass(bytecode, staticSecurityDomain)"},"status":-1},{"failures":[],"tindex":"502d8232-8b6b-11e6-804b-974f3e19dad1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.FastDtoa:238","type":"CtAssignmentImpl","sourcecode":"power = 1000"},"status":-1},{"failures":[],"tindex":"502d8233-8b6b-11e6-804b-01e806a7fe1f","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Parser:1649","type":"CtReturnImpl","sourcecode":"return ((before & mask) != mask) && ((after & mask) == mask)"},"variableMap":{"before":"pc","after":"pc","mask":"min"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1979","type":"CtSwitchImpl","sourcecode":"switchStatement : switch (op) {\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) == end) {\n                result = false;\n                break;\n            } \n            char char = input.charAt(gData.int);\n            if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                if ((c != matchCh1) && (!(org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][matchCh2], c)))) {\n                    result = false;\n                    break;\n                } \n            } else {\n                if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))\n                    c = org.mozilla.javascript.regexp.NativeRegExp.upcase(c);\n                \n                if ((c != matchCh1) && (c != matchCh2)) {\n                    result = false;\n                    break;\n                } \n            }\n        }\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            op = program[(pc++)];\n            int int = gData.int;\n            if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n                if (match < 0) {\n                    op = program[(nextpc++)];\n                    pc = nextpc;\n                    continue;\n                } \n                result = true;\n                pc = match;\n                op = program[(pc++)];\n            } \n            byte byte = program[(nextpc++)];\n            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, nextop, nextpc, startcp, continuationOp, continuationPc);\n        }\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            int int = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n            pc += offset;\n            op = program[(pc++)];\n        }\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            gData.setParens(parenIndex, gData.int, 0);\n            op = program[(pc++)];\n        }\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            int int = gData.parensIndex(parenIndex);\n            gData.setParens(parenIndex, cap_index, ((gData.int) - cap_index));\n            op = program[(pc++)];\n        }\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            op = program[(pc++)];\n            if ((org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) && ((org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false)) < 0)) {\n                result = false;\n                break;\n            } \n            org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n        }\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            op = program[(pc++)];\n            if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false);\n                if ((match >= 0) && ((program[match]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) {\n                    result = false;\n                    break;\n                } \n            } \n            org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n            org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n        }\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n            gData.int = state.int;\n            gData.org.mozilla.javascript.regexp.REBackTrackData = state.org.mozilla.javascript.regexp.REBackTrackData;\n            continuationPc = state.int;\n            continuationOp = state.int;\n            if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                result = !result;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            int int;\n            int int;\n            boolean boolean = false;\n            switch (op) {\n                case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                    greedy = true;\n                case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                    min = 0;\n                    max = -1;\n                    break;\n                case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                    greedy = true;\n                case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                    min = 1;\n                    max = -1;\n                    break;\n                case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                    greedy = true;\n                case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                    min = 0;\n                    max = 1;\n                    break;\n                case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                    greedy = true;\n                case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                    min = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    max = (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc)) - 1;\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    break;\n                default :\n                    throw org.mozilla.javascript.Kit.codeBug();\n            }\n            org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, min, max, gData.int, null, continuationOp, continuationPc);\n            if (greedy) {\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                continuationPc = pc;\n                pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                op = program[(pc++)];\n            } else {\n                if (min != 0) {\n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    op = program[(pc++)];\n                } else {\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                    org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                    op = program[(pc++)];\n                }\n            }\n        }\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = true;\n        pc = continuationPc;\n        op = continuationOp;\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            int int;\n            int int;\n            do {\n                org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                if (!result) {\n                    if ((state.int) == 0)\n                        result = true;\n                    \n                    continuationPc = state.int;\n                    continuationOp = state.int;\n                    pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                    break switchStatement;\n                } \n                if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                    result = false;\n                    continuationPc = state.int;\n                    continuationOp = state.int;\n                    pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                    break switchStatement;\n                } \n                int int = state.int;\n                int int = state.int;\n                if (new_min != 0)\n                    new_min--;\n                \n                if (new_max != (-1))\n                    new_max--;\n                \n                if (new_max == 0) {\n                    result = true;\n                    continuationPc = state.int;\n                    continuationOp = state.int;\n                    pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                    break switchStatement;\n                } \n                nextpc = pc + (3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int));\n                nextop = program[nextpc];\n                int int = gData.int;\n                if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(nextop)) {\n                    nextpc++;\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, nextop, program, nextpc, end, true);\n                    if (match < 0) {\n                        result = new_min == 0;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    result = true;\n                    nextpc = match;\n                } \n                continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                continuationPc = pc;\n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, startcp, null, state.int, state.int);\n                if (new_min == 0) {\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc, startcp, state.int, state.int);\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, (pc + (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)));\n                    for (int int = 0 ; k < parenCount ; k++) {\n                        gData.setParens((parenIndex + k), (-1), 0);\n                    }\n                } \n            } while ((program[nextpc]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte) );\n            pc = nextpc;\n            op = program[(pc++)];\n        }\n        continue;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n            if (!result) {\n                if (((state.int) == (-1)) || ((state.int) > 0)) {\n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, state.int, state.int, gData.int, null, state.int, state.int);\n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    for (int int = 0 ; k < parenCount ; k++) {\n                        gData.setParens((parenIndex + k), (-1), 0);\n                    }\n                    op = program[(pc++)];\n                    continue;\n                } else {\n                    continuationPc = state.int;\n                    continuationOp = state.int;\n                    break;\n                }\n            } else {\n                if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                    result = false;\n                    continuationPc = state.int;\n                    continuationOp = state.int;\n                    break;\n                } \n                int int = state.int;\n                int int = state.int;\n                if (new_min != 0)\n                    new_min--;\n                \n                if (new_max != (-1))\n                    new_max--;\n                \n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, gData.int, null, state.int, state.int);\n                if (new_min != 0) {\n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                    pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    for (int int = 0 ; k < parenCount ; k++) {\n                        gData.setParens((parenIndex + k), (-1), 0);\n                    }\n                    op = program[(pc++)];\n                } else {\n                    continuationPc = state.int;\n                    continuationOp = state.int;\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                    org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                    op = program[(pc++)];\n                }\n                continue;\n            }\n        }\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        return true;\n    default :\n        throw org.mozilla.javascript.Kit.codeBug(\"invalid bytecode\");\n}"},"status":-1},{"failures":[],"tindex":"502df764-8b6b-11e6-804b-abfa61eedc1c","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExpCtor:35","type":"CtReturnImpl","sourcecode":"return \"RegExp\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ast.ScriptNode:220","type":"CtReturnImpl","sourcecode":"return java.lang.String[][index]"},"status":-1},{"failures":[],"tindex":"502df765-8b6b-11e6-804b-6376fc70719d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:348","type":"CtInvocationImpl","sourcecode":"cfw.addALoad(1)"},"status":-1},{"failures":[],"tindex":"502df766-8b6b-11e6-804b-b18400deb0a2","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeString:38","type":"CtInvocationImpl","sourcecode":"obj.exportAsJSClass(org.mozilla.javascript.NativeString.org.mozilla.javascript.NativeString.int, scope, sealed)"},"variableMap":{"obj":"scope","sealed":"sealed","scope":"scope","org.mozilla.javascript.NativeString.MAX_PROTOTYPE_ID":"org.mozilla.javascript.NativeScript.MAX_PROTOTYPE_ID"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeScript:32","type":"CtInvocationImpl","sourcecode":"obj.exportAsJSClass(org.mozilla.javascript.NativeScript.org.mozilla.javascript.NativeScript.int, scope, sealed)"},"status":-1},{"failures":[],"tindex":"502e1e77-8b6b-11e6-804b-e54005028fc7","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Codegen:4387","type":"CtInvocationImpl","sourcecode":"org.mozilla.classfile.ClassFileWriter.addPush(1.0)"},"variableMap":{"cfw":"cfw"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:360","type":"CtInvocationImpl","sourcecode":"cfw.addALoad(2)"},"status":-1},{"failures":[],"tindex":"502e1e78-8b6b-11e6-804b-d55b60e8f196","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.IRFactory:1437","type":"CtInvocationImpl","sourcecode":"((org.mozilla.javascript.ast.Jump)(loopLabel)).setLoop(result)"},"variableMap":{"loopLabel":"vars","result":"vars"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:786","type":"CtInvocationImpl","sourcecode":"node.addChildToBack(vars)"},"status":-1},{"failures":[],"tindex":"502e1e79-8b6b-11e6-804b-659fda1be312","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:234","type":"CtInvocationImpl","sourcecode":"sb.append(s, start, slash)"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"344f9eeb-8b4b-11e6-befa-9b43e0135e09","series":0,"name":"add","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:4531","type":"CtIfImpl","sourcecode":"if (limit < 0) {\n    return i;\n} "},"variableMap":{"limit":"org.mozilla.javascript.IRFactory.ALWAYS_TRUE_BOOLEAN","i":"org.mozilla.javascript.IRFactory.ALWAYS_TRUE_BOOLEAN"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:2253","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.IRFactory.org.mozilla.javascript.IRFactory.int"},"status":-1},{"failures":[],"tindex":"344fc5fc-8b4b-11e6-befa-8f93b1e0861b","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.DToA:914","type":"CtIfImpl","sourcecode":"if ((i = ((s5 != 0 ? 32 - (org.mozilla.javascript.DToA.hi0bits(S_hiWord)) : 1) + s2) & 31) != 0)\n    i = 32 - i;\n"},"variableMap":{"s5":"decPoint","i":"end","S_hiWord":"decPoint","s2":"end"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.FastDtoaBuilder:56","type":"CtIfImpl","sourcecode":"if (decPoint > 0) {\n    java.lang.System.arraycopy(char[], int, char[], ((int) + 1), ((int) - (int)));\n    char[][int] = '.';\n    (int)++;\n} else {\n    int int = (firstDigit + 2) - decPoint;\n    java.lang.System.arraycopy(char[], firstDigit, char[], target, ((int) - firstDigit));\n    char[][firstDigit] = '0';\n    char[][(firstDigit + 1)] = '.';\n    if (decPoint < 0) {\n        java.util.Arrays.fill(char[], (firstDigit + 2), target, '0');\n    } \n    int += 2 - decPoint;\n}"},"status":-1},{"failures":[],"tindex":"344fc5fd-8b4b-11e6-befa-f176789495ef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.RegExpImpl:542","type":"CtAssignmentImpl","sourcecode":"reProxy = org.mozilla.javascript.ScriptRuntime.getRegExpProxy(cx)"},"status":-1},{"failures":[],"tindex":"344fc5fe-8b4b-11e6-befa-89177fa317c4","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Block:54","type":"CtAssignmentImpl","sourcecode":"int = startNodeIndex"},"variableMap":{"startNodeIndex":"itsLabelTableTop","itsStartNodeIndex":"itsLabelTableTop"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:440","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[],"tindex":"344fc5ff-8b4b-11e6-befa-5bd153549024","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Kit:137","type":"CtIfImpl","sourcecode":"if ('a' <= c) {\n    c -= 'a' - 10;\n    break check;\n} "},"variableMap":{"c":"org.mozilla.javascript.Token.RP"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:924","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Decompiler.addToken(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)"},"status":-1},{"failures":[],"tindex":"344fed10-8b4b-11e6-befa-75280e100623","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJavaObject:664","type":"CtIfImpl","sourcecode":"if (old != null) {\n    return old;\n} "},"variableMap":{"old":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:342","type":"CtIfImpl","sourcecode":"if (value != (org.mozilla.javascript.Scriptable.org.mozilla.javascript.Scriptable.java.lang.Object))\n    return value;\n"},"status":-1},{"failures":[],"tindex":"344fed11-8b4b-11e6-befa-c7f2d3d51504","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Parser:2771","type":"CtLocalVariableImpl","sourcecode":"int int = atPos != (-1) ? atPos : lb"},"variableMap":{"lb":"lineStart","atPos":"sourceCursor"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:1398","type":"CtLocalVariableImpl","sourcecode":"int int = (int) - (int)"},"status":-1},{"failures":[],"tindex":"344fed12-8b4b-11e6-befa-c9d64ad72f86","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NodeTransformer:107","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.javascript.ObjArray.push(node);\n        org.mozilla.javascript.ObjArray.push(((org.mozilla.javascript.ast.Jump)(node)).org.mozilla.javascript.Node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.ObjArray.push(node);\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getNext();\n            if ((leave.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                org.mozilla.javascript.Kit.codeBug();\n            } \n            org.mozilla.javascript.ObjArray.push(leave);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(node));\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = jump.getFinally();\n            if (finallytarget != null) {\n                boolean = true;\n                org.mozilla.javascript.ObjArray.push(node);\n                org.mozilla.javascript.ObjArray.push(finallytarget);\n            } \n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if ((!(org.mozilla.javascript.ObjArray.isEmpty())) && ((org.mozilla.javascript.ObjArray.peek()) == node)) {\n            org.mozilla.javascript.ObjArray.pop();\n            org.mozilla.javascript.ObjArray.pop();\n        } \n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        ((org.mozilla.javascript.ast.FunctionNode)(tree)).addResumptionPoint(node);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            boolean boolean = ((tree.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) && (((org.mozilla.javascript.ast.FunctionNode)(tree)).isGenerator());\n            if (isGenerator) {\n                node.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, 1);\n            } \n            if (!(boolean))\n                break;\n            \n            org.mozilla.javascript.Node org.mozilla.javascript.Node = null;\n            for (int int = (org.mozilla.javascript.ObjArray.size()) - 1 ; i >= 0 ; i--) {\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.Node)(org.mozilla.javascript.ObjArray.get(i)));\n                int int = n.getType();\n                if ((elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node;\n                    if (elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = new org.mozilla.javascript.ast.Jump(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                        org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.ast.Jump)(n)).getFinally();\n                        jsrnode.org.mozilla.javascript.Node = jsrtarget;\n                        unwind = jsrnode;\n                    } else {\n                        unwind = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    }\n                    if (unwindBlock == null) {\n                        unwindBlock = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , node.getLineno());\n                    } \n                    unwindBlock.addChildToBack(unwind);\n                } \n            }\n            if (unwindBlock != null) {\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = node;\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = returnNode.getFirstChild();\n                node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, unwindBlock);\n                if ((returnExpr == null) || isGenerator) {\n                    unwindBlock.addChildToBack(returnNode);\n                } else {\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , returnExpr);\n                    unwindBlock.addChildToFront(store);\n                    returnNode = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    unwindBlock.addChildToBack(returnNode);\n                    transformCompilationUnit_r(tree, store, scope, createScopeObjects, inStrictMode);\n                }\n                continue siblingLoop;\n            } \n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(node));\n            org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = jump.getJumpStatement();\n            if (jumpStatement == null)\n                org.mozilla.javascript.Kit.codeBug();\n            \n            for (int int = org.mozilla.javascript.ObjArray.size() ;  ; ) {\n                if (i == 0) {\n                    throw org.mozilla.javascript.Kit.codeBug();\n                } \n                --i;\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = ((org.mozilla.javascript.Node)(org.mozilla.javascript.ObjArray.get(i)));\n                if (n == jumpStatement) {\n                    break;\n                } \n                int int = n.getType();\n                if (elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    previous = org.mozilla.javascript.NodeTransformer.addBeforeCurrent(parent, previous, node, leave);\n                } else if (elemtype == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = ((org.mozilla.javascript.ast.Jump)(n));\n                    org.mozilla.javascript.ast.Jump org.mozilla.javascript.ast.Jump = new org.mozilla.javascript.ast.Jump(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    jsrFinally.org.mozilla.javascript.Node = tryNode.getFinally();\n                    previous = org.mozilla.javascript.NodeTransformer.addBeforeCurrent(parent, previous, node, jsrFinally);\n                } \n            }\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                jump.org.mozilla.javascript.Node = jumpStatement.org.mozilla.javascript.Node;\n            } else {\n                jump.org.mozilla.javascript.Node = jumpStatement.getContinue();\n            }\n            jump.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitCall(node, tree);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitNew(node, tree);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getFirstChild();\n            if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                boolean boolean = ((tree.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (((org.mozilla.javascript.ast.FunctionNode)(tree)).requiresActivation());\n                node = visitLet(createWith, parent, previous, node);\n                break;\n            } else {\n            }\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            for (org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getFirstChild() ; cursor != null ; ) {\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = cursor;\n                cursor = cursor.getNext();\n                if ((n.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    if (!(n.hasChildren()))\n                        continue;\n                    \n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = n.getFirstChild();\n                    n.removeChild(init);\n                    n.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    n = new org.mozilla.javascript.Node((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.Token.org.mozilla.javascript.Token.int : org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) , n , init);\n                } else {\n                    if ((n.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                        throw org.mozilla.javascript.Kit.codeBug();\n                    \n                }\n                org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int , n , node.getLineno());\n                result.addChildToBack(pop);\n            }\n            node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, result);\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.ast.Scope org.mozilla.javascript.ast.Scope = scope.getDefiningScope(node.getString());\n            if (defining != null) {\n                node.setScope(defining);\n            } \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.javascript.Node org.mozilla.javascript.Node = node.getFirstChild();\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                while ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    child = child.getFirstChild();\n                }\n                if (((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getFirstChild();\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = child.getLastChild();\n                    if (((first.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) && (first.getString().equals(\"undefined\")))\n                        child = last;\n                    else if (((last.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) && (last.getString().equals(\"undefined\")))\n                        child = first;\n                    \n                } \n            } \n            if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                child.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n            \n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (inStrictMode) {\n            node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n        } \n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (createScopeObjects) {\n                break;\n            } \n            org.mozilla.javascript.Node org.mozilla.javascript.Node;\n            if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                nameSource = node;\n            } else {\n                nameSource = node.getFirstChild();\n                if ((nameSource.getType()) != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        break;\n                    } \n                    throw org.mozilla.javascript.Kit.codeBug();\n                } \n            }\n            if ((nameSource.getScope()) != null) {\n                break;\n            } \n            java.lang.String java.lang.String = nameSource.getString();\n            org.mozilla.javascript.ast.Scope org.mozilla.javascript.ast.Scope = scope.getDefiningScope(name);\n            if (defining != null) {\n                nameSource.setScope(defining);\n                if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                } else if ((type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                    node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    nameSource.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    node.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    nameSource.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    org.mozilla.javascript.Node org.mozilla.javascript.Node = new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n                    node = org.mozilla.javascript.NodeTransformer.replaceCurrent(parent, previous, node, n);\n                } else {\n                    throw org.mozilla.javascript.Kit.codeBug();\n                }\n            } \n            break;\n        }\n}"},"status":-1},{"failures":[],"tindex":"34506243-8b4b-11e6-befa-3191c6570ae0","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:5050","type":"CtLocalVariableImpl","sourcecode":"int int = org.mozilla.classfile.TypeInfo.getTag(incoming)"},"variableMap":{"incoming":"switchStart"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:1769","type":"CtLocalVariableImpl","sourcecode":"int int = getOperand((switchStart + 8), 4)"},"status":-1},{"failures":[],"tindex":"34506244-8b4b-11e6-befa-b5b964b6712a","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.serialize.ScriptableOutputStream:178","type":"CtIfImpl","sourcecode":"if (false)\n    throw new java.io.IOException();\n"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeNumber:57","type":"CtInvocationImpl","sourcecode":"ctor.defineProperty(\"MAX_VALUE\", org.mozilla.javascript.ScriptRuntime.wrapNumber(java.lang.Double.java.lang.Double.double), attr)"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
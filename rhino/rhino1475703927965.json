{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"07b5d4d7-8b45-11e6-b2ae-13c87b8f8ae4","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.BaseFunction:93","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.BaseFunction.org.mozilla.javascript.BaseFunction.int"},"variableMap":{"org.mozilla.javascript.BaseFunction.MAX_INSTANCE_ID":"pc"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1931","type":"CtReturnImpl","sourcecode":"return pc"},"status":-2},{"failures":[],"tindex":"07b5d4d8-8b45-11e6-b2ae-ebbf603513c2","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeCall:89","type":"CtAssignmentImpl","sourcecode":"arity = 1"},"variableMap":{"arity":"hexSize"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeGlobal:414","type":"CtAssignmentImpl","sourcecode":"hexSize = 2"},"status":-1},{"failures":[],"tindex":"07b5d4d9-8b45-11e6-b2ae-77c548545914","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Parser:3626","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.Parser.this.int = 0"},"variableMap":{"endFlags":"power"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.UintMap:251","type":"CtUnaryOperatorImpl","sourcecode":"++(int)"},"status":-1},{"failures":[],"tindex":"07b5fbea-8b45-11e6-b2ae-ab6a2bb22031","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Decompiler:322","type":"CtWhileImpl","sourcecode":"while (i < length) {\n    switch (source.charAt(i)) {\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            if ((source.charAt(i)) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                result.append(\"get \");\n            } else if ((source.charAt(i)) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                result.append(\"set \");\n            } \n            ++i;\n            i = org.mozilla.javascript.Decompiler.printSourceString(source, (i + 1), false, result);\n            ++i;\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            i = org.mozilla.javascript.Decompiler.printSourceString(source, (i + 1), false, result);\n            continue;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            i = org.mozilla.javascript.Decompiler.printSourceString(source, (i + 1), true, result);\n            continue;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            i = org.mozilla.javascript.Decompiler.printSourceNumber(source, (i + 1), result);\n            continue;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"true\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"false\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"null\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"this\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            ++i;\n            result.append(\"function \");\n            break;\n        case org.mozilla.javascript.Decompiler.org.mozilla.javascript.Decompiler.int :\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\", \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            ++braceNesting;\n            if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n                indent += indentGap;\n            \n            result.append('{');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                --braceNesting;\n                if (justFunctionBody && (braceNesting == 0))\n                    break;\n                \n                result.append('}');\n                switch (org.mozilla.javascript.Decompiler.getNext(source, length, i)) {\n                    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    case org.mozilla.javascript.Decompiler.org.mozilla.javascript.Decompiler.int :\n                        indent -= indentGap;\n                        break;\n                    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n                        indent -= indentGap;\n                        result.append(' ');\n                        break;\n                }\n                break;\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append('(');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(')');\n            if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n                result.append(' ');\n            \n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append('[');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(']');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            {\n                if (toSource)\n                    break;\n                \n                boolean boolean = true;\n                if (!afterFirstEOL) {\n                    afterFirstEOL = true;\n                    if (justFunctionBody) {\n                        result.setLength(0);\n                        indent -= indentGap;\n                        newLine = false;\n                    } \n                } \n                if (newLine) {\n                    result.append('\\n');\n                } \n                if ((i + 1) < length) {\n                    int int = 0;\n                    int int = source.charAt((i + 1));\n                    if ((nextToken == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (nextToken == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n                        less = indentGap - caseGap;\n                    } else if (nextToken == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        less = indentGap;\n                    } else if (nextToken == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                        int int = org.mozilla.javascript.Decompiler.getSourceStringEnd(source, (i + 2));\n                        if ((source.charAt(afterName)) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n                            less = indentGap;\n                        \n                    } \n                    for ( ; less < indent ; less++)\n                        result.append(' ');\n                } \n                break;\n            }\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append('.');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"new \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"delete \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"if \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"else \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"for \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" in \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"with \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"while \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"do \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"try \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"catch \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"finally \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"throw \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"switch \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"break\");\n            if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n                result.append(' ');\n            \n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"continue\");\n            if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n                result.append(' ');\n            \n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"case \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"default\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"return\");\n            if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) != (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n                result.append(' ');\n            \n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"var \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"let \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(';');\n            if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) != (org.mozilla.javascript.Decompiler.getNext(source, length, i))) {\n                result.append(' ');\n            } \n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" = \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" += \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" -= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" *= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" /= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" %= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" |= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" ^= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" &= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" <<= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" >>= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" >>>= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" ? \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\": \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            if ((org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) == (org.mozilla.javascript.Decompiler.getNext(source, length, i)))\n                result.append(':');\n            else\n                result.append(\" : \");\n            \n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" || \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" && \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" | \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" ^ \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" & \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" === \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" !== \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" == \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" != \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" <= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" < \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" >= \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" > \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" instanceof \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" << \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" >> \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" >>> \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"typeof \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"void \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"const \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"yield \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append('!');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append('~');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append('+');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append('-');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"++\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"--\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" + \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" - \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" * \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" / \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\" % \");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"::\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"..\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\".(\");\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append('@');\n            break;\n        case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n            result.append(\"debugger;\\n\");\n            break;\n        default :\n            throw new java.lang.RuntimeException((\"Token: \" + (org.mozilla.javascript.Token.name(source.charAt(i)))));\n    }\n    ++i;\n}"},"status":-1},{"failures":[],"tindex":"07b64a0b-8b45-11e6-b2ae-0f8e232cf1a4","series":0,"name":"add","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:705","type":"CtIfImpl","sourcecode":"if (!((0 <= theOperand1) && (theOperand1 < 65536)))\n    throw new org.mozilla.classfile.ClassFileWriter.ClassFileFormatException(\"out of range variable\");\n"},"variableMap":{"theOperand1":"s5"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:881","type":"CtIfImpl","sourcecode":"if (s5 > 0)\n    S = org.mozilla.javascript.DToA.pow5mult(S, s5);\n"},"status":-1},{"failures":[],"tindex":"07b64a0c-8b45-11e6-b2ae-03152df8b762","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Interpreter:2757","type":"CtAssignmentImpl","sourcecode":"scope = callerScope"},"variableMap":{"scope":"iterator","callerScope":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:2171","type":"CtAssignmentImpl","sourcecode":"x.org.mozilla.javascript.Scriptable = org.mozilla.javascript.ScriptRuntime.toIterator(cx, x.org.mozilla.javascript.Scriptable.getParentScope(), x.org.mozilla.javascript.Scriptable, (enumType == (org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int)))"},"status":-1},{"failures":[],"tindex":"07b64a0d-8b45-11e6-b2ae-5b1b0941359a","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:1604","type":"CtIfImpl","sourcecode":"if (size > 4) {\n    throw new java.lang.IllegalArgumentException(\"bad operand size\");\n} "},"variableMap":{"size":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.CodeGenerator:1230","type":"CtIfImpl","sourcecode":"if (offset != ((short)(offset))) {\n    if ((org.mozilla.javascript.InterpreterData.org.mozilla.javascript.UintMap) == null) {\n        org.mozilla.javascript.InterpreterData.org.mozilla.javascript.UintMap = new org.mozilla.javascript.UintMap();\n    } \n    org.mozilla.javascript.InterpreterData.org.mozilla.javascript.UintMap.put(offsetSite, jumpPC);\n    offset = 0;\n} "},"status":-1},{"failures":[],"tindex":"07b6711e-8b45-11e6-b2ae-2b70fd0c4388","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ContextFactory:566","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Context.exit()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ast.NewExpression:61","type":"CtIfImpl","sourcecode":"if (initializer != null)\n    initializer.setParent(org.mozilla.javascript.ast.NewExpression.this);\n"},"status":-1},{"failures":[],"tindex":"07b6711f-8b45-11e6-b2ae-d39f227d4a0e","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.JavaAdapter:386","type":"CtLocalVariableImpl","sourcecode":"int int = method.getModifiers()"},"variableMap":{"method":"fromObj"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeJavaObject:235","type":"CtLocalVariableImpl","sourcecode":"int int = org.mozilla.javascript.NativeJavaObject.getJSTypeCode(fromObj)"},"status":-1},{"failures":[],"tindex":"07b67120-8b45-11e6-b2ae-3d95164c51c6","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeArray:552","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.ScriptableObject.org.mozilla.javascript.ScriptableObject.int"},"variableMap":{"org.mozilla.javascript.ScriptableObject.EMPTY":"org.mozilla.javascript.Token.ASSIGN_MUL"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:741","type":"CtReturnImpl","sourcecode":"return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int"},"status":-2}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
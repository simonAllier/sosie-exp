{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"f5d09abd-8b67-11e6-b19f-a758eeaed4f7","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.IRFactory:1444","type":"CtIfImpl","sourcecode":"if ((init.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n    org.mozilla.javascript.ast.Scope org.mozilla.javascript.ast.Scope = org.mozilla.javascript.ast.Scope.splitScope(loop);\n    let.setType(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int);\n    let.addChildrenToBack(init);\n    let.addChildToBack(createLoop(loop, org.mozilla.javascript.IRFactory.org.mozilla.javascript.IRFactory.int, body, test, new org.mozilla.javascript.Node(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int), incr));\n    return let;\n} "},"variableMap":{"init":"right","test":"right","incr":"ref","loop":"left","org.mozilla.javascript.Token.EMPTY":"org.mozilla.javascript.Token.ARRAYLIT","this":"this","org.mozilla.javascript.IRFactory.LOOP_FOR":"org.mozilla.javascript.Token.ASSIGN","org.mozilla.javascript.Token.LET":"assignType","body":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:2148","type":"CtIfImpl","sourcecode":"if (ref == null) {\n    if (((left.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || ((left.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) {\n        if (assignType != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            reportError(\"msg.bad.destruct.op\");\n            return right;\n        } \n        return createDestructuringAssignment((-1), left, right);\n    } \n    reportError(\"msg.bad.assign.left\");\n    return right;\n} "},"status":-2},{"failures":[],"tindex":"f5d09abe-8b67-11e6-b19f-f7eef07164e2","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.IdScriptableObject:58","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.IdScriptableObject.PrototypeValues.this.int = maxId"},"variableMap":{"maxId":"k"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:938","type":"CtUnaryOperatorImpl","sourcecode":"k--"},"status":-1},{"failures":[],"tindex":"f5d0c1cf-8b67-11e6-b19f-4b7901907118","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:1416","type":"CtAssignmentImpl","sourcecode":"int[] = new int[org.mozilla.javascript.optimizer.BodyCodegen.org.mozilla.javascript.optimizer.BodyCodegen.int]"},"status":-1},{"failures":[],"tindex":"f5d0c1d0-8b67-11e6-b19f-d126a4120bf9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:2299","type":"CtInvocationImpl","sourcecode":"pop()"},"status":-1},{"failures":[],"tindex":"f5d0c1d1-8b67-11e6-b19f-0d0fe1fb9311","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IRFactory:767","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.Decompiler.addEOL(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)"},"status":-1},{"failures":[],"tindex":"f5d0c1d2-8b67-11e6-b19f-3532bd48391f","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:996","type":"CtIfImpl","sourcecode":"if (n < 24)\n    n = n * 60;\nelse\n    n = (n % 100) + ((n / 100) * 60);\n"},"variableMap":{"n":"min"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:2268","type":"CtIfImpl","sourcecode":"if (((state.int) == (-1)) || ((state.int) > 0)) {\n    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, state.int, state.int, gData.int, null, state.int, state.int);\n    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n    continuationPc = pc;\n    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n    pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n    int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n    pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n    for (int int = 0 ; k < parenCount ; k++) {\n        gData.setParens((parenIndex + k), (-1), 0);\n    }\n    op = program[(pc++)];\n    continue;\n} else {\n    continuationPc = state.int;\n    continuationOp = state.int;\n    break;\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":6,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
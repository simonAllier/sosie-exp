{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"168bd8c5-89ad-11e6-9016-cb45a61b7708","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ConsString:66","type":"CtAssignmentImpl","sourcecode":"java.lang.CharSequence = b.toString()"},"variableMap":{"b":"s2","s1":"s2"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ConsString:67","type":"CtAssignmentImpl","sourcecode":"java.lang.CharSequence = \"\""},"status":-1},{"failures":[],"tindex":"168bffd6-89ad-11e6-9016-6985249457b4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.JavaAdapter:1106","type":"CtInvocationImpl","sourcecode":"cfw.addInvoke(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, superName, methodName, methodSignature)"},"status":-1},{"failures":[],"tindex":"168bffd7-89ad-11e6-9016-c1fe645816cf","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider:299","type":"CtLocalVariableImpl","sourcecode":"final long long = java.lang.System.currentTimeMillis()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.DiyFp:93","type":"CtLocalVariableImpl","sourcecode":"long long = a * c"},"status":-1},{"failures":[],"tindex":"168bffd8-89ad-11e6-9016-1dd533300baf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeBoolean:51","type":"CtSwitchImpl","sourcecode":"switch (id) {\n    case org.mozilla.javascript.NativeBoolean.org.mozilla.javascript.NativeBoolean.int :\n        arity = 1;\n        s = \"constructor\";\n        break;\n    case org.mozilla.javascript.NativeBoolean.org.mozilla.javascript.NativeBoolean.int :\n        arity = 0;\n        s = \"toString\";\n        break;\n    case org.mozilla.javascript.NativeBoolean.org.mozilla.javascript.NativeBoolean.int :\n        arity = 0;\n        s = \"toSource\";\n        break;\n    case org.mozilla.javascript.NativeBoolean.org.mozilla.javascript.NativeBoolean.int :\n        arity = 0;\n        s = \"valueOf\";\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException(java.lang.String.valueOf(id));\n}"},"status":-1},{"failures":[],"tindex":"168c26e9-89ad-11e6-9016-f558b1b48e63","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1060","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.regexp.NativeRegExp.reportError(\"msg.unterm.class\", \"\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ContextFactory:411","type":"CtIfImpl","sourcecode":"if (l == null)\n    break;\n"},"status":-1},{"failures":[],"tindex":"168c26ea-89ad-11e6-9016-35b323cb0abb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:1060","type":"CtIfImpl","sourcecode":"if (val instanceof java.lang.Number) {\n    org.mozilla.javascript.NativeNumber org.mozilla.javascript.NativeNumber = new org.mozilla.javascript.NativeNumber(((java.lang.Number)(val)).doubleValue());\n    org.mozilla.javascript.ScriptRuntime.setBuiltinProtoAndParent(result, scope, org.mozilla.javascript.TopLevel.Builtins.org.mozilla.javascript.TopLevel.Builtins.org.mozilla.javascript.TopLevel.Builtins);\n    return result;\n} "},"status":-1},{"failures":[],"tindex":"168c26eb-89ad-11e6-9016-b3ba48979cc8","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.optimizer.Optimizer:444","type":"CtInvocationImpl","sourcecode":"n.removeChild(child)"},"variableMap":{"n":"n","child":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Optimizer:398","type":"CtInvocationImpl","sourcecode":"n.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, org.mozilla.javascript.Node.org.mozilla.javascript.Node.int)"},"status":-1},{"failures":[],"tindex":"168c26ec-89ad-11e6-9016-e39a6d7272d6","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeJavaObject:488","type":"CtReturnImpl","sourcecode":"return \"undefined\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:1523","type":"CtReturnImpl","sourcecode":"return java.lang.Long.valueOf(i)"},"status":-1},{"failures":[],"tindex":"168c26ed-89ad-11e6-9016-95e610d79100","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Context:485","type":"CtIfImpl","sourcecode":"if (factory == null) {\n    factory = org.mozilla.javascript.ContextFactory.getGlobal();\n} "},"variableMap":{"factory":"factory"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.Context:443","type":"CtInvocationImpl","sourcecode":"cx.org.mozilla.javascript.ContextFactory.onContextReleased(cx)"},"status":-1},{"failures":[],"tindex":"168c4dfe-89ad-11e6-9016-2f6689ff2d4f","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.Kit:130","type":"CtIfImpl","sourcecode":"if (0 <= c) {\n    break check;\n} "},"variableMap":{"c":"org.mozilla.javascript.Token.RETURN_RESULT"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:1844","type":"CtSwitchImpl","sourcecode":"switch (type) {\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount()) {\n            addInstructionCount(1);\n        } \n        while (child != null) {\n            generateStatement(child);\n            child = child.getNext();\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            boolean boolean = boolean;\n            boolean = true;\n            int int = getNewWordLocal();\n            if (boolean) {\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n                org.mozilla.classfile.ClassFileWriter.addAStore(local);\n            } \n            node.putIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, local);\n            while (child != null) {\n                generateStatement(child);\n                child = child.getNext();\n            }\n            releaseWordLocal(((short)(local)));\n            node.removeProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            boolean = prevLocal;\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            org.mozilla.javascript.optimizer.OptFunctionNode org.mozilla.javascript.optimizer.OptFunctionNode = org.mozilla.javascript.optimizer.OptFunctionNode.get(org.mozilla.javascript.ast.ScriptNode, fnIndex);\n            int int = ofn.org.mozilla.javascript.ast.FunctionNode.getFunctionType();\n            if (t == (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                visitFunction(ofn, t);\n            } else {\n                if (t != (org.mozilla.javascript.ast.FunctionNode.org.mozilla.javascript.ast.FunctionNode.int)) {\n                    throw org.mozilla.javascript.optimizer.Codegen.badTree();\n                } \n            }\n            break;\n        }\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        visitTryCatchFinally(((org.mozilla.javascript.ast.Jump)(node)), child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            org.mozilla.classfile.ClassFileWriter.setStackTop(((short)(0)));\n            int int = getLocalBlockRegister(node);\n            int int = node.getExistingIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int);\n            java.lang.String java.lang.String = child.getString();\n            child = child.getNext();\n            generateExpression(child, node);\n            if (scopeIndex == 0) {\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            } else {\n                org.mozilla.classfile.ClassFileWriter.addALoad(local);\n            }\n            org.mozilla.classfile.ClassFileWriter.addPush(name);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            addScriptRuntimeInvoke(\"newCatchScope\", (\"(Ljava/lang/Throwable;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"Ljava/lang/String;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"))))));\n            org.mozilla.classfile.ClassFileWriter.addAStore(local);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        generateThrowJavaScriptException();\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        org.mozilla.classfile.ClassFileWriter.addALoad(getLocalBlockRegister(node));\n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (!(boolean)) {\n            if (child != null) {\n                generateExpression(child, node);\n            } else if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                org.mozilla.javascript.optimizer.Codegen.pushUndefined(org.mozilla.classfile.ClassFileWriter);\n            } else {\n                if ((short) < 0)\n                    throw org.mozilla.javascript.optimizer.Codegen.badTree();\n                \n                org.mozilla.classfile.ClassFileWriter.addALoad(short);\n            }\n        } \n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        if ((int) == (-1)) {\n            if (!(boolean))\n                throw org.mozilla.javascript.optimizer.Codegen.badTree();\n            \n            int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n        } \n        org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, int);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        visitSwitch(((org.mozilla.javascript.ast.Jump)(node)), child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"enterWith\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"))));\n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        incReferenceWordLocal(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        addScriptRuntimeInvoke(\"leaveWith\", (\"(Lorg/mozilla/javascript/Scriptable;\" + \")Lorg/mozilla/javascript/Scriptable;\"));\n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        decReferenceWordLocal(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        org.mozilla.classfile.ClassFileWriter.addALoad(short);\n        int int = type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int : type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int : org.mozilla.javascript.ScriptRuntime.org.mozilla.javascript.ScriptRuntime.int;\n        org.mozilla.classfile.ClassFileWriter.addPush(enumType);\n        addScriptRuntimeInvoke(\"enumInit\", (\"(Ljava/lang/Object;\" + (\"Lorg/mozilla/javascript/Context;\" + (\"Lorg/mozilla/javascript/Scriptable;\" + (\"I\" + \")Ljava/lang/Object;\")))));\n        org.mozilla.classfile.ClassFileWriter.addAStore(getLocalBlockRegister(node));\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            visitSetVar(child, child.getFirstChild(), false);\n        } else if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            visitSetConstVar(child, child.getFirstChild(), false);\n        } else if ((child.getType()) == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n            generateYieldPoint(child, false);\n        } else {\n            generateExpression(child, node);\n            if ((node.getIntProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, (-1))) != (-1))\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            else\n                org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int);\n            \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        generateExpression(child, node);\n        if ((short) < 0) {\n            short = getNewWordLocal();\n        } \n        org.mozilla.classfile.ClassFileWriter.addAStore(short);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                addInstructionCount();\n            \n            int int = getTargetLabel(node);\n            org.mozilla.classfile.ClassFileWriter.markLabel(label);\n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                saveCurrentCodeOffset();\n            \n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n            addInstructionCount();\n        \n        visitGoto(((org.mozilla.javascript.ast.Jump)(node)), type, child);\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        {\n            if (!(boolean)) {\n                break;\n            } \n            if (org.mozilla.javascript.CompilerEnvirons.isGenerateObserverCount())\n                saveCurrentCodeOffset();\n            \n            org.mozilla.classfile.ClassFileWriter.setStackTop(((short)(1)));\n            int int = getNewWordLocal();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            int int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.markLabel(finallyStart);\n            generateIntegerWrap();\n            org.mozilla.classfile.ClassFileWriter.addAStore(finallyRegister);\n            while (child != null) {\n                generateStatement(child);\n                child = child.getNext();\n            }\n            org.mozilla.classfile.ClassFileWriter.addALoad(finallyRegister);\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, \"java/lang/Integer\");\n            generateIntegerUnwrap();\n            org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint = java.util.Map<org.mozilla.javascript.Node, org.mozilla.javascript.optimizer.BodyCodegen.FinallyReturnPoint>.get(node);\n            ret.int = org.mozilla.classfile.ClassFileWriter.acquireLabel();\n            org.mozilla.classfile.ClassFileWriter.add(org.mozilla.classfile.ByteCode.org.mozilla.classfile.ByteCode.int, ret.int);\n            releaseWordLocal(((short)(finallyRegister)));\n            org.mozilla.classfile.ClassFileWriter.markLabel(finallyEnd);\n        }\n        break;\n    case org.mozilla.javascript.Token.org.mozilla.javascript.Token.int :\n        break;\n    default :\n        throw org.mozilla.javascript.optimizer.Codegen.badTree();\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
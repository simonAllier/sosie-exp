{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"8fd580dc-8a8b-11e6-8855-e5e6dda7aacb","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.TokenStream:1423","type":"CtOperatorAssignmentImpl","sourcecode":"index -= oldSourceCursor - (int)"},"variableMap":{"sourceCursor":"prevOffset","index":"prevOffset","oldSourceCursor":"prevOffset"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:2476","type":"CtAssignmentImpl","sourcecode":"prevOffset = current.getStart()"},"status":-1},{"failures":[],"tindex":"8fd5a7ed-8a8b-11e6-8855-0f3c1350e126","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:130","type":"CtLocalVariableImpl","sourcecode":"int int = 1 + nameLength"},"variableMap":{"nameLength":"org.mozilla.javascript.v8dtoa.DoubleHelper.kSignificandSize"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.v8dtoa.DoubleHelper:67","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(((d64 & (org.mozilla.javascript.v8dtoa.DoubleHelper.org.mozilla.javascript.v8dtoa.DoubleHelper.long)) >>> (org.mozilla.javascript.v8dtoa.DoubleHelper.org.mozilla.javascript.v8dtoa.DoubleHelper.int)) & 4294967295L))"},"status":-1},{"failures":[],"tindex":"8fd5a7ee-8a8b-11e6-8855-89987adcf7c6","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:559","type":"CtReturnImpl","sourcecode":"return d + 1"},"variableMap":{"d":"org.mozilla.javascript.Token.URSH"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:279","type":"CtForImpl","sourcecode":"retry : for ( ;  ; ) {\n    for ( ;  ; ) {\n        c = getChar();\n        if (c == (org.mozilla.javascript.TokenStream.org.mozilla.javascript.TokenStream.int)) {\n            int = (int) - 1;\n            int = int;\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else if (c == '\\n') {\n            boolean = false;\n            int = (int) - 1;\n            int = int;\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else if (!(org.mozilla.javascript.TokenStream.isJSSpace(c))) {\n            if (c != '-') {\n                boolean = true;\n            } \n            break;\n        } \n    }\n    int = (int) - 1;\n    int = int;\n    if (c == '@')\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    \n    boolean boolean;\n    boolean boolean = false;\n    if (c == '\\\\') {\n        c = getChar();\n        if (c == 'u') {\n            identifierStart = true;\n            isUnicodeEscapeStart = true;\n            int = 0;\n        } else {\n            identifierStart = false;\n            ungetChar(c);\n            c = '\\\\';\n        }\n    } else {\n        identifierStart = java.lang.Character.isJavaIdentifierStart(((char)(c)));\n        if (identifierStart) {\n            int = 0;\n            addToString(c);\n        } \n    }\n    if (identifierStart) {\n        boolean boolean = isUnicodeEscapeStart;\n        for ( ;  ; ) {\n            if (isUnicodeEscapeStart) {\n                int int = 0;\n                for (int int = 0 ; i != 4 ; ++i) {\n                    c = getChar();\n                    escapeVal = org.mozilla.javascript.Kit.xDigitToInt(c, escapeVal);\n                    if (escapeVal < 0) {\n                        break;\n                    } \n                }\n                if (escapeVal < 0) {\n                    org.mozilla.javascript.Parser.addError(\"msg.invalid.escape\");\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } \n                addToString(escapeVal);\n                isUnicodeEscapeStart = false;\n            } else {\n                c = getChar();\n                if (c == '\\\\') {\n                    c = getChar();\n                    if (c == 'u') {\n                        isUnicodeEscapeStart = true;\n                        containsEscape = true;\n                    } else {\n                        org.mozilla.javascript.Parser.addError(\"msg.illegal.character\");\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    }\n                } else {\n                    if (((c == (org.mozilla.javascript.TokenStream.org.mozilla.javascript.TokenStream.int)) || (c == (org.mozilla.javascript.TokenStream.org.mozilla.javascript.TokenStream.char))) || (!(java.lang.Character.isJavaIdentifierPart(((char)(c)))))) {\n                        break;\n                    } \n                    addToString(c);\n                }\n            }\n        }\n        ungetChar(c);\n        java.lang.String java.lang.String = getStringFromBuffer();\n        if (!containsEscape) {\n            int int = org.mozilla.javascript.TokenStream.stringToKeyword(str);\n            if (result != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                if (((result == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) || (result == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))) && ((org.mozilla.javascript.Parser.org.mozilla.javascript.CompilerEnvirons.getLanguageVersion()) < (org.mozilla.javascript.Context.org.mozilla.javascript.Context.int))) {\n                    java.lang.String = result == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int) ? \"let\" : \"yield\";\n                    result = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } \n                org.mozilla.javascript.TokenStream.this.java.lang.String = ((java.lang.String)(org.mozilla.javascript.ObjToIntMap.intern(str)));\n                if (result != (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int)) {\n                    return result;\n                } else if (!(org.mozilla.javascript.Parser.org.mozilla.javascript.CompilerEnvirons.isReservedKeywordAsIdentifier())) {\n                    return result;\n                } \n            } \n        } else if (org.mozilla.javascript.TokenStream.isKeyword(str)) {\n            str = convertLastCharToHex(str);\n        } \n        org.mozilla.javascript.TokenStream.this.java.lang.String = ((java.lang.String)(org.mozilla.javascript.ObjToIntMap.intern(str)));\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    } \n    if ((org.mozilla.javascript.TokenStream.isDigit(c)) || ((c == '.') && (org.mozilla.javascript.TokenStream.isDigit(peekChar())))) {\n        boolean = false;\n        int = 0;\n        int int = 10;\n        boolean = boolean = false;\n        if (c == '0') {\n            c = getChar();\n            if ((c == 'x') || (c == 'X')) {\n                base = 16;\n                boolean = true;\n                c = getChar();\n            } else if (org.mozilla.javascript.TokenStream.isDigit(c)) {\n                base = 8;\n                boolean = true;\n            } else {\n                addToString('0');\n            }\n        } \n        if (base == 16) {\n            while (0 <= (org.mozilla.javascript.Kit.xDigitToInt(c, 0))) {\n                addToString(c);\n                c = getChar();\n            }\n        } else {\n            while (('0' <= c) && (c <= '9')) {\n                if ((base == 8) && (c >= '8')) {\n                    org.mozilla.javascript.Parser.addWarning(\"msg.bad.octal.literal\", (c == '8' ? \"8\" : \"9\"));\n                    base = 10;\n                } \n                addToString(c);\n                c = getChar();\n            }\n        }\n        boolean boolean = true;\n        if ((base == 10) && (((c == '.') || (c == 'e')) || (c == 'E'))) {\n            isInteger = false;\n            if (c == '.') {\n                do {\n                    addToString(c);\n                    c = getChar();\n                } while (org.mozilla.javascript.TokenStream.isDigit(c) );\n            } \n            if ((c == 'e') || (c == 'E')) {\n                addToString(c);\n                c = getChar();\n                if ((c == '+') || (c == '-')) {\n                    addToString(c);\n                    c = getChar();\n                } \n                if (!(org.mozilla.javascript.TokenStream.isDigit(c))) {\n                    org.mozilla.javascript.Parser.addError(\"msg.missing.exponent\");\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } \n                do {\n                    addToString(c);\n                    c = getChar();\n                } while (org.mozilla.javascript.TokenStream.isDigit(c) );\n            } \n        } \n        ungetChar(c);\n        java.lang.String java.lang.String = getStringFromBuffer();\n        org.mozilla.javascript.TokenStream.this.java.lang.String = numString;\n        double double;\n        if ((base == 10) && (!isInteger)) {\n            try {\n                dval = java.lang.Double.parseDouble(numString);\n            } catch (java.lang.NumberFormatException ex) {\n                org.mozilla.javascript.Parser.addError(\"msg.caught.nfe\");\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        } else {\n            dval = org.mozilla.javascript.ScriptRuntime.stringToNumber(numString, 0, base);\n        }\n        org.mozilla.javascript.TokenStream.this.double = dval;\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    } \n    if ((c == '\"') || (c == '\\'')) {\n        int = c;\n        int = 0;\n        c = getChar(false);\n        strLoop : while (c != (int)) {\n            if ((c == '\\n') || (c == (org.mozilla.javascript.TokenStream.org.mozilla.javascript.TokenStream.int))) {\n                ungetChar(c);\n                int = int;\n                org.mozilla.javascript.Parser.addError(\"msg.unterminated.string.lit\");\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } \n            if (c == '\\\\') {\n                int int;\n                c = getChar();\n                switch (c) {\n                    case 'b' :\n                        c = '\\b';\n                        break;\n                    case 'f' :\n                        c = '\\f';\n                        break;\n                    case 'n' :\n                        c = '\\n';\n                        break;\n                    case 'r' :\n                        c = '\\r';\n                        break;\n                    case 't' :\n                        c = '\\t';\n                        break;\n                    case 'v' :\n                        c = 11;\n                        break;\n                    case 'u' :\n                        int int = int;\n                        addToString('u');\n                        escapeVal = 0;\n                        for (int int = 0 ; i != 4 ; ++i) {\n                            c = getChar();\n                            escapeVal = org.mozilla.javascript.Kit.xDigitToInt(c, escapeVal);\n                            if (escapeVal < 0) {\n                                continue strLoop;\n                            } \n                            addToString(c);\n                        }\n                        int = escapeStart;\n                        c = escapeVal;\n                        break;\n                    case 'x' :\n                        c = getChar();\n                        escapeVal = org.mozilla.javascript.Kit.xDigitToInt(c, 0);\n                        if (escapeVal < 0) {\n                            addToString('x');\n                            continue strLoop;\n                        } else {\n                            int int = c;\n                            c = getChar();\n                            escapeVal = org.mozilla.javascript.Kit.xDigitToInt(c, escapeVal);\n                            if (escapeVal < 0) {\n                                addToString('x');\n                                addToString(c1);\n                                continue strLoop;\n                            } else {\n                                c = escapeVal;\n                            }\n                        }\n                        break;\n                    case '\\n' :\n                        c = getChar();\n                        continue strLoop;\n                    default :\n                        if (('0' <= c) && (c < '8')) {\n                            int int = c - '0';\n                            c = getChar();\n                            if (('0' <= c) && (c < '8')) {\n                                val = ((8 * val) + c) - '0';\n                                c = getChar();\n                                if ((('0' <= c) && (c < '8')) && (val <= 31)) {\n                                    val = ((8 * val) + c) - '0';\n                                    c = getChar();\n                                } \n                            } \n                            ungetChar(c);\n                            c = val;\n                        } \n                }\n            } \n            addToString(c);\n            c = getChar(false);\n        }\n        java.lang.String java.lang.String = getStringFromBuffer();\n        org.mozilla.javascript.TokenStream.this.java.lang.String = ((java.lang.String)(org.mozilla.javascript.ObjToIntMap.intern(str)));\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    } \n    switch (c) {\n        case ';' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case '[' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case ']' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case '{' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case '}' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case '(' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case ')' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case ',' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case '?' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case ':' :\n            if (matchChar(':')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '.' :\n            if (matchChar('.')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else if (matchChar('(')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '|' :\n            if (matchChar('|')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '^' :\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '&' :\n            if (matchChar('&')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '=' :\n            if (matchChar('=')) {\n                if (matchChar('=')) {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                }\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '!' :\n            if (matchChar('=')) {\n                if (matchChar('=')) {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                }\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '<' :\n            if (matchChar('!')) {\n                if (matchChar('-')) {\n                    if (matchChar('-')) {\n                        int = (int) - 4;\n                        skipLine();\n                        org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    } \n                    ungetCharIgnoreLineEnd('-');\n                } \n                ungetCharIgnoreLineEnd('!');\n            } \n            if (matchChar('<')) {\n                if (matchChar('=')) {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                }\n            } else {\n                if (matchChar('=')) {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                }\n            }\n        case '>' :\n            if (matchChar('>')) {\n                if (matchChar('>')) {\n                    if (matchChar('=')) {\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    } else {\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    }\n                } else {\n                    if (matchChar('=')) {\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    } else {\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    }\n                }\n            } else {\n                if (matchChar('=')) {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                }\n            }\n        case '*' :\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '/' :\n            markCommentStart();\n            if (matchChar('/')) {\n                int = (int) - 2;\n                skipLine();\n                org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } \n            if (matchChar('*')) {\n                boolean boolean = false;\n                int = (int) - 2;\n                if (matchChar('*')) {\n                    lookForSlash = true;\n                    org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n                } else {\n                    org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n                }\n                for ( ;  ; ) {\n                    c = getChar();\n                    if (c == (org.mozilla.javascript.TokenStream.org.mozilla.javascript.TokenStream.int)) {\n                        int = (int) - 1;\n                        org.mozilla.javascript.Parser.addError(\"msg.unterminated.comment\");\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    } else if (c == '*') {\n                        lookForSlash = true;\n                    } else if (c == '/') {\n                        if (lookForSlash) {\n                            int = int;\n                            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                        } \n                    } else {\n                        lookForSlash = false;\n                        int = int;\n                    }\n                }\n            } \n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '%' :\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '~' :\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        case '+' :\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else if (matchChar('+')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        case '-' :\n            if (matchChar('=')) {\n                c = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else if (matchChar('-')) {\n                if (!(boolean)) {\n                    if (matchChar('>')) {\n                        markCommentStart(\"--\");\n                        skipLine();\n                        org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    } \n                } \n                c = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                c = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n            boolean = true;\n            return c;\n        default :\n            org.mozilla.javascript.Parser.addError(\"msg.illegal.character\");\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    }\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":3,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
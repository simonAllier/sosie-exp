{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"0564e481-8b88-11e6-b205-d58c756ae0ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.IdScriptableObject:393","type":"CtIfImpl","sourcecode":"if (info != 0) {\n    if (!(isSealed())) {\n        int int = info >>> 16;\n        if ((attr & (org.mozilla.javascript.ScriptableObject.org.mozilla.javascript.ScriptableObject.int)) == 0) {\n            int int = info & 65535;\n            setInstanceIdValue(id, org.mozilla.javascript.Scriptable.org.mozilla.javascript.Scriptable.java.lang.Object);\n        } \n        return ;\n    } \n} "},"status":-1},{"failures":[],"tindex":"0564e482-8b88-11e6-b205-4f7fec3a271f","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.commonjs.module.Require:388","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:616","type":"CtSwitchImpl","sourcecode":"switch (c) {\n    case ';' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case '[' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case ']' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case '{' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case '}' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case '(' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case ')' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case ',' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case '?' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case ':' :\n        if (matchChar(':')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '.' :\n        if (matchChar('.')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else if (matchChar('(')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '|' :\n        if (matchChar('|')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else if (matchChar('=')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '^' :\n        if (matchChar('=')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '&' :\n        if (matchChar('&')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else if (matchChar('=')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '=' :\n        if (matchChar('=')) {\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '!' :\n        if (matchChar('=')) {\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '<' :\n        if (matchChar('!')) {\n            if (matchChar('-')) {\n                if (matchChar('-')) {\n                    int = (int) - 4;\n                    skipLine();\n                    org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } \n                ungetCharIgnoreLineEnd('-');\n            } \n            ungetCharIgnoreLineEnd('!');\n        } \n        if (matchChar('<')) {\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        } else {\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        }\n    case '>' :\n        if (matchChar('>')) {\n            if (matchChar('>')) {\n                if (matchChar('=')) {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                }\n            } else {\n                if (matchChar('=')) {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else {\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                }\n            }\n        } else {\n            if (matchChar('=')) {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            } else {\n                return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n            }\n        }\n    case '*' :\n        if (matchChar('=')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '/' :\n        markCommentStart();\n        if (matchChar('/')) {\n            int = (int) - 2;\n            skipLine();\n            org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } \n        if (matchChar('*')) {\n            boolean boolean = false;\n            int = (int) - 2;\n            if (matchChar('*')) {\n                lookForSlash = true;\n                org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n            } else {\n                org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n            }\n            for ( ;  ; ) {\n                c = getChar();\n                if (c == (org.mozilla.javascript.TokenStream.org.mozilla.javascript.TokenStream.int)) {\n                    int = (int) - 1;\n                    org.mozilla.javascript.Parser.addError(\"msg.unterminated.comment\");\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } else if (c == '*') {\n                    lookForSlash = true;\n                } else if (c == '/') {\n                    if (lookForSlash) {\n                        int = int;\n                        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                    } \n                } else {\n                    lookForSlash = false;\n                    int = int;\n                }\n            }\n        } \n        if (matchChar('=')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '%' :\n        if (matchChar('=')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '~' :\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n    case '+' :\n        if (matchChar('=')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else if (matchChar('+')) {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n    case '-' :\n        if (matchChar('=')) {\n            c = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else if (matchChar('-')) {\n            if (!(boolean)) {\n                if (matchChar('>')) {\n                    markCommentStart(\"--\");\n                    skipLine();\n                    org.mozilla.javascript.Token.CommentType = org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType.org.mozilla.javascript.Token.CommentType;\n                    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n                } \n            } \n            c = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } else {\n            c = org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        }\n        boolean = true;\n        return c;\n    default :\n        org.mozilla.javascript.Parser.addError(\"msg.illegal.character\");\n        return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n}"},"status":-1},{"failures":[],"tindex":"056532a3-8b88-11e6-b205-4bf6cd50dd90","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Context:2329","type":"CtIfImpl","sourcecode":"if (threshold < 0)\n    throw new java.lang.IllegalArgumentException();\n"},"variableMap":{"threshold":"flags"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:701","type":"CtIfImpl","sourcecode":"if (((state.int) & (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)) != 0) {\n    char char = org.mozilla.javascript.regexp.NativeRegExp.upcase(((char)(localMax)));\n    char char = org.mozilla.javascript.regexp.NativeRegExp.downcase(((char)(localMax)));\n    localMax = cu >= cd ? cu : cd;\n} "},"status":-1},{"failures":[],"tindex":"056532a4-8b88-11e6-b205-6f86e0b7c3f8","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.ast.AstNode:88","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.ast.AstNode.org.mozilla.javascript.ast.AstNode.java.util.Map<java.lang.Integer, java.lang.String>.put(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, \"!=\")"},"variableMap":{"org.mozilla.javascript.Token.NE":"org.mozilla.javascript.Token.GT","org.mozilla.javascript.ast.AstNode.operatorNames":"org.mozilla.javascript.ast.AstNode.operatorNames"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ast.AstNode:90","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.ast.AstNode.org.mozilla.javascript.ast.AstNode.java.util.Map<java.lang.Integer, java.lang.String>.put(org.mozilla.javascript.Token.org.mozilla.javascript.Token.int, \">\")"},"status":-1},{"failures":[],"tindex":"056532a5-8b88-11e6-b205-7d6285e9ce1f","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:993","type":"CtAssignmentImpl","sourcecode":"seenplusminus = true"},"variableMap":{"seenplusminus":"negative"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.DToA:223","type":"CtAssignmentImpl","sourcecode":"negative = false"},"status":-1},{"failures":[],"tindex":"056532a6-8b88-11e6-b205-439dfd8900b7","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:1182","type":"CtInvocationImpl","sourcecode":"result.append(\" GMT+\")"},"variableMap":{"result":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeGlobal:425","type":"CtInvocationImpl","sourcecode":"sb.append(((char)(hc)))"},"status":-1},{"failures":[],"tindex":"056532a7-8b88-11e6-b205-9b8df0253da0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:5407","type":"CtIfImpl","sourcecode":"if ((locals[i]) == 0) {\n    short = ((short)(i));\n    if ((short) < (short))\n        short = short;\n    \n    return ((short)(result));\n} "},"status":-1}],"header":{"groupId":"r","transformationCount":7,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"fc0703f4-89b6-11e6-a62c-4d6fdebe5783","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:1486","type":"CtForImpl","sourcecode":"for ( ; cur > 0 ; --cur , ++offset) {\n    int int = charAt((cur - 1));\n    if (org.mozilla.javascript.ScriptRuntime.isJSLineTerminator(c)) {\n        start = cur;\n        break;\n    } \n}"},"status":-1},{"failures":[],"tindex":"fc077925-89b6-11e6-a62c-25b246e4286d","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.commonjs.module.provider.ParsedContentType:41","type":"CtIfImpl","sourcecode":"if ((encoding.charAt(0)) == '\"') {\n    encoding = encoding.substring(1);\n} "},"variableMap":{"encoding":"messageId"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:3908","type":"CtTryImpl","sourcecode":"try {\n    formatString = rb.getString(messageId);\n} catch (java.util.MissingResourceException mre) {\n    throw new java.lang.RuntimeException((\"no message resource found for message property \" + messageId));\n}"},"status":-1},{"failures":[],"tindex":"fc077926-89b6-11e6-a62c-ddfd031721c3","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:1337","type":"CtIfImpl","sourcecode":"if (i < 0)\n    org.mozilla.javascript.Kit.codeBug();\n"},"variableMap":{"i":"org.mozilla.javascript.ScriptableObject.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:220","type":"CtInvocationImpl","sourcecode":"desc.defineProperty(\"writable\", ((attributes & (org.mozilla.javascript.ScriptableObject.org.mozilla.javascript.ScriptableObject.int)) == 0), org.mozilla.javascript.ScriptableObject.org.mozilla.javascript.ScriptableObject.int)"},"status":-1},{"failures":[],"tindex":"fc077927-89b6-11e6-a62c-61dbf607de72","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.FunctionObject:93","type":"CtAssignmentImpl","sourcecode":"org.mozilla.javascript.FunctionObject.this.java.lang.String = name"},"variableMap":{"functionName":"obj","name":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.serialize.ScriptableOutputStream:84","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.Object, java.lang.String>.put(obj, name)"},"status":-1},{"failures":[],"tindex":"fc077928-89b6-11e6-a62c-6d8d455e97d0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.Codegen:1678","type":"CtAssignmentImpl","sourcecode":"short = getNewWordLocal()"},"status":-1},{"failures":[],"tindex":"fc07a039-89b6-11e6-a62c-61bcf58b6f41","series":0,"name":"replace","transplant":{"position":"org.mozilla.classfile.ClassFileWriter:2418","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.classfile.ClassFileWriter:411","type":"CtLocalVariableImpl","sourcecode":"int int = chunk[2]"},"status":-1},{"failures":[],"tindex":"fc07a03a-89b6-11e6-a62c-81b00ca27fd2","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeDate:1702","type":"CtIfImpl","sourcecode":"if (c == 'D') {\n    X = \"toLocaleDateString\";\n    id = org.mozilla.javascript.NativeDate.org.mozilla.javascript.NativeDate.int;\n} else if (c == 'T') {\n    X = \"toLocaleTimeString\";\n    id = org.mozilla.javascript.NativeDate.org.mozilla.javascript.NativeDate.int;\n} "},"variableMap":{"org.mozilla.javascript.NativeDate.Id_toLocaleDateString":"offset","c":"org.mozilla.javascript.regexp.NativeRegExp.INDEX_LEN","X":"input","id":"cp","org.mozilla.javascript.NativeDate.Id_toLocaleTimeString":"op"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1768","type":"CtSwitchImpl","sourcecode":"switch (op) {\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((gData.int) != 0) {\n            if ((!(gData.boolean)) || (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(((gData.int) - 1)))))) {\n                break;\n            } \n        } \n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if ((gData.int) != end) {\n            if ((!(gData.boolean)) || (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(gData.int))))) {\n                break;\n            } \n        } \n        result = true;\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = (((gData.int) == 0) || (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(((gData.int) - 1)))))) ^ (!(((gData.int) < end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int)))));\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        result = (((gData.int) == 0) || (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(((gData.int) - 1)))))) ^ (((gData.int) < end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int))));\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isLineTerm(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isDigit(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isDigit(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isWord(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (org.mozilla.javascript.regexp.NativeRegExp.isREWhiteSpace(input.charAt(gData.int)))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        if (((gData.int) != end) && (!(org.mozilla.javascript.regexp.NativeRegExp.isREWhiteSpace(input.charAt(gData.int))))) {\n            result = true;\n            (gData.int)++;\n        } \n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            parenIndex = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.backrefMatcher(gData, parenIndex, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            length = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.flatNMatcher(gData, offset, length, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)((program[(pc++)]) & 255));\n            if (((gData.int) != end) && ((input.charAt(gData.int)) == matchCh)) {\n                result = true;\n                (gData.int)++;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            offset = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            length = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            result = org.mozilla.javascript.regexp.NativeRegExp.flatNIMatcher(gData, offset, length, input, end);\n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)((program[(pc++)]) & 255));\n            if ((gData.int) != end) {\n                char char = input.charAt(gData.int);\n                if ((matchCh == c) || ((org.mozilla.javascript.regexp.NativeRegExp.upcase(matchCh)) == (org.mozilla.javascript.regexp.NativeRegExp.upcase(c)))) {\n                    result = true;\n                    (gData.int)++;\n                } \n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if (((gData.int) != end) && ((input.charAt(gData.int)) == matchCh)) {\n                result = true;\n                (gData.int)++;\n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            matchCh = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) != end) {\n                char char = input.charAt(gData.int);\n                if ((matchCh == c) || ((org.mozilla.javascript.regexp.NativeRegExp.upcase(matchCh)) == (org.mozilla.javascript.regexp.NativeRegExp.upcase(c)))) {\n                    result = true;\n                    (gData.int)++;\n                } \n            } \n        }\n        break;\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        {\n            index = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n            pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n            if ((gData.int) != end) {\n                if (org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][index], input.charAt(gData.int))) {\n                    (gData.int)++;\n                    result = true;\n                    break;\n                } \n            } \n        }\n        break;\n    default :\n        throw org.mozilla.javascript.Kit.codeBug();\n}"},"status":-1},{"failures":[],"tindex":"fc07ee5b-89b6-11e6-a62c-37961336f3e7","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.DToA:675","type":"CtAssignmentImpl","sourcecode":"eps = org.mozilla.javascript.DToA.setWord0(eps, ((org.mozilla.javascript.DToA.word0(eps)) - (((org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int) - 1) * (org.mozilla.javascript.DToA.org.mozilla.javascript.DToA.int))))"},"variableMap":{"org.mozilla.javascript.DToA.Exp_msk1":"length","eps":"end","org.mozilla.javascript.DToA.P":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeString:703","type":"CtAssignmentImpl","sourcecode":"end = length"},"status":-1},{"failures":[],"tindex":"fc08156c-89b6-11e6-a62c-b527663d3b07","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.NativeGlobal:455","type":"CtAssignmentImpl","sourcecode":"end = k + 2"},"variableMap":{"end":"state","k":"MIXED_AFTER_54"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptRuntime:571","type":"CtAssignmentImpl","sourcecode":"state = MIXED_AFTER_54"},"status":-1},{"failures":[],"tindex":"fc08156d-89b6-11e6-a62c-591952643597","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeDate:1290","type":"CtInvocationImpl","sourcecode":"org.mozilla.javascript.NativeDate.appendMonthName(result, org.mozilla.javascript.NativeDate.MonthFromTime(date))"},"status":-1}],"header":{"groupId":"r","transformationCount":10,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
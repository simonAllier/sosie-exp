{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"63ed9f17-8aa6-11e6-9cff-a3f938677607","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeJSON:263","type":"CtInvocationImpl","sourcecode":"wrapper.setParentScope(scope)"},"status":-1},{"failures":[],"tindex":"63ed9f18-8aa6-11e6-9cff-39d4a80e9036","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.NativeArray:191","type":"CtSwitchImpl","sourcecode":"switch (id) {\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"constructor\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 0;\n        s = \"toString\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 0;\n        s = \"toLocaleString\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 0;\n        s = \"toSource\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"join\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 0;\n        s = \"reverse\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"sort\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"push\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 0;\n        s = \"pop\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 0;\n        s = \"shift\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"unshift\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 2;\n        s = \"splice\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"concat\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 2;\n        s = \"slice\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"indexOf\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"lastIndexOf\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"every\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"filter\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"forEach\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"map\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"some\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"find\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"findIndex\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"reduce\";\n        break;\n    case org.mozilla.javascript.NativeArray.org.mozilla.javascript.NativeArray.int :\n        arity = 1;\n        s = \"reduceRight\";\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException(java.lang.String.valueOf(id));\n}"},"status":-1},{"failures":[],"tindex":"63edc629-8aa6-11e6-9cff-a940bd0b5907","series":0,"name":"replace","transplant":{"position":"org.mozilla.javascript.DToA:142","type":"CtIfImpl","sourcecode":"if ((x & 1073741824) == 0)\n    return 32;\n"},"variableMap":{"x":"stringBufferTop"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.TokenStream:505","type":"CtIfImpl","sourcecode":"if ((c == '\"') || (c == '\\'')) {\n    int = c;\n    int = 0;\n    c = getChar(false);\n    strLoop : while (c != (int)) {\n        if ((c == '\\n') || (c == (org.mozilla.javascript.TokenStream.org.mozilla.javascript.TokenStream.int))) {\n            ungetChar(c);\n            int = int;\n            org.mozilla.javascript.Parser.addError(\"msg.unterminated.string.lit\");\n            return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n        } \n        if (c == '\\\\') {\n            int int;\n            c = getChar();\n            switch (c) {\n                case 'b' :\n                    c = '\\b';\n                    break;\n                case 'f' :\n                    c = '\\f';\n                    break;\n                case 'n' :\n                    c = '\\n';\n                    break;\n                case 'r' :\n                    c = '\\r';\n                    break;\n                case 't' :\n                    c = '\\t';\n                    break;\n                case 'v' :\n                    c = 11;\n                    break;\n                case 'u' :\n                    int int = int;\n                    addToString('u');\n                    escapeVal = 0;\n                    for (int int = 0 ; i != 4 ; ++i) {\n                        c = getChar();\n                        escapeVal = org.mozilla.javascript.Kit.xDigitToInt(c, escapeVal);\n                        if (escapeVal < 0) {\n                            continue strLoop;\n                        } \n                        addToString(c);\n                    }\n                    int = escapeStart;\n                    c = escapeVal;\n                    break;\n                case 'x' :\n                    c = getChar();\n                    escapeVal = org.mozilla.javascript.Kit.xDigitToInt(c, 0);\n                    if (escapeVal < 0) {\n                        addToString('x');\n                        continue strLoop;\n                    } else {\n                        int int = c;\n                        c = getChar();\n                        escapeVal = org.mozilla.javascript.Kit.xDigitToInt(c, escapeVal);\n                        if (escapeVal < 0) {\n                            addToString('x');\n                            addToString(c1);\n                            continue strLoop;\n                        } else {\n                            c = escapeVal;\n                        }\n                    }\n                    break;\n                case '\\n' :\n                    c = getChar();\n                    continue strLoop;\n                default :\n                    if (('0' <= c) && (c < '8')) {\n                        int int = c - '0';\n                        c = getChar();\n                        if (('0' <= c) && (c < '8')) {\n                            val = ((8 * val) + c) - '0';\n                            c = getChar();\n                            if ((('0' <= c) && (c < '8')) && (val <= 31)) {\n                                val = ((8 * val) + c) - '0';\n                                c = getChar();\n                            } \n                        } \n                        ungetChar(c);\n                        c = val;\n                    } \n            }\n        } \n        addToString(c);\n        c = getChar(false);\n    }\n    java.lang.String java.lang.String = getStringFromBuffer();\n    org.mozilla.javascript.TokenStream.this.java.lang.String = ((java.lang.String)(org.mozilla.javascript.ObjToIntMap.intern(str)));\n    return org.mozilla.javascript.Token.org.mozilla.javascript.Token.int;\n} "},"status":-3},{"failures":[],"tindex":"63edc62a-8aa6-11e6-9cff-17f2e6bb2079","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.Parser:1440","type":"CtInvocationImpl","sourcecode":"catchNode.setVarName(varName)"},"variableMap":{"varName":"node","catchNode":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.optimizer.OptTransformer:80","type":"CtIfImpl","sourcecode":"if (((ofn != null) && (argCount == (ofn.org.mozilla.javascript.ast.FunctionNode.getParamCount()))) && (!(ofn.org.mozilla.javascript.ast.FunctionNode.requiresActivation()))) {\n    if (argCount <= 32) {\n        node.putProp(org.mozilla.javascript.Node.org.mozilla.javascript.Node.int, ofn);\n        if (!(ofn.isTargetOfDirectCall())) {\n            int int = org.mozilla.javascript.ObjArray.size();\n            org.mozilla.javascript.ObjArray.add(ofn);\n            ofn.setDirectTargetIndex(index);\n        } \n    } \n} "},"status":-1},{"failures":[],"tindex":"63eded3b-8aa6-11e6-9cff-cbde418a8d4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.ScriptableObject:2864","type":"CtAssignmentImpl","sourcecode":"prev = slot"},"status":-1},{"failures":[],"tindex":"63eded3c-8aa6-11e6-9cff-3de20e26c02c","series":0,"name":"add","transplant":{"position":"org.mozilla.javascript.ast.AstRoot:142","type":"CtIfImpl","sourcecode":"if (type == (org.mozilla.javascript.Token.org.mozilla.javascript.Token.int))\n    return true;\n"},"variableMap":{"type":"continuationOp","org.mozilla.javascript.Token.SCRIPT":"min"},"type":"adrStmt","transplantationPoint":{"position":"org.mozilla.javascript.regexp.NativeRegExp:1972","type":"CtIfImpl","sourcecode":"if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n    result = match >= 0;\n    if (result)\n        pc = match;\n    \n} else {\n    switchStatement : switch (op) {\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                char char = ((char)(org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc)));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                if ((gData.int) == end) {\n                    result = false;\n                    break;\n                } \n                char char = input.charAt(gData.int);\n                if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                    if ((c != matchCh1) && (!(org.mozilla.javascript.regexp.NativeRegExp.classMatcher(gData, gData.org.mozilla.javascript.regexp.RECompiled.org.mozilla.javascript.regexp.RECharSet[][matchCh2], c)))) {\n                        result = false;\n                        break;\n                    } \n                } else {\n                    if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))\n                        c = org.mozilla.javascript.regexp.NativeRegExp.upcase(c);\n                    \n                    if ((c != matchCh1) && (c != matchCh2)) {\n                        result = false;\n                        break;\n                    } \n                }\n            }\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                int int = gData.int;\n                if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, true);\n                    if (match < 0) {\n                        op = program[(nextpc++)];\n                        pc = nextpc;\n                        continue;\n                    } \n                    result = true;\n                    pc = match;\n                    op = program[(pc++)];\n                } \n                byte byte = program[(nextpc++)];\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, nextop, nextpc, startcp, continuationOp, continuationPc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                pc += offset;\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                gData.setParens(parenIndex, gData.int, 0);\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                int int = gData.parensIndex(parenIndex);\n                gData.setParens(parenIndex, cap_index, ((gData.int) - cap_index));\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                if ((org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) && ((org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false)) < 0)) {\n                    result = false;\n                    break;\n                } \n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int = pc + (org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc));\n                pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                op = program[(pc++)];\n                if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(op)) {\n                    int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, op, program, pc, end, false);\n                    if ((match >= 0) && ((program[match]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte))) {\n                        result = false;\n                        break;\n                    } \n                } \n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, 0, 0, gData.int, gData.org.mozilla.javascript.regexp.REBackTrackData, continuationOp, continuationPc);\n                org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, nextpc);\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                gData.int = state.int;\n                gData.org.mozilla.javascript.regexp.REBackTrackData = state.org.mozilla.javascript.regexp.REBackTrackData;\n                continuationPc = state.int;\n                continuationOp = state.int;\n                if (op == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte)) {\n                    result = !result;\n                } \n            }\n            break;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int;\n                int int;\n                boolean boolean = false;\n                switch (op) {\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 0;\n                        max = -1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 1;\n                        max = -1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = 0;\n                        max = 1;\n                        break;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        greedy = true;\n                    case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n                        min = org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        max = (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc)) - 1;\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        break;\n                    default :\n                        throw org.mozilla.javascript.Kit.codeBug();\n                }\n                org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, min, max, gData.int, null, continuationOp, continuationPc);\n                if (greedy) {\n                    org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                    op = program[(pc++)];\n                } else {\n                    if (min != 0) {\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        pc += 3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        op = program[(pc++)];\n                    } else {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                        org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                        op = program[(pc++)];\n                    }\n                }\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            result = true;\n            pc = continuationPc;\n            op = continuationOp;\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                int int;\n                int int;\n                do {\n                    org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                    if (!result) {\n                        if ((state.int) == 0)\n                            result = true;\n                        \n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                        result = false;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    int int = state.int;\n                    int int = state.int;\n                    if (new_min != 0)\n                        new_min--;\n                    \n                    if (new_max != (-1))\n                        new_max--;\n                    \n                    if (new_max == 0) {\n                        result = true;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                        break switchStatement;\n                    } \n                    nextpc = pc + (3 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int));\n                    nextop = program[nextpc];\n                    int int = gData.int;\n                    if (org.mozilla.javascript.regexp.NativeRegExp.reopIsSimple(nextop)) {\n                        nextpc++;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.simpleMatch(gData, input, nextop, program, nextpc, end, true);\n                        if (match < 0) {\n                            result = new_min == 0;\n                            continuationPc = state.int;\n                            continuationOp = state.int;\n                            pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                            pc += org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc);\n                            break switchStatement;\n                        } \n                        result = true;\n                        nextpc = match;\n                    } \n                    continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                    continuationPc = pc;\n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, startcp, null, state.int, state.int);\n                    if (new_min == 0) {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc, startcp, state.int, state.int);\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, (pc + (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int)));\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                    } \n                } while ((program[nextpc]) == (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte) );\n                pc = nextpc;\n                op = program[(pc++)];\n            }\n            continue;\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            {\n                org.mozilla.javascript.regexp.REProgState org.mozilla.javascript.regexp.REProgState = org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                if (!result) {\n                    if (((state.int) == (-1)) || ((state.int) > 0)) {\n                        org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, state.int, state.int, gData.int, null, state.int, state.int);\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                        op = program[(pc++)];\n                        continue;\n                    } else {\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        break;\n                    }\n                } else {\n                    if (((state.int) == 0) && ((gData.int) == (state.int))) {\n                        result = false;\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        break;\n                    } \n                    int int = state.int;\n                    int int = state.int;\n                    if (new_min != 0)\n                        new_min--;\n                    \n                    if (new_max != (-1))\n                        new_max--;\n                    \n                    org.mozilla.javascript.regexp.NativeRegExp.pushProgState(gData, new_min, new_max, gData.int, null, state.int, state.int);\n                    if (new_min != 0) {\n                        continuationOp = org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte;\n                        continuationPc = pc;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int;\n                        int int = org.mozilla.javascript.regexp.NativeRegExp.getIndex(program, pc);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        for (int int = 0 ; k < parenCount ; k++) {\n                            gData.setParens((parenIndex + k), (-1), 0);\n                        }\n                        op = program[(pc++)];\n                    } else {\n                        continuationPc = state.int;\n                        continuationOp = state.int;\n                        org.mozilla.javascript.regexp.NativeRegExp.pushBackTrackState(gData, org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte, pc);\n                        org.mozilla.javascript.regexp.NativeRegExp.popProgState(gData);\n                        pc += 2 * (org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.int);\n                        pc = pc + (org.mozilla.javascript.regexp.NativeRegExp.getOffset(program, pc));\n                        op = program[(pc++)];\n                    }\n                    continue;\n                }\n            }\n        case org.mozilla.javascript.regexp.NativeRegExp.org.mozilla.javascript.regexp.NativeRegExp.byte :\n            return true;\n        default :\n            throw org.mozilla.javascript.Kit.codeBug(\"invalid bytecode\");\n    }\n}"},"status":-1}],"header":{"groupId":"r","transformationCount":6,"projectType":"maven","artifactId":"r","generatorVersion":"1.0","version":"1.0-SNAPSHOT"}}
{"failureDictionary":{"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemoveByEntrySet":251,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":334,"org.apache.commons.collections4.map.LinkedMapTest.testValuesRemoveChangesMap":16,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastEntrySet":492,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastEntrySet":118,"org.apache.commons.collections4.map.LinkedMapTest.testMapPut":15,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetIteratorRemoveChangesMap":259,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":378,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRemoveChangesMap":445,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking":216,"org.apache.commons.collections4.map.HashedMapTest.testValuesIteratorRemoveChangesMap":418,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":360,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testShadok":5,"org.apache.commons.collections4.map.HashedMapTest.testValuesRemoveChangesMap":237,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":133,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapGet":377,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFirstKey":80,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.initializationError":40,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":213,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesClearChangesMap":382,"org.apache.commons.collections4.map.LRUMapTest.testSerializeDeserializeThenCompare":539,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsContract":145,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedRemove":170,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapRemove":591,"org.apache.commons.collections4.trie.PatriciaTrieTest.testValuesRemoveChangesMap":592,"org.apache.commons.collections4.map.HashedMapTest.testEmptyMapCompatibility":533,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorAdd":388,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":185,"org.apache.commons.collections4.map.LRUMapTest.testFailFastKeySet":428,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":109,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveChangesMap":405,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRetainAll":477,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRemoveChangesMap":486,"org.apache.commons.collections4.set.CompositeSetTest.testObjectEqualsSelf":166,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testFailFastValues":289,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddByIterator":395,"org.apache.commons.collections4.map.LinkedMapTest.testMapGet":67,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsKey":44,"org.apache.commons.collections4.map.CompositeMapTest.testObjectEqualsSelf":144,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetIteratorRemoveChangesMap":408,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":71,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testEmptyQueueCompatibility":20,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesRemoveChangesMap":459,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":379,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapClear":354,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAdd":161,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":7,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testPutAll":63,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContainsAll":569,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":183,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":323,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":341,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":76,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":283,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiKeySetValuesOrder":349,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":397,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":294,"org.apache.commons.collections4.map.MultiKeyMapTest.testSimpleSerialization":532,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":372,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveChangesMap":502,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIterator":165,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":338,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":470,"org.apache.commons.collections4.map.LinkedMapTest.testEmptyMapCompatibility":545,"org.apache.commons.collections4.map.HashedMapTest.testFailFastKeySet":414,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesRetainAll":366,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveAll":450,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRemoveChangesMap":484,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesClearChangesMap":92,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetIteratorRemoveChangesMap":478,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRemoveAll":303,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":215,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2":574,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesIteratorRemoveChangesMap":53,"org.apache.commons.collections4.bag.HashBagTest.testBagRetainAll":31,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRemoveChangesMap":302,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRemoveChangesMap":447,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testSerializeDeserializeThenCompare":280,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetIteratorRemoveChangesMap":487,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetIteratorRemoveChangesMap":448,"org.apache.commons.collections4.map.LRUMapTest.testKeySetIteratorRemoveChangesMap":434,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":132,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRemoveAll":101,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":199,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorAdd":387,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":114,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove1":416,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":72,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove2":417,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastKeySet":119,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToString":560,"org.apache.commons.collections4.map.LRUMapTest.testEmptyMapCompatibility":537,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":223,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddBefore":390,"org.apache.commons.collections4.map.CompositeMapTest.testMapHashCode":125,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemoveAll":512,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":135,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":312,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":23,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAll":205,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapGet":88,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContainsAll":173,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRetainAll":136,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetIteratorRemoveChangesMap":139,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapClear":373,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemoveAll":55,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove1":443,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToString":570,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutAll":50,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemoveAll":155,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesIteratorRemoveChangesMap":317,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastValues":120,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":299,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPut":252,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":27,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIsEmpty":157,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetIteratorRemoveChangesMap":466,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testFailFastValues":370,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":68,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove2":444,"org.apache.commons.collections4.map.HashedMapTest.testSerializeDeserializeThenCompare":535,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveAll":327,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesRemoveChangesMap":364,"org.apache.commons.collections4.map.MultiKeyMapTest.testFullMapCompatibility":530,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRetainAll":421,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":522,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray":178,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRemoveAll":32,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMakeMap":86,"org.apache.commons.collections4.map.ReferenceMapTest.testValuesIteratorRemoveChangesMap":460,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemoveAll":261,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetClearChangesMap":94,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapGet":358,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPut":49,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":279,"org.apache.commons.collections4.BagUtilsTest.testUnmodifiableBag":232,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testSerializeDeserializeThenCompare":543,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testMinimal":3,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":8,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove2":458,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove1":457,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":454,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveAll":503,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContainsAll":556,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":325,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveChangesMap":326,"org.apache.commons.collections4.CollectionUtilsTest.union":553,"org.apache.commons.collections4.list.SetUniqueListTest.testAdd":200,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiKeySetValuesOrder":368,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContainsAll":562,"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation2":241,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":282,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRemoveChangesMap":433,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":321,"org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsUnionMinusIntersection":554,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRetainAll":411,"org.apache.commons.collections4.map.LinkedMapTest.testRemoveByIndex":66,"org.apache.commons.collections4.map.LinkedMapTest.testIndexOf":528,"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation4":78,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":371,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":39,"org.apache.commons.collections4.map.Flat3MapTest.testMapIteratorSetValue2":246,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetRetainAll":105,"org.apache.commons.collections4.map.Flat3MapTest.testMapIteratorSetValue3":247,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRetainAll":504,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAddAll":159,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":359,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":402,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testLocaleIndependence":64,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIterator":179,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextAddIndex1ByList":393,"org.apache.commons.collections4.map.HashedMapTest.testFailFastValues":415,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":523,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":296,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesIteratorRemoveChangesMap":348,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":9,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetRemoveChangesMap":258,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":353,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate":580,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRetainAll":26,"org.apache.commons.collections4.map.Flat3MapTest.testMapIteratorSetValue1":245,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray2":174,"org.apache.commons.collections4.PredicateUtilsTest.testAsPredicateTransformer":573,"org.apache.commons.collections4.map.MultiKeyMapTest.testEmptyMapCompatibility":529,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapSize":43,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testExecution":2,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":404,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":442,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":403,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":266,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesClearChangesMap":363,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContainsAll":566,"org.apache.commons.collections4.map.HashedMapTest.testMapRemove":236,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddBegin":599,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastEntrySet":439,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemove":162,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":201,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":207,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemove2":255,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemove1":254,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetIteratorRemoveChangesMap":263,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesRemoveChangesMap":383,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":309,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRemoveAll":346,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRetainAll":304,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutAll":517,"org.apache.commons.collections4.map.LinkedMapTest.testSimpleSerialization":548,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveAll":436,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionSize":271,"org.apache.commons.collections4.map.LinkedMapTest.testValuesIteratorRemoveChangesMap":17,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":293,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiKeySetValuesOrder":306,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":381,"org.apache.commons.collections4.map.HashedMapTest.testFullMapCompatibility":534,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRemoveChangesMap":345,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":495,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastKeySet":400,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicateEx2":578,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRetainAll":56,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicateEx3":579,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":142,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testDecorateFactory":231,"org.apache.commons.collections4.map.LRUMapTest.testFailFastEntrySet":427,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":70,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":298,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveChangesMap":407,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":219,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveChangesMap":463,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRetainAll":33,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToString":572,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":6,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":59,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":270,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":138,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":267,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetRemoveChangesMap":473,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRetainAll":508,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToString":558,"org.apache.commons.collections4.set.MapBackedSetTest.testSimpleSerialization":550,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":123,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddAfter":597,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutNullKey":90,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":10,"org.apache.commons.collections4.map.HashedMapTest.testKeySetIteratorRemoveChangesMap":419,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":356,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiKeySetValuesOrder":287,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":333,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastKeySet":493,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastKeySet":440,"org.apache.commons.collections4.map.LRUMapTest.testValuesRemoveChangesMap":12,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":121,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":122,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":295,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRemoveAll":594,"org.apache.commons.collections4.map.HashedMapTest.testSimpleSerialization":536,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":134,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveAll":489,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":555,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRemoveChangesMap":314,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionClear":277,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":313,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemove":249,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRetainAll":102,"org.apache.commons.collections4.ClosureUtilsTest.testDoWhileClosure":285,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":343,"org.apache.commons.collections4.map.LRUMapTest.testFullMapCompatibility":538,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":291,"org.apache.commons.collections4.MapUtilsTest.testVerbosePrintSelfReference":519,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveChangesMap":435,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":14,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaIterator":115,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":355,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemoveChangesMap":260,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":228,"org.apache.commons.collections4.collection.IndexedCollectionTest.testDecoratedCollectionIsIndexedOnCreation":180,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":107,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemoveByKeySet":250,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapClear":87,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromValues":426,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRepeatedSerialization":18,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":117,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToString":557,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove2":432,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testPreviousKey":82,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove1":431,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRemoveChangesMap":461,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":29,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping0":582,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastValues":85,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping1":583,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping2":584,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping3":585,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":163,"org.apache.commons.collections4.map.MultiKeyMapTest.testSerializeDeserializeThenCompare":531,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":214,"org.apache.commons.collections4.set.ListOrderedSetTest.testDecorator":581,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetIteratorRemoveChangesMap":57,"org.apache.commons.collections4.MapUtilsTest.testDebugPrintSelfReference":520,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRetainAll":35,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToString":561,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRetainAll":451,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapRemove":51,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":369,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testLastKey":81,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":281,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testFailFastValues":351,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray":164,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":226,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastKeySet":468,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesClearChangesMap":344,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToString":567,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedAdd":175,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastValues":455,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":485,"org.apache.commons.collections4.ClosureUtilsTest.testWhileClosure":284,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetIteratorRemoveChangesMap":438,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testSimpleSerialization":544,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":151,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":73,"org.apache.commons.collections4.map.Flat3MapTest.testEntryIteratorSetValue2":243,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":446,"org.apache.commons.collections4.map.Flat3MapTest.testEntryIteratorSetValue3":244,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":307,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveAll":476,"org.apache.commons.collections4.map.Flat3MapTest.testEntryIteratorSetValue1":242,"org.apache.commons.collections4.map.ReferenceMapTest.testMapRemove":456,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testLength":4,"org.apache.commons.collections4.map.LRUMapTest.testValuesIteratorRemoveChangesMap":13,"org.apache.commons.collections4.map.HashedMapTest.testMapGet":60,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPut":74,"org.apache.commons.collections4.bag.TreeBagTest.testBagContainsAll":571,"org.apache.commons.collections4.map.LRUMapTest.testSimpleSerialization":540,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveAll":129,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":137,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRetainAll":160,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":225,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":212,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastEntrySet":479,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":220,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":69,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":36,"org.apache.commons.collections4.set.MapBackedSetTest.testSerializeDeserializeThenCompare":549,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":276,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":308,"org.apache.commons.collections4.map.HashedMapTest.testFailFastEntrySet":413,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAdd":601,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove2":472,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemove":514,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove1":471,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":211,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesRemoveAll":384,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddByIterator":396,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesIteratorRemoveChangesMap":406,"org.apache.commons.collections4.trie.PatriciaTrieTest.initializationError":58,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveChangesMap":488,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":278,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastValues":481,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastKeySet":84,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFullMapCompatibility":542,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":506,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":290,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetIteratorRemoveChangesMap":501,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapGet":65,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":525,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":324,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":198,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testSimpleSerialization":22,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsSelfHashCode":146,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":274,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveAll":420,"org.apache.commons.collections4.iterators.IteratorChainTest.testFullIterator":113,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRetainAll":328,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":357,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove1":496,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":292,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove2":497,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove3":518,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetIteratorRemoveChangesMap":130,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveChangesMap":449,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":148,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove1":482,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToString":565,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":375,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesIteratorRemoveChangesMap":329,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove2":483,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":143,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCircularFifoQueueCircular":197,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapHashCode":47,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutAll":75,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRetainAll":262,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":210,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveAll":464,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRetainAll":316,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRetainAll":437,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRetainAll":595,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":224,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveChangesMap":475,"org.apache.commons.collections4.bag.HashBagTest.testBagContainsAll":564,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":320,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":221,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking2":218,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray2":152,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":380,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastEntrySet":399,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromEntrySet":424,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIteratorRemove":154,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testNextKey":41,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":310,"org.apache.commons.collections4.iterators.IteratorChainTest.testIterator":111,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":350,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":268,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":131,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":206,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":362,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContains":156,"org.apache.commons.collections4.map.Flat3MapTest.testMapPut":516,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testSize":587,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastEntrySet":467,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":342,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromMapIterator":423,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveChangesMap":239,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastValues":401,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":204,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetIteratorRemoveChangesMap":412,"org.apache.commons.collections4.map.MultiValueMapTest.testValues":116,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRetainAll":24,"org.apache.commons.collections4.collection.IndexedCollectionTest.testAddedObjectsCanBeRetrievedByKey":181,"org.apache.commons.collections4.map.LinkedMapTest.testSerializeDeserializeThenCompare":547,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesRemoveAll":365,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":374,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutNullValue":91,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError9":196,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError8":195,"org.apache.commons.collections4.map.Flat3MapTest.testMapGet":79,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError5":192,"org.apache.commons.collections4.bag.TreeBagTest.testBagRetainAll":38,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError4":191,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError7":194,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError6":193,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError1":188,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError3":190,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetIteratorRemoveChangesMap":474,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError2":189,"org.apache.commons.collections4.list.SetUniqueListTest.testListIterator":203,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapToString":48,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":187,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesIteratorRemoveChangesMap":386,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":511,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":265,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetIteratorRemoveChangesMap":505,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesRemoveChangesMap":256,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddIndex1ByList":392,"org.apache.commons.collections4.CollectionUtilsTest.testMatchesAll":264,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testReset":586,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":209,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":337,"org.apache.commons.collections4.bag.HashBagTest.testBagRemoveAll":30,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContainsAll":559,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToString":153,"org.apache.commons.collections4.trie.PatriciaTrieTest.testPrefixMapRemoval":590,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll1":233,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetIteratorRemoveChangesMap":422,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEqualsAndHashCode":596,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContains":176,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":352,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToString":563,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll4":235,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":234,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll2":398,"org.apache.commons.collections4.map.LRUMapTest.testFailFastValues":429,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRemoveChangesMap":52,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetIteratorRemoveChangesMap":452,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesIteratorRemoveChangesMap":305,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiKeySetValuesOrder":330,"org.apache.commons.collections4.trie.PatriciaTrieTest.testPrefixMap":589,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2Ex3":577,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2Ex2":576,"org.apache.commons.collections4.bag.TreeBagTest.testBagRemoveAll":37,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapEquals":46,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":409,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":336,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapIsEmpty":42,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEmptyMapCompatibility":541,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesIteratorRemoveChangesMap":367,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetIteratorRemoveChangesMap":462,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove1":126,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":202,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemoveAll":28,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove3":128,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove2":127,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":275,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetIteratorRemoveChangesMap":54,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":217,"org.apache.commons.collections4.map.Flat3MapTest.testValuesRemoveChangesMap":498,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetRemoveAll":104,"org.apache.commons.collections4.map.Flat3MapTest.testClone4":77,"org.apache.commons.collections4.map.Flat3MapTest.testKeySetRemoveChangesMap":500,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsSelfHashCode":168,"org.apache.commons.collections4.map.Flat3MapTest.testClone2":240,"org.apache.commons.collections4.map.LinkedMapTest.testFullMapCompatibility":546,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyIterator":112,"org.apache.commons.collections4.collection.CompositeCollectionTest.testAddAllToCollection":169,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":227,"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastEntrySet":453,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":322,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFullMapCompatibility":89,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetClearChangesMap":93,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRemoveAll":315,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":521,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapRemove":253,"org.apache.commons.collections4.map.Flat3MapTest.testValuesIteratorRemoveChangesMap":499,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":340,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiPut":248,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemoveChangesMap":106,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastKeySet":480,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsValue":45,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testRemoving1":588,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddMiddle":600,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToString":272,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":526,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray":186,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":509,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastEntrySet":83,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":269,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove3":100,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":319,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove2":99,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemoveAll":34,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove1":98,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testNullHandling":61,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains1":95,"org.apache.commons.collections4.collection.CompositeCollectionTest.testIterator":172,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains2":96,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":524,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains3":97,"org.apache.commons.collections4.iterators.IteratorChainTest.testFirstIteratorIsEmptyBug":108,"org.apache.commons.collections4.map.CompositeMapTest.testSerializeDeserializeThenCompare":147,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":184,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testSerializeDeserializeThenCompare":21,"org.apache.commons.collections4.CollectionUtilsTest.forAllButLastDoCollection":286,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":339,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddIndex1ByList":394,"org.apache.commons.collections4.collection.CompositeCollectionTest.testToCollection":171,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":273,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":230,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesIteratorRemoveChangesMap":257,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":361,"org.apache.commons.collections4.map.HashedMapTest.testKeySetRemoveChangesMap":238,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":297,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetRemoveChangesMap":103,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesClearChangesMap":301,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastValues":469,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":229,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorConcurrentModification":389,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":335,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":515,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":527,"org.apache.commons.collections4.map.LRUMapTest.testMapPut":11,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRetainAll":347,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddEnd":598,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":140,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":208,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToString":568,"org.apache.commons.collections4.trie.PatriciaTrieTest.testValuesIteratorRemoveChangesMap":593,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRetainAll":465,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemove":110,"org.apache.commons.collections4.map.Flat3MapTest.testFailFastValues":494,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRetainAll":513,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":222,"org.apache.commons.collections4.set.MapBackedSet2Test.testSimpleSerialization":552,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiKeySetValuesOrder":318,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequenceWithString":1,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionClear":158,"org.apache.commons.collections4.map.CompositeMapTest.testValuesIteratorRemoveChangesMap":124,"org.apache.commons.collections4.set.CompositeSetTest.testSetEquals":149,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":311,"org.apache.commons.collections4.set.CompositeSetTest.testSetHashCode":150,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequence":0,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRetainAll":490,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":300,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRemoveAll":25,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testCaseInsensitive":62,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":288,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIsEmpty":177,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":141,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromKeySet":425,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":376,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemoveAll":507,"org.apache.commons.collections4.PredicateUtilsTest.testAsPredicateTransformerEx2":575,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesRetainAll":385,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testEmptyQueueSerialization":19,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":430,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":331,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testFailFastValues":332,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsContract":167,"org.apache.commons.collections4.collection.IndexedCollectionTest.testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately":182,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastValues":441,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetIteratorRemoveChangesMap":491,"org.apache.commons.collections4.set.MapBackedSet2Test.testSerializeDeserializeThenCompare":551,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveAll":410,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddNext":391,"org.apache.commons.collections4.set.MapBackedSet2Test.testOrdering":510},"transformations":[{"failures":[],"tindex":"5ec2bdfb-13d9-11e5-a42d-e38da93dc709","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:254","type":"CtWhileImpl","sourcecode":"while ((java.util.ListIterator<?>.previousIndex()) >= 0) {\n    java.util.ListIterator<?>.previous();\n}"},"variableMap":{"li":"iterator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.IteratorUtils:1025","type":"CtWhileImpl","sourcecode":"while (java.util.Iterator<? extends E>.hasNext()) {\n    java.util.List<E>.add(java.util.Iterator<? extends E>.next());\n}"},"status":-2},{"failures":[],"tindex":"5ec2e50c-13d9-11e5-a42d-472e2e266a44","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:73","type":"CtIfImpl","sourcecode":"if (T == null) {\n    throw new org.apache.commons.collections4.FunctorException(\"Input Object must not be null\");\n} "},"status":-2},{"failures":[],"tindex":"5ec2e50d-13d9-11e5-a42d-9b3c4cc847b6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiKeyMap:558","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object))) {\n        return org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n}"},"variableMap":{"key1":"key2","next":"entry","entry":"entry","key2":"key2","key5":"key2","hashCode":"hashCode","key3":"key1","key4":"key1","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:139","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object))) {\n    return org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n} "},"status":-2},{"failures":[],"tindex":"5ec2e50e-13d9-11e5-a42d-cbeab02308db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.UnmodifiableMapIterator:47","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.MapIterator<? extends K, ? extends V> == null) {\n    throw new java.lang.IllegalArgumentException(\"MapIterator must not be null\");\n} "},"status":-2},{"failures":[],"tindex":"5ec2e50f-13d9-11e5-a42d-734183cc17d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:891","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.(size()) > 1) {\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n} else {\n    return null;\n}"},"variableMap":{"root":"root","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:889","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty())) {\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.(size()) > 1) {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    } else {\n        return null;\n    }\n} else {\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.firstEntry();\n}"},"status":0},{"failures":[],"tindex":"5ec444a0-13d9-11e5-a42d-6d572b5bae4e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.FactoryTransformer:48","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.Factory<? extends O> == null) {\n    throw new java.lang.IllegalArgumentException(\"Factory must not be null\");\n} "},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"5ec444a1-13d9-11e5-a42d-ab8f35bc6039","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:212","type":"CtForImpl","sourcecode":"for (int int = int - int ; int <= (int + int) ; int += 2) {\n    final int int = (int + int) - int;\n    if ((int == (int - int)) || ((int != (int + int)) && ((int[][(int + 1)]) <= (int[][(int - 1)])))) {\n        int[][int] = (int[][(int + 1)]) - 1;\n    } else {\n        int[][int] = int[][(int - 1)];\n    }\n    int int = (int[][int]) - 1;\n    int int = ((int - int) + int) - int;\n    while (((int >= int) && (int >= int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n        int[][int] = int--;\n        int--;\n    }\n    if ((((int % 2) == 0) && ((-int) <= int)) && (int <= int)) {\n        if ((int[][int]) <= (int[][(int + int)])) {\n            return org.apache.commons.collections4.sequence.SequencesComparator<T>.buildSnake(int[][int], ((int + int) - int), int, int);\n        } \n    } \n}"},"variableMap":{"start1":"end1","d":"start2","offset":"start2","vDown":"vUp","delta":"start1","this":"this","sequence1":"sequence2","sequence2":"sequence1","vUp":"vUp","equator":"equator","end2":"end2","end1":"delta","start2":"end2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:184","type":"CtForImpl","sourcecode":"for (int int = 0 ; int <= int ; ++int) {\n    for (int int = -int ; int <= int ; int += 2) {\n        final int int = int + int;\n        if ((int == (-int)) || ((int != int) && ((int[][(int - 1)]) < (int[][(int + 1)])))) {\n            int[][int] = int[][(int + 1)];\n        } else {\n            int[][int] = (int[][(int - 1)]) + 1;\n        }\n        int int = int[][int];\n        int int = ((int - int) + int) - int;\n        while (((int < int) && (int < int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n            int[][int] = ++int;\n            ++int;\n        }\n        if ((((int % 2) != 0) && ((int - int) <= int)) && (int <= (int + int))) {\n            if ((int[][(int - int)]) <= (int[][int])) {\n                return org.apache.commons.collections4.sequence.SequencesComparator<T>.buildSnake(int[][(int - int)], ((int + int) - int), int, int);\n            } \n        } \n    }\n    for (int int = int - int ; int <= (int + int) ; int += 2) {\n        final int int = (int + int) - int;\n        if ((int == (int - int)) || ((int != (int + int)) && ((int[][(int + 1)]) <= (int[][(int - 1)])))) {\n            int[][int] = (int[][(int + 1)]) - 1;\n        } else {\n            int[][int] = int[][(int - 1)];\n        }\n        int int = (int[][int]) - 1;\n        int int = ((int - int) + int) - int;\n        while (((int >= int) && (int >= int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n            int[][int] = int--;\n            int--;\n        }\n        if ((((int % 2) == 0) && ((-int) <= int)) && (int <= int)) {\n            if ((int[][int]) <= (int[][(int + int)])) {\n                return org.apache.commons.collections4.sequence.SequencesComparator<T>.buildSnake(int[][int], ((int + int) - int), int, int);\n            } \n        } \n    }\n}"},"status":-1},{"failures":[6,7,8,9],"tindex":"5ec46bb2-13d9-11e5-a42d-8187dd6d2b5e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:154","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.bag.AbstractSortedBagDecorator<E>.decorated().retainAll(null)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:142","type":"CtIfImpl","sourcecode":"if (java.util.Collection<?> != null) {\n    boolean boolean = false;\n    final java.util.Iterator<E> java.util.Iterator<E> = org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.iterator();\n    while (java.util.Iterator<E>.hasNext()) {\n        if (!(java.util.Collection<?>.contains(java.util.Iterator<E>.next()))) {\n            java.util.Iterator<E>.remove();\n            boolean = true;\n        } \n    }\n    return boolean;\n} else {\n    return org.apache.commons.collections4.bag.AbstractSortedBagDecorator<E>.decorated().retainAll(null);\n}"},"status":-1},{"failures":[10,11,12,13,14,15,16,17],"tindex":"5ec492c3-13d9-11e5-a42d-6dc9699c886b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.Flat3Map:198","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n    return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.containsKey(java.lang.Object);\n} "},"variableMap":{"delegateMap":"this","key":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:141","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    for (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> ; org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> != (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) ; org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) {\n        if ((org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.getValue()) == null) {\n            return true;\n        } \n    }\n} else {\n    for (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> ; org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> != (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) ; org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) {\n        if (org.apache.commons.collections4.map.AbstractHashedMap<K, V>.isEqualValue(java.lang.Object, org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.getValue())) {\n            return true;\n        } \n    }\n}"},"status":-1},{"failures":[18,19,20,21,22],"tindex":"5ec492c4-13d9-11e5-a42d-e5c5ffd95762","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:181","type":"CtIfImpl","sourcecode":"if ((int) == 0) {\n    throw new java.util.NoSuchElementException();\n} "},"variableMap":{"currentIndex":"size"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:137","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    E[][int] = ((E)(java.io.ObjectInputStream.readObject()));\n}"},"status":-1},{"failures":[23,24,25,26,27,6,28,29,30,31,32,33,34,35,36,7,37,38,39,9],"tindex":"5ec492c5-13d9-11e5-a42d-1b08fc2b3d55","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:219","type":"CtIfImpl","sourcecode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException();\n} "},"variableMap":{"canRemove":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:346","type":"CtWhileImpl","sourcecode":"while (java.util.Iterator<?>.hasNext()) {\n    final boolean boolean = org.apache.commons.collections4.bag.AbstractMapBag<E>.remove(java.util.Iterator<?>.next(), 1);\n    boolean = boolean || boolean;\n}"},"status":-1},{"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"5ec4b9d6-13d9-11e5-a42d-2576ab02e02e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:721","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"5ec55617-13d9-11e5-a42d-8743ee928b87","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:886","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.isLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n    final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    } else {\n        if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.isRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        } \n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateRight(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        } \n    }\n} else {\n    final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    } else {\n        if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.isLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        } \n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateLeft(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"5ec55618-13d9-11e5-a42d-ddae69f2d146","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.MapUtils:388","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = java.lang.String;\n} "},"variableMap":{"answer":"methodName","defaultValue":"methodName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.InvokerTransformer:72","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"The method to invoke must not be null\");\n} "},"status":-2},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"tindex":"5ec55619-13d9-11e5-a42d-31e1ba2f1fee","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:183","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.int) == int) && org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(isEqualKey(java.lang.Object, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.java.lang.Object))) {\n        return org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getValue();\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n}"},"status":-1},{"failures":[],"tindex":"5ec57d2a-13d9-11e5-a42d-53ef626a4b5d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.CompositeMap:414","type":"CtForImpl","sourcecode":"for (int int = (this.java.util.Map<K, V>[].int) - 1 ; int >= 0 ; --int) {\n    if (this.java.util.Map<K, V>[][int].containsKey(java.lang.Object)) {\n        return this.java.util.Map<K, V>[][int].remove(java.lang.Object);\n    } \n}"},"variableMap":{"composite":"key","length":"index","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:344","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.int) == int) && org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(isEqualKey(java.lang.Object, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.java.lang.Object))) {\n    final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getValue();\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>);\n    return V;\n} "},"status":-2},{"failures":[],"tindex":"5ec57d2b-13d9-11e5-a42d-e517949e20e8","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:717","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> != null) {\n    if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> == null) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    } else {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.copyColor(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    }\n} "},"variableMap":{"from":"leftChild","to":"node","dataElement":"dataElement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:859","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) == null) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n} else if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) == org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n} else {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n}"},"status":0},{"failures":[],"tindex":"5ec57d2c-13d9-11e5-a42d-4177760b21a7","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:300","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger == null) {\n    return false;\n} "},"variableMap":{"mut":"mut"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:256","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger == null) {\n    java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.put(E, new org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger(int));\n    return true;\n} "},"status":0},{"failures":[],"tindex":"5ec57d2d-13d9-11e5-a42d-65bd03491269","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:181","type":"CtIfImpl","sourcecode":"if ((int) == 0) {\n    throw new java.util.NoSuchElementException();\n} "},"variableMap":{"currentIndex":"hash"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:309","type":"CtIfImpl","sourcecode":"if (null != (java.util.BitSet)) {\n    int ^= java.util.BitSet.hashCode();\n} "},"status":0},{"failures":[],"tindex":"5ec57d2e-13d9-11e5-a42d-077ed59610a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:442","type":"CtIfImpl","sourcecode":"if (java.lang.Integer == null) {\n    java.util.Map<O, java.lang.Integer>.put(O, java.lang.Integer.valueOf(1));\n} else {\n    java.util.Map<O, java.lang.Integer>.put(O, java.lang.Integer.valueOf(((java.lang.Integer.intValue()) + 1)));\n}"},"status":-2},{"failures":[40,80,81,41,82,83,84,85,86,42,43,87,44,45,46,88,47,48,89,49,90,91,50,51,92,93,94,95,96,97,98,99,100,52,101,102,53,103,104,105,54,106,55,56,57,58],"tindex":"5ec57d2f-13d9-11e5-a42d-7d9649d7eef7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:781","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.(size()) == 0) {\n    throw new java.util.NoSuchElementException();\n} "},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:202","type":"CtIfImpl","sourcecode":"if (!org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.(isBitSet(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.K, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int, int))) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} else {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}"},"status":-1},{"failures":[],"tindex":"5ec5a440-13d9-11e5-a42d-6f956180056f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:305","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.util.Map.Entry<K, V>>) == null) {\n    java.util.Set<java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.bidimap.AbstractDualBidiMap.EntrySet<K, V>(this);\n} "},"variableMap":{"entrySet":"entrySet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:391","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.util.Map.Entry<K, V>>) == null) {\n    java.util.Set<java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.EntrySet();\n} "},"status":-2},{"failures":[],"tindex":"5ec5a441-13d9-11e5-a42d-8359a45dce2f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.PermutationIterator:116","type":"CtIfImpl","sourcecode":"if ((((boolean[][int]) && (int < ((int[].int) - 1))) && ((int[][int]) > (int[][(int + 1)]))) || (((!(boolean[][int])) && (int > 0)) && ((int[][int]) > (int[][(int - 1)])))) {\n    if ((int[][int]) > int) {\n        int = int[][int];\n        int = int;\n    } \n} "},"status":-2},{"failures":[107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179],"tindex":"5ec5a442-13d9-11e5-a42d-3ffbdb9c0857","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:245","type":"CtIfImpl","sourcecode":"if ((java.util.Iterator<? extends E>) == null) {\n    throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\");\n} "},"variableMap":{"lastUsedIterator":"currentIterator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.IteratorChain:212","type":"CtIfImpl","sourcecode":"if ((java.util.Iterator<? extends E>) == null) {\n    if (java.util.Queue<java.util.Iterator<? extends E>>.isEmpty()) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    } else {\n        java.util.Iterator<? extends E> = java.util.Queue<java.util.Iterator<? extends E>>.remove();\n    }\n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} "},"status":-1},{"failures":[180,181,182,183,184,185,186,187],"tindex":"5ec5cb53-13d9-11e5-a42d-9590096f1e5c","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.collection.IndexedCollection:137","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.MultiMap<K, C>.clear()"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.IndexedCollection:243","type":"CtIfImpl","sourcecode":"if ((boolean) && (org.apache.commons.collections4.MultiMap<K, C>.containsKey(K))) {\n    throw new java.lang.IllegalArgumentException(\"Duplicate key in uniquely indexed collection.\");\n} "},"status":-1},{"failures":[],"tindex":"5ec5f264-13d9-11e5-a42d-35e253b6d2f6","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.functors.ChainedTransformer:71","type":"CtIfImpl","sourcecode":"if (java.util.Collection<? extends org.apache.commons.collections4.Transformer<T, T>> == null) {\n    throw new java.lang.IllegalArgumentException(\"Transformer collection must not be null\");\n} "},"variableMap":{"transformers":"predicates"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.FunctorUtils:104","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> : java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>) {\n    org.apache.commons.collections4.Predicate<T>[][int] = org.apache.commons.collections4.Predicate<T>;\n    if ((org.apache.commons.collections4.Predicate<T>[][int]) == null) {\n        throw new java.lang.IllegalArgumentException(((\"The predicate collection must not contain a null predicate, index \" + int) + \" was null\"));\n    } \n    int++;\n}"},"status":0},{"failures":[],"tindex":"5ec5f265-13d9-11e5-a42d-3b19c4f0986c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1336","type":"CtForImpl","sourcecode":"for (final org.apache.commons.collections4.MapIterator<?, ?> org.apache.commons.collections4.MapIterator<?, ?> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getMapIterator(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement) ; org.apache.commons.collections4.MapIterator<?, ?>.hasNext() ; ) {\n    final java.lang.Object java.lang.Object = org.apache.commons.collections4.MapIterator<?, ?>.next();\n    final java.lang.Object java.lang.Object = org.apache.commons.collections4.MapIterator<?, ?>.getValue();\n    if ((java.lang.Object.equals(java.util.Map<?, ?>.get(java.lang.Object))) == false) {\n        return false;\n    } \n}"},"status":0},{"failures":[],"tindex":"5ec5f266-13d9-11e5-a42d-ffcdabe68a2c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.TreeList:1097","type":"CtIfImpl","sourcecode":"if ((int) != (int)) {\n    (int)--;\n} "},"variableMap":{"nextIndex":"bitIndex","currentIndex":"bitIndex"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:211","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) >= (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int)) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} "},"status":-2},{"failures":[188,189,190,191,192,193,194,195,196,197,18],"tindex":"5ec61977-13d9-11e5-a42d-5dff1f1d81ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:277","type":"CtAssignmentImpl","sourcecode":"boolean = boolean || boolean"},"variableMap":{"added":"full","changed":"full"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:241","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230],"tindex":"5ec61978-13d9-11e5-a42d-415edd41c5eb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.SetUniqueList:150","type":"CtIfImpl","sourcecode":"if ((java.util.Set<E>.contains(E)) == false) {\n    super.add(int, E);\n    java.util.Set<E>.add(E);\n} "},"status":-1},{"failures":[],"tindex":"5ec61979-13d9-11e5-a42d-01218004de9d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:310","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    int = 0;\n} "},"variableMap":{"start":"length","maxElements":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.FunctorUtils:82","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (org.apache.commons.collections4.Predicate<?>[].int) ; int++) {\n    if ((org.apache.commons.collections4.Predicate<?>[][int]) == null) {\n        throw new java.lang.IllegalArgumentException(((\"The predicate array must not contain a null predicate, index \" + int) + \" was null\"));\n    } \n}"},"status":-2},{"failures":[231,232],"tindex":"5ec926ba-13d9-11e5-a42d-45c2975b7d4e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:59","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.Bag<? extends E> instanceof org.apache.commons.collections4.Unmodifiable) {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final org.apache.commons.collections4.Bag<E> org.apache.commons.collections4.Bag<E> = ((org.apache.commons.collections4.Bag<E>)(org.apache.commons.collections4.Bag<? extends E>));\n    return org.apache.commons.collections4.Bag<E>;\n} "},"status":-1},{"failures":[],"tindex":"5ec926bb-13d9-11e5-a42d-1da1a35263bb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:919","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.(size()) > 1) {\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.firstEntry());\n} else {\n    return null;\n}"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:748","type":"CtIfImpl","sourcecode":"if (java.util.AbstractMap<K, V>.isEmpty()) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"5ec94dcc-13d9-11e5-a42d-b5db5d2ec4af","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.CollectionUtils:1391","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.util.Iterator<?>) {\n    return (((java.util.Iterator<?>)(java.lang.Object)).hasNext()) == false;\n} else if (java.lang.Object instanceof java.util.Enumeration<?>) {\n    return (((java.util.Enumeration<?>)(java.lang.Object)).hasMoreElements()) == false;\n} else {\n    try {\n        return (java.lang.reflect.Array.getLength(java.lang.Object)) == 0;\n    } catch (final java.lang.IllegalArgumentException ex) {\n        throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n    }\n}"},"variableMap":{"object":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.comparators.ReverseComparator:116","type":"CtIfImpl","sourcecode":"if (java.lang.Object.getClass().equals(java.lang.Object.getClass())) {\n    final org.apache.commons.collections4.comparators.ReverseComparator<?> org.apache.commons.collections4.comparators.ReverseComparator<?> = ((org.apache.commons.collections4.comparators.ReverseComparator<?>)(java.lang.Object));\n    return java.util.Comparator<E>.equals(org.apache.commons.collections4.comparators.ReverseComparator<?>.java.util.Comparator<?>);\n} "},"status":0},{"failures":[],"tindex":"5ec94dcd-13d9-11e5-a42d-4177157f2eeb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.CompositeMap:415","type":"CtIfImpl","sourcecode":"if (this.java.util.Map<K, V>[][int].containsKey(java.lang.Object)) {\n    return this.java.util.Map<K, V>[][int].remove(java.lang.Object);\n} "},"variableMap":{"composite":"key","i":"size","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.StaticBucketMap:324","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K) == java.lang.Object) || (((org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K) != null) && (org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K.equals(java.lang.Object)))) {\n    if (null == org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>) {\n        org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>[][int] = org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>;\n    } else {\n        org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> = org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>;\n    }\n    (org.apache.commons.collections4.map.StaticBucketMap.Lock[][int].int)--;\n    return org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.V;\n} "},"status":-2},{"failures":[107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179],"tindex":"5ec94dce-13d9-11e5-a42d-016ab37d81fa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.IteratorUtils:956","type":"CtIfImpl","sourcecode":"if (java.util.Iterator<?> == null) {\n    throw new java.lang.NullPointerException(\"Iterator must not be null\");\n} "},"variableMap":{"iterator":"lastUsedIterator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.IteratorChain:212","type":"CtIfImpl","sourcecode":"if ((java.util.Iterator<? extends E>) == null) {\n    if (java.util.Queue<java.util.Iterator<? extends E>>.isEmpty()) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    } else {\n        java.util.Iterator<? extends E> = java.util.Queue<java.util.Iterator<? extends E>>.remove();\n    }\n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} "},"status":-1},{"failures":[233,234,235,236,237,238,239],"tindex":"5ec94dcf-13d9-11e5-a42d-79ba9d91b787","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.Flat3Map:127","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n    return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.get(java.lang.Object);\n} "},"variableMap":{"delegateMap":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:344","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.int) == int) && org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(isEqualKey(java.lang.Object, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.java.lang.Object))) {\n    final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getValue();\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>);\n    return V;\n} "},"status":-2},{"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"5ec94dd0-13d9-11e5-a42d-8b8a5be093fd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:721","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"5ec94dd1-13d9-11e5-a42d-e93de33d8b1c","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.CollectionUtils:387","type":"CtIfImpl","sourcecode":"if (boolean) {\n    continue;\n} else {\n    return false;\n}"},"variableMap":{"foundCurrentElement":"previousObjectSet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.FilterListIterator:263","type":"CtWhileImpl","sourcecode":"while (java.util.ListIterator<? extends E>.hasPrevious()) {\n    final E E = java.util.ListIterator<? extends E>.previous();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}"},"status":-2},{"failures":[],"tindex":"5ec94dd2-13d9-11e5-a42d-e915065b500d","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:718","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> == null) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n} else {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.copyColor(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n}"},"variableMap":{"from":"currentNode","to":"currentNode","dataElement":"dataElement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:915","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n} else {\n    if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.isLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    } \n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateLeft(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    } \n}"},"status":0},{"failures":[],"tindex":"5ec974e3-13d9-11e5-a42d-a1413c809a22","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.SetUniqueList:268","type":"CtForImpl","sourcecode":"for (final java.util.Iterator<E> java.util.Iterator<E> = org.apache.commons.collections4.list.SetUniqueList<E>.iterator() ; java.util.Iterator<E>.hasNext() ; ) {\n    if (!(java.util.Set<java.lang.Object>.contains(java.util.Iterator<E>.next()))) {\n        java.util.Iterator<E>.remove();\n    } \n}"},"status":-2},{"failures":[240,241,242,243,244,245,246,247],"tindex":"5ec974e4-13d9-11e5-a42d-6b0986b87bed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.Flat3Map:130","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    switch (int) {\n        case 3 :\n            if ((K) == null) {\n                return V;\n            } \n        case 2 :\n            if ((K) == null) {\n                return V;\n            } \n        case 1 :\n            if ((K) == null) {\n                return V;\n            } \n    }\n} else {\n    if ((int) > 0) {\n        final int int = java.lang.Object.hashCode();\n        switch (int) {\n            case 3 :\n                if (((int) == int) && (java.lang.Object.equals(K))) {\n                    return V;\n                } \n            case 2 :\n                if (((int) == int) && (java.lang.Object.equals(K))) {\n                    return V;\n                } \n            case 1 :\n                if (((int) == int) && (java.lang.Object.equals(K))) {\n                    return V;\n                } \n        }\n    } \n}"},"status":-1},{"failures":[],"tindex":"5ec974e5-13d9-11e5-a42d-ffb5d22b6406","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2016","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n    return false;\n} "},"variableMap":{"obj":"lock"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:136","type":"CtSynchronizedImpl","sourcecode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty();\n}"},"status":-2},{"failures":[],"tindex":"5ec974e6-13d9-11e5-a42d-9591d201ac50","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:254","type":"CtWhileImpl","sourcecode":"while ((java.util.ListIterator<?>.previousIndex()) >= 0) {\n    java.util.ListIterator<?>.previous();\n}"},"variableMap":{"li":"currentIterator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:181","type":"CtIfImpl","sourcecode":"if ((java.util.Iterator<? extends E>) != null) {\n    org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>);\n} "},"status":-2},{"failures":[248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263],"tindex":"5ec974e7-13d9-11e5-a42d-cd696fe3273b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1003","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.shrink()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:949","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement : org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.values()) {\n    if (((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) && ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null)) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.swapPosition(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.nextGreater(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    } \n    final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null ? org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement) : org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> != null) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) == null) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n        } else if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> == (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement))) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        } else {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        }\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setLeft(null, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setRight(null, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(null, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.doRedBlackDeleteFixup(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        } \n    } else {\n        if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) == null) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = null;\n        } else {\n            if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.doRedBlackDeleteFixup(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            } \n            if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> == (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement))) {\n                    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setLeft(null, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                } else {\n                    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setRight(null, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                }\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(null, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            } \n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"5ec974e8-13d9-11e5-a42d-9d5a5f1b3338","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiKeyMap:338","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object, java.lang.Object))) {\n    final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n    org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>);\n    return V;\n} "},"variableMap":{"key1":"key5","entry":"entry","key2":"key1","previous":"entry","hashCode":"hashCode","key3":"key3","this":"this","index":"hashCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:559","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object))) {\n    return org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n} "},"status":-2},{"failures":[],"tindex":"5ec99bf9-13d9-11e5-a42d-b5cbd59ba57a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.TreeList:509","type":"CtIfImpl","sourcecode":"if ((int) >= 0) {\n    (int)++;\n} "},"variableMap":{"relativePosition":"org.apache.commons.collections4.map.AbstractHashedMap.MAXIMUM_CAPACITY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:665","type":"CtIfImpl","sourcecode":"if (int > (org.apache.commons.collections4.map.AbstractHashedMap.int)) {\n    int = org.apache.commons.collections4.map.AbstractHashedMap.int;\n} else {\n    while (int < int) {\n        int <<= 1;\n    }\n    if (int > (org.apache.commons.collections4.map.AbstractHashedMap.int)) {\n        int = org.apache.commons.collections4.map.AbstractHashedMap.int;\n    } \n}"},"status":-2},{"failures":[],"tindex":"5ec99bfa-13d9-11e5-a42d-d99bacce1a75","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.LazyIteratorChain:96","type":"CtIfImpl","sourcecode":"if (java.util.Iterator<? extends E> != null) {\n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} else {\n    boolean = true;\n}"},"variableMap":{"nextIterator":"i","chainExhausted":"result","currentIterator":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.CollectionBag:128","type":"CtWhileImpl","sourcecode":"while (java.util.Iterator<?>.hasNext()) {\n    final java.lang.Object java.lang.Object = java.util.Iterator<?>.next();\n    final boolean boolean = org.apache.commons.collections4.bag.AbstractBagDecorator<E>.remove(java.lang.Object, org.apache.commons.collections4.bag.AbstractBagDecorator<E>.getCount(java.lang.Object));\n    boolean = boolean || boolean;\n}"},"status":-2},{"failures":[],"tindex":"5ec99bfb-13d9-11e5-a42d-0d64331b3d3a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1335","type":"CtTryImpl","sourcecode":"try {\n    for (final org.apache.commons.collections4.MapIterator<?, ?> org.apache.commons.collections4.MapIterator<?, ?> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getMapIterator(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement) ; org.apache.commons.collections4.MapIterator<?, ?>.hasNext() ; ) {\n        final java.lang.Object java.lang.Object = org.apache.commons.collections4.MapIterator<?, ?>.next();\n        final java.lang.Object java.lang.Object = org.apache.commons.collections4.MapIterator<?, ?>.getValue();\n        if ((java.lang.Object.equals(java.util.Map<?, ?>.get(java.lang.Object))) == false) {\n            return false;\n        } \n    }\n} catch (final java.lang.ClassCastException ex) {\n    return false;\n} catch (final java.lang.NullPointerException ex) {\n    return false;\n}"},"variableMap":{"other":"other","this":"this","dataElement":"dataElement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1334","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    try {\n        for (final org.apache.commons.collections4.MapIterator<?, ?> org.apache.commons.collections4.MapIterator<?, ?> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getMapIterator(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement) ; org.apache.commons.collections4.MapIterator<?, ?>.hasNext() ; ) {\n            final java.lang.Object java.lang.Object = org.apache.commons.collections4.MapIterator<?, ?>.next();\n            final java.lang.Object java.lang.Object = org.apache.commons.collections4.MapIterator<?, ?>.getValue();\n            if ((java.lang.Object.equals(java.util.Map<?, ?>.get(java.lang.Object))) == false) {\n                return false;\n            } \n        }\n    } catch (final java.lang.ClassCastException ex) {\n        return false;\n    } catch (final java.lang.NullPointerException ex) {\n        return false;\n    }\n} "},"status":0},{"failures":[],"tindex":"5ec99bfc-13d9-11e5-a42d-4f5fca22720a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.MapUtils:408","type":"CtIfImpl","sourcecode":"if (java.lang.Boolean == null) {\n    java.lang.Boolean = java.lang.Boolean;\n} "},"variableMap":{"answer":"result","defaultValue":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.TransformerPredicate:74","type":"CtIfImpl","sourcecode":"if (java.lang.Boolean == null) {\n    throw new org.apache.commons.collections4.FunctorException(\"Transformer must return an instanceof Boolean, it was a null object\");\n} "},"status":-2},{"failures":[],"tindex":"5ec99bfd-13d9-11e5-a42d-53546a032de6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.set.CompositeSet:440","type":"CtForEachImpl","sourcecode":"for (final E E : this) {\n    int += E == null ? 0 : E.hashCode();\n}"},"variableMap":{"code":"proposedCapacity"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:665","type":"CtIfImpl","sourcecode":"if (int > (org.apache.commons.collections4.map.AbstractHashedMap.int)) {\n    int = org.apache.commons.collections4.map.AbstractHashedMap.int;\n} else {\n    while (int < int) {\n        int <<= 1;\n    }\n    if (int > (org.apache.commons.collections4.map.AbstractHashedMap.int)) {\n        int = org.apache.commons.collections4.map.AbstractHashedMap.int;\n    } \n}"},"status":-2},{"failures":[264],"tindex":"5ec99bfe-13d9-11e5-a42d-ad8328fcccee","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:872","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.Predicate<? super C> == null) {\n    return false;\n} "},"status":-1},{"failures":[265,266,267,268,269,270,271,272,273,274,275,276,277,278,8,279,280,281,282,283],"tindex":"5ec99bff-13d9-11e5-a42d-c7840075d6c5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:219","type":"CtIfImpl","sourcecode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException();\n} "},"variableMap":{"canRemove":"changed"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:111","type":"CtWhileImpl","sourcecode":"while (java.util.Iterator<? extends E>.hasNext()) {\n    final boolean boolean = org.apache.commons.collections4.bag.CollectionSortedBag<E>.add(java.util.Iterator<? extends E>.next(), 1);\n    boolean = boolean || boolean;\n}"},"status":-1},{"failures":[284,285],"tindex":"5ec99c00-13d9-11e5-a42d-fb21e804e176","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.IteratorUtils:700","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.Predicate<? super E> == null) {\n    throw new java.lang.NullPointerException(\"Predicate must not be null\");\n} "},"variableMap":{"predicate":"iPredicate"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.WhileClosure:88","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n}"},"status":-1},{"failures":[],"tindex":"5ec99c01-13d9-11e5-a42d-71bd498934b0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:432","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(size()) == 0) {\n    return org.apache.commons.collections4.iterators.EmptyOrderedIterator.<K>emptyOrderedIterator();\n} "},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:917","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(size()) == 0) {\n    return org.apache.commons.collections4.iterators.EmptyIterator.<K>emptyIterator();\n} "},"status":0},{"failures":[286],"tindex":"5ec99c02-13d9-11e5-a42d-911062b3058c","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.CollectionUtils:1182","type":"CtReturnImpl","sourcecode":"return java.util.Iterator<T>.next()"},"variableMap":{"iterator":"iterator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:724","type":"CtWhileImpl","sourcecode":"while (java.util.Iterator<T>.hasNext()) {\n    final T T = java.util.Iterator<T>.next();\n    if (java.util.Iterator<T>.hasNext()) {\n        C.execute(T);\n    } else {\n        return T;\n    }\n}"},"status":-1},{"failures":[],"tindex":"5ec9c313-13d9-11e5-a42d-e19e9f3726fb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:140","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize()"},"variableMap":{"this":"normalMap"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:169","type":"CtIfImpl","sourcecode":"if (java.util.Map<K, V>.containsKey(K)) {\n    java.util.Map<V, K>.remove(java.util.Map<K, V>.get(K));\n} "},"status":-2},{"failures":[],"tindex":"5ec9c314-13d9-11e5-a42d-71ca16cfd1b1","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:91","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = null"},"variableMap":{"parent":"right","root":"current"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:442","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>"},"status":-2},{"failures":[],"tindex":"5ec9c315-13d9-11e5-a42d-9938d38505e1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1381","type":"CtIfImpl","sourcecode":"if (boolean) {\n    java.lang.StringBuilder.append(',').append(' ');\n} "},"status":0},{"failures":[287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386],"tindex":"5ec9c316-13d9-11e5-a42d-6169f3dce68e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:276","type":"CtIfImpl","sourcecode":"if ((java.util.Set<V>) == null) {\n    java.util.Set<V> = new org.apache.commons.collections4.bidimap.AbstractDualBidiMap.Values<V>(this);\n} "},"status":-1},{"failures":[387,388,389,390,391,392,393,394,395,396],"tindex":"5ec9c317-13d9-11e5-a42d-c90d03123dcc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:813","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.list.AbstractLinkedList.Node<E>) == null) {\n    throw new java.lang.IllegalStateException();\n} "},"variableMap":{"current":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:352","type":"CtWhileImpl","sourcecode":"while (java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.hasNext()) {\n    final java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>> java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>> = java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.next();\n    final org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> = java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>.get();\n    if (org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> == null) {\n        java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.remove();\n    } else {\n        org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>.nodeInserted(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>);\n    }\n}"},"status":-1},{"failures":[],"tindex":"5ec9c318-13d9-11e5-a42d-89a091279434","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:509","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} else {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}"},"status":-2},{"failures":[397,233,398,234,235,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,236,416,417,237,418,238,419,239,420,421,422,423,424,425,426,427,428,429,430,431,432,12,13,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,66,467,468,469,470,471,472,16,17,473,474,475,476,477,478,479,480,481,72,76,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514],"tindex":"5ec9c319-13d9-11e5-a42d-89656f93b6a3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.Flat3Map:438","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n    return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.remove(java.lang.Object);\n} "},"variableMap":{"delegateMap":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:344","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.int) == int) && org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(isEqualKey(java.lang.Object, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.java.lang.Object))) {\n    final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getValue();\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>);\n    return V;\n} "},"status":-1},{"failures":[],"tindex":"5ec9c31a-13d9-11e5-a42d-d3de86952b46","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.set.CompositeSet:378","type":"CtForEachImpl","sourcecode":"for (java.util.Set<E> java.util.Set<E> : java.util.Set<E>[]) {\n    org.apache.commons.collections4.set.CompositeSet<E>.addComposited(java.util.Set<E>);\n}"},"status":-2},{"failures":[2,4,5],"tindex":"5ec9ea2b-13d9-11e5-a42d-2916cf50c81b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:263","type":"CtWhileImpl","sourcecode":"while ((int < int) || (int < int)) {\n    if (((int < int) && (int < int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n        org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(int)));\n        ++int;\n        ++int;\n    } else {\n        if ((int - int) > (int - int)) {\n            org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.DeleteCommand<T>(java.util.List<T>.get(int)));\n            ++int;\n        } else {\n            org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.InsertCommand<T>(java.util.List<T>.get(int)));\n            ++int;\n        }\n    }\n}"},"status":-1},{"failures":[257,259,261,262,263],"tindex":"5ec9ea2c-13d9-11e5-a42d-6f21b0564ec5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:263","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.modify()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1036","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n} "},"status":-1},{"failures":[],"tindex":"5ec9ea2d-13d9-11e5-a42d-037707005f32","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:1040","type":"CtIfImpl","sourcecode":"if (K == null) {\n    break;\n} "},"status":-2},{"failures":[],"tindex":"5ec9ea2e-13d9-11e5-a42d-37c05aad97ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1218","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n    return null;\n} else {\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}"},"status":-2},{"failures":[],"tindex":"5ec9ea2f-13d9-11e5-a42d-e92627cc7570","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"CtIfImpl","sourcecode":"if ((java.util.Collection<? extends E>.size()) == 0) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} "},"variableMap":{"collection":"coll"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:440","type":"CtForEachImpl","sourcecode":"for (final O O : java.lang.Iterable<? extends O>) {\n    final java.lang.Integer java.lang.Integer = java.util.Map<O, java.lang.Integer>.get(O);\n    if (java.lang.Integer == null) {\n        java.util.Map<O, java.lang.Integer>.put(O, java.lang.Integer.valueOf(1));\n    } else {\n        java.util.Map<O, java.lang.Integer>.put(O, java.lang.Integer.valueOf(((java.lang.Integer.intValue()) + 1)));\n    }\n}"},"status":-2},{"failures":[77,78,515,516,517,518],"tindex":"5ec9ea30-13d9-11e5-a42d-cd589cad7d91","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:333","type":"CtIfImpl","sourcecode":"if ((this) == java.lang.Object) {\n    return true;\n} "},"variableMap":{"object":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.Flat3Map:198","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n    return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.containsKey(java.lang.Object);\n} "},"status":-1},{"failures":[],"tindex":"5ec9ea31-13d9-11e5-a42d-c524ad72e8a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.CollectionUtils:1396","type":"CtTryImpl","sourcecode":"try {\n    return (java.lang.reflect.Array.getLength(java.lang.Object)) == 0;\n} catch (final java.lang.IllegalArgumentException ex) {\n    throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n}"},"variableMap":{"object":"key3"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:290","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object, java.lang.Object))) {\n    return true;\n} "},"status":-2},{"failures":[],"tindex":"5ecb49c2-13d9-11e5-a42d-a5ec5f11b734","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:759","type":"CtWhileImpl","sourcecode":"while (true) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    } \n    if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) <= (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int)) {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    } \n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}"},"variableMap":{"node":"predecessor","left":"root","right":"parent","bitIndex":"lengthInBits"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:197","type":"CtWhileImpl","sourcecode":"while (true) {\n    if (((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) >= (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int)) || ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) <= (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int))) {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        if (!org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.(isBitSet(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.K, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int, int))) {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        } else {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        }\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) >= (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int)) {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        } \n        if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) <= (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int)) {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        } \n        if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) || (!org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.(isBitSet(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.K, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int, int)))) {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        } else {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        }\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    } \n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    if (!org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.(isBitSet(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.K, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int, int))) {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    } else {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    }\n}"},"status":-2},{"failures":[],"tindex":"5ecb49c3-13d9-11e5-a42d-8f5728480086","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:883","type":"CtWhileImpl","sourcecode":"while (((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> != null) && (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> != (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]))) && org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement))) {\n    if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.isLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n        final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        } else {\n            if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.isRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            } \n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateRight(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            } \n        }\n    } else {\n        final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        } else {\n            if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.isLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) {\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            } \n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            if (org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateLeft(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getGrandParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            } \n        }\n    }\n}"},"status":0},{"failures":[],"tindex":"5ecb49c4-13d9-11e5-a42d-25c0a3830922","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.UnmodifiableSortedMap:104","type":"CtInvocationImpl","sourcecode":"java.io.ObjectInputStream.defaultReadObject()"},"status":-2},{"failures":[519,520],"tindex":"5ecb70d5-13d9-11e5-a42d-e9c1b2a55aeb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.MapUtils:1009","type":"CtInvocationImpl","sourcecode":"java.io.PrintStream.print(\"(this Map)\")"},"variableMap":{"out":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.MapUtils:1008","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.size()) - 1) == int) {\n    java.io.PrintStream.print(\"(this Map)\");\n} else {\n    java.io.PrintStream.print(((\"(ancestor[\" + ((((org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.size()) - 1) - int) - 1)) + \"] Map)\"));\n}"},"status":-1},{"failures":[521,522,523,109,114,524,525,526,527],"tindex":"5ecb70d6-13d9-11e5-a42d-59cb29a9e435","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.iterators.SingletonListIterator:118","type":"CtIfImpl","sourcecode":"if ((boolean) || (boolean)) {\n    throw new java.util.NoSuchElementException();\n} "},"variableMap":{"removed":"nextObjectSet","beforeFirst":"nextObjectSet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} "},"status":-1},{"failures":[528],"tindex":"5ecb70d7-13d9-11e5-a42d-e93ccc6dedf6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:111","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger != null) {\n    return org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.int;\n} "},"variableMap":{"count":"key","value":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.LinkedMap:167","type":"CtForImpl","sourcecode":"for (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> ; org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> != (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) ; org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> , int++) {\n    if (org.apache.commons.collections4.map.AbstractHashedMap<K, V>.isEqualKey(java.lang.Object, org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.java.lang.Object)) {\n        return int;\n    } \n}"},"status":-1},{"failures":[529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552],"tindex":"5ecb70d8-13d9-11e5-a42d-c3e6f8a4aea6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:232","type":"CtIfImpl","sourcecode":"if (int >= (int)) {\n    throw new java.lang.IndexOutOfBoundsException((((\"Index \" + int) + \" is invalid for size \") + (int)));\n} "},"variableMap":{"size":"size","index":"size"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1266","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    final K K = ((K)(java.io.ObjectInputStream.readObject()));\n    final V V = ((V)(java.io.ObjectInputStream.readObject()));\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.put(K, V);\n}"},"status":-1},{"failures":[],"tindex":"5ecb70d9-13d9-11e5-a42d-7d1bd39a7a7e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:398","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(size()) == 0) {\n    return org.apache.commons.collections4.iterators.EmptyOrderedIterator.<java.util.Map.Entry<K, V>>emptyOrderedIterator();\n} "},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:432","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(size()) == 0) {\n    return org.apache.commons.collections4.iterators.EmptyOrderedIterator.<K>emptyOrderedIterator();\n} "},"status":-2},{"failures":[],"tindex":"5ecbe60a-13d9-11e5-a42d-c74df74ddc69","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.CompositeMap:416","type":"CtReturnImpl","sourcecode":"return this.java.util.Map<K, V>[][int].remove(java.lang.Object)"},"variableMap":{"composite":"key","i":"hash1","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.Flat3Map:160","type":"CtIfImpl","sourcecode":"if (((int) == int) && (java.lang.Object.equals(K))) {\n    return V;\n} "},"status":-2},{"failures":[],"tindex":"5ecbe60b-13d9-11e5-a42d-4b4e5c7faa89","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1266","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    final K K = ((K)(java.io.ObjectInputStream.readObject()));\n    final V V = ((V)(java.io.ObjectInputStream.readObject()));\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.put(K, V);\n}"},"status":-2},{"failures":[],"tindex":"5ecbe60c-13d9-11e5-a42d-f79fec7b726b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:762","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} "},"variableMap":{"node":"h","right":"h","child":"h"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:482","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isInternalNode()) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n} else {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n}"},"status":-2},{"failures":[553,554],"tindex":"5ecbe60d-13d9-11e5-a42d-23539dcaee96","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.CollectionUtils:281","type":"CtForEachImpl","sourcecode":"for (final O O : org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>) {\n    org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>.setCardinality(O, ((org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>.max(O)) - (org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>.min(O))));\n}"},"variableMap":{"helper":"helper"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:229","type":"CtForEachImpl","sourcecode":"for (final O O : org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>) {\n    org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>.setCardinality(O, org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>.max(O));\n}"},"status":-1},{"failures":[],"tindex":"5ecbe60e-13d9-11e5-a42d-f153500e7fee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.collection.CompositeCollection:135","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.Flat3Map:270","type":"CtIfImpl","sourcecode":"if (java.lang.Object.equals(V)) {\n    return true;\n} "},"status":0},{"failures":[],"tindex":"5ecbe60f-13d9-11e5-a42d-d7d2573ddf57","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:281","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int = -1;\n} else {\n    int = 1;\n}"},"variableMap":{"retval":"cmp"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:571","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    break;\n} else {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = int < 0 ? org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement) : org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n}"},"status":-2},{"failures":[],"tindex":"5ecbe610-13d9-11e5-a42d-99d66ca9bbf1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:212","type":"CtIfImpl","sourcecode":"if ((int) == (int)) {\n    --int;\n} "},"variableMap":{"wrappedIteratorIndex":"index","removeIndex":"index","currentIndex":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:556","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>;\n}"},"status":-2},{"failures":[555,556,24,557,558,559,26,6,560,561,562,29,563,564,31,565,566,33,567,568,569,35,7,570,272,571,38,9,572],"tindex":"5ecbe611-13d9-11e5-a42d-21df2d11672c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.set.CompositeSet:352","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.CollectionUtils.intersection(java.util.Set<E>, java.util.Set<E>).size()) > 0) {\n    throw new java.lang.IllegalArgumentException(\"Attempt to add illegal entry unresolved by SetMutator.resolveCollision()\");\n} "},"variableMap":{"set":"uniqueSet","existingSet":"uniqueSet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:488","type":"CtIfImpl","sourcecode":"if ((java.util.Set<E>) == null) {\n    java.util.Set<E> = org.apache.commons.collections4.set.UnmodifiableSet.<E>unmodifiableSet(java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.keySet());\n} "},"status":-1},{"failures":[573,574,575,576,577,578,579,580],"tindex":"5ecbe612-13d9-11e5-a42d-f310633ae834","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.PredicateUtils:124","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.functors.NullPredicate.nullPredicate()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.TransformerPredicate:51","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.functors.TransformerPredicate<T>(org.apache.commons.collections4.Transformer<? super T, java.lang.Boolean>)"},"status":-1},{"failures":[],"tindex":"5ecbe613-13d9-11e5-a42d-e3ca91dd0655","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.trie.AbstractBitwiseTrie:194","type":"CtIfImpl","sourcecode":"if (java.lang.Object == (this)) {\n    return true;\n} else if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n    return false;\n} "},"variableMap":{"o":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.Flat3Map:201","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    switch (int) {\n        case 3 :\n            if ((K) == null) {\n                return true;\n            } \n        case 2 :\n            if ((K) == null) {\n                return true;\n            } \n        case 1 :\n            if ((K) == null) {\n                return true;\n            } \n    }\n} else {\n    if ((int) > 0) {\n        final int int = java.lang.Object.hashCode();\n        switch (int) {\n            case 3 :\n                if (((int) == int) && (java.lang.Object.equals(K))) {\n                    return true;\n                } \n            case 2 :\n                if (((int) == int) && (java.lang.Object.equals(K))) {\n                    return true;\n                } \n            case 1 :\n                if (((int) == int) && (java.lang.Object.equals(K))) {\n                    return true;\n                } \n        }\n    } \n}"},"status":0},{"failures":[581],"tindex":"5ecbe614-13d9-11e5-a42d-9ffb491850eb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:255","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.list.AbstractLinkedList<E>.(size()) > 0) {\n    final java.util.Iterator<E> java.util.Iterator<E> = org.apache.commons.collections4.list.CursorableLinkedList<E>.iterator();\n    while (java.util.Iterator<E>.hasNext()) {\n        java.util.Iterator<E>.next();\n        java.util.Iterator<E>.remove();\n    }\n} "},"variableMap":{"this":"list"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.set.ListOrderedSet:80","type":"CtIfImpl","sourcecode":"if (java.util.List<E> == null) {\n    throw new java.lang.IllegalArgumentException(\"List must not be null\");\n} "},"status":-1},{"failures":[582,583,584,585,586,587,588],"tindex":"5ecc0d25-13d9-11e5-a42d-fbd244cc0610","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:97","type":"CtIfImpl","sourcecode":"if ((java.util.Collection<? extends E> instanceof org.apache.commons.collections4.BoundedCollection) == false) {\n    throw new java.lang.IllegalArgumentException(\"The collection is not a bounded collection\");\n} "},"variableMap":{"coll":"collection"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"CtIfImpl","sourcecode":"if ((java.util.Collection<? extends E>.size()) == 0) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} "},"status":-1},{"failures":[],"tindex":"5ecc0d26-13d9-11e5-a42d-7759d6031788","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:252","type":"CtIfImpl","sourcecode":"if (int == (-1)) {\n    throw new java.util.NoSuchElementException();\n} "},"variableMap":{"leastIndex":"relativePosition"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.TreeList:186","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null) {\n    org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n} "},"status":-2},{"failures":[51,52,53,589,590,591,592,593,594,595],"tindex":"5ecc0d27-13d9-11e5-a42d-65a02cffd5f7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:481","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isInternalNode()) {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    } else {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    }\n} "},"status":-1},{"failures":[],"tindex":"5ecc0d28-13d9-11e5-a42d-e3d687bf41af","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:380","type":"CtIfImpl","sourcecode":"if ((int) == (int)) {\n    org.apache.commons.collections4.queue.CircularFifoQueue.this.remove();\n    int = -1;\n    return ;\n} "},"variableMap":{"lastReturnedIndex":"index","start":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:399","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>)(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>)).purge(java.lang.ref.Reference<?>)) {\n        if (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> == null) {\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int] = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n        } else {\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n        }\n        (this.int)--;\n        return ;\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n}"},"status":-2},{"failures":[],"tindex":"5ecc0d29-13d9-11e5-a42d-51104a13a359","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:558","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} else {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}"},"status":-2},{"failures":[],"tindex":"5ecc0d2a-13d9-11e5-a42d-17380fb1fa1d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.IteratorChain:251","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.iterators.IteratorChain<E>.updateCurrentIterator()"},"variableMap":{"this":"chain"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.CompositeCollection:156","type":"CtForEachImpl","sourcecode":"for (final java.util.Collection<E> java.util.Collection<E> : java.util.List<java.util.Collection<E>>) {\n    org.apache.commons.collections4.iterators.IteratorChain<E>.addIterator(java.util.Collection<E>.iterator());\n}"},"status":-2},{"failures":[387,596,388,389,391,597,392,393,394,395,396,598,599,600,601],"tindex":"5ecc0d2b-13d9-11e5-a42d-e509f2df81a4","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.list.NodeCachingLinkedList:171","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.setValue(null)"},"variableMap":{"node":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:355","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> == null) {\n    java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.remove();\n} else {\n    org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>.nodeInserted(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>);\n}"},"status":-1},{"failures":[51,52,53,54,55,56,57],"tindex":"5ecc0d2c-13d9-11e5-a42d-c595d07ef8d9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:554","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) && ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) != org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} "},"status":-2},{"failures":[],"tindex":"5ecc0d2d-13d9-11e5-a42d-67ec7148fc7c","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.ComparatorUtils:83","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"Comparator cannot be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.UnmodifiableListIterator:94","type":"CtThrowImpl","sourcecode":"throw new java.lang.UnsupportedOperationException(\"remove() is not supported\")"},"status":-2},{"failures":[],"tindex":"5ecc0d2e-13d9-11e5-a42d-dd4cefca2a3d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:917","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(size()) == 0) {\n    return org.apache.commons.collections4.iterators.EmptyIterator.<K>emptyIterator();\n} "},"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}